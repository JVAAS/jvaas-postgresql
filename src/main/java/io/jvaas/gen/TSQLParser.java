// Generated from /home/vlad/Code/jvaas-platform/jvaas-postgresql/src/main/resources/antlr/TSQLParser.g4 by ANTLR 4.8
package io.jvaas.gen;

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class TSQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ADD=1, ALL=2, ALTER=3, AND=4, ANY=5, AS=6, ASC=7, AUTHORIZATION=8, BACKUP=9, 
		BEGIN=10, BETWEEN=11, BREAK=12, BROWSE=13, BULK=14, BY=15, CASCADE=16, 
		CASE=17, CHECK=18, CHECKPOINT=19, CLOSE=20, CLUSTERED=21, COALESCE=22, 
		COLLATE=23, COLUMN=24, COMMIT=25, COMPUTE=26, CONSTRAINT=27, CONTAINS=28, 
		CONTAINSTABLE=29, CONTINUE=30, CONVERT=31, CREATE=32, CROSS=33, CURRENT=34, 
		CURRENT_DATE=35, CURRENT_TIME=36, CURRENT_TIMESTAMP=37, CURRENT_USER=38, 
		CURSOR=39, DATABASE=40, DBCC=41, DEALLOCATE=42, DECLARE=43, DEFAULT=44, 
		DELETE=45, DENY=46, DESC=47, DISK=48, DISTINCT=49, DISTRIBUTED=50, DOUBLE=51, 
		DROP=52, DUMP=53, ELSE=54, END=55, ERRLVL=56, ESCAPE=57, EXCEPT=58, EXECUTE=59, 
		EXISTS=60, EXIT=61, EXTERNAL=62, FETCH=63, FILE=64, FILLFACTOR=65, FOR=66, 
		FOREIGN=67, FREETEXT=68, FREETEXTTABLE=69, FROM=70, FULL=71, FUNCTION=72, 
		GO=73, GOTO=74, GRANT=75, GROUP=76, HAVING=77, IDENTITY=78, IDENTITY_INSERT=79, 
		IDENTITYCOL=80, IF=81, IN=82, INDEX=83, INNER=84, INSERT=85, INTERSECT=86, 
		INTO=87, IS=88, JOIN=89, KEY=90, KILL=91, LEFT=92, LIKE=93, LINENO=94, 
		LOAD=95, MERGE=96, NATIONAL=97, NOCHECK=98, NONCLUSTERED=99, NOT=100, 
		NULL=101, NULLIF=102, OF=103, OFF=104, OFFSETS=105, ON=106, OPEN=107, 
		OPENDATASOURCE=108, OPENQUERY=109, OPENROWSET=110, OPENXML=111, OPTION=112, 
		OR=113, ORDER=114, OUTER=115, OVER=116, PERCENT=117, PIVOT=118, PLAN=119, 
		PRECISION=120, PRIMARY=121, PRINT=122, PROC=123, PROCEDURE=124, PUBLIC=125, 
		PYTHON=126, RAISERROR=127, READ=128, READTEXT=129, RECONFIGURE=130, REFERENCES=131, 
		REPLICATION=132, RESTORE=133, RESTRICT=134, RETURN=135, REVERT=136, REVOKE=137, 
		RIGHT=138, ROLLBACK=139, ROWCOUNT=140, ROWGUIDCOL=141, RULE=142, SAVE=143, 
		SCHEMA=144, SECURITYAUDIT=145, SELECT=146, SEMANTICKEYPHRASETABLE=147, 
		SEMANTICSIMILARITYDETAILSTABLE=148, SEMANTICSIMILARITYTABLE=149, SESSION_USER=150, 
		SET=151, SETUSER=152, SHUTDOWN=153, SOME=154, STATISTICS=155, SYSTEM_USER=156, 
		TABLE=157, TABLESAMPLE=158, TEXTSIZE=159, THEN=160, TO=161, TOP=162, TRAN=163, 
		TRANSACTION=164, TRIGGER=165, TRUNCATE=166, TSEQUAL=167, UNION=168, UNIQUE=169, 
		UNPIVOT=170, UPDATE=171, UPDATETEXT=172, USE=173, USER=174, VALUES=175, 
		VARYING=176, VIEW=177, WAITFOR=178, WHEN=179, WHERE=180, WHILE=181, WITH=182, 
		WITHIN_GROUP=183, WRITETEXT=184, FUNC_IDENTITY=185, FUNC_CURSOR_ROWS=186, 
		FUNC_DATEFIRST=187, FUNC_ERROR=188, FUNC_FETCH_STATUS=189, FUNC_PACK_RECEIVED=190, 
		FUNC_PROCID=191, FUNC_ROWCOUNT=192, FUNC_TRANCOUNT=193, ABSENT=194, ABSOLUTE=195, 
		ACCENT_SENSITIVITY=196, ACTION=197, ACTIVATION=198, ACTIVE=199, ADDRESS=200, 
		AES_128=201, AES_192=202, AES_256=203, AES=204, AFFINITY=205, AFTER=206, 
		AGGREGATE=207, ALGORITHM=208, ALLOW_CONNECTIONS=209, ALLOW_ENCRYPTED_VALUE_MODIFICATIONS=210, 
		ALLOW_MULTIPLE_EVENT_LOSS=211, ALLOW_SINGLE_EVENT_LOSS=212, ALLOW_SNAPSHOT_ISOLATION=213, 
		ALLOWED=214, ANONYMOUS=215, ANSI_NULL_DEFAULT=216, ANSI_NULLS=217, ANSI_PADDING=218, 
		ANSI_WARNINGS=219, APPEND=220, APPLICATION_LOG=221, APPLICATION=222, APPLY=223, 
		ARITHABORT=224, ASSEMBLY=225, ASYMMETRIC=226, ASYNCHRONOUS_COMMIT=227, 
		AUDIT_GUID=228, AUDIT=229, AUTHENTICATION=230, AUTO_CLEANUP=231, AUTO_CLOSE=232, 
		AUTO_CREATE_STATISTICS=233, AUTO_SHRINK=234, AUTO_UPDATE_STATISTICS_ASYNC=235, 
		AUTO_UPDATE_STATISTICS=236, AUTO=237, AUTOGROW_ALL_FILES=238, AUTOGROW_SINGLE_FILE=239, 
		AUTOMATED_BACKUP_PREFERENCE=240, AUTOMATIC=241, AVAILABILITY_MODE=242, 
		AVAILABILITY=243, BACKUP_PRIORITY=244, BEFORE=245, BEGIN_DIALOG=246, BINARY_BASE64=247, 
		BINDING=248, BLOB_STORAGE=249, BLOCK=250, BLOCKING_HIERARCHY=251, BLOCKSIZE=252, 
		BROKER_INSTANCE=253, BROKER=254, BUFFER=255, BUFFERCOUNT=256, BULK_LOGGED=257, 
		CACHE=258, CALLED=259, CALLER=260, CAP_CPU_PERCENT=261, CAST=262, CATALOG=263, 
		CATCH=264, CERTIFICATE=265, CHANGE_RETENTION=266, CHANGE_TRACKING=267, 
		CHANGES=268, CHANGETABLE=269, CHAR=270, CHARACTER=271, CHECK_EXPIRATION=272, 
		CHECK_POLICY=273, CHECKSUM=274, CLASSIFIER_FUNCTION=275, CLEANUP=276, 
		CLUSTER=277, COLLECTION=278, COLUMN_MASTER_KEY=279, COMMITTED=280, COMPATIBILITY_LEVEL=281, 
		COMPRESSION=282, CONCAT_NULL_YIELDS_NULL=283, CONCAT=284, CONFIGURATION=285, 
		CONNECT=286, CONTAINMENT=287, CONTENT=288, CONTEXT=289, CONTINUE_AFTER_ERROR=290, 
		CONTRACT_NAME=291, CONTRACT=292, CONTROL=293, CONVERSATION=294, COOKIE=295, 
		COPY_ONLY=296, COUNTER=297, CPU=298, CREATE_NEW=299, CREATION_DISPOSITION=300, 
		CREDENTIAL=301, CRYPTOGRAPHIC=302, CURSOR_CLOSE_ON_COMMIT=303, CURSOR_DEFAULT=304, 
		CYCLE=305, DATA_COMPRESSION=306, DATA_SOURCE=307, DATA=308, DATABASE_MIRRORING=309, 
		DATE_CORRELATION_OPTIMIZATION=310, DAYS=311, DB_CHAINING=312, DB_FAILOVER=313, 
		DECRYPTION=314, DEFAULT_DATABASE=315, DEFAULT_FULLTEXT_LANGUAGE=316, DEFAULT_LANGUAGE=317, 
		DEFAULT_SCHEMA=318, DELAY=319, DELAYED_DURABILITY=320, DEPENDENTS=321, 
		DES=322, DESCRIPTION=323, DESX=324, DHCP=325, DIAGNOSTICS=326, DIALOG=327, 
		DIFFERENTIAL=328, DIRECTORY_NAME=329, DISABLE_BROKER=330, DISABLE=331, 
		DISABLED=332, DOCUMENT=333, DTC_SUPPORT=334, DYNAMIC=335, ELEMENTS=336, 
		EMERGENCY=337, EMPTY=338, ENABLE_BROKER=339, ENABLE=340, ENABLED=341, 
		ENCRYPTED_VALUE=342, ENCRYPTION=343, ENDPOINT_URL=344, ENDPOINT=345, ERROR_BROKER_CONVERSATIONS=346, 
		ERROR=347, EVENT_RETENTION_MODE=348, EVENT=349, EXCLUSIVE=350, EXECUTABLE_FILE=351, 
		EXECUTABLE=352, EXPAND=353, EXPIREDATE=354, EXPIRY_DATE=355, EXPLICIT=356, 
		EXTENSION=357, EXTERNAL_ACCESS=358, FAIL_OPERATION=359, FAILOVER_MODE=360, 
		FAILOVER=361, FAILURE_CONDITION_LEVEL=362, FAILURECONDITIONLEVEL=363, 
		FALSE=364, FAN_IN=365, FAST_FORWARD=366, FAST=367, FILE_SNAPSHOT=368, 
		FILEGROUP=369, FILEGROWTH=370, FILENAME=371, FILEPATH=372, FILESTREAM_ON=373, 
		FILESTREAM=374, FILTER=375, FIRST=376, FOLLOWING=377, FORCE_FAILOVER_ALLOW_DATA_LOSS=378, 
		FORCE_SERVICE_ALLOW_DATA_LOSS=379, FORCE=380, FORCED=381, FORCESEEK=382, 
		FORMAT=383, FORWARD_ONLY=384, FULLSCAN=385, FULLTEXT=386, GB=387, GET=388, 
		GLOBAL=389, GOVERNOR=390, GROUP_MAX_REQUESTS=391, HADR=392, HASH=393, 
		HASHED=394, HEALTH_CHECK_TIMEOUT=395, HEALTHCHECKTIMEOUT=396, HIGH=397, 
		HONOR_BROKER_PRIORITY=398, HOURS=399, IDENTITY_VALUE=400, IIF=401, IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX=402, 
		IMMEDIATE=403, IMPERSONATE=404, IMPORTANCE=405, INCLUDE_NULL_VALUES=406, 
		INCLUDE=407, INCREMENT=408, INCREMENTAL=409, INFINITE=410, INIT=411, INITIATOR=412, 
		INPUT=413, INSENSITIVE=414, INSTEAD=415, IO=416, IP=417, ISOLATION=418, 
		JSON=419, KB=420, KEEP=421, KEEPFIXED=422, KERBEROS=423, KEY_PATH=424, 
		KEY_SOURCE=425, KEY_STORE_PROVIDER_NAME=426, KEYS=427, KEYSET=428, LANGUAGE=429, 
		LAST=430, LEVEL=431, LIBRARY=432, LIFETIME=433, LINUX=434, LIST=435, LISTENER_IP=436, 
		LISTENER_PORT=437, LISTENER_URL=438, LISTENER=439, LOB_COMPACTION=440, 
		LOCAL_SERVICE_NAME=441, LOCAL=442, LOCATION=443, LOCK_ESCALATION=444, 
		LOCK=445, LOG=446, LOGIN=447, LOOP=448, LOW=449, MANUAL=450, MARK=451, 
		MASTER=452, MATCHED=453, MATERIALIZED=454, MAX_CPU_PERCENT=455, MAX_DISPATCH_LATENCY=456, 
		MAX_DOP=457, MAX_EVENT_SIZE=458, MAX_FILES=459, MAX_IOPS_PER_VOLUME=460, 
		MAX_MEMORY_PERCENT=461, MAX_MEMORY=462, MAX_OUTSTANDING_IO_PER_VOLUME=463, 
		MAX_PROCESSES=464, MAX_QUEUE_READERS=465, MAX_ROLLOVER_FILES=466, MAX_SIZE=467, 
		MAX=468, MAXDOP=469, MAXRECURSION=470, MAXSIZE=471, MAXTRANSFER=472, MAXVALUE=473, 
		MB=474, MEDIADESCRIPTION=475, MEDIANAME=476, MEDIUM=477, MEMBER=478, MEMORY_OPTIMIZED_DATA=479, 
		MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT=480, MEMORY_OPTIMIZED=481, MEMORY_PARTITION_MODE=482, 
		MESSAGE_FORWARD_SIZE=483, MESSAGE_FORWARDING=484, MESSAGE=485, MIN_ACTIVE_ROWVERSION=486, 
		MIN_CPU_PERCENT=487, MIN_IOPS_PER_VOLUME=488, MIN_MEMORY_PERCENT=489, 
		MINUTES=490, MINVALUE=491, MIRROR_ADDRESS=492, MIRROR=493, MIXED_PAGE_ALLOCATION=494, 
		MODE=495, MODIFY=496, MOVE=497, MULTI_USER=498, MUST_CHANGE=499, NAME=500, 
		NCHAR=501, NEGOTIATE=502, NESTED_TRIGGERS=503, NEW_ACCOUNT=504, NEW_BROKER=505, 
		NEW_PASSWORD=506, NEWNAME=507, NEXT=508, NO_CHECKSUM=509, NO_COMPRESSION=510, 
		NO_EVENT_LOSS=511, NO_TRUNCATE=512, NO_WAIT=513, NO=514, NODES=515, NOEXPAND=516, 
		NOFORMAT=517, NOINIT=518, NON_TRANSACTED_ACCESS=519, NONE=520, NORECOMPUTE=521, 
		NORECOVERY=522, NOREWIND=523, NOSKIP=524, NOTIFICATION=525, NOUNLOAD=526, 
		NOWAIT=527, NTLM=528, NUMANODE=529, NUMERIC_ROUNDABORT=530, OBJECT=531, 
		OFFLINE=532, OFFSET=533, OLD_ACCOUNT=534, OLD_PASSWORD=535, ON_FAILURE=536, 
		ONLINE=537, ONLY=538, OPEN_EXISTING=539, OPENJSON=540, OPTIMISTIC=541, 
		OPTIMIZE=542, OUT=543, OUTPUT=544, OWNER=545, PAGE_VERIFY=546, PARAMETERIZATION=547, 
		PARSE=548, PARTIAL=549, PARTITION=550, PARTITIONS=551, PARTNER=552, PASSWORD=553, 
		PATH=554, PAUSE=555, PER_CPU=556, PER_DB=557, PER_NODE=558, PERMISSION_SET=559, 
		PERSIST_SAMPLE_PERSENT=560, PERSISTED=561, PERSISTENT_LOG_BUFFER=562, 
		PLATFORM=563, POISON_MESSAGE_HANDLING=564, POLICY=565, POOL=566, POPULATION=567, 
		PORT=568, PRECEDING=569, PREDICATE=570, PRIMARY_ROLE=571, PRIOR=572, PRIORITY_LEVEL=573, 
		PRIORITY=574, PRIVATE_KEY=575, PRIVATE=576, PRIVILEGES=577, PROCEDURE_NAME=578, 
		PROCESS=579, PROFILE=580, PROPERTY_DESCRIPTION=581, PROPERTY_INT_ID=582, 
		PROPERTY_SET_GUID=583, PROPERTY=584, PROVIDER_KEY_NAME=585, PROVIDER=586, 
		QUERYTRACEON=587, QUEUE_DELAY=588, QUEUE=589, QUOTED_IDENTIFIER=590, R_LETTER=591, 
		RANGE=592, RAW=593, RC2=594, RC4_128=595, RC4=596, READ_COMMITTED_SNAPSHOT=597, 
		READ_ONLY_ROUTING_LIST=598, READ_ONLY=599, READ_WRITE_FILEGROUPS=600, 
		READ_WRITE=601, READWRITE=602, READONLY=603, REBUILD=604, RECEIVE=605, 
		RECOMPILE=606, RECOVERY=607, RECURSIVE_TRIGGERS=608, REGENERATE=609, RELATED_CONVERSATION_GROUP=610, 
		RELATED_CONVERSATION=611, RELATIVE=612, REMOTE_SERVICE_NAME=613, REMOTE=614, 
		REMOVE=615, REORGANIZE=616, REPEATABLE=617, REPLICA=618, REQUEST_MAX_CPU_TIME_SEC=619, 
		REQUEST_MAX_MEMORY_GRANT_PERCENT=620, REQUEST_MEMORY_GRANT_TIMEOUT_SEC=621, 
		REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT=622, REQUIRED=623, RESAMPLE=624, 
		RESERVE_DISK_SPACE=625, RESET=626, RESOURCE_MANAGER_LOCATION=627, RESOURCE=628, 
		RESTART=629, RESTRICTED_USER=630, RESULT=631, RESUME=632, RETAINDAYS=633, 
		RETENTION=634, RETURNS=635, REWIND=636, ROBUST=637, ROLE=638, ROOT=639, 
		ROUTE=640, ROW=641, ROWGUID=642, ROWS=643, RSA_1024=644, RSA_2048=645, 
		RSA_3072=646, RSA_4096=647, RSA_512=648, SAFE=649, SAFETY=650, SAMPLE=651, 
		SCHEDULER=652, SCHEMABINDING=653, SCHEME=654, SCOPED=655, SCROLL_LOCKS=656, 
		SCROLL=657, SEARCH=658, SECONDARY_ONLY=659, SECONDARY_ROLE=660, SECONDARY=661, 
		SECONDS=662, SECRET=663, SECURITY_LOG=664, SECURITY=665, SEEDING_MODE=666, 
		SELECTIVE=667, SELF=668, SEMI_SENSITIVE=669, SEND=670, SENT=671, SEQUENCE=672, 
		SERIALIZABLE=673, SERVER=674, SERVICE_BROKER=675, SERVICE_NAME=676, SERVICE=677, 
		SESSION_TIMEOUT=678, SESSION=679, SETERROR=680, SETS=681, SHARE=682, SHOWPLAN=683, 
		SID=684, SIGNATURE=685, SIMPLE=686, SINGLE_USER=687, SINGLETON=688, SIZE=689, 
		SKIP_KEYWORD=690, SNAPSHOT=691, SOFTNUMA=692, SOURCE=693, SPARSE=694, 
		SPATIAL_WINDOW_MAX_CELLS=695, SPECIFICATION=696, SPLIT=697, SQL=698, SQLDUMPERFLAGS=699, 
		SQLDUMPERPATH=700, SQLDUMPERTIMEOUT=701, STANDBY=702, START_DATE=703, 
		START=704, STARTED=705, STARTUP_STATE=706, STATE=707, STATIC=708, STATISTICAL_SEMANTICS=709, 
		STATS=710, STATUS=711, STOP_ON_ERROR=712, STOP=713, STOPLIST=714, STOPPED=715, 
		STRING_AGG=716, SUBJECT=717, SUPPORTED=718, SUSPEND=719, SYMMETRIC=720, 
		SYNCHRONOUS_COMMIT=721, SYNONYM=722, SYSTEM=723, TAKE=724, TAPE=725, TARGET_RECOVERY_TIME=726, 
		TARGET=727, TB=728, TCP=729, TEXTIMAGE_ON=730, THROW=731, TIES=732, TIME=733, 
		TIMEOUT=734, TIMER=735, TORN_PAGE_DETECTION=736, TRACK_CAUSALITY=737, 
		TRACK_COLUMNS_UPDATED=738, TRANSFER=739, TRANSFORM_NOISE_WORDS=740, TRIM=741, 
		TRIPLE_DES_3KEY=742, TRIPLE_DES=743, TRUE=744, TRUSTWORTHY=745, TRY=746, 
		TSQL=747, TWO_DIGIT_YEAR_CUTOFF=748, TYPE_WARNING=749, TYPE=750, UNBOUNDED=751, 
		UNCHECKED=752, UNCOMMITTED=753, UNDEFINED=754, UNKNOWN=755, UNLIMITED=756, 
		UNLOCK=757, UNSAFE=758, URL=759, USED=760, USING=761, VALID_XML=762, VALIDATION=763, 
		VALUE=764, VERBOSELOGGING=765, VERSION=766, VIEW_METADATA=767, VIEWS=768, 
		VISIBILITY=769, WAIT=770, WELL_FORMED_XML=771, WINDOWS=772, WITHOUT_ARRAY_WRAPPER=773, 
		WITHOUT=774, WITNESS=775, WORK=776, WORKLOAD=777, XML=778, XMLDATA=779, 
		XMLNAMESPACES=780, XMLSCHEMA=781, XQUERY=782, XSINIL=783, COMMENT=784, 
		LINE_COMMENT=785, LEFT_FIGURE_PAREN=786, RIGHT_FIGURE_PAREN=787, DOUBLE_QUOTE_ID=788, 
		SINGLE_QUOTE=789, SQUARE_BRACKET_ID=790, LOCAL_ID=791, DECIMAL=792, ID=793, 
		STRING=794, BINARY=795, FLOAT=796, REAL=797, IPV4_ADDR=798, IPV6_ADDR=799, 
		BACKSLASH=800, DOUBLE_FORWARD_SLASH=801, EQUAL=802, GREATER=803, LESS=804, 
		EXCLAMATION=805, PLUS_ASSIGN=806, MINUS_ASSIGN=807, MULT_ASSIGN=808, DIV_ASSIGN=809, 
		MOD_ASSIGN=810, AND_ASSIGN=811, XOR_ASSIGN=812, OR_ASSIGN=813, DOT=814, 
		AT=815, DOLLAR=816, LR_BRACKET=817, RR_BRACKET=818, COMMA=819, SEMI=820, 
		COLON=821, STAR=822, DIVIDE=823, MODULE=824, PLUS=825, MINUS=826, BIT_NOT=827, 
		BIT_OR=828, BIT_AND=829, BIT_XOR=830, BOM=831, SPACE=832, BAD=833;
	public static final int
		RULE_tsql_file = 0, RULE_expression_eof = 1, RULE_batch = 2, RULE_batch_statement = 3, 
		RULE_batch_statement_body = 4, RULE_sql_clauses = 5, RULE_st_clause = 6, 
		RULE_dml_clause = 7, RULE_ddl_clause = 8, RULE_schema_alter = 9, RULE_schema_create = 10, 
		RULE_schema_drop = 11, RULE_backup_statement = 12, RULE_cfl_statement = 13, 
		RULE_block_statement = 14, RULE_break_statement = 15, RULE_continue_statement = 16, 
		RULE_goto_statement = 17, RULE_return_statement = 18, RULE_if_statement = 19, 
		RULE_throw_statement = 20, RULE_decimal_or_local_id = 21, RULE_string_or_local_id = 22, 
		RULE_try_catch_statement = 23, RULE_waitfor_statement = 24, RULE_while_statement = 25, 
		RULE_print_statement = 26, RULE_raiseerror_statement = 27, RULE_another_statement = 28, 
		RULE_create_aggregate = 29, RULE_alter_application_role = 30, RULE_create_application_role = 31, 
		RULE_alter_app_role_option = 32, RULE_create_app_role_option = 33, RULE_alter_assembly = 34, 
		RULE_assembly_option = 35, RULE_create_assembly = 36, RULE_assembly_permission = 37, 
		RULE_drop_assembly = 38, RULE_alter_asymmetric_key = 39, RULE_asymmetric_key_option = 40, 
		RULE_asymmetric_key_password_change_option = 41, RULE_create_asymmetric_key = 42, 
		RULE_drop_asymmetric_key = 43, RULE_alter_authorization = 44, RULE_authorization_grantee = 45, 
		RULE_class_type = 46, RULE_alter_availability_group = 47, RULE_alter_availability_group_options = 48, 
		RULE_ip_address_option = 49, RULE_create_or_alter_broker_priority = 50, 
		RULE_alter_certificate = 51, RULE_alter_column_encryption_key = 52, RULE_create_column_encryption_key = 53, 
		RULE_drop_statements = 54, RULE_drop_event_notifications_or_session = 55, 
		RULE_drop_external_library = 56, RULE_drop_master_key = 57, RULE_drop_database_encryption_key = 58, 
		RULE_drop_signature = 59, RULE_drop_symmetric_key = 60, RULE_enable_disable_trigger = 61, 
		RULE_names_references = 62, RULE_lock_table = 63, RULE_truncate_table = 64, 
		RULE_create_column_master_key = 65, RULE_alter_credential = 66, RULE_create_credential = 67, 
		RULE_alter_cryptographic_provider = 68, RULE_create_cryptographic_provider = 69, 
		RULE_create_event_notification = 70, RULE_create_or_alter_event_session = 71, 
		RULE_add_drop_event = 72, RULE_event_action = 73, RULE_add_drop_event_target = 74, 
		RULE_set_parameter = 75, RULE_create_or_alter_event_session_with = 76, 
		RULE_event_session_predicate_expression = 77, RULE_event_session_predicate_factor = 78, 
		RULE_event_session_predicate_leaf = 79, RULE_alter_external_data_source = 80, 
		RULE_alter_external_library = 81, RULE_create_external_library = 82, RULE_alter_external_resource_pool = 83, 
		RULE_create_external_resource_pool = 84, RULE_create_external_table = 85, 
		RULE_external_table_option = 86, RULE_alter_fulltext_catalog = 87, RULE_create_fulltext_catalog = 88, 
		RULE_alter_fulltext_stoplist = 89, RULE_create_fulltext_stoplist = 90, 
		RULE_alter_login_sql_server = 91, RULE_create_login_sql_server = 92, RULE_create_login_pdw = 93, 
		RULE_alter_master_key_sql_server = 94, RULE_create_master_key_sql_server = 95, 
		RULE_alter_message_type = 96, RULE_create_partition_function = 97, RULE_alter_partition_function = 98, 
		RULE_create_partition_scheme = 99, RULE_alter_partition_scheme = 100, 
		RULE_alter_remote_service_binding = 101, RULE_create_remote_service_binding = 102, 
		RULE_create_or_alter_resource_pool = 103, RULE_alter_resource_governor = 104, 
		RULE_alter_route = 105, RULE_alter_db_role = 106, RULE_create_db_role = 107, 
		RULE_create_route = 108, RULE_create_rule = 109, RULE_alter_schema_sql = 110, 
		RULE_create_schema = 111, RULE_create_search_property_list = 112, RULE_alter_search_property_list = 113, 
		RULE_add_drop_property = 114, RULE_create_security_policy = 115, RULE_alter_security_policy = 116, 
		RULE_add_alter_drop_predicate = 117, RULE_block_dml_operation = 118, RULE_alter_sequence = 119, 
		RULE_create_sequence = 120, RULE_sequence_body = 121, RULE_alter_server_audit = 122, 
		RULE_create_server_audit = 123, RULE_alter_server_audit_specification = 124, 
		RULE_create_server_audit_specification = 125, RULE_alter_server_configuration = 126, 
		RULE_alter_server_role = 127, RULE_create_server_role = 128, RULE_alter_server_role_pdw = 129, 
		RULE_alter_service = 130, RULE_create_service = 131, RULE_alter_service_master_key = 132, 
		RULE_alter_symmetric_key = 133, RULE_create_symmetric_key = 134, RULE_create_synonym = 135, 
		RULE_alter_user = 136, RULE_create_user = 137, RULE_user_login = 138, 
		RULE_user_option = 139, RULE_alter_workload_group = 140, RULE_create_workload_group = 141, 
		RULE_create_xml_schema_collection = 142, RULE_alter_xml_schema_collection = 143, 
		RULE_create_queue = 144, RULE_queue_settings = 145, RULE_alter_queue = 146, 
		RULE_queue_action = 147, RULE_queue_rebuild_options = 148, RULE_create_contract = 149, 
		RULE_conversation_statement = 150, RULE_create_message_type = 151, RULE_merge_statement = 152, 
		RULE_merge_matched = 153, RULE_merge_not_matched = 154, RULE_delete_statement = 155, 
		RULE_insert_statement = 156, RULE_waitfor_receive = 157, RULE_receive_statement = 158, 
		RULE_receive_column_specifier = 159, RULE_select_statement = 160, RULE_select_stmt_no_parens = 161, 
		RULE_select_ops = 162, RULE_select_ops_no_parens = 163, RULE_set_qualifier = 164, 
		RULE_time = 165, RULE_update_statement = 166, RULE_output_clause = 167, 
		RULE_output_dml_list_elem = 168, RULE_output_column_name = 169, RULE_create_database = 170, 
		RULE_create_database_encryption_key = 171, RULE_create_database_scoped_credential = 172, 
		RULE_create_default = 173, RULE_alter_fulltext_index = 174, RULE_alter_fulltext_index_option = 175, 
		RULE_with_no_population = 176, RULE_create_fulltext_index = 177, RULE_fulltext_index_columns = 178, 
		RULE_fulltext_index_column = 179, RULE_fulltext_index_options = 180, RULE_catalog_filegroup_option = 181, 
		RULE_fulltext_index_option = 182, RULE_create_selective_index = 183, RULE_xmlnamespace_list = 184, 
		RULE_xmlnamespace_item = 185, RULE_promoted_node_path_list = 186, RULE_named_promoted_node_path_item = 187, 
		RULE_string_id_local_id = 188, RULE_create_xml_index = 189, RULE_xml_index_using = 190, 
		RULE_create_index = 191, RULE_index_rest = 192, RULE_index_sort = 193, 
		RULE_index_include = 194, RULE_index_where = 195, RULE_create_or_alter_procedure = 196, 
		RULE_proc_body = 197, RULE_create_or_alter_trigger = 198, RULE_not_for_replication = 199, 
		RULE_with_append = 200, RULE_trigger_option = 201, RULE_trigger_operation = 202, 
		RULE_create_or_alter_function = 203, RULE_func_return = 204, RULE_func_body = 205, 
		RULE_assembly_specifier = 206, RULE_procedure_param = 207, RULE_arg_mode = 208, 
		RULE_procedure_option = 209, RULE_function_option = 210, RULE_create_statistics = 211, 
		RULE_update_statistics = 212, RULE_update_statistics_with_option = 213, 
		RULE_create_table = 214, RULE_id_or_default = 215, RULE_id_or_primary = 216, 
		RULE_table_options = 217, RULE_create_or_alter_view = 218, RULE_with_check_option = 219, 
		RULE_view_attribute = 220, RULE_alter_table = 221, RULE_table_action_drop = 222, 
		RULE_alter_database = 223, RULE_alter_database_encryption_key = 224, RULE_alter_database_scoped_credential = 225, 
		RULE_database_optionspec = 226, RULE_auto_option = 227, RULE_change_tracking_option = 228, 
		RULE_change_tracking_option_list = 229, RULE_containment_option = 230, 
		RULE_cursor_option = 231, RULE_alter_endpoint = 232, RULE_database_mirroring_option = 233, 
		RULE_partner_option = 234, RULE_witness_option = 235, RULE_date_correlation_optimization_option = 236, 
		RULE_db_encryption_option = 237, RULE_db_state_option = 238, RULE_db_update_option = 239, 
		RULE_db_user_access_option = 240, RULE_delayed_durability_option = 241, 
		RULE_external_access_option = 242, RULE_hadr_options = 243, RULE_mixed_page_allocation_option = 244, 
		RULE_parameterization_option = 245, RULE_recovery_option = 246, RULE_service_broker_option = 247, 
		RULE_snapshot_option = 248, RULE_sql_option = 249, RULE_target_recovery_time_option = 250, 
		RULE_termination = 251, RULE_drop_index = 252, RULE_drop_relational_or_xml_or_spatial_index = 253, 
		RULE_drop_backward_compatible_index = 254, RULE_drop_ddl_trigger = 255, 
		RULE_create_type = 256, RULE_type_definition = 257, RULE_rowset_function_limited = 258, 
		RULE_openquery = 259, RULE_opendatasource = 260, RULE_declare_statement = 261, 
		RULE_cursor_statement = 262, RULE_backup_database = 263, RULE_backup_log = 264, 
		RULE_backup_certificate = 265, RULE_backup_master_key = 266, RULE_backup_service_master_key = 267, 
		RULE_execute_statement = 268, RULE_execute_string = 269, RULE_execute_string_part = 270, 
		RULE_execute_module = 271, RULE_execute_statement_arg = 272, RULE_execute_option = 273, 
		RULE_result_sets_value = 274, RULE_result_sets_definition = 275, RULE_security_statement = 276, 
		RULE_rule_common = 277, RULE_permissions = 278, RULE_columns_permissions = 279, 
		RULE_table_column_privileges = 280, RULE_table_columns = 281, RULE_permission = 282, 
		RULE_object_type = 283, RULE_role_names = 284, RULE_create_certificate = 285, 
		RULE_existing_keys = 286, RULE_private_key_options = 287, RULE_generate_new_keys = 288, 
		RULE_date_options = 289, RULE_open_key = 290, RULE_close_key = 291, RULE_add_signature = 292, 
		RULE_cripto_list = 293, RULE_create_key = 294, RULE_key_options = 295, 
		RULE_algorithm = 296, RULE_encryption_mechanism = 297, RULE_decryption_mechanism = 298, 
		RULE_set_statement = 299, RULE_transaction_statement = 300, RULE_go_statement = 301, 
		RULE_use_statement = 302, RULE_setuser_statement = 303, RULE_dbcc_clause = 304, 
		RULE_execute_clause = 305, RULE_declare_local = 306, RULE_xml_type_definition = 307, 
		RULE_xml_schema_collection = 308, RULE_column_def_table_constraints = 309, 
		RULE_column_def_table_constraint = 310, RULE_table_index = 311, RULE_column_definition = 312, 
		RULE_column_option = 313, RULE_identity_value = 314, RULE_column_constraint_body = 315, 
		RULE_table_constraint = 316, RULE_table_constraint_body = 317, RULE_on_delete = 318, 
		RULE_on_update = 319, RULE_index_options = 320, RULE_index_option = 321, 
		RULE_index_option_value = 322, RULE_cursor_common = 323, RULE_declare_cursor_partial = 324, 
		RULE_set_special = 325, RULE_constant_LOCAL_ID = 326, RULE_expression = 327, 
		RULE_object_expression = 328, RULE_date_expression = 329, RULE_primitive_expression = 330, 
		RULE_case_expression = 331, RULE_constant_expression = 332, RULE_with_expression = 333, 
		RULE_common_table_expression = 334, RULE_update_elem = 335, RULE_search_condition = 336, 
		RULE_search_condition_and = 337, RULE_search_condition_not = 338, RULE_predicate = 339, 
		RULE_query_specification = 340, RULE_from_item = 341, RULE_from_primary = 342, 
		RULE_top_clause = 343, RULE_top_count = 344, RULE_order_by_clause = 345, 
		RULE_for_clause = 346, RULE_xml_common_directives = 347, RULE_order_by_expression = 348, 
		RULE_option_clause = 349, RULE_option = 350, RULE_optimize_for_arg = 351, 
		RULE_select_list = 352, RULE_select_list_elem = 353, RULE_open_xml = 354, 
		RULE_schema_declaration = 355, RULE_column_declaration = 356, RULE_change_table = 357, 
		RULE_primary_key_values = 358, RULE_full_column_name_list = 359, RULE_table_name_with_hint = 360, 
		RULE_rowset_function = 361, RULE_bulk_option = 362, RULE_derived_table = 363, 
		RULE_function_call = 364, RULE_switch_section = 365, RULE_switch_search_condition_section = 366, 
		RULE_as_table_alias = 367, RULE_with_table_hints = 368, RULE_insert_with_table_hints = 369, 
		RULE_table_hint = 370, RULE_index_value = 371, RULE_column_alias_list = 372, 
		RULE_column_alias = 373, RULE_table_value_constructor = 374, RULE_expression_list = 375, 
		RULE_all_distinct_expression = 376, RULE_over_clause = 377, RULE_row_or_range_clause = 378, 
		RULE_window_frame_extent = 379, RULE_window_frame_bound = 380, RULE_window_frame_preceding = 381, 
		RULE_window_frame_following = 382, RULE_create_database_option = 383, 
		RULE_database_filestream_option = 384, RULE_file_and_filegroup_options = 385, 
		RULE_file_spec_alter = 386, RULE_filegroup_modify_option = 387, RULE_database_file_spec = 388, 
		RULE_file_group = 389, RULE_file_spec = 390, RULE_qualified_name = 391, 
		RULE_full_column_name = 392, RULE_column_name_list_with_order = 393, RULE_column_with_order = 394, 
		RULE_asc_desc = 395, RULE_column_name_list = 396, RULE_cursor_name = 397, 
		RULE_on_off = 398, RULE_clustered = 399, RULE_null_notnull = 400, RULE_scalar_function_name = 401, 
		RULE_begin_conversation_timer = 402, RULE_begin_conversation_dialog = 403, 
		RULE_move_conversation = 404, RULE_id_or_expression = 405, RULE_end_conversation = 406, 
		RULE_waitfor_conversation = 407, RULE_get_conversation = 408, RULE_send_conversation = 409, 
		RULE_data_type = 410, RULE_data_type_size = 411, RULE_default_value = 412, 
		RULE_constant = 413, RULE_signed_numerical_literal = 414, RULE_sign = 415, 
		RULE_id = 416, RULE_simple_id = 417, RULE_comparison_operator = 418, RULE_assignment_operator = 419, 
		RULE_file_size = 420;
	private static String[] makeRuleNames() {
		return new String[] {
			"tsql_file", "expression_eof", "batch", "batch_statement", "batch_statement_body", 
			"sql_clauses", "st_clause", "dml_clause", "ddl_clause", "schema_alter", 
			"schema_create", "schema_drop", "backup_statement", "cfl_statement", 
			"block_statement", "break_statement", "continue_statement", "goto_statement", 
			"return_statement", "if_statement", "throw_statement", "decimal_or_local_id", 
			"string_or_local_id", "try_catch_statement", "waitfor_statement", "while_statement", 
			"print_statement", "raiseerror_statement", "another_statement", "create_aggregate", 
			"alter_application_role", "create_application_role", "alter_app_role_option", 
			"create_app_role_option", "alter_assembly", "assembly_option", "create_assembly", 
			"assembly_permission", "drop_assembly", "alter_asymmetric_key", "asymmetric_key_option", 
			"asymmetric_key_password_change_option", "create_asymmetric_key", "drop_asymmetric_key", 
			"alter_authorization", "authorization_grantee", "class_type", "alter_availability_group", 
			"alter_availability_group_options", "ip_address_option", "create_or_alter_broker_priority", 
			"alter_certificate", "alter_column_encryption_key", "create_column_encryption_key", 
			"drop_statements", "drop_event_notifications_or_session", "drop_external_library", 
			"drop_master_key", "drop_database_encryption_key", "drop_signature", 
			"drop_symmetric_key", "enable_disable_trigger", "names_references", "lock_table", 
			"truncate_table", "create_column_master_key", "alter_credential", "create_credential", 
			"alter_cryptographic_provider", "create_cryptographic_provider", "create_event_notification", 
			"create_or_alter_event_session", "add_drop_event", "event_action", "add_drop_event_target", 
			"set_parameter", "create_or_alter_event_session_with", "event_session_predicate_expression", 
			"event_session_predicate_factor", "event_session_predicate_leaf", "alter_external_data_source", 
			"alter_external_library", "create_external_library", "alter_external_resource_pool", 
			"create_external_resource_pool", "create_external_table", "external_table_option", 
			"alter_fulltext_catalog", "create_fulltext_catalog", "alter_fulltext_stoplist", 
			"create_fulltext_stoplist", "alter_login_sql_server", "create_login_sql_server", 
			"create_login_pdw", "alter_master_key_sql_server", "create_master_key_sql_server", 
			"alter_message_type", "create_partition_function", "alter_partition_function", 
			"create_partition_scheme", "alter_partition_scheme", "alter_remote_service_binding", 
			"create_remote_service_binding", "create_or_alter_resource_pool", "alter_resource_governor", 
			"alter_route", "alter_db_role", "create_db_role", "create_route", "create_rule", 
			"alter_schema_sql", "create_schema", "create_search_property_list", "alter_search_property_list", 
			"add_drop_property", "create_security_policy", "alter_security_policy", 
			"add_alter_drop_predicate", "block_dml_operation", "alter_sequence", 
			"create_sequence", "sequence_body", "alter_server_audit", "create_server_audit", 
			"alter_server_audit_specification", "create_server_audit_specification", 
			"alter_server_configuration", "alter_server_role", "create_server_role", 
			"alter_server_role_pdw", "alter_service", "create_service", "alter_service_master_key", 
			"alter_symmetric_key", "create_symmetric_key", "create_synonym", "alter_user", 
			"create_user", "user_login", "user_option", "alter_workload_group", "create_workload_group", 
			"create_xml_schema_collection", "alter_xml_schema_collection", "create_queue", 
			"queue_settings", "alter_queue", "queue_action", "queue_rebuild_options", 
			"create_contract", "conversation_statement", "create_message_type", "merge_statement", 
			"merge_matched", "merge_not_matched", "delete_statement", "insert_statement", 
			"waitfor_receive", "receive_statement", "receive_column_specifier", "select_statement", 
			"select_stmt_no_parens", "select_ops", "select_ops_no_parens", "set_qualifier", 
			"time", "update_statement", "output_clause", "output_dml_list_elem", 
			"output_column_name", "create_database", "create_database_encryption_key", 
			"create_database_scoped_credential", "create_default", "alter_fulltext_index", 
			"alter_fulltext_index_option", "with_no_population", "create_fulltext_index", 
			"fulltext_index_columns", "fulltext_index_column", "fulltext_index_options", 
			"catalog_filegroup_option", "fulltext_index_option", "create_selective_index", 
			"xmlnamespace_list", "xmlnamespace_item", "promoted_node_path_list", 
			"named_promoted_node_path_item", "string_id_local_id", "create_xml_index", 
			"xml_index_using", "create_index", "index_rest", "index_sort", "index_include", 
			"index_where", "create_or_alter_procedure", "proc_body", "create_or_alter_trigger", 
			"not_for_replication", "with_append", "trigger_option", "trigger_operation", 
			"create_or_alter_function", "func_return", "func_body", "assembly_specifier", 
			"procedure_param", "arg_mode", "procedure_option", "function_option", 
			"create_statistics", "update_statistics", "update_statistics_with_option", 
			"create_table", "id_or_default", "id_or_primary", "table_options", "create_or_alter_view", 
			"with_check_option", "view_attribute", "alter_table", "table_action_drop", 
			"alter_database", "alter_database_encryption_key", "alter_database_scoped_credential", 
			"database_optionspec", "auto_option", "change_tracking_option", "change_tracking_option_list", 
			"containment_option", "cursor_option", "alter_endpoint", "database_mirroring_option", 
			"partner_option", "witness_option", "date_correlation_optimization_option", 
			"db_encryption_option", "db_state_option", "db_update_option", "db_user_access_option", 
			"delayed_durability_option", "external_access_option", "hadr_options", 
			"mixed_page_allocation_option", "parameterization_option", "recovery_option", 
			"service_broker_option", "snapshot_option", "sql_option", "target_recovery_time_option", 
			"termination", "drop_index", "drop_relational_or_xml_or_spatial_index", 
			"drop_backward_compatible_index", "drop_ddl_trigger", "create_type", 
			"type_definition", "rowset_function_limited", "openquery", "opendatasource", 
			"declare_statement", "cursor_statement", "backup_database", "backup_log", 
			"backup_certificate", "backup_master_key", "backup_service_master_key", 
			"execute_statement", "execute_string", "execute_string_part", "execute_module", 
			"execute_statement_arg", "execute_option", "result_sets_value", "result_sets_definition", 
			"security_statement", "rule_common", "permissions", "columns_permissions", 
			"table_column_privileges", "table_columns", "permission", "object_type", 
			"role_names", "create_certificate", "existing_keys", "private_key_options", 
			"generate_new_keys", "date_options", "open_key", "close_key", "add_signature", 
			"cripto_list", "create_key", "key_options", "algorithm", "encryption_mechanism", 
			"decryption_mechanism", "set_statement", "transaction_statement", "go_statement", 
			"use_statement", "setuser_statement", "dbcc_clause", "execute_clause", 
			"declare_local", "xml_type_definition", "xml_schema_collection", "column_def_table_constraints", 
			"column_def_table_constraint", "table_index", "column_definition", "column_option", 
			"identity_value", "column_constraint_body", "table_constraint", "table_constraint_body", 
			"on_delete", "on_update", "index_options", "index_option", "index_option_value", 
			"cursor_common", "declare_cursor_partial", "set_special", "constant_LOCAL_ID", 
			"expression", "object_expression", "date_expression", "primitive_expression", 
			"case_expression", "constant_expression", "with_expression", "common_table_expression", 
			"update_elem", "search_condition", "search_condition_and", "search_condition_not", 
			"predicate", "query_specification", "from_item", "from_primary", "top_clause", 
			"top_count", "order_by_clause", "for_clause", "xml_common_directives", 
			"order_by_expression", "option_clause", "option", "optimize_for_arg", 
			"select_list", "select_list_elem", "open_xml", "schema_declaration", 
			"column_declaration", "change_table", "primary_key_values", "full_column_name_list", 
			"table_name_with_hint", "rowset_function", "bulk_option", "derived_table", 
			"function_call", "switch_section", "switch_search_condition_section", 
			"as_table_alias", "with_table_hints", "insert_with_table_hints", "table_hint", 
			"index_value", "column_alias_list", "column_alias", "table_value_constructor", 
			"expression_list", "all_distinct_expression", "over_clause", "row_or_range_clause", 
			"window_frame_extent", "window_frame_bound", "window_frame_preceding", 
			"window_frame_following", "create_database_option", "database_filestream_option", 
			"file_and_filegroup_options", "file_spec_alter", "filegroup_modify_option", 
			"database_file_spec", "file_group", "file_spec", "qualified_name", "full_column_name", 
			"column_name_list_with_order", "column_with_order", "asc_desc", "column_name_list", 
			"cursor_name", "on_off", "clustered", "null_notnull", "scalar_function_name", 
			"begin_conversation_timer", "begin_conversation_dialog", "move_conversation", 
			"id_or_expression", "end_conversation", "waitfor_conversation", "get_conversation", 
			"send_conversation", "data_type", "data_type_size", "default_value", 
			"constant", "signed_numerical_literal", "sign", "id", "simple_id", "comparison_operator", 
			"assignment_operator", "file_size"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, "'{'", "'}'", null, "'''", null, 
			null, null, null, null, null, null, null, null, null, "'\\'", "'//'", 
			"'='", "'>'", "'<'", "'!'", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", 
			"'^='", "'|='", "'.'", "'@'", "'$'", "'('", "')'", "','", "';'", "':'", 
			"'*'", "'/'", "'%'", "'+'", "'-'", "'~'", "'|'", "'&'", "'^'", "'\uFEFF'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ADD", "ALL", "ALTER", "AND", "ANY", "AS", "ASC", "AUTHORIZATION", 
			"BACKUP", "BEGIN", "BETWEEN", "BREAK", "BROWSE", "BULK", "BY", "CASCADE", 
			"CASE", "CHECK", "CHECKPOINT", "CLOSE", "CLUSTERED", "COALESCE", "COLLATE", 
			"COLUMN", "COMMIT", "COMPUTE", "CONSTRAINT", "CONTAINS", "CONTAINSTABLE", 
			"CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_DATE", 
			"CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", "CURSOR", "DATABASE", 
			"DBCC", "DEALLOCATE", "DECLARE", "DEFAULT", "DELETE", "DENY", "DESC", 
			"DISK", "DISTINCT", "DISTRIBUTED", "DOUBLE", "DROP", "DUMP", "ELSE", 
			"END", "ERRLVL", "ESCAPE", "EXCEPT", "EXECUTE", "EXISTS", "EXIT", "EXTERNAL", 
			"FETCH", "FILE", "FILLFACTOR", "FOR", "FOREIGN", "FREETEXT", "FREETEXTTABLE", 
			"FROM", "FULL", "FUNCTION", "GO", "GOTO", "GRANT", "GROUP", "HAVING", 
			"IDENTITY", "IDENTITY_INSERT", "IDENTITYCOL", "IF", "IN", "INDEX", "INNER", 
			"INSERT", "INTERSECT", "INTO", "IS", "JOIN", "KEY", "KILL", "LEFT", "LIKE", 
			"LINENO", "LOAD", "MERGE", "NATIONAL", "NOCHECK", "NONCLUSTERED", "NOT", 
			"NULL", "NULLIF", "OF", "OFF", "OFFSETS", "ON", "OPEN", "OPENDATASOURCE", 
			"OPENQUERY", "OPENROWSET", "OPENXML", "OPTION", "OR", "ORDER", "OUTER", 
			"OVER", "PERCENT", "PIVOT", "PLAN", "PRECISION", "PRIMARY", "PRINT", 
			"PROC", "PROCEDURE", "PUBLIC", "PYTHON", "RAISERROR", "READ", "READTEXT", 
			"RECONFIGURE", "REFERENCES", "REPLICATION", "RESTORE", "RESTRICT", "RETURN", 
			"REVERT", "REVOKE", "RIGHT", "ROLLBACK", "ROWCOUNT", "ROWGUIDCOL", "RULE", 
			"SAVE", "SCHEMA", "SECURITYAUDIT", "SELECT", "SEMANTICKEYPHRASETABLE", 
			"SEMANTICSIMILARITYDETAILSTABLE", "SEMANTICSIMILARITYTABLE", "SESSION_USER", 
			"SET", "SETUSER", "SHUTDOWN", "SOME", "STATISTICS", "SYSTEM_USER", "TABLE", 
			"TABLESAMPLE", "TEXTSIZE", "THEN", "TO", "TOP", "TRAN", "TRANSACTION", 
			"TRIGGER", "TRUNCATE", "TSEQUAL", "UNION", "UNIQUE", "UNPIVOT", "UPDATE", 
			"UPDATETEXT", "USE", "USER", "VALUES", "VARYING", "VIEW", "WAITFOR", 
			"WHEN", "WHERE", "WHILE", "WITH", "WITHIN_GROUP", "WRITETEXT", "FUNC_IDENTITY", 
			"FUNC_CURSOR_ROWS", "FUNC_DATEFIRST", "FUNC_ERROR", "FUNC_FETCH_STATUS", 
			"FUNC_PACK_RECEIVED", "FUNC_PROCID", "FUNC_ROWCOUNT", "FUNC_TRANCOUNT", 
			"ABSENT", "ABSOLUTE", "ACCENT_SENSITIVITY", "ACTION", "ACTIVATION", "ACTIVE", 
			"ADDRESS", "AES_128", "AES_192", "AES_256", "AES", "AFFINITY", "AFTER", 
			"AGGREGATE", "ALGORITHM", "ALLOW_CONNECTIONS", "ALLOW_ENCRYPTED_VALUE_MODIFICATIONS", 
			"ALLOW_MULTIPLE_EVENT_LOSS", "ALLOW_SINGLE_EVENT_LOSS", "ALLOW_SNAPSHOT_ISOLATION", 
			"ALLOWED", "ANONYMOUS", "ANSI_NULL_DEFAULT", "ANSI_NULLS", "ANSI_PADDING", 
			"ANSI_WARNINGS", "APPEND", "APPLICATION_LOG", "APPLICATION", "APPLY", 
			"ARITHABORT", "ASSEMBLY", "ASYMMETRIC", "ASYNCHRONOUS_COMMIT", "AUDIT_GUID", 
			"AUDIT", "AUTHENTICATION", "AUTO_CLEANUP", "AUTO_CLOSE", "AUTO_CREATE_STATISTICS", 
			"AUTO_SHRINK", "AUTO_UPDATE_STATISTICS_ASYNC", "AUTO_UPDATE_STATISTICS", 
			"AUTO", "AUTOGROW_ALL_FILES", "AUTOGROW_SINGLE_FILE", "AUTOMATED_BACKUP_PREFERENCE", 
			"AUTOMATIC", "AVAILABILITY_MODE", "AVAILABILITY", "BACKUP_PRIORITY", 
			"BEFORE", "BEGIN_DIALOG", "BINARY_BASE64", "BINDING", "BLOB_STORAGE", 
			"BLOCK", "BLOCKING_HIERARCHY", "BLOCKSIZE", "BROKER_INSTANCE", "BROKER", 
			"BUFFER", "BUFFERCOUNT", "BULK_LOGGED", "CACHE", "CALLED", "CALLER", 
			"CAP_CPU_PERCENT", "CAST", "CATALOG", "CATCH", "CERTIFICATE", "CHANGE_RETENTION", 
			"CHANGE_TRACKING", "CHANGES", "CHANGETABLE", "CHAR", "CHARACTER", "CHECK_EXPIRATION", 
			"CHECK_POLICY", "CHECKSUM", "CLASSIFIER_FUNCTION", "CLEANUP", "CLUSTER", 
			"COLLECTION", "COLUMN_MASTER_KEY", "COMMITTED", "COMPATIBILITY_LEVEL", 
			"COMPRESSION", "CONCAT_NULL_YIELDS_NULL", "CONCAT", "CONFIGURATION", 
			"CONNECT", "CONTAINMENT", "CONTENT", "CONTEXT", "CONTINUE_AFTER_ERROR", 
			"CONTRACT_NAME", "CONTRACT", "CONTROL", "CONVERSATION", "COOKIE", "COPY_ONLY", 
			"COUNTER", "CPU", "CREATE_NEW", "CREATION_DISPOSITION", "CREDENTIAL", 
			"CRYPTOGRAPHIC", "CURSOR_CLOSE_ON_COMMIT", "CURSOR_DEFAULT", "CYCLE", 
			"DATA_COMPRESSION", "DATA_SOURCE", "DATA", "DATABASE_MIRRORING", "DATE_CORRELATION_OPTIMIZATION", 
			"DAYS", "DB_CHAINING", "DB_FAILOVER", "DECRYPTION", "DEFAULT_DATABASE", 
			"DEFAULT_FULLTEXT_LANGUAGE", "DEFAULT_LANGUAGE", "DEFAULT_SCHEMA", "DELAY", 
			"DELAYED_DURABILITY", "DEPENDENTS", "DES", "DESCRIPTION", "DESX", "DHCP", 
			"DIAGNOSTICS", "DIALOG", "DIFFERENTIAL", "DIRECTORY_NAME", "DISABLE_BROKER", 
			"DISABLE", "DISABLED", "DOCUMENT", "DTC_SUPPORT", "DYNAMIC", "ELEMENTS", 
			"EMERGENCY", "EMPTY", "ENABLE_BROKER", "ENABLE", "ENABLED", "ENCRYPTED_VALUE", 
			"ENCRYPTION", "ENDPOINT_URL", "ENDPOINT", "ERROR_BROKER_CONVERSATIONS", 
			"ERROR", "EVENT_RETENTION_MODE", "EVENT", "EXCLUSIVE", "EXECUTABLE_FILE", 
			"EXECUTABLE", "EXPAND", "EXPIREDATE", "EXPIRY_DATE", "EXPLICIT", "EXTENSION", 
			"EXTERNAL_ACCESS", "FAIL_OPERATION", "FAILOVER_MODE", "FAILOVER", "FAILURE_CONDITION_LEVEL", 
			"FAILURECONDITIONLEVEL", "FALSE", "FAN_IN", "FAST_FORWARD", "FAST", "FILE_SNAPSHOT", 
			"FILEGROUP", "FILEGROWTH", "FILENAME", "FILEPATH", "FILESTREAM_ON", "FILESTREAM", 
			"FILTER", "FIRST", "FOLLOWING", "FORCE_FAILOVER_ALLOW_DATA_LOSS", "FORCE_SERVICE_ALLOW_DATA_LOSS", 
			"FORCE", "FORCED", "FORCESEEK", "FORMAT", "FORWARD_ONLY", "FULLSCAN", 
			"FULLTEXT", "GB", "GET", "GLOBAL", "GOVERNOR", "GROUP_MAX_REQUESTS", 
			"HADR", "HASH", "HASHED", "HEALTH_CHECK_TIMEOUT", "HEALTHCHECKTIMEOUT", 
			"HIGH", "HONOR_BROKER_PRIORITY", "HOURS", "IDENTITY_VALUE", "IIF", "IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX", 
			"IMMEDIATE", "IMPERSONATE", "IMPORTANCE", "INCLUDE_NULL_VALUES", "INCLUDE", 
			"INCREMENT", "INCREMENTAL", "INFINITE", "INIT", "INITIATOR", "INPUT", 
			"INSENSITIVE", "INSTEAD", "IO", "IP", "ISOLATION", "JSON", "KB", "KEEP", 
			"KEEPFIXED", "KERBEROS", "KEY_PATH", "KEY_SOURCE", "KEY_STORE_PROVIDER_NAME", 
			"KEYS", "KEYSET", "LANGUAGE", "LAST", "LEVEL", "LIBRARY", "LIFETIME", 
			"LINUX", "LIST", "LISTENER_IP", "LISTENER_PORT", "LISTENER_URL", "LISTENER", 
			"LOB_COMPACTION", "LOCAL_SERVICE_NAME", "LOCAL", "LOCATION", "LOCK_ESCALATION", 
			"LOCK", "LOG", "LOGIN", "LOOP", "LOW", "MANUAL", "MARK", "MASTER", "MATCHED", 
			"MATERIALIZED", "MAX_CPU_PERCENT", "MAX_DISPATCH_LATENCY", "MAX_DOP", 
			"MAX_EVENT_SIZE", "MAX_FILES", "MAX_IOPS_PER_VOLUME", "MAX_MEMORY_PERCENT", 
			"MAX_MEMORY", "MAX_OUTSTANDING_IO_PER_VOLUME", "MAX_PROCESSES", "MAX_QUEUE_READERS", 
			"MAX_ROLLOVER_FILES", "MAX_SIZE", "MAX", "MAXDOP", "MAXRECURSION", "MAXSIZE", 
			"MAXTRANSFER", "MAXVALUE", "MB", "MEDIADESCRIPTION", "MEDIANAME", "MEDIUM", 
			"MEMBER", "MEMORY_OPTIMIZED_DATA", "MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT", 
			"MEMORY_OPTIMIZED", "MEMORY_PARTITION_MODE", "MESSAGE_FORWARD_SIZE", 
			"MESSAGE_FORWARDING", "MESSAGE", "MIN_ACTIVE_ROWVERSION", "MIN_CPU_PERCENT", 
			"MIN_IOPS_PER_VOLUME", "MIN_MEMORY_PERCENT", "MINUTES", "MINVALUE", "MIRROR_ADDRESS", 
			"MIRROR", "MIXED_PAGE_ALLOCATION", "MODE", "MODIFY", "MOVE", "MULTI_USER", 
			"MUST_CHANGE", "NAME", "NCHAR", "NEGOTIATE", "NESTED_TRIGGERS", "NEW_ACCOUNT", 
			"NEW_BROKER", "NEW_PASSWORD", "NEWNAME", "NEXT", "NO_CHECKSUM", "NO_COMPRESSION", 
			"NO_EVENT_LOSS", "NO_TRUNCATE", "NO_WAIT", "NO", "NODES", "NOEXPAND", 
			"NOFORMAT", "NOINIT", "NON_TRANSACTED_ACCESS", "NONE", "NORECOMPUTE", 
			"NORECOVERY", "NOREWIND", "NOSKIP", "NOTIFICATION", "NOUNLOAD", "NOWAIT", 
			"NTLM", "NUMANODE", "NUMERIC_ROUNDABORT", "OBJECT", "OFFLINE", "OFFSET", 
			"OLD_ACCOUNT", "OLD_PASSWORD", "ON_FAILURE", "ONLINE", "ONLY", "OPEN_EXISTING", 
			"OPENJSON", "OPTIMISTIC", "OPTIMIZE", "OUT", "OUTPUT", "OWNER", "PAGE_VERIFY", 
			"PARAMETERIZATION", "PARSE", "PARTIAL", "PARTITION", "PARTITIONS", "PARTNER", 
			"PASSWORD", "PATH", "PAUSE", "PER_CPU", "PER_DB", "PER_NODE", "PERMISSION_SET", 
			"PERSIST_SAMPLE_PERSENT", "PERSISTED", "PERSISTENT_LOG_BUFFER", "PLATFORM", 
			"POISON_MESSAGE_HANDLING", "POLICY", "POOL", "POPULATION", "PORT", "PRECEDING", 
			"PREDICATE", "PRIMARY_ROLE", "PRIOR", "PRIORITY_LEVEL", "PRIORITY", "PRIVATE_KEY", 
			"PRIVATE", "PRIVILEGES", "PROCEDURE_NAME", "PROCESS", "PROFILE", "PROPERTY_DESCRIPTION", 
			"PROPERTY_INT_ID", "PROPERTY_SET_GUID", "PROPERTY", "PROVIDER_KEY_NAME", 
			"PROVIDER", "QUERYTRACEON", "QUEUE_DELAY", "QUEUE", "QUOTED_IDENTIFIER", 
			"R_LETTER", "RANGE", "RAW", "RC2", "RC4_128", "RC4", "READ_COMMITTED_SNAPSHOT", 
			"READ_ONLY_ROUTING_LIST", "READ_ONLY", "READ_WRITE_FILEGROUPS", "READ_WRITE", 
			"READWRITE", "READONLY", "REBUILD", "RECEIVE", "RECOMPILE", "RECOVERY", 
			"RECURSIVE_TRIGGERS", "REGENERATE", "RELATED_CONVERSATION_GROUP", "RELATED_CONVERSATION", 
			"RELATIVE", "REMOTE_SERVICE_NAME", "REMOTE", "REMOVE", "REORGANIZE", 
			"REPEATABLE", "REPLICA", "REQUEST_MAX_CPU_TIME_SEC", "REQUEST_MAX_MEMORY_GRANT_PERCENT", 
			"REQUEST_MEMORY_GRANT_TIMEOUT_SEC", "REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT", 
			"REQUIRED", "RESAMPLE", "RESERVE_DISK_SPACE", "RESET", "RESOURCE_MANAGER_LOCATION", 
			"RESOURCE", "RESTART", "RESTRICTED_USER", "RESULT", "RESUME", "RETAINDAYS", 
			"RETENTION", "RETURNS", "REWIND", "ROBUST", "ROLE", "ROOT", "ROUTE", 
			"ROW", "ROWGUID", "ROWS", "RSA_1024", "RSA_2048", "RSA_3072", "RSA_4096", 
			"RSA_512", "SAFE", "SAFETY", "SAMPLE", "SCHEDULER", "SCHEMABINDING", 
			"SCHEME", "SCOPED", "SCROLL_LOCKS", "SCROLL", "SEARCH", "SECONDARY_ONLY", 
			"SECONDARY_ROLE", "SECONDARY", "SECONDS", "SECRET", "SECURITY_LOG", "SECURITY", 
			"SEEDING_MODE", "SELECTIVE", "SELF", "SEMI_SENSITIVE", "SEND", "SENT", 
			"SEQUENCE", "SERIALIZABLE", "SERVER", "SERVICE_BROKER", "SERVICE_NAME", 
			"SERVICE", "SESSION_TIMEOUT", "SESSION", "SETERROR", "SETS", "SHARE", 
			"SHOWPLAN", "SID", "SIGNATURE", "SIMPLE", "SINGLE_USER", "SINGLETON", 
			"SIZE", "SKIP_KEYWORD", "SNAPSHOT", "SOFTNUMA", "SOURCE", "SPARSE", "SPATIAL_WINDOW_MAX_CELLS", 
			"SPECIFICATION", "SPLIT", "SQL", "SQLDUMPERFLAGS", "SQLDUMPERPATH", "SQLDUMPERTIMEOUT", 
			"STANDBY", "START_DATE", "START", "STARTED", "STARTUP_STATE", "STATE", 
			"STATIC", "STATISTICAL_SEMANTICS", "STATS", "STATUS", "STOP_ON_ERROR", 
			"STOP", "STOPLIST", "STOPPED", "STRING_AGG", "SUBJECT", "SUPPORTED", 
			"SUSPEND", "SYMMETRIC", "SYNCHRONOUS_COMMIT", "SYNONYM", "SYSTEM", "TAKE", 
			"TAPE", "TARGET_RECOVERY_TIME", "TARGET", "TB", "TCP", "TEXTIMAGE_ON", 
			"THROW", "TIES", "TIME", "TIMEOUT", "TIMER", "TORN_PAGE_DETECTION", "TRACK_CAUSALITY", 
			"TRACK_COLUMNS_UPDATED", "TRANSFER", "TRANSFORM_NOISE_WORDS", "TRIM", 
			"TRIPLE_DES_3KEY", "TRIPLE_DES", "TRUE", "TRUSTWORTHY", "TRY", "TSQL", 
			"TWO_DIGIT_YEAR_CUTOFF", "TYPE_WARNING", "TYPE", "UNBOUNDED", "UNCHECKED", 
			"UNCOMMITTED", "UNDEFINED", "UNKNOWN", "UNLIMITED", "UNLOCK", "UNSAFE", 
			"URL", "USED", "USING", "VALID_XML", "VALIDATION", "VALUE", "VERBOSELOGGING", 
			"VERSION", "VIEW_METADATA", "VIEWS", "VISIBILITY", "WAIT", "WELL_FORMED_XML", 
			"WINDOWS", "WITHOUT_ARRAY_WRAPPER", "WITHOUT", "WITNESS", "WORK", "WORKLOAD", 
			"XML", "XMLDATA", "XMLNAMESPACES", "XMLSCHEMA", "XQUERY", "XSINIL", "COMMENT", 
			"LINE_COMMENT", "LEFT_FIGURE_PAREN", "RIGHT_FIGURE_PAREN", "DOUBLE_QUOTE_ID", 
			"SINGLE_QUOTE", "SQUARE_BRACKET_ID", "LOCAL_ID", "DECIMAL", "ID", "STRING", 
			"BINARY", "FLOAT", "REAL", "IPV4_ADDR", "IPV6_ADDR", "BACKSLASH", "DOUBLE_FORWARD_SLASH", 
			"EQUAL", "GREATER", "LESS", "EXCLAMATION", "PLUS_ASSIGN", "MINUS_ASSIGN", 
			"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
			"OR_ASSIGN", "DOT", "AT", "DOLLAR", "LR_BRACKET", "RR_BRACKET", "COMMA", 
			"SEMI", "COLON", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "BIT_NOT", 
			"BIT_OR", "BIT_AND", "BIT_XOR", "BOM", "SPACE", "BAD"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "TSQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public TSQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class Tsql_fileContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(TSQLParser.EOF, 0); }
		public TerminalNode BOM() { return getToken(TSQLParser.BOM, 0); }
		public List<Go_statementContext> go_statement() {
			return getRuleContexts(Go_statementContext.class);
		}
		public Go_statementContext go_statement(int i) {
			return getRuleContext(Go_statementContext.class,i);
		}
		public List<BatchContext> batch() {
			return getRuleContexts(BatchContext.class);
		}
		public BatchContext batch(int i) {
			return getRuleContext(BatchContext.class,i);
		}
		public Tsql_fileContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tsql_file; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTsql_file(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTsql_file(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTsql_file(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tsql_fileContext tsql_file() throws RecognitionException {
		Tsql_fileContext _localctx = new Tsql_fileContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_tsql_file);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BOM) {
				{
				setState(842);
				match(BOM);
				}
			}

			setState(848);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==GO) {
				{
				{
				setState(845);
				go_statement();
				}
				}
				setState(850);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALTER) | (1L << BACKUP) | (1L << BEGIN) | (1L << BREAK) | (1L << CLOSE) | (1L << COMMIT) | (1L << CONTINUE) | (1L << CREATE) | (1L << DBCC) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE) | (1L << DENY) | (1L << DROP) | (1L << END) | (1L << EXECUTE) | (1L << FETCH))) != 0) || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (GRANT - 75)) | (1L << (IF - 75)) | (1L << (INSERT - 75)) | (1L << (MERGE - 75)) | (1L << (OPEN - 75)) | (1L << (PRINT - 75)) | (1L << (RAISERROR - 75)) | (1L << (RETURN - 75)) | (1L << (REVERT - 75)) | (1L << (REVOKE - 75)))) != 0) || ((((_la - 139)) & ~0x3f) == 0 && ((1L << (_la - 139)) & ((1L << (ROLLBACK - 139)) | (1L << (SAVE - 139)) | (1L << (SELECT - 139)) | (1L << (SET - 139)) | (1L << (SETUSER - 139)) | (1L << (TRUNCATE - 139)) | (1L << (UPDATE - 139)) | (1L << (USE - 139)) | (1L << (VALUES - 139)) | (1L << (WAITFOR - 139)) | (1L << (WHILE - 139)) | (1L << (WITH - 139)))) != 0) || ((((_la - 331)) & ~0x3f) == 0 && ((1L << (_la - 331)) & ((1L << (DISABLE - 331)) | (1L << (ENABLE - 331)) | (1L << (GET - 331)))) != 0) || _la==LOCK || _la==MOVE || _la==RECEIVE || _la==SEND || _la==THROW || _la==LR_BRACKET || _la==SEMI) {
				{
				{
				setState(851);
				batch();
				}
				}
				setState(856);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(857);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_eofContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode EOF() { return getToken(TSQLParser.EOF, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Expression_eofContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_eof; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExpression_eof(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExpression_eof(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExpression_eof(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_eofContext expression_eof() throws RecognitionException {
		Expression_eofContext _localctx = new Expression_eofContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_expression_eof);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(859);
			expression(0);
			setState(864);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(860);
				match(COMMA);
				setState(861);
				expression(0);
				}
				}
				setState(866);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(867);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BatchContext extends ParserRuleContext {
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public Batch_statementContext batch_statement() {
			return getRuleContext(Batch_statementContext.class,0);
		}
		public TerminalNode EOF() { return getToken(TSQLParser.EOF, 0); }
		public List<Go_statementContext> go_statement() {
			return getRuleContexts(Go_statementContext.class);
		}
		public Go_statementContext go_statement(int i) {
			return getRuleContext(Go_statementContext.class,i);
		}
		public BatchContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBatch(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBatch(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBatch(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BatchContext batch() throws RecognitionException {
		BatchContext _localctx = new BatchContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_batch);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				setState(869);
				sql_clauses();
				}
				break;
			case 2:
				{
				setState(870);
				batch_statement();
				}
				break;
			}
			setState(879);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GO:
				{
				setState(874); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(873);
					go_statement();
					}
					}
					setState(876); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==GO );
				}
				break;
			case EOF:
				{
				setState(878);
				match(EOF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Batch_statementContext extends ParserRuleContext {
		public Batch_statement_bodyContext batch_statement_body() {
			return getRuleContext(Batch_statement_bodyContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(TSQLParser.CREATE, 0); }
		public TerminalNode ALTER() { return getToken(TSQLParser.ALTER, 0); }
		public TerminalNode OR() { return getToken(TSQLParser.OR, 0); }
		public Create_schemaContext create_schema() {
			return getRuleContext(Create_schemaContext.class,0);
		}
		public List<TerminalNode> SEMI() { return getTokens(TSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(TSQLParser.SEMI, i);
		}
		public Batch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBatch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBatch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBatch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Batch_statementContext batch_statement() throws RecognitionException {
		Batch_statementContext _localctx = new Batch_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_batch_statement);
		int _la;
		try {
			setState(898);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(887);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CREATE:
					{
					setState(881);
					match(CREATE);
					setState(884);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OR) {
						{
						setState(882);
						match(OR);
						setState(883);
						match(ALTER);
						}
					}

					}
					break;
				case ALTER:
					{
					setState(886);
					match(ALTER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(889);
				batch_statement_body();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(890);
				match(CREATE);
				setState(891);
				create_schema();
				setState(895);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SEMI) {
					{
					{
					setState(892);
					match(SEMI);
					}
					}
					setState(897);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Batch_statement_bodyContext extends ParserRuleContext {
		public Create_or_alter_procedureContext create_or_alter_procedure() {
			return getRuleContext(Create_or_alter_procedureContext.class,0);
		}
		public Create_or_alter_functionContext create_or_alter_function() {
			return getRuleContext(Create_or_alter_functionContext.class,0);
		}
		public List<TerminalNode> SEMI() { return getTokens(TSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(TSQLParser.SEMI, i);
		}
		public Create_or_alter_viewContext create_or_alter_view() {
			return getRuleContext(Create_or_alter_viewContext.class,0);
		}
		public Create_or_alter_triggerContext create_or_alter_trigger() {
			return getRuleContext(Create_or_alter_triggerContext.class,0);
		}
		public Batch_statement_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_batch_statement_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBatch_statement_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBatch_statement_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBatch_statement_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Batch_statement_bodyContext batch_statement_body() throws RecognitionException {
		Batch_statement_bodyContext _localctx = new Batch_statement_bodyContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_batch_statement_body);
		int _la;
		try {
			setState(916);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROC:
			case PROCEDURE:
				enterOuterAlt(_localctx, 1);
				{
				setState(900);
				create_or_alter_procedure();
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(901);
				create_or_alter_function();
				setState(905);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SEMI) {
					{
					{
					setState(902);
					match(SEMI);
					}
					}
					setState(907);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case VIEW:
				enterOuterAlt(_localctx, 3);
				{
				setState(908);
				create_or_alter_view();
				setState(912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SEMI) {
					{
					{
					setState(909);
					match(SEMI);
					}
					}
					setState(914);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 4);
				{
				setState(915);
				create_or_alter_trigger();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_clausesContext extends ParserRuleContext {
		public List<TerminalNode> SEMI() { return getTokens(TSQLParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(TSQLParser.SEMI, i);
		}
		public List<St_clauseContext> st_clause() {
			return getRuleContexts(St_clauseContext.class);
		}
		public St_clauseContext st_clause(int i) {
			return getRuleContext(St_clauseContext.class,i);
		}
		public Sql_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSql_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSql_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSql_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_clausesContext sql_clauses() throws RecognitionException {
		Sql_clausesContext _localctx = new Sql_clausesContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_sql_clauses);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(921);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI) {
				{
				{
				setState(918);
				match(SEMI);
				}
				}
				setState(923);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(931); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(924);
					st_clause();
					setState(928);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==SEMI) {
						{
						{
						setState(925);
						match(SEMI);
						}
						}
						setState(930);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(933); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,16,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class St_clauseContext extends ParserRuleContext {
		public Dml_clauseContext dml_clause() {
			return getRuleContext(Dml_clauseContext.class,0);
		}
		public Ddl_clauseContext ddl_clause() {
			return getRuleContext(Ddl_clauseContext.class,0);
		}
		public Cfl_statementContext cfl_statement() {
			return getRuleContext(Cfl_statementContext.class,0);
		}
		public Dbcc_clauseContext dbcc_clause() {
			return getRuleContext(Dbcc_clauseContext.class,0);
		}
		public Another_statementContext another_statement() {
			return getRuleContext(Another_statementContext.class,0);
		}
		public Backup_statementContext backup_statement() {
			return getRuleContext(Backup_statementContext.class,0);
		}
		public St_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_st_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSt_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSt_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSt_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final St_clauseContext st_clause() throws RecognitionException {
		St_clauseContext _localctx = new St_clauseContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_st_clause);
		try {
			setState(941);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(935);
				dml_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(936);
				ddl_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(937);
				cfl_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(938);
				dbcc_clause();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(939);
				another_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(940);
				backup_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_clauseContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Dml_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDml_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDml_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDml_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_clauseContext dml_clause() throws RecognitionException {
		Dml_clauseContext _localctx = new Dml_clauseContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_dml_clause);
		try {
			setState(948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(943);
				merge_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(944);
				delete_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(945);
				insert_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(946);
				select_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(947);
				update_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ddl_clauseContext extends ParserRuleContext {
		public Schema_createContext schema_create() {
			return getRuleContext(Schema_createContext.class,0);
		}
		public Schema_alterContext schema_alter() {
			return getRuleContext(Schema_alterContext.class,0);
		}
		public Schema_dropContext schema_drop() {
			return getRuleContext(Schema_dropContext.class,0);
		}
		public Lock_tableContext lock_table() {
			return getRuleContext(Lock_tableContext.class,0);
		}
		public Truncate_tableContext truncate_table() {
			return getRuleContext(Truncate_tableContext.class,0);
		}
		public Enable_disable_triggerContext enable_disable_trigger() {
			return getRuleContext(Enable_disable_triggerContext.class,0);
		}
		public Update_statisticsContext update_statistics() {
			return getRuleContext(Update_statisticsContext.class,0);
		}
		public Ddl_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddl_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDdl_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDdl_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDdl_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ddl_clauseContext ddl_clause() throws RecognitionException {
		Ddl_clauseContext _localctx = new Ddl_clauseContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_ddl_clause);
		try {
			setState(957);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(950);
				schema_create();
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(951);
				schema_alter();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 3);
				{
				setState(952);
				schema_drop();
				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 4);
				{
				setState(953);
				lock_table();
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(954);
				truncate_table();
				}
				break;
			case DISABLE:
			case ENABLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(955);
				enable_disable_trigger();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(956);
				update_statistics();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_alterContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(TSQLParser.ALTER, 0); }
		public Alter_application_roleContext alter_application_role() {
			return getRuleContext(Alter_application_roleContext.class,0);
		}
		public Alter_assemblyContext alter_assembly() {
			return getRuleContext(Alter_assemblyContext.class,0);
		}
		public Alter_asymmetric_keyContext alter_asymmetric_key() {
			return getRuleContext(Alter_asymmetric_keyContext.class,0);
		}
		public Alter_authorizationContext alter_authorization() {
			return getRuleContext(Alter_authorizationContext.class,0);
		}
		public Alter_availability_groupContext alter_availability_group() {
			return getRuleContext(Alter_availability_groupContext.class,0);
		}
		public Alter_certificateContext alter_certificate() {
			return getRuleContext(Alter_certificateContext.class,0);
		}
		public Alter_column_encryption_keyContext alter_column_encryption_key() {
			return getRuleContext(Alter_column_encryption_keyContext.class,0);
		}
		public Alter_credentialContext alter_credential() {
			return getRuleContext(Alter_credentialContext.class,0);
		}
		public Alter_cryptographic_providerContext alter_cryptographic_provider() {
			return getRuleContext(Alter_cryptographic_providerContext.class,0);
		}
		public Alter_databaseContext alter_database() {
			return getRuleContext(Alter_databaseContext.class,0);
		}
		public Alter_database_encryption_keyContext alter_database_encryption_key() {
			return getRuleContext(Alter_database_encryption_keyContext.class,0);
		}
		public Alter_database_scoped_credentialContext alter_database_scoped_credential() {
			return getRuleContext(Alter_database_scoped_credentialContext.class,0);
		}
		public Alter_db_roleContext alter_db_role() {
			return getRuleContext(Alter_db_roleContext.class,0);
		}
		public Alter_endpointContext alter_endpoint() {
			return getRuleContext(Alter_endpointContext.class,0);
		}
		public Alter_external_data_sourceContext alter_external_data_source() {
			return getRuleContext(Alter_external_data_sourceContext.class,0);
		}
		public Alter_external_libraryContext alter_external_library() {
			return getRuleContext(Alter_external_libraryContext.class,0);
		}
		public Alter_external_resource_poolContext alter_external_resource_pool() {
			return getRuleContext(Alter_external_resource_poolContext.class,0);
		}
		public Alter_fulltext_catalogContext alter_fulltext_catalog() {
			return getRuleContext(Alter_fulltext_catalogContext.class,0);
		}
		public Alter_fulltext_indexContext alter_fulltext_index() {
			return getRuleContext(Alter_fulltext_indexContext.class,0);
		}
		public Alter_fulltext_stoplistContext alter_fulltext_stoplist() {
			return getRuleContext(Alter_fulltext_stoplistContext.class,0);
		}
		public Alter_login_sql_serverContext alter_login_sql_server() {
			return getRuleContext(Alter_login_sql_serverContext.class,0);
		}
		public Alter_master_key_sql_serverContext alter_master_key_sql_server() {
			return getRuleContext(Alter_master_key_sql_serverContext.class,0);
		}
		public Alter_message_typeContext alter_message_type() {
			return getRuleContext(Alter_message_typeContext.class,0);
		}
		public Alter_partition_functionContext alter_partition_function() {
			return getRuleContext(Alter_partition_functionContext.class,0);
		}
		public Alter_partition_schemeContext alter_partition_scheme() {
			return getRuleContext(Alter_partition_schemeContext.class,0);
		}
		public Alter_queueContext alter_queue() {
			return getRuleContext(Alter_queueContext.class,0);
		}
		public Alter_remote_service_bindingContext alter_remote_service_binding() {
			return getRuleContext(Alter_remote_service_bindingContext.class,0);
		}
		public Alter_resource_governorContext alter_resource_governor() {
			return getRuleContext(Alter_resource_governorContext.class,0);
		}
		public Alter_routeContext alter_route() {
			return getRuleContext(Alter_routeContext.class,0);
		}
		public Alter_schema_sqlContext alter_schema_sql() {
			return getRuleContext(Alter_schema_sqlContext.class,0);
		}
		public Alter_search_property_listContext alter_search_property_list() {
			return getRuleContext(Alter_search_property_listContext.class,0);
		}
		public Alter_security_policyContext alter_security_policy() {
			return getRuleContext(Alter_security_policyContext.class,0);
		}
		public Alter_sequenceContext alter_sequence() {
			return getRuleContext(Alter_sequenceContext.class,0);
		}
		public Alter_server_auditContext alter_server_audit() {
			return getRuleContext(Alter_server_auditContext.class,0);
		}
		public Alter_server_audit_specificationContext alter_server_audit_specification() {
			return getRuleContext(Alter_server_audit_specificationContext.class,0);
		}
		public Alter_server_configurationContext alter_server_configuration() {
			return getRuleContext(Alter_server_configurationContext.class,0);
		}
		public Alter_server_roleContext alter_server_role() {
			return getRuleContext(Alter_server_roleContext.class,0);
		}
		public Alter_server_role_pdwContext alter_server_role_pdw() {
			return getRuleContext(Alter_server_role_pdwContext.class,0);
		}
		public Alter_serviceContext alter_service() {
			return getRuleContext(Alter_serviceContext.class,0);
		}
		public Alter_service_master_keyContext alter_service_master_key() {
			return getRuleContext(Alter_service_master_keyContext.class,0);
		}
		public Alter_symmetric_keyContext alter_symmetric_key() {
			return getRuleContext(Alter_symmetric_keyContext.class,0);
		}
		public Alter_tableContext alter_table() {
			return getRuleContext(Alter_tableContext.class,0);
		}
		public Alter_userContext alter_user() {
			return getRuleContext(Alter_userContext.class,0);
		}
		public Alter_workload_groupContext alter_workload_group() {
			return getRuleContext(Alter_workload_groupContext.class,0);
		}
		public Alter_xml_schema_collectionContext alter_xml_schema_collection() {
			return getRuleContext(Alter_xml_schema_collectionContext.class,0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return getRuleContext(Create_or_alter_broker_priorityContext.class,0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return getRuleContext(Create_or_alter_event_sessionContext.class,0);
		}
		public Create_or_alter_resource_poolContext create_or_alter_resource_pool() {
			return getRuleContext(Create_or_alter_resource_poolContext.class,0);
		}
		public Create_symmetric_keyContext create_symmetric_key() {
			return getRuleContext(Create_symmetric_keyContext.class,0);
		}
		public Schema_alterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_alter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSchema_alter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSchema_alter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSchema_alter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_alterContext schema_alter() throws RecognitionException {
		Schema_alterContext _localctx = new Schema_alterContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_schema_alter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(959);
			match(ALTER);
			setState(1009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				setState(960);
				alter_application_role();
				}
				break;
			case 2:
				{
				setState(961);
				alter_assembly();
				}
				break;
			case 3:
				{
				setState(962);
				alter_asymmetric_key();
				}
				break;
			case 4:
				{
				setState(963);
				alter_authorization();
				}
				break;
			case 5:
				{
				setState(964);
				alter_availability_group();
				}
				break;
			case 6:
				{
				setState(965);
				alter_certificate();
				}
				break;
			case 7:
				{
				setState(966);
				alter_column_encryption_key();
				}
				break;
			case 8:
				{
				setState(967);
				alter_credential();
				}
				break;
			case 9:
				{
				setState(968);
				alter_cryptographic_provider();
				}
				break;
			case 10:
				{
				setState(969);
				alter_database();
				}
				break;
			case 11:
				{
				setState(970);
				alter_database_encryption_key();
				}
				break;
			case 12:
				{
				setState(971);
				alter_database_scoped_credential();
				}
				break;
			case 13:
				{
				setState(972);
				alter_db_role();
				}
				break;
			case 14:
				{
				setState(973);
				alter_endpoint();
				}
				break;
			case 15:
				{
				setState(974);
				alter_external_data_source();
				}
				break;
			case 16:
				{
				setState(975);
				alter_external_library();
				}
				break;
			case 17:
				{
				setState(976);
				alter_external_resource_pool();
				}
				break;
			case 18:
				{
				setState(977);
				alter_fulltext_catalog();
				}
				break;
			case 19:
				{
				setState(978);
				alter_fulltext_index();
				}
				break;
			case 20:
				{
				setState(979);
				alter_fulltext_stoplist();
				}
				break;
			case 21:
				{
				setState(980);
				alter_login_sql_server();
				}
				break;
			case 22:
				{
				setState(981);
				alter_master_key_sql_server();
				}
				break;
			case 23:
				{
				setState(982);
				alter_message_type();
				}
				break;
			case 24:
				{
				setState(983);
				alter_partition_function();
				}
				break;
			case 25:
				{
				setState(984);
				alter_partition_scheme();
				}
				break;
			case 26:
				{
				setState(985);
				alter_queue();
				}
				break;
			case 27:
				{
				setState(986);
				alter_remote_service_binding();
				}
				break;
			case 28:
				{
				setState(987);
				alter_resource_governor();
				}
				break;
			case 29:
				{
				setState(988);
				alter_route();
				}
				break;
			case 30:
				{
				setState(989);
				alter_schema_sql();
				}
				break;
			case 31:
				{
				setState(990);
				alter_search_property_list();
				}
				break;
			case 32:
				{
				setState(991);
				alter_security_policy();
				}
				break;
			case 33:
				{
				setState(992);
				alter_sequence();
				}
				break;
			case 34:
				{
				setState(993);
				alter_server_audit();
				}
				break;
			case 35:
				{
				setState(994);
				alter_server_audit_specification();
				}
				break;
			case 36:
				{
				setState(995);
				alter_server_configuration();
				}
				break;
			case 37:
				{
				setState(996);
				alter_server_role();
				}
				break;
			case 38:
				{
				setState(997);
				alter_server_role_pdw();
				}
				break;
			case 39:
				{
				setState(998);
				alter_service();
				}
				break;
			case 40:
				{
				setState(999);
				alter_service_master_key();
				}
				break;
			case 41:
				{
				setState(1000);
				alter_symmetric_key();
				}
				break;
			case 42:
				{
				setState(1001);
				alter_table();
				}
				break;
			case 43:
				{
				setState(1002);
				alter_user();
				}
				break;
			case 44:
				{
				setState(1003);
				alter_workload_group();
				}
				break;
			case 45:
				{
				setState(1004);
				alter_xml_schema_collection();
				}
				break;
			case 46:
				{
				setState(1005);
				create_or_alter_broker_priority();
				}
				break;
			case 47:
				{
				setState(1006);
				create_or_alter_event_session();
				}
				break;
			case 48:
				{
				setState(1007);
				create_or_alter_resource_pool();
				}
				break;
			case 49:
				{
				setState(1008);
				create_symmetric_key();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_createContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(TSQLParser.CREATE, 0); }
		public Create_aggregateContext create_aggregate() {
			return getRuleContext(Create_aggregateContext.class,0);
		}
		public Create_application_roleContext create_application_role() {
			return getRuleContext(Create_application_roleContext.class,0);
		}
		public Create_assemblyContext create_assembly() {
			return getRuleContext(Create_assemblyContext.class,0);
		}
		public Create_asymmetric_keyContext create_asymmetric_key() {
			return getRuleContext(Create_asymmetric_keyContext.class,0);
		}
		public Create_certificateContext create_certificate() {
			return getRuleContext(Create_certificateContext.class,0);
		}
		public Create_column_encryption_keyContext create_column_encryption_key() {
			return getRuleContext(Create_column_encryption_keyContext.class,0);
		}
		public Create_column_master_keyContext create_column_master_key() {
			return getRuleContext(Create_column_master_keyContext.class,0);
		}
		public Create_contractContext create_contract() {
			return getRuleContext(Create_contractContext.class,0);
		}
		public Create_credentialContext create_credential() {
			return getRuleContext(Create_credentialContext.class,0);
		}
		public Create_cryptographic_providerContext create_cryptographic_provider() {
			return getRuleContext(Create_cryptographic_providerContext.class,0);
		}
		public Create_databaseContext create_database() {
			return getRuleContext(Create_databaseContext.class,0);
		}
		public Create_database_encryption_keyContext create_database_encryption_key() {
			return getRuleContext(Create_database_encryption_keyContext.class,0);
		}
		public Create_database_scoped_credentialContext create_database_scoped_credential() {
			return getRuleContext(Create_database_scoped_credentialContext.class,0);
		}
		public Create_defaultContext create_default() {
			return getRuleContext(Create_defaultContext.class,0);
		}
		public Create_db_roleContext create_db_role() {
			return getRuleContext(Create_db_roleContext.class,0);
		}
		public Create_event_notificationContext create_event_notification() {
			return getRuleContext(Create_event_notificationContext.class,0);
		}
		public Create_external_libraryContext create_external_library() {
			return getRuleContext(Create_external_libraryContext.class,0);
		}
		public Create_external_resource_poolContext create_external_resource_pool() {
			return getRuleContext(Create_external_resource_poolContext.class,0);
		}
		public Create_external_tableContext create_external_table() {
			return getRuleContext(Create_external_tableContext.class,0);
		}
		public Create_fulltext_catalogContext create_fulltext_catalog() {
			return getRuleContext(Create_fulltext_catalogContext.class,0);
		}
		public Create_fulltext_indexContext create_fulltext_index() {
			return getRuleContext(Create_fulltext_indexContext.class,0);
		}
		public Create_fulltext_stoplistContext create_fulltext_stoplist() {
			return getRuleContext(Create_fulltext_stoplistContext.class,0);
		}
		public Create_indexContext create_index() {
			return getRuleContext(Create_indexContext.class,0);
		}
		public Create_keyContext create_key() {
			return getRuleContext(Create_keyContext.class,0);
		}
		public Create_login_pdwContext create_login_pdw() {
			return getRuleContext(Create_login_pdwContext.class,0);
		}
		public Create_login_sql_serverContext create_login_sql_server() {
			return getRuleContext(Create_login_sql_serverContext.class,0);
		}
		public Create_master_key_sql_serverContext create_master_key_sql_server() {
			return getRuleContext(Create_master_key_sql_serverContext.class,0);
		}
		public Create_message_typeContext create_message_type() {
			return getRuleContext(Create_message_typeContext.class,0);
		}
		public Create_or_alter_broker_priorityContext create_or_alter_broker_priority() {
			return getRuleContext(Create_or_alter_broker_priorityContext.class,0);
		}
		public Create_or_alter_event_sessionContext create_or_alter_event_session() {
			return getRuleContext(Create_or_alter_event_sessionContext.class,0);
		}
		public Create_or_alter_resource_poolContext create_or_alter_resource_pool() {
			return getRuleContext(Create_or_alter_resource_poolContext.class,0);
		}
		public Create_partition_functionContext create_partition_function() {
			return getRuleContext(Create_partition_functionContext.class,0);
		}
		public Create_partition_schemeContext create_partition_scheme() {
			return getRuleContext(Create_partition_schemeContext.class,0);
		}
		public Create_queueContext create_queue() {
			return getRuleContext(Create_queueContext.class,0);
		}
		public Create_remote_service_bindingContext create_remote_service_binding() {
			return getRuleContext(Create_remote_service_bindingContext.class,0);
		}
		public Create_routeContext create_route() {
			return getRuleContext(Create_routeContext.class,0);
		}
		public Create_ruleContext create_rule() {
			return getRuleContext(Create_ruleContext.class,0);
		}
		public Create_search_property_listContext create_search_property_list() {
			return getRuleContext(Create_search_property_listContext.class,0);
		}
		public Create_security_policyContext create_security_policy() {
			return getRuleContext(Create_security_policyContext.class,0);
		}
		public Create_selective_indexContext create_selective_index() {
			return getRuleContext(Create_selective_indexContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Create_server_auditContext create_server_audit() {
			return getRuleContext(Create_server_auditContext.class,0);
		}
		public Create_server_audit_specificationContext create_server_audit_specification() {
			return getRuleContext(Create_server_audit_specificationContext.class,0);
		}
		public Create_server_roleContext create_server_role() {
			return getRuleContext(Create_server_roleContext.class,0);
		}
		public Create_serviceContext create_service() {
			return getRuleContext(Create_serviceContext.class,0);
		}
		public Create_statisticsContext create_statistics() {
			return getRuleContext(Create_statisticsContext.class,0);
		}
		public Create_synonymContext create_synonym() {
			return getRuleContext(Create_synonymContext.class,0);
		}
		public Create_tableContext create_table() {
			return getRuleContext(Create_tableContext.class,0);
		}
		public Create_typeContext create_type() {
			return getRuleContext(Create_typeContext.class,0);
		}
		public Create_userContext create_user() {
			return getRuleContext(Create_userContext.class,0);
		}
		public Create_workload_groupContext create_workload_group() {
			return getRuleContext(Create_workload_groupContext.class,0);
		}
		public Create_xml_indexContext create_xml_index() {
			return getRuleContext(Create_xml_indexContext.class,0);
		}
		public Create_xml_schema_collectionContext create_xml_schema_collection() {
			return getRuleContext(Create_xml_schema_collectionContext.class,0);
		}
		public Schema_createContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_create; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSchema_create(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSchema_create(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSchema_create(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_createContext schema_create() throws RecognitionException {
		Schema_createContext _localctx = new Schema_createContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_schema_create);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1011);
			match(CREATE);
			setState(1065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(1012);
				create_aggregate();
				}
				break;
			case 2:
				{
				setState(1013);
				create_application_role();
				}
				break;
			case 3:
				{
				setState(1014);
				create_assembly();
				}
				break;
			case 4:
				{
				setState(1015);
				create_asymmetric_key();
				}
				break;
			case 5:
				{
				setState(1016);
				create_certificate();
				}
				break;
			case 6:
				{
				setState(1017);
				create_column_encryption_key();
				}
				break;
			case 7:
				{
				setState(1018);
				create_column_master_key();
				}
				break;
			case 8:
				{
				setState(1019);
				create_contract();
				}
				break;
			case 9:
				{
				setState(1020);
				create_credential();
				}
				break;
			case 10:
				{
				setState(1021);
				create_cryptographic_provider();
				}
				break;
			case 11:
				{
				setState(1022);
				create_database();
				}
				break;
			case 12:
				{
				setState(1023);
				create_database_encryption_key();
				}
				break;
			case 13:
				{
				setState(1024);
				create_database_scoped_credential();
				}
				break;
			case 14:
				{
				setState(1025);
				create_default();
				}
				break;
			case 15:
				{
				setState(1026);
				create_db_role();
				}
				break;
			case 16:
				{
				setState(1027);
				create_event_notification();
				}
				break;
			case 17:
				{
				setState(1028);
				create_external_library();
				}
				break;
			case 18:
				{
				setState(1029);
				create_external_resource_pool();
				}
				break;
			case 19:
				{
				setState(1030);
				create_external_table();
				}
				break;
			case 20:
				{
				setState(1031);
				create_fulltext_catalog();
				}
				break;
			case 21:
				{
				setState(1032);
				create_fulltext_index();
				}
				break;
			case 22:
				{
				setState(1033);
				create_fulltext_stoplist();
				}
				break;
			case 23:
				{
				setState(1034);
				create_index();
				}
				break;
			case 24:
				{
				setState(1035);
				create_key();
				}
				break;
			case 25:
				{
				setState(1036);
				create_login_pdw();
				}
				break;
			case 26:
				{
				setState(1037);
				create_login_sql_server();
				}
				break;
			case 27:
				{
				setState(1038);
				create_master_key_sql_server();
				}
				break;
			case 28:
				{
				setState(1039);
				create_message_type();
				}
				break;
			case 29:
				{
				setState(1040);
				create_or_alter_broker_priority();
				}
				break;
			case 30:
				{
				setState(1041);
				create_or_alter_event_session();
				}
				break;
			case 31:
				{
				setState(1042);
				create_or_alter_resource_pool();
				}
				break;
			case 32:
				{
				setState(1043);
				create_partition_function();
				}
				break;
			case 33:
				{
				setState(1044);
				create_partition_scheme();
				}
				break;
			case 34:
				{
				setState(1045);
				create_queue();
				}
				break;
			case 35:
				{
				setState(1046);
				create_remote_service_binding();
				}
				break;
			case 36:
				{
				setState(1047);
				create_route();
				}
				break;
			case 37:
				{
				setState(1048);
				create_rule();
				}
				break;
			case 38:
				{
				setState(1049);
				create_search_property_list();
				}
				break;
			case 39:
				{
				setState(1050);
				create_security_policy();
				}
				break;
			case 40:
				{
				setState(1051);
				create_selective_index();
				}
				break;
			case 41:
				{
				setState(1052);
				create_sequence();
				}
				break;
			case 42:
				{
				setState(1053);
				create_server_audit();
				}
				break;
			case 43:
				{
				setState(1054);
				create_server_audit_specification();
				}
				break;
			case 44:
				{
				setState(1055);
				create_server_role();
				}
				break;
			case 45:
				{
				setState(1056);
				create_service();
				}
				break;
			case 46:
				{
				setState(1057);
				create_statistics();
				}
				break;
			case 47:
				{
				setState(1058);
				create_synonym();
				}
				break;
			case 48:
				{
				setState(1059);
				create_table();
				}
				break;
			case 49:
				{
				setState(1060);
				create_type();
				}
				break;
			case 50:
				{
				setState(1061);
				create_user();
				}
				break;
			case 51:
				{
				setState(1062);
				create_workload_group();
				}
				break;
			case 52:
				{
				setState(1063);
				create_xml_index();
				}
				break;
			case 53:
				{
				setState(1064);
				create_xml_schema_collection();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_dropContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public Drop_assemblyContext drop_assembly() {
			return getRuleContext(Drop_assemblyContext.class,0);
		}
		public Drop_asymmetric_keyContext drop_asymmetric_key() {
			return getRuleContext(Drop_asymmetric_keyContext.class,0);
		}
		public Drop_database_encryption_keyContext drop_database_encryption_key() {
			return getRuleContext(Drop_database_encryption_keyContext.class,0);
		}
		public Drop_event_notifications_or_sessionContext drop_event_notifications_or_session() {
			return getRuleContext(Drop_event_notifications_or_sessionContext.class,0);
		}
		public Drop_external_libraryContext drop_external_library() {
			return getRuleContext(Drop_external_libraryContext.class,0);
		}
		public Drop_indexContext drop_index() {
			return getRuleContext(Drop_indexContext.class,0);
		}
		public Drop_master_keyContext drop_master_key() {
			return getRuleContext(Drop_master_keyContext.class,0);
		}
		public Drop_signatureContext drop_signature() {
			return getRuleContext(Drop_signatureContext.class,0);
		}
		public Drop_statementsContext drop_statements() {
			return getRuleContext(Drop_statementsContext.class,0);
		}
		public Drop_symmetric_keyContext drop_symmetric_key() {
			return getRuleContext(Drop_symmetric_keyContext.class,0);
		}
		public Drop_ddl_triggerContext drop_ddl_trigger() {
			return getRuleContext(Drop_ddl_triggerContext.class,0);
		}
		public Schema_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSchema_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSchema_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSchema_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_dropContext schema_drop() throws RecognitionException {
		Schema_dropContext _localctx = new Schema_dropContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_schema_drop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1067);
			match(DROP);
			setState(1079);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				{
				setState(1068);
				drop_assembly();
				}
				break;
			case 2:
				{
				setState(1069);
				drop_asymmetric_key();
				}
				break;
			case 3:
				{
				setState(1070);
				drop_database_encryption_key();
				}
				break;
			case 4:
				{
				setState(1071);
				drop_event_notifications_or_session();
				}
				break;
			case 5:
				{
				setState(1072);
				drop_external_library();
				}
				break;
			case 6:
				{
				setState(1073);
				drop_index();
				}
				break;
			case 7:
				{
				setState(1074);
				drop_master_key();
				}
				break;
			case 8:
				{
				setState(1075);
				drop_signature();
				}
				break;
			case 9:
				{
				setState(1076);
				drop_statements();
				}
				break;
			case 10:
				{
				setState(1077);
				drop_symmetric_key();
				}
				break;
			case 11:
				{
				setState(1078);
				drop_ddl_trigger();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_statementContext extends ParserRuleContext {
		public Backup_databaseContext backup_database() {
			return getRuleContext(Backup_databaseContext.class,0);
		}
		public Backup_logContext backup_log() {
			return getRuleContext(Backup_logContext.class,0);
		}
		public Backup_certificateContext backup_certificate() {
			return getRuleContext(Backup_certificateContext.class,0);
		}
		public Backup_master_keyContext backup_master_key() {
			return getRuleContext(Backup_master_keyContext.class,0);
		}
		public Backup_service_master_keyContext backup_service_master_key() {
			return getRuleContext(Backup_service_master_keyContext.class,0);
		}
		public Backup_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBackup_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBackup_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBackup_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_statementContext backup_statement() throws RecognitionException {
		Backup_statementContext _localctx = new Backup_statementContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_backup_statement);
		try {
			setState(1086);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1081);
				backup_database();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1082);
				backup_log();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1083);
				backup_certificate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1084);
				backup_master_key();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1085);
				backup_service_master_key();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cfl_statementContext extends ParserRuleContext {
		public Block_statementContext block_statement() {
			return getRuleContext(Block_statementContext.class,0);
		}
		public Break_statementContext break_statement() {
			return getRuleContext(Break_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Throw_statementContext throw_statement() {
			return getRuleContext(Throw_statementContext.class,0);
		}
		public Try_catch_statementContext try_catch_statement() {
			return getRuleContext(Try_catch_statementContext.class,0);
		}
		public Waitfor_statementContext waitfor_statement() {
			return getRuleContext(Waitfor_statementContext.class,0);
		}
		public While_statementContext while_statement() {
			return getRuleContext(While_statementContext.class,0);
		}
		public Print_statementContext print_statement() {
			return getRuleContext(Print_statementContext.class,0);
		}
		public Raiseerror_statementContext raiseerror_statement() {
			return getRuleContext(Raiseerror_statementContext.class,0);
		}
		public Cfl_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cfl_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCfl_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCfl_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCfl_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cfl_statementContext cfl_statement() throws RecognitionException {
		Cfl_statementContext _localctx = new Cfl_statementContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_cfl_statement);
		try {
			setState(1099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1088);
				block_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1089);
				break_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1090);
				continue_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1091);
				if_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1092);
				return_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1093);
				throw_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1094);
				try_catch_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1095);
				waitfor_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1096);
				while_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1097);
				print_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1098);
				raiseerror_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSQLParser.BEGIN, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode END() { return getToken(TSQLParser.END, 0); }
		public Block_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBlock_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBlock_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBlock_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Block_statementContext block_statement() throws RecognitionException {
		Block_statementContext _localctx = new Block_statementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_block_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1101);
			match(BEGIN);
			setState(1102);
			sql_clauses();
			setState(1103);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Break_statementContext extends ParserRuleContext {
		public TerminalNode BREAK() { return getToken(TSQLParser.BREAK, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_break_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBreak_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBreak_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBreak_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Break_statementContext break_statement() throws RecognitionException {
		Break_statementContext _localctx = new Break_statementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_break_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1105);
			match(BREAK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(TSQLParser.CONTINUE, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_continue_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1107);
			match(CONTINUE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(TSQLParser.GOTO, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode COLON() { return getToken(TSQLParser.COLON, 0); }
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_goto_statement);
		try {
			setState(1114);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GOTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(1109);
				match(GOTO);
				setState(1110);
				id();
				}
				break;
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1111);
				id();
				setState(1112);
				match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(TSQLParser.RETURN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_return_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1116);
			match(RETURN);
			setState(1118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
			case 1:
				{
				setState(1117);
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(TSQLParser.IF, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public List<St_clauseContext> st_clause() {
			return getRuleContexts(St_clauseContext.class);
		}
		public St_clauseContext st_clause(int i) {
			return getRuleContext(St_clauseContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(TSQLParser.ELSE, 0); }
		public TerminalNode SEMI() { return getToken(TSQLParser.SEMI, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1120);
			match(IF);
			setState(1121);
			search_condition();
			setState(1122);
			st_clause();
			setState(1128);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
			case 1:
				{
				setState(1124);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI) {
					{
					setState(1123);
					match(SEMI);
					}
				}

				setState(1126);
				match(ELSE);
				setState(1127);
				st_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Throw_statementContext extends ParserRuleContext {
		public TerminalNode THROW() { return getToken(TSQLParser.THROW, 0); }
		public List<Decimal_or_local_idContext> decimal_or_local_id() {
			return getRuleContexts(Decimal_or_local_idContext.class);
		}
		public Decimal_or_local_idContext decimal_or_local_id(int i) {
			return getRuleContext(Decimal_or_local_idContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public String_or_local_idContext string_or_local_id() {
			return getRuleContext(String_or_local_idContext.class,0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_throw_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterThrow_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitThrow_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitThrow_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Throw_statementContext throw_statement() throws RecognitionException {
		Throw_statementContext _localctx = new Throw_statementContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_throw_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1130);
			match(THROW);
			setState(1137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==DECIMAL) {
				{
				setState(1131);
				decimal_or_local_id();
				setState(1132);
				match(COMMA);
				setState(1133);
				string_or_local_id();
				setState(1134);
				match(COMMA);
				setState(1135);
				decimal_or_local_id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decimal_or_local_idContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public Decimal_or_local_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimal_or_local_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDecimal_or_local_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDecimal_or_local_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDecimal_or_local_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decimal_or_local_idContext decimal_or_local_id() throws RecognitionException {
		Decimal_or_local_idContext _localctx = new Decimal_or_local_idContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_decimal_or_local_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1139);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_or_local_idContext extends ParserRuleContext {
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public String_or_local_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_or_local_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterString_or_local_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitString_or_local_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitString_or_local_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_or_local_idContext string_or_local_id() throws RecognitionException {
		String_or_local_idContext _localctx = new String_or_local_idContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_string_or_local_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1141);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Try_catch_statementContext extends ParserRuleContext {
		public Sql_clausesContext try_clauses;
		public Sql_clausesContext catch_clauses;
		public List<TerminalNode> BEGIN() { return getTokens(TSQLParser.BEGIN); }
		public TerminalNode BEGIN(int i) {
			return getToken(TSQLParser.BEGIN, i);
		}
		public List<TerminalNode> TRY() { return getTokens(TSQLParser.TRY); }
		public TerminalNode TRY(int i) {
			return getToken(TSQLParser.TRY, i);
		}
		public List<TerminalNode> END() { return getTokens(TSQLParser.END); }
		public TerminalNode END(int i) {
			return getToken(TSQLParser.END, i);
		}
		public List<TerminalNode> CATCH() { return getTokens(TSQLParser.CATCH); }
		public TerminalNode CATCH(int i) {
			return getToken(TSQLParser.CATCH, i);
		}
		public TerminalNode SEMI() { return getToken(TSQLParser.SEMI, 0); }
		public List<Sql_clausesContext> sql_clauses() {
			return getRuleContexts(Sql_clausesContext.class);
		}
		public Sql_clausesContext sql_clauses(int i) {
			return getRuleContext(Sql_clausesContext.class,i);
		}
		public Try_catch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_try_catch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTry_catch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTry_catch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTry_catch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Try_catch_statementContext try_catch_statement() throws RecognitionException {
		Try_catch_statementContext _localctx = new Try_catch_statementContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_try_catch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1143);
			match(BEGIN);
			setState(1144);
			match(TRY);
			setState(1146);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(1145);
				((Try_catch_statementContext)_localctx).try_clauses = sql_clauses();
				}
				break;
			}
			setState(1148);
			match(END);
			setState(1149);
			match(TRY);
			setState(1151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(1150);
				match(SEMI);
				}
			}

			setState(1153);
			match(BEGIN);
			setState(1154);
			match(CATCH);
			setState(1156);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				setState(1155);
				((Try_catch_statementContext)_localctx).catch_clauses = sql_clauses();
				}
				break;
			}
			setState(1158);
			match(END);
			setState(1159);
			match(CATCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_statementContext extends ParserRuleContext {
		public TerminalNode WAITFOR() { return getToken(TSQLParser.WAITFOR, 0); }
		public Waitfor_receiveContext waitfor_receive() {
			return getRuleContext(Waitfor_receiveContext.class,0);
		}
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public TerminalNode DELAY() { return getToken(TSQLParser.DELAY, 0); }
		public TerminalNode TIME() { return getToken(TSQLParser.TIME, 0); }
		public Waitfor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWaitfor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWaitfor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWaitfor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Waitfor_statementContext waitfor_statement() throws RecognitionException {
		Waitfor_statementContext _localctx = new Waitfor_statementContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_waitfor_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1161);
			match(WAITFOR);
			setState(1165);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(1162);
				waitfor_receive();
				}
				break;
			case DELAY:
			case TIME:
				{
				setState(1163);
				_la = _input.LA(1);
				if ( !(_la==DELAY || _la==TIME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1164);
				time();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class While_statementContext extends ParserRuleContext {
		public TerminalNode WHILE() { return getToken(TSQLParser.WHILE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public St_clauseContext st_clause() {
			return getRuleContext(St_clauseContext.class,0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_while_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWhile_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWhile_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWhile_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final While_statementContext while_statement() throws RecognitionException {
		While_statementContext _localctx = new While_statementContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_while_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1167);
			match(WHILE);
			setState(1168);
			search_condition();
			setState(1169);
			st_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Print_statementContext extends ParserRuleContext {
		public TerminalNode PRINT() { return getToken(TSQLParser.PRINT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSQLParser.DOUBLE_QUOTE_ID, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSQLParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSQLParser.LOCAL_ID, i);
		}
		public Print_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_print_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterPrint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitPrint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitPrint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Print_statementContext print_statement() throws RecognitionException {
		Print_statementContext _localctx = new Print_statementContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_print_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1171);
			match(PRINT);
			setState(1174);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,34,_ctx) ) {
			case 1:
				{
				setState(1172);
				expression(0);
				}
				break;
			case 2:
				{
				setState(1173);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			}
			setState(1180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1176);
				match(COMMA);
				setState(1177);
				match(LOCAL_ID);
				}
				}
				setState(1182);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raiseerror_statementContext extends ParserRuleContext {
		public Token msg;
		public Constant_LOCAL_IDContext severity;
		public Constant_LOCAL_IDContext state;
		public Token formatstring;
		public Token argument;
		public TerminalNode RAISERROR() { return getToken(TSQLParser.RAISERROR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<Constant_LOCAL_IDContext> constant_LOCAL_ID() {
			return getRuleContexts(Constant_LOCAL_IDContext.class);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return getRuleContext(Constant_LOCAL_IDContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSQLParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSQLParser.LOCAL_ID, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LOG() { return getToken(TSQLParser.LOG, 0); }
		public TerminalNode SETERROR() { return getToken(TSQLParser.SETERROR, 0); }
		public TerminalNode NOWAIT() { return getToken(TSQLParser.NOWAIT, 0); }
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSQLParser.DOUBLE_QUOTE_ID, 0); }
		public Raiseerror_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raiseerror_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterRaiseerror_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitRaiseerror_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitRaiseerror_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raiseerror_statementContext raiseerror_statement() throws RecognitionException {
		Raiseerror_statementContext _localctx = new Raiseerror_statementContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_raiseerror_statement);
		int _la;
		try {
			setState(1212);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,39,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1183);
				match(RAISERROR);
				setState(1184);
				match(LR_BRACKET);
				setState(1185);
				((Raiseerror_statementContext)_localctx).msg = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & ((1L << (LOCAL_ID - 791)) | (1L << (DECIMAL - 791)) | (1L << (STRING - 791)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).msg = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1186);
				match(COMMA);
				setState(1187);
				((Raiseerror_statementContext)_localctx).severity = constant_LOCAL_ID();
				setState(1188);
				match(COMMA);
				setState(1189);
				((Raiseerror_statementContext)_localctx).state = constant_LOCAL_ID();
				setState(1194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1190);
					match(COMMA);
					setState(1191);
					constant_LOCAL_ID();
					}
					}
					setState(1196);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1197);
				match(RR_BRACKET);
				setState(1200);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
				case 1:
					{
					setState(1198);
					match(WITH);
					setState(1199);
					_la = _input.LA(1);
					if ( !(_la==LOG || _la==NOWAIT || _la==SETERROR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1202);
				match(RAISERROR);
				setState(1203);
				match(DECIMAL);
				setState(1204);
				((Raiseerror_statementContext)_localctx).formatstring = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (DOUBLE_QUOTE_ID - 788)) | (1L << (LOCAL_ID - 788)) | (1L << (STRING - 788)))) != 0)) ) {
					((Raiseerror_statementContext)_localctx).formatstring = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1205);
					match(COMMA);
					setState(1206);
					((Raiseerror_statementContext)_localctx).argument = _input.LT(1);
					_la = _input.LA(1);
					if ( !(((((_la - 791)) & ~0x3f) == 0 && ((1L << (_la - 791)) & ((1L << (LOCAL_ID - 791)) | (1L << (DECIMAL - 791)) | (1L << (STRING - 791)))) != 0)) ) {
						((Raiseerror_statementContext)_localctx).argument = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(1211);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Another_statementContext extends ParserRuleContext {
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		public Cursor_statementContext cursor_statement() {
			return getRuleContext(Cursor_statementContext.class,0);
		}
		public Conversation_statementContext conversation_statement() {
			return getRuleContext(Conversation_statementContext.class,0);
		}
		public Receive_statementContext receive_statement() {
			return getRuleContext(Receive_statementContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public Security_statementContext security_statement() {
			return getRuleContext(Security_statementContext.class,0);
		}
		public Set_statementContext set_statement() {
			return getRuleContext(Set_statementContext.class,0);
		}
		public Transaction_statementContext transaction_statement() {
			return getRuleContext(Transaction_statementContext.class,0);
		}
		public Use_statementContext use_statement() {
			return getRuleContext(Use_statementContext.class,0);
		}
		public Setuser_statementContext setuser_statement() {
			return getRuleContext(Setuser_statementContext.class,0);
		}
		public Another_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_another_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAnother_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAnother_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAnother_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Another_statementContext another_statement() throws RecognitionException {
		Another_statementContext _localctx = new Another_statementContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_another_statement);
		try {
			setState(1224);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,40,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1214);
				declare_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1215);
				cursor_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1216);
				conversation_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1217);
				receive_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1218);
				execute_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1219);
				security_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1220);
				set_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1221);
				transaction_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1222);
				use_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1223);
				setuser_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_aggregateContext extends ParserRuleContext {
		public Qualified_nameContext assembly_name;
		public TerminalNode AGGREGATE() { return getToken(TSQLParser.AGGREGATE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode RETURNS() { return getToken(TSQLParser.RETURNS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Create_aggregateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_aggregate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_aggregate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_aggregate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_aggregate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_aggregateContext create_aggregate() throws RecognitionException {
		Create_aggregateContext _localctx = new Create_aggregateContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_create_aggregate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1226);
			match(AGGREGATE);
			setState(1227);
			qualified_name();
			setState(1242);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				setState(1229);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(1228);
					match(LR_BRACKET);
					}
				}

				setState(1231);
				procedure_param();
				setState(1236);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1232);
					match(COMMA);
					setState(1233);
					procedure_param();
					}
					}
					setState(1238);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1240);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(1239);
					match(RR_BRACKET);
					}
				}

				}
			}

			setState(1244);
			match(RETURNS);
			setState(1245);
			data_type();
			setState(1246);
			match(EXTERNAL);
			setState(1247);
			match(NAME);
			setState(1248);
			((Create_aggregateContext)_localctx).assembly_name = qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_application_roleContext extends ParserRuleContext {
		public IdContext app_role;
		public TerminalNode APPLICATION() { return getToken(TSQLParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSQLParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Alter_app_role_optionContext> alter_app_role_option() {
			return getRuleContexts(Alter_app_role_optionContext.class);
		}
		public Alter_app_role_optionContext alter_app_role_option(int i) {
			return getRuleContext(Alter_app_role_optionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Alter_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_application_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_application_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_application_roleContext alter_application_role() throws RecognitionException {
		Alter_application_roleContext _localctx = new Alter_application_roleContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_alter_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1250);
			match(APPLICATION);
			setState(1251);
			match(ROLE);
			setState(1252);
			((Alter_application_roleContext)_localctx).app_role = id();
			setState(1253);
			match(WITH);
			setState(1254);
			alter_app_role_option();
			setState(1259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1255);
				match(COMMA);
				setState(1256);
				alter_app_role_option();
				}
				}
				setState(1261);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_application_roleContext extends ParserRuleContext {
		public IdContext app_role;
		public TerminalNode APPLICATION() { return getToken(TSQLParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSQLParser.ROLE, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Create_app_role_optionContext> create_app_role_option() {
			return getRuleContexts(Create_app_role_optionContext.class);
		}
		public Create_app_role_optionContext create_app_role_option(int i) {
			return getRuleContext(Create_app_role_optionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_application_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_application_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_application_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_application_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_application_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_application_roleContext create_application_role() throws RecognitionException {
		Create_application_roleContext _localctx = new Create_application_roleContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_create_application_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1262);
			match(APPLICATION);
			setState(1263);
			match(ROLE);
			setState(1264);
			((Create_application_roleContext)_localctx).app_role = id();
			setState(1265);
			match(WITH);
			setState(1266);
			create_app_role_option();
			setState(1271);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1267);
				match(COMMA);
				setState(1268);
				create_app_role_option();
				}
				}
				setState(1273);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_app_role_optionContext extends ParserRuleContext {
		public IdContext new_application_role_name;
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Create_app_role_optionContext create_app_role_option() {
			return getRuleContext(Create_app_role_optionContext.class,0);
		}
		public Alter_app_role_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_app_role_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_app_role_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_app_role_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_app_role_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_app_role_optionContext alter_app_role_option() throws RecognitionException {
		Alter_app_role_optionContext _localctx = new Alter_app_role_optionContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_alter_app_role_option);
		try {
			setState(1278);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(1274);
				match(NAME);
				setState(1275);
				match(EQUAL);
				setState(1276);
				((Alter_app_role_optionContext)_localctx).new_application_role_name = id();
				}
				break;
			case DEFAULT_SCHEMA:
			case PASSWORD:
				enterOuterAlt(_localctx, 2);
				{
				setState(1277);
				create_app_role_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_app_role_optionContext extends ParserRuleContext {
		public Token application_role_password;
		public IdContext app_role_default_schema;
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSQLParser.DEFAULT_SCHEMA, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Create_app_role_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_app_role_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_app_role_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_app_role_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_app_role_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_app_role_optionContext create_app_role_option() throws RecognitionException {
		Create_app_role_optionContext _localctx = new Create_app_role_optionContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_create_app_role_option);
		try {
			setState(1286);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PASSWORD:
				enterOuterAlt(_localctx, 1);
				{
				setState(1280);
				match(PASSWORD);
				setState(1281);
				match(EQUAL);
				setState(1282);
				((Create_app_role_optionContext)_localctx).application_role_password = match(STRING);
				}
				break;
			case DEFAULT_SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1283);
				match(DEFAULT_SCHEMA);
				setState(1284);
				match(EQUAL);
				setState(1285);
				((Create_app_role_optionContext)_localctx).app_role_default_schema = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_assemblyContext extends ParserRuleContext {
		public IdContext name;
		public TerminalNode ASSEMBLY() { return getToken(TSQLParser.ASSEMBLY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> FROM() { return getTokens(TSQLParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(TSQLParser.FROM, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Assembly_optionContext> assembly_option() {
			return getRuleContexts(Assembly_optionContext.class);
		}
		public Assembly_optionContext assembly_option(int i) {
			return getRuleContext(Assembly_optionContext.class,i);
		}
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSQLParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSQLParser.FILE, i);
		}
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> AS() { return getTokens(TSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(TSQLParser.AS, i);
		}
		public Alter_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_assembly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_assembly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_assemblyContext alter_assembly() throws RecognitionException {
		Alter_assemblyContext _localctx = new Alter_assemblyContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alter_assembly);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1288);
			match(ASSEMBLY);
			setState(1289);
			((Alter_assemblyContext)_localctx).name = id();
			setState(1299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1290);
				match(FROM);
				setState(1291);
				expression(0);
				setState(1296);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1292);
					match(COMMA);
					setState(1293);
					expression(0);
					}
					}
					setState(1298);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(1310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				{
				setState(1301);
				match(WITH);
				setState(1302);
				assembly_option();
				setState(1307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1303);
					match(COMMA);
					setState(1304);
					assembly_option();
					}
					}
					setState(1309);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(1320);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
			case 1:
				{
				setState(1312);
				match(DROP);
				setState(1313);
				match(FILE);
				setState(1318);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(1314);
					match(ALL);
					}
					break;
				case STRING:
					{
					setState(1315);
					match(STRING);
					{
					setState(1316);
					match(COMMA);
					setState(1317);
					match(STRING);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1340);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				setState(1322);
				match(ADD);
				setState(1323);
				match(FILE);
				setState(1324);
				match(FROM);
				setState(1325);
				expression(0);
				setState(1328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1326);
					match(AS);
					setState(1327);
					id();
					}
				}

				setState(1337);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1330);
					match(COMMA);
					setState(1331);
					expression(0);
					{
					setState(1332);
					match(AS);
					setState(1333);
					id();
					}
					}
					}
					setState(1339);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assembly_optionContext extends ParserRuleContext {
		public TerminalNode PERMISSION_SET() { return getToken(TSQLParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public Assembly_permissionContext assembly_permission() {
			return getRuleContext(Assembly_permissionContext.class,0);
		}
		public TerminalNode VISIBILITY() { return getToken(TSQLParser.VISIBILITY, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode UNCHECKED() { return getToken(TSQLParser.UNCHECKED, 0); }
		public TerminalNode DATA() { return getToken(TSQLParser.DATA, 0); }
		public Assembly_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assembly_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAssembly_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAssembly_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAssembly_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assembly_optionContext assembly_option() throws RecognitionException {
		Assembly_optionContext _localctx = new Assembly_optionContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_assembly_option);
		int _la;
		try {
			setState(1350);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PERMISSION_SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1342);
				match(PERMISSION_SET);
				setState(1343);
				match(EQUAL);
				setState(1344);
				assembly_permission();
				}
				break;
			case VISIBILITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1345);
				match(VISIBILITY);
				setState(1346);
				match(EQUAL);
				setState(1347);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNCHECKED:
				enterOuterAlt(_localctx, 3);
				{
				setState(1348);
				match(UNCHECKED);
				setState(1349);
				match(DATA);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public IdContext owner_name;
		public TerminalNode ASSEMBLY() { return getToken(TSQLParser.ASSEMBLY, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode PERMISSION_SET() { return getToken(TSQLParser.PERMISSION_SET, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public Assembly_permissionContext assembly_permission() {
			return getRuleContext(Assembly_permissionContext.class,0);
		}
		public Create_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_assembly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_assembly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_assemblyContext create_assembly() throws RecognitionException {
		Create_assemblyContext _localctx = new Create_assemblyContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_create_assembly);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1352);
			match(ASSEMBLY);
			setState(1353);
			((Create_assemblyContext)_localctx).assembly_name = id();
			setState(1356);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1354);
				match(AUTHORIZATION);
				setState(1355);
				((Create_assemblyContext)_localctx).owner_name = id();
				}
			}

			setState(1358);
			match(FROM);
			setState(1359);
			expression(0);
			setState(1364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1360);
				match(COMMA);
				setState(1361);
				expression(0);
				}
				}
				setState(1366);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1371);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,61,_ctx) ) {
			case 1:
				{
				setState(1367);
				match(WITH);
				setState(1368);
				match(PERMISSION_SET);
				setState(1369);
				match(EQUAL);
				setState(1370);
				assembly_permission();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assembly_permissionContext extends ParserRuleContext {
		public TerminalNode SAFE() { return getToken(TSQLParser.SAFE, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSQLParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode UNSAFE() { return getToken(TSQLParser.UNSAFE, 0); }
		public Assembly_permissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assembly_permission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAssembly_permission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAssembly_permission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAssembly_permission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assembly_permissionContext assembly_permission() throws RecognitionException {
		Assembly_permissionContext _localctx = new Assembly_permissionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_assembly_permission);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1373);
			_la = _input.LA(1);
			if ( !(_la==EXTERNAL_ACCESS || _la==SAFE || _la==UNSAFE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_assemblyContext extends ParserRuleContext {
		public IdContext assembly_name;
		public TerminalNode ASSEMBLY() { return getToken(TSQLParser.ASSEMBLY, 0); }
		public TerminalNode IF() { return getToken(TSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSQLParser.EXISTS, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode NO() { return getToken(TSQLParser.NO, 0); }
		public TerminalNode DEPENDENTS() { return getToken(TSQLParser.DEPENDENTS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Drop_assemblyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_assembly; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_assembly(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_assembly(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_assembly(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_assemblyContext drop_assembly() throws RecognitionException {
		Drop_assemblyContext _localctx = new Drop_assemblyContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_drop_assembly);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1375);
			match(ASSEMBLY);
			setState(1378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(1376);
				match(IF);
				setState(1377);
				match(EXISTS);
				}
			}

			setState(1384); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(1381);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1380);
						match(COMMA);
						}
					}

					setState(1383);
					((Drop_assemblyContext)_localctx).assembly_name = id();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1386); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,64,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(1391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				setState(1388);
				match(WITH);
				setState(1389);
				match(NO);
				setState(1390);
				match(DEPENDENTS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_asymmetric_keyContext extends ParserRuleContext {
		public IdContext Asym_Key_Name;
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(TSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSQLParser.KEY, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Asymmetric_key_optionContext asymmetric_key_option() {
			return getRuleContext(Asymmetric_key_optionContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSQLParser.REMOVE, 0); }
		public TerminalNode PRIVATE() { return getToken(TSQLParser.PRIVATE, 0); }
		public Alter_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_asymmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_asymmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_asymmetric_keyContext alter_asymmetric_key() throws RecognitionException {
		Alter_asymmetric_keyContext _localctx = new Alter_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alter_asymmetric_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1393);
			match(ASYMMETRIC);
			setState(1394);
			match(KEY);
			setState(1395);
			((Alter_asymmetric_keyContext)_localctx).Asym_Key_Name = id();
			setState(1400);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(1396);
				asymmetric_key_option();
				}
				break;
			case REMOVE:
				{
				setState(1397);
				match(REMOVE);
				setState(1398);
				match(PRIVATE);
				setState(1399);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSQLParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Asymmetric_key_password_change_optionContext> asymmetric_key_password_change_option() {
			return getRuleContexts(Asymmetric_key_password_change_optionContext.class);
		}
		public Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option(int i) {
			return getRuleContext(Asymmetric_key_password_change_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public Asymmetric_key_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAsymmetric_key_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAsymmetric_key_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAsymmetric_key_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Asymmetric_key_optionContext asymmetric_key_option() throws RecognitionException {
		Asymmetric_key_optionContext _localctx = new Asymmetric_key_optionContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_asymmetric_key_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1402);
			match(WITH);
			setState(1403);
			match(PRIVATE);
			setState(1404);
			match(KEY);
			setState(1405);
			match(LR_BRACKET);
			setState(1406);
			asymmetric_key_password_change_option();
			setState(1409);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1407);
				match(COMMA);
				setState(1408);
				asymmetric_key_password_change_option();
				}
			}

			setState(1411);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asymmetric_key_password_change_optionContext extends ParserRuleContext {
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSQLParser.DECRYPTION, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public Asymmetric_key_password_change_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asymmetric_key_password_change_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAsymmetric_key_password_change_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAsymmetric_key_password_change_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAsymmetric_key_password_change_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Asymmetric_key_password_change_optionContext asymmetric_key_password_change_option() throws RecognitionException {
		Asymmetric_key_password_change_optionContext _localctx = new Asymmetric_key_password_change_optionContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_asymmetric_key_password_change_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1413);
			_la = _input.LA(1);
			if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1414);
			match(BY);
			setState(1415);
			match(PASSWORD);
			setState(1416);
			match(EQUAL);
			setState(1417);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_asymmetric_keyContext extends ParserRuleContext {
		public IdContext Asym_Key_Nam;
		public IdContext Assembly_Name;
		public IdContext Provider_Name;
		public Token provider_key_name;
		public Token asymmetric_key_password;
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode FILE() { return getToken(TSQLParser.FILE, 0); }
		public TerminalNode EXECUTABLE_FILE() { return getToken(TSQLParser.EXECUTABLE_FILE, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSQLParser.ASSEMBLY, 0); }
		public TerminalNode PROVIDER() { return getToken(TSQLParser.PROVIDER, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSQLParser.ALGORITHM, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSQLParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSQLParser.CREATION_DISPOSITION, 0); }
		public TerminalNode RSA_4096() { return getToken(TSQLParser.RSA_4096, 0); }
		public TerminalNode RSA_3072() { return getToken(TSQLParser.RSA_3072, 0); }
		public TerminalNode RSA_2048() { return getToken(TSQLParser.RSA_2048, 0); }
		public TerminalNode RSA_1024() { return getToken(TSQLParser.RSA_1024, 0); }
		public TerminalNode RSA_512() { return getToken(TSQLParser.RSA_512, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSQLParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSQLParser.OPEN_EXISTING, 0); }
		public Create_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_asymmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_asymmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_asymmetric_keyContext create_asymmetric_key() throws RecognitionException {
		Create_asymmetric_keyContext _localctx = new Create_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_create_asymmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1419);
			match(ASYMMETRIC);
			setState(1420);
			match(KEY);
			setState(1421);
			((Create_asymmetric_keyContext)_localctx).Asym_Key_Nam = id();
			setState(1424);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(1422);
				match(AUTHORIZATION);
				setState(1423);
				id();
				}
			}

			setState(1439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1426);
				match(FROM);
				setState(1437);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILE:
					{
					setState(1427);
					match(FILE);
					setState(1428);
					match(EQUAL);
					setState(1429);
					match(STRING);
					}
					break;
				case EXECUTABLE_FILE:
					{
					setState(1430);
					match(EXECUTABLE_FILE);
					setState(1431);
					match(EQUAL);
					setState(1432);
					match(STRING);
					}
					break;
				case ASSEMBLY:
					{
					setState(1433);
					match(ASSEMBLY);
					setState(1434);
					((Create_asymmetric_keyContext)_localctx).Assembly_Name = id();
					}
					break;
				case PROVIDER:
					{
					setState(1435);
					match(PROVIDER);
					setState(1436);
					((Create_asymmetric_keyContext)_localctx).Provider_Name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(1453);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				setState(1441);
				match(WITH);
				setState(1451);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALGORITHM:
					{
					setState(1442);
					match(ALGORITHM);
					setState(1443);
					match(EQUAL);
					setState(1444);
					_la = _input.LA(1);
					if ( !(((((_la - 644)) & ~0x3f) == 0 && ((1L << (_la - 644)) & ((1L << (RSA_1024 - 644)) | (1L << (RSA_2048 - 644)) | (1L << (RSA_3072 - 644)) | (1L << (RSA_4096 - 644)) | (1L << (RSA_512 - 644)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					setState(1445);
					match(PROVIDER_KEY_NAME);
					setState(1446);
					match(EQUAL);
					setState(1447);
					((Create_asymmetric_keyContext)_localctx).provider_key_name = match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					setState(1448);
					match(CREATION_DISPOSITION);
					setState(1449);
					match(EQUAL);
					setState(1450);
					_la = _input.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(1460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPTION) {
				{
				setState(1455);
				match(ENCRYPTION);
				setState(1456);
				match(BY);
				setState(1457);
				match(PASSWORD);
				setState(1458);
				match(EQUAL);
				setState(1459);
				((Create_asymmetric_keyContext)_localctx).asymmetric_key_password = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_asymmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(TSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSQLParser.KEY, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSQLParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(TSQLParser.PROVIDER, 0); }
		public Drop_asymmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_asymmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_asymmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_asymmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_asymmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_asymmetric_keyContext drop_asymmetric_key() throws RecognitionException {
		Drop_asymmetric_keyContext _localctx = new Drop_asymmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_drop_asymmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1462);
			match(ASYMMETRIC);
			setState(1463);
			match(KEY);
			setState(1464);
			((Drop_asymmetric_keyContext)_localctx).key_name = id();
			setState(1468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REMOVE) {
				{
				setState(1465);
				match(REMOVE);
				setState(1466);
				match(PROVIDER);
				setState(1467);
				match(KEY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_authorizationContext extends ParserRuleContext {
		public Qualified_nameContext entity;
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public Authorization_granteeContext authorization_grantee() {
			return getRuleContext(Authorization_granteeContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public List<TerminalNode> COLON() { return getTokens(TSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSQLParser.COLON, i);
		}
		public Alter_authorizationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_authorization; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_authorization(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_authorization(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_authorization(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_authorizationContext alter_authorization() throws RecognitionException {
		Alter_authorizationContext _localctx = new Alter_authorizationContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_alter_authorization);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1470);
			match(AUTHORIZATION);
			setState(1471);
			match(ON);
			setState(1476);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				setState(1472);
				class_type();
				setState(1473);
				match(COLON);
				setState(1474);
				match(COLON);
				}
				break;
			}
			setState(1478);
			((Alter_authorizationContext)_localctx).entity = qualified_name();
			setState(1479);
			match(TO);
			setState(1480);
			authorization_grantee();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Authorization_granteeContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SCHEMA() { return getToken(TSQLParser.SCHEMA, 0); }
		public TerminalNode OWNER() { return getToken(TSQLParser.OWNER, 0); }
		public Authorization_granteeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authorization_grantee; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAuthorization_grantee(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAuthorization_grantee(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAuthorization_grantee(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Authorization_granteeContext authorization_grantee() throws RecognitionException {
		Authorization_granteeContext _localctx = new Authorization_granteeContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_authorization_grantee);
		try {
			setState(1485);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1482);
				id();
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(1483);
				match(SCHEMA);
				setState(1484);
				match(OWNER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Class_typeContext extends ParserRuleContext {
		public TerminalNode OBJECT() { return getToken(TSQLParser.OBJECT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSQLParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSQLParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSQLParser.GROUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode CONTRACT() { return getToken(TSQLParser.CONTRACT, 0); }
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSQLParser.ENDPOINT, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSQLParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSQLParser.CATALOG, 0); }
		public TerminalNode STOPLIST() { return getToken(TSQLParser.STOPLIST, 0); }
		public TerminalNode MESSAGE() { return getToken(TSQLParser.MESSAGE, 0); }
		public TerminalNode REMOTE() { return getToken(TSQLParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSQLParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSQLParser.BINDING, 0); }
		public TerminalNode ROLE() { return getToken(TSQLParser.ROLE, 0); }
		public TerminalNode ROUTE() { return getToken(TSQLParser.ROUTE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSQLParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(TSQLParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSQLParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSQLParser.LIST, 0); }
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSQLParser.SYMMETRIC, 0); }
		public TerminalNode USER() { return getToken(TSQLParser.USER, 0); }
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSQLParser.COLLECTION, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_class_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterClass_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitClass_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitClass_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Class_typeContext class_type() throws RecognitionException {
		Class_typeContext _localctx = new Class_typeContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_class_type);
		try {
			setState(1522);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1487);
				match(OBJECT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1488);
				match(ASSEMBLY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1489);
				match(ASYMMETRIC);
				setState(1490);
				match(KEY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1491);
				match(AVAILABILITY);
				setState(1492);
				match(GROUP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1493);
				match(CERTIFICATE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1494);
				match(CONTRACT);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1495);
				match(TYPE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1496);
				match(DATABASE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1497);
				match(ENDPOINT);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1498);
				match(FULLTEXT);
				setState(1499);
				match(CATALOG);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1500);
				match(FULLTEXT);
				setState(1501);
				match(STOPLIST);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1502);
				match(MESSAGE);
				setState(1503);
				match(TYPE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1504);
				match(REMOTE);
				setState(1505);
				match(SERVICE);
				setState(1506);
				match(BINDING);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1507);
				match(ROLE);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1508);
				match(ROUTE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1509);
				match(SCHEMA);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1510);
				match(SEARCH);
				setState(1511);
				match(PROPERTY);
				setState(1512);
				match(LIST);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1513);
				match(SERVER);
				setState(1514);
				match(ROLE);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1515);
				match(SERVICE);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1516);
				match(SYMMETRIC);
				setState(1517);
				match(KEY);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1518);
				match(USER);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1519);
				match(XML);
				setState(1520);
				match(SCHEMA);
				setState(1521);
				match(COLLECTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_groupContext extends ParserRuleContext {
		public IdContext group_name;
		public TerminalNode AVAILABILITY() { return getToken(TSQLParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSQLParser.GROUP, 0); }
		public Alter_availability_group_optionsContext alter_availability_group_options() {
			return getRuleContext(Alter_availability_group_optionsContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_availability_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_availability_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_availability_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_availability_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_availability_groupContext alter_availability_group() throws RecognitionException {
		Alter_availability_groupContext _localctx = new Alter_availability_groupContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_alter_availability_group);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1524);
			match(AVAILABILITY);
			setState(1525);
			match(GROUP);
			setState(1526);
			((Alter_availability_groupContext)_localctx).group_name = id();
			setState(1527);
			alter_availability_group_options();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_availability_group_optionsContext extends ParserRuleContext {
		public Token milliseconds;
		public IdContext database_name;
		public Token server_instance;
		public Token session_timeout;
		public Token ag_name;
		public Token ag_name_modified;
		public Token listener_name;
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode AUTOMATED_BACKUP_PREFERENCE() { return getToken(TSQLParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(TSQLParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(TSQLParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(TSQLParser.DB_FAILOVER, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(TSQLParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode PRIMARY() { return getToken(TSQLParser.PRIMARY, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(TSQLParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY() { return getToken(TSQLParser.SECONDARY, 0); }
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSQLParser.REMOVE, 0); }
		public TerminalNode REPLICA() { return getToken(TSQLParser.REPLICA, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> WITH() { return getTokens(TSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSQLParser.WITH, i);
		}
		public TerminalNode ENDPOINT_URL() { return getToken(TSQLParser.ENDPOINT_URL, 0); }
		public List<TerminalNode> AVAILABILITY_MODE() { return getTokens(TSQLParser.AVAILABILITY_MODE); }
		public TerminalNode AVAILABILITY_MODE(int i) {
			return getToken(TSQLParser.AVAILABILITY_MODE, i);
		}
		public List<TerminalNode> FAILOVER_MODE() { return getTokens(TSQLParser.FAILOVER_MODE); }
		public TerminalNode FAILOVER_MODE(int i) {
			return getToken(TSQLParser.FAILOVER_MODE, i);
		}
		public List<TerminalNode> SEEDING_MODE() { return getTokens(TSQLParser.SEEDING_MODE); }
		public TerminalNode SEEDING_MODE(int i) {
			return getToken(TSQLParser.SEEDING_MODE, i);
		}
		public TerminalNode BACKUP_PRIORITY() { return getToken(TSQLParser.BACKUP_PRIORITY, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(TSQLParser.PRIMARY_ROLE, 0); }
		public List<TerminalNode> ALLOW_CONNECTIONS() { return getTokens(TSQLParser.ALLOW_CONNECTIONS); }
		public TerminalNode ALLOW_CONNECTIONS(int i) {
			return getToken(TSQLParser.ALLOW_CONNECTIONS, i);
		}
		public TerminalNode SECONDARY_ROLE() { return getToken(TSQLParser.SECONDARY_ROLE, 0); }
		public List<TerminalNode> SYNCHRONOUS_COMMIT() { return getTokens(TSQLParser.SYNCHRONOUS_COMMIT); }
		public TerminalNode SYNCHRONOUS_COMMIT(int i) {
			return getToken(TSQLParser.SYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> ASYNCHRONOUS_COMMIT() { return getTokens(TSQLParser.ASYNCHRONOUS_COMMIT); }
		public TerminalNode ASYNCHRONOUS_COMMIT(int i) {
			return getToken(TSQLParser.ASYNCHRONOUS_COMMIT, i);
		}
		public List<TerminalNode> AUTOMATIC() { return getTokens(TSQLParser.AUTOMATIC); }
		public TerminalNode AUTOMATIC(int i) {
			return getToken(TSQLParser.AUTOMATIC, i);
		}
		public List<TerminalNode> MANUAL() { return getTokens(TSQLParser.MANUAL); }
		public TerminalNode MANUAL(int i) {
			return getToken(TSQLParser.MANUAL, i);
		}
		public TerminalNode READ_WRITE() { return getToken(TSQLParser.READ_WRITE, 0); }
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSQLParser.READ_ONLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(TSQLParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode NO() { return getToken(TSQLParser.NO, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(TSQLParser.SESSION_TIMEOUT, 0); }
		public TerminalNode MODIFY() { return getToken(TSQLParser.MODIFY, 0); }
		public TerminalNode JOIN() { return getToken(TSQLParser.JOIN, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSQLParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSQLParser.GROUP, 0); }
		public List<TerminalNode> LISTENER_URL() { return getTokens(TSQLParser.LISTENER_URL); }
		public TerminalNode LISTENER_URL(int i) {
			return getToken(TSQLParser.LISTENER_URL, i);
		}
		public TerminalNode GRANT() { return getToken(TSQLParser.GRANT, 0); }
		public TerminalNode CREATE() { return getToken(TSQLParser.CREATE, 0); }
		public TerminalNode ANY() { return getToken(TSQLParser.ANY, 0); }
		public TerminalNode DENY() { return getToken(TSQLParser.DENY, 0); }
		public TerminalNode FAILOVER() { return getToken(TSQLParser.FAILOVER, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(TSQLParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode LISTENER() { return getToken(TSQLParser.LISTENER, 0); }
		public TerminalNode DHCP() { return getToken(TSQLParser.DHCP, 0); }
		public TerminalNode IP() { return getToken(TSQLParser.IP, 0); }
		public List<TerminalNode> IPV4_ADDR() { return getTokens(TSQLParser.IPV4_ADDR); }
		public TerminalNode IPV4_ADDR(int i) {
			return getToken(TSQLParser.IPV4_ADDR, i);
		}
		public List<Ip_address_optionContext> ip_address_option() {
			return getRuleContexts(Ip_address_optionContext.class);
		}
		public Ip_address_optionContext ip_address_option(int i) {
			return getRuleContext(Ip_address_optionContext.class,i);
		}
		public TerminalNode PORT() { return getToken(TSQLParser.PORT, 0); }
		public TerminalNode RESTART() { return getToken(TSQLParser.RESTART, 0); }
		public TerminalNode OFFLINE() { return getToken(TSQLParser.OFFLINE, 0); }
		public TerminalNode DTC_SUPPORT() { return getToken(TSQLParser.DTC_SUPPORT, 0); }
		public TerminalNode PER_DB() { return getToken(TSQLParser.PER_DB, 0); }
		public Alter_availability_group_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_availability_group_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_availability_group_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_availability_group_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_availability_group_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_availability_group_optionsContext alter_availability_group_options() throws RecognitionException {
		Alter_availability_group_optionsContext _localctx = new Alter_availability_group_optionsContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_alter_availability_group_options);
		int _la;
		try {
			setState(1871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1529);
				match(SET);
				setState(1530);
				match(LR_BRACKET);
				{
				setState(1546);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTOMATED_BACKUP_PREFERENCE:
					{
					setState(1531);
					match(AUTOMATED_BACKUP_PREFERENCE);
					setState(1532);
					match(EQUAL);
					setState(1533);
					_la = _input.LA(1);
					if ( !(_la==PRIMARY || _la==NONE || _la==SECONDARY_ONLY || _la==SECONDARY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FAILURE_CONDITION_LEVEL:
					{
					setState(1534);
					match(FAILURE_CONDITION_LEVEL);
					setState(1535);
					match(EQUAL);
					setState(1536);
					match(DECIMAL);
					}
					break;
				case HEALTH_CHECK_TIMEOUT:
					{
					setState(1537);
					match(HEALTH_CHECK_TIMEOUT);
					setState(1538);
					match(EQUAL);
					setState(1539);
					((Alter_availability_group_optionsContext)_localctx).milliseconds = match(DECIMAL);
					}
					break;
				case DB_FAILOVER:
					{
					setState(1540);
					match(DB_FAILOVER);
					setState(1541);
					match(EQUAL);
					setState(1542);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					{
					setState(1543);
					match(REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT);
					setState(1544);
					match(EQUAL);
					setState(1545);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1548);
				match(RR_BRACKET);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1549);
				match(ADD);
				setState(1550);
				match(DATABASE);
				setState(1551);
				((Alter_availability_group_optionsContext)_localctx).database_name = id();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1552);
				match(REMOVE);
				setState(1553);
				match(DATABASE);
				setState(1554);
				((Alter_availability_group_optionsContext)_localctx).database_name = id();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1555);
				match(ADD);
				setState(1556);
				match(REPLICA);
				setState(1557);
				match(ON);
				setState(1558);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				{
				setState(1559);
				match(WITH);
				setState(1560);
				match(LR_BRACKET);
				{
				setState(1564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENDPOINT_URL) {
					{
					setState(1561);
					match(ENDPOINT_URL);
					setState(1562);
					match(EQUAL);
					setState(1563);
					match(STRING);
					}
				}

				setState(1572);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,81,_ctx) ) {
				case 1:
					{
					setState(1567);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1566);
						match(COMMA);
						}
					}

					setState(1569);
					match(AVAILABILITY_MODE);
					setState(1570);
					match(EQUAL);
					setState(1571);
					_la = _input.LA(1);
					if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1580);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,83,_ctx) ) {
				case 1:
					{
					setState(1575);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1574);
						match(COMMA);
						}
					}

					setState(1577);
					match(FAILOVER_MODE);
					setState(1578);
					match(EQUAL);
					setState(1579);
					_la = _input.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1588);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
				case 1:
					{
					setState(1583);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1582);
						match(COMMA);
						}
					}

					setState(1585);
					match(SEEDING_MODE);
					setState(1586);
					match(EQUAL);
					setState(1587);
					_la = _input.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1596);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
				case 1:
					{
					setState(1591);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1590);
						match(COMMA);
						}
					}

					setState(1593);
					match(BACKUP_PRIORITY);
					setState(1594);
					match(EQUAL);
					setState(1595);
					match(DECIMAL);
					}
					break;
				}
				setState(1607);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
				case 1:
					{
					setState(1599);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1598);
						match(COMMA);
						}
					}

					setState(1601);
					match(PRIMARY_ROLE);
					setState(1602);
					match(LR_BRACKET);
					setState(1603);
					match(ALLOW_CONNECTIONS);
					setState(1604);
					match(EQUAL);
					setState(1605);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==READ_WRITE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1606);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1618);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SECONDARY_ROLE || _la==COMMA) {
					{
					setState(1610);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1609);
						match(COMMA);
						}
					}

					setState(1612);
					match(SECONDARY_ROLE);
					setState(1613);
					match(LR_BRACKET);
					setState(1614);
					match(ALLOW_CONNECTIONS);
					setState(1615);
					match(EQUAL);
					{
					setState(1616);
					match(READ_ONLY);
					}
					setState(1617);
					match(RR_BRACKET);
					}
				}

				}
				}
				setState(1620);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1621);
				match(SECONDARY_ROLE);
				setState(1622);
				match(LR_BRACKET);
				setState(1631);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(1623);
					match(ALLOW_CONNECTIONS);
					setState(1624);
					match(EQUAL);
					setState(1625);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(1626);
					match(READ_ONLY_ROUTING_LIST);
					setState(1627);
					match(EQUAL);
					setState(1628);
					match(LR_BRACKET);
					setState(1629);
					match(STRING);
					setState(1630);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1633);
				match(PRIMARY_ROLE);
				setState(1634);
				match(LR_BRACKET);
				setState(1657);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALLOW_CONNECTIONS:
					{
					setState(1635);
					match(ALLOW_CONNECTIONS);
					setState(1636);
					match(EQUAL);
					setState(1637);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case READ_ONLY_ROUTING_LIST:
					{
					setState(1638);
					match(READ_ONLY_ROUTING_LIST);
					setState(1639);
					match(EQUAL);
					{
					setState(1640);
					match(LR_BRACKET);
					setState(1651);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
					case RR_BRACKET:
					case COMMA:
						{
						setState(1647);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==STRING || _la==COMMA) {
							{
							{
							setState(1642);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(1641);
								match(COMMA);
								}
							}

							setState(1644);
							match(STRING);
							}
							}
							setState(1649);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
						break;
					case NONE:
						{
						setState(1650);
						match(NONE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1653);
					match(RR_BRACKET);
					}
					}
					break;
				case SESSION_TIMEOUT:
					{
					setState(1654);
					match(SESSION_TIMEOUT);
					setState(1655);
					match(EQUAL);
					setState(1656);
					((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1659);
				match(MODIFY);
				setState(1660);
				match(REPLICA);
				setState(1661);
				match(ON);
				setState(1662);
				((Alter_availability_group_optionsContext)_localctx).server_instance = match(STRING);
				setState(1720);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITH:
					{
					setState(1663);
					match(WITH);
					setState(1664);
					match(LR_BRACKET);
					setState(1680);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ENDPOINT_URL:
						{
						setState(1665);
						match(ENDPOINT_URL);
						setState(1666);
						match(EQUAL);
						setState(1667);
						match(STRING);
						}
						break;
					case AVAILABILITY_MODE:
						{
						setState(1668);
						match(AVAILABILITY_MODE);
						setState(1669);
						match(EQUAL);
						setState(1670);
						_la = _input.LA(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case FAILOVER_MODE:
						{
						setState(1671);
						match(FAILOVER_MODE);
						setState(1672);
						match(EQUAL);
						setState(1673);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case SEEDING_MODE:
						{
						setState(1674);
						match(SEEDING_MODE);
						setState(1675);
						match(EQUAL);
						setState(1676);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case BACKUP_PRIORITY:
						{
						setState(1677);
						match(BACKUP_PRIORITY);
						setState(1678);
						match(EQUAL);
						setState(1679);
						match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case SECONDARY_ROLE:
					{
					setState(1682);
					match(SECONDARY_ROLE);
					setState(1683);
					match(LR_BRACKET);
					setState(1692);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(1684);
						match(ALLOW_CONNECTIONS);
						setState(1685);
						match(EQUAL);
						setState(1686);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(1687);
						match(READ_ONLY_ROUTING_LIST);
						setState(1688);
						match(EQUAL);
						setState(1689);
						match(LR_BRACKET);
						setState(1690);
						match(STRING);
						setState(1691);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case PRIMARY_ROLE:
					{
					setState(1694);
					match(PRIMARY_ROLE);
					setState(1695);
					match(LR_BRACKET);
					setState(1718);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALLOW_CONNECTIONS:
						{
						setState(1696);
						match(ALLOW_CONNECTIONS);
						setState(1697);
						match(EQUAL);
						setState(1698);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==NO || _la==READ_ONLY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case READ_ONLY_ROUTING_LIST:
						{
						setState(1699);
						match(READ_ONLY_ROUTING_LIST);
						setState(1700);
						match(EQUAL);
						{
						setState(1701);
						match(LR_BRACKET);
						setState(1712);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
						case RR_BRACKET:
						case COMMA:
							{
							setState(1708);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==STRING || _la==COMMA) {
								{
								{
								setState(1703);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(1702);
									match(COMMA);
									}
								}

								setState(1705);
								match(STRING);
								}
								}
								setState(1710);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
							break;
						case NONE:
							{
							setState(1711);
							match(NONE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(1714);
						match(RR_BRACKET);
						}
						}
						break;
					case SESSION_TIMEOUT:
						{
						setState(1715);
						match(SESSION_TIMEOUT);
						setState(1716);
						match(EQUAL);
						setState(1717);
						((Alter_availability_group_optionsContext)_localctx).session_timeout = match(DECIMAL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1722);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1723);
				match(REMOVE);
				setState(1724);
				match(REPLICA);
				setState(1725);
				match(ON);
				setState(1726);
				match(STRING);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1727);
				match(JOIN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1728);
				match(JOIN);
				setState(1729);
				match(AVAILABILITY);
				setState(1730);
				match(GROUP);
				setState(1731);
				match(ON);
				setState(1754); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1733);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1732);
						match(COMMA);
						}
					}

					setState(1735);
					((Alter_availability_group_optionsContext)_localctx).ag_name = match(STRING);
					setState(1736);
					match(WITH);
					setState(1737);
					match(LR_BRACKET);
					{
					setState(1738);
					match(LISTENER_URL);
					setState(1739);
					match(EQUAL);
					setState(1740);
					match(STRING);
					setState(1741);
					match(COMMA);
					setState(1742);
					match(AVAILABILITY_MODE);
					setState(1743);
					match(EQUAL);
					setState(1744);
					_la = _input.LA(1);
					if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1745);
					match(COMMA);
					setState(1746);
					match(FAILOVER_MODE);
					setState(1747);
					match(EQUAL);
					setState(1748);
					match(MANUAL);
					setState(1749);
					match(COMMA);
					setState(1750);
					match(SEEDING_MODE);
					setState(1751);
					match(EQUAL);
					setState(1752);
					_la = _input.LA(1);
					if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1753);
					match(RR_BRACKET);
					}
					}
					}
					setState(1756); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING || _la==COMMA );
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1758);
				match(MODIFY);
				setState(1759);
				match(AVAILABILITY);
				setState(1760);
				match(GROUP);
				setState(1761);
				match(ON);
				setState(1796); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1763);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1762);
						match(COMMA);
						}
					}

					setState(1765);
					((Alter_availability_group_optionsContext)_localctx).ag_name_modified = match(STRING);
					setState(1766);
					match(WITH);
					setState(1767);
					match(LR_BRACKET);
					{
					setState(1768);
					match(LISTENER_URL);
					setState(1769);
					match(EQUAL);
					setState(1770);
					match(STRING);
					setState(1777);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,108,_ctx) ) {
					case 1:
						{
						setState(1772);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1771);
							match(COMMA);
							}
						}

						setState(1774);
						match(AVAILABILITY_MODE);
						setState(1775);
						match(EQUAL);
						setState(1776);
						_la = _input.LA(1);
						if ( !(_la==ASYNCHRONOUS_COMMIT || _la==SYNCHRONOUS_COMMIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(1785);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,110,_ctx) ) {
					case 1:
						{
						setState(1780);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1779);
							match(COMMA);
							}
						}

						setState(1782);
						match(FAILOVER_MODE);
						setState(1783);
						match(EQUAL);
						setState(1784);
						match(MANUAL);
						}
						break;
					}
					setState(1793);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SEEDING_MODE || _la==COMMA) {
						{
						setState(1788);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1787);
							match(COMMA);
							}
						}

						setState(1790);
						match(SEEDING_MODE);
						setState(1791);
						match(EQUAL);
						setState(1792);
						_la = _input.LA(1);
						if ( !(_la==AUTOMATIC || _la==MANUAL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1795);
					match(RR_BRACKET);
					}
					}
					}
					setState(1798); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STRING || _la==COMMA );
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1800);
				match(GRANT);
				setState(1801);
				match(CREATE);
				setState(1802);
				match(ANY);
				setState(1803);
				match(DATABASE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1804);
				match(DENY);
				setState(1805);
				match(CREATE);
				setState(1806);
				match(ANY);
				setState(1807);
				match(DATABASE);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1808);
				match(FAILOVER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1809);
				match(FORCE_FAILOVER_ALLOW_DATA_LOSS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1810);
				match(ADD);
				setState(1811);
				match(LISTENER);
				setState(1812);
				((Alter_availability_group_optionsContext)_localctx).listener_name = match(STRING);
				setState(1813);
				match(LR_BRACKET);
				setState(1842);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,117,_ctx) ) {
				case 1:
					{
					setState(1814);
					match(WITH);
					setState(1815);
					match(DHCP);
					{
					setState(1816);
					match(ON);
					setState(1817);
					match(LR_BRACKET);
					setState(1818);
					match(IPV4_ADDR);
					setState(1819);
					match(IPV4_ADDR);
					setState(1820);
					match(RR_BRACKET);
					}
					}
					break;
				case 2:
					{
					setState(1821);
					match(WITH);
					setState(1822);
					match(IP);
					setState(1823);
					match(LR_BRACKET);
					{
					setState(1831); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1825);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1824);
							match(COMMA);
							}
						}

						setState(1827);
						match(LR_BRACKET);
						setState(1828);
						ip_address_option();
						setState(1829);
						match(RR_BRACKET);
						}
						}
						setState(1833); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==LR_BRACKET || _la==COMMA );
					setState(1835);
					match(RR_BRACKET);
					setState(1840);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1836);
						match(COMMA);
						setState(1837);
						match(PORT);
						setState(1838);
						match(EQUAL);
						setState(1839);
						match(DECIMAL);
						}
					}

					}
					}
					break;
				}
				setState(1844);
				match(RR_BRACKET);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1845);
				match(MODIFY);
				setState(1846);
				match(LISTENER);
				setState(1856);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ADD:
					{
					setState(1847);
					match(ADD);
					setState(1848);
					match(IP);
					setState(1849);
					match(LR_BRACKET);
					setState(1850);
					ip_address_option();
					setState(1851);
					match(RR_BRACKET);
					}
					break;
				case PORT:
					{
					setState(1853);
					match(PORT);
					setState(1854);
					match(EQUAL);
					setState(1855);
					match(DECIMAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1858);
				match(RESTART);
				setState(1859);
				match(LISTENER);
				setState(1860);
				match(STRING);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1861);
				match(REMOVE);
				setState(1862);
				match(LISTENER);
				setState(1863);
				match(STRING);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1864);
				match(OFFLINE);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1865);
				match(WITH);
				setState(1866);
				match(LR_BRACKET);
				setState(1867);
				match(DTC_SUPPORT);
				setState(1868);
				match(EQUAL);
				setState(1869);
				match(PER_DB);
				setState(1870);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Ip_address_optionContext extends ParserRuleContext {
		public List<TerminalNode> IPV4_ADDR() { return getTokens(TSQLParser.IPV4_ADDR); }
		public TerminalNode IPV4_ADDR(int i) {
			return getToken(TSQLParser.IPV4_ADDR, i);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode IPV6_ADDR() { return getToken(TSQLParser.IPV6_ADDR, 0); }
		public Ip_address_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ip_address_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterIp_address_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitIp_address_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitIp_address_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Ip_address_optionContext ip_address_option() throws RecognitionException {
		Ip_address_optionContext _localctx = new Ip_address_optionContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_ip_address_option);
		int _la;
		try {
			setState(1882);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IPV4_ADDR:
				enterOuterAlt(_localctx, 1);
				{
				setState(1873);
				match(IPV4_ADDR);
				setState(1874);
				match(COMMA);
				setState(1875);
				_la = _input.LA(1);
				if ( !(_la==STRING || _la==IPV4_ADDR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case IPV6_ADDR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1876);
				match(IPV6_ADDR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 3);
				{
				setState(1877);
				match(STRING);
				setState(1880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1878);
					match(COMMA);
					setState(1879);
					_la = _input.LA(1);
					if ( !(_la==STRING || _la==IPV4_ADDR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_broker_priorityContext extends ParserRuleContext {
		public IdContext ConversationPriorityName;
		public TerminalNode BROKER() { return getToken(TSQLParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(TSQLParser.PRIORITY, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSQLParser.CONVERSATION, 0); }
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode CONTRACT_NAME() { return getToken(TSQLParser.CONTRACT_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode LOCAL_SERVICE_NAME() { return getToken(TSQLParser.LOCAL_SERVICE_NAME, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(TSQLParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(TSQLParser.PRIORITY_LEVEL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public List<TerminalNode> ANY() { return getTokens(TSQLParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(TSQLParser.ANY, i);
		}
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode DOUBLE_FORWARD_SLASH() { return getToken(TSQLParser.DOUBLE_FORWARD_SLASH, 0); }
		public Create_or_alter_broker_priorityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_broker_priority; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_or_alter_broker_priority(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_or_alter_broker_priority(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_or_alter_broker_priority(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_broker_priorityContext create_or_alter_broker_priority() throws RecognitionException {
		Create_or_alter_broker_priorityContext _localctx = new Create_or_alter_broker_priorityContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_create_or_alter_broker_priority);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1884);
			match(BROKER);
			setState(1885);
			match(PRIORITY);
			setState(1886);
			((Create_or_alter_broker_priorityContext)_localctx).ConversationPriorityName = id();
			setState(1887);
			match(FOR);
			setState(1888);
			match(CONVERSATION);
			setState(1889);
			match(SET);
			setState(1890);
			match(LR_BRACKET);
			setState(1900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTRACT_NAME) {
				{
				setState(1891);
				match(CONTRACT_NAME);
				setState(1892);
				match(EQUAL);
				setState(1895);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(1893);
					id();
					}
					break;
				case ANY:
					{
					setState(1894);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1898);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1897);
					match(COMMA);
					}
				}

				}
			}

			setState(1914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_SERVICE_NAME) {
				{
				setState(1902);
				match(LOCAL_SERVICE_NAME);
				setState(1903);
				match(EQUAL);
				setState(1909);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
				case DOUBLE_FORWARD_SLASH:
					{
					setState(1905);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOUBLE_FORWARD_SLASH) {
						{
						setState(1904);
						match(DOUBLE_FORWARD_SLASH);
						}
					}

					setState(1907);
					id();
					}
					break;
				case ANY:
					{
					setState(1908);
					match(ANY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1912);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1911);
					match(COMMA);
					}
				}

				}
			}

			setState(1922);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REMOTE_SERVICE_NAME) {
				{
				setState(1916);
				match(REMOTE_SERVICE_NAME);
				setState(1917);
				match(EQUAL);
				setState(1918);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==STRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1920);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(1919);
					match(COMMA);
					}
				}

				}
			}

			setState(1927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIORITY_LEVEL) {
				{
				setState(1924);
				match(PRIORITY_LEVEL);
				setState(1925);
				match(EQUAL);
				setState(1926);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1929);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSQLParser.REMOVE, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(TSQLParser.PRIVATE_KEY, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSQLParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode ACTIVE() { return getToken(TSQLParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(TSQLParser.BEGIN_DIALOG, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSQLParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSQLParser.FILE, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> DECRYPTION() { return getTokens(TSQLParser.DECRYPTION); }
		public TerminalNode DECRYPTION(int i) {
			return getToken(TSQLParser.DECRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSQLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSQLParser.BY, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSQLParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSQLParser.PASSWORD, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSQLParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSQLParser.ENCRYPTION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Alter_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_certificate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_certificate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_certificateContext alter_certificate() throws RecognitionException {
		Alter_certificateContext _localctx = new Alter_certificateContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_alter_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1931);
			match(CERTIFICATE);
			setState(1932);
			((Alter_certificateContext)_localctx).certificate_name = id();
			setState(1972);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				setState(1933);
				match(REMOVE);
				setState(1934);
				match(PRIVATE_KEY);
				}
				break;
			case 2:
				{
				setState(1935);
				match(WITH);
				setState(1936);
				match(PRIVATE);
				setState(1937);
				match(KEY);
				setState(1938);
				match(LR_BRACKET);
				setState(1961); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1961);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(1939);
						match(FILE);
						setState(1940);
						match(EQUAL);
						setState(1941);
						match(STRING);
						setState(1943);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1942);
							match(COMMA);
							}
						}

						}
						break;
					case DECRYPTION:
						{
						setState(1945);
						match(DECRYPTION);
						setState(1946);
						match(BY);
						setState(1947);
						match(PASSWORD);
						setState(1948);
						match(EQUAL);
						setState(1949);
						match(STRING);
						setState(1951);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1950);
							match(COMMA);
							}
						}

						}
						break;
					case ENCRYPTION:
						{
						setState(1953);
						match(ENCRYPTION);
						setState(1954);
						match(BY);
						setState(1955);
						match(PASSWORD);
						setState(1956);
						match(EQUAL);
						setState(1957);
						match(STRING);
						setState(1959);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(1958);
							match(COMMA);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1963); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION );
				setState(1965);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(1966);
				match(WITH);
				setState(1967);
				match(ACTIVE);
				setState(1968);
				match(FOR);
				setState(1969);
				match(BEGIN_DIALOG);
				setState(1970);
				match(EQUAL);
				setState(1971);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_column_encryption_keyContext extends ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public Token algorithm_name;
		public TerminalNode COLUMN() { return getToken(TSQLParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode VALUE() { return getToken(TSQLParser.VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(TSQLParser.COLUMN_MASTER_KEY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode ALGORITHM() { return getToken(TSQLParser.ALGORITHM, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(TSQLParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Alter_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_column_encryption_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_column_encryption_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_column_encryption_keyContext alter_column_encryption_key() throws RecognitionException {
		Alter_column_encryption_keyContext _localctx = new Alter_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_alter_column_encryption_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1974);
			match(COLUMN);
			setState(1975);
			match(ENCRYPTION);
			setState(1976);
			match(KEY);
			setState(1977);
			((Alter_column_encryption_keyContext)_localctx).column_encryption_key = id();
			setState(1978);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1979);
			match(VALUE);
			setState(1980);
			match(LR_BRACKET);
			setState(1981);
			match(COLUMN_MASTER_KEY);
			setState(1982);
			match(EQUAL);
			setState(1983);
			((Alter_column_encryption_keyContext)_localctx).column_master_key_name = id();
			setState(1992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1984);
				match(COMMA);
				setState(1985);
				match(ALGORITHM);
				setState(1986);
				match(EQUAL);
				setState(1987);
				((Alter_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
				setState(1988);
				match(COMMA);
				setState(1989);
				match(ENCRYPTED_VALUE);
				setState(1990);
				match(EQUAL);
				setState(1991);
				match(BINARY);
				}
			}

			setState(1994);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_encryption_keyContext extends ParserRuleContext {
		public IdContext column_encryption_key;
		public IdContext column_master_key_name;
		public Token algorithm_name;
		public Token encrypted_value;
		public TerminalNode COLUMN() { return getToken(TSQLParser.COLUMN, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(TSQLParser.VALUES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> COLUMN_MASTER_KEY() { return getTokens(TSQLParser.COLUMN_MASTER_KEY); }
		public TerminalNode COLUMN_MASTER_KEY(int i) {
			return getToken(TSQLParser.COLUMN_MASTER_KEY, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSQLParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSQLParser.ALGORITHM, i);
		}
		public List<TerminalNode> ENCRYPTED_VALUE() { return getTokens(TSQLParser.ENCRYPTED_VALUE); }
		public TerminalNode ENCRYPTED_VALUE(int i) {
			return getToken(TSQLParser.ENCRYPTED_VALUE, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> BINARY() { return getTokens(TSQLParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSQLParser.BINARY, i);
		}
		public Create_column_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_column_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_column_encryption_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_column_encryption_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_column_encryption_keyContext create_column_encryption_key() throws RecognitionException {
		Create_column_encryption_keyContext _localctx = new Create_column_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_create_column_encryption_key);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1996);
			match(COLUMN);
			setState(1997);
			match(ENCRYPTION);
			setState(1998);
			match(KEY);
			setState(1999);
			((Create_column_encryption_keyContext)_localctx).column_encryption_key = id();
			setState(2000);
			match(WITH);
			setState(2001);
			match(VALUES);
			setState(2021); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(2002);
					match(LR_BRACKET);
					setState(2004);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2003);
						match(COMMA);
						}
					}

					setState(2006);
					match(COLUMN_MASTER_KEY);
					setState(2007);
					match(EQUAL);
					setState(2008);
					((Create_column_encryption_keyContext)_localctx).column_master_key_name = id();
					setState(2009);
					match(COMMA);
					setState(2010);
					match(ALGORITHM);
					setState(2011);
					match(EQUAL);
					setState(2012);
					((Create_column_encryption_keyContext)_localctx).algorithm_name = match(STRING);
					setState(2013);
					match(COMMA);
					setState(2014);
					match(ENCRYPTED_VALUE);
					setState(2015);
					match(EQUAL);
					setState(2016);
					((Create_column_encryption_keyContext)_localctx).encrypted_value = match(BINARY);
					setState(2017);
					match(RR_BRACKET);
					setState(2019);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2018);
						match(COMMA);
						}
					}

					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2023); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,141,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_statementsContext extends ParserRuleContext {
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode AGGREGATE() { return getToken(TSQLParser.AGGREGATE, 0); }
		public TerminalNode APPLICATION() { return getToken(TSQLParser.APPLICATION, 0); }
		public TerminalNode ROLE() { return getToken(TSQLParser.ROLE, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSQLParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSQLParser.GROUP, 0); }
		public TerminalNode BROKER() { return getToken(TSQLParser.BROKER, 0); }
		public TerminalNode PRIORITY() { return getToken(TSQLParser.PRIORITY, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode COLUMN() { return getToken(TSQLParser.COLUMN, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode CONTRACT() { return getToken(TSQLParser.CONTRACT, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSQLParser.CREDENTIAL, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSQLParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSQLParser.PROVIDER, 0); }
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSQLParser.ENDPOINT, 0); }
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSQLParser.FULLTEXT, 0); }
		public TerminalNode LOGIN() { return getToken(TSQLParser.LOGIN, 0); }
		public TerminalNode MESSAGE() { return getToken(TSQLParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public TerminalNode FUNCTION() { return getToken(TSQLParser.FUNCTION, 0); }
		public TerminalNode PARTITION() { return getToken(TSQLParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(TSQLParser.SCHEME, 0); }
		public TerminalNode PROC() { return getToken(TSQLParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(TSQLParser.PROCEDURE, 0); }
		public TerminalNode QUEUE() { return getToken(TSQLParser.QUEUE, 0); }
		public TerminalNode REMOTE() { return getToken(TSQLParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSQLParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSQLParser.BINDING, 0); }
		public TerminalNode RESOURCE() { return getToken(TSQLParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSQLParser.POOL, 0); }
		public TerminalNode ROUTE() { return getToken(TSQLParser.ROUTE, 0); }
		public TerminalNode RULE() { return getToken(TSQLParser.RULE, 0); }
		public TerminalNode SCHEMA() { return getToken(TSQLParser.SCHEMA, 0); }
		public TerminalNode SEARCH() { return getToken(TSQLParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSQLParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSQLParser.LIST, 0); }
		public TerminalNode SECURITY() { return getToken(TSQLParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(TSQLParser.POLICY, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSQLParser.SEQUENCE, 0); }
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSQLParser.AUDIT, 0); }
		public TerminalNode STATISTICS() { return getToken(TSQLParser.STATISTICS, 0); }
		public TerminalNode SYNONYM() { return getToken(TSQLParser.SYNONYM, 0); }
		public TerminalNode TABLE() { return getToken(TSQLParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(TSQLParser.TRIGGER, 0); }
		public TerminalNode USER() { return getToken(TSQLParser.USER, 0); }
		public TerminalNode VIEW() { return getToken(TSQLParser.VIEW, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSQLParser.WORKLOAD, 0); }
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSQLParser.COLLECTION, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode MASTER() { return getToken(TSQLParser.MASTER, 0); }
		public TerminalNode IF() { return getToken(TSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSQLParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode DATA() { return getToken(TSQLParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(TSQLParser.SOURCE, 0); }
		public TerminalNode FILE() { return getToken(TSQLParser.FILE, 0); }
		public TerminalNode FORMAT() { return getToken(TSQLParser.FORMAT, 0); }
		public TerminalNode CATALOG() { return getToken(TSQLParser.CATALOG, 0); }
		public TerminalNode INDEX() { return getToken(TSQLParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode STOPLIST() { return getToken(TSQLParser.STOPLIST, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSQLParser.SPECIFICATION, 0); }
		public TerminalNode SCOPED() { return getToken(TSQLParser.SCOPED, 0); }
		public Drop_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_statementsContext drop_statements() throws RecognitionException {
		Drop_statementsContext _localctx = new Drop_statementsContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_drop_statements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2113);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				setState(2025);
				match(AGGREGATE);
				}
				break;
			case 2:
				{
				setState(2026);
				match(APPLICATION);
				setState(2027);
				match(ROLE);
				}
				break;
			case 3:
				{
				setState(2028);
				match(AVAILABILITY);
				setState(2029);
				match(GROUP);
				}
				break;
			case 4:
				{
				setState(2030);
				match(BROKER);
				setState(2031);
				match(PRIORITY);
				}
				break;
			case 5:
				{
				setState(2032);
				match(CERTIFICATE);
				}
				break;
			case 6:
				{
				setState(2033);
				match(COLUMN);
				setState(2034);
				_la = _input.LA(1);
				if ( !(_la==ENCRYPTION || _la==MASTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2035);
				match(KEY);
				}
				break;
			case 7:
				{
				setState(2036);
				match(CONTRACT);
				}
				break;
			case 8:
				{
				setState(2037);
				match(CREDENTIAL);
				}
				break;
			case 9:
				{
				setState(2038);
				match(CRYPTOGRAPHIC);
				setState(2039);
				match(PROVIDER);
				}
				break;
			case 10:
				{
				setState(2040);
				match(DATABASE);
				setState(2045);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
				case 1:
					{
					setState(2041);
					match(AUDIT);
					setState(2042);
					match(SPECIFICATION);
					}
					break;
				case 2:
					{
					setState(2043);
					match(SCOPED);
					setState(2044);
					match(CREDENTIAL);
					}
					break;
				}
				}
				break;
			case 11:
				{
				setState(2047);
				match(DEFAULT);
				}
				break;
			case 12:
				{
				setState(2048);
				match(ENDPOINT);
				}
				break;
			case 13:
				{
				setState(2049);
				match(EXTERNAL);
				setState(2057);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATA:
					{
					setState(2050);
					match(DATA);
					setState(2051);
					match(SOURCE);
					}
					break;
				case FILE:
					{
					setState(2052);
					match(FILE);
					setState(2053);
					match(FORMAT);
					}
					break;
				case RESOURCE:
					{
					setState(2054);
					match(RESOURCE);
					setState(2055);
					match(POOL);
					}
					break;
				case TABLE:
					{
					setState(2056);
					match(TABLE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 14:
				{
				setState(2059);
				match(FULLTEXT);
				setState(2064);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CATALOG:
					{
					setState(2060);
					match(CATALOG);
					}
					break;
				case INDEX:
					{
					setState(2061);
					match(INDEX);
					setState(2062);
					match(ON);
					}
					break;
				case STOPLIST:
					{
					setState(2063);
					match(STOPLIST);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 15:
				{
				setState(2066);
				match(LOGIN);
				}
				break;
			case 16:
				{
				setState(2067);
				match(MESSAGE);
				setState(2068);
				match(TYPE);
				}
				break;
			case 17:
				{
				setState(2070);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(2069);
					match(PARTITION);
					}
				}

				setState(2072);
				match(FUNCTION);
				}
				break;
			case 18:
				{
				setState(2073);
				match(PARTITION);
				setState(2074);
				match(SCHEME);
				}
				break;
			case 19:
				{
				setState(2075);
				match(PROC);
				}
				break;
			case 20:
				{
				setState(2076);
				match(PROCEDURE);
				}
				break;
			case 21:
				{
				setState(2077);
				match(QUEUE);
				}
				break;
			case 22:
				{
				setState(2078);
				match(REMOTE);
				setState(2079);
				match(SERVICE);
				setState(2080);
				match(BINDING);
				}
				break;
			case 23:
				{
				setState(2081);
				match(RESOURCE);
				setState(2082);
				match(POOL);
				}
				break;
			case 24:
				{
				setState(2083);
				match(ROLE);
				}
				break;
			case 25:
				{
				setState(2084);
				match(ROUTE);
				}
				break;
			case 26:
				{
				setState(2085);
				match(RULE);
				}
				break;
			case 27:
				{
				setState(2086);
				match(SCHEMA);
				}
				break;
			case 28:
				{
				setState(2087);
				match(SEARCH);
				setState(2088);
				match(PROPERTY);
				setState(2089);
				match(LIST);
				}
				break;
			case 29:
				{
				setState(2090);
				match(SECURITY);
				setState(2091);
				match(POLICY);
				}
				break;
			case 30:
				{
				setState(2092);
				match(SEQUENCE);
				}
				break;
			case 31:
				{
				setState(2093);
				match(SERVER);
				setState(2094);
				match(AUDIT);
				setState(2096);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
				case 1:
					{
					setState(2095);
					match(SPECIFICATION);
					}
					break;
				}
				}
				break;
			case 32:
				{
				setState(2098);
				match(SERVER);
				setState(2099);
				match(ROLE);
				}
				break;
			case 33:
				{
				setState(2100);
				match(SERVICE);
				}
				break;
			case 34:
				{
				setState(2101);
				match(STATISTICS);
				}
				break;
			case 35:
				{
				setState(2102);
				match(SYNONYM);
				}
				break;
			case 36:
				{
				setState(2103);
				match(TABLE);
				}
				break;
			case 37:
				{
				setState(2104);
				match(TYPE);
				}
				break;
			case 38:
				{
				setState(2105);
				match(TRIGGER);
				}
				break;
			case 39:
				{
				setState(2106);
				match(USER);
				}
				break;
			case 40:
				{
				setState(2107);
				match(VIEW);
				}
				break;
			case 41:
				{
				setState(2108);
				match(WORKLOAD);
				setState(2109);
				match(GROUP);
				}
				break;
			case 42:
				{
				setState(2110);
				match(XML);
				setState(2111);
				match(SCHEMA);
				setState(2112);
				match(COLLECTION);
				}
				break;
			}
			setState(2117);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2115);
				match(IF);
				setState(2116);
				match(EXISTS);
				}
			}

			setState(2119);
			qualified_name();
			setState(2124);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2120);
				match(COMMA);
				setState(2121);
				qualified_name();
				}
				}
				setState(2126);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_event_notifications_or_sessionContext extends ParserRuleContext {
		public IdContext notification_name;
		public IdContext queue_name;
		public TerminalNode EVENT() { return getToken(TSQLParser.EVENT, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSQLParser.NOTIFICATION, 0); }
		public TerminalNode SESSION() { return getToken(TSQLParser.SESSION, 0); }
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(TSQLParser.QUEUE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Drop_event_notifications_or_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_event_notifications_or_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_event_notifications_or_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_event_notifications_or_session(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_event_notifications_or_session(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_event_notifications_or_sessionContext drop_event_notifications_or_session() throws RecognitionException {
		Drop_event_notifications_or_sessionContext _localctx = new Drop_event_notifications_or_sessionContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_drop_event_notifications_or_session);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2127);
			match(EVENT);
			setState(2128);
			_la = _input.LA(1);
			if ( !(_la==NOTIFICATION || _la==SESSION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2133); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2130);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2129);
					match(COMMA);
					}
				}

				setState(2132);
				((Drop_event_notifications_or_sessionContext)_localctx).notification_name = id();
				}
				}
				setState(2135); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)) | (1L << (COMMA - 770)))) != 0) );
			setState(2137);
			match(ON);
			setState(2142);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(2138);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(2139);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(2140);
				match(QUEUE);
				setState(2141);
				((Drop_event_notifications_or_sessionContext)_localctx).queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_external_libraryContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSQLParser.LIBRARY, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public Drop_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_external_library(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_external_library(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_external_libraryContext drop_external_library() throws RecognitionException {
		Drop_external_libraryContext _localctx = new Drop_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_drop_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2144);
			match(EXTERNAL);
			setState(2145);
			match(LIBRARY);
			setState(2146);
			id();
			setState(2149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2147);
				match(AUTHORIZATION);
				setState(2148);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_master_keyContext extends ParserRuleContext {
		public TerminalNode MASTER() { return getToken(TSQLParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public Drop_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_master_keyContext drop_master_key() throws RecognitionException {
		Drop_master_keyContext _localctx = new Drop_master_keyContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_drop_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2151);
			match(MASTER);
			setState(2152);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_database_encryption_keyContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public Drop_database_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_database_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_database_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_database_encryption_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_database_encryption_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_database_encryption_keyContext drop_database_encryption_key() throws RecognitionException {
		Drop_database_encryption_keyContext _localctx = new Drop_database_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_drop_database_encryption_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2154);
			match(DATABASE);
			setState(2155);
			match(ENCRYPTION);
			setState(2156);
			match(KEY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_signatureContext extends ParserRuleContext {
		public IdContext cert_name;
		public IdContext Asym_key_name;
		public TerminalNode SIGNATURE() { return getToken(TSQLParser.SIGNATURE, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode COUNTER() { return getToken(TSQLParser.COUNTER, 0); }
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSQLParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSQLParser.CERTIFICATE, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSQLParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSQLParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSQLParser.KEY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Drop_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_signature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_signature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_signatureContext drop_signature() throws RecognitionException {
		Drop_signatureContext _localctx = new Drop_signatureContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_drop_signature);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COUNTER) {
				{
				setState(2158);
				match(COUNTER);
				}
			}

			setState(2161);
			match(SIGNATURE);
			setState(2162);
			match(FROM);
			setState(2163);
			qualified_name();
			setState(2164);
			match(BY);
			setState(2176); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2176);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,157,_ctx) ) {
				case 1:
					{
					setState(2166);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2165);
						match(COMMA);
						}
					}

					setState(2168);
					match(CERTIFICATE);
					setState(2169);
					((Drop_signatureContext)_localctx).cert_name = id();
					}
					break;
				case 2:
					{
					setState(2171);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2170);
						match(COMMA);
						}
					}

					setState(2173);
					match(ASYMMETRIC);
					setState(2174);
					match(KEY);
					setState(2175);
					((Drop_signatureContext)_localctx).Asym_key_name = id();
					}
					break;
				}
				}
				setState(2178); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ASYMMETRIC || _la==CERTIFICATE || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_symmetric_keyContext extends ParserRuleContext {
		public IdContext symmetric_key_name;
		public TerminalNode SYMMETRIC() { return getToken(TSQLParser.SYMMETRIC, 0); }
		public List<TerminalNode> KEY() { return getTokens(TSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSQLParser.KEY, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REMOVE() { return getToken(TSQLParser.REMOVE, 0); }
		public TerminalNode PROVIDER() { return getToken(TSQLParser.PROVIDER, 0); }
		public Drop_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_symmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_symmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_symmetric_keyContext drop_symmetric_key() throws RecognitionException {
		Drop_symmetric_keyContext _localctx = new Drop_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_drop_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2180);
			match(SYMMETRIC);
			setState(2181);
			match(KEY);
			setState(2182);
			((Drop_symmetric_keyContext)_localctx).symmetric_key_name = id();
			setState(2186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REMOVE) {
				{
				setState(2183);
				match(REMOVE);
				setState(2184);
				match(PROVIDER);
				setState(2185);
				match(KEY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Enable_disable_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(TSQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode ENABLE() { return getToken(TSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSQLParser.DISABLE, 0); }
		public Names_referencesContext names_references() {
			return getRuleContext(Names_referencesContext.class,0);
		}
		public List<TerminalNode> ALL() { return getTokens(TSQLParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSQLParser.ALL, i);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public Enable_disable_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enable_disable_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterEnable_disable_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitEnable_disable_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitEnable_disable_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Enable_disable_triggerContext enable_disable_trigger() throws RecognitionException {
		Enable_disable_triggerContext _localctx = new Enable_disable_triggerContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_enable_disable_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2188);
			_la = _input.LA(1);
			if ( !(_la==DISABLE || _la==ENABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2189);
			match(TRIGGER);
			setState(2192);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(2190);
				names_references();
				}
				break;
			case ALL:
				{
				setState(2191);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2194);
			match(ON);
			setState(2199);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(2195);
				qualified_name();
				}
				break;
			case DATABASE:
				{
				setState(2196);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(2197);
				match(ALL);
				setState(2198);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Names_referencesContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name;
		public List<Qualified_nameContext> name = new ArrayList<Qualified_nameContext>();
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Names_referencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_names_references; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterNames_references(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitNames_references(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitNames_references(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Names_referencesContext names_references() throws RecognitionException {
		Names_referencesContext _localctx = new Names_referencesContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_names_references);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2201);
			((Names_referencesContext)_localctx).qualified_name = qualified_name();
			((Names_referencesContext)_localctx).name.add(((Names_referencesContext)_localctx).qualified_name);
			setState(2206);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2202);
				match(COMMA);
				setState(2203);
				((Names_referencesContext)_localctx).qualified_name = qualified_name();
				((Names_referencesContext)_localctx).name.add(((Names_referencesContext)_localctx).qualified_name);
				}
				}
				setState(2208);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_tableContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode LOCK() { return getToken(TSQLParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(TSQLParser.TABLE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSQLParser.IN, 0); }
		public TerminalNode MODE() { return getToken(TSQLParser.MODE, 0); }
		public TerminalNode SHARE() { return getToken(TSQLParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(TSQLParser.EXCLUSIVE, 0); }
		public TerminalNode WAIT() { return getToken(TSQLParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(TSQLParser.NOWAIT, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public Lock_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterLock_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitLock_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitLock_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_tableContext lock_table() throws RecognitionException {
		Lock_tableContext _localctx = new Lock_tableContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_lock_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2209);
			match(LOCK);
			setState(2210);
			match(TABLE);
			setState(2211);
			qualified_name();
			setState(2212);
			match(IN);
			setState(2213);
			_la = _input.LA(1);
			if ( !(_la==EXCLUSIVE || _la==SHARE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2214);
			match(MODE);
			setState(2218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,163,_ctx) ) {
			case 1+1:
				{
				setState(2215);
				match(WAIT);
				setState(2216);
				((Lock_tableContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2+1:
				{
				setState(2217);
				match(NOWAIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Truncate_tableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(TSQLParser.TRUNCATE, 0); }
		public TerminalNode TABLE() { return getToken(TSQLParser.TABLE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public TerminalNode PARTITIONS() { return getToken(TSQLParser.PARTITIONS, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSQLParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSQLParser.TO, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Truncate_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncate_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTruncate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTruncate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTruncate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Truncate_tableContext truncate_table() throws RecognitionException {
		Truncate_tableContext _localctx = new Truncate_tableContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_truncate_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2220);
			match(TRUNCATE);
			setState(2221);
			match(TABLE);
			setState(2222);
			qualified_name();
			setState(2242);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				setState(2223);
				match(WITH);
				setState(2224);
				match(LR_BRACKET);
				setState(2225);
				match(PARTITIONS);
				setState(2226);
				match(LR_BRACKET);
				setState(2236); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2228);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2227);
						match(COMMA);
						}
					}

					setState(2234);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,165,_ctx) ) {
					case 1:
						{
						setState(2230);
						match(DECIMAL);
						}
						break;
					case 2:
						{
						setState(2231);
						match(DECIMAL);
						setState(2232);
						match(TO);
						setState(2233);
						match(DECIMAL);
						}
						break;
					}
					}
					}
					setState(2238); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DECIMAL || _la==COMMA );
				setState(2240);
				match(RR_BRACKET);
				setState(2241);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_column_master_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public Token key_store_provider_name;
		public Token key_path;
		public TerminalNode COLUMN() { return getToken(TSQLParser.COLUMN, 0); }
		public TerminalNode MASTER() { return getToken(TSQLParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode KEY_STORE_PROVIDER_NAME() { return getToken(TSQLParser.KEY_STORE_PROVIDER_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode KEY_PATH() { return getToken(TSQLParser.KEY_PATH, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public Create_column_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_column_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_column_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_column_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_column_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_column_master_keyContext create_column_master_key() throws RecognitionException {
		Create_column_master_keyContext _localctx = new Create_column_master_keyContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_create_column_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2244);
			match(COLUMN);
			setState(2245);
			match(MASTER);
			setState(2246);
			match(KEY);
			setState(2247);
			((Create_column_master_keyContext)_localctx).key_name = id();
			setState(2248);
			match(WITH);
			setState(2249);
			match(LR_BRACKET);
			setState(2250);
			match(KEY_STORE_PROVIDER_NAME);
			setState(2251);
			match(EQUAL);
			setState(2252);
			((Create_column_master_keyContext)_localctx).key_store_provider_name = match(STRING);
			setState(2253);
			match(COMMA);
			setState(2254);
			match(KEY_PATH);
			setState(2255);
			match(EQUAL);
			setState(2256);
			((Create_column_master_keyContext)_localctx).key_path = match(STRING);
			setState(2257);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public Token identity_name;
		public Token secret;
		public TerminalNode CREDENTIAL() { return getToken(TSQLParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSQLParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSQLParser.SECRET, 0); }
		public Alter_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_credentialContext alter_credential() throws RecognitionException {
		Alter_credentialContext _localctx = new Alter_credentialContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alter_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2259);
			match(CREDENTIAL);
			setState(2260);
			((Alter_credentialContext)_localctx).credential_name = id();
			setState(2261);
			match(WITH);
			setState(2262);
			match(IDENTITY);
			setState(2263);
			match(EQUAL);
			setState(2264);
			((Alter_credentialContext)_localctx).identity_name = match(STRING);
			setState(2269);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2265);
				match(COMMA);
				setState(2266);
				match(SECRET);
				setState(2267);
				match(EQUAL);
				setState(2268);
				((Alter_credentialContext)_localctx).secret = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public Token identity_name;
		public Token secret;
		public IdContext cryptographic_provider_name;
		public TerminalNode CREDENTIAL() { return getToken(TSQLParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSQLParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSQLParser.SECRET, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSQLParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSQLParser.PROVIDER, 0); }
		public Create_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_credentialContext create_credential() throws RecognitionException {
		Create_credentialContext _localctx = new Create_credentialContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_create_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2271);
			match(CREDENTIAL);
			setState(2272);
			((Create_credentialContext)_localctx).credential_name = id();
			setState(2273);
			match(WITH);
			setState(2274);
			match(IDENTITY);
			setState(2275);
			match(EQUAL);
			setState(2276);
			((Create_credentialContext)_localctx).identity_name = match(STRING);
			setState(2281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2277);
				match(COMMA);
				setState(2278);
				match(SECRET);
				setState(2279);
				match(EQUAL);
				setState(2280);
				((Create_credentialContext)_localctx).secret = match(STRING);
				}
			}

			setState(2287);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(2283);
				match(FOR);
				setState(2284);
				match(CRYPTOGRAPHIC);
				setState(2285);
				match(PROVIDER);
				setState(2286);
				((Create_credentialContext)_localctx).cryptographic_provider_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_cryptographic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public Token crypto_provider_ddl_file;
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSQLParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSQLParser.PROVIDER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(TSQLParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode ENABLE() { return getToken(TSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSQLParser.DISABLE, 0); }
		public Alter_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_cryptographic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_cryptographic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_cryptographic_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_cryptographic_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_cryptographic_providerContext alter_cryptographic_provider() throws RecognitionException {
		Alter_cryptographic_providerContext _localctx = new Alter_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_alter_cryptographic_provider);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2289);
			match(CRYPTOGRAPHIC);
			setState(2290);
			match(PROVIDER);
			setState(2291);
			((Alter_cryptographic_providerContext)_localctx).provider_name = id();
			setState(2296);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2292);
				match(FROM);
				setState(2293);
				match(FILE);
				setState(2294);
				match(EQUAL);
				setState(2295);
				((Alter_cryptographic_providerContext)_localctx).crypto_provider_ddl_file = match(STRING);
				}
			}

			setState(2299);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				setState(2298);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_cryptographic_providerContext extends ParserRuleContext {
		public IdContext provider_name;
		public Token path_of_DLL;
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSQLParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode PROVIDER() { return getToken(TSQLParser.PROVIDER, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode FILE() { return getToken(TSQLParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Create_cryptographic_providerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_cryptographic_provider; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_cryptographic_provider(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_cryptographic_provider(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_cryptographic_provider(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_cryptographic_providerContext create_cryptographic_provider() throws RecognitionException {
		Create_cryptographic_providerContext _localctx = new Create_cryptographic_providerContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_create_cryptographic_provider);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2301);
			match(CRYPTOGRAPHIC);
			setState(2302);
			match(PROVIDER);
			setState(2303);
			((Create_cryptographic_providerContext)_localctx).provider_name = id();
			setState(2304);
			match(FROM);
			setState(2305);
			match(FILE);
			setState(2306);
			match(EQUAL);
			setState(2307);
			((Create_cryptographic_providerContext)_localctx).path_of_DLL = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_event_notificationContext extends ParserRuleContext {
		public IdContext event_notification_name;
		public IdContext queue_name;
		public IdContext event_type_or_group;
		public Token broker_service;
		public Token broker_service_specifier_or_current_database;
		public TerminalNode EVENT() { return getToken(TSQLParser.EVENT, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSQLParser.NOTIFICATION, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public TerminalNode SERVICE() { return getToken(TSQLParser.SERVICE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode QUEUE() { return getToken(TSQLParser.QUEUE, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode FAN_IN() { return getToken(TSQLParser.FAN_IN, 0); }
		public Create_event_notificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_event_notification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_event_notification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_event_notification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_event_notification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_event_notificationContext create_event_notification() throws RecognitionException {
		Create_event_notificationContext _localctx = new Create_event_notificationContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_create_event_notification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2309);
			match(EVENT);
			setState(2310);
			match(NOTIFICATION);
			setState(2311);
			((Create_event_notificationContext)_localctx).event_notification_name = id();
			setState(2312);
			match(ON);
			setState(2317);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERVER:
				{
				setState(2313);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(2314);
				match(DATABASE);
				}
				break;
			case QUEUE:
				{
				setState(2315);
				match(QUEUE);
				setState(2316);
				((Create_event_notificationContext)_localctx).queue_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2319);
				match(WITH);
				setState(2320);
				match(FAN_IN);
				}
			}

			setState(2323);
			match(FOR);
			setState(2328); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2325);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2324);
					match(COMMA);
					}
				}

				setState(2327);
				((Create_event_notificationContext)_localctx).event_type_or_group = id();
				}
				}
				setState(2330); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)) | (1L << (COMMA - 770)))) != 0) );
			setState(2332);
			match(TO);
			setState(2333);
			match(SERVICE);
			setState(2334);
			((Create_event_notificationContext)_localctx).broker_service = match(STRING);
			setState(2335);
			match(COMMA);
			setState(2336);
			((Create_event_notificationContext)_localctx).broker_service_specifier_or_current_database = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_event_sessionContext extends ParserRuleContext {
		public IdContext event_session_name;
		public TerminalNode EVENT() { return getToken(TSQLParser.EVENT, 0); }
		public TerminalNode SESSION() { return getToken(TSQLParser.SESSION, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Create_or_alter_event_session_withContext create_or_alter_event_session_with() {
			return getRuleContext(Create_or_alter_event_session_withContext.class,0);
		}
		public TerminalNode STATE() { return getToken(TSQLParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode START() { return getToken(TSQLParser.START, 0); }
		public TerminalNode STOP() { return getToken(TSQLParser.STOP, 0); }
		public List<Add_drop_eventContext> add_drop_event() {
			return getRuleContexts(Add_drop_eventContext.class);
		}
		public Add_drop_eventContext add_drop_event(int i) {
			return getRuleContext(Add_drop_eventContext.class,i);
		}
		public List<Add_drop_event_targetContext> add_drop_event_target() {
			return getRuleContexts(Add_drop_event_targetContext.class);
		}
		public Add_drop_event_targetContext add_drop_event_target(int i) {
			return getRuleContext(Add_drop_event_targetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_or_alter_event_sessionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_event_session; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_or_alter_event_session(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_or_alter_event_session(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_or_alter_event_session(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_event_sessionContext create_or_alter_event_session() throws RecognitionException {
		Create_or_alter_event_sessionContext _localctx = new Create_or_alter_event_sessionContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_create_or_alter_event_session);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2338);
			match(EVENT);
			setState(2339);
			match(SESSION);
			setState(2340);
			((Create_or_alter_event_sessionContext)_localctx).event_session_name = id();
			setState(2341);
			match(ON);
			setState(2342);
			match(SERVER);
			setState(2352);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,179,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2344);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2343);
						match(COMMA);
						}
					}

					setState(2348);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,178,_ctx) ) {
					case 1:
						{
						setState(2346);
						add_drop_event();
						}
						break;
					case 2:
						{
						setState(2347);
						add_drop_event_target();
						}
						break;
					}
					}
					} 
				}
				setState(2354);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,179,_ctx);
			}
			setState(2356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,180,_ctx) ) {
			case 1:
				{
				setState(2355);
				create_or_alter_event_session_with();
				}
				break;
			}
			setState(2361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATE) {
				{
				setState(2358);
				match(STATE);
				setState(2359);
				match(EQUAL);
				setState(2360);
				_la = _input.LA(1);
				if ( !(_la==START || _la==STOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_drop_eventContext extends ParserRuleContext {
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext event_name;
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode EVENT() { return getToken(TSQLParser.EVENT, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSQLParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public List<Set_parameterContext> set_parameter() {
			return getRuleContexts(Set_parameterContext.class);
		}
		public Set_parameterContext set_parameter(int i) {
			return getRuleContext(Set_parameterContext.class,i);
		}
		public TerminalNode ACTION() { return getToken(TSQLParser.ACTION, 0); }
		public TerminalNode WHERE() { return getToken(TSQLParser.WHERE, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return getRuleContext(Event_session_predicate_expressionContext.class,0);
		}
		public List<Event_actionContext> event_action() {
			return getRuleContexts(Event_actionContext.class);
		}
		public Event_actionContext event_action(int i) {
			return getRuleContext(Event_actionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public Add_drop_eventContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop_event; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAdd_drop_event(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAdd_drop_event(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAdd_drop_event(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_drop_eventContext add_drop_event() throws RecognitionException {
		Add_drop_eventContext _localctx = new Add_drop_eventContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_add_drop_event);
		int _la;
		try {
			int _alt;
			setState(2420);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2363);
				match(ADD);
				setState(2364);
				match(EVENT);
				{
				setState(2368);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,182,_ctx) ) {
				case 1:
					{
					setState(2365);
					((Add_drop_eventContext)_localctx).event_module_guid = id();
					setState(2366);
					match(DOT);
					}
					break;
				}
				setState(2370);
				((Add_drop_eventContext)_localctx).event_package_name = id();
				setState(2371);
				match(DOT);
				setState(2372);
				((Add_drop_eventContext)_localctx).event_name = id();
				}
				setState(2407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,189,_ctx) ) {
				case 1:
					{
					setState(2374);
					match(LR_BRACKET);
					setState(2386);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==SET) {
						{
						setState(2375);
						match(SET);
						setState(2376);
						set_parameter();
						setState(2383);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
						while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								setState(2378);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(2377);
									match(COMMA);
									}
								}

								setState(2380);
								set_parameter();
								}
								} 
							}
							setState(2385);
							_errHandler.sync(this);
							_alt = getInterpreter().adaptivePredict(_input,184,_ctx);
						}
						}
					}

					setState(2400);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ACTION) {
						{
						setState(2388);
						match(ACTION);
						setState(2389);
						match(LR_BRACKET);
						{
						setState(2390);
						event_action();
						setState(2395);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(2391);
							match(COMMA);
							setState(2392);
							event_action();
							}
							}
							setState(2397);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(2398);
						match(RR_BRACKET);
						}
						}
					}

					setState(2404);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WHERE) {
						{
						setState(2402);
						match(WHERE);
						setState(2403);
						event_session_predicate_expression();
						}
					}

					setState(2406);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2409);
				match(DROP);
				setState(2410);
				match(EVENT);
				setState(2414);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
				case 1:
					{
					setState(2411);
					((Add_drop_eventContext)_localctx).event_module_guid = id();
					setState(2412);
					match(DOT);
					}
					break;
				}
				setState(2416);
				((Add_drop_eventContext)_localctx).event_package_name = id();
				setState(2417);
				match(DOT);
				setState(2418);
				((Add_drop_eventContext)_localctx).event_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_actionContext extends ParserRuleContext {
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext action_name;
		public List<TerminalNode> DOT() { return getTokens(TSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSQLParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Event_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterEvent_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitEvent_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitEvent_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_actionContext event_action() throws RecognitionException {
		Event_actionContext _localctx = new Event_actionContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_event_action);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2425);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				{
				setState(2422);
				((Event_actionContext)_localctx).event_module_guid = id();
				setState(2423);
				match(DOT);
				}
				break;
			}
			setState(2427);
			((Event_actionContext)_localctx).event_package_name = id();
			setState(2428);
			match(DOT);
			setState(2429);
			((Event_actionContext)_localctx).action_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_drop_event_targetContext extends ParserRuleContext {
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext target_name;
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode TARGET() { return getToken(TSQLParser.TARGET, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSQLParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public List<Set_parameterContext> set_parameter() {
			return getRuleContexts(Set_parameterContext.class);
		}
		public Set_parameterContext set_parameter(int i) {
			return getRuleContext(Set_parameterContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public Add_drop_event_targetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop_event_target; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAdd_drop_event_target(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAdd_drop_event_target(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAdd_drop_event_target(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_drop_event_targetContext add_drop_event_target() throws RecognitionException {
		Add_drop_event_targetContext _localctx = new Add_drop_event_targetContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_add_drop_event_target);
		int _la;
		try {
			setState(2468);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2431);
				match(ADD);
				setState(2432);
				match(TARGET);
				setState(2436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,193,_ctx) ) {
				case 1:
					{
					setState(2433);
					((Add_drop_event_targetContext)_localctx).event_module_guid = id();
					setState(2434);
					match(DOT);
					}
					break;
				}
				setState(2438);
				((Add_drop_event_targetContext)_localctx).event_package_name = id();
				setState(2439);
				match(DOT);
				setState(2440);
				((Add_drop_event_targetContext)_localctx).target_name = id();
				setState(2455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
				case 1:
					{
					setState(2441);
					match(LR_BRACKET);
					setState(2442);
					match(SET);
					setState(2443);
					set_parameter();
					setState(2450);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)) | (1L << (COMMA - 770)))) != 0)) {
						{
						{
						setState(2445);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2444);
							match(COMMA);
							}
						}

						setState(2447);
						set_parameter();
						}
						}
						setState(2452);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2453);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2457);
				match(DROP);
				setState(2458);
				match(TARGET);
				setState(2462);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,197,_ctx) ) {
				case 1:
					{
					setState(2459);
					((Add_drop_event_targetContext)_localctx).event_module_guid = id();
					setState(2460);
					match(DOT);
					}
					break;
				}
				setState(2464);
				((Add_drop_event_targetContext)_localctx).event_package_name = id();
				setState(2465);
				match(DOT);
				setState(2466);
				((Add_drop_event_targetContext)_localctx).target_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_parameterContext extends ParserRuleContext {
		public IdContext target_parameter_name;
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Set_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSet_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSet_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSet_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_parameterContext set_parameter() throws RecognitionException {
		Set_parameterContext _localctx = new Set_parameterContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_set_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2470);
			((Set_parameterContext)_localctx).target_parameter_name = id();
			setState(2471);
			match(EQUAL);
			setState(2480);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
			case LR_BRACKET:
				{
				setState(2473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2472);
					match(LR_BRACKET);
					}
				}

				setState(2475);
				match(DECIMAL);
				setState(2477);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
				case 1:
					{
					setState(2476);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRING:
				{
				setState(2479);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_event_session_withContext extends ParserRuleContext {
		public Token max_memory;
		public Token max_dispatch_latency_seconds;
		public Token max_event_size;
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode MAX_MEMORY() { return getToken(TSQLParser.MAX_MEMORY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode EVENT_RETENTION_MODE() { return getToken(TSQLParser.EVENT_RETENTION_MODE, 0); }
		public TerminalNode MAX_DISPATCH_LATENCY() { return getToken(TSQLParser.MAX_DISPATCH_LATENCY, 0); }
		public TerminalNode MAX_EVENT_SIZE() { return getToken(TSQLParser.MAX_EVENT_SIZE, 0); }
		public TerminalNode MEMORY_PARTITION_MODE() { return getToken(TSQLParser.MEMORY_PARTITION_MODE, 0); }
		public TerminalNode TRACK_CAUSALITY() { return getToken(TSQLParser.TRACK_CAUSALITY, 0); }
		public List<On_offContext> on_off() {
			return getRuleContexts(On_offContext.class);
		}
		public On_offContext on_off(int i) {
			return getRuleContext(On_offContext.class,i);
		}
		public TerminalNode STARTUP_STATE() { return getToken(TSQLParser.STARTUP_STATE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public List<TerminalNode> KB() { return getTokens(TSQLParser.KB); }
		public TerminalNode KB(int i) {
			return getToken(TSQLParser.KB, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSQLParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSQLParser.MB, i);
		}
		public TerminalNode ALLOW_SINGLE_EVENT_LOSS() { return getToken(TSQLParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public TerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return getToken(TSQLParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public TerminalNode NO_EVENT_LOSS() { return getToken(TSQLParser.NO_EVENT_LOSS, 0); }
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public TerminalNode PER_NODE() { return getToken(TSQLParser.PER_NODE, 0); }
		public TerminalNode PER_CPU() { return getToken(TSQLParser.PER_CPU, 0); }
		public TerminalNode SECONDS() { return getToken(TSQLParser.SECONDS, 0); }
		public TerminalNode INFINITE() { return getToken(TSQLParser.INFINITE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_or_alter_event_session_withContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_event_session_with; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_or_alter_event_session_with(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_or_alter_event_session_with(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_or_alter_event_session_with(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_event_session_withContext create_or_alter_event_session_with() throws RecognitionException {
		Create_or_alter_event_session_withContext _localctx = new Create_or_alter_event_session_withContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_create_or_alter_event_session_with);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2482);
			match(WITH);
			setState(2483);
			match(LR_BRACKET);
			setState(2491);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,203,_ctx) ) {
			case 1:
				{
				setState(2485);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2484);
					match(COMMA);
					}
				}

				setState(2487);
				match(MAX_MEMORY);
				setState(2488);
				match(EQUAL);
				setState(2489);
				((Create_or_alter_event_session_withContext)_localctx).max_memory = match(DECIMAL);
				setState(2490);
				_la = _input.LA(1);
				if ( !(_la==KB || _la==MB) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2499);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				setState(2494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2493);
					match(COMMA);
					}
				}

				setState(2496);
				match(EVENT_RETENTION_MODE);
				setState(2497);
				match(EQUAL);
				setState(2498);
				_la = _input.LA(1);
				if ( !(_la==ALLOW_MULTIPLE_EVENT_LOSS || _la==ALLOW_SINGLE_EVENT_LOSS || _la==NO_EVENT_LOSS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2511);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,208,_ctx) ) {
			case 1:
				{
				setState(2502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2501);
					match(COMMA);
					}
				}

				setState(2504);
				match(MAX_DISPATCH_LATENCY);
				setState(2505);
				match(EQUAL);
				setState(2509);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(2506);
					((Create_or_alter_event_session_withContext)_localctx).max_dispatch_latency_seconds = match(DECIMAL);
					setState(2507);
					match(SECONDS);
					}
					break;
				case INFINITE:
					{
					setState(2508);
					match(INFINITE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(2520);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
			case 1:
				{
				setState(2514);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2513);
					match(COMMA);
					}
				}

				setState(2516);
				match(MAX_EVENT_SIZE);
				setState(2517);
				match(EQUAL);
				setState(2518);
				((Create_or_alter_event_session_withContext)_localctx).max_event_size = match(DECIMAL);
				setState(2519);
				_la = _input.LA(1);
				if ( !(_la==KB || _la==MB) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				{
				setState(2523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2522);
					match(COMMA);
					}
				}

				setState(2525);
				match(MEMORY_PARTITION_MODE);
				setState(2526);
				match(EQUAL);
				setState(2527);
				_la = _input.LA(1);
				if ( !(((((_la - 520)) & ~0x3f) == 0 && ((1L << (_la - 520)) & ((1L << (NONE - 520)) | (1L << (PER_CPU - 520)) | (1L << (PER_NODE - 520)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2536);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				setState(2531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2530);
					match(COMMA);
					}
				}

				setState(2533);
				match(TRACK_CAUSALITY);
				setState(2534);
				match(EQUAL);
				setState(2535);
				on_off();
				}
				break;
			}
			setState(2544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STARTUP_STATE || _la==COMMA) {
				{
				setState(2539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2538);
					match(COMMA);
					}
				}

				setState(2541);
				match(STARTUP_STATE);
				setState(2542);
				match(EQUAL);
				setState(2543);
				on_off();
				}
			}

			setState(2546);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_expressionContext extends ParserRuleContext {
		public List<Event_session_predicate_factorContext> event_session_predicate_factor() {
			return getRuleContexts(Event_session_predicate_factorContext.class);
		}
		public Event_session_predicate_factorContext event_session_predicate_factor(int i) {
			return getRuleContext(Event_session_predicate_factorContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<Event_session_predicate_expressionContext> event_session_predicate_expression() {
			return getRuleContexts(Event_session_predicate_expressionContext.class);
		}
		public Event_session_predicate_expressionContext event_session_predicate_expression(int i) {
			return getRuleContext(Event_session_predicate_expressionContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> NOT() { return getTokens(TSQLParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSQLParser.NOT, i);
		}
		public List<TerminalNode> AND() { return getTokens(TSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSQLParser.AND, i);
		}
		public List<TerminalNode> OR() { return getTokens(TSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(TSQLParser.OR, i);
		}
		public Event_session_predicate_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterEvent_session_predicate_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitEvent_session_predicate_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitEvent_session_predicate_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_session_predicate_expressionContext event_session_predicate_expression() throws RecognitionException {
		Event_session_predicate_expressionContext _localctx = new Event_session_predicate_expressionContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_event_session_predicate_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2564); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2549);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2548);
					match(COMMA);
					}
				}

				setState(2552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND || _la==OR) {
					{
					setState(2551);
					_la = _input.LA(1);
					if ( !(_la==AND || _la==OR) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2555);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2554);
					match(NOT);
					}
				}

				setState(2562);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					setState(2557);
					event_session_predicate_factor();
					}
					break;
				case 2:
					{
					setState(2558);
					match(LR_BRACKET);
					setState(2559);
					event_session_predicate_expression();
					setState(2560);
					match(RR_BRACKET);
					}
					break;
				}
				}
				}
				setState(2566); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==AND || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (FILLFACTOR - 65)) | (1L << (NOT - 65)) | (1L << (OR - 65)) | (1L << (PRECISION - 65)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)) | (1L << (LR_BRACKET - 770)) | (1L << (COMMA - 770)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_factorContext extends ParserRuleContext {
		public Event_session_predicate_leafContext event_session_predicate_leaf() {
			return getRuleContext(Event_session_predicate_leafContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Event_session_predicate_expressionContext event_session_predicate_expression() {
			return getRuleContext(Event_session_predicate_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Event_session_predicate_factorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_factor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterEvent_session_predicate_factor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitEvent_session_predicate_factor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitEvent_session_predicate_factor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_session_predicate_factorContext event_session_predicate_factor() throws RecognitionException {
		Event_session_predicate_factorContext _localctx = new Event_session_predicate_factorContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_event_session_predicate_factor);
		try {
			setState(2573);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2568);
				event_session_predicate_leaf();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(2569);
				match(LR_BRACKET);
				setState(2570);
				event_session_predicate_expression();
				setState(2571);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Event_session_predicate_leafContext extends ParserRuleContext {
		public IdContext event_field_name;
		public IdContext event_module_guid;
		public IdContext event_package_name;
		public IdContext predicate_source_name;
		public IdContext predicate_compare_name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode LESS() { return getToken(TSQLParser.LESS, 0); }
		public TerminalNode GREATER() { return getToken(TSQLParser.GREATER, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSQLParser.EXCLAMATION, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSQLParser.DOT, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public Event_session_predicate_leafContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_event_session_predicate_leaf; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterEvent_session_predicate_leaf(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitEvent_session_predicate_leaf(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitEvent_session_predicate_leaf(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Event_session_predicate_leafContext event_session_predicate_leaf() throws RecognitionException {
		Event_session_predicate_leafContext _localctx = new Event_session_predicate_leafContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_event_session_predicate_leaf);
		int _la;
		try {
			setState(2629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2575);
				((Event_session_predicate_leafContext)_localctx).event_field_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2586);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,224,_ctx) ) {
				case 1:
					{
					setState(2576);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id();
					}
					break;
				case 2:
					{
					{
					setState(2580);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
					case 1:
						{
						setState(2577);
						((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
						setState(2578);
						match(DOT);
						}
						break;
					}
					setState(2582);
					((Event_session_predicate_leafContext)_localctx).event_package_name = id();
					setState(2583);
					match(DOT);
					setState(2584);
					((Event_session_predicate_leafContext)_localctx).predicate_source_name = id();
					}
					}
					break;
				}
				setState(2599);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,225,_ctx) ) {
				case 1:
					{
					setState(2588);
					match(EQUAL);
					}
					break;
				case 2:
					{
					setState(2589);
					match(LESS);
					setState(2590);
					match(GREATER);
					}
					break;
				case 3:
					{
					setState(2591);
					match(EXCLAMATION);
					setState(2592);
					match(EQUAL);
					}
					break;
				case 4:
					{
					setState(2593);
					match(GREATER);
					}
					break;
				case 5:
					{
					setState(2594);
					match(GREATER);
					setState(2595);
					match(EQUAL);
					}
					break;
				case 6:
					{
					setState(2596);
					match(LESS);
					}
					break;
				case 7:
					{
					setState(2597);
					match(LESS);
					setState(2598);
					match(EQUAL);
					}
					break;
				}
				setState(2601);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==STRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2606);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
				case 1:
					{
					setState(2603);
					((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
					setState(2604);
					match(DOT);
					}
					break;
				}
				setState(2608);
				((Event_session_predicate_leafContext)_localctx).event_package_name = id();
				setState(2609);
				match(DOT);
				setState(2610);
				((Event_session_predicate_leafContext)_localctx).predicate_compare_name = id();
				setState(2611);
				match(LR_BRACKET);
				setState(2625);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,228,_ctx) ) {
				case 1:
					{
					setState(2612);
					((Event_session_predicate_leafContext)_localctx).event_field_name = id();
					}
					break;
				case 2:
					{
					{
					setState(2616);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
					case 1:
						{
						setState(2613);
						((Event_session_predicate_leafContext)_localctx).event_module_guid = id();
						setState(2614);
						match(DOT);
						}
						break;
					}
					setState(2618);
					((Event_session_predicate_leafContext)_localctx).event_package_name = id();
					setState(2619);
					match(DOT);
					setState(2620);
					((Event_session_predicate_leafContext)_localctx).predicate_source_name = id();
					}
					setState(2622);
					match(COMMA);
					setState(2623);
					_la = _input.LA(1);
					if ( !(_la==DECIMAL || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2627);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_data_sourceContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode DATA() { return getToken(TSQLParser.DATA, 0); }
		public TerminalNode SOURCE() { return getToken(TSQLParser.SOURCE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public List<TerminalNode> LOCATION() { return getTokens(TSQLParser.LOCATION); }
		public TerminalNode LOCATION(int i) {
			return getToken(TSQLParser.LOCATION, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> RESOURCE_MANAGER_LOCATION() { return getTokens(TSQLParser.RESOURCE_MANAGER_LOCATION); }
		public TerminalNode RESOURCE_MANAGER_LOCATION(int i) {
			return getToken(TSQLParser.RESOURCE_MANAGER_LOCATION, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSQLParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSQLParser.CREDENTIAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(TSQLParser.BLOB_STORAGE, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Alter_external_data_sourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_data_source; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_external_data_source(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_external_data_source(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_external_data_source(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_external_data_sourceContext alter_external_data_source() throws RecognitionException {
		Alter_external_data_sourceContext _localctx = new Alter_external_data_sourceContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_alter_external_data_source);
		int _la;
		try {
			setState(2676);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2631);
				match(EXTERNAL);
				setState(2632);
				match(DATA);
				setState(2633);
				match(SOURCE);
				setState(2634);
				id();
				setState(2635);
				match(SET);
				setState(2651); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2651);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LOCATION:
						{
						setState(2636);
						match(LOCATION);
						setState(2637);
						match(EQUAL);
						setState(2638);
						match(STRING);
						setState(2640);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2639);
							match(COMMA);
							}
						}

						}
						break;
					case RESOURCE_MANAGER_LOCATION:
						{
						setState(2642);
						match(RESOURCE_MANAGER_LOCATION);
						setState(2643);
						match(EQUAL);
						setState(2644);
						match(STRING);
						setState(2646);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2645);
							match(COMMA);
							}
						}

						}
						break;
					case CREDENTIAL:
						{
						setState(2648);
						match(CREDENTIAL);
						setState(2649);
						match(EQUAL);
						setState(2650);
						id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2653); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CREDENTIAL || _la==LOCATION || _la==RESOURCE_MANAGER_LOCATION );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2655);
				match(EXTERNAL);
				setState(2656);
				match(DATA);
				setState(2657);
				match(SOURCE);
				setState(2658);
				id();
				setState(2659);
				match(WITH);
				setState(2660);
				match(LR_BRACKET);
				setState(2661);
				match(TYPE);
				setState(2662);
				match(EQUAL);
				setState(2663);
				match(BLOB_STORAGE);
				setState(2664);
				match(COMMA);
				setState(2665);
				match(LOCATION);
				setState(2666);
				match(EQUAL);
				setState(2667);
				match(STRING);
				setState(2672);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2668);
					match(COMMA);
					setState(2669);
					match(CREDENTIAL);
					setState(2670);
					match(EQUAL);
					setState(2671);
					id();
					}
				}

				setState(2674);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public Token client_library;
		public IdContext external_data_source_name;
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSQLParser.LIBRARY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSQLParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode PLATFORM() { return getToken(TSQLParser.PLATFORM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(TSQLParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(TSQLParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(TSQLParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(TSQLParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R_LETTER() { return getTokens(TSQLParser.R_LETTER); }
		public TerminalNode R_LETTER(int i) {
			return getToken(TSQLParser.R_LETTER, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(TSQLParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(TSQLParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSQLParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(TSQLParser.LINUX, 0); }
		public Alter_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_external_library(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_external_library(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_external_libraryContext alter_external_library() throws RecognitionException {
		Alter_external_libraryContext _localctx = new Alter_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_alter_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2678);
			match(EXTERNAL);
			setState(2679);
			match(LIBRARY);
			setState(2680);
			((Alter_external_libraryContext)_localctx).library_name = id();
			setState(2683);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2681);
				match(AUTHORIZATION);
				setState(2682);
				id();
				}
			}

			setState(2685);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==SET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2686);
			match(LR_BRACKET);
			setState(2687);
			match(CONTENT);
			setState(2688);
			match(EQUAL);
			setState(2692);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(2689);
				((Alter_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(2690);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(2691);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			{
			setState(2694);
			match(COMMA);
			setState(2695);
			match(PLATFORM);
			setState(2696);
			match(EQUAL);
			setState(2698);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINUX || _la==WINDOWS) {
				{
				setState(2697);
				_la = _input.LA(1);
				if ( !(_la==LINUX || _la==WINDOWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2700);
			match(RR_BRACKET);
			}
			setState(2702);
			match(WITH);
			setState(2712); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2712);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LANGUAGE:
				case COMMA:
					{
					setState(2704);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2703);
						match(COMMA);
						}
					}

					setState(2706);
					match(LANGUAGE);
					setState(2707);
					match(EQUAL);
					setState(2708);
					_la = _input.LA(1);
					if ( !(_la==PYTHON || _la==R_LETTER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case DATA_SOURCE:
					{
					setState(2709);
					match(DATA_SOURCE);
					setState(2710);
					match(EQUAL);
					setState(2711);
					((Alter_external_libraryContext)_localctx).external_data_source_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2714); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
			setState(2716);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_libraryContext extends ParserRuleContext {
		public IdContext library_name;
		public Token client_library;
		public IdContext external_data_source_name;
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSQLParser.LIBRARY, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSQLParser.CONTENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode PLATFORM() { return getToken(TSQLParser.PLATFORM, 0); }
		public List<TerminalNode> LANGUAGE() { return getTokens(TSQLParser.LANGUAGE); }
		public TerminalNode LANGUAGE(int i) {
			return getToken(TSQLParser.LANGUAGE, i);
		}
		public List<TerminalNode> DATA_SOURCE() { return getTokens(TSQLParser.DATA_SOURCE); }
		public TerminalNode DATA_SOURCE(int i) {
			return getToken(TSQLParser.DATA_SOURCE, i);
		}
		public List<TerminalNode> R_LETTER() { return getTokens(TSQLParser.R_LETTER); }
		public TerminalNode R_LETTER(int i) {
			return getToken(TSQLParser.R_LETTER, i);
		}
		public List<TerminalNode> PYTHON() { return getTokens(TSQLParser.PYTHON); }
		public TerminalNode PYTHON(int i) {
			return getToken(TSQLParser.PYTHON, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSQLParser.WINDOWS, 0); }
		public TerminalNode LINUX() { return getToken(TSQLParser.LINUX, 0); }
		public Create_external_libraryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_library; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_external_library(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_external_library(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_external_library(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_libraryContext create_external_library() throws RecognitionException {
		Create_external_libraryContext _localctx = new Create_external_libraryContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_create_external_library);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2718);
			match(EXTERNAL);
			setState(2719);
			match(LIBRARY);
			setState(2720);
			((Create_external_libraryContext)_localctx).library_name = id();
			setState(2723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2721);
				match(AUTHORIZATION);
				setState(2722);
				id();
				}
			}

			setState(2725);
			match(FROM);
			{
			setState(2727);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2726);
				match(COMMA);
				}
			}

			setState(2730);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(2729);
				match(LR_BRACKET);
				}
			}

			setState(2734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTENT) {
				{
				setState(2732);
				match(CONTENT);
				setState(2733);
				match(EQUAL);
				}
			}

			setState(2739);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING:
				{
				setState(2736);
				((Create_external_libraryContext)_localctx).client_library = match(STRING);
				}
				break;
			case BINARY:
				{
				setState(2737);
				match(BINARY);
				}
				break;
			case NONE:
				{
				setState(2738);
				match(NONE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2741);
				match(COMMA);
				setState(2742);
				match(PLATFORM);
				setState(2743);
				match(EQUAL);
				setState(2745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINUX || _la==WINDOWS) {
					{
					setState(2744);
					_la = _input.LA(1);
					if ( !(_la==LINUX || _la==WINDOWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2747);
				match(RR_BRACKET);
				}
			}

			}
			setState(2765);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,252,_ctx) ) {
			case 1:
				{
				setState(2750);
				match(WITH);
				setState(2760); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(2760);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case LANGUAGE:
					case COMMA:
						{
						setState(2752);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(2751);
							match(COMMA);
							}
						}

						setState(2754);
						match(LANGUAGE);
						setState(2755);
						match(EQUAL);
						setState(2756);
						_la = _input.LA(1);
						if ( !(_la==PYTHON || _la==R_LETTER) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case DATA_SOURCE:
						{
						setState(2757);
						match(DATA_SOURCE);
						setState(2758);
						match(EQUAL);
						setState(2759);
						((Create_external_libraryContext)_localctx).external_data_source_name = id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2762); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DATA_SOURCE || _la==LANGUAGE || _la==COMMA );
				setState(2764);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSQLParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSQLParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSQLParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public TerminalNode AFFINITY() { return getToken(TSQLParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(TSQLParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSQLParser.NUMANODE, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSQLParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSQLParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(TSQLParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSQLParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSQLParser.TO, i);
		}
		public Alter_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_external_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_external_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_external_resource_poolContext alter_external_resource_pool() throws RecognitionException {
		Alter_external_resource_poolContext _localctx = new Alter_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_alter_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2767);
			match(EXTERNAL);
			setState(2768);
			match(RESOURCE);
			setState(2769);
			match(POOL);
			setState(2770);
			((Alter_external_resource_poolContext)_localctx).pool_name = id();
			setState(2771);
			match(WITH);
			setState(2772);
			match(LR_BRACKET);
			setState(2773);
			match(MAX_CPU_PERCENT);
			setState(2774);
			match(EQUAL);
			setState(2775);
			((Alter_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(2813);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(2777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2776);
					match(COMMA);
					}
				}

				setState(2779);
				match(AFFINITY);
				setState(2780);
				match(CPU);
				setState(2781);
				match(EQUAL);
				setState(2795);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(2782);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(2791); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(2791);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,255,_ctx) ) {
							case 1:
								{
								setState(2784);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(2783);
									match(COMMA);
									}
								}

								setState(2786);
								match(DECIMAL);
								setState(2787);
								match(TO);
								setState(2788);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(2789);
								match(COMMA);
								setState(2790);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2793); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,256,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(2797);
				match(NUMANODE);
				setState(2798);
				match(EQUAL);
				setState(2809); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(2809);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,260,_ctx) ) {
						case 1:
							{
							setState(2800);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2799);
								match(COMMA);
								}
							}

							setState(2802);
							match(DECIMAL);
							setState(2803);
							match(TO);
							setState(2804);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(2806);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2805);
								match(COMMA);
								}
							}

							setState(2808);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2811); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,261,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,264,_ctx) ) {
			case 1:
				{
				setState(2816);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2815);
					match(COMMA);
					}
				}

				setState(2818);
				match(MAX_MEMORY_PERCENT);
				setState(2819);
				match(EQUAL);
				setState(2820);
				((Alter_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(2829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(2824);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2823);
					match(COMMA);
					}
				}

				setState(2826);
				match(MAX_PROCESSES);
				setState(2827);
				match(EQUAL);
				setState(2828);
				((Alter_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(2831);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public Token max_cpu_percent;
		public Token max_memory_percent;
		public Token max_processes;
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode RESOURCE() { return getToken(TSQLParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSQLParser.POOL, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSQLParser.MAX_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public TerminalNode AFFINITY() { return getToken(TSQLParser.AFFINITY, 0); }
		public TerminalNode CPU() { return getToken(TSQLParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSQLParser.NUMANODE, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSQLParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSQLParser.MAX_PROCESSES, 0); }
		public TerminalNode AUTO() { return getToken(TSQLParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSQLParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSQLParser.TO, i);
		}
		public Create_external_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_external_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_external_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_external_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_resource_poolContext create_external_resource_pool() throws RecognitionException {
		Create_external_resource_poolContext _localctx = new Create_external_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_create_external_resource_pool);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2833);
			match(EXTERNAL);
			setState(2834);
			match(RESOURCE);
			setState(2835);
			match(POOL);
			setState(2836);
			((Create_external_resource_poolContext)_localctx).pool_name = id();
			setState(2837);
			match(WITH);
			setState(2838);
			match(LR_BRACKET);
			setState(2839);
			match(MAX_CPU_PERCENT);
			setState(2840);
			match(EQUAL);
			setState(2841);
			((Create_external_resource_poolContext)_localctx).max_cpu_percent = match(DECIMAL);
			setState(2879);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFFINITY:
			case COMMA:
				{
				setState(2843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2842);
					match(COMMA);
					}
				}

				setState(2845);
				match(AFFINITY);
				setState(2846);
				match(CPU);
				setState(2847);
				match(EQUAL);
				setState(2861);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO:
					{
					setState(2848);
					match(AUTO);
					}
					break;
				case DECIMAL:
				case COMMA:
					{
					setState(2857); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							setState(2857);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,269,_ctx) ) {
							case 1:
								{
								setState(2850);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(2849);
									match(COMMA);
									}
								}

								setState(2852);
								match(DECIMAL);
								setState(2853);
								match(TO);
								setState(2854);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(2855);
								match(COMMA);
								setState(2856);
								match(DECIMAL);
								}
								break;
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(2859); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,270,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NUMANODE:
				{
				setState(2863);
				match(NUMANODE);
				setState(2864);
				match(EQUAL);
				setState(2875); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						setState(2875);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,274,_ctx) ) {
						case 1:
							{
							setState(2866);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2865);
								match(COMMA);
								}
							}

							setState(2868);
							match(DECIMAL);
							setState(2869);
							match(TO);
							setState(2870);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(2872);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(2871);
								match(COMMA);
								}
							}

							setState(2874);
							match(DECIMAL);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2877); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,275,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
			case 1:
				{
				setState(2882);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2881);
					match(COMMA);
					}
				}

				setState(2884);
				match(MAX_MEMORY_PERCENT);
				setState(2885);
				match(EQUAL);
				setState(2886);
				((Create_external_resource_poolContext)_localctx).max_memory_percent = match(DECIMAL);
				}
				break;
			}
			setState(2895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAX_PROCESSES || _la==COMMA) {
				{
				setState(2890);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2889);
					match(COMMA);
					}
				}

				setState(2892);
				match(MAX_PROCESSES);
				setState(2893);
				match(EQUAL);
				setState(2894);
				((Create_external_resource_poolContext)_localctx).max_processes = match(DECIMAL);
				}
			}

			setState(2897);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_external_tableContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode TABLE() { return getToken(TSQLParser.TABLE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<External_table_optionContext> external_table_option() {
			return getRuleContexts(External_table_optionContext.class);
		}
		public External_table_optionContext external_table_option(int i) {
			return getRuleContext(External_table_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_external_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_external_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_external_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_external_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_external_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_external_tableContext create_external_table() throws RecognitionException {
		Create_external_tableContext _localctx = new Create_external_tableContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_create_external_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2899);
			match(EXTERNAL);
			setState(2900);
			match(TABLE);
			setState(2901);
			qualified_name();
			setState(2902);
			match(LR_BRACKET);
			setState(2903);
			column_def_table_constraints();
			setState(2904);
			match(RR_BRACKET);
			setState(2905);
			match(WITH);
			setState(2906);
			match(LR_BRACKET);
			setState(2907);
			external_table_option();
			setState(2912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2908);
				match(COMMA);
				setState(2909);
				external_table_option();
				}
				}
				setState(2914);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2915);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_table_optionContext extends ParserRuleContext {
		public ExpressionContext value;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public External_table_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_table_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExternal_table_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExternal_table_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExternal_table_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_table_optionContext external_table_option() throws RecognitionException {
		External_table_optionContext _localctx = new External_table_optionContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_external_table_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2917);
			id();
			setState(2918);
			match(EQUAL);
			setState(2919);
			((External_table_optionContext)_localctx).value = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public TerminalNode FULLTEXT() { return getToken(TSQLParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSQLParser.CATALOG, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode REBUILD() { return getToken(TSQLParser.REBUILD, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSQLParser.REORGANIZE, 0); }
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSQLParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public Alter_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_fulltext_catalog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_fulltext_catalog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_fulltext_catalogContext alter_fulltext_catalog() throws RecognitionException {
		Alter_fulltext_catalogContext _localctx = new Alter_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_alter_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2921);
			match(FULLTEXT);
			setState(2922);
			match(CATALOG);
			setState(2923);
			((Alter_fulltext_catalogContext)_localctx).catalog_name = id();
			setState(2934);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				{
				setState(2924);
				match(REBUILD);
				setState(2929);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					setState(2925);
					match(WITH);
					setState(2926);
					match(ACCENT_SENSITIVITY);
					setState(2927);
					match(EQUAL);
					setState(2928);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				{
				setState(2931);
				match(REORGANIZE);
				}
				break;
			case AS:
				{
				setState(2932);
				match(AS);
				setState(2933);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_catalogContext extends ParserRuleContext {
		public IdContext catalog_name;
		public IdContext filegroup;
		public Token rootpath;
		public TerminalNode FULLTEXT() { return getToken(TSQLParser.FULLTEXT, 0); }
		public TerminalNode CATALOG() { return getToken(TSQLParser.CATALOG, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(TSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSQLParser.ON, i);
		}
		public TerminalNode FILEGROUP() { return getToken(TSQLParser.FILEGROUP, 0); }
		public TerminalNode IN() { return getToken(TSQLParser.IN, 0); }
		public TerminalNode PATH() { return getToken(TSQLParser.PATH, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSQLParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public Create_fulltext_catalogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_catalog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_fulltext_catalog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_fulltext_catalog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_fulltext_catalog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_fulltext_catalogContext create_fulltext_catalog() throws RecognitionException {
		Create_fulltext_catalogContext _localctx = new Create_fulltext_catalogContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_create_fulltext_catalog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2936);
			match(FULLTEXT);
			setState(2937);
			match(CATALOG);
			setState(2938);
			((Create_fulltext_catalogContext)_localctx).catalog_name = id();
			setState(2942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(2939);
				match(ON);
				setState(2940);
				match(FILEGROUP);
				setState(2941);
				((Create_fulltext_catalogContext)_localctx).filegroup = id();
				}
			}

			setState(2947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(2944);
				match(IN);
				setState(2945);
				match(PATH);
				setState(2946);
				((Create_fulltext_catalogContext)_localctx).rootpath = match(STRING);
				}
			}

			setState(2953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,286,_ctx) ) {
			case 1:
				{
				setState(2949);
				match(WITH);
				setState(2950);
				match(ACCENT_SENSITIVITY);
				setState(2951);
				match(EQUAL);
				setState(2952);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2955);
				match(AS);
				setState(2956);
				match(DEFAULT);
				}
			}

			setState(2961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2959);
				match(AUTHORIZATION);
				setState(2960);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public Token stopword;
		public TerminalNode FULLTEXT() { return getToken(TSQLParser.FULLTEXT, 0); }
		public TerminalNode STOPLIST() { return getToken(TSQLParser.STOPLIST, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode LANGUAGE() { return getToken(TSQLParser.LANGUAGE, 0); }
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public Alter_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_fulltext_stoplist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_fulltext_stoplist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_fulltext_stoplistContext alter_fulltext_stoplist() throws RecognitionException {
		Alter_fulltext_stoplistContext _localctx = new Alter_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_alter_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2963);
			match(FULLTEXT);
			setState(2964);
			match(STOPLIST);
			setState(2965);
			((Alter_fulltext_stoplistContext)_localctx).stoplist_name = id();
			setState(2979);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				{
				setState(2966);
				match(ADD);
				setState(2967);
				((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
				setState(2968);
				match(LANGUAGE);
				setState(2969);
				_la = _input.LA(1);
				if ( !(((((_la - 792)) & ~0x3f) == 0 && ((1L << (_la - 792)) & ((1L << (DECIMAL - 792)) | (1L << (STRING - 792)) | (1L << (BINARY - 792)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DROP:
				{
				setState(2970);
				match(DROP);
				setState(2977);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					setState(2971);
					((Alter_fulltext_stoplistContext)_localctx).stopword = match(STRING);
					setState(2972);
					match(LANGUAGE);
					setState(2973);
					_la = _input.LA(1);
					if ( !(((((_la - 792)) & ~0x3f) == 0 && ((1L << (_la - 792)) & ((1L << (DECIMAL - 792)) | (1L << (STRING - 792)) | (1L << (BINARY - 792)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 2:
					{
					setState(2974);
					match(ALL);
					setState(2975);
					_la = _input.LA(1);
					if ( !(((((_la - 792)) & ~0x3f) == 0 && ((1L << (_la - 792)) & ((1L << (DECIMAL - 792)) | (1L << (STRING - 792)) | (1L << (BINARY - 792)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case 3:
					{
					setState(2976);
					match(ALL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_stoplistContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public IdContext database_name;
		public IdContext source_stoplist_name;
		public TerminalNode FULLTEXT() { return getToken(TSQLParser.FULLTEXT, 0); }
		public List<TerminalNode> STOPLIST() { return getTokens(TSQLParser.STOPLIST); }
		public TerminalNode STOPLIST(int i) {
			return getToken(TSQLParser.STOPLIST, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode SYSTEM() { return getToken(TSQLParser.SYSTEM, 0); }
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public Create_fulltext_stoplistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_stoplist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_fulltext_stoplist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_fulltext_stoplist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_fulltext_stoplist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_fulltext_stoplistContext create_fulltext_stoplist() throws RecognitionException {
		Create_fulltext_stoplistContext _localctx = new Create_fulltext_stoplistContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_create_fulltext_stoplist);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2981);
			match(FULLTEXT);
			setState(2982);
			match(STOPLIST);
			setState(2983);
			((Create_fulltext_stoplistContext)_localctx).stoplist_name = id();
			setState(2995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2984);
				match(FROM);
				setState(2993);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
				case 1:
					{
					setState(2988);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
					case 1:
						{
						setState(2985);
						((Create_fulltext_stoplistContext)_localctx).database_name = id();
						setState(2986);
						match(DOT);
						}
						break;
					}
					setState(2990);
					((Create_fulltext_stoplistContext)_localctx).source_stoplist_name = id();
					}
					break;
				case 2:
					{
					setState(2991);
					match(SYSTEM);
					setState(2992);
					match(STOPLIST);
					}
					break;
				}
				}
			}

			setState(2999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(2997);
				match(AUTHORIZATION);
				setState(2998);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_login_sql_serverContext extends ParserRuleContext {
		public Token password;
		public Token password_hash;
		public Token old_password;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext login_name;
		public IdContext credential_name;
		public TerminalNode LOGIN() { return getToken(TSQLParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSQLParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSQLParser.CREDENTIAL, i);
		}
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSQLParser.OLD_PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSQLParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSQLParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSQLParser.CHECK_POLICY, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSQLParser.CHECK_EXPIRATION, 0); }
		public TerminalNode NO() { return getToken(TSQLParser.NO, 0); }
		public TerminalNode ENABLE() { return getToken(TSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSQLParser.DISABLE, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSQLParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSQLParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSQLParser.OFF, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode HASHED() { return getToken(TSQLParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSQLParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSQLParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSQLParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSQLParser.UNLOCK, i);
		}
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public Alter_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_login_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_login_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_login_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_login_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_login_sql_serverContext alter_login_sql_server() throws RecognitionException {
		Alter_login_sql_serverContext _localctx = new Alter_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_alter_login_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3001);
			match(LOGIN);
			setState(3002);
			id();
			setState(3070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,308,_ctx) ) {
			case 1:
				{
				setState(3004);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					setState(3003);
					_la = _input.LA(1);
					if ( !(_la==DISABLE || _la==ENABLE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(3006);
				match(WITH);
				setState(3020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSWORD) {
					{
					{
					setState(3007);
					match(PASSWORD);
					setState(3008);
					match(EQUAL);
					setState(3012);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3009);
						((Alter_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3010);
						((Alter_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3011);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3017);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3014);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						setState(3019);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3031);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OLD_PASSWORD) {
					{
					setState(3022);
					match(OLD_PASSWORD);
					setState(3023);
					match(EQUAL);
					setState(3024);
					((Alter_login_sql_serverContext)_localctx).old_password = match(STRING);
					setState(3028);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3025);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						setState(3030);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_DATABASE) {
					{
					setState(3033);
					match(DEFAULT_DATABASE);
					setState(3034);
					match(EQUAL);
					setState(3035);
					((Alter_login_sql_serverContext)_localctx).default_database = id();
					}
				}

				setState(3041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT_LANGUAGE) {
					{
					setState(3038);
					match(DEFAULT_LANGUAGE);
					setState(3039);
					match(EQUAL);
					setState(3040);
					((Alter_login_sql_serverContext)_localctx).default_laguage = id();
					}
				}

				setState(3046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NAME) {
					{
					setState(3043);
					match(NAME);
					setState(3044);
					match(EQUAL);
					setState(3045);
					((Alter_login_sql_serverContext)_localctx).login_name = id();
					}
				}

				setState(3051);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHECK_POLICY) {
					{
					setState(3048);
					match(CHECK_POLICY);
					setState(3049);
					match(EQUAL);
					setState(3050);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHECK_EXPIRATION) {
					{
					setState(3053);
					match(CHECK_EXPIRATION);
					setState(3054);
					match(EQUAL);
					setState(3055);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CREDENTIAL) {
					{
					setState(3058);
					match(CREDENTIAL);
					setState(3059);
					match(EQUAL);
					setState(3060);
					((Alter_login_sql_serverContext)_localctx).credential_name = id();
					}
				}

				setState(3065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3063);
					match(NO);
					setState(3064);
					match(CREDENTIAL);
					}
				}

				}
				break;
			case 3:
				{
				setState(3067);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3068);
				match(CREDENTIAL);
				setState(3069);
				((Alter_login_sql_serverContext)_localctx).credential_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_sql_serverContext extends ParserRuleContext {
		public IdContext login_name;
		public Token password;
		public Token password_hash;
		public Token sid;
		public IdContext default_database;
		public IdContext default_laguage;
		public IdContext credential_name;
		public Token default_language;
		public IdContext certname;
		public IdContext asym_key_name;
		public TerminalNode LOGIN() { return getToken(TSQLParser.LOGIN, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode SID() { return getToken(TSQLParser.SID, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSQLParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSQLParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSQLParser.CHECK_EXPIRATION, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSQLParser.CHECK_POLICY, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSQLParser.CREDENTIAL, 0); }
		public List<TerminalNode> BINARY() { return getTokens(TSQLParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(TSQLParser.BINARY, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSQLParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSQLParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSQLParser.OFF, i);
		}
		public TerminalNode WINDOWS() { return getToken(TSQLParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode HASHED() { return getToken(TSQLParser.HASHED, 0); }
		public List<TerminalNode> MUST_CHANGE() { return getTokens(TSQLParser.MUST_CHANGE); }
		public TerminalNode MUST_CHANGE(int i) {
			return getToken(TSQLParser.MUST_CHANGE, i);
		}
		public List<TerminalNode> UNLOCK() { return getTokens(TSQLParser.UNLOCK); }
		public TerminalNode UNLOCK(int i) {
			return getToken(TSQLParser.UNLOCK, i);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Create_login_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_login_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_login_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_login_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_login_sql_serverContext create_login_sql_server() throws RecognitionException {
		Create_login_sql_serverContext _localctx = new Create_login_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_create_login_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3072);
			match(LOGIN);
			setState(3073);
			((Create_login_sql_serverContext)_localctx).login_name = id();
			setState(3164);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(3074);
				match(WITH);
				setState(3088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSWORD) {
					{
					{
					setState(3075);
					match(PASSWORD);
					setState(3076);
					match(EQUAL);
					setState(3080);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(3077);
						((Create_login_sql_serverContext)_localctx).password = match(STRING);
						}
						break;
					case BINARY:
						{
						setState(3078);
						((Create_login_sql_serverContext)_localctx).password_hash = match(BINARY);
						setState(3079);
						match(HASHED);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(3085);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==MUST_CHANGE || _la==UNLOCK) {
						{
						{
						setState(3082);
						_la = _input.LA(1);
						if ( !(_la==MUST_CHANGE || _la==UNLOCK) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						}
						setState(3087);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3096);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,313,_ctx) ) {
				case 1:
					{
					setState(3091);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3090);
						match(COMMA);
						}
					}

					setState(3093);
					match(SID);
					setState(3094);
					match(EQUAL);
					setState(3095);
					((Create_login_sql_serverContext)_localctx).sid = match(BINARY);
					}
					break;
				}
				setState(3104);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
				case 1:
					{
					setState(3099);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3098);
						match(COMMA);
						}
					}

					setState(3101);
					match(DEFAULT_DATABASE);
					setState(3102);
					match(EQUAL);
					setState(3103);
					((Create_login_sql_serverContext)_localctx).default_database = id();
					}
					break;
				}
				setState(3112);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,317,_ctx) ) {
				case 1:
					{
					setState(3107);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3106);
						match(COMMA);
						}
					}

					setState(3109);
					match(DEFAULT_LANGUAGE);
					setState(3110);
					match(EQUAL);
					setState(3111);
					((Create_login_sql_serverContext)_localctx).default_laguage = id();
					}
					break;
				}
				setState(3120);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
				case 1:
					{
					setState(3115);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3114);
						match(COMMA);
						}
					}

					setState(3117);
					match(CHECK_EXPIRATION);
					setState(3118);
					match(EQUAL);
					setState(3119);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3128);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,321,_ctx) ) {
				case 1:
					{
					setState(3123);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3122);
						match(COMMA);
						}
					}

					setState(3125);
					match(CHECK_POLICY);
					setState(3126);
					match(EQUAL);
					setState(3127);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3136);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CREDENTIAL || _la==COMMA) {
					{
					setState(3131);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3130);
						match(COMMA);
						}
					}

					setState(3133);
					match(CREDENTIAL);
					setState(3134);
					match(EQUAL);
					setState(3135);
					((Create_login_sql_serverContext)_localctx).credential_name = id();
					}
				}

				}
				break;
			case FROM:
				{
				{
				setState(3138);
				match(FROM);
				setState(3162);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(3139);
					match(WINDOWS);
					{
					setState(3140);
					match(WITH);
					setState(3147);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
					case 1:
						{
						setState(3142);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3141);
							match(COMMA);
							}
						}

						setState(3144);
						match(DEFAULT_DATABASE);
						setState(3145);
						match(EQUAL);
						setState(3146);
						((Create_login_sql_serverContext)_localctx).default_database = id();
						}
						break;
					}
					setState(3155);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DEFAULT_LANGUAGE || _la==COMMA) {
						{
						setState(3150);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3149);
							match(COMMA);
							}
						}

						setState(3152);
						match(DEFAULT_LANGUAGE);
						setState(3153);
						match(EQUAL);
						setState(3154);
						((Create_login_sql_serverContext)_localctx).default_language = match(STRING);
						}
					}

					}
					}
					break;
				case CERTIFICATE:
					{
					setState(3157);
					match(CERTIFICATE);
					setState(3158);
					((Create_login_sql_serverContext)_localctx).certname = id();
					}
					break;
				case ASYMMETRIC:
					{
					setState(3159);
					match(ASYMMETRIC);
					setState(3160);
					match(KEY);
					setState(3161);
					((Create_login_sql_serverContext)_localctx).asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_login_pdwContext extends ParserRuleContext {
		public IdContext loginName;
		public Token password;
		public Token sid;
		public TerminalNode LOGIN() { return getToken(TSQLParser.LOGIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode WINDOWS() { return getToken(TSQLParser.WINDOWS, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode MUST_CHANGE() { return getToken(TSQLParser.MUST_CHANGE, 0); }
		public TerminalNode SID() { return getToken(TSQLParser.SID, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSQLParser.CHECK_POLICY, 0); }
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public Create_login_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_login_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_login_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_login_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_login_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_login_pdwContext create_login_pdw() throws RecognitionException {
		Create_login_pdwContext _localctx = new Create_login_pdwContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_create_login_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3166);
			match(LOGIN);
			setState(3167);
			((Create_login_pdwContext)_localctx).loginName = id();
			setState(3189);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				setState(3168);
				match(FROM);
				setState(3169);
				match(WINDOWS);
				}
				break;
			case WITH:
				{
				setState(3170);
				match(WITH);
				{
				setState(3171);
				match(PASSWORD);
				setState(3172);
				match(EQUAL);
				setState(3173);
				((Create_login_pdwContext)_localctx).password = match(STRING);
				setState(3175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MUST_CHANGE) {
					{
					setState(3174);
					match(MUST_CHANGE);
					}
				}

				setState(3180);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SID) {
					{
					setState(3177);
					match(SID);
					setState(3178);
					match(EQUAL);
					setState(3179);
					((Create_login_pdwContext)_localctx).sid = match(BINARY);
					}
				}

				setState(3187);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHECK_POLICY) {
					{
					setState(3182);
					match(CHECK_POLICY);
					setState(3183);
					match(EQUAL);
					setState(3185);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OFF || _la==ON) {
						{
						setState(3184);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public Token encryption_password;
		public List<TerminalNode> MASTER() { return getTokens(TSQLParser.MASTER); }
		public TerminalNode MASTER(int i) {
			return getToken(TSQLParser.MASTER, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSQLParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(TSQLParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public TerminalNode SERVICE() { return getToken(TSQLParser.SERVICE, 0); }
		public TerminalNode FORCE() { return getToken(TSQLParser.FORCE, 0); }
		public Alter_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_master_key_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_master_key_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_master_key_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_master_key_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_master_key_sql_serverContext alter_master_key_sql_server() throws RecognitionException {
		Alter_master_key_sql_serverContext _localctx = new Alter_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_alter_master_key_sql_server);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3191);
			match(MASTER);
			setState(3192);
			match(KEY);
			setState(3214);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE:
			case REGENERATE:
				{
				setState(3194);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(3193);
					match(FORCE);
					}
				}

				setState(3196);
				match(REGENERATE);
				setState(3197);
				match(WITH);
				setState(3198);
				match(ENCRYPTION);
				setState(3199);
				match(BY);
				setState(3200);
				match(PASSWORD);
				setState(3201);
				match(EQUAL);
				setState(3202);
				((Alter_master_key_sql_serverContext)_localctx).password = match(STRING);
				}
				break;
			case ADD:
			case DROP:
				{
				setState(3203);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3204);
				match(ENCRYPTION);
				setState(3205);
				match(BY);
				setState(3212);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERVICE:
					{
					setState(3206);
					match(SERVICE);
					setState(3207);
					match(MASTER);
					setState(3208);
					match(KEY);
					}
					break;
				case PASSWORD:
					{
					setState(3209);
					match(PASSWORD);
					setState(3210);
					match(EQUAL);
					setState(3211);
					((Alter_master_key_sql_serverContext)_localctx).encryption_password = match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_master_key_sql_serverContext extends ParserRuleContext {
		public Token password;
		public TerminalNode MASTER() { return getToken(TSQLParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Create_master_key_sql_serverContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_master_key_sql_server; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_master_key_sql_server(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_master_key_sql_server(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_master_key_sql_server(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_master_key_sql_serverContext create_master_key_sql_server() throws RecognitionException {
		Create_master_key_sql_serverContext _localctx = new Create_master_key_sql_serverContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_create_master_key_sql_server);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3216);
			match(MASTER);
			setState(3217);
			match(KEY);
			setState(3218);
			match(ENCRYPTION);
			setState(3219);
			match(BY);
			setState(3220);
			match(PASSWORD);
			setState(3221);
			match(EQUAL);
			setState(3222);
			((Create_master_key_sql_serverContext)_localctx).password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_message_typeContext extends ParserRuleContext {
		public IdContext message_type_name;
		public IdContext schema_collection_name;
		public TerminalNode MESSAGE() { return getToken(TSQLParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public TerminalNode VALIDATION() { return getToken(TSQLParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(TSQLParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSQLParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(TSQLParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(TSQLParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSQLParser.COLLECTION, 0); }
		public Alter_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_message_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_message_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_message_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_message_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_message_typeContext alter_message_type() throws RecognitionException {
		Alter_message_typeContext _localctx = new Alter_message_typeContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_alter_message_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3224);
			match(MESSAGE);
			setState(3225);
			match(TYPE);
			setState(3226);
			((Alter_message_typeContext)_localctx).message_type_name = id();
			setState(3227);
			match(VALIDATION);
			setState(3228);
			match(EQUAL);
			setState(3237);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(3229);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(3230);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(3231);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(3232);
				match(VALID_XML);
				setState(3233);
				match(WITH);
				setState(3234);
				match(SCHEMA);
				setState(3235);
				match(COLLECTION);
				setState(3236);
				((Alter_message_typeContext)_localctx).schema_collection_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_partition_functionContext extends ParserRuleContext {
		public IdContext partition_function_name;
		public TerminalNode PARTITION() { return getToken(TSQLParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(TSQLParser.FUNCTION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public TerminalNode RANGE() { return getToken(TSQLParser.RANGE, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(TSQLParser.VALUES, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode LEFT() { return getToken(TSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(TSQLParser.RIGHT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_partition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_partition_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_partition_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_partition_functionContext create_partition_function() throws RecognitionException {
		Create_partition_functionContext _localctx = new Create_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_create_partition_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3239);
			match(PARTITION);
			setState(3240);
			match(FUNCTION);
			setState(3241);
			((Create_partition_functionContext)_localctx).partition_function_name = id();
			setState(3242);
			match(LR_BRACKET);
			setState(3243);
			data_type();
			setState(3244);
			match(RR_BRACKET);
			setState(3245);
			match(AS);
			setState(3246);
			match(RANGE);
			setState(3248);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT || _la==RIGHT) {
				{
				setState(3247);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3250);
			match(FOR);
			setState(3251);
			match(VALUES);
			setState(3252);
			match(LR_BRACKET);
			setState(3261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << COALESCE) | (1L << CONVERT) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (FILLFACTOR - 65)) | (1L << (IDENTITY - 65)) | (1L << (LEFT - 65)) | (1L << (NULL - 65)) | (1L << (NULLIF - 65)) | (1L << (OVER - 65)) | (1L << (PRECISION - 65)))) != 0) || ((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (RIGHT - 138)) | (1L << (SESSION_USER - 138)) | (1L << (SYSTEM_USER - 138)) | (1L << (USER - 138)) | (1L << (FUNC_IDENTITY - 138)) | (1L << (FUNC_CURSOR_ROWS - 138)) | (1L << (FUNC_DATEFIRST - 138)) | (1L << (FUNC_ERROR - 138)) | (1L << (FUNC_FETCH_STATUS - 138)) | (1L << (FUNC_PACK_RECEIVED - 138)) | (1L << (FUNC_PROCID - 138)) | (1L << (FUNC_ROWCOUNT - 138)) | (1L << (FUNC_TRANCOUNT - 138)) | (1L << (ABSENT - 138)) | (1L << (ABSOLUTE - 138)) | (1L << (ACCENT_SENSITIVITY - 138)) | (1L << (ACTION - 138)) | (1L << (ACTIVATION - 138)) | (1L << (ACTIVE - 138)) | (1L << (ADDRESS - 138)) | (1L << (AES_128 - 138)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (AES_192 - 202)) | (1L << (AES_256 - 202)) | (1L << (AES - 202)) | (1L << (AFFINITY - 202)) | (1L << (AFTER - 202)) | (1L << (AGGREGATE - 202)) | (1L << (ALGORITHM - 202)) | (1L << (ALLOW_CONNECTIONS - 202)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 202)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 202)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 202)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 202)) | (1L << (ALLOWED - 202)) | (1L << (ANONYMOUS - 202)) | (1L << (ANSI_NULL_DEFAULT - 202)) | (1L << (ANSI_NULLS - 202)) | (1L << (ANSI_PADDING - 202)) | (1L << (ANSI_WARNINGS - 202)) | (1L << (APPEND - 202)) | (1L << (APPLICATION_LOG - 202)) | (1L << (APPLICATION - 202)) | (1L << (APPLY - 202)) | (1L << (ARITHABORT - 202)) | (1L << (ASSEMBLY - 202)) | (1L << (ASYMMETRIC - 202)) | (1L << (ASYNCHRONOUS_COMMIT - 202)) | (1L << (AUDIT_GUID - 202)) | (1L << (AUDIT - 202)) | (1L << (AUTHENTICATION - 202)) | (1L << (AUTO_CLEANUP - 202)) | (1L << (AUTO_CLOSE - 202)) | (1L << (AUTO_CREATE_STATISTICS - 202)) | (1L << (AUTO_SHRINK - 202)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 202)) | (1L << (AUTO_UPDATE_STATISTICS - 202)) | (1L << (AUTO - 202)) | (1L << (AUTOGROW_ALL_FILES - 202)) | (1L << (AUTOGROW_SINGLE_FILE - 202)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 202)) | (1L << (AUTOMATIC - 202)) | (1L << (AVAILABILITY_MODE - 202)) | (1L << (AVAILABILITY - 202)) | (1L << (BACKUP_PRIORITY - 202)) | (1L << (BEFORE - 202)) | (1L << (BEGIN_DIALOG - 202)) | (1L << (BINARY_BASE64 - 202)) | (1L << (BINDING - 202)) | (1L << (BLOB_STORAGE - 202)) | (1L << (BLOCK - 202)) | (1L << (BLOCKING_HIERARCHY - 202)) | (1L << (BLOCKSIZE - 202)) | (1L << (BROKER_INSTANCE - 202)) | (1L << (BROKER - 202)) | (1L << (BUFFER - 202)) | (1L << (BUFFERCOUNT - 202)) | (1L << (BULK_LOGGED - 202)) | (1L << (CACHE - 202)) | (1L << (CALLED - 202)) | (1L << (CALLER - 202)) | (1L << (CAP_CPU_PERCENT - 202)) | (1L << (CAST - 202)) | (1L << (CATALOG - 202)) | (1L << (CATCH - 202)) | (1L << (CERTIFICATE - 202)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (CHANGE_RETENTION - 266)) | (1L << (CHANGE_TRACKING - 266)) | (1L << (CHANGES - 266)) | (1L << (CHANGETABLE - 266)) | (1L << (CHAR - 266)) | (1L << (CHARACTER - 266)) | (1L << (CHECK_EXPIRATION - 266)) | (1L << (CHECK_POLICY - 266)) | (1L << (CHECKSUM - 266)) | (1L << (CLASSIFIER_FUNCTION - 266)) | (1L << (CLEANUP - 266)) | (1L << (CLUSTER - 266)) | (1L << (COLLECTION - 266)) | (1L << (COLUMN_MASTER_KEY - 266)) | (1L << (COMMITTED - 266)) | (1L << (COMPATIBILITY_LEVEL - 266)) | (1L << (COMPRESSION - 266)) | (1L << (CONCAT_NULL_YIELDS_NULL - 266)) | (1L << (CONCAT - 266)) | (1L << (CONFIGURATION - 266)) | (1L << (CONNECT - 266)) | (1L << (CONTAINMENT - 266)) | (1L << (CONTENT - 266)) | (1L << (CONTEXT - 266)) | (1L << (CONTINUE_AFTER_ERROR - 266)) | (1L << (CONTRACT_NAME - 266)) | (1L << (CONTRACT - 266)) | (1L << (CONTROL - 266)) | (1L << (CONVERSATION - 266)) | (1L << (COOKIE - 266)) | (1L << (COPY_ONLY - 266)) | (1L << (COUNTER - 266)) | (1L << (CPU - 266)) | (1L << (CREATE_NEW - 266)) | (1L << (CREATION_DISPOSITION - 266)) | (1L << (CREDENTIAL - 266)) | (1L << (CRYPTOGRAPHIC - 266)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 266)) | (1L << (CURSOR_DEFAULT - 266)) | (1L << (CYCLE - 266)) | (1L << (DATA_COMPRESSION - 266)) | (1L << (DATA_SOURCE - 266)) | (1L << (DATA - 266)) | (1L << (DATABASE_MIRRORING - 266)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 266)) | (1L << (DAYS - 266)) | (1L << (DB_CHAINING - 266)) | (1L << (DB_FAILOVER - 266)) | (1L << (DECRYPTION - 266)) | (1L << (DEFAULT_DATABASE - 266)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 266)) | (1L << (DEFAULT_LANGUAGE - 266)) | (1L << (DEFAULT_SCHEMA - 266)) | (1L << (DELAY - 266)) | (1L << (DELAYED_DURABILITY - 266)) | (1L << (DEPENDENTS - 266)) | (1L << (DES - 266)) | (1L << (DESCRIPTION - 266)) | (1L << (DESX - 266)) | (1L << (DHCP - 266)) | (1L << (DIAGNOSTICS - 266)) | (1L << (DIALOG - 266)) | (1L << (DIFFERENTIAL - 266)) | (1L << (DIRECTORY_NAME - 266)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (DISABLE_BROKER - 330)) | (1L << (DISABLE - 330)) | (1L << (DISABLED - 330)) | (1L << (DOCUMENT - 330)) | (1L << (DTC_SUPPORT - 330)) | (1L << (DYNAMIC - 330)) | (1L << (ELEMENTS - 330)) | (1L << (EMERGENCY - 330)) | (1L << (EMPTY - 330)) | (1L << (ENABLE_BROKER - 330)) | (1L << (ENABLE - 330)) | (1L << (ENABLED - 330)) | (1L << (ENCRYPTED_VALUE - 330)) | (1L << (ENCRYPTION - 330)) | (1L << (ENDPOINT_URL - 330)) | (1L << (ENDPOINT - 330)) | (1L << (ERROR_BROKER_CONVERSATIONS - 330)) | (1L << (ERROR - 330)) | (1L << (EVENT_RETENTION_MODE - 330)) | (1L << (EVENT - 330)) | (1L << (EXCLUSIVE - 330)) | (1L << (EXECUTABLE_FILE - 330)) | (1L << (EXECUTABLE - 330)) | (1L << (EXPAND - 330)) | (1L << (EXPIREDATE - 330)) | (1L << (EXPIRY_DATE - 330)) | (1L << (EXPLICIT - 330)) | (1L << (EXTENSION - 330)) | (1L << (EXTERNAL_ACCESS - 330)) | (1L << (FAIL_OPERATION - 330)) | (1L << (FAILOVER_MODE - 330)) | (1L << (FAILOVER - 330)) | (1L << (FAILURE_CONDITION_LEVEL - 330)) | (1L << (FAILURECONDITIONLEVEL - 330)) | (1L << (FALSE - 330)) | (1L << (FAN_IN - 330)) | (1L << (FAST_FORWARD - 330)) | (1L << (FAST - 330)) | (1L << (FILE_SNAPSHOT - 330)) | (1L << (FILEGROUP - 330)) | (1L << (FILEGROWTH - 330)) | (1L << (FILENAME - 330)) | (1L << (FILEPATH - 330)) | (1L << (FILESTREAM_ON - 330)) | (1L << (FILESTREAM - 330)) | (1L << (FILTER - 330)) | (1L << (FIRST - 330)) | (1L << (FOLLOWING - 330)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 330)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 330)) | (1L << (FORCE - 330)) | (1L << (FORCED - 330)) | (1L << (FORCESEEK - 330)) | (1L << (FORMAT - 330)) | (1L << (FORWARD_ONLY - 330)) | (1L << (FULLSCAN - 330)) | (1L << (FULLTEXT - 330)) | (1L << (GB - 330)) | (1L << (GET - 330)) | (1L << (GLOBAL - 330)) | (1L << (GOVERNOR - 330)) | (1L << (GROUP_MAX_REQUESTS - 330)) | (1L << (HADR - 330)) | (1L << (HASH - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (HASHED - 394)) | (1L << (HEALTH_CHECK_TIMEOUT - 394)) | (1L << (HEALTHCHECKTIMEOUT - 394)) | (1L << (HIGH - 394)) | (1L << (HONOR_BROKER_PRIORITY - 394)) | (1L << (HOURS - 394)) | (1L << (IDENTITY_VALUE - 394)) | (1L << (IIF - 394)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 394)) | (1L << (IMMEDIATE - 394)) | (1L << (IMPERSONATE - 394)) | (1L << (IMPORTANCE - 394)) | (1L << (INCLUDE_NULL_VALUES - 394)) | (1L << (INCLUDE - 394)) | (1L << (INCREMENT - 394)) | (1L << (INCREMENTAL - 394)) | (1L << (INFINITE - 394)) | (1L << (INIT - 394)) | (1L << (INITIATOR - 394)) | (1L << (INPUT - 394)) | (1L << (INSENSITIVE - 394)) | (1L << (INSTEAD - 394)) | (1L << (IO - 394)) | (1L << (IP - 394)) | (1L << (ISOLATION - 394)) | (1L << (JSON - 394)) | (1L << (KB - 394)) | (1L << (KEEP - 394)) | (1L << (KEEPFIXED - 394)) | (1L << (KERBEROS - 394)) | (1L << (KEY_PATH - 394)) | (1L << (KEY_SOURCE - 394)) | (1L << (KEY_STORE_PROVIDER_NAME - 394)) | (1L << (KEYS - 394)) | (1L << (KEYSET - 394)) | (1L << (LANGUAGE - 394)) | (1L << (LAST - 394)) | (1L << (LEVEL - 394)) | (1L << (LIBRARY - 394)) | (1L << (LIFETIME - 394)) | (1L << (LINUX - 394)) | (1L << (LIST - 394)) | (1L << (LISTENER_IP - 394)) | (1L << (LISTENER_PORT - 394)) | (1L << (LISTENER_URL - 394)) | (1L << (LISTENER - 394)) | (1L << (LOB_COMPACTION - 394)) | (1L << (LOCAL_SERVICE_NAME - 394)) | (1L << (LOCAL - 394)) | (1L << (LOCATION - 394)) | (1L << (LOCK_ESCALATION - 394)) | (1L << (LOCK - 394)) | (1L << (LOG - 394)) | (1L << (LOGIN - 394)) | (1L << (LOOP - 394)) | (1L << (LOW - 394)) | (1L << (MANUAL - 394)) | (1L << (MARK - 394)) | (1L << (MASTER - 394)) | (1L << (MATCHED - 394)) | (1L << (MATERIALIZED - 394)) | (1L << (MAX_CPU_PERCENT - 394)) | (1L << (MAX_DISPATCH_LATENCY - 394)) | (1L << (MAX_DOP - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (MAX_EVENT_SIZE - 458)) | (1L << (MAX_FILES - 458)) | (1L << (MAX_IOPS_PER_VOLUME - 458)) | (1L << (MAX_MEMORY_PERCENT - 458)) | (1L << (MAX_MEMORY - 458)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 458)) | (1L << (MAX_PROCESSES - 458)) | (1L << (MAX_QUEUE_READERS - 458)) | (1L << (MAX_ROLLOVER_FILES - 458)) | (1L << (MAX_SIZE - 458)) | (1L << (MAX - 458)) | (1L << (MAXDOP - 458)) | (1L << (MAXRECURSION - 458)) | (1L << (MAXSIZE - 458)) | (1L << (MAXTRANSFER - 458)) | (1L << (MAXVALUE - 458)) | (1L << (MB - 458)) | (1L << (MEDIADESCRIPTION - 458)) | (1L << (MEDIANAME - 458)) | (1L << (MEDIUM - 458)) | (1L << (MEMBER - 458)) | (1L << (MEMORY_OPTIMIZED_DATA - 458)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 458)) | (1L << (MEMORY_OPTIMIZED - 458)) | (1L << (MEMORY_PARTITION_MODE - 458)) | (1L << (MESSAGE_FORWARD_SIZE - 458)) | (1L << (MESSAGE_FORWARDING - 458)) | (1L << (MESSAGE - 458)) | (1L << (MIN_ACTIVE_ROWVERSION - 458)) | (1L << (MIN_CPU_PERCENT - 458)) | (1L << (MIN_IOPS_PER_VOLUME - 458)) | (1L << (MIN_MEMORY_PERCENT - 458)) | (1L << (MINUTES - 458)) | (1L << (MINVALUE - 458)) | (1L << (MIRROR_ADDRESS - 458)) | (1L << (MIRROR - 458)) | (1L << (MIXED_PAGE_ALLOCATION - 458)) | (1L << (MODE - 458)) | (1L << (MODIFY - 458)) | (1L << (MOVE - 458)) | (1L << (MULTI_USER - 458)) | (1L << (MUST_CHANGE - 458)) | (1L << (NAME - 458)) | (1L << (NCHAR - 458)) | (1L << (NEGOTIATE - 458)) | (1L << (NESTED_TRIGGERS - 458)) | (1L << (NEW_ACCOUNT - 458)) | (1L << (NEW_BROKER - 458)) | (1L << (NEW_PASSWORD - 458)) | (1L << (NEWNAME - 458)) | (1L << (NEXT - 458)) | (1L << (NO_CHECKSUM - 458)) | (1L << (NO_COMPRESSION - 458)) | (1L << (NO_EVENT_LOSS - 458)) | (1L << (NO_TRUNCATE - 458)) | (1L << (NO_WAIT - 458)) | (1L << (NO - 458)) | (1L << (NODES - 458)) | (1L << (NOEXPAND - 458)) | (1L << (NOFORMAT - 458)) | (1L << (NOINIT - 458)) | (1L << (NON_TRANSACTED_ACCESS - 458)) | (1L << (NONE - 458)) | (1L << (NORECOMPUTE - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (NORECOVERY - 522)) | (1L << (NOREWIND - 522)) | (1L << (NOSKIP - 522)) | (1L << (NOTIFICATION - 522)) | (1L << (NOUNLOAD - 522)) | (1L << (NOWAIT - 522)) | (1L << (NTLM - 522)) | (1L << (NUMANODE - 522)) | (1L << (NUMERIC_ROUNDABORT - 522)) | (1L << (OBJECT - 522)) | (1L << (OFFLINE - 522)) | (1L << (OFFSET - 522)) | (1L << (OLD_ACCOUNT - 522)) | (1L << (OLD_PASSWORD - 522)) | (1L << (ON_FAILURE - 522)) | (1L << (ONLINE - 522)) | (1L << (ONLY - 522)) | (1L << (OPEN_EXISTING - 522)) | (1L << (OPENJSON - 522)) | (1L << (OPTIMISTIC - 522)) | (1L << (OPTIMIZE - 522)) | (1L << (OUT - 522)) | (1L << (OUTPUT - 522)) | (1L << (OWNER - 522)) | (1L << (PAGE_VERIFY - 522)) | (1L << (PARAMETERIZATION - 522)) | (1L << (PARSE - 522)) | (1L << (PARTIAL - 522)) | (1L << (PARTITION - 522)) | (1L << (PARTITIONS - 522)) | (1L << (PARTNER - 522)) | (1L << (PASSWORD - 522)) | (1L << (PATH - 522)) | (1L << (PAUSE - 522)) | (1L << (PER_CPU - 522)) | (1L << (PER_DB - 522)) | (1L << (PER_NODE - 522)) | (1L << (PERMISSION_SET - 522)) | (1L << (PERSIST_SAMPLE_PERSENT - 522)) | (1L << (PERSISTED - 522)) | (1L << (PERSISTENT_LOG_BUFFER - 522)) | (1L << (PLATFORM - 522)) | (1L << (POISON_MESSAGE_HANDLING - 522)) | (1L << (POLICY - 522)) | (1L << (POOL - 522)) | (1L << (POPULATION - 522)) | (1L << (PORT - 522)) | (1L << (PRECEDING - 522)) | (1L << (PREDICATE - 522)) | (1L << (PRIMARY_ROLE - 522)) | (1L << (PRIOR - 522)) | (1L << (PRIORITY_LEVEL - 522)) | (1L << (PRIORITY - 522)) | (1L << (PRIVATE_KEY - 522)) | (1L << (PRIVATE - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (PROCEDURE_NAME - 522)) | (1L << (PROCESS - 522)) | (1L << (PROFILE - 522)) | (1L << (PROPERTY_DESCRIPTION - 522)) | (1L << (PROPERTY_INT_ID - 522)) | (1L << (PROPERTY_SET_GUID - 522)) | (1L << (PROPERTY - 522)) | (1L << (PROVIDER_KEY_NAME - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (PROVIDER - 586)) | (1L << (QUERYTRACEON - 586)) | (1L << (QUEUE_DELAY - 586)) | (1L << (QUEUE - 586)) | (1L << (QUOTED_IDENTIFIER - 586)) | (1L << (R_LETTER - 586)) | (1L << (RANGE - 586)) | (1L << (RAW - 586)) | (1L << (RC2 - 586)) | (1L << (RC4_128 - 586)) | (1L << (RC4 - 586)) | (1L << (READ_COMMITTED_SNAPSHOT - 586)) | (1L << (READ_ONLY_ROUTING_LIST - 586)) | (1L << (READ_ONLY - 586)) | (1L << (READ_WRITE_FILEGROUPS - 586)) | (1L << (READ_WRITE - 586)) | (1L << (READWRITE - 586)) | (1L << (READONLY - 586)) | (1L << (REBUILD - 586)) | (1L << (RECEIVE - 586)) | (1L << (RECOMPILE - 586)) | (1L << (RECOVERY - 586)) | (1L << (RECURSIVE_TRIGGERS - 586)) | (1L << (REGENERATE - 586)) | (1L << (RELATED_CONVERSATION_GROUP - 586)) | (1L << (RELATED_CONVERSATION - 586)) | (1L << (RELATIVE - 586)) | (1L << (REMOTE_SERVICE_NAME - 586)) | (1L << (REMOTE - 586)) | (1L << (REMOVE - 586)) | (1L << (REORGANIZE - 586)) | (1L << (REPEATABLE - 586)) | (1L << (REPLICA - 586)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 586)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 586)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 586)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 586)) | (1L << (REQUIRED - 586)) | (1L << (RESAMPLE - 586)) | (1L << (RESERVE_DISK_SPACE - 586)) | (1L << (RESET - 586)) | (1L << (RESOURCE_MANAGER_LOCATION - 586)) | (1L << (RESOURCE - 586)) | (1L << (RESTART - 586)) | (1L << (RESTRICTED_USER - 586)) | (1L << (RESULT - 586)) | (1L << (RESUME - 586)) | (1L << (RETAINDAYS - 586)) | (1L << (RETENTION - 586)) | (1L << (RETURNS - 586)) | (1L << (REWIND - 586)) | (1L << (ROBUST - 586)) | (1L << (ROLE - 586)) | (1L << (ROOT - 586)) | (1L << (ROUTE - 586)) | (1L << (ROW - 586)) | (1L << (ROWGUID - 586)) | (1L << (ROWS - 586)) | (1L << (RSA_1024 - 586)) | (1L << (RSA_2048 - 586)) | (1L << (RSA_3072 - 586)) | (1L << (RSA_4096 - 586)) | (1L << (RSA_512 - 586)) | (1L << (SAFE - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (SAFETY - 650)) | (1L << (SAMPLE - 650)) | (1L << (SCHEDULER - 650)) | (1L << (SCHEMABINDING - 650)) | (1L << (SCHEME - 650)) | (1L << (SCOPED - 650)) | (1L << (SCROLL_LOCKS - 650)) | (1L << (SCROLL - 650)) | (1L << (SEARCH - 650)) | (1L << (SECONDARY_ONLY - 650)) | (1L << (SECONDARY_ROLE - 650)) | (1L << (SECONDARY - 650)) | (1L << (SECONDS - 650)) | (1L << (SECRET - 650)) | (1L << (SECURITY_LOG - 650)) | (1L << (SECURITY - 650)) | (1L << (SEEDING_MODE - 650)) | (1L << (SELECTIVE - 650)) | (1L << (SELF - 650)) | (1L << (SEMI_SENSITIVE - 650)) | (1L << (SEND - 650)) | (1L << (SENT - 650)) | (1L << (SEQUENCE - 650)) | (1L << (SERIALIZABLE - 650)) | (1L << (SERVER - 650)) | (1L << (SERVICE_BROKER - 650)) | (1L << (SERVICE_NAME - 650)) | (1L << (SERVICE - 650)) | (1L << (SESSION_TIMEOUT - 650)) | (1L << (SESSION - 650)) | (1L << (SETERROR - 650)) | (1L << (SETS - 650)) | (1L << (SHARE - 650)) | (1L << (SHOWPLAN - 650)) | (1L << (SID - 650)) | (1L << (SIGNATURE - 650)) | (1L << (SIMPLE - 650)) | (1L << (SINGLE_USER - 650)) | (1L << (SINGLETON - 650)) | (1L << (SIZE - 650)) | (1L << (SKIP_KEYWORD - 650)) | (1L << (SNAPSHOT - 650)) | (1L << (SOFTNUMA - 650)) | (1L << (SOURCE - 650)) | (1L << (SPARSE - 650)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 650)) | (1L << (SPECIFICATION - 650)) | (1L << (SPLIT - 650)) | (1L << (SQL - 650)) | (1L << (SQLDUMPERFLAGS - 650)) | (1L << (SQLDUMPERPATH - 650)) | (1L << (SQLDUMPERTIMEOUT - 650)) | (1L << (STANDBY - 650)) | (1L << (START_DATE - 650)) | (1L << (START - 650)) | (1L << (STARTED - 650)) | (1L << (STARTUP_STATE - 650)) | (1L << (STATE - 650)) | (1L << (STATIC - 650)) | (1L << (STATISTICAL_SEMANTICS - 650)) | (1L << (STATS - 650)) | (1L << (STATUS - 650)) | (1L << (STOP_ON_ERROR - 650)) | (1L << (STOP - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (STOPLIST - 714)) | (1L << (STOPPED - 714)) | (1L << (STRING_AGG - 714)) | (1L << (SUBJECT - 714)) | (1L << (SUPPORTED - 714)) | (1L << (SUSPEND - 714)) | (1L << (SYMMETRIC - 714)) | (1L << (SYNCHRONOUS_COMMIT - 714)) | (1L << (SYNONYM - 714)) | (1L << (SYSTEM - 714)) | (1L << (TAKE - 714)) | (1L << (TAPE - 714)) | (1L << (TARGET_RECOVERY_TIME - 714)) | (1L << (TARGET - 714)) | (1L << (TB - 714)) | (1L << (TCP - 714)) | (1L << (TEXTIMAGE_ON - 714)) | (1L << (THROW - 714)) | (1L << (TIES - 714)) | (1L << (TIME - 714)) | (1L << (TIMEOUT - 714)) | (1L << (TIMER - 714)) | (1L << (TORN_PAGE_DETECTION - 714)) | (1L << (TRACK_CAUSALITY - 714)) | (1L << (TRACK_COLUMNS_UPDATED - 714)) | (1L << (TRANSFER - 714)) | (1L << (TRANSFORM_NOISE_WORDS - 714)) | (1L << (TRIM - 714)) | (1L << (TRIPLE_DES_3KEY - 714)) | (1L << (TRIPLE_DES - 714)) | (1L << (TRUE - 714)) | (1L << (TRUSTWORTHY - 714)) | (1L << (TRY - 714)) | (1L << (TSQL - 714)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 714)) | (1L << (TYPE_WARNING - 714)) | (1L << (TYPE - 714)) | (1L << (UNBOUNDED - 714)) | (1L << (UNCHECKED - 714)) | (1L << (UNCOMMITTED - 714)) | (1L << (UNDEFINED - 714)) | (1L << (UNKNOWN - 714)) | (1L << (UNLIMITED - 714)) | (1L << (UNLOCK - 714)) | (1L << (UNSAFE - 714)) | (1L << (URL - 714)) | (1L << (USED - 714)) | (1L << (USING - 714)) | (1L << (VALID_XML - 714)) | (1L << (VALIDATION - 714)) | (1L << (VALUE - 714)) | (1L << (VERBOSELOGGING - 714)) | (1L << (VERSION - 714)) | (1L << (VIEW_METADATA - 714)) | (1L << (VIEWS - 714)) | (1L << (VISIBILITY - 714)) | (1L << (WAIT - 714)) | (1L << (WELL_FORMED_XML - 714)) | (1L << (WINDOWS - 714)) | (1L << (WITHOUT_ARRAY_WRAPPER - 714)) | (1L << (WITHOUT - 714)) | (1L << (WITNESS - 714)) | (1L << (WORK - 714)) | (1L << (WORKLOAD - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (XML - 778)) | (1L << (XMLDATA - 778)) | (1L << (XMLNAMESPACES - 778)) | (1L << (XMLSCHEMA - 778)) | (1L << (XQUERY - 778)) | (1L << (XSINIL - 778)) | (1L << (LEFT_FIGURE_PAREN - 778)) | (1L << (DOUBLE_QUOTE_ID - 778)) | (1L << (SQUARE_BRACKET_ID - 778)) | (1L << (LOCAL_ID - 778)) | (1L << (DECIMAL - 778)) | (1L << (ID - 778)) | (1L << (STRING - 778)) | (1L << (BINARY - 778)) | (1L << (FLOAT - 778)) | (1L << (REAL - 778)) | (1L << (IPV4_ADDR - 778)) | (1L << (DOLLAR - 778)) | (1L << (LR_BRACKET - 778)) | (1L << (PLUS - 778)) | (1L << (MINUS - 778)) | (1L << (BIT_NOT - 778)))) != 0)) {
				{
				setState(3253);
				expression(0);
				setState(3258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3254);
					match(COMMA);
					setState(3255);
					expression(0);
					}
					}
					setState(3260);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(3263);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_functionContext extends ParserRuleContext {
		public IdContext partition_function_name;
		public TerminalNode PARTITION() { return getToken(TSQLParser.PARTITION, 0); }
		public TerminalNode FUNCTION() { return getToken(TSQLParser.FUNCTION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode RANGE() { return getToken(TSQLParser.RANGE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SPLIT() { return getToken(TSQLParser.SPLIT, 0); }
		public TerminalNode MERGE() { return getToken(TSQLParser.MERGE, 0); }
		public Alter_partition_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_partition_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_partition_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_partition_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_partition_functionContext alter_partition_function() throws RecognitionException {
		Alter_partition_functionContext _localctx = new Alter_partition_functionContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_alter_partition_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3265);
			match(PARTITION);
			setState(3266);
			match(FUNCTION);
			setState(3267);
			((Alter_partition_functionContext)_localctx).partition_function_name = id();
			setState(3268);
			match(LR_BRACKET);
			setState(3269);
			match(RR_BRACKET);
			setState(3270);
			_la = _input.LA(1);
			if ( !(_la==MERGE || _la==SPLIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3271);
			match(RANGE);
			setState(3272);
			match(LR_BRACKET);
			setState(3273);
			match(DECIMAL);
			setState(3274);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_partition_schemeContext extends ParserRuleContext {
		public IdContext partition_scheme_name;
		public IdContext partition_function_name;
		public List<TerminalNode> PARTITION() { return getTokens(TSQLParser.PARTITION); }
		public TerminalNode PARTITION(int i) {
			return getToken(TSQLParser.PARTITION, i);
		}
		public TerminalNode SCHEME() { return getToken(TSQLParser.SCHEME, 0); }
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Id_or_primaryContext> id_or_primary() {
			return getRuleContexts(Id_or_primaryContext.class);
		}
		public Id_or_primaryContext id_or_primary(int i) {
			return getRuleContext(Id_or_primaryContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_partition_scheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_partition_scheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_partition_scheme(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_partition_scheme(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_partition_schemeContext create_partition_scheme() throws RecognitionException {
		Create_partition_schemeContext _localctx = new Create_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_create_partition_scheme);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3276);
			match(PARTITION);
			setState(3277);
			match(SCHEME);
			setState(3278);
			((Create_partition_schemeContext)_localctx).partition_scheme_name = id();
			setState(3279);
			match(AS);
			setState(3280);
			match(PARTITION);
			setState(3281);
			((Create_partition_schemeContext)_localctx).partition_function_name = id();
			setState(3283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL) {
				{
				setState(3282);
				match(ALL);
				}
			}

			setState(3285);
			match(TO);
			setState(3286);
			match(LR_BRACKET);
			setState(3287);
			id_or_primary();
			setState(3292);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3288);
				match(COMMA);
				setState(3289);
				id_or_primary();
				}
				}
				setState(3294);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3295);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_partition_schemeContext extends ParserRuleContext {
		public IdContext partition_scheme_name;
		public IdContext file_group_name;
		public TerminalNode PARTITION() { return getToken(TSQLParser.PARTITION, 0); }
		public TerminalNode SCHEME() { return getToken(TSQLParser.SCHEME, 0); }
		public TerminalNode NEXT() { return getToken(TSQLParser.NEXT, 0); }
		public TerminalNode USED() { return getToken(TSQLParser.USED, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Alter_partition_schemeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_partition_scheme; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_partition_scheme(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_partition_scheme(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_partition_scheme(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_partition_schemeContext alter_partition_scheme() throws RecognitionException {
		Alter_partition_schemeContext _localctx = new Alter_partition_schemeContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_alter_partition_scheme);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3297);
			match(PARTITION);
			setState(3298);
			match(SCHEME);
			setState(3299);
			((Alter_partition_schemeContext)_localctx).partition_scheme_name = id();
			setState(3300);
			match(NEXT);
			setState(3301);
			match(USED);
			setState(3303);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
			case 1:
				{
				setState(3302);
				((Alter_partition_schemeContext)_localctx).file_group_name = id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public TerminalNode REMOTE() { return getToken(TSQLParser.REMOTE, 0); }
		public TerminalNode SERVICE() { return getToken(TSQLParser.SERVICE, 0); }
		public TerminalNode BINDING() { return getToken(TSQLParser.BINDING, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode USER() { return getToken(TSQLParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSQLParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public Alter_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_remote_service_binding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_remote_service_binding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_remote_service_bindingContext alter_remote_service_binding() throws RecognitionException {
		Alter_remote_service_bindingContext _localctx = new Alter_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_alter_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3305);
			match(REMOTE);
			setState(3306);
			match(SERVICE);
			setState(3307);
			match(BINDING);
			setState(3308);
			((Alter_remote_service_bindingContext)_localctx).binding_name = id();
			setState(3309);
			match(WITH);
			setState(3313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USER) {
				{
				setState(3310);
				match(USER);
				setState(3311);
				match(EQUAL);
				setState(3312);
				id();
				}
			}

			setState(3319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3315);
				match(COMMA);
				setState(3316);
				match(ANONYMOUS);
				setState(3317);
				match(EQUAL);
				setState(3318);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_remote_service_bindingContext extends ParserRuleContext {
		public IdContext binding_name;
		public Token remote_service_name;
		public TerminalNode REMOTE() { return getToken(TSQLParser.REMOTE, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(TSQLParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(TSQLParser.SERVICE, i);
		}
		public TerminalNode BINDING() { return getToken(TSQLParser.BINDING, 0); }
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode USER() { return getToken(TSQLParser.USER, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSQLParser.ANONYMOUS, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public Create_remote_service_bindingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_remote_service_binding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_remote_service_binding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_remote_service_binding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_remote_service_binding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_remote_service_bindingContext create_remote_service_binding() throws RecognitionException {
		Create_remote_service_bindingContext _localctx = new Create_remote_service_bindingContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_create_remote_service_binding);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3321);
			match(REMOTE);
			setState(3322);
			match(SERVICE);
			setState(3323);
			match(BINDING);
			setState(3324);
			((Create_remote_service_bindingContext)_localctx).binding_name = id();
			setState(3327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3325);
				match(AUTHORIZATION);
				setState(3326);
				id();
				}
			}

			setState(3329);
			match(TO);
			setState(3330);
			match(SERVICE);
			setState(3331);
			((Create_remote_service_bindingContext)_localctx).remote_service_name = match(STRING);
			setState(3332);
			match(WITH);
			setState(3333);
			match(USER);
			setState(3334);
			match(EQUAL);
			setState(3335);
			id();
			setState(3340);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3336);
				match(COMMA);
				setState(3337);
				match(ANONYMOUS);
				setState(3338);
				match(EQUAL);
				setState(3339);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_resource_poolContext extends ParserRuleContext {
		public IdContext pool_name;
		public TerminalNode RESOURCE() { return getToken(TSQLParser.RESOURCE, 0); }
		public TerminalNode POOL() { return getToken(TSQLParser.POOL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode MIN_CPU_PERCENT() { return getToken(TSQLParser.MIN_CPU_PERCENT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSQLParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(TSQLParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode AFFINITY() { return getToken(TSQLParser.AFFINITY, 0); }
		public TerminalNode SCHEDULER() { return getToken(TSQLParser.SCHEDULER, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(TSQLParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSQLParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(TSQLParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(TSQLParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode AUTO() { return getToken(TSQLParser.AUTO, 0); }
		public TerminalNode NUMANODE() { return getToken(TSQLParser.NUMANODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> TO() { return getTokens(TSQLParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSQLParser.TO, i);
		}
		public Create_or_alter_resource_poolContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_resource_pool; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_or_alter_resource_pool(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_or_alter_resource_pool(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_or_alter_resource_pool(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_resource_poolContext create_or_alter_resource_pool() throws RecognitionException {
		Create_or_alter_resource_poolContext _localctx = new Create_or_alter_resource_poolContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_create_or_alter_resource_pool);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3342);
			match(RESOURCE);
			setState(3343);
			match(POOL);
			setState(3344);
			((Create_or_alter_resource_poolContext)_localctx).pool_name = id();
			setState(3447);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,372,_ctx) ) {
			case 1:
				{
				setState(3345);
				match(WITH);
				setState(3346);
				match(LR_BRACKET);
				setState(3353);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					setState(3348);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3347);
						match(COMMA);
						}
					}

					setState(3350);
					match(MIN_CPU_PERCENT);
					setState(3351);
					match(EQUAL);
					setState(3352);
					match(DECIMAL);
					}
					break;
				}
				setState(3361);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
				case 1:
					{
					setState(3356);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3355);
						match(COMMA);
						}
					}

					setState(3358);
					match(MAX_CPU_PERCENT);
					setState(3359);
					match(EQUAL);
					setState(3360);
					match(DECIMAL);
					}
					break;
				}
				setState(3369);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,354,_ctx) ) {
				case 1:
					{
					setState(3364);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3363);
						match(COMMA);
						}
					}

					setState(3366);
					match(CAP_CPU_PERCENT);
					setState(3367);
					match(EQUAL);
					setState(3368);
					match(DECIMAL);
					}
					break;
				}
				setState(3412);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
				case 1:
					{
					setState(3372);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3371);
						match(COMMA);
						}
					}

					setState(3374);
					match(AFFINITY);
					setState(3375);
					match(SCHEDULER);
					setState(3376);
					match(EQUAL);
					setState(3410);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(3377);
						match(AUTO);
						}
						break;
					case LR_BRACKET:
						{
						setState(3378);
						match(LR_BRACKET);
						setState(3388); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3380);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3379);
								match(COMMA);
								}
							}

							setState(3386);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,357,_ctx) ) {
							case 1:
								{
								setState(3382);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3383);
								match(DECIMAL);
								setState(3384);
								match(TO);
								setState(3385);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(3390); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(3392);
						match(RR_BRACKET);
						}
						break;
					case NUMANODE:
						{
						setState(3393);
						match(NUMANODE);
						setState(3394);
						match(EQUAL);
						setState(3395);
						match(LR_BRACKET);
						setState(3405); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(3397);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3396);
								match(COMMA);
								}
							}

							setState(3403);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
							case 1:
								{
								setState(3399);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(3400);
								match(DECIMAL);
								setState(3401);
								match(TO);
								setState(3402);
								match(DECIMAL);
								}
								break;
							}
							}
							}
							setState(3407); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						setState(3409);
						match(RR_BRACKET);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(3420);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					setState(3415);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3414);
						match(COMMA);
						}
					}

					setState(3417);
					match(MIN_MEMORY_PERCENT);
					setState(3418);
					match(EQUAL);
					setState(3419);
					match(DECIMAL);
					}
					break;
				}
				setState(3428);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(3423);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3422);
						match(COMMA);
						}
					}

					setState(3425);
					match(MAX_MEMORY_PERCENT);
					setState(3426);
					match(EQUAL);
					setState(3427);
					match(DECIMAL);
					}
					break;
				}
				setState(3436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(3431);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3430);
						match(COMMA);
						}
					}

					setState(3433);
					match(MIN_IOPS_PER_VOLUME);
					setState(3434);
					match(EQUAL);
					setState(3435);
					match(DECIMAL);
					}
					break;
				}
				setState(3444);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MAX_IOPS_PER_VOLUME || _la==COMMA) {
					{
					setState(3439);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3438);
						match(COMMA);
						}
					}

					setState(3441);
					match(MAX_IOPS_PER_VOLUME);
					setState(3442);
					match(EQUAL);
					setState(3443);
					match(DECIMAL);
					}
				}

				setState(3446);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_resource_governorContext extends ParserRuleContext {
		public Token max_outstanding_io_per_volume;
		public TerminalNode RESOURCE() { return getToken(TSQLParser.RESOURCE, 0); }
		public TerminalNode GOVERNOR() { return getToken(TSQLParser.GOVERNOR, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode CLASSIFIER_FUNCTION() { return getToken(TSQLParser.CLASSIFIER_FUNCTION, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode RESET() { return getToken(TSQLParser.RESET, 0); }
		public TerminalNode STATISTICS() { return getToken(TSQLParser.STATISTICS, 0); }
		public TerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return getToken(TSQLParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public TerminalNode DISABLE() { return getToken(TSQLParser.DISABLE, 0); }
		public TerminalNode RECONFIGURE() { return getToken(TSQLParser.RECONFIGURE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode NULL() { return getToken(TSQLParser.NULL, 0); }
		public Alter_resource_governorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_resource_governor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_resource_governor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_resource_governor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_resource_governor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_resource_governorContext alter_resource_governor() throws RecognitionException {
		Alter_resource_governorContext _localctx = new Alter_resource_governorContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_alter_resource_governor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3449);
			match(RESOURCE);
			setState(3450);
			match(GOVERNOR);
			setState(3469);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,374,_ctx) ) {
			case 1:
				{
				setState(3451);
				_la = _input.LA(1);
				if ( !(_la==RECONFIGURE || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				{
				setState(3452);
				match(WITH);
				setState(3453);
				match(LR_BRACKET);
				setState(3454);
				match(CLASSIFIER_FUNCTION);
				setState(3455);
				match(EQUAL);
				setState(3458);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(3456);
					qualified_name();
					}
					break;
				case NULL:
					{
					setState(3457);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3460);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(3461);
				match(RESET);
				setState(3462);
				match(STATISTICS);
				}
				break;
			case 4:
				{
				setState(3463);
				match(WITH);
				setState(3464);
				match(LR_BRACKET);
				setState(3465);
				match(MAX_OUTSTANDING_IO_PER_VOLUME);
				setState(3466);
				match(EQUAL);
				setState(3467);
				((Alter_resource_governorContext)_localctx).max_outstanding_io_per_volume = match(DECIMAL);
				setState(3468);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_routeContext extends ParserRuleContext {
		public Token route_service_name;
		public Token broker_instance_identifier;
		public TerminalNode ROUTE() { return getToken(TSQLParser.ROUTE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode SERVICE_NAME() { return getToken(TSQLParser.SERVICE_NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode BROKER_INSTANCE() { return getToken(TSQLParser.BROKER_INSTANCE, 0); }
		public TerminalNode LIFETIME() { return getToken(TSQLParser.LIFETIME, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode ADDRESS() { return getToken(TSQLParser.ADDRESS, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode MIRROR_ADDRESS() { return getToken(TSQLParser.MIRROR_ADDRESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Alter_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_route; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_route(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_route(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_route(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_routeContext alter_route() throws RecognitionException {
		Alter_routeContext _localctx = new Alter_routeContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_alter_route);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3471);
			match(ROUTE);
			setState(3472);
			id();
			setState(3473);
			match(WITH);
			setState(3480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SERVICE_NAME) {
				{
				setState(3474);
				match(SERVICE_NAME);
				setState(3475);
				match(EQUAL);
				setState(3476);
				((Alter_routeContext)_localctx).route_service_name = match(STRING);
				setState(3478);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3477);
					match(COMMA);
					}
				}

				}
			}

			setState(3488);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BROKER_INSTANCE) {
				{
				setState(3482);
				match(BROKER_INSTANCE);
				setState(3483);
				match(EQUAL);
				setState(3484);
				((Alter_routeContext)_localctx).broker_instance_identifier = match(STRING);
				setState(3486);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3485);
					match(COMMA);
					}
				}

				}
			}

			setState(3496);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIFETIME) {
				{
				setState(3490);
				match(LIFETIME);
				setState(3491);
				match(EQUAL);
				setState(3492);
				match(DECIMAL);
				setState(3494);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3493);
					match(COMMA);
					}
				}

				}
			}

			setState(3504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADDRESS) {
				{
				setState(3498);
				match(ADDRESS);
				setState(3499);
				match(EQUAL);
				setState(3500);
				match(STRING);
				setState(3502);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3501);
					match(COMMA);
					}
				}

				}
			}

			setState(3509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MIRROR_ADDRESS) {
				{
				setState(3506);
				match(MIRROR_ADDRESS);
				setState(3507);
				match(EQUAL);
				setState(3508);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public IdContext database_principal;
		public IdContext new_role_name;
		public TerminalNode ROLE() { return getToken(TSQLParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(TSQLParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public Alter_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_db_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_db_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_db_roleContext alter_db_role() throws RecognitionException {
		Alter_db_roleContext _localctx = new Alter_db_roleContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_alter_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3511);
			match(ROLE);
			setState(3512);
			((Alter_db_roleContext)_localctx).role_name = id();
			setState(3520);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(3513);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3514);
				match(MEMBER);
				setState(3515);
				((Alter_db_roleContext)_localctx).database_principal = id();
				}
				break;
			case WITH:
				{
				setState(3516);
				match(WITH);
				setState(3517);
				match(NAME);
				setState(3518);
				match(EQUAL);
				setState(3519);
				((Alter_db_roleContext)_localctx).new_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_db_roleContext extends ParserRuleContext {
		public IdContext role_name;
		public IdContext owner_name;
		public TerminalNode ROLE() { return getToken(TSQLParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public Create_db_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_db_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_db_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_db_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_db_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_db_roleContext create_db_role() throws RecognitionException {
		Create_db_roleContext _localctx = new Create_db_roleContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_create_db_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3522);
			match(ROLE);
			setState(3523);
			((Create_db_roleContext)_localctx).role_name = id();
			setState(3526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3524);
				match(AUTHORIZATION);
				setState(3525);
				((Create_db_roleContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_routeContext extends ParserRuleContext {
		public IdContext route_name;
		public Token route_service_name;
		public Token broker_instance_identifier;
		public TerminalNode ROUTE() { return getToken(TSQLParser.ROUTE, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode ADDRESS() { return getToken(TSQLParser.ADDRESS, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode SERVICE_NAME() { return getToken(TSQLParser.SERVICE_NAME, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(TSQLParser.BROKER_INSTANCE, 0); }
		public TerminalNode LIFETIME() { return getToken(TSQLParser.LIFETIME, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode MIRROR_ADDRESS() { return getToken(TSQLParser.MIRROR_ADDRESS, 0); }
		public Create_routeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_route; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_route(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_route(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_route(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_routeContext create_route() throws RecognitionException {
		Create_routeContext _localctx = new Create_routeContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_create_route);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3528);
			match(ROUTE);
			setState(3529);
			((Create_routeContext)_localctx).route_name = id();
			setState(3532);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3530);
				match(AUTHORIZATION);
				setState(3531);
				id();
				}
			}

			setState(3534);
			match(WITH);
			setState(3541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,388,_ctx) ) {
			case 1:
				{
				setState(3536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3535);
					match(COMMA);
					}
				}

				setState(3538);
				match(SERVICE_NAME);
				setState(3539);
				match(EQUAL);
				setState(3540);
				((Create_routeContext)_localctx).route_service_name = match(STRING);
				}
				break;
			}
			setState(3549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,390,_ctx) ) {
			case 1:
				{
				setState(3544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3543);
					match(COMMA);
					}
				}

				setState(3546);
				match(BROKER_INSTANCE);
				setState(3547);
				match(EQUAL);
				setState(3548);
				((Create_routeContext)_localctx).broker_instance_identifier = match(STRING);
				}
				break;
			}
			setState(3557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,392,_ctx) ) {
			case 1:
				{
				setState(3552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3551);
					match(COMMA);
					}
				}

				setState(3554);
				match(LIFETIME);
				setState(3555);
				match(EQUAL);
				setState(3556);
				match(DECIMAL);
				}
				break;
			}
			setState(3560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3559);
				match(COMMA);
				}
			}

			setState(3562);
			match(ADDRESS);
			setState(3563);
			match(EQUAL);
			setState(3564);
			match(STRING);
			setState(3569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3565);
				match(COMMA);
				setState(3566);
				match(MIRROR_ADDRESS);
				setState(3567);
				match(EQUAL);
				setState(3568);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_ruleContext extends ParserRuleContext {
		public TerminalNode RULE() { return getToken(TSQLParser.RULE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Create_ruleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_rule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_rule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_rule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_rule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_ruleContext create_rule() throws RecognitionException {
		Create_ruleContext _localctx = new Create_ruleContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_create_rule);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3571);
			match(RULE);
			setState(3572);
			qualified_name();
			setState(3573);
			match(AS);
			setState(3574);
			search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_schema_sqlContext extends ParserRuleContext {
		public IdContext schema_name;
		public List<TerminalNode> SCHEMA() { return getTokens(TSQLParser.SCHEMA); }
		public TerminalNode SCHEMA(int i) {
			return getToken(TSQLParser.SCHEMA, i);
		}
		public TerminalNode TRANSFER() { return getToken(TSQLParser.TRANSFER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COLON() { return getTokens(TSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSQLParser.COLON, i);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public TerminalNode OBJECT() { return getToken(TSQLParser.OBJECT, 0); }
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode COLLECTION() { return getToken(TSQLParser.COLLECTION, 0); }
		public Alter_schema_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_schema_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_schema_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_schema_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_schema_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_schema_sqlContext alter_schema_sql() throws RecognitionException {
		Alter_schema_sqlContext _localctx = new Alter_schema_sqlContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_alter_schema_sql);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3576);
			match(SCHEMA);
			setState(3577);
			((Alter_schema_sqlContext)_localctx).schema_name = id();
			setState(3578);
			match(TRANSFER);
			setState(3588);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,396,_ctx) ) {
			case 1:
				{
				setState(3584);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OBJECT:
					{
					setState(3579);
					match(OBJECT);
					}
					break;
				case TYPE:
					{
					setState(3580);
					match(TYPE);
					}
					break;
				case XML:
					{
					setState(3581);
					match(XML);
					setState(3582);
					match(SCHEMA);
					setState(3583);
					match(COLLECTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3586);
				match(COLON);
				setState(3587);
				match(COLON);
				}
				break;
			}
			setState(3593);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
			case 1:
				{
				setState(3590);
				id();
				setState(3591);
				match(DOT);
				}
				break;
			}
			setState(3595);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_schemaContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext owner_name;
		public TerminalNode SCHEMA() { return getToken(TSQLParser.SCHEMA, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public Create_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_schemaContext create_schema() throws RecognitionException {
		Create_schemaContext _localctx = new Create_schemaContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_create_schema);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3597);
			match(SCHEMA);
			setState(3598);
			((Create_schemaContext)_localctx).schema_name = id();
			setState(3601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3599);
				match(AUTHORIZATION);
				setState(3600);
				((Create_schemaContext)_localctx).owner_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_search_property_listContext extends ParserRuleContext {
		public IdContext new_list_name;
		public IdContext database_name;
		public IdContext source_list_name;
		public TerminalNode SEARCH() { return getToken(TSQLParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSQLParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSQLParser.LIST, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public Create_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_search_property_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_search_property_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_search_property_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_search_property_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_search_property_listContext create_search_property_list() throws RecognitionException {
		Create_search_property_listContext _localctx = new Create_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_create_search_property_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3603);
			match(SEARCH);
			setState(3604);
			match(PROPERTY);
			setState(3605);
			match(LIST);
			setState(3606);
			((Create_search_property_listContext)_localctx).new_list_name = id();
			setState(3614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3607);
				match(FROM);
				setState(3611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					setState(3608);
					((Create_search_property_listContext)_localctx).database_name = id();
					setState(3609);
					match(DOT);
					}
					break;
				}
				setState(3613);
				((Create_search_property_listContext)_localctx).source_list_name = id();
				}
			}

			setState(3618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(3616);
				match(AUTHORIZATION);
				setState(3617);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_search_property_listContext extends ParserRuleContext {
		public IdContext list_name;
		public TerminalNode SEARCH() { return getToken(TSQLParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSQLParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSQLParser.LIST, 0); }
		public Add_drop_propertyContext add_drop_property() {
			return getRuleContext(Add_drop_propertyContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_search_property_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_search_property_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_search_property_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_search_property_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_search_property_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_search_property_listContext alter_search_property_list() throws RecognitionException {
		Alter_search_property_listContext _localctx = new Alter_search_property_listContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_alter_search_property_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3620);
			match(SEARCH);
			setState(3621);
			match(PROPERTY);
			setState(3622);
			match(LIST);
			setState(3623);
			((Alter_search_property_listContext)_localctx).list_name = id();
			setState(3624);
			add_drop_property();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_drop_propertyContext extends ParserRuleContext {
		public IdContext property_name;
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode PROPERTY_SET_GUID() { return getToken(TSQLParser.PROPERTY_SET_GUID, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode PROPERTY_INT_ID() { return getToken(TSQLParser.PROPERTY_INT_ID, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode PROPERTY_DESCRIPTION() { return getToken(TSQLParser.PROPERTY_DESCRIPTION, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public Add_drop_propertyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_drop_property; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAdd_drop_property(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAdd_drop_property(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAdd_drop_property(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_drop_propertyContext add_drop_property() throws RecognitionException {
		Add_drop_propertyContext _localctx = new Add_drop_propertyContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_add_drop_property);
		int _la;
		try {
			setState(3647);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(3626);
				match(ADD);
				setState(3627);
				((Add_drop_propertyContext)_localctx).property_name = id();
				setState(3628);
				match(WITH);
				setState(3629);
				match(LR_BRACKET);
				setState(3630);
				match(PROPERTY_SET_GUID);
				setState(3631);
				match(EQUAL);
				setState(3632);
				id();
				setState(3633);
				match(COMMA);
				setState(3634);
				match(PROPERTY_INT_ID);
				setState(3635);
				match(EQUAL);
				setState(3636);
				match(DECIMAL);
				setState(3641);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(3637);
					match(COMMA);
					setState(3638);
					match(PROPERTY_DESCRIPTION);
					setState(3639);
					match(EQUAL);
					setState(3640);
					match(STRING);
					}
				}

				setState(3643);
				match(RR_BRACKET);
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3645);
				match(DROP);
				setState(3646);
				((Add_drop_propertyContext)_localctx).property_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_security_policyContext extends ParserRuleContext {
		public ExpressionContext column_name_or_arguments;
		public TerminalNode SECURITY() { return getToken(TSQLParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(TSQLParser.POLICY, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public List<TerminalNode> ADD() { return getTokens(TSQLParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSQLParser.ADD, i);
		}
		public List<TerminalNode> PREDICATE() { return getTokens(TSQLParser.PREDICATE); }
		public TerminalNode PREDICATE(int i) {
			return getToken(TSQLParser.PREDICATE, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSQLParser.ON, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSQLParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public Not_for_replicationContext not_for_replication() {
			return getRuleContext(Not_for_replicationContext.class,0);
		}
		public List<TerminalNode> OFF() { return getTokens(TSQLParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSQLParser.OFF, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> AFTER() { return getTokens(TSQLParser.AFTER); }
		public TerminalNode AFTER(int i) {
			return getToken(TSQLParser.AFTER, i);
		}
		public List<TerminalNode> BEFORE() { return getTokens(TSQLParser.BEFORE); }
		public TerminalNode BEFORE(int i) {
			return getToken(TSQLParser.BEFORE, i);
		}
		public TerminalNode SCHEMABINDING() { return getToken(TSQLParser.SCHEMABINDING, 0); }
		public List<TerminalNode> FILTER() { return getTokens(TSQLParser.FILTER); }
		public TerminalNode FILTER(int i) {
			return getToken(TSQLParser.FILTER, i);
		}
		public List<TerminalNode> BLOCK() { return getTokens(TSQLParser.BLOCK); }
		public TerminalNode BLOCK(int i) {
			return getToken(TSQLParser.BLOCK, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> INSERT() { return getTokens(TSQLParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(TSQLParser.INSERT, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(TSQLParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(TSQLParser.UPDATE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(TSQLParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(TSQLParser.DELETE, i);
		}
		public Create_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_security_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_security_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_security_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_security_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_security_policyContext create_security_policy() throws RecognitionException {
		Create_security_policyContext _localctx = new Create_security_policyContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_create_security_policy);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3649);
			match(SECURITY);
			setState(3650);
			match(POLICY);
			setState(3651);
			qualified_name();
			setState(3688); 
			_errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					setState(3653);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(3652);
						match(COMMA);
						}
					}

					setState(3655);
					match(ADD);
					setState(3657);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BLOCK || _la==FILTER) {
						{
						setState(3656);
						_la = _input.LA(1);
						if ( !(_la==BLOCK || _la==FILTER) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(3659);
					match(PREDICATE);
					setState(3660);
					qualified_name();
					setState(3661);
					match(LR_BRACKET);
					setState(3666); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(3663);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3662);
							match(COMMA);
							}
						}

						setState(3665);
						((Create_security_policyContext)_localctx).column_name_or_arguments = expression(0);
						}
						}
						setState(3668); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << COALESCE) | (1L << CONVERT) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (FILLFACTOR - 65)) | (1L << (IDENTITY - 65)) | (1L << (LEFT - 65)) | (1L << (NULL - 65)) | (1L << (NULLIF - 65)) | (1L << (OVER - 65)) | (1L << (PRECISION - 65)))) != 0) || ((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (RIGHT - 138)) | (1L << (SESSION_USER - 138)) | (1L << (SYSTEM_USER - 138)) | (1L << (USER - 138)) | (1L << (FUNC_IDENTITY - 138)) | (1L << (FUNC_CURSOR_ROWS - 138)) | (1L << (FUNC_DATEFIRST - 138)) | (1L << (FUNC_ERROR - 138)) | (1L << (FUNC_FETCH_STATUS - 138)) | (1L << (FUNC_PACK_RECEIVED - 138)) | (1L << (FUNC_PROCID - 138)) | (1L << (FUNC_ROWCOUNT - 138)) | (1L << (FUNC_TRANCOUNT - 138)) | (1L << (ABSENT - 138)) | (1L << (ABSOLUTE - 138)) | (1L << (ACCENT_SENSITIVITY - 138)) | (1L << (ACTION - 138)) | (1L << (ACTIVATION - 138)) | (1L << (ACTIVE - 138)) | (1L << (ADDRESS - 138)) | (1L << (AES_128 - 138)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (AES_192 - 202)) | (1L << (AES_256 - 202)) | (1L << (AES - 202)) | (1L << (AFFINITY - 202)) | (1L << (AFTER - 202)) | (1L << (AGGREGATE - 202)) | (1L << (ALGORITHM - 202)) | (1L << (ALLOW_CONNECTIONS - 202)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 202)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 202)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 202)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 202)) | (1L << (ALLOWED - 202)) | (1L << (ANONYMOUS - 202)) | (1L << (ANSI_NULL_DEFAULT - 202)) | (1L << (ANSI_NULLS - 202)) | (1L << (ANSI_PADDING - 202)) | (1L << (ANSI_WARNINGS - 202)) | (1L << (APPEND - 202)) | (1L << (APPLICATION_LOG - 202)) | (1L << (APPLICATION - 202)) | (1L << (APPLY - 202)) | (1L << (ARITHABORT - 202)) | (1L << (ASSEMBLY - 202)) | (1L << (ASYMMETRIC - 202)) | (1L << (ASYNCHRONOUS_COMMIT - 202)) | (1L << (AUDIT_GUID - 202)) | (1L << (AUDIT - 202)) | (1L << (AUTHENTICATION - 202)) | (1L << (AUTO_CLEANUP - 202)) | (1L << (AUTO_CLOSE - 202)) | (1L << (AUTO_CREATE_STATISTICS - 202)) | (1L << (AUTO_SHRINK - 202)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 202)) | (1L << (AUTO_UPDATE_STATISTICS - 202)) | (1L << (AUTO - 202)) | (1L << (AUTOGROW_ALL_FILES - 202)) | (1L << (AUTOGROW_SINGLE_FILE - 202)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 202)) | (1L << (AUTOMATIC - 202)) | (1L << (AVAILABILITY_MODE - 202)) | (1L << (AVAILABILITY - 202)) | (1L << (BACKUP_PRIORITY - 202)) | (1L << (BEFORE - 202)) | (1L << (BEGIN_DIALOG - 202)) | (1L << (BINARY_BASE64 - 202)) | (1L << (BINDING - 202)) | (1L << (BLOB_STORAGE - 202)) | (1L << (BLOCK - 202)) | (1L << (BLOCKING_HIERARCHY - 202)) | (1L << (BLOCKSIZE - 202)) | (1L << (BROKER_INSTANCE - 202)) | (1L << (BROKER - 202)) | (1L << (BUFFER - 202)) | (1L << (BUFFERCOUNT - 202)) | (1L << (BULK_LOGGED - 202)) | (1L << (CACHE - 202)) | (1L << (CALLED - 202)) | (1L << (CALLER - 202)) | (1L << (CAP_CPU_PERCENT - 202)) | (1L << (CAST - 202)) | (1L << (CATALOG - 202)) | (1L << (CATCH - 202)) | (1L << (CERTIFICATE - 202)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (CHANGE_RETENTION - 266)) | (1L << (CHANGE_TRACKING - 266)) | (1L << (CHANGES - 266)) | (1L << (CHANGETABLE - 266)) | (1L << (CHAR - 266)) | (1L << (CHARACTER - 266)) | (1L << (CHECK_EXPIRATION - 266)) | (1L << (CHECK_POLICY - 266)) | (1L << (CHECKSUM - 266)) | (1L << (CLASSIFIER_FUNCTION - 266)) | (1L << (CLEANUP - 266)) | (1L << (CLUSTER - 266)) | (1L << (COLLECTION - 266)) | (1L << (COLUMN_MASTER_KEY - 266)) | (1L << (COMMITTED - 266)) | (1L << (COMPATIBILITY_LEVEL - 266)) | (1L << (COMPRESSION - 266)) | (1L << (CONCAT_NULL_YIELDS_NULL - 266)) | (1L << (CONCAT - 266)) | (1L << (CONFIGURATION - 266)) | (1L << (CONNECT - 266)) | (1L << (CONTAINMENT - 266)) | (1L << (CONTENT - 266)) | (1L << (CONTEXT - 266)) | (1L << (CONTINUE_AFTER_ERROR - 266)) | (1L << (CONTRACT_NAME - 266)) | (1L << (CONTRACT - 266)) | (1L << (CONTROL - 266)) | (1L << (CONVERSATION - 266)) | (1L << (COOKIE - 266)) | (1L << (COPY_ONLY - 266)) | (1L << (COUNTER - 266)) | (1L << (CPU - 266)) | (1L << (CREATE_NEW - 266)) | (1L << (CREATION_DISPOSITION - 266)) | (1L << (CREDENTIAL - 266)) | (1L << (CRYPTOGRAPHIC - 266)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 266)) | (1L << (CURSOR_DEFAULT - 266)) | (1L << (CYCLE - 266)) | (1L << (DATA_COMPRESSION - 266)) | (1L << (DATA_SOURCE - 266)) | (1L << (DATA - 266)) | (1L << (DATABASE_MIRRORING - 266)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 266)) | (1L << (DAYS - 266)) | (1L << (DB_CHAINING - 266)) | (1L << (DB_FAILOVER - 266)) | (1L << (DECRYPTION - 266)) | (1L << (DEFAULT_DATABASE - 266)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 266)) | (1L << (DEFAULT_LANGUAGE - 266)) | (1L << (DEFAULT_SCHEMA - 266)) | (1L << (DELAY - 266)) | (1L << (DELAYED_DURABILITY - 266)) | (1L << (DEPENDENTS - 266)) | (1L << (DES - 266)) | (1L << (DESCRIPTION - 266)) | (1L << (DESX - 266)) | (1L << (DHCP - 266)) | (1L << (DIAGNOSTICS - 266)) | (1L << (DIALOG - 266)) | (1L << (DIFFERENTIAL - 266)) | (1L << (DIRECTORY_NAME - 266)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (DISABLE_BROKER - 330)) | (1L << (DISABLE - 330)) | (1L << (DISABLED - 330)) | (1L << (DOCUMENT - 330)) | (1L << (DTC_SUPPORT - 330)) | (1L << (DYNAMIC - 330)) | (1L << (ELEMENTS - 330)) | (1L << (EMERGENCY - 330)) | (1L << (EMPTY - 330)) | (1L << (ENABLE_BROKER - 330)) | (1L << (ENABLE - 330)) | (1L << (ENABLED - 330)) | (1L << (ENCRYPTED_VALUE - 330)) | (1L << (ENCRYPTION - 330)) | (1L << (ENDPOINT_URL - 330)) | (1L << (ENDPOINT - 330)) | (1L << (ERROR_BROKER_CONVERSATIONS - 330)) | (1L << (ERROR - 330)) | (1L << (EVENT_RETENTION_MODE - 330)) | (1L << (EVENT - 330)) | (1L << (EXCLUSIVE - 330)) | (1L << (EXECUTABLE_FILE - 330)) | (1L << (EXECUTABLE - 330)) | (1L << (EXPAND - 330)) | (1L << (EXPIREDATE - 330)) | (1L << (EXPIRY_DATE - 330)) | (1L << (EXPLICIT - 330)) | (1L << (EXTENSION - 330)) | (1L << (EXTERNAL_ACCESS - 330)) | (1L << (FAIL_OPERATION - 330)) | (1L << (FAILOVER_MODE - 330)) | (1L << (FAILOVER - 330)) | (1L << (FAILURE_CONDITION_LEVEL - 330)) | (1L << (FAILURECONDITIONLEVEL - 330)) | (1L << (FALSE - 330)) | (1L << (FAN_IN - 330)) | (1L << (FAST_FORWARD - 330)) | (1L << (FAST - 330)) | (1L << (FILE_SNAPSHOT - 330)) | (1L << (FILEGROUP - 330)) | (1L << (FILEGROWTH - 330)) | (1L << (FILENAME - 330)) | (1L << (FILEPATH - 330)) | (1L << (FILESTREAM_ON - 330)) | (1L << (FILESTREAM - 330)) | (1L << (FILTER - 330)) | (1L << (FIRST - 330)) | (1L << (FOLLOWING - 330)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 330)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 330)) | (1L << (FORCE - 330)) | (1L << (FORCED - 330)) | (1L << (FORCESEEK - 330)) | (1L << (FORMAT - 330)) | (1L << (FORWARD_ONLY - 330)) | (1L << (FULLSCAN - 330)) | (1L << (FULLTEXT - 330)) | (1L << (GB - 330)) | (1L << (GET - 330)) | (1L << (GLOBAL - 330)) | (1L << (GOVERNOR - 330)) | (1L << (GROUP_MAX_REQUESTS - 330)) | (1L << (HADR - 330)) | (1L << (HASH - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (HASHED - 394)) | (1L << (HEALTH_CHECK_TIMEOUT - 394)) | (1L << (HEALTHCHECKTIMEOUT - 394)) | (1L << (HIGH - 394)) | (1L << (HONOR_BROKER_PRIORITY - 394)) | (1L << (HOURS - 394)) | (1L << (IDENTITY_VALUE - 394)) | (1L << (IIF - 394)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 394)) | (1L << (IMMEDIATE - 394)) | (1L << (IMPERSONATE - 394)) | (1L << (IMPORTANCE - 394)) | (1L << (INCLUDE_NULL_VALUES - 394)) | (1L << (INCLUDE - 394)) | (1L << (INCREMENT - 394)) | (1L << (INCREMENTAL - 394)) | (1L << (INFINITE - 394)) | (1L << (INIT - 394)) | (1L << (INITIATOR - 394)) | (1L << (INPUT - 394)) | (1L << (INSENSITIVE - 394)) | (1L << (INSTEAD - 394)) | (1L << (IO - 394)) | (1L << (IP - 394)) | (1L << (ISOLATION - 394)) | (1L << (JSON - 394)) | (1L << (KB - 394)) | (1L << (KEEP - 394)) | (1L << (KEEPFIXED - 394)) | (1L << (KERBEROS - 394)) | (1L << (KEY_PATH - 394)) | (1L << (KEY_SOURCE - 394)) | (1L << (KEY_STORE_PROVIDER_NAME - 394)) | (1L << (KEYS - 394)) | (1L << (KEYSET - 394)) | (1L << (LANGUAGE - 394)) | (1L << (LAST - 394)) | (1L << (LEVEL - 394)) | (1L << (LIBRARY - 394)) | (1L << (LIFETIME - 394)) | (1L << (LINUX - 394)) | (1L << (LIST - 394)) | (1L << (LISTENER_IP - 394)) | (1L << (LISTENER_PORT - 394)) | (1L << (LISTENER_URL - 394)) | (1L << (LISTENER - 394)) | (1L << (LOB_COMPACTION - 394)) | (1L << (LOCAL_SERVICE_NAME - 394)) | (1L << (LOCAL - 394)) | (1L << (LOCATION - 394)) | (1L << (LOCK_ESCALATION - 394)) | (1L << (LOCK - 394)) | (1L << (LOG - 394)) | (1L << (LOGIN - 394)) | (1L << (LOOP - 394)) | (1L << (LOW - 394)) | (1L << (MANUAL - 394)) | (1L << (MARK - 394)) | (1L << (MASTER - 394)) | (1L << (MATCHED - 394)) | (1L << (MATERIALIZED - 394)) | (1L << (MAX_CPU_PERCENT - 394)) | (1L << (MAX_DISPATCH_LATENCY - 394)) | (1L << (MAX_DOP - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (MAX_EVENT_SIZE - 458)) | (1L << (MAX_FILES - 458)) | (1L << (MAX_IOPS_PER_VOLUME - 458)) | (1L << (MAX_MEMORY_PERCENT - 458)) | (1L << (MAX_MEMORY - 458)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 458)) | (1L << (MAX_PROCESSES - 458)) | (1L << (MAX_QUEUE_READERS - 458)) | (1L << (MAX_ROLLOVER_FILES - 458)) | (1L << (MAX_SIZE - 458)) | (1L << (MAX - 458)) | (1L << (MAXDOP - 458)) | (1L << (MAXRECURSION - 458)) | (1L << (MAXSIZE - 458)) | (1L << (MAXTRANSFER - 458)) | (1L << (MAXVALUE - 458)) | (1L << (MB - 458)) | (1L << (MEDIADESCRIPTION - 458)) | (1L << (MEDIANAME - 458)) | (1L << (MEDIUM - 458)) | (1L << (MEMBER - 458)) | (1L << (MEMORY_OPTIMIZED_DATA - 458)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 458)) | (1L << (MEMORY_OPTIMIZED - 458)) | (1L << (MEMORY_PARTITION_MODE - 458)) | (1L << (MESSAGE_FORWARD_SIZE - 458)) | (1L << (MESSAGE_FORWARDING - 458)) | (1L << (MESSAGE - 458)) | (1L << (MIN_ACTIVE_ROWVERSION - 458)) | (1L << (MIN_CPU_PERCENT - 458)) | (1L << (MIN_IOPS_PER_VOLUME - 458)) | (1L << (MIN_MEMORY_PERCENT - 458)) | (1L << (MINUTES - 458)) | (1L << (MINVALUE - 458)) | (1L << (MIRROR_ADDRESS - 458)) | (1L << (MIRROR - 458)) | (1L << (MIXED_PAGE_ALLOCATION - 458)) | (1L << (MODE - 458)) | (1L << (MODIFY - 458)) | (1L << (MOVE - 458)) | (1L << (MULTI_USER - 458)) | (1L << (MUST_CHANGE - 458)) | (1L << (NAME - 458)) | (1L << (NCHAR - 458)) | (1L << (NEGOTIATE - 458)) | (1L << (NESTED_TRIGGERS - 458)) | (1L << (NEW_ACCOUNT - 458)) | (1L << (NEW_BROKER - 458)) | (1L << (NEW_PASSWORD - 458)) | (1L << (NEWNAME - 458)) | (1L << (NEXT - 458)) | (1L << (NO_CHECKSUM - 458)) | (1L << (NO_COMPRESSION - 458)) | (1L << (NO_EVENT_LOSS - 458)) | (1L << (NO_TRUNCATE - 458)) | (1L << (NO_WAIT - 458)) | (1L << (NO - 458)) | (1L << (NODES - 458)) | (1L << (NOEXPAND - 458)) | (1L << (NOFORMAT - 458)) | (1L << (NOINIT - 458)) | (1L << (NON_TRANSACTED_ACCESS - 458)) | (1L << (NONE - 458)) | (1L << (NORECOMPUTE - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (NORECOVERY - 522)) | (1L << (NOREWIND - 522)) | (1L << (NOSKIP - 522)) | (1L << (NOTIFICATION - 522)) | (1L << (NOUNLOAD - 522)) | (1L << (NOWAIT - 522)) | (1L << (NTLM - 522)) | (1L << (NUMANODE - 522)) | (1L << (NUMERIC_ROUNDABORT - 522)) | (1L << (OBJECT - 522)) | (1L << (OFFLINE - 522)) | (1L << (OFFSET - 522)) | (1L << (OLD_ACCOUNT - 522)) | (1L << (OLD_PASSWORD - 522)) | (1L << (ON_FAILURE - 522)) | (1L << (ONLINE - 522)) | (1L << (ONLY - 522)) | (1L << (OPEN_EXISTING - 522)) | (1L << (OPENJSON - 522)) | (1L << (OPTIMISTIC - 522)) | (1L << (OPTIMIZE - 522)) | (1L << (OUT - 522)) | (1L << (OUTPUT - 522)) | (1L << (OWNER - 522)) | (1L << (PAGE_VERIFY - 522)) | (1L << (PARAMETERIZATION - 522)) | (1L << (PARSE - 522)) | (1L << (PARTIAL - 522)) | (1L << (PARTITION - 522)) | (1L << (PARTITIONS - 522)) | (1L << (PARTNER - 522)) | (1L << (PASSWORD - 522)) | (1L << (PATH - 522)) | (1L << (PAUSE - 522)) | (1L << (PER_CPU - 522)) | (1L << (PER_DB - 522)) | (1L << (PER_NODE - 522)) | (1L << (PERMISSION_SET - 522)) | (1L << (PERSIST_SAMPLE_PERSENT - 522)) | (1L << (PERSISTED - 522)) | (1L << (PERSISTENT_LOG_BUFFER - 522)) | (1L << (PLATFORM - 522)) | (1L << (POISON_MESSAGE_HANDLING - 522)) | (1L << (POLICY - 522)) | (1L << (POOL - 522)) | (1L << (POPULATION - 522)) | (1L << (PORT - 522)) | (1L << (PRECEDING - 522)) | (1L << (PREDICATE - 522)) | (1L << (PRIMARY_ROLE - 522)) | (1L << (PRIOR - 522)) | (1L << (PRIORITY_LEVEL - 522)) | (1L << (PRIORITY - 522)) | (1L << (PRIVATE_KEY - 522)) | (1L << (PRIVATE - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (PROCEDURE_NAME - 522)) | (1L << (PROCESS - 522)) | (1L << (PROFILE - 522)) | (1L << (PROPERTY_DESCRIPTION - 522)) | (1L << (PROPERTY_INT_ID - 522)) | (1L << (PROPERTY_SET_GUID - 522)) | (1L << (PROPERTY - 522)) | (1L << (PROVIDER_KEY_NAME - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (PROVIDER - 586)) | (1L << (QUERYTRACEON - 586)) | (1L << (QUEUE_DELAY - 586)) | (1L << (QUEUE - 586)) | (1L << (QUOTED_IDENTIFIER - 586)) | (1L << (R_LETTER - 586)) | (1L << (RANGE - 586)) | (1L << (RAW - 586)) | (1L << (RC2 - 586)) | (1L << (RC4_128 - 586)) | (1L << (RC4 - 586)) | (1L << (READ_COMMITTED_SNAPSHOT - 586)) | (1L << (READ_ONLY_ROUTING_LIST - 586)) | (1L << (READ_ONLY - 586)) | (1L << (READ_WRITE_FILEGROUPS - 586)) | (1L << (READ_WRITE - 586)) | (1L << (READWRITE - 586)) | (1L << (READONLY - 586)) | (1L << (REBUILD - 586)) | (1L << (RECEIVE - 586)) | (1L << (RECOMPILE - 586)) | (1L << (RECOVERY - 586)) | (1L << (RECURSIVE_TRIGGERS - 586)) | (1L << (REGENERATE - 586)) | (1L << (RELATED_CONVERSATION_GROUP - 586)) | (1L << (RELATED_CONVERSATION - 586)) | (1L << (RELATIVE - 586)) | (1L << (REMOTE_SERVICE_NAME - 586)) | (1L << (REMOTE - 586)) | (1L << (REMOVE - 586)) | (1L << (REORGANIZE - 586)) | (1L << (REPEATABLE - 586)) | (1L << (REPLICA - 586)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 586)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 586)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 586)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 586)) | (1L << (REQUIRED - 586)) | (1L << (RESAMPLE - 586)) | (1L << (RESERVE_DISK_SPACE - 586)) | (1L << (RESET - 586)) | (1L << (RESOURCE_MANAGER_LOCATION - 586)) | (1L << (RESOURCE - 586)) | (1L << (RESTART - 586)) | (1L << (RESTRICTED_USER - 586)) | (1L << (RESULT - 586)) | (1L << (RESUME - 586)) | (1L << (RETAINDAYS - 586)) | (1L << (RETENTION - 586)) | (1L << (RETURNS - 586)) | (1L << (REWIND - 586)) | (1L << (ROBUST - 586)) | (1L << (ROLE - 586)) | (1L << (ROOT - 586)) | (1L << (ROUTE - 586)) | (1L << (ROW - 586)) | (1L << (ROWGUID - 586)) | (1L << (ROWS - 586)) | (1L << (RSA_1024 - 586)) | (1L << (RSA_2048 - 586)) | (1L << (RSA_3072 - 586)) | (1L << (RSA_4096 - 586)) | (1L << (RSA_512 - 586)) | (1L << (SAFE - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (SAFETY - 650)) | (1L << (SAMPLE - 650)) | (1L << (SCHEDULER - 650)) | (1L << (SCHEMABINDING - 650)) | (1L << (SCHEME - 650)) | (1L << (SCOPED - 650)) | (1L << (SCROLL_LOCKS - 650)) | (1L << (SCROLL - 650)) | (1L << (SEARCH - 650)) | (1L << (SECONDARY_ONLY - 650)) | (1L << (SECONDARY_ROLE - 650)) | (1L << (SECONDARY - 650)) | (1L << (SECONDS - 650)) | (1L << (SECRET - 650)) | (1L << (SECURITY_LOG - 650)) | (1L << (SECURITY - 650)) | (1L << (SEEDING_MODE - 650)) | (1L << (SELECTIVE - 650)) | (1L << (SELF - 650)) | (1L << (SEMI_SENSITIVE - 650)) | (1L << (SEND - 650)) | (1L << (SENT - 650)) | (1L << (SEQUENCE - 650)) | (1L << (SERIALIZABLE - 650)) | (1L << (SERVER - 650)) | (1L << (SERVICE_BROKER - 650)) | (1L << (SERVICE_NAME - 650)) | (1L << (SERVICE - 650)) | (1L << (SESSION_TIMEOUT - 650)) | (1L << (SESSION - 650)) | (1L << (SETERROR - 650)) | (1L << (SETS - 650)) | (1L << (SHARE - 650)) | (1L << (SHOWPLAN - 650)) | (1L << (SID - 650)) | (1L << (SIGNATURE - 650)) | (1L << (SIMPLE - 650)) | (1L << (SINGLE_USER - 650)) | (1L << (SINGLETON - 650)) | (1L << (SIZE - 650)) | (1L << (SKIP_KEYWORD - 650)) | (1L << (SNAPSHOT - 650)) | (1L << (SOFTNUMA - 650)) | (1L << (SOURCE - 650)) | (1L << (SPARSE - 650)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 650)) | (1L << (SPECIFICATION - 650)) | (1L << (SPLIT - 650)) | (1L << (SQL - 650)) | (1L << (SQLDUMPERFLAGS - 650)) | (1L << (SQLDUMPERPATH - 650)) | (1L << (SQLDUMPERTIMEOUT - 650)) | (1L << (STANDBY - 650)) | (1L << (START_DATE - 650)) | (1L << (START - 650)) | (1L << (STARTED - 650)) | (1L << (STARTUP_STATE - 650)) | (1L << (STATE - 650)) | (1L << (STATIC - 650)) | (1L << (STATISTICAL_SEMANTICS - 650)) | (1L << (STATS - 650)) | (1L << (STATUS - 650)) | (1L << (STOP_ON_ERROR - 650)) | (1L << (STOP - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (STOPLIST - 714)) | (1L << (STOPPED - 714)) | (1L << (STRING_AGG - 714)) | (1L << (SUBJECT - 714)) | (1L << (SUPPORTED - 714)) | (1L << (SUSPEND - 714)) | (1L << (SYMMETRIC - 714)) | (1L << (SYNCHRONOUS_COMMIT - 714)) | (1L << (SYNONYM - 714)) | (1L << (SYSTEM - 714)) | (1L << (TAKE - 714)) | (1L << (TAPE - 714)) | (1L << (TARGET_RECOVERY_TIME - 714)) | (1L << (TARGET - 714)) | (1L << (TB - 714)) | (1L << (TCP - 714)) | (1L << (TEXTIMAGE_ON - 714)) | (1L << (THROW - 714)) | (1L << (TIES - 714)) | (1L << (TIME - 714)) | (1L << (TIMEOUT - 714)) | (1L << (TIMER - 714)) | (1L << (TORN_PAGE_DETECTION - 714)) | (1L << (TRACK_CAUSALITY - 714)) | (1L << (TRACK_COLUMNS_UPDATED - 714)) | (1L << (TRANSFER - 714)) | (1L << (TRANSFORM_NOISE_WORDS - 714)) | (1L << (TRIM - 714)) | (1L << (TRIPLE_DES_3KEY - 714)) | (1L << (TRIPLE_DES - 714)) | (1L << (TRUE - 714)) | (1L << (TRUSTWORTHY - 714)) | (1L << (TRY - 714)) | (1L << (TSQL - 714)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 714)) | (1L << (TYPE_WARNING - 714)) | (1L << (TYPE - 714)) | (1L << (UNBOUNDED - 714)) | (1L << (UNCHECKED - 714)) | (1L << (UNCOMMITTED - 714)) | (1L << (UNDEFINED - 714)) | (1L << (UNKNOWN - 714)) | (1L << (UNLIMITED - 714)) | (1L << (UNLOCK - 714)) | (1L << (UNSAFE - 714)) | (1L << (URL - 714)) | (1L << (USED - 714)) | (1L << (USING - 714)) | (1L << (VALID_XML - 714)) | (1L << (VALIDATION - 714)) | (1L << (VALUE - 714)) | (1L << (VERBOSELOGGING - 714)) | (1L << (VERSION - 714)) | (1L << (VIEW_METADATA - 714)) | (1L << (VIEWS - 714)) | (1L << (VISIBILITY - 714)) | (1L << (WAIT - 714)) | (1L << (WELL_FORMED_XML - 714)) | (1L << (WINDOWS - 714)) | (1L << (WITHOUT_ARRAY_WRAPPER - 714)) | (1L << (WITHOUT - 714)) | (1L << (WITNESS - 714)) | (1L << (WORK - 714)) | (1L << (WORKLOAD - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (XML - 778)) | (1L << (XMLDATA - 778)) | (1L << (XMLNAMESPACES - 778)) | (1L << (XMLSCHEMA - 778)) | (1L << (XQUERY - 778)) | (1L << (XSINIL - 778)) | (1L << (LEFT_FIGURE_PAREN - 778)) | (1L << (DOUBLE_QUOTE_ID - 778)) | (1L << (SQUARE_BRACKET_ID - 778)) | (1L << (LOCAL_ID - 778)) | (1L << (DECIMAL - 778)) | (1L << (ID - 778)) | (1L << (STRING - 778)) | (1L << (BINARY - 778)) | (1L << (FLOAT - 778)) | (1L << (REAL - 778)) | (1L << (IPV4_ADDR - 778)) | (1L << (DOLLAR - 778)) | (1L << (LR_BRACKET - 778)) | (1L << (COMMA - 778)) | (1L << (PLUS - 778)) | (1L << (MINUS - 778)) | (1L << (BIT_NOT - 778)))) != 0) );
					setState(3670);
					match(RR_BRACKET);
					setState(3671);
					match(ON);
					setState(3672);
					qualified_name();
					setState(3685);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,411,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							setState(3683);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
							case 1:
								{
								setState(3674);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3673);
									match(COMMA);
									}
								}

								setState(3676);
								match(AFTER);
								setState(3677);
								_la = _input.LA(1);
								if ( !(_la==INSERT || _la==UPDATE) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							case 2:
								{
								setState(3679);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3678);
									match(COMMA);
									}
								}

								setState(3681);
								match(BEFORE);
								setState(3682);
								_la = _input.LA(1);
								if ( !(_la==DELETE || _la==UPDATE) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							} 
						}
						setState(3687);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,411,_ctx);
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3690); 
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,412,_ctx);
			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
			setState(3702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				setState(3692);
				match(WITH);
				setState(3693);
				match(LR_BRACKET);
				setState(3694);
				match(STATE);
				setState(3695);
				match(EQUAL);
				setState(3696);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3699);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCHEMABINDING) {
					{
					setState(3697);
					match(SCHEMABINDING);
					setState(3698);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(3701);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3704);
				not_for_replication();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_security_policyContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(TSQLParser.SECURITY, 0); }
		public TerminalNode POLICY() { return getToken(TSQLParser.POLICY, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<Add_alter_drop_predicateContext> add_alter_drop_predicate() {
			return getRuleContexts(Add_alter_drop_predicateContext.class);
		}
		public Add_alter_drop_predicateContext add_alter_drop_predicate(int i) {
			return getRuleContext(Add_alter_drop_predicateContext.class,i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSQLParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Not_for_replicationContext not_for_replication() {
			return getRuleContext(Not_for_replicationContext.class,0);
		}
		public Alter_security_policyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_security_policy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_security_policy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_security_policy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_security_policy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_security_policyContext alter_security_policy() throws RecognitionException {
		Alter_security_policyContext _localctx = new Alter_security_policyContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_alter_security_policy);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3707);
			match(SECURITY);
			setState(3708);
			match(POLICY);
			setState(3709);
			qualified_name();
			setState(3711);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(3710);
				match(LR_BRACKET);
				}
			}

			setState(3713);
			add_alter_drop_predicate();
			setState(3718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3714);
				match(COMMA);
				setState(3715);
				add_alter_drop_predicate();
				}
				}
				setState(3720);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3722);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RR_BRACKET) {
				{
				setState(3721);
				match(RR_BRACKET);
				}
			}

			setState(3731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
			case 1:
				{
				setState(3724);
				match(WITH);
				setState(3725);
				match(LR_BRACKET);
				setState(3726);
				match(STATE);
				setState(3727);
				match(EQUAL);
				setState(3728);
				on_off();
				setState(3729);
				match(RR_BRACKET);
				}
				break;
			}
			setState(3734);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3733);
				not_for_replication();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_alter_drop_predicateContext extends ParserRuleContext {
		public TerminalNode PREDICATE() { return getToken(TSQLParser.PREDICATE, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode ALTER() { return getToken(TSQLParser.ALTER, 0); }
		public TerminalNode FILTER() { return getToken(TSQLParser.FILTER, 0); }
		public TerminalNode BLOCK() { return getToken(TSQLParser.BLOCK, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Block_dml_operationContext block_dml_operation() {
			return getRuleContext(Block_dml_operationContext.class,0);
		}
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public Add_alter_drop_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_alter_drop_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAdd_alter_drop_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAdd_alter_drop_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAdd_alter_drop_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_alter_drop_predicateContext add_alter_drop_predicate() throws RecognitionException {
		Add_alter_drop_predicateContext _localctx = new Add_alter_drop_predicateContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_add_alter_drop_predicate);
		int _la;
		try {
			setState(3760);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case ALTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3736);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==ALTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3737);
				_la = _input.LA(1);
				if ( !(_la==BLOCK || _la==FILTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3738);
				match(PREDICATE);
				setState(3739);
				qualified_name();
				setState(3740);
				match(LR_BRACKET);
				setState(3741);
				expression(0);
				setState(3746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3742);
					match(COMMA);
					setState(3743);
					expression(0);
					}
					}
					setState(3748);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3749);
				match(RR_BRACKET);
				setState(3750);
				match(ON);
				setState(3751);
				qualified_name();
				setState(3753);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==BEFORE) {
					{
					setState(3752);
					block_dml_operation();
					}
				}

				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3755);
				match(DROP);
				setState(3756);
				_la = _input.LA(1);
				if ( !(_la==BLOCK || _la==FILTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3757);
				match(PREDICATE);
				setState(3758);
				match(ON);
				setState(3759);
				qualified_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Block_dml_operationContext extends ParserRuleContext {
		public TerminalNode AFTER() { return getToken(TSQLParser.AFTER, 0); }
		public TerminalNode INSERT() { return getToken(TSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(TSQLParser.UPDATE, 0); }
		public TerminalNode BEFORE() { return getToken(TSQLParser.BEFORE, 0); }
		public TerminalNode DELETE() { return getToken(TSQLParser.DELETE, 0); }
		public Block_dml_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block_dml_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBlock_dml_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBlock_dml_operation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBlock_dml_operation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Block_dml_operationContext block_dml_operation() throws RecognitionException {
		Block_dml_operationContext _localctx = new Block_dml_operationContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_block_dml_operation);
		int _la;
		try {
			setState(3766);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AFTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3762);
				match(AFTER);
				setState(3763);
				_la = _input.LA(1);
				if ( !(_la==INSERT || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case BEFORE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3764);
				match(BEFORE);
				setState(3765);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==UPDATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_sequenceContext extends ParserRuleContext {
		public Signed_numerical_literalContext restart;
		public TerminalNode SEQUENCE() { return getToken(TSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<Sequence_bodyContext> sequence_body() {
			return getRuleContexts(Sequence_bodyContext.class);
		}
		public Sequence_bodyContext sequence_body(int i) {
			return getRuleContext(Sequence_bodyContext.class,i);
		}
		public List<TerminalNode> RESTART() { return getTokens(TSQLParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(TSQLParser.RESTART, i);
		}
		public List<TerminalNode> WITH() { return getTokens(TSQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(TSQLParser.WITH, i);
		}
		public List<Signed_numerical_literalContext> signed_numerical_literal() {
			return getRuleContexts(Signed_numerical_literalContext.class);
		}
		public Signed_numerical_literalContext signed_numerical_literal(int i) {
			return getRuleContext(Signed_numerical_literalContext.class,i);
		}
		public Alter_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_sequenceContext alter_sequence() throws RecognitionException {
		Alter_sequenceContext _localctx = new Alter_sequenceContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_alter_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3768);
			match(SEQUENCE);
			setState(3769);
			qualified_name();
			setState(3778);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AS || _la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (MAXVALUE - 473)) | (1L << (MINVALUE - 473)) | (1L << (NO - 473)))) != 0) || _la==RESTART || _la==START) {
				{
				setState(3776);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AS:
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NO:
				case START:
					{
					setState(3770);
					sequence_body();
					}
					break;
				case RESTART:
					{
					setState(3771);
					match(RESTART);
					setState(3774);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
					case 1:
						{
						setState(3772);
						match(WITH);
						setState(3773);
						((Alter_sequenceContext)_localctx).restart = signed_numerical_literal();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(3780);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode SEQUENCE() { return getToken(TSQLParser.SEQUENCE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<Sequence_bodyContext> sequence_body() {
			return getRuleContexts(Sequence_bodyContext.class);
		}
		public Sequence_bodyContext sequence_body(int i) {
			return getRuleContext(Sequence_bodyContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3781);
			match(SEQUENCE);
			setState(3782);
			qualified_name();
			setState(3786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==AS || _la==CACHE || _la==CYCLE || _la==INCREMENT || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & ((1L << (MAXVALUE - 473)) | (1L << (MINVALUE - 473)) | (1L << (NO - 473)))) != 0) || _la==START) {
				{
				{
				setState(3783);
				sequence_body();
				}
				}
				setState(3788);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_bodyContext extends ParserRuleContext {
		public Signed_numerical_literalContext start_val;
		public Signed_numerical_literalContext incr;
		public Signed_numerical_literalContext minval;
		public Signed_numerical_literalContext maxval;
		public Token cycle_true;
		public Token cycle_val;
		public Signed_numerical_literalContext cache_val;
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode START() { return getToken(TSQLParser.START, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public Signed_numerical_literalContext signed_numerical_literal() {
			return getRuleContext(Signed_numerical_literalContext.class,0);
		}
		public TerminalNode INCREMENT() { return getToken(TSQLParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(TSQLParser.MINVALUE, 0); }
		public TerminalNode NO() { return getToken(TSQLParser.NO, 0); }
		public TerminalNode MAXVALUE() { return getToken(TSQLParser.MAXVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(TSQLParser.CYCLE, 0); }
		public TerminalNode CACHE() { return getToken(TSQLParser.CACHE, 0); }
		public Sequence_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSequence_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSequence_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSequence_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_bodyContext sequence_body() throws RecognitionException {
		Sequence_bodyContext _localctx = new Sequence_bodyContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_sequence_body);
		int _la;
		try {
			setState(3821);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,434,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3789);
				match(AS);
				setState(3790);
				data_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3791);
				match(START);
				setState(3792);
				match(WITH);
				setState(3793);
				((Sequence_bodyContext)_localctx).start_val = signed_numerical_literal();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3794);
				match(INCREMENT);
				setState(3795);
				match(BY);
				setState(3796);
				((Sequence_bodyContext)_localctx).incr = signed_numerical_literal();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3801);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINVALUE:
					{
					setState(3797);
					match(MINVALUE);
					setState(3798);
					((Sequence_bodyContext)_localctx).minval = signed_numerical_literal();
					}
					break;
				case NO:
					{
					setState(3799);
					match(NO);
					setState(3800);
					match(MINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3807);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAXVALUE:
					{
					setState(3803);
					match(MAXVALUE);
					setState(3804);
					((Sequence_bodyContext)_localctx).maxval = signed_numerical_literal();
					}
					break;
				case NO:
					{
					setState(3805);
					match(NO);
					setState(3806);
					match(MAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3810);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(3809);
					((Sequence_bodyContext)_localctx).cycle_true = match(NO);
					}
				}

				setState(3812);
				((Sequence_bodyContext)_localctx).cycle_val = match(CYCLE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3819);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CACHE:
					{
					setState(3813);
					match(CACHE);
					setState(3815);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 792)) & ~0x3f) == 0 && ((1L << (_la - 792)) & ((1L << (DECIMAL - 792)) | (1L << (FLOAT - 792)) | (1L << (REAL - 792)) | (1L << (PLUS - 792)) | (1L << (MINUS - 792)))) != 0)) {
						{
						setState(3814);
						((Sequence_bodyContext)_localctx).cache_val = signed_numerical_literal();
						}
					}

					}
					break;
				case NO:
					{
					setState(3817);
					match(NO);
					setState(3818);
					match(CACHE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSQLParser.AUDIT, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode REMOVE() { return getToken(TSQLParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(TSQLParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(TSQLParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(TSQLParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSQLParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSQLParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(TSQLParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(TSQLParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(TSQLParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(TSQLParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(TSQLParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(TSQLParser.STATE, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(TSQLParser.AND, 0); }
		public TerminalNode OR() { return getToken(TSQLParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(TSQLParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(TSQLParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(TSQLParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(TSQLParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(TSQLParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(TSQLParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSQLParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSQLParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSQLParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(TSQLParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSQLParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(TSQLParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSQLParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(TSQLParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(TSQLParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(TSQLParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(TSQLParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(TSQLParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(TSQLParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(TSQLParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(TSQLParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(TSQLParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(TSQLParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(TSQLParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(TSQLParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSQLParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSQLParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(TSQLParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(TSQLParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(TSQLParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(TSQLParser.TB, i);
		}
		public Alter_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_server_audit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_server_audit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_auditContext alter_server_audit() throws RecognitionException {
		Alter_server_auditContext _localctx = new Alter_server_auditContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_alter_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3823);
			match(SERVER);
			setState(3824);
			match(AUDIT);
			setState(3825);
			((Alter_server_auditContext)_localctx).audit_name = id();
			setState(3957);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case ADD:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DENY:
			case DROP:
			case ELSE:
			case END:
			case EXECUTE:
			case FETCH:
			case GO:
			case GRANT:
			case IF:
			case INSERT:
			case MERGE:
			case OPEN:
			case PRINT:
			case RAISERROR:
			case RETURN:
			case REVERT:
			case REVOKE:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case TO:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case VALUES:
			case WAITFOR:
			case WHERE:
			case WHILE:
			case WITH:
			case DISABLE:
			case ENABLE:
			case GET:
			case LOCK:
			case MOVE:
			case RECEIVE:
			case SEND:
			case THROW:
			case LR_BRACKET:
			case SEMI:
				{
				setState(3873);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(3826);
					match(TO);
					setState(3871);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(3827);
						match(FILE);
						{
						setState(3828);
						match(LR_BRACKET);
						setState(3865);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (MAX_FILES - 459)) | (1L << (MAX_ROLLOVER_FILES - 459)) | (1L << (MAXSIZE - 459)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(3863);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
							case 1:
								{
								setState(3830);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3829);
									match(COMMA);
									}
								}

								setState(3832);
								match(FILEPATH);
								setState(3833);
								match(EQUAL);
								setState(3834);
								((Alter_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(3836);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3835);
									match(COMMA);
									}
								}

								setState(3838);
								match(MAXSIZE);
								setState(3839);
								match(EQUAL);
								setState(3843);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(3840);
									match(DECIMAL);
									setState(3841);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(3842);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(3846);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3845);
									match(COMMA);
									}
								}

								setState(3848);
								match(MAX_ROLLOVER_FILES);
								setState(3849);
								match(EQUAL);
								setState(3850);
								((Alter_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Alter_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							case 4:
								{
								setState(3852);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3851);
									match(COMMA);
									}
								}

								setState(3854);
								match(MAX_FILES);
								setState(3855);
								match(EQUAL);
								setState(3856);
								((Alter_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(3858);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3857);
									match(COMMA);
									}
								}

								setState(3860);
								match(RESERVE_DISK_SPACE);
								setState(3861);
								match(EQUAL);
								setState(3862);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							}
							setState(3867);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(3868);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(3869);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(3870);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(3901);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,450,_ctx) ) {
				case 1:
					{
					setState(3875);
					match(WITH);
					setState(3876);
					match(LR_BRACKET);
					setState(3897);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==ON_FAILURE || _la==QUEUE_DELAY || _la==STATE || _la==COMMA) {
						{
						setState(3895);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
						case 1:
							{
							setState(3878);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3877);
								match(COMMA);
								}
							}

							setState(3880);
							match(QUEUE_DELAY);
							setState(3881);
							match(EQUAL);
							setState(3882);
							((Alter_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(3884);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3883);
								match(COMMA);
								}
							}

							setState(3886);
							match(ON_FAILURE);
							setState(3887);
							match(EQUAL);
							setState(3888);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 3:
							{
							setState(3890);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(3889);
								match(COMMA);
								}
							}

							setState(3892);
							match(STATE);
							setState(3893);
							match(EQUAL);
							setState(3894);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						}
						}
						setState(3899);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3900);
					match(RR_BRACKET);
					}
					break;
				}
				setState(3949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(3903);
					match(WHERE);
					setState(3947);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,457,_ctx) ) {
					case 1:
						{
						setState(3905);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3904);
							match(COMMA);
							}
						}

						{
						setState(3908);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3907);
							match(NOT);
							}
						}

						}
						setState(3910);
						((Alter_server_auditContext)_localctx).event_field_name = id();
						setState(3922);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
						case 1:
							{
							setState(3911);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(3912);
							match(LESS);
							setState(3913);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(3914);
							match(EXCLAMATION);
							setState(3915);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(3916);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(3917);
							match(GREATER);
							setState(3918);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(3919);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(3920);
							match(LESS);
							setState(3921);
							match(EQUAL);
							}
							break;
						}
						setState(3924);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(3927);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(3926);
							match(COMMA);
							}
						}

						setState(3929);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3931);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3930);
							match(NOT);
							}
						}

						setState(3944);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
						case 1:
							{
							setState(3933);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(3934);
							match(LESS);
							setState(3935);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(3936);
							match(EXCLAMATION);
							setState(3937);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(3938);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(3939);
							match(GREATER);
							setState(3940);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(3941);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(3942);
							match(LESS);
							setState(3943);
							match(EQUAL);
							}
							break;
						}
						setState(3946);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case REMOVE:
				{
				setState(3951);
				match(REMOVE);
				setState(3952);
				match(WHERE);
				}
				break;
			case MODIFY:
				{
				setState(3953);
				match(MODIFY);
				setState(3954);
				match(NAME);
				setState(3955);
				match(EQUAL);
				setState(3956);
				((Alter_server_auditContext)_localctx).new_audit_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_auditContext extends ParserRuleContext {
		public IdContext audit_name;
		public Token filepath;
		public Token max_rollover_files;
		public Token max_files;
		public Token queue_delay;
		public IdContext audit_guid;
		public IdContext event_field_name;
		public IdContext new_audit_name;
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode AUDIT() { return getToken(TSQLParser.AUDIT, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode REMOVE() { return getToken(TSQLParser.REMOVE, 0); }
		public TerminalNode WHERE() { return getToken(TSQLParser.WHERE, 0); }
		public TerminalNode MODIFY() { return getToken(TSQLParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode FILE() { return getToken(TSQLParser.FILE, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSQLParser.APPLICATION_LOG, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSQLParser.SECURITY_LOG, 0); }
		public List<TerminalNode> QUEUE_DELAY() { return getTokens(TSQLParser.QUEUE_DELAY); }
		public TerminalNode QUEUE_DELAY(int i) {
			return getToken(TSQLParser.QUEUE_DELAY, i);
		}
		public List<TerminalNode> ON_FAILURE() { return getTokens(TSQLParser.ON_FAILURE); }
		public TerminalNode ON_FAILURE(int i) {
			return getToken(TSQLParser.ON_FAILURE, i);
		}
		public List<TerminalNode> STATE() { return getTokens(TSQLParser.STATE); }
		public TerminalNode STATE(int i) {
			return getToken(TSQLParser.STATE, i);
		}
		public List<TerminalNode> AUDIT_GUID() { return getTokens(TSQLParser.AUDIT_GUID); }
		public TerminalNode AUDIT_GUID(int i) {
			return getToken(TSQLParser.AUDIT_GUID, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode AND() { return getToken(TSQLParser.AND, 0); }
		public TerminalNode OR() { return getToken(TSQLParser.OR, 0); }
		public List<TerminalNode> CONTINUE() { return getTokens(TSQLParser.CONTINUE); }
		public TerminalNode CONTINUE(int i) {
			return getToken(TSQLParser.CONTINUE, i);
		}
		public List<TerminalNode> SHUTDOWN() { return getTokens(TSQLParser.SHUTDOWN); }
		public TerminalNode SHUTDOWN(int i) {
			return getToken(TSQLParser.SHUTDOWN, i);
		}
		public List<TerminalNode> FAIL_OPERATION() { return getTokens(TSQLParser.FAIL_OPERATION); }
		public TerminalNode FAIL_OPERATION(int i) {
			return getToken(TSQLParser.FAIL_OPERATION, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSQLParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSQLParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSQLParser.OFF, i);
		}
		public TerminalNode GREATER() { return getToken(TSQLParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSQLParser.LESS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(TSQLParser.NOT, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSQLParser.EXCLAMATION, 0); }
		public List<TerminalNode> FILEPATH() { return getTokens(TSQLParser.FILEPATH); }
		public TerminalNode FILEPATH(int i) {
			return getToken(TSQLParser.FILEPATH, i);
		}
		public List<TerminalNode> MAXSIZE() { return getTokens(TSQLParser.MAXSIZE); }
		public TerminalNode MAXSIZE(int i) {
			return getToken(TSQLParser.MAXSIZE, i);
		}
		public List<TerminalNode> MAX_ROLLOVER_FILES() { return getTokens(TSQLParser.MAX_ROLLOVER_FILES); }
		public TerminalNode MAX_ROLLOVER_FILES(int i) {
			return getToken(TSQLParser.MAX_ROLLOVER_FILES, i);
		}
		public List<TerminalNode> MAX_FILES() { return getTokens(TSQLParser.MAX_FILES); }
		public TerminalNode MAX_FILES(int i) {
			return getToken(TSQLParser.MAX_FILES, i);
		}
		public List<TerminalNode> RESERVE_DISK_SPACE() { return getTokens(TSQLParser.RESERVE_DISK_SPACE); }
		public TerminalNode RESERVE_DISK_SPACE(int i) {
			return getToken(TSQLParser.RESERVE_DISK_SPACE, i);
		}
		public List<TerminalNode> UNLIMITED() { return getTokens(TSQLParser.UNLIMITED); }
		public TerminalNode UNLIMITED(int i) {
			return getToken(TSQLParser.UNLIMITED, i);
		}
		public List<TerminalNode> MB() { return getTokens(TSQLParser.MB); }
		public TerminalNode MB(int i) {
			return getToken(TSQLParser.MB, i);
		}
		public List<TerminalNode> GB() { return getTokens(TSQLParser.GB); }
		public TerminalNode GB(int i) {
			return getToken(TSQLParser.GB, i);
		}
		public List<TerminalNode> TB() { return getTokens(TSQLParser.TB); }
		public TerminalNode TB(int i) {
			return getToken(TSQLParser.TB, i);
		}
		public Create_server_auditContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_server_audit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_server_audit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_server_audit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_server_auditContext create_server_audit() throws RecognitionException {
		Create_server_auditContext _localctx = new Create_server_auditContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_create_server_audit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3959);
			match(SERVER);
			setState(3960);
			match(AUDIT);
			setState(3961);
			((Create_server_auditContext)_localctx).audit_name = id();
			setState(4099);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case ADD:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DENY:
			case DROP:
			case ELSE:
			case END:
			case EXECUTE:
			case FETCH:
			case GO:
			case GRANT:
			case IF:
			case INSERT:
			case MERGE:
			case OPEN:
			case PRINT:
			case RAISERROR:
			case RETURN:
			case REVERT:
			case REVOKE:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case TO:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case VALUES:
			case WAITFOR:
			case WHERE:
			case WHILE:
			case WITH:
			case DISABLE:
			case ENABLE:
			case GET:
			case LOCK:
			case MOVE:
			case RECEIVE:
			case SEND:
			case THROW:
			case LR_BRACKET:
			case SEMI:
				{
				setState(4009);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(3962);
					match(TO);
					setState(4007);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILE:
						{
						setState(3963);
						match(FILE);
						{
						setState(3964);
						match(LR_BRACKET);
						setState(4001);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==FILEPATH || ((((_la - 459)) & ~0x3f) == 0 && ((1L << (_la - 459)) & ((1L << (MAX_FILES - 459)) | (1L << (MAX_ROLLOVER_FILES - 459)) | (1L << (MAXSIZE - 459)))) != 0) || _la==RESERVE_DISK_SPACE || _la==COMMA) {
							{
							setState(3999);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,466,_ctx) ) {
							case 1:
								{
								setState(3966);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3965);
									match(COMMA);
									}
								}

								setState(3968);
								match(FILEPATH);
								setState(3969);
								match(EQUAL);
								setState(3970);
								((Create_server_auditContext)_localctx).filepath = match(STRING);
								}
								break;
							case 2:
								{
								setState(3972);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3971);
									match(COMMA);
									}
								}

								setState(3974);
								match(MAXSIZE);
								setState(3975);
								match(EQUAL);
								setState(3979);
								_errHandler.sync(this);
								switch (_input.LA(1)) {
								case DECIMAL:
									{
									setState(3976);
									match(DECIMAL);
									setState(3977);
									_la = _input.LA(1);
									if ( !(_la==GB || _la==MB || _la==TB) ) {
									_errHandler.recoverInline(this);
									}
									else {
										if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
										_errHandler.reportMatch(this);
										consume();
									}
									}
									break;
								case UNLIMITED:
									{
									setState(3978);
									match(UNLIMITED);
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								break;
							case 3:
								{
								setState(3982);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3981);
									match(COMMA);
									}
								}

								setState(3984);
								match(MAX_ROLLOVER_FILES);
								setState(3985);
								match(EQUAL);
								setState(3986);
								((Create_server_auditContext)_localctx).max_rollover_files = _input.LT(1);
								_la = _input.LA(1);
								if ( !(_la==UNLIMITED || _la==DECIMAL) ) {
									((Create_server_auditContext)_localctx).max_rollover_files = (Token)_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							case 4:
								{
								setState(3988);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3987);
									match(COMMA);
									}
								}

								setState(3990);
								match(MAX_FILES);
								setState(3991);
								match(EQUAL);
								setState(3992);
								((Create_server_auditContext)_localctx).max_files = match(DECIMAL);
								}
								break;
							case 5:
								{
								setState(3994);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(3993);
									match(COMMA);
									}
								}

								setState(3996);
								match(RESERVE_DISK_SPACE);
								setState(3997);
								match(EQUAL);
								setState(3998);
								_la = _input.LA(1);
								if ( !(_la==OFF || _la==ON) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
								break;
							}
							}
							setState(4003);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4004);
						match(RR_BRACKET);
						}
						}
						break;
					case APPLICATION_LOG:
						{
						setState(4005);
						match(APPLICATION_LOG);
						}
						break;
					case SECURITY_LOG:
						{
						setState(4006);
						match(SECURITY_LOG);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(4043);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
				case 1:
					{
					setState(4011);
					match(WITH);
					setState(4012);
					match(LR_BRACKET);
					setState(4039);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==AUDIT_GUID || _la==ON_FAILURE || _la==QUEUE_DELAY || _la==STATE || _la==COMMA) {
						{
						setState(4037);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
						case 1:
							{
							setState(4014);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4013);
								match(COMMA);
								}
							}

							setState(4016);
							match(QUEUE_DELAY);
							setState(4017);
							match(EQUAL);
							setState(4018);
							((Create_server_auditContext)_localctx).queue_delay = match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4020);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4019);
								match(COMMA);
								}
							}

							setState(4022);
							match(ON_FAILURE);
							setState(4023);
							match(EQUAL);
							setState(4024);
							_la = _input.LA(1);
							if ( !(_la==CONTINUE || _la==SHUTDOWN || _la==FAIL_OPERATION) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 3:
							{
							setState(4026);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4025);
								match(COMMA);
								}
							}

							setState(4028);
							match(STATE);
							setState(4029);
							match(EQUAL);
							setState(4030);
							_la = _input.LA(1);
							if ( !(_la==OFF || _la==ON) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
							break;
						case 4:
							{
							setState(4032);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4031);
								match(COMMA);
								}
							}

							setState(4034);
							match(AUDIT_GUID);
							setState(4035);
							match(EQUAL);
							setState(4036);
							((Create_server_auditContext)_localctx).audit_guid = id();
							}
							break;
						}
						}
						setState(4041);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(4042);
					match(RR_BRACKET);
					}
					break;
				}
				setState(4091);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4045);
					match(WHERE);
					setState(4089);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
					case 1:
						{
						setState(4047);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4046);
							match(COMMA);
							}
						}

						{
						setState(4050);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4049);
							match(NOT);
							}
						}

						}
						setState(4052);
						((Create_server_auditContext)_localctx).event_field_name = id();
						setState(4064);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
						case 1:
							{
							setState(4053);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4054);
							match(LESS);
							setState(4055);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4056);
							match(EXCLAMATION);
							setState(4057);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4058);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4059);
							match(GREATER);
							setState(4060);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4061);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4062);
							match(LESS);
							setState(4063);
							match(EQUAL);
							}
							break;
						}
						setState(4066);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4069);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4068);
							match(COMMA);
							}
						}

						setState(4071);
						_la = _input.LA(1);
						if ( !(_la==AND || _la==OR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4073);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(4072);
							match(NOT);
							}
						}

						setState(4086);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
						case 1:
							{
							setState(4075);
							match(EQUAL);
							}
							break;
						case 2:
							{
							{
							setState(4076);
							match(LESS);
							setState(4077);
							match(GREATER);
							}
							}
							break;
						case 3:
							{
							{
							setState(4078);
							match(EXCLAMATION);
							setState(4079);
							match(EQUAL);
							}
							}
							break;
						case 4:
							{
							setState(4080);
							match(GREATER);
							}
							break;
						case 5:
							{
							{
							setState(4081);
							match(GREATER);
							setState(4082);
							match(EQUAL);
							}
							}
							break;
						case 6:
							{
							setState(4083);
							match(LESS);
							}
							break;
						case 7:
							{
							setState(4084);
							match(LESS);
							setState(4085);
							match(EQUAL);
							}
							break;
						}
						setState(4088);
						_la = _input.LA(1);
						if ( !(_la==DECIMAL || _la==STRING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					}
				}

				}
				break;
			case REMOVE:
				{
				setState(4093);
				match(REMOVE);
				setState(4094);
				match(WHERE);
				}
				break;
			case MODIFY:
				{
				setState(4095);
				match(MODIFY);
				setState(4096);
				match(NAME);
				setState(4097);
				match(EQUAL);
				setState(4098);
				((Create_server_auditContext)_localctx).new_audit_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public List<TerminalNode> SERVER() { return getTokens(TSQLParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSQLParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(TSQLParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(TSQLParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(TSQLParser.SPECIFICATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSQLParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSQLParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSQLParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSQLParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSQLParser.DROP, i);
		}
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public Alter_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_server_audit_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_server_audit_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_audit_specificationContext alter_server_audit_specification() throws RecognitionException {
		Alter_server_audit_specificationContext _localctx = new Alter_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_alter_server_audit_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4101);
			match(SERVER);
			setState(4102);
			match(AUDIT);
			setState(4103);
			match(SPECIFICATION);
			setState(4104);
			((Alter_server_audit_specificationContext)_localctx).audit_specification_name = id();
			setState(4109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4105);
				match(FOR);
				setState(4106);
				match(SERVER);
				setState(4107);
				match(AUDIT);
				setState(4108);
				((Alter_server_audit_specificationContext)_localctx).audit_name = id();
				}
			}

			setState(4118);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4111);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4112);
					match(LR_BRACKET);
					setState(4113);
					((Alter_server_audit_specificationContext)_localctx).audit_action_group_name = id();
					setState(4114);
					match(RR_BRACKET);
					}
					} 
				}
				setState(4120);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			}
			setState(4127);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				setState(4121);
				match(WITH);
				setState(4122);
				match(LR_BRACKET);
				setState(4123);
				match(STATE);
				setState(4124);
				match(EQUAL);
				setState(4125);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4126);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_audit_specificationContext extends ParserRuleContext {
		public IdContext audit_specification_name;
		public IdContext audit_name;
		public IdContext audit_action_group_name;
		public List<TerminalNode> SERVER() { return getTokens(TSQLParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSQLParser.SERVER, i);
		}
		public List<TerminalNode> AUDIT() { return getTokens(TSQLParser.AUDIT); }
		public TerminalNode AUDIT(int i) {
			return getToken(TSQLParser.AUDIT, i);
		}
		public TerminalNode SPECIFICATION() { return getToken(TSQLParser.SPECIFICATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public List<TerminalNode> ADD() { return getTokens(TSQLParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSQLParser.ADD, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode STATE() { return getToken(TSQLParser.STATE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public Create_server_audit_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_audit_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_server_audit_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_server_audit_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_server_audit_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_server_audit_specificationContext create_server_audit_specification() throws RecognitionException {
		Create_server_audit_specificationContext _localctx = new Create_server_audit_specificationContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_create_server_audit_specification);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4129);
			match(SERVER);
			setState(4130);
			match(AUDIT);
			setState(4131);
			match(SPECIFICATION);
			setState(4132);
			((Create_server_audit_specificationContext)_localctx).audit_specification_name = id();
			setState(4137);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4133);
				match(FOR);
				setState(4134);
				match(SERVER);
				setState(4135);
				match(AUDIT);
				setState(4136);
				((Create_server_audit_specificationContext)_localctx).audit_name = id();
				}
			}

			setState(4146);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4139);
					match(ADD);
					setState(4140);
					match(LR_BRACKET);
					setState(4141);
					((Create_server_audit_specificationContext)_localctx).audit_action_group_name = id();
					setState(4142);
					match(RR_BRACKET);
					}
					} 
				}
				setState(4148);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			}
			setState(4155);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				{
				setState(4149);
				match(WITH);
				setState(4150);
				match(LR_BRACKET);
				setState(4151);
				match(STATE);
				setState(4152);
				match(EQUAL);
				setState(4153);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4154);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_configurationContext extends ParserRuleContext {
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode CONFIGURATION() { return getToken(TSQLParser.CONFIGURATION, 0); }
		public List<TerminalNode> SET() { return getTokens(TSQLParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(TSQLParser.SET, i);
		}
		public TerminalNode PROCESS() { return getToken(TSQLParser.PROCESS, 0); }
		public TerminalNode AFFINITY() { return getToken(TSQLParser.AFFINITY, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(TSQLParser.DIAGNOSTICS, 0); }
		public TerminalNode LOG() { return getToken(TSQLParser.LOG, 0); }
		public TerminalNode FAILOVER() { return getToken(TSQLParser.FAILOVER, 0); }
		public TerminalNode CLUSTER() { return getToken(TSQLParser.CLUSTER, 0); }
		public TerminalNode PROPERTY() { return getToken(TSQLParser.PROPERTY, 0); }
		public TerminalNode HADR() { return getToken(TSQLParser.HADR, 0); }
		public TerminalNode CONTEXT() { return getToken(TSQLParser.CONTEXT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode BUFFER() { return getToken(TSQLParser.BUFFER, 0); }
		public TerminalNode POOL() { return getToken(TSQLParser.POOL, 0); }
		public TerminalNode EXTENSION() { return getToken(TSQLParser.EXTENSION, 0); }
		public TerminalNode SOFTNUMA() { return getToken(TSQLParser.SOFTNUMA, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode LOCAL() { return getToken(TSQLParser.LOCAL, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode CPU() { return getToken(TSQLParser.CPU, 0); }
		public TerminalNode NUMANODE() { return getToken(TSQLParser.NUMANODE, 0); }
		public TerminalNode PATH() { return getToken(TSQLParser.PATH, 0); }
		public TerminalNode MAX_SIZE() { return getToken(TSQLParser.MAX_SIZE, 0); }
		public TerminalNode MAX_FILES() { return getToken(TSQLParser.MAX_FILES, 0); }
		public TerminalNode VERBOSELOGGING() { return getToken(TSQLParser.VERBOSELOGGING, 0); }
		public TerminalNode SQLDUMPERFLAGS() { return getToken(TSQLParser.SQLDUMPERFLAGS, 0); }
		public TerminalNode SQLDUMPERPATH() { return getToken(TSQLParser.SQLDUMPERPATH, 0); }
		public TerminalNode SQLDUMPERTIMEOUT() { return getToken(TSQLParser.SQLDUMPERTIMEOUT, 0); }
		public TerminalNode FAILURECONDITIONLEVEL() { return getToken(TSQLParser.FAILURECONDITIONLEVEL, 0); }
		public TerminalNode HEALTHCHECKTIMEOUT() { return getToken(TSQLParser.HEALTHCHECKTIMEOUT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode FILENAME() { return getToken(TSQLParser.FILENAME, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode SIZE() { return getToken(TSQLParser.SIZE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public TerminalNode KB() { return getToken(TSQLParser.KB, 0); }
		public TerminalNode MB() { return getToken(TSQLParser.MB, 0); }
		public TerminalNode GB() { return getToken(TSQLParser.GB, 0); }
		public TerminalNode AUTO() { return getToken(TSQLParser.AUTO, 0); }
		public List<TerminalNode> TO() { return getTokens(TSQLParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSQLParser.TO, i);
		}
		public Alter_server_configurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_configuration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_server_configuration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_server_configuration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_server_configuration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_configurationContext alter_server_configuration() throws RecognitionException {
		Alter_server_configurationContext _localctx = new Alter_server_configurationContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_alter_server_configuration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4157);
			match(SERVER);
			setState(4158);
			match(CONFIGURATION);
			setState(4159);
			match(SET);
			{
			setState(4265);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCESS:
				{
				setState(4160);
				match(PROCESS);
				setState(4161);
				match(AFFINITY);
				setState(4197);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CPU:
					{
					setState(4162);
					match(CPU);
					setState(4163);
					match(EQUAL);
					setState(4179);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case AUTO:
						{
						setState(4164);
						match(AUTO);
						}
						break;
					case DECIMAL:
					case COMMA:
						{
						setState(4175); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							setState(4175);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,494,_ctx) ) {
							case 1:
								{
								setState(4166);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4165);
									match(COMMA);
									}
								}

								setState(4168);
								match(DECIMAL);
								}
								break;
							case 2:
								{
								setState(4170);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==COMMA) {
									{
									setState(4169);
									match(COMMA);
									}
								}

								setState(4172);
								match(DECIMAL);
								setState(4173);
								match(TO);
								setState(4174);
								match(DECIMAL);
								}
								break;
							}
							}
							setState(4177); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==DECIMAL || _la==COMMA );
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case NUMANODE:
					{
					setState(4181);
					match(NUMANODE);
					setState(4182);
					match(EQUAL);
					setState(4193); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						setState(4193);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,499,_ctx) ) {
						case 1:
							{
							setState(4184);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4183);
								match(COMMA);
								}
							}

							setState(4186);
							match(DECIMAL);
							}
							break;
						case 2:
							{
							setState(4188);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(4187);
								match(COMMA);
								}
							}

							setState(4190);
							match(DECIMAL);
							setState(4191);
							match(TO);
							setState(4192);
							match(DECIMAL);
							}
							break;
						}
						}
						setState(4195); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DECIMAL || _la==COMMA );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DIAGNOSTICS:
				{
				setState(4199);
				match(DIAGNOSTICS);
				setState(4200);
				match(LOG);
				setState(4216);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(4201);
					match(ON);
					}
					break;
				case OFF:
					{
					setState(4202);
					match(OFF);
					}
					break;
				case PATH:
					{
					setState(4203);
					match(PATH);
					setState(4204);
					match(EQUAL);
					setState(4205);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case MAX_SIZE:
					{
					setState(4206);
					match(MAX_SIZE);
					setState(4207);
					match(EQUAL);
					setState(4211);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DECIMAL:
						{
						setState(4208);
						match(DECIMAL);
						setState(4209);
						match(MB);
						}
						break;
					case DEFAULT:
						{
						setState(4210);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case MAX_FILES:
					{
					setState(4213);
					match(MAX_FILES);
					setState(4214);
					match(EQUAL);
					setState(4215);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FAILOVER:
				{
				setState(4218);
				match(FAILOVER);
				setState(4219);
				match(CLUSTER);
				setState(4220);
				match(PROPERTY);
				setState(4238);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VERBOSELOGGING:
					{
					setState(4221);
					match(VERBOSELOGGING);
					setState(4222);
					match(EQUAL);
					setState(4223);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERFLAGS:
					{
					setState(4224);
					match(SQLDUMPERFLAGS);
					setState(4225);
					match(EQUAL);
					setState(4226);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERPATH:
					{
					setState(4227);
					match(SQLDUMPERPATH);
					setState(4228);
					match(EQUAL);
					setState(4229);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case SQLDUMPERTIMEOUT:
					{
					setState(4230);
					match(SQLDUMPERTIMEOUT);
					setState(4231);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case FAILURECONDITIONLEVEL:
					{
					setState(4232);
					match(FAILURECONDITIONLEVEL);
					setState(4233);
					match(EQUAL);
					setState(4234);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==STRING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case HEALTHCHECKTIMEOUT:
					{
					setState(4235);
					match(HEALTHCHECKTIMEOUT);
					setState(4236);
					match(EQUAL);
					setState(4237);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case HADR:
				{
				setState(4240);
				match(HADR);
				setState(4241);
				match(CLUSTER);
				setState(4242);
				match(CONTEXT);
				setState(4243);
				match(EQUAL);
				setState(4244);
				_la = _input.LA(1);
				if ( !(_la==LOCAL || _la==STRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case BUFFER:
				{
				setState(4245);
				match(BUFFER);
				setState(4246);
				match(POOL);
				setState(4247);
				match(EXTENSION);
				setState(4260);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(4248);
					match(ON);
					setState(4249);
					match(LR_BRACKET);
					setState(4250);
					match(FILENAME);
					setState(4251);
					match(EQUAL);
					setState(4252);
					match(STRING);
					setState(4253);
					match(COMMA);
					setState(4254);
					match(SIZE);
					setState(4255);
					match(EQUAL);
					setState(4256);
					match(DECIMAL);
					setState(4257);
					_la = _input.LA(1);
					if ( !(_la==GB || _la==KB || _la==MB) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4258);
					match(RR_BRACKET);
					}
					break;
				case OFF:
					{
					setState(4259);
					match(OFF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SET:
				{
				setState(4262);
				match(SET);
				setState(4263);
				match(SOFTNUMA);
				setState(4264);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_roleContext extends ParserRuleContext {
		public IdContext server_role_name;
		public IdContext server_principal;
		public IdContext new_server_role_name;
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSQLParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(TSQLParser.MEMBER, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public Alter_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_server_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_server_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_roleContext alter_server_role() throws RecognitionException {
		Alter_server_roleContext _localctx = new Alter_server_roleContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_alter_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4267);
			match(SERVER);
			setState(4268);
			match(ROLE);
			setState(4269);
			((Alter_server_roleContext)_localctx).server_role_name = id();
			setState(4277);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case DROP:
				{
				setState(4270);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4271);
				match(MEMBER);
				setState(4272);
				((Alter_server_roleContext)_localctx).server_principal = id();
				}
				break;
			case WITH:
				{
				setState(4273);
				match(WITH);
				setState(4274);
				match(NAME);
				setState(4275);
				match(EQUAL);
				setState(4276);
				((Alter_server_roleContext)_localctx).new_server_role_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_server_roleContext extends ParserRuleContext {
		public IdContext server_role;
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSQLParser.ROLE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public Create_server_roleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_server_role; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_server_role(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_server_role(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_server_role(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_server_roleContext create_server_role() throws RecognitionException {
		Create_server_roleContext _localctx = new Create_server_roleContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_create_server_role);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4279);
			match(SERVER);
			setState(4280);
			match(ROLE);
			setState(4281);
			((Create_server_roleContext)_localctx).server_role = id();
			setState(4284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4282);
				match(AUTHORIZATION);
				setState(4283);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_server_role_pdwContext extends ParserRuleContext {
		public IdContext server_role_name;
		public IdContext login;
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode ROLE() { return getToken(TSQLParser.ROLE, 0); }
		public TerminalNode MEMBER() { return getToken(TSQLParser.MEMBER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public Alter_server_role_pdwContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_server_role_pdw; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_server_role_pdw(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_server_role_pdw(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_server_role_pdw(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_server_role_pdwContext alter_server_role_pdw() throws RecognitionException {
		Alter_server_role_pdwContext _localctx = new Alter_server_role_pdwContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_alter_server_role_pdw);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4286);
			match(SERVER);
			setState(4287);
			match(ROLE);
			setState(4288);
			((Alter_server_role_pdwContext)_localctx).server_role_name = id();
			setState(4289);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4290);
			match(MEMBER);
			setState(4291);
			((Alter_server_role_pdwContext)_localctx).login = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_serviceContext extends ParserRuleContext {
		public IdContext modified_service_name;
		public IdContext modified_contract_name;
		public TerminalNode SERVICE() { return getToken(TSQLParser.SERVICE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(TSQLParser.QUEUE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<TerminalNode> ADD() { return getTokens(TSQLParser.ADD); }
		public TerminalNode ADD(int i) {
			return getToken(TSQLParser.ADD, i);
		}
		public List<TerminalNode> DROP() { return getTokens(TSQLParser.DROP); }
		public TerminalNode DROP(int i) {
			return getToken(TSQLParser.DROP, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Alter_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_service(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_service(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_serviceContext alter_service() throws RecognitionException {
		Alter_serviceContext _localctx = new Alter_serviceContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_alter_service);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4293);
			match(SERVICE);
			setState(4294);
			((Alter_serviceContext)_localctx).modified_service_name = id();
			setState(4298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(4295);
				match(ON);
				setState(4296);
				match(QUEUE);
				setState(4297);
				qualified_name();
				}
			}

			setState(4307);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4301);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4300);
						match(COMMA);
						}
					}

					setState(4303);
					_la = _input.LA(1);
					if ( !(_la==ADD || _la==DROP) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4304);
					((Alter_serviceContext)_localctx).modified_contract_name = id();
					}
					} 
				}
				setState(4309);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,511,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_serviceContext extends ParserRuleContext {
		public IdContext create_service_name;
		public TerminalNode SERVICE() { return getToken(TSQLParser.SERVICE, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode QUEUE() { return getToken(TSQLParser.QUEUE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<Id_or_defaultContext> id_or_default() {
			return getRuleContexts(Id_or_defaultContext.class);
		}
		public Id_or_defaultContext id_or_default(int i) {
			return getRuleContext(Id_or_defaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_serviceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_service; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_service(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_service(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_service(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_serviceContext create_service() throws RecognitionException {
		Create_serviceContext _localctx = new Create_serviceContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_create_service);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4310);
			match(SERVICE);
			setState(4311);
			((Create_serviceContext)_localctx).create_service_name = id();
			setState(4314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4312);
				match(AUTHORIZATION);
				setState(4313);
				id();
				}
			}

			setState(4316);
			match(ON);
			setState(4317);
			match(QUEUE);
			setState(4318);
			qualified_name();
			setState(4330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				{
				setState(4319);
				match(LR_BRACKET);
				setState(4324); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(4321);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4320);
						match(COMMA);
						}
					}

					setState(4323);
					id_or_default();
					}
					}
					setState(4326); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DEFAULT || _la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)) | (1L << (COMMA - 770)))) != 0) );
				setState(4328);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_service_master_keyContext extends ParserRuleContext {
		public Token acold_account_name;
		public Token old_password;
		public TerminalNode SERVICE() { return getToken(TSQLParser.SERVICE, 0); }
		public TerminalNode MASTER() { return getToken(TSQLParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode REGENERATE() { return getToken(TSQLParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(TSQLParser.OLD_ACCOUNT, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(TSQLParser.NEW_ACCOUNT, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode OLD_PASSWORD() { return getToken(TSQLParser.OLD_PASSWORD, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(TSQLParser.NEW_PASSWORD, 0); }
		public TerminalNode FORCE() { return getToken(TSQLParser.FORCE, 0); }
		public Alter_service_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_service_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_service_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_service_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_service_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_service_master_keyContext alter_service_master_key() throws RecognitionException {
		Alter_service_master_keyContext _localctx = new Alter_service_master_keyContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_alter_service_master_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4332);
			match(SERVICE);
			setState(4333);
			match(MASTER);
			setState(4334);
			match(KEY);
			setState(4347);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FORCE:
			case REGENERATE:
				{
				setState(4336);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE) {
					{
					setState(4335);
					match(FORCE);
					}
				}

				setState(4338);
				match(REGENERATE);
				}
				break;
			case WITH:
				{
				setState(4339);
				match(WITH);
				setState(4340);
				_la = _input.LA(1);
				if ( !(_la==NEW_ACCOUNT || _la==OLD_ACCOUNT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4341);
				match(EQUAL);
				setState(4342);
				((Alter_service_master_keyContext)_localctx).acold_account_name = match(STRING);
				setState(4343);
				match(COMMA);
				setState(4344);
				_la = _input.LA(1);
				if ( !(_la==NEW_PASSWORD || _la==OLD_PASSWORD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4345);
				match(EQUAL);
				setState(4346);
				((Alter_service_master_keyContext)_localctx).old_password = match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_symmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public IdContext certificate_name;
		public Token password;
		public IdContext symmetric_key_name;
		public IdContext Asym_key_name;
		public List<TerminalNode> SYMMETRIC() { return getTokens(TSQLParser.SYMMETRIC); }
		public TerminalNode SYMMETRIC(int i) {
			return getToken(TSQLParser.SYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSQLParser.KEY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Alter_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_symmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_symmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_symmetric_keyContext alter_symmetric_key() throws RecognitionException {
		Alter_symmetric_keyContext _localctx = new Alter_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_alter_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4349);
			match(SYMMETRIC);
			setState(4350);
			match(KEY);
			setState(4351);
			((Alter_symmetric_keyContext)_localctx).key_name = id();
			{
			setState(4352);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4353);
			match(ENCRYPTION);
			setState(4354);
			match(BY);
			setState(4366);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				{
				setState(4355);
				match(CERTIFICATE);
				setState(4356);
				((Alter_symmetric_keyContext)_localctx).certificate_name = id();
				}
				break;
			case PASSWORD:
				{
				setState(4357);
				match(PASSWORD);
				setState(4358);
				match(EQUAL);
				setState(4359);
				((Alter_symmetric_keyContext)_localctx).password = match(STRING);
				}
				break;
			case SYMMETRIC:
				{
				setState(4360);
				match(SYMMETRIC);
				setState(4361);
				match(KEY);
				setState(4362);
				((Alter_symmetric_keyContext)_localctx).symmetric_key_name = id();
				}
				break;
			case ASYMMETRIC:
				{
				setState(4363);
				match(ASYMMETRIC);
				setState(4364);
				match(KEY);
				setState(4365);
				((Alter_symmetric_keyContext)_localctx).Asym_key_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_symmetric_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public IdContext provider_name;
		public Token key_pass_phrase;
		public Token identity_phrase;
		public Token provider_key_name;
		public IdContext certificate_name;
		public Token password;
		public IdContext symmetric_key_name;
		public IdContext asym_key_name;
		public List<TerminalNode> SYMMETRIC() { return getTokens(TSQLParser.SYMMETRIC); }
		public TerminalNode SYMMETRIC(int i) {
			return getToken(TSQLParser.SYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSQLParser.KEY, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(TSQLParser.PROVIDER, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode KEY_SOURCE() { return getToken(TSQLParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSQLParser.ALGORITHM, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(TSQLParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSQLParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSQLParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode DES() { return getToken(TSQLParser.DES, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSQLParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSQLParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode RC2() { return getToken(TSQLParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSQLParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSQLParser.RC4_128, 0); }
		public TerminalNode DESX() { return getToken(TSQLParser.DESX, 0); }
		public TerminalNode AES_128() { return getToken(TSQLParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSQLParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSQLParser.AES_256, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSQLParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSQLParser.OPEN_EXISTING, 0); }
		public Create_symmetric_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_symmetric_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_symmetric_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_symmetric_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_symmetric_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_symmetric_keyContext create_symmetric_key() throws RecognitionException {
		Create_symmetric_keyContext _localctx = new Create_symmetric_keyContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_create_symmetric_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4368);
			match(SYMMETRIC);
			setState(4369);
			match(KEY);
			setState(4370);
			((Create_symmetric_keyContext)_localctx).key_name = id();
			setState(4373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4371);
				match(AUTHORIZATION);
				setState(4372);
				id();
				}
			}

			setState(4378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4375);
				match(FROM);
				setState(4376);
				match(PROVIDER);
				setState(4377);
				((Create_symmetric_keyContext)_localctx).provider_name = id();
				}
			}

			{
			setState(4380);
			match(WITH);
			setState(4413);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALGORITHM:
			case CREATION_DISPOSITION:
			case IDENTITY_VALUE:
			case KEY_SOURCE:
			case PROVIDER_KEY_NAME:
				{
				setState(4396);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case KEY_SOURCE:
					{
					setState(4381);
					match(KEY_SOURCE);
					setState(4382);
					match(EQUAL);
					setState(4383);
					((Create_symmetric_keyContext)_localctx).key_pass_phrase = match(STRING);
					}
					break;
				case ALGORITHM:
					{
					setState(4384);
					match(ALGORITHM);
					setState(4385);
					match(EQUAL);
					setState(4386);
					_la = _input.LA(1);
					if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (AES_128 - 201)) | (1L << (AES_192 - 201)) | (1L << (AES_256 - 201)))) != 0) || _la==DES || _la==DESX || ((((_la - 594)) & ~0x3f) == 0 && ((1L << (_la - 594)) & ((1L << (RC2 - 594)) | (1L << (RC4_128 - 594)) | (1L << (RC4 - 594)))) != 0) || _la==TRIPLE_DES_3KEY || _la==TRIPLE_DES) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case IDENTITY_VALUE:
					{
					setState(4387);
					match(IDENTITY_VALUE);
					setState(4388);
					match(EQUAL);
					setState(4389);
					((Create_symmetric_keyContext)_localctx).identity_phrase = match(STRING);
					}
					break;
				case PROVIDER_KEY_NAME:
					{
					setState(4390);
					match(PROVIDER_KEY_NAME);
					setState(4391);
					match(EQUAL);
					setState(4392);
					((Create_symmetric_keyContext)_localctx).provider_key_name = match(STRING);
					}
					break;
				case CREATION_DISPOSITION:
					{
					setState(4393);
					match(CREATION_DISPOSITION);
					setState(4394);
					match(EQUAL);
					setState(4395);
					_la = _input.LA(1);
					if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ENCRYPTION:
				{
				setState(4398);
				match(ENCRYPTION);
				setState(4399);
				match(BY);
				setState(4411);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CERTIFICATE:
					{
					setState(4400);
					match(CERTIFICATE);
					setState(4401);
					((Create_symmetric_keyContext)_localctx).certificate_name = id();
					}
					break;
				case PASSWORD:
					{
					setState(4402);
					match(PASSWORD);
					setState(4403);
					match(EQUAL);
					setState(4404);
					((Create_symmetric_keyContext)_localctx).password = match(STRING);
					}
					break;
				case SYMMETRIC:
					{
					setState(4405);
					match(SYMMETRIC);
					setState(4406);
					match(KEY);
					setState(4407);
					((Create_symmetric_keyContext)_localctx).symmetric_key_name = id();
					}
					break;
				case ASYMMETRIC:
					{
					setState(4408);
					match(ASYMMETRIC);
					setState(4409);
					match(KEY);
					setState(4410);
					((Create_symmetric_keyContext)_localctx).asym_key_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_synonymContext extends ParserRuleContext {
		public TerminalNode SYNONYM() { return getToken(TSQLParser.SYNONYM, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public Create_synonymContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_synonym; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_synonym(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_synonym(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_synonym(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_synonymContext create_synonym() throws RecognitionException {
		Create_synonymContext _localctx = new Create_synonymContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_create_synonym);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4415);
			match(SYNONYM);
			setState(4416);
			qualified_name();
			setState(4417);
			match(FOR);
			setState(4418);
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_userContext extends ParserRuleContext {
		public IdContext username;
		public IdContext newusername;
		public IdContext schema_name;
		public IdContext loginame;
		public Token lcid;
		public IdContext language_name_or_alias;
		public TerminalNode USER() { return getToken(TSQLParser.USER, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSQLParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSQLParser.NAME, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> DEFAULT_SCHEMA() { return getTokens(TSQLParser.DEFAULT_SCHEMA); }
		public TerminalNode DEFAULT_SCHEMA(int i) {
			return getToken(TSQLParser.DEFAULT_SCHEMA, i);
		}
		public List<TerminalNode> LOGIN() { return getTokens(TSQLParser.LOGIN); }
		public TerminalNode LOGIN(int i) {
			return getToken(TSQLParser.LOGIN, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSQLParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSQLParser.PASSWORD, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> DEFAULT_LANGUAGE() { return getTokens(TSQLParser.DEFAULT_LANGUAGE); }
		public TerminalNode DEFAULT_LANGUAGE(int i) {
			return getToken(TSQLParser.DEFAULT_LANGUAGE, i);
		}
		public List<TerminalNode> ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getTokens(TSQLParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS(int i) {
			return getToken(TSQLParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSQLParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSQLParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSQLParser.OFF, i);
		}
		public List<TerminalNode> NULL() { return getTokens(TSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(TSQLParser.NULL, i);
		}
		public List<TerminalNode> NONE() { return getTokens(TSQLParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(TSQLParser.NONE, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> OLD_PASSWORD() { return getTokens(TSQLParser.OLD_PASSWORD); }
		public TerminalNode OLD_PASSWORD(int i) {
			return getToken(TSQLParser.OLD_PASSWORD, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public Alter_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_userContext alter_user() throws RecognitionException {
		Alter_userContext _localctx = new Alter_userContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_alter_user);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4420);
			match(USER);
			setState(4421);
			((Alter_userContext)_localctx).username = id();
			setState(4422);
			match(WITH);
			setState(4473); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(4473);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,533,_ctx) ) {
				case 1:
					{
					setState(4424);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4423);
						match(COMMA);
						}
					}

					setState(4426);
					match(NAME);
					setState(4427);
					match(EQUAL);
					setState(4428);
					((Alter_userContext)_localctx).newusername = id();
					}
					break;
				case 2:
					{
					setState(4430);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4429);
						match(COMMA);
						}
					}

					setState(4432);
					match(DEFAULT_SCHEMA);
					setState(4433);
					match(EQUAL);
					setState(4436);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILLFACTOR:
					case PRECISION:
					case ABSENT:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AES:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_CONNECTIONS:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANONYMOUS:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPEND:
					case APPLICATION_LOG:
					case APPLICATION:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUDIT_GUID:
					case AUDIT:
					case AUTHENTICATION:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AUTO_UPDATE_STATISTICS:
					case AUTO:
					case AUTOGROW_ALL_FILES:
					case AUTOGROW_SINGLE_FILE:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case AVAILABILITY:
					case BACKUP_PRIORITY:
					case BEFORE:
					case BEGIN_DIALOG:
					case BINARY_BASE64:
					case BINDING:
					case BLOB_STORAGE:
					case BLOCK:
					case BLOCKING_HIERARCHY:
					case BLOCKSIZE:
					case BROKER_INSTANCE:
					case BROKER:
					case BUFFER:
					case BUFFERCOUNT:
					case BULK_LOGGED:
					case CACHE:
					case CALLED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CERTIFICATE:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHANGES:
					case CHANGETABLE:
					case CHAR:
					case CHARACTER:
					case CHECK_EXPIRATION:
					case CHECK_POLICY:
					case CHECKSUM:
					case CLASSIFIER_FUNCTION:
					case CLEANUP:
					case CLUSTER:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case COMPRESSION:
					case CONCAT_NULL_YIELDS_NULL:
					case CONCAT:
					case CONFIGURATION:
					case CONNECT:
					case CONTAINMENT:
					case CONTENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT_NAME:
					case CONTRACT:
					case CONTROL:
					case CONVERSATION:
					case COOKIE:
					case COPY_ONLY:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATA:
					case DATABASE_MIRRORING:
					case DATE_CORRELATION_OPTIMIZATION:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DATABASE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DEFAULT_SCHEMA:
					case DELAY:
					case DELAYED_DURABILITY:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIAGNOSTICS:
					case DIALOG:
					case DIFFERENTIAL:
					case DIRECTORY_NAME:
					case DISABLE_BROKER:
					case DISABLE:
					case DISABLED:
					case DOCUMENT:
					case DTC_SUPPORT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE_BROKER:
					case ENABLE:
					case ENABLED:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ENDPOINT:
					case ERROR_BROKER_CONVERSATIONS:
					case ERROR:
					case EVENT_RETENTION_MODE:
					case EVENT:
					case EXCLUSIVE:
					case EXECUTABLE_FILE:
					case EXECUTABLE:
					case EXPAND:
					case EXPIREDATE:
					case EXPIRY_DATE:
					case EXPLICIT:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILOVER:
					case FAILURE_CONDITION_LEVEL:
					case FAILURECONDITIONLEVEL:
					case FALSE:
					case FAN_IN:
					case FAST_FORWARD:
					case FAST:
					case FILE_SNAPSHOT:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM_ON:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case FORCE:
					case FORCED:
					case FORCESEEK:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GET:
					case GLOBAL:
					case GOVERNOR:
					case GROUP_MAX_REQUESTS:
					case HADR:
					case HASH:
					case HASHED:
					case HEALTH_CHECK_TIMEOUT:
					case HEALTHCHECKTIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IIF:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCLUDE:
					case INCREMENT:
					case INCREMENTAL:
					case INFINITE:
					case INIT:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSTEAD:
					case IO:
					case IP:
					case ISOLATION:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KERBEROS:
					case KEY_PATH:
					case KEY_SOURCE:
					case KEY_STORE_PROVIDER_NAME:
					case KEYS:
					case KEYSET:
					case LANGUAGE:
					case LAST:
					case LEVEL:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LIST:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LISTENER_URL:
					case LISTENER:
					case LOB_COMPACTION:
					case LOCAL_SERVICE_NAME:
					case LOCAL:
					case LOCATION:
					case LOCK_ESCALATION:
					case LOCK:
					case LOG:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MASTER:
					case MATCHED:
					case MATERIALIZED:
					case MAX_CPU_PERCENT:
					case MAX_DISPATCH_LATENCY:
					case MAX_DOP:
					case MAX_EVENT_SIZE:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_MEMORY:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAX_SIZE:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MAXTRANSFER:
					case MAXVALUE:
					case MB:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEDIUM:
					case MEMBER:
					case MEMORY_OPTIMIZED_DATA:
					case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
					case MEMORY_OPTIMIZED:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARD_SIZE:
					case MESSAGE_FORWARDING:
					case MESSAGE:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MINVALUE:
					case MIRROR_ADDRESS:
					case MIRROR:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case MUST_CHANGE:
					case NAME:
					case NCHAR:
					case NEGOTIATE:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEWNAME:
					case NEXT:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NO:
					case NODES:
					case NOEXPAND:
					case NOFORMAT:
					case NOINIT:
					case NON_TRANSACTED_ACCESS:
					case NONE:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOREWIND:
					case NOSKIP:
					case NOTIFICATION:
					case NOUNLOAD:
					case NOWAIT:
					case NTLM:
					case NUMANODE:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPENJSON:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARSE:
					case PARTIAL:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PASSWORD:
					case PATH:
					case PAUSE:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERMISSION_SET:
					case PERSIST_SAMPLE_PERSENT:
					case PERSISTED:
					case PERSISTENT_LOG_BUFFER:
					case PLATFORM:
					case POISON_MESSAGE_HANDLING:
					case POLICY:
					case POOL:
					case POPULATION:
					case PORT:
					case PRECEDING:
					case PREDICATE:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY_LEVEL:
					case PRIORITY:
					case PRIVATE_KEY:
					case PRIVATE:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROCESS:
					case PROFILE:
					case PROPERTY_DESCRIPTION:
					case PROPERTY_INT_ID:
					case PROPERTY_SET_GUID:
					case PROPERTY:
					case PROVIDER_KEY_NAME:
					case PROVIDER:
					case QUERYTRACEON:
					case QUEUE_DELAY:
					case QUEUE:
					case QUOTED_IDENTIFIER:
					case R_LETTER:
					case RANGE:
					case RAW:
					case RC2:
					case RC4_128:
					case RC4:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY_ROUTING_LIST:
					case READ_ONLY:
					case READ_WRITE_FILEGROUPS:
					case READ_WRITE:
					case READWRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case REGENERATE:
					case RELATED_CONVERSATION_GROUP:
					case RELATED_CONVERSATION:
					case RELATIVE:
					case REMOTE_SERVICE_NAME:
					case REMOTE:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case REQUIRED:
					case RESAMPLE:
					case RESERVE_DISK_SPACE:
					case RESET:
					case RESOURCE_MANAGER_LOCATION:
					case RESOURCE:
					case RESTART:
					case RESTRICTED_USER:
					case RESULT:
					case RESUME:
					case RETAINDAYS:
					case RETENTION:
					case RETURNS:
					case REWIND:
					case ROBUST:
					case ROLE:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROWGUID:
					case ROWS:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case RSA_512:
					case SAFE:
					case SAFETY:
					case SAMPLE:
					case SCHEDULER:
					case SCHEMABINDING:
					case SCHEME:
					case SCOPED:
					case SCROLL_LOCKS:
					case SCROLL:
					case SEARCH:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDARY:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SECURITY:
					case SEEDING_MODE:
					case SELECTIVE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SERVER:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SERVICE:
					case SESSION_TIMEOUT:
					case SESSION:
					case SETERROR:
					case SETS:
					case SHARE:
					case SHOWPLAN:
					case SID:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SINGLETON:
					case SIZE:
					case SKIP_KEYWORD:
					case SNAPSHOT:
					case SOFTNUMA:
					case SOURCE:
					case SPARSE:
					case SPATIAL_WINDOW_MAX_CELLS:
					case SPECIFICATION:
					case SPLIT:
					case SQL:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STANDBY:
					case START_DATE:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STATE:
					case STATIC:
					case STATISTICAL_SEMANTICS:
					case STATS:
					case STATUS:
					case STOP_ON_ERROR:
					case STOP:
					case STOPLIST:
					case STOPPED:
					case STRING_AGG:
					case SUBJECT:
					case SUPPORTED:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TAPE:
					case TARGET_RECOVERY_TIME:
					case TARGET:
					case TB:
					case TCP:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TORN_PAGE_DETECTION:
					case TRACK_CAUSALITY:
					case TRACK_COLUMNS_UPDATED:
					case TRANSFER:
					case TRANSFORM_NOISE_WORDS:
					case TRIM:
					case TRIPLE_DES_3KEY:
					case TRIPLE_DES:
					case TRUE:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE_WARNING:
					case TYPE:
					case UNBOUNDED:
					case UNCHECKED:
					case UNCOMMITTED:
					case UNDEFINED:
					case UNKNOWN:
					case UNLIMITED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VERBOSELOGGING:
					case VERSION:
					case VIEW_METADATA:
					case VIEWS:
					case VISIBILITY:
					case WAIT:
					case WELL_FORMED_XML:
					case WINDOWS:
					case WITHOUT_ARRAY_WRAPPER:
					case WITHOUT:
					case WITNESS:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XQUERY:
					case XSINIL:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(4434);
						((Alter_userContext)_localctx).schema_name = id();
						}
						break;
					case NULL:
						{
						setState(4435);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 3:
					{
					setState(4439);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4438);
						match(COMMA);
						}
					}

					setState(4441);
					match(LOGIN);
					setState(4442);
					match(EQUAL);
					setState(4443);
					((Alter_userContext)_localctx).loginame = id();
					}
					break;
				case 4:
					{
					setState(4445);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4444);
						match(COMMA);
						}
					}

					setState(4447);
					match(PASSWORD);
					setState(4448);
					match(EQUAL);
					setState(4449);
					match(STRING);
					setState(4453); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(4450);
						match(OLD_PASSWORD);
						setState(4451);
						match(EQUAL);
						setState(4452);
						match(STRING);
						}
						}
						setState(4455); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==OLD_PASSWORD );
					}
					break;
				case 5:
					{
					setState(4458);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4457);
						match(COMMA);
						}
					}

					setState(4460);
					match(DEFAULT_LANGUAGE);
					setState(4461);
					match(EQUAL);
					setState(4465);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
					case 1:
						{
						setState(4462);
						match(NONE);
						}
						break;
					case 2:
						{
						setState(4463);
						((Alter_userContext)_localctx).lcid = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(4464);
						((Alter_userContext)_localctx).language_name_or_alias = id();
						}
						break;
					}
					}
					break;
				case 6:
					{
					setState(4468);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4467);
						match(COMMA);
						}
					}

					setState(4470);
					match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
					setState(4471);
					match(EQUAL);
					setState(4472);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				setState(4475); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==ALLOW_ENCRYPTED_VALUE_MODIFICATIONS || _la==DEFAULT_LANGUAGE || _la==DEFAULT_SCHEMA || _la==LOGIN || _la==NAME || _la==PASSWORD || _la==COMMA );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_userContext extends ParserRuleContext {
		public IdContext user_name;
		public IdContext cert_or_asym_key_name;
		public TerminalNode USER() { return getToken(TSQLParser.USER, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public User_loginContext user_login() {
			return getRuleContext(User_loginContext.class,0);
		}
		public List<TerminalNode> FROM() { return getTokens(TSQLParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(TSQLParser.FROM, i);
		}
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode PROVIDER() { return getToken(TSQLParser.PROVIDER, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<User_optionContext> user_option() {
			return getRuleContexts(User_optionContext.class);
		}
		public User_optionContext user_option(int i) {
			return getRuleContext(User_optionContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_userContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_user; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_user(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_user(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_user(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_userContext create_user() throws RecognitionException {
		Create_userContext _localctx = new Create_userContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_create_user);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4477);
			match(USER);
			setState(4478);
			((Create_userContext)_localctx).user_name = id();
			setState(4480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				setState(4479);
				user_login();
				}
				break;
			}
			setState(4485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,536,_ctx) ) {
			case 1:
				{
				setState(4482);
				match(FROM);
				setState(4483);
				match(EXTERNAL);
				setState(4484);
				match(PROVIDER);
				}
				break;
			}
			setState(4496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				setState(4487);
				match(WITH);
				setState(4488);
				user_option();
				setState(4493);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4489);
					match(COMMA);
					setState(4490);
					user_option();
					}
					}
					setState(4495);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(4505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR || _la==FROM) {
				{
				setState(4498);
				_la = _input.LA(1);
				if ( !(_la==FOR || _la==FROM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4502);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CERTIFICATE:
					{
					setState(4499);
					match(CERTIFICATE);
					}
					break;
				case ASYMMETRIC:
					{
					setState(4500);
					match(ASYMMETRIC);
					setState(4501);
					match(KEY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4504);
				((Create_userContext)_localctx).cert_or_asym_key_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_loginContext extends ParserRuleContext {
		public TerminalNode LOGIN() { return getToken(TSQLParser.LOGIN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode WITHOUT() { return getToken(TSQLParser.WITHOUT, 0); }
		public User_loginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_login; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterUser_login(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitUser_login(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitUser_login(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_loginContext user_login() throws RecognitionException {
		User_loginContext _localctx = new User_loginContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_user_login);
		int _la;
		try {
			setState(4512);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
			case FROM:
				enterOuterAlt(_localctx, 1);
				{
				setState(4507);
				_la = _input.LA(1);
				if ( !(_la==FOR || _la==FROM) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4508);
				match(LOGIN);
				setState(4509);
				id();
				}
				break;
			case WITHOUT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4510);
				match(WITHOUT);
				setState(4511);
				match(LOGIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class User_optionContext extends ParserRuleContext {
		public IdContext schema_name;
		public IdContext language_name_or_alias;
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSQLParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSQLParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode SID() { return getToken(TSQLParser.SID, 0); }
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getToken(TSQLParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public User_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_user_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterUser_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitUser_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitUser_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final User_optionContext user_option() throws RecognitionException {
		User_optionContext _localctx = new User_optionContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_user_option);
		int _la;
		try {
			setState(4533);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT_SCHEMA:
				enterOuterAlt(_localctx, 1);
				{
				setState(4514);
				match(DEFAULT_SCHEMA);
				setState(4515);
				match(EQUAL);
				setState(4516);
				((User_optionContext)_localctx).schema_name = id();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4517);
				match(DEFAULT_LANGUAGE);
				setState(4518);
				match(EQUAL);
				setState(4522);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
				case 1:
					{
					setState(4519);
					match(NONE);
					}
					break;
				case 2:
					{
					setState(4520);
					match(DECIMAL);
					}
					break;
				case 3:
					{
					setState(4521);
					((User_optionContext)_localctx).language_name_or_alias = id();
					}
					break;
				}
				}
				break;
			case SID:
				enterOuterAlt(_localctx, 3);
				{
				setState(4524);
				match(SID);
				setState(4525);
				match(EQUAL);
				setState(4526);
				match(BINARY);
				}
				break;
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(4527);
				match(ALLOW_ENCRYPTED_VALUE_MODIFICATIONS);
				setState(4528);
				match(EQUAL);
				setState(4529);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 5);
				{
				setState(4530);
				match(PASSWORD);
				setState(4531);
				match(EQUAL);
				setState(4532);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_workload_groupContext extends ParserRuleContext {
		public IdContext workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public IdContext workload_group_pool_name;
		public TerminalNode WORKLOAD() { return getToken(TSQLParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSQLParser.GROUP, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(TSQLParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(TSQLParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(TSQLParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(TSQLParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(TSQLParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(TSQLParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(TSQLParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(TSQLParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(TSQLParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(TSQLParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(TSQLParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(TSQLParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(TSQLParser.GROUP_MAX_REQUESTS, i);
		}
		public List<TerminalNode> LOW() { return getTokens(TSQLParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(TSQLParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(TSQLParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(TSQLParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(TSQLParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(TSQLParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Alter_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_workload_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_workload_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_workload_groupContext alter_workload_group() throws RecognitionException {
		Alter_workload_groupContext _localctx = new Alter_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_alter_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4535);
			match(WORKLOAD);
			setState(4536);
			match(GROUP);
			setState(4537);
			((Alter_workload_groupContext)_localctx).workload_group_group_name = id();
			setState(4569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,548,_ctx) ) {
			case 1:
				{
				setState(4538);
				match(WITH);
				setState(4539);
				match(LR_BRACKET);
				setState(4564); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(4564);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,546,_ctx) ) {
					case 1:
						{
						setState(4540);
						match(IMPORTANCE);
						setState(4541);
						match(EQUAL);
						setState(4542);
						_la = _input.LA(1);
						if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4544);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4543);
							match(COMMA);
							}
						}

						setState(4546);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(4547);
						match(EQUAL);
						setState(4548);
						((Alter_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(4550);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4549);
							match(COMMA);
							}
						}

						setState(4552);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(4553);
						match(EQUAL);
						setState(4554);
						((Alter_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(4555);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(4556);
						match(EQUAL);
						setState(4557);
						((Alter_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(4558);
						match(MAX_DOP);
						setState(4559);
						match(EQUAL);
						setState(4560);
						((Alter_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(4561);
						match(GROUP_MAX_REQUESTS);
						setState(4562);
						match(EQUAL);
						setState(4563);
						((Alter_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(4566); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==GROUP_MAX_REQUESTS || _la==IMPORTANCE || _la==MAX_DOP || ((((_la - 619)) & ~0x3f) == 0 && ((1L << (_la - 619)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 619)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 619)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 619)))) != 0) || _la==COMMA );
				setState(4568);
				match(RR_BRACKET);
				}
				break;
			}
			setState(4573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4571);
				match(USING);
				setState(4572);
				((Alter_workload_groupContext)_localctx).workload_group_pool_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_workload_groupContext extends ParserRuleContext {
		public IdContext workload_group_group_name;
		public Token request_max_memory_grant;
		public Token request_max_cpu_time_sec;
		public Token request_memory_grant_timeout_sec;
		public Token max_dop;
		public Token group_max_requests;
		public IdContext workload_group_pool_name;
		public IdContext external_pool_name;
		public TerminalNode WORKLOAD() { return getToken(TSQLParser.WORKLOAD, 0); }
		public TerminalNode GROUP() { return getToken(TSQLParser.GROUP, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(TSQLParser.USING, 0); }
		public List<TerminalNode> IMPORTANCE() { return getTokens(TSQLParser.IMPORTANCE); }
		public TerminalNode IMPORTANCE(int i) {
			return getToken(TSQLParser.IMPORTANCE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getTokens(TSQLParser.REQUEST_MAX_MEMORY_GRANT_PERCENT); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT(int i) {
			return getToken(TSQLParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, i);
		}
		public List<TerminalNode> REQUEST_MAX_CPU_TIME_SEC() { return getTokens(TSQLParser.REQUEST_MAX_CPU_TIME_SEC); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC(int i) {
			return getToken(TSQLParser.REQUEST_MAX_CPU_TIME_SEC, i);
		}
		public List<TerminalNode> REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getTokens(TSQLParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC(int i) {
			return getToken(TSQLParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, i);
		}
		public List<TerminalNode> MAX_DOP() { return getTokens(TSQLParser.MAX_DOP); }
		public TerminalNode MAX_DOP(int i) {
			return getToken(TSQLParser.MAX_DOP, i);
		}
		public List<TerminalNode> GROUP_MAX_REQUESTS() { return getTokens(TSQLParser.GROUP_MAX_REQUESTS); }
		public TerminalNode GROUP_MAX_REQUESTS(int i) {
			return getToken(TSQLParser.GROUP_MAX_REQUESTS, i);
		}
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public List<TerminalNode> LOW() { return getTokens(TSQLParser.LOW); }
		public TerminalNode LOW(int i) {
			return getToken(TSQLParser.LOW, i);
		}
		public List<TerminalNode> MEDIUM() { return getTokens(TSQLParser.MEDIUM); }
		public TerminalNode MEDIUM(int i) {
			return getToken(TSQLParser.MEDIUM, i);
		}
		public List<TerminalNode> HIGH() { return getTokens(TSQLParser.HIGH); }
		public TerminalNode HIGH(int i) {
			return getToken(TSQLParser.HIGH, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_workload_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_workload_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_workload_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_workload_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_workload_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_workload_groupContext create_workload_group() throws RecognitionException {
		Create_workload_groupContext _localctx = new Create_workload_groupContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_create_workload_group);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4575);
			match(WORKLOAD);
			setState(4576);
			match(GROUP);
			setState(4577);
			((Create_workload_groupContext)_localctx).workload_group_group_name = id();
			setState(4609);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,554,_ctx) ) {
			case 1:
				{
				setState(4578);
				match(WITH);
				setState(4579);
				match(LR_BRACKET);
				setState(4604); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(4604);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
					case 1:
						{
						setState(4580);
						match(IMPORTANCE);
						setState(4581);
						match(EQUAL);
						setState(4582);
						_la = _input.LA(1);
						if ( !(_la==HIGH || _la==LOW || _la==MEDIUM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 2:
						{
						setState(4584);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4583);
							match(COMMA);
							}
						}

						setState(4586);
						match(REQUEST_MAX_MEMORY_GRANT_PERCENT);
						setState(4587);
						match(EQUAL);
						setState(4588);
						((Create_workload_groupContext)_localctx).request_max_memory_grant = match(DECIMAL);
						}
						break;
					case 3:
						{
						setState(4590);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4589);
							match(COMMA);
							}
						}

						setState(4592);
						match(REQUEST_MAX_CPU_TIME_SEC);
						setState(4593);
						match(EQUAL);
						setState(4594);
						((Create_workload_groupContext)_localctx).request_max_cpu_time_sec = match(DECIMAL);
						}
						break;
					case 4:
						{
						setState(4595);
						match(REQUEST_MEMORY_GRANT_TIMEOUT_SEC);
						setState(4596);
						match(EQUAL);
						setState(4597);
						((Create_workload_groupContext)_localctx).request_memory_grant_timeout_sec = match(DECIMAL);
						}
						break;
					case 5:
						{
						setState(4598);
						match(MAX_DOP);
						setState(4599);
						match(EQUAL);
						setState(4600);
						((Create_workload_groupContext)_localctx).max_dop = match(DECIMAL);
						}
						break;
					case 6:
						{
						setState(4601);
						match(GROUP_MAX_REQUESTS);
						setState(4602);
						match(EQUAL);
						setState(4603);
						((Create_workload_groupContext)_localctx).group_max_requests = match(DECIMAL);
						}
						break;
					}
					}
					setState(4606); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==GROUP_MAX_REQUESTS || _la==IMPORTANCE || _la==MAX_DOP || ((((_la - 619)) & ~0x3f) == 0 && ((1L << (_la - 619)) & ((1L << (REQUEST_MAX_CPU_TIME_SEC - 619)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 619)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 619)))) != 0) || _la==COMMA );
				setState(4608);
				match(RR_BRACKET);
				}
				break;
			}
			setState(4622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4611);
				match(USING);
				setState(4613);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
				case 1:
					{
					setState(4612);
					((Create_workload_groupContext)_localctx).workload_group_pool_name = id();
					}
					break;
				}
				setState(4620);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL || _la==COMMA) {
					{
					setState(4616);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4615);
						match(COMMA);
						}
					}

					setState(4618);
					match(EXTERNAL);
					setState(4619);
					((Create_workload_groupContext)_localctx).external_pool_name = id();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_xml_schema_collectionContext extends ParserRuleContext {
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(TSQLParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSQLParser.COLLECTION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public String_id_local_idContext string_id_local_id() {
			return getRuleContext(String_id_local_idContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public Create_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_xml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_xml_schema_collection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_xml_schema_collection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_xml_schema_collectionContext create_xml_schema_collection() throws RecognitionException {
		Create_xml_schema_collectionContext _localctx = new Create_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_create_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4624);
			match(XML);
			setState(4625);
			match(SCHEMA);
			setState(4626);
			match(COLLECTION);
			setState(4630);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				{
				setState(4627);
				id();
				setState(4628);
				match(DOT);
				}
				break;
			}
			setState(4632);
			id();
			setState(4633);
			match(AS);
			setState(4634);
			string_id_local_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_xml_schema_collectionContext extends ParserRuleContext {
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode SCHEMA() { return getToken(TSQLParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSQLParser.COLLECTION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public String_id_local_idContext string_id_local_id() {
			return getRuleContext(String_id_local_idContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public Alter_xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_xml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_xml_schema_collection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_xml_schema_collection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_xml_schema_collectionContext alter_xml_schema_collection() throws RecognitionException {
		Alter_xml_schema_collectionContext _localctx = new Alter_xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_alter_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4636);
			match(XML);
			setState(4637);
			match(SCHEMA);
			setState(4638);
			match(COLLECTION);
			setState(4642);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
			case 1:
				{
				setState(4639);
				id();
				setState(4640);
				match(DOT);
				}
				break;
			}
			setState(4644);
			id();
			setState(4645);
			match(ADD);
			setState(4646);
			string_id_local_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public IdContext filegroup;
		public TerminalNode QUEUE() { return getToken(TSQLParser.QUEUE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public Create_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_queue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_queue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_queueContext create_queue() throws RecognitionException {
		Create_queueContext _localctx = new Create_queueContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_create_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4648);
			match(QUEUE);
			setState(4651);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,561,_ctx) ) {
			case 1:
				{
				setState(4649);
				qualified_name();
				}
				break;
			case 2:
				{
				setState(4650);
				((Create_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(4654);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
			case 1:
				{
				setState(4653);
				queue_settings();
				}
				break;
			}
			setState(4659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
				{
				setState(4656);
				match(ON);
				setState(4657);
				((Create_queueContext)_localctx).filegroup = id();
				}
				break;
			case DEFAULT:
				{
				setState(4658);
				match(DEFAULT);
				}
				break;
			case EOF:
			case ADD:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DENY:
			case DROP:
			case ELSE:
			case END:
			case EXECUTE:
			case FETCH:
			case GO:
			case GRANT:
			case IF:
			case INSERT:
			case MERGE:
			case OPEN:
			case PRINT:
			case RAISERROR:
			case RETURN:
			case REVERT:
			case REVOKE:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case VALUES:
			case WAITFOR:
			case WHILE:
			case WITH:
			case DISABLE:
			case ENABLE:
			case GET:
			case LOCK:
			case MOVE:
			case RECEIVE:
			case SEND:
			case THROW:
			case LR_BRACKET:
			case SEMI:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_settingsContext extends ParserRuleContext {
		public Token max_readers;
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> STATUS() { return getTokens(TSQLParser.STATUS); }
		public TerminalNode STATUS(int i) {
			return getToken(TSQLParser.STATUS, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode RETENTION() { return getToken(TSQLParser.RETENTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(TSQLParser.ACTIVATION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(TSQLParser.POISON_MESSAGE_HANDLING, 0); }
		public List<TerminalNode> ON() { return getTokens(TSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSQLParser.ON, i);
		}
		public List<TerminalNode> OFF() { return getTokens(TSQLParser.OFF); }
		public TerminalNode OFF(int i) {
			return getToken(TSQLParser.OFF, i);
		}
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode PROCEDURE_NAME() { return getToken(TSQLParser.PROCEDURE_NAME, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode MAX_QUEUE_READERS() { return getToken(TSQLParser.MAX_QUEUE_READERS, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public Queue_settingsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_settings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterQueue_settings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitQueue_settings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitQueue_settings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_settingsContext queue_settings() throws RecognitionException {
		Queue_settingsContext _localctx = new Queue_settingsContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_queue_settings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4661);
			match(WITH);
			setState(4668);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATUS) {
				{
				setState(4662);
				match(STATUS);
				setState(4663);
				match(EQUAL);
				setState(4664);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4665);
					match(COMMA);
					}
				}

				}
			}

			setState(4676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETENTION) {
				{
				setState(4670);
				match(RETENTION);
				setState(4671);
				match(EQUAL);
				setState(4672);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4674);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4673);
					match(COMMA);
					}
				}

				}
			}

			setState(4717);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ACTIVATION) {
				{
				setState(4678);
				match(ACTIVATION);
				setState(4679);
				match(LR_BRACKET);
				setState(4711);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXECUTE:
				case MAX_QUEUE_READERS:
				case PROCEDURE_NAME:
				case STATUS:
				case RR_BRACKET:
					{
					setState(4686);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STATUS) {
						{
						setState(4680);
						match(STATUS);
						setState(4681);
						match(EQUAL);
						setState(4682);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(4684);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4683);
							match(COMMA);
							}
						}

						}
					}

					setState(4694);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PROCEDURE_NAME) {
						{
						setState(4688);
						match(PROCEDURE_NAME);
						setState(4689);
						match(EQUAL);
						setState(4690);
						qualified_name();
						setState(4692);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4691);
							match(COMMA);
							}
						}

						}
					}

					setState(4702);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MAX_QUEUE_READERS) {
						{
						setState(4696);
						match(MAX_QUEUE_READERS);
						setState(4697);
						match(EQUAL);
						setState(4698);
						((Queue_settingsContext)_localctx).max_readers = match(DECIMAL);
						setState(4700);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4699);
							match(COMMA);
							}
						}

						}
					}

					setState(4708);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==EXECUTE) {
						{
						setState(4704);
						execute_clause();
						setState(4706);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(4705);
							match(COMMA);
							}
						}

						}
					}

					}
					break;
				case DROP:
					{
					setState(4710);
					match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4713);
				match(RR_BRACKET);
				setState(4715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4714);
					match(COMMA);
					}
				}

				}
			}

			setState(4726);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==POISON_MESSAGE_HANDLING) {
				{
				setState(4719);
				match(POISON_MESSAGE_HANDLING);
				setState(4720);
				match(LR_BRACKET);
				{
				setState(4721);
				match(STATUS);
				setState(4722);
				match(EQUAL);
				setState(4723);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				setState(4725);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_queueContext extends ParserRuleContext {
		public IdContext queue_name;
		public TerminalNode QUEUE() { return getToken(TSQLParser.QUEUE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Queue_settingsContext queue_settings() {
			return getRuleContext(Queue_settingsContext.class,0);
		}
		public Queue_actionContext queue_action() {
			return getRuleContext(Queue_actionContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alter_queueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_queue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_queue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_queue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_queue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_queueContext alter_queue() throws RecognitionException {
		Alter_queueContext _localctx = new Alter_queueContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_alter_queue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4728);
			match(QUEUE);
			setState(4731);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
			case 1:
				{
				setState(4729);
				qualified_name();
				}
				break;
			case 2:
				{
				setState(4730);
				((Alter_queueContext)_localctx).queue_name = id();
				}
				break;
			}
			setState(4735);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITH:
				{
				setState(4733);
				queue_settings();
				}
				break;
			case MOVE:
			case REBUILD:
			case REORGANIZE:
				{
				setState(4734);
				queue_action();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_actionContext extends ParserRuleContext {
		public TerminalNode REBUILD() { return getToken(TSQLParser.REBUILD, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Queue_rebuild_optionsContext queue_rebuild_options() {
			return getRuleContext(Queue_rebuild_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSQLParser.REORGANIZE, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(TSQLParser.LOB_COMPACTION, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode MOVE() { return getToken(TSQLParser.MOVE, 0); }
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public Id_or_defaultContext id_or_default() {
			return getRuleContext(Id_or_defaultContext.class,0);
		}
		public Queue_actionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterQueue_action(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitQueue_action(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitQueue_action(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_actionContext queue_action() throws RecognitionException {
		Queue_actionContext _localctx = new Queue_actionContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_queue_action);
		int _la;
		try {
			setState(4755);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REBUILD:
				enterOuterAlt(_localctx, 1);
				{
				setState(4737);
				match(REBUILD);
				setState(4743);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,582,_ctx) ) {
				case 1:
					{
					setState(4738);
					match(WITH);
					setState(4739);
					match(LR_BRACKET);
					setState(4740);
					queue_rebuild_options();
					setState(4741);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case REORGANIZE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4745);
				match(REORGANIZE);
				setState(4750);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,583,_ctx) ) {
				case 1:
					{
					setState(4746);
					match(WITH);
					setState(4747);
					match(LOB_COMPACTION);
					setState(4748);
					match(EQUAL);
					setState(4749);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				}
				break;
			case MOVE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4752);
				match(MOVE);
				setState(4753);
				match(TO);
				setState(4754);
				id_or_default();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Queue_rebuild_optionsContext extends ParserRuleContext {
		public TerminalNode MAXDOP() { return getToken(TSQLParser.MAXDOP, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public Queue_rebuild_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queue_rebuild_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterQueue_rebuild_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitQueue_rebuild_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitQueue_rebuild_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Queue_rebuild_optionsContext queue_rebuild_options() throws RecognitionException {
		Queue_rebuild_optionsContext _localctx = new Queue_rebuild_optionsContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_queue_rebuild_options);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4757);
			match(MAXDOP);
			setState(4758);
			match(EQUAL);
			setState(4759);
			match(DECIMAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_contractContext extends ParserRuleContext {
		public IdContext message_type_name;
		public TerminalNode CONTRACT() { return getToken(TSQLParser.CONTRACT, 0); }
		public Id_or_expressionContext id_or_expression() {
			return getRuleContext(Id_or_expressionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> SENT() { return getTokens(TSQLParser.SENT); }
		public TerminalNode SENT(int i) {
			return getToken(TSQLParser.SENT, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSQLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSQLParser.BY, i);
		}
		public List<TerminalNode> INITIATOR() { return getTokens(TSQLParser.INITIATOR); }
		public TerminalNode INITIATOR(int i) {
			return getToken(TSQLParser.INITIATOR, i);
		}
		public List<TerminalNode> TARGET() { return getTokens(TSQLParser.TARGET); }
		public TerminalNode TARGET(int i) {
			return getToken(TSQLParser.TARGET, i);
		}
		public List<TerminalNode> ANY() { return getTokens(TSQLParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(TSQLParser.ANY, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(TSQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(TSQLParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_contractContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_contract; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_contract(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_contract(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_contract(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_contractContext create_contract() throws RecognitionException {
		Create_contractContext _localctx = new Create_contractContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_create_contract);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4761);
			match(CONTRACT);
			setState(4762);
			id_or_expression();
			setState(4765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4763);
				match(AUTHORIZATION);
				setState(4764);
				id();
				}
			}

			setState(4767);
			match(LR_BRACKET);
			setState(4778); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4770);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(4768);
					((Create_contractContext)_localctx).message_type_name = id();
					}
					break;
				case DEFAULT:
					{
					setState(4769);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4772);
				match(SENT);
				setState(4773);
				match(BY);
				setState(4774);
				_la = _input.LA(1);
				if ( !(_la==ANY || _la==INITIATOR || _la==TARGET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4776);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4775);
					match(COMMA);
					}
				}

				}
				}
				setState(4780); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DEFAULT || _la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)))) != 0) );
			setState(4782);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conversation_statementContext extends ParserRuleContext {
		public Begin_conversation_timerContext begin_conversation_timer() {
			return getRuleContext(Begin_conversation_timerContext.class,0);
		}
		public Begin_conversation_dialogContext begin_conversation_dialog() {
			return getRuleContext(Begin_conversation_dialogContext.class,0);
		}
		public End_conversationContext end_conversation() {
			return getRuleContext(End_conversationContext.class,0);
		}
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public Send_conversationContext send_conversation() {
			return getRuleContext(Send_conversationContext.class,0);
		}
		public Waitfor_conversationContext waitfor_conversation() {
			return getRuleContext(Waitfor_conversationContext.class,0);
		}
		public Move_conversationContext move_conversation() {
			return getRuleContext(Move_conversationContext.class,0);
		}
		public Conversation_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conversation_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterConversation_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitConversation_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitConversation_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conversation_statementContext conversation_statement() throws RecognitionException {
		Conversation_statementContext _localctx = new Conversation_statementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_conversation_statement);
		try {
			setState(4791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,589,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4784);
				begin_conversation_timer();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4785);
				begin_conversation_dialog();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4786);
				end_conversation();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4787);
				get_conversation();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4788);
				send_conversation();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4789);
				waitfor_conversation();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4790);
				move_conversation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_message_typeContext extends ParserRuleContext {
		public TerminalNode MESSAGE() { return getToken(TSQLParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode VALIDATION() { return getToken(TSQLParser.VALIDATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public TerminalNode EMPTY() { return getToken(TSQLParser.EMPTY, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSQLParser.WELL_FORMED_XML, 0); }
		public TerminalNode VALID_XML() { return getToken(TSQLParser.VALID_XML, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(TSQLParser.SCHEMA, 0); }
		public TerminalNode COLLECTION() { return getToken(TSQLParser.COLLECTION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public Create_message_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_message_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_message_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_message_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_message_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_message_typeContext create_message_type() throws RecognitionException {
		Create_message_typeContext _localctx = new Create_message_typeContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_create_message_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4793);
			match(MESSAGE);
			setState(4794);
			match(TYPE);
			setState(4795);
			id();
			setState(4798);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4796);
				match(AUTHORIZATION);
				setState(4797);
				id();
				}
			}

			setState(4800);
			match(VALIDATION);
			setState(4801);
			match(EQUAL);
			setState(4810);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NONE:
				{
				setState(4802);
				match(NONE);
				}
				break;
			case EMPTY:
				{
				setState(4803);
				match(EMPTY);
				}
				break;
			case WELL_FORMED_XML:
				{
				setState(4804);
				match(WELL_FORMED_XML);
				}
				break;
			case VALID_XML:
				{
				setState(4805);
				match(VALID_XML);
				setState(4806);
				match(WITH);
				setState(4807);
				match(SCHEMA);
				setState(4808);
				match(COLLECTION);
				setState(4809);
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(TSQLParser.MERGE, 0); }
		public TerminalNode USING() { return getToken(TSQLParser.USING, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public TerminalNode SEMI() { return getToken(TSQLParser.SEMI, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSQLParser.TOP, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode INTO() { return getToken(TSQLParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> WHEN() { return getTokens(TSQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(TSQLParser.WHEN, i);
		}
		public List<TerminalNode> MATCHED() { return getTokens(TSQLParser.MATCHED); }
		public TerminalNode MATCHED(int i) {
			return getToken(TSQLParser.MATCHED, i);
		}
		public List<TerminalNode> THEN() { return getTokens(TSQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(TSQLParser.THEN, i);
		}
		public List<Merge_matchedContext> merge_matched() {
			return getRuleContexts(Merge_matchedContext.class);
		}
		public Merge_matchedContext merge_matched(int i) {
			return getRuleContext(Merge_matchedContext.class,i);
		}
		public List<TerminalNode> NOT() { return getTokens(TSQLParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(TSQLParser.NOT, i);
		}
		public Merge_not_matchedContext merge_not_matched() {
			return getRuleContext(Merge_not_matchedContext.class,0);
		}
		public List<TerminalNode> BY() { return getTokens(TSQLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSQLParser.BY, i);
		}
		public List<TerminalNode> SOURCE() { return getTokens(TSQLParser.SOURCE); }
		public TerminalNode SOURCE(int i) {
			return getToken(TSQLParser.SOURCE, i);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(TSQLParser.PERCENT, 0); }
		public List<TerminalNode> AND() { return getTokens(TSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSQLParser.AND, i);
		}
		public TerminalNode TARGET() { return getToken(TSQLParser.TARGET, 0); }
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_merge_statement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4813);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4812);
				with_expression();
				}
			}

			setState(4815);
			match(MERGE);
			setState(4823);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(4816);
				match(TOP);
				setState(4817);
				match(LR_BRACKET);
				setState(4818);
				expression(0);
				setState(4819);
				match(RR_BRACKET);
				setState(4821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(4820);
					match(PERCENT);
					}
				}

				}
			}

			setState(4826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(4825);
				match(INTO);
				}
			}

			setState(4830);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(4828);
				qualified_name();
				}
				break;
			case LOCAL_ID:
				{
				setState(4829);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4832);
				insert_with_table_hints();
				}
			}

			setState(4836);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,598,_ctx) ) {
			case 1:
				{
				setState(4835);
				as_table_alias();
				}
				break;
			}
			setState(4838);
			match(USING);
			setState(4839);
			from_item(0);
			setState(4844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4840);
				match(COMMA);
				setState(4841);
				from_item(0);
				}
				}
				setState(4846);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4847);
			match(ON);
			setState(4848);
			search_condition();
			setState(4859);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,601,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4849);
					match(WHEN);
					setState(4850);
					match(MATCHED);
					setState(4853);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AND) {
						{
						setState(4851);
						match(AND);
						setState(4852);
						search_condition();
						}
					}

					setState(4855);
					match(THEN);
					setState(4856);
					merge_matched();
					}
					} 
				}
				setState(4861);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,601,_ctx);
			}
			setState(4875);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,604,_ctx) ) {
			case 1:
				{
				setState(4862);
				match(WHEN);
				setState(4863);
				match(NOT);
				setState(4864);
				match(MATCHED);
				setState(4867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(4865);
					match(BY);
					setState(4866);
					match(TARGET);
					}
				}

				setState(4871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(4869);
					match(AND);
					setState(4870);
					search_condition();
					}
				}

				setState(4873);
				match(THEN);
				setState(4874);
				merge_not_matched();
				}
				break;
			}
			setState(4890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHEN) {
				{
				{
				setState(4877);
				match(WHEN);
				setState(4878);
				match(NOT);
				setState(4879);
				match(MATCHED);
				setState(4880);
				match(BY);
				setState(4881);
				match(SOURCE);
				setState(4884);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(4882);
					match(AND);
					setState(4883);
					search_condition();
					}
				}

				setState(4886);
				match(THEN);
				setState(4887);
				merge_matched();
				}
				}
				setState(4892);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4894);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(4893);
				output_clause();
				}
			}

			setState(4897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(4896);
				option_clause();
				}
			}

			setState(4899);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_matchedContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(TSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode DELETE() { return getToken(TSQLParser.DELETE, 0); }
		public Merge_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterMerge_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitMerge_matched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitMerge_matched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_matchedContext merge_matched() throws RecognitionException {
		Merge_matchedContext _localctx = new Merge_matchedContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_merge_matched);
		int _la;
		try {
			setState(4912);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(4901);
				match(UPDATE);
				setState(4902);
				match(SET);
				setState(4903);
				update_elem();
				setState(4908);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4904);
					match(COMMA);
					setState(4905);
					update_elem();
					}
					}
					setState(4910);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 2);
				{
				setState(4911);
				match(DELETE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_not_matchedContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSQLParser.INSERT, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(TSQLParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Merge_not_matchedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_not_matched; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterMerge_not_matched(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitMerge_not_matched(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitMerge_not_matched(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_not_matchedContext merge_not_matched() throws RecognitionException {
		Merge_not_matchedContext _localctx = new Merge_not_matchedContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_merge_not_matched);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4914);
			match(INSERT);
			setState(4919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(4915);
				match(LR_BRACKET);
				setState(4916);
				column_name_list();
				setState(4917);
				match(RR_BRACKET);
				}
			}

			setState(4924);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(4921);
				table_value_constructor();
				}
				break;
			case DEFAULT:
				{
				setState(4922);
				match(DEFAULT);
				setState(4923);
				match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode DELETE() { return getToken(TSQLParser.DELETE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSQLParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSQLParser.LOCAL_ID, i);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSQLParser.TOP, 0); }
		public Top_countContext top_count() {
			return getRuleContext(Top_countContext.class,0);
		}
		public List<TerminalNode> FROM() { return getTokens(TSQLParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(TSQLParser.FROM, i);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(TSQLParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(TSQLParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(TSQLParser.OF, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(TSQLParser.GLOBAL, 0); }
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4926);
				with_expression();
				}
			}

			setState(4929);
			match(DELETE);
			setState(4932);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(4930);
				match(TOP);
				setState(4931);
				top_count();
				}
			}

			setState(4935);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4934);
				match(FROM);
				}
			}

			setState(4940);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(4937);
				qualified_name();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(4938);
				rowset_function_limited();
				}
				break;
			case LOCAL_ID:
				{
				setState(4939);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4943);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,617,_ctx) ) {
			case 1:
				{
				setState(4942);
				insert_with_table_hints();
				}
				break;
			}
			setState(4946);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(4945);
				output_clause();
				}
			}

			setState(4957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(4948);
				match(FROM);
				setState(4949);
				from_item(0);
				setState(4954);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4950);
					match(COMMA);
					setState(4951);
					from_item(0);
					}
					}
					setState(4956);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4959);
				match(WHERE);
				setState(4970);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FILLFACTOR:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL:
				case NULLIF:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case UPDATE:
				case USER:
				case FUNC_IDENTITY:
				case FUNC_CURSOR_ROWS:
				case FUNC_DATEFIRST:
				case FUNC_ERROR:
				case FUNC_FETCH_STATUS:
				case FUNC_PACK_RECEIVED:
				case FUNC_PROCID:
				case FUNC_ROWCOUNT:
				case FUNC_TRANCOUNT:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case LEFT_FIGURE_PAREN:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case IPV4_ADDR:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(4960);
					search_condition();
					}
					break;
				case CURRENT:
					{
					setState(4961);
					match(CURRENT);
					setState(4962);
					match(OF);
					setState(4968);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,622,_ctx) ) {
					case 1:
						{
						setState(4964);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,621,_ctx) ) {
						case 1:
							{
							setState(4963);
							match(GLOBAL);
							}
							break;
						}
						setState(4966);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(4967);
						((Delete_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4974);
				for_clause();
				}
			}

			setState(4978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(4977);
				option_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSQLParser.INSERT, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Execute_statementContext execute_statement() {
			return getRuleContext(Execute_statementContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(TSQLParser.VALUES, 0); }
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSQLParser.TOP, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode INTO() { return getToken(TSQLParser.INTO, 0); }
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public TerminalNode PERCENT() { return getToken(TSQLParser.PERCENT, 0); }
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_insert_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4981);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4980);
				with_expression();
				}
			}

			setState(4983);
			match(INSERT);
			setState(4991);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(4984);
				match(TOP);
				setState(4985);
				match(LR_BRACKET);
				setState(4986);
				expression(0);
				setState(4987);
				match(RR_BRACKET);
				setState(4989);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(4988);
					match(PERCENT);
					}
				}

				}
			}

			setState(4994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(4993);
				match(INTO);
				}
			}

			setState(4999);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(4996);
				qualified_name();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(4997);
				rowset_function_limited();
				}
				break;
			case LOCAL_ID:
				{
				setState(4998);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5002);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
			case 1:
				{
				setState(5001);
				insert_with_table_hints();
				}
				break;
			}
			setState(5008);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,633,_ctx) ) {
			case 1:
				{
				setState(5004);
				match(LR_BRACKET);
				setState(5005);
				column_name_list();
				setState(5006);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5011);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5010);
				output_clause();
				}
			}

			setState(5017);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case WITH:
			case LR_BRACKET:
				{
				setState(5013);
				select_statement();
				}
				break;
			case EXECUTE:
				{
				setState(5014);
				execute_statement();
				}
				break;
			case DEFAULT:
				{
				setState(5015);
				match(DEFAULT);
				setState(5016);
				match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5020);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5019);
				for_clause();
				}
			}

			setState(5023);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5022);
				option_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_receiveContext extends ParserRuleContext {
		public TimeContext timeout;
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Receive_statementContext receive_statement() {
			return getRuleContext(Receive_statementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSQLParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Waitfor_receiveContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_receive; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWaitfor_receive(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWaitfor_receive(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWaitfor_receive(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Waitfor_receiveContext waitfor_receive() throws RecognitionException {
		Waitfor_receiveContext _localctx = new Waitfor_receiveContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_waitfor_receive);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5025);
			match(LR_BRACKET);
			setState(5026);
			receive_statement();
			setState(5027);
			match(RR_BRACKET);
			setState(5031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5028);
				match(COMMA);
				setState(5029);
				match(TIMEOUT);
				setState(5030);
				((Waitfor_receiveContext)_localctx).timeout = time();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Receive_statementContext extends ParserRuleContext {
		public Token table_variable;
		public Search_conditionContext where;
		public TerminalNode RECEIVE() { return getToken(TSQLParser.RECEIVE, 0); }
		public List<Receive_column_specifierContext> receive_column_specifier() {
			return getRuleContexts(Receive_column_specifierContext.class);
		}
		public Receive_column_specifierContext receive_column_specifier(int i) {
			return getRuleContext(Receive_column_specifierContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode INTO() { return getToken(TSQLParser.INTO, 0); }
		public TerminalNode WHERE() { return getToken(TSQLParser.WHERE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Receive_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_receive_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterReceive_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitReceive_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitReceive_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Receive_statementContext receive_statement() throws RecognitionException {
		Receive_statementContext _localctx = new Receive_statementContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_receive_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5033);
			match(RECEIVE);
			setState(5035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5034);
				top_clause();
				}
			}

			setState(5037);
			receive_column_specifier();
			setState(5042);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5038);
				match(COMMA);
				setState(5039);
				receive_column_specifier();
				}
				}
				setState(5044);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5045);
			match(FROM);
			setState(5046);
			qualified_name();
			setState(5049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5047);
				match(INTO);
				setState(5048);
				((Receive_statementContext)_localctx).table_variable = match(LOCAL_ID);
				}
			}

			setState(5053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5051);
				match(WHERE);
				setState(5052);
				((Receive_statementContext)_localctx).where = search_condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Receive_column_specifierContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(TSQLParser.STAR, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public Receive_column_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_receive_column_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterReceive_column_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitReceive_column_specifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitReceive_column_specifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Receive_column_specifierContext receive_column_specifier() throws RecognitionException {
		Receive_column_specifierContext _localctx = new Receive_column_specifierContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_receive_column_specifier);
		int _la;
		try {
			setState(5073);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5055);
				match(STAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5056);
				id();
				setState(5058);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5057);
					match(AS);
					}
				}

				setState(5061);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)) | (1L << (STRING - 770)))) != 0)) {
					{
					setState(5060);
					column_alias();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5063);
				expression(0);
				setState(5065);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5064);
					match(AS);
					}
				}

				setState(5068);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)) | (1L << (STRING - 770)))) != 0)) {
					{
					setState(5067);
					column_alias();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5070);
				match(LOCAL_ID);
				setState(5071);
				match(EQUAL);
				setState(5072);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public Select_opsContext select_ops() {
			return getRuleContext(Select_opsContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5075);
				with_expression();
				}
			}

			setState(5078);
			select_ops(0);
			setState(5080);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				{
				setState(5079);
				for_clause();
				}
				break;
			}
			setState(5083);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,650,_ctx) ) {
			case 1:
				{
				setState(5082);
				option_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_stmt_no_parensContext extends ParserRuleContext {
		public Select_ops_no_parensContext select_ops_no_parens() {
			return getRuleContext(Select_ops_no_parensContext.class,0);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Select_stmt_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_stmt_no_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSelect_stmt_no_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSelect_stmt_no_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSelect_stmt_no_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_stmt_no_parensContext select_stmt_no_parens() throws RecognitionException {
		Select_stmt_no_parensContext _localctx = new Select_stmt_no_parensContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_select_stmt_no_parens);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5085);
				with_expression();
				}
			}

			setState(5088);
			select_ops_no_parens();
			setState(5090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5089);
				for_clause();
				}
			}

			setState(5093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5092);
				option_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_opsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public List<Select_opsContext> select_ops() {
			return getRuleContexts(Select_opsContext.class);
		}
		public Select_opsContext select_ops(int i) {
			return getRuleContext(Select_opsContext.class,i);
		}
		public TerminalNode INTERSECT() { return getToken(TSQLParser.INTERSECT, 0); }
		public TerminalNode UNION() { return getToken(TSQLParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(TSQLParser.EXCEPT, 0); }
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Select_opsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_ops; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSelect_ops(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSelect_ops(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSelect_ops(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_opsContext select_ops() throws RecognitionException {
		return select_ops(0);
	}

	private Select_opsContext select_ops(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Select_opsContext _localctx = new Select_opsContext(_ctx, _parentState);
		Select_opsContext _prevctx = _localctx;
		int _startState = 324;
		enterRecursionRule(_localctx, 324, RULE_select_ops, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5101);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(5096);
				match(LR_BRACKET);
				setState(5097);
				select_statement();
				setState(5098);
				match(RR_BRACKET);
				}
				break;
			case SELECT:
			case VALUES:
				{
				setState(5100);
				query_specification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(5111);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,656,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Select_opsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_select_ops);
					setState(5103);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(5104);
					_la = _input.LA(1);
					if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5106);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(5105);
						set_qualifier();
						}
					}

					setState(5108);
					select_ops(3);
					}
					} 
				}
				setState(5113);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,656,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Select_ops_no_parensContext extends ParserRuleContext {
		public List<Select_opsContext> select_ops() {
			return getRuleContexts(Select_opsContext.class);
		}
		public Select_opsContext select_ops(int i) {
			return getRuleContext(Select_opsContext.class,i);
		}
		public TerminalNode INTERSECT() { return getToken(TSQLParser.INTERSECT, 0); }
		public TerminalNode UNION() { return getToken(TSQLParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(TSQLParser.EXCEPT, 0); }
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Query_specificationContext query_specification() {
			return getRuleContext(Query_specificationContext.class,0);
		}
		public Select_ops_no_parensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_ops_no_parens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSelect_ops_no_parens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSelect_ops_no_parens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSelect_ops_no_parens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_ops_no_parensContext select_ops_no_parens() throws RecognitionException {
		Select_ops_no_parensContext _localctx = new Select_ops_no_parensContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_select_ops_no_parens);
		int _la;
		try {
			setState(5122);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5114);
				select_ops(0);
				setState(5115);
				_la = _input.LA(1);
				if ( !(_la==EXCEPT || _la==INTERSECT || _la==UNION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5117);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(5116);
					set_qualifier();
					}
				}

				setState(5119);
				select_ops(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5121);
				query_specification();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_qualifierContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(TSQLParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public Set_qualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_qualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSet_qualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSet_qualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSet_qualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_qualifierContext set_qualifier() throws RecognitionException {
		Set_qualifierContext _localctx = new Set_qualifierContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_set_qualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5124);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimeContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TimeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_time; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTime(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTime(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTime(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimeContext time() throws RecognitionException {
		TimeContext _localctx = new TimeContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_time);
		try {
			setState(5128);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5126);
				match(LOCAL_ID);
				}
				break;
			case FALSE:
			case TRUE:
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case IPV4_ADDR:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 2);
				{
				setState(5127);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public Token cursor_var;
		public TerminalNode UPDATE() { return getToken(TSQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public List<Update_elemContext> update_elem() {
			return getRuleContexts(Update_elemContext.class);
		}
		public Update_elemContext update_elem(int i) {
			return getRuleContext(Update_elemContext.class,i);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Rowset_function_limitedContext rowset_function_limited() {
			return getRuleContext(Rowset_function_limitedContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSQLParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSQLParser.LOCAL_ID, i);
		}
		public With_expressionContext with_expression() {
			return getRuleContext(With_expressionContext.class,0);
		}
		public TerminalNode TOP() { return getToken(TSQLParser.TOP, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Output_clauseContext output_clause() {
			return getRuleContext(Output_clauseContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(TSQLParser.WHERE, 0); }
		public For_clauseContext for_clause() {
			return getRuleContext(For_clauseContext.class,0);
		}
		public Option_clauseContext option_clause() {
			return getRuleContext(Option_clauseContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(TSQLParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(TSQLParser.OF, 0); }
		public TerminalNode PERCENT() { return getToken(TSQLParser.PERCENT, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(TSQLParser.GLOBAL, 0); }
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5130);
				with_expression();
				}
			}

			setState(5133);
			match(UPDATE);
			setState(5141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TOP) {
				{
				setState(5134);
				match(TOP);
				setState(5135);
				match(LR_BRACKET);
				setState(5136);
				expression(0);
				setState(5137);
				match(RR_BRACKET);
				setState(5139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT) {
					{
					setState(5138);
					match(PERCENT);
					}
				}

				}
			}

			setState(5146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(5143);
				qualified_name();
				}
				break;
			case OPENDATASOURCE:
			case OPENQUERY:
				{
				setState(5144);
				rowset_function_limited();
				}
				break;
			case LOCAL_ID:
				{
				setState(5145);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH || _la==LR_BRACKET) {
				{
				setState(5148);
				with_table_hints();
				}
			}

			setState(5151);
			match(SET);
			setState(5152);
			update_elem();
			setState(5157);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5153);
				match(COMMA);
				setState(5154);
				update_elem();
				}
				}
				setState(5159);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTPUT) {
				{
				setState(5160);
				output_clause();
				}
			}

			setState(5172);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(5163);
				match(FROM);
				setState(5164);
				from_item(0);
				setState(5169);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5165);
					match(COMMA);
					setState(5166);
					from_item(0);
					}
					}
					setState(5171);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5187);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5174);
				match(WHERE);
				setState(5185);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case EXISTS:
				case FILLFACTOR:
				case IDENTITY:
				case LEFT:
				case NOT:
				case NULL:
				case NULLIF:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case UPDATE:
				case USER:
				case FUNC_IDENTITY:
				case FUNC_CURSOR_ROWS:
				case FUNC_DATEFIRST:
				case FUNC_ERROR:
				case FUNC_FETCH_STATUS:
				case FUNC_PACK_RECEIVED:
				case FUNC_PROCID:
				case FUNC_ROWCOUNT:
				case FUNC_TRANCOUNT:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case LEFT_FIGURE_PAREN:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case IPV4_ADDR:
				case DOLLAR:
				case LR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(5175);
					search_condition();
					}
					break;
				case CURRENT:
					{
					setState(5176);
					match(CURRENT);
					setState(5177);
					match(OF);
					setState(5183);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
					case 1:
						{
						setState(5179);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
						case 1:
							{
							setState(5178);
							match(GLOBAL);
							}
							break;
						}
						setState(5181);
						cursor_name();
						}
						break;
					case 2:
						{
						setState(5182);
						((Update_statementContext)_localctx).cursor_var = match(LOCAL_ID);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(5190);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5189);
				for_clause();
				}
			}

			setState(5193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTION) {
				{
				setState(5192);
				option_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_clauseContext extends ParserRuleContext {
		public TerminalNode OUTPUT() { return getToken(TSQLParser.OUTPUT, 0); }
		public List<Output_dml_list_elemContext> output_dml_list_elem() {
			return getRuleContexts(Output_dml_list_elemContext.class);
		}
		public Output_dml_list_elemContext output_dml_list_elem(int i) {
			return getRuleContext(Output_dml_list_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode INTO() { return getToken(TSQLParser.INTO, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Output_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOutput_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOutput_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOutput_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_clauseContext output_clause() throws RecognitionException {
		Output_clauseContext _localctx = new Output_clauseContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_output_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5195);
			match(OUTPUT);
			setState(5196);
			output_dml_list_elem();
			setState(5201);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5197);
				match(COMMA);
				setState(5198);
				output_dml_list_elem();
				}
				}
				setState(5203);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5215);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(5204);
				match(INTO);
				setState(5207);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL_ID:
					{
					setState(5205);
					match(LOCAL_ID);
					}
					break;
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5206);
					qualified_name();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5213);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
				case 1:
					{
					setState(5209);
					match(LR_BRACKET);
					setState(5210);
					column_name_list();
					setState(5211);
					match(RR_BRACKET);
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_dml_list_elemContext extends ParserRuleContext {
		public Output_column_nameContext output_column_name() {
			return getRuleContext(Output_column_nameContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public Output_dml_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_dml_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOutput_dml_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOutput_dml_list_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOutput_dml_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_dml_list_elemContext output_dml_list_elem() throws RecognitionException {
		Output_dml_list_elemContext _localctx = new Output_dml_list_elemContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_output_dml_list_elem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5217);
			output_column_name();
			setState(5222);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
			case 1:
				{
				setState(5219);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(5218);
					match(AS);
					}
				}

				setState(5221);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Output_column_nameContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(TSQLParser.STAR, 0); }
		public TerminalNode DOLLAR() { return getToken(TSQLParser.DOLLAR, 0); }
		public TerminalNode ACTION() { return getToken(TSQLParser.ACTION, 0); }
		public Output_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_output_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOutput_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOutput_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOutput_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Output_column_nameContext output_column_name() throws RecognitionException {
		Output_column_nameContext _localctx = new Output_column_nameContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_output_column_name);
		int _la;
		try {
			setState(5231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5224);
				expression(0);
				setState(5227);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(5225);
					match(DOT);
					setState(5226);
					match(STAR);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5229);
				match(DOLLAR);
				setState(5230);
				match(ACTION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext collation_name;
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode CONTAINMENT() { return getToken(TSQLParser.CONTAINMENT, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public List<TerminalNode> ON() { return getTokens(TSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSQLParser.ON, i);
		}
		public List<Database_file_specContext> database_file_spec() {
			return getRuleContexts(Database_file_specContext.class);
		}
		public Database_file_specContext database_file_spec(int i) {
			return getRuleContext(Database_file_specContext.class,i);
		}
		public TerminalNode COLLATE() { return getToken(TSQLParser.COLLATE, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Create_database_optionContext> create_database_option() {
			return getRuleContexts(Create_database_optionContext.class);
		}
		public Create_database_optionContext create_database_option(int i) {
			return getRuleContext(Create_database_optionContext.class,i);
		}
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSQLParser.PARTIAL, 0); }
		public TerminalNode PRIMARY() { return getToken(TSQLParser.PRIMARY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode LOG() { return getToken(TSQLParser.LOG, 0); }
		public Create_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_databaseContext create_database() throws RecognitionException {
		Create_databaseContext _localctx = new Create_databaseContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_create_database);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5233);
			match(DATABASE);
			setState(5234);
			((Create_databaseContext)_localctx).database = id();
			setState(5238);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINMENT) {
				{
				setState(5235);
				match(CONTAINMENT);
				setState(5236);
				match(EQUAL);
				setState(5237);
				_la = _input.LA(1);
				if ( !(_la==NONE || _la==PARTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5240);
				match(ON);
				setState(5242);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(5241);
					match(PRIMARY);
					}
				}

				setState(5244);
				database_file_spec();
				setState(5249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5245);
					match(COMMA);
					setState(5246);
					database_file_spec();
					}
					}
					setState(5251);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LOG) {
					{
					setState(5252);
					match(LOG);
					setState(5253);
					match(ON);
					setState(5254);
					database_file_spec();
					setState(5259);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5255);
						match(COMMA);
						setState(5256);
						database_file_spec();
						}
						}
						setState(5261);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
			}

			setState(5268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(5266);
				match(COLLATE);
				setState(5267);
				((Create_databaseContext)_localctx).collation_name = id();
				}
			}

			setState(5279);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,691,_ctx) ) {
			case 1:
				{
				setState(5270);
				match(WITH);
				setState(5271);
				create_database_option();
				setState(5276);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5272);
					match(COMMA);
					setState(5273);
					create_database_option();
					}
					}
					setState(5278);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_encryption_keyContext extends ParserRuleContext {
		public IdContext encryptor_name;
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSQLParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSQLParser.ENCRYPTION, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSQLParser.KEY, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSQLParser.ALGORITHM, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode AES_128() { return getToken(TSQLParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSQLParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSQLParser.AES_256, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSQLParser.TRIPLE_DES_3KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public Create_database_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_database_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_database_encryption_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_database_encryption_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_database_encryption_keyContext create_database_encryption_key() throws RecognitionException {
		Create_database_encryption_keyContext _localctx = new Create_database_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_create_database_encryption_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5281);
			match(DATABASE);
			setState(5282);
			match(ENCRYPTION);
			setState(5283);
			match(KEY);
			setState(5284);
			match(WITH);
			setState(5285);
			match(ALGORITHM);
			setState(5286);
			match(EQUAL);
			setState(5287);
			_la = _input.LA(1);
			if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (AES_128 - 201)) | (1L << (AES_192 - 201)) | (1L << (AES_256 - 201)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5288);
			match(ENCRYPTION);
			setState(5289);
			match(BY);
			setState(5290);
			match(SERVER);
			setState(5294);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				{
				setState(5291);
				match(CERTIFICATE);
				}
				break;
			case ASYMMETRIC:
				{
				setState(5292);
				match(ASYMMETRIC);
				setState(5293);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5296);
			((Create_database_encryption_keyContext)_localctx).encryptor_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_scoped_credentialContext extends ParserRuleContext {
		public IdContext credential_name;
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode SCOPED() { return getToken(TSQLParser.SCOPED, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSQLParser.CREDENTIAL, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSQLParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSQLParser.SECRET, 0); }
		public Create_database_scoped_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_scoped_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_database_scoped_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_database_scoped_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_database_scoped_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_database_scoped_credentialContext create_database_scoped_credential() throws RecognitionException {
		Create_database_scoped_credentialContext _localctx = new Create_database_scoped_credentialContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_create_database_scoped_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5298);
			match(DATABASE);
			setState(5299);
			match(SCOPED);
			setState(5300);
			match(CREDENTIAL);
			setState(5301);
			((Create_database_scoped_credentialContext)_localctx).credential_name = id();
			setState(5302);
			match(WITH);
			setState(5303);
			match(IDENTITY);
			setState(5304);
			match(EQUAL);
			setState(5305);
			match(STRING);
			setState(5310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5306);
				match(COMMA);
				setState(5307);
				match(SECRET);
				setState(5308);
				match(EQUAL);
				setState(5309);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_defaultContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Create_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_defaultContext create_default() throws RecognitionException {
		Create_defaultContext _localctx = new Create_defaultContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_create_default);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5312);
			match(DEFAULT);
			setState(5313);
			qualified_name();
			setState(5314);
			match(AS);
			setState(5315);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_indexContext extends ParserRuleContext {
		public TerminalNode FULLTEXT() { return getToken(TSQLParser.FULLTEXT, 0); }
		public TerminalNode INDEX() { return getToken(TSQLParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Alter_fulltext_index_optionContext alter_fulltext_index_option() {
			return getRuleContext(Alter_fulltext_index_optionContext.class,0);
		}
		public Alter_fulltext_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_fulltext_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_fulltext_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_fulltext_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_fulltext_indexContext alter_fulltext_index() throws RecognitionException {
		Alter_fulltext_indexContext _localctx = new Alter_fulltext_indexContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_alter_fulltext_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5317);
			match(FULLTEXT);
			setState(5318);
			match(INDEX);
			setState(5319);
			match(ON);
			setState(5320);
			qualified_name();
			setState(5321);
			alter_fulltext_index_option();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_fulltext_index_optionContext extends ParserRuleContext {
		public IdContext column_name;
		public IdContext stoplist_name;
		public IdContext property_list_name;
		public TerminalNode ENABLE() { return getToken(TSQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(TSQLParser.DISABLE, 0); }
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public TerminalNode CHANGE_TRACKING() { return getToken(TSQLParser.CHANGE_TRACKING, 0); }
		public TerminalNode MANUAL() { return getToken(TSQLParser.MANUAL, 0); }
		public TerminalNode AUTO() { return getToken(TSQLParser.AUTO, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public Fulltext_index_columnsContext fulltext_index_columns() {
			return getRuleContext(Fulltext_index_columnsContext.class,0);
		}
		public With_no_populationContext with_no_population() {
			return getRuleContext(With_no_populationContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSQLParser.ALTER, 0); }
		public TerminalNode COLUMN() { return getToken(TSQLParser.COLUMN, 0); }
		public TerminalNode STATISTICAL_SEMANTICS() { return getToken(TSQLParser.STATISTICAL_SEMANTICS, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode START() { return getToken(TSQLParser.START, 0); }
		public TerminalNode POPULATION() { return getToken(TSQLParser.POPULATION, 0); }
		public TerminalNode FULL() { return getToken(TSQLParser.FULL, 0); }
		public TerminalNode INCREMENTAL() { return getToken(TSQLParser.INCREMENTAL, 0); }
		public TerminalNode UPDATE() { return getToken(TSQLParser.UPDATE, 0); }
		public TerminalNode STOP() { return getToken(TSQLParser.STOP, 0); }
		public TerminalNode PAUSE() { return getToken(TSQLParser.PAUSE, 0); }
		public TerminalNode RESUME() { return getToken(TSQLParser.RESUME, 0); }
		public TerminalNode STOPLIST() { return getToken(TSQLParser.STOPLIST, 0); }
		public TerminalNode SYSTEM() { return getToken(TSQLParser.SYSTEM, 0); }
		public TerminalNode SEARCH() { return getToken(TSQLParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSQLParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSQLParser.LIST, 0); }
		public Alter_fulltext_index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_fulltext_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_fulltext_index_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_fulltext_index_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_fulltext_index_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_fulltext_index_optionContext alter_fulltext_index_option() throws RecognitionException {
		Alter_fulltext_index_optionContext _localctx = new Alter_fulltext_index_optionContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_alter_fulltext_index_option);
		int _la;
		try {
			setState(5390);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,705,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5323);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5324);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5325);
				match(SET);
				setState(5326);
				match(CHANGE_TRACKING);
				setState(5328);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(5327);
					match(EQUAL);
					}
				}

				setState(5330);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==AUTO || _la==MANUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5331);
				match(ADD);
				setState(5332);
				fulltext_index_columns();
				setState(5334);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,695,_ctx) ) {
				case 1:
					{
					setState(5333);
					with_no_population();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5336);
				match(ALTER);
				setState(5337);
				match(COLUMN);
				setState(5338);
				((Alter_fulltext_index_optionContext)_localctx).column_name = id();
				setState(5339);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5340);
				match(STATISTICAL_SEMANTICS);
				setState(5342);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,696,_ctx) ) {
				case 1:
					{
					setState(5341);
					with_no_population();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5344);
				match(DROP);
				setState(5345);
				match(LR_BRACKET);
				setState(5346);
				id();
				setState(5351);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5347);
					match(COMMA);
					setState(5348);
					id();
					}
					}
					setState(5353);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5354);
				match(RR_BRACKET);
				setState(5356);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,698,_ctx) ) {
				case 1:
					{
					setState(5355);
					with_no_population();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5358);
				match(START);
				setState(5359);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==UPDATE || _la==INCREMENTAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5360);
				match(POPULATION);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5361);
				_la = _input.LA(1);
				if ( !(_la==PAUSE || _la==RESUME || _la==STOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5362);
				match(POPULATION);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5363);
				match(SET);
				setState(5364);
				match(STOPLIST);
				setState(5366);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(5365);
					match(EQUAL);
					}
				}

				setState(5371);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,700,_ctx) ) {
				case 1:
					{
					setState(5368);
					match(OFF);
					}
					break;
				case 2:
					{
					setState(5369);
					match(SYSTEM);
					}
					break;
				case 3:
					{
					setState(5370);
					((Alter_fulltext_index_optionContext)_localctx).stoplist_name = id();
					}
					break;
				}
				setState(5374);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,701,_ctx) ) {
				case 1:
					{
					setState(5373);
					with_no_population();
					}
					break;
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5376);
				match(SET);
				setState(5377);
				match(SEARCH);
				setState(5378);
				match(PROPERTY);
				setState(5379);
				match(LIST);
				setState(5381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(5380);
					match(EQUAL);
					}
				}

				setState(5385);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case OFF:
					{
					setState(5383);
					match(OFF);
					}
					break;
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(5384);
					((Alter_fulltext_index_optionContext)_localctx).property_list_name = id();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5388);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
				case 1:
					{
					setState(5387);
					with_no_population();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_no_populationContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode NO() { return getToken(TSQLParser.NO, 0); }
		public TerminalNode POPULATION() { return getToken(TSQLParser.POPULATION, 0); }
		public With_no_populationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_no_population; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWith_no_population(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWith_no_population(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWith_no_population(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_no_populationContext with_no_population() throws RecognitionException {
		With_no_populationContext _localctx = new With_no_populationContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_with_no_population);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5392);
			match(WITH);
			setState(5393);
			match(NO);
			setState(5394);
			match(POPULATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_fulltext_indexContext extends ParserRuleContext {
		public IdContext index_name;
		public TerminalNode FULLTEXT() { return getToken(TSQLParser.FULLTEXT, 0); }
		public List<TerminalNode> INDEX() { return getTokens(TSQLParser.INDEX); }
		public TerminalNode INDEX(int i) {
			return getToken(TSQLParser.INDEX, i);
		}
		public List<TerminalNode> ON() { return getTokens(TSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSQLParser.ON, i);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Fulltext_index_columnsContext fulltext_index_columns() {
			return getRuleContext(Fulltext_index_columnsContext.class,0);
		}
		public Catalog_filegroup_optionContext catalog_filegroup_option() {
			return getRuleContext(Catalog_filegroup_optionContext.class,0);
		}
		public Fulltext_index_optionsContext fulltext_index_options() {
			return getRuleContext(Fulltext_index_optionsContext.class,0);
		}
		public Create_fulltext_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_fulltext_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_fulltext_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_fulltext_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_fulltext_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_fulltext_indexContext create_fulltext_index() throws RecognitionException {
		Create_fulltext_indexContext _localctx = new Create_fulltext_indexContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_create_fulltext_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5396);
			match(FULLTEXT);
			setState(5397);
			match(INDEX);
			setState(5398);
			match(ON);
			setState(5399);
			qualified_name();
			setState(5401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5400);
				fulltext_index_columns();
				}
			}

			setState(5403);
			match(KEY);
			setState(5404);
			match(INDEX);
			setState(5405);
			((Create_fulltext_indexContext)_localctx).index_name = id();
			setState(5408);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5406);
				match(ON);
				setState(5407);
				catalog_filegroup_option();
				}
			}

			setState(5411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,708,_ctx) ) {
			case 1:
				{
				setState(5410);
				fulltext_index_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fulltext_index_columnsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Fulltext_index_columnContext> fulltext_index_column() {
			return getRuleContexts(Fulltext_index_columnContext.class);
		}
		public Fulltext_index_columnContext fulltext_index_column(int i) {
			return getRuleContext(Fulltext_index_columnContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Fulltext_index_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltext_index_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFulltext_index_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFulltext_index_columns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFulltext_index_columns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fulltext_index_columnsContext fulltext_index_columns() throws RecognitionException {
		Fulltext_index_columnsContext _localctx = new Fulltext_index_columnsContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_fulltext_index_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5413);
			match(LR_BRACKET);
			setState(5414);
			fulltext_index_column();
			setState(5419);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5415);
				match(COMMA);
				setState(5416);
				fulltext_index_column();
				}
				}
				setState(5421);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5422);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fulltext_index_columnContext extends ParserRuleContext {
		public IdContext column_name;
		public Data_typeContext type_column_name;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public TerminalNode COLUMN() { return getToken(TSQLParser.COLUMN, 0); }
		public TerminalNode LANGUAGE() { return getToken(TSQLParser.LANGUAGE, 0); }
		public TerminalNode STATISTICAL_SEMANTICS() { return getToken(TSQLParser.STATISTICAL_SEMANTICS, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public Fulltext_index_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltext_index_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFulltext_index_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFulltext_index_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFulltext_index_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fulltext_index_columnContext fulltext_index_column() throws RecognitionException {
		Fulltext_index_columnContext _localctx = new Fulltext_index_columnContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_fulltext_index_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5424);
			((Fulltext_index_columnContext)_localctx).column_name = id();
			setState(5428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(5425);
				match(TYPE);
				setState(5426);
				match(COLUMN);
				setState(5427);
				((Fulltext_index_columnContext)_localctx).type_column_name = data_type();
				}
			}

			setState(5432);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LANGUAGE) {
				{
				setState(5430);
				match(LANGUAGE);
				setState(5431);
				_la = _input.LA(1);
				if ( !(((((_la - 792)) & ~0x3f) == 0 && ((1L << (_la - 792)) & ((1L << (DECIMAL - 792)) | (1L << (STRING - 792)) | (1L << (BINARY - 792)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATISTICAL_SEMANTICS) {
				{
				setState(5434);
				match(STATISTICAL_SEMANTICS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fulltext_index_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Fulltext_index_optionContext> fulltext_index_option() {
			return getRuleContexts(Fulltext_index_optionContext.class);
		}
		public Fulltext_index_optionContext fulltext_index_option(int i) {
			return getRuleContext(Fulltext_index_optionContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Fulltext_index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltext_index_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFulltext_index_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFulltext_index_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFulltext_index_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fulltext_index_optionsContext fulltext_index_options() throws RecognitionException {
		Fulltext_index_optionsContext _localctx = new Fulltext_index_optionsContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_fulltext_index_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5437);
			match(WITH);
			setState(5439);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(5438);
				match(LR_BRACKET);
				}
			}

			setState(5441);
			fulltext_index_option();
			setState(5446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5442);
				match(COMMA);
				setState(5443);
				fulltext_index_option();
				}
				}
				setState(5448);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5450);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RR_BRACKET) {
				{
				setState(5449);
				match(RR_BRACKET);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Catalog_filegroup_optionContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode FILEGROUP() { return getToken(TSQLParser.FILEGROUP, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Catalog_filegroup_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_catalog_filegroup_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCatalog_filegroup_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCatalog_filegroup_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCatalog_filegroup_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Catalog_filegroup_optionContext catalog_filegroup_option() throws RecognitionException {
		Catalog_filegroup_optionContext _localctx = new Catalog_filegroup_optionContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_catalog_filegroup_option);
		try {
			setState(5472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5452);
				id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5453);
				match(LR_BRACKET);
				setState(5454);
				id();
				setState(5455);
				match(COMMA);
				setState(5456);
				match(FILEGROUP);
				setState(5457);
				id();
				setState(5458);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5460);
				match(LR_BRACKET);
				setState(5461);
				match(FILEGROUP);
				setState(5462);
				id();
				setState(5463);
				match(COMMA);
				setState(5464);
				id();
				setState(5465);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5467);
				match(LR_BRACKET);
				setState(5468);
				match(FILEGROUP);
				setState(5469);
				id();
				setState(5470);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fulltext_index_optionContext extends ParserRuleContext {
		public IdContext stoplist_name;
		public IdContext property_list_name;
		public TerminalNode CHANGE_TRACKING() { return getToken(TSQLParser.CHANGE_TRACKING, 0); }
		public TerminalNode MANUAL() { return getToken(TSQLParser.MANUAL, 0); }
		public TerminalNode AUTO() { return getToken(TSQLParser.AUTO, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode NO() { return getToken(TSQLParser.NO, 0); }
		public TerminalNode POPULATION() { return getToken(TSQLParser.POPULATION, 0); }
		public TerminalNode STOPLIST() { return getToken(TSQLParser.STOPLIST, 0); }
		public TerminalNode SYSTEM() { return getToken(TSQLParser.SYSTEM, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode SEARCH() { return getToken(TSQLParser.SEARCH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSQLParser.PROPERTY, 0); }
		public TerminalNode LIST() { return getToken(TSQLParser.LIST, 0); }
		public Fulltext_index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fulltext_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFulltext_index_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFulltext_index_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFulltext_index_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fulltext_index_optionContext fulltext_index_option() throws RecognitionException {
		Fulltext_index_optionContext _localctx = new Fulltext_index_optionContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_fulltext_index_option);
		int _la;
		try {
			setState(5504);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHANGE_TRACKING:
				enterOuterAlt(_localctx, 1);
				{
				setState(5474);
				match(CHANGE_TRACKING);
				setState(5476);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(5475);
					match(EQUAL);
					}
				}

				setState(5486);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MANUAL:
					{
					setState(5478);
					match(MANUAL);
					}
					break;
				case AUTO:
					{
					setState(5479);
					match(AUTO);
					}
					break;
				case OFF:
					{
					setState(5480);
					match(OFF);
					setState(5484);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,718,_ctx) ) {
					case 1:
						{
						setState(5481);
						match(COMMA);
						setState(5482);
						match(NO);
						setState(5483);
						match(POPULATION);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case STOPLIST:
				enterOuterAlt(_localctx, 2);
				{
				setState(5488);
				match(STOPLIST);
				setState(5490);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(5489);
					match(EQUAL);
					}
				}

				setState(5495);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,721,_ctx) ) {
				case 1:
					{
					setState(5492);
					match(OFF);
					}
					break;
				case 2:
					{
					setState(5493);
					match(SYSTEM);
					}
					break;
				case 3:
					{
					setState(5494);
					((Fulltext_index_optionContext)_localctx).stoplist_name = id();
					}
					break;
				}
				}
				break;
			case SEARCH:
				enterOuterAlt(_localctx, 3);
				{
				setState(5497);
				match(SEARCH);
				setState(5498);
				match(PROPERTY);
				setState(5499);
				match(LIST);
				setState(5501);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL) {
					{
					setState(5500);
					match(EQUAL);
					}
				}

				setState(5503);
				((Fulltext_index_optionContext)_localctx).property_list_name = id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_selective_indexContext extends ParserRuleContext {
		public IdContext name;
		public TerminalNode SELECTIVE() { return getToken(TSQLParser.SELECTIVE, 0); }
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode INDEX() { return getToken(TSQLParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public Promoted_node_path_listContext promoted_node_path_list() {
			return getRuleContext(Promoted_node_path_listContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(TSQLParser.XMLNAMESPACES, 0); }
		public Xmlnamespace_listContext xmlnamespace_list() {
			return getRuleContext(Xmlnamespace_listContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public Create_selective_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_selective_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_selective_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_selective_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_selective_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_selective_indexContext create_selective_index() throws RecognitionException {
		Create_selective_indexContext _localctx = new Create_selective_indexContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_create_selective_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5506);
			match(SELECTIVE);
			setState(5507);
			match(XML);
			setState(5508);
			match(INDEX);
			setState(5509);
			((Create_selective_indexContext)_localctx).name = id();
			setState(5510);
			match(ON);
			setState(5511);
			qualified_name();
			setState(5512);
			match(LR_BRACKET);
			setState(5513);
			id();
			setState(5514);
			match(RR_BRACKET);
			setState(5521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5515);
				match(WITH);
				setState(5516);
				match(XMLNAMESPACES);
				setState(5517);
				match(LR_BRACKET);
				setState(5518);
				xmlnamespace_list();
				setState(5519);
				match(RR_BRACKET);
				}
			}

			setState(5523);
			match(FOR);
			setState(5524);
			match(LR_BRACKET);
			setState(5525);
			promoted_node_path_list();
			setState(5526);
			match(RR_BRACKET);
			setState(5528);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,725,_ctx) ) {
			case 1:
				{
				setState(5527);
				index_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlnamespace_listContext extends ParserRuleContext {
		public Xmlnamespace_itemContext xmlnamespace_item() {
			return getRuleContext(Xmlnamespace_itemContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public Xmlnamespace_listContext xmlnamespace_list() {
			return getRuleContext(Xmlnamespace_listContext.class,0);
		}
		public Xmlnamespace_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespace_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterXmlnamespace_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitXmlnamespace_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitXmlnamespace_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlnamespace_listContext xmlnamespace_list() throws RecognitionException {
		Xmlnamespace_listContext _localctx = new Xmlnamespace_listContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_xmlnamespace_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5530);
			xmlnamespace_item();
			setState(5533);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5531);
				match(COMMA);
				setState(5532);
				xmlnamespace_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlnamespace_itemContext extends ParserRuleContext {
		public List<String_id_local_idContext> string_id_local_id() {
			return getRuleContexts(String_id_local_idContext.class);
		}
		public String_id_local_idContext string_id_local_id(int i) {
			return getRuleContext(String_id_local_idContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public Xmlnamespace_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlnamespace_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterXmlnamespace_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitXmlnamespace_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitXmlnamespace_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlnamespace_itemContext xmlnamespace_item() throws RecognitionException {
		Xmlnamespace_itemContext _localctx = new Xmlnamespace_itemContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_xmlnamespace_item);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5535);
			string_id_local_id();
			setState(5536);
			match(AS);
			setState(5537);
			string_id_local_id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Promoted_node_path_listContext extends ParserRuleContext {
		public List<Named_promoted_node_path_itemContext> named_promoted_node_path_item() {
			return getRuleContexts(Named_promoted_node_path_itemContext.class);
		}
		public Named_promoted_node_path_itemContext named_promoted_node_path_item(int i) {
			return getRuleContext(Named_promoted_node_path_itemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Promoted_node_path_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_promoted_node_path_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterPromoted_node_path_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitPromoted_node_path_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitPromoted_node_path_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Promoted_node_path_listContext promoted_node_path_list() throws RecognitionException {
		Promoted_node_path_listContext _localctx = new Promoted_node_path_listContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_promoted_node_path_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5539);
			named_promoted_node_path_item();
			setState(5544);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5540);
				match(COMMA);
				setState(5541);
				named_promoted_node_path_item();
				}
				}
				setState(5546);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_promoted_node_path_itemContext extends ParserRuleContext {
		public String_id_local_idContext node_path;
		public List<String_id_local_idContext> string_id_local_id() {
			return getRuleContexts(String_id_local_idContext.class);
		}
		public String_id_local_idContext string_id_local_id(int i) {
			return getRuleContext(String_id_local_idContext.class,i);
		}
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public TerminalNode SINGLETON() { return getToken(TSQLParser.SINGLETON, 0); }
		public TerminalNode XQUERY() { return getToken(TSQLParser.XQUERY, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SQL() { return getToken(TSQLParser.SQL, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Named_promoted_node_path_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_promoted_node_path_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterNamed_promoted_node_path_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitNamed_promoted_node_path_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitNamed_promoted_node_path_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Named_promoted_node_path_itemContext named_promoted_node_path_item() throws RecognitionException {
		Named_promoted_node_path_itemContext _localctx = new Named_promoted_node_path_itemContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_named_promoted_node_path_item);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5547);
			string_id_local_id();
			setState(5548);
			match(EQUAL);
			setState(5549);
			((Named_promoted_node_path_itemContext)_localctx).node_path = string_id_local_id();
			setState(5560);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5550);
				match(AS);
				setState(5558);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case XQUERY:
					{
					setState(5551);
					match(XQUERY);
					setState(5552);
					expression(0);
					setState(5554);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,728,_ctx) ) {
					case 1:
						{
						setState(5553);
						function_call();
						}
						break;
					}
					}
					break;
				case SQL:
					{
					setState(5556);
					match(SQL);
					setState(5557);
					data_type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(5563);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SINGLETON) {
				{
				setState(5562);
				match(SINGLETON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class String_id_local_idContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public String_or_local_idContext string_or_local_id() {
			return getRuleContext(String_or_local_idContext.class,0);
		}
		public String_id_local_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_string_id_local_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterString_id_local_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitString_id_local_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitString_id_local_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final String_id_local_idContext string_id_local_id() throws RecognitionException {
		String_id_local_idContext _localctx = new String_id_local_idContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_string_id_local_id);
		try {
			setState(5567);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5565);
				id();
				}
				break;
			case LOCAL_ID:
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5566);
				string_or_local_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_xml_indexContext extends ParserRuleContext {
		public IdContext name;
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode INDEX() { return getToken(TSQLParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode PRIMARY() { return getToken(TSQLParser.PRIMARY, 0); }
		public Xml_index_usingContext xml_index_using() {
			return getRuleContext(Xml_index_usingContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public Create_xml_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_xml_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_xml_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_xml_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_xml_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_xml_indexContext create_xml_index() throws RecognitionException {
		Create_xml_indexContext _localctx = new Create_xml_indexContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_create_xml_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5570);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PRIMARY) {
				{
				setState(5569);
				match(PRIMARY);
				}
			}

			setState(5572);
			match(XML);
			setState(5573);
			match(INDEX);
			setState(5574);
			((Create_xml_indexContext)_localctx).name = id();
			setState(5575);
			match(ON);
			setState(5576);
			qualified_name();
			setState(5577);
			match(LR_BRACKET);
			setState(5578);
			id();
			setState(5579);
			match(RR_BRACKET);
			setState(5581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5580);
				xml_index_using();
				}
			}

			setState(5584);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,735,_ctx) ) {
			case 1:
				{
				setState(5583);
				index_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_index_usingContext extends ParserRuleContext {
		public IdContext name;
		public TerminalNode USING() { return getToken(TSQLParser.USING, 0); }
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode INDEX() { return getToken(TSQLParser.INDEX, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode VALUE() { return getToken(TSQLParser.VALUE, 0); }
		public TerminalNode PATH() { return getToken(TSQLParser.PATH, 0); }
		public TerminalNode PROPERTY() { return getToken(TSQLParser.PROPERTY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Xml_index_usingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_index_using; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterXml_index_using(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitXml_index_using(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitXml_index_using(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_index_usingContext xml_index_using() throws RecognitionException {
		Xml_index_usingContext _localctx = new Xml_index_usingContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_xml_index_using);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5586);
			match(USING);
			setState(5587);
			match(XML);
			setState(5588);
			match(INDEX);
			setState(5589);
			((Xml_index_usingContext)_localctx).name = id();
			setState(5600);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5590);
				match(FOR);
				setState(5598);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VALUE:
					{
					setState(5591);
					match(VALUE);
					}
					break;
				case PATH:
					{
					setState(5592);
					match(PATH);
					}
					break;
				case PROPERTY:
					{
					setState(5593);
					match(PROPERTY);
					}
					break;
				case LR_BRACKET:
					{
					setState(5594);
					match(LR_BRACKET);
					setState(5595);
					id();
					setState(5596);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_indexContext extends ParserRuleContext {
		public IdContext name;
		public TerminalNode INDEX() { return getToken(TSQLParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Index_restContext index_rest() {
			return getRuleContext(Index_restContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(TSQLParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public Create_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_indexContext create_index() throws RecognitionException {
		Create_indexContext _localctx = new Create_indexContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_create_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5603);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(5602);
				match(UNIQUE);
				}
			}

			setState(5606);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(5605);
				clustered();
				}
			}

			setState(5608);
			match(INDEX);
			setState(5609);
			((Create_indexContext)_localctx).name = id();
			setState(5610);
			match(ON);
			setState(5611);
			qualified_name();
			setState(5612);
			index_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_restContext extends ParserRuleContext {
		public Index_sortContext index_sort() {
			return getRuleContext(Index_sortContext.class,0);
		}
		public Index_includeContext index_include() {
			return getRuleContext(Index_includeContext.class,0);
		}
		public Index_whereContext index_where() {
			return getRuleContext(Index_whereContext.class,0);
		}
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Index_restContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_rest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterIndex_rest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitIndex_rest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitIndex_rest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_restContext index_rest() throws RecognitionException {
		Index_restContext _localctx = new Index_restContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_index_rest);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5614);
			index_sort();
			setState(5616);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(5615);
				index_include();
				}
			}

			setState(5619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(5618);
				index_where();
				}
			}

			setState(5622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,742,_ctx) ) {
			case 1:
				{
				setState(5621);
				index_options();
				}
				break;
			}
			setState(5626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5624);
				match(ON);
				setState(5625);
				id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_sortContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Index_sortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_sort; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterIndex_sort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitIndex_sort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitIndex_sort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_sortContext index_sort() throws RecognitionException {
		Index_sortContext _localctx = new Index_sortContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_index_sort);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5628);
			match(LR_BRACKET);
			setState(5629);
			column_name_list_with_order();
			setState(5630);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_includeContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(TSQLParser.INCLUDE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Index_includeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_include; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterIndex_include(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitIndex_include(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitIndex_include(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_includeContext index_include() throws RecognitionException {
		Index_includeContext _localctx = new Index_includeContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_index_include);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5632);
			match(INCLUDE);
			setState(5633);
			match(LR_BRACKET);
			setState(5634);
			column_name_list();
			setState(5635);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_whereContext extends ParserRuleContext {
		public Search_conditionContext where;
		public TerminalNode WHERE() { return getToken(TSQLParser.WHERE, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Index_whereContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_where; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterIndex_where(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitIndex_where(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitIndex_where(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_whereContext index_where() throws RecognitionException {
		Index_whereContext _localctx = new Index_whereContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_index_where);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5637);
			match(WHERE);
			setState(5638);
			((Index_whereContext)_localctx).where = search_condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_procedureContext extends ParserRuleContext {
		public Token proc;
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public Proc_bodyContext proc_body() {
			return getRuleContext(Proc_bodyContext.class,0);
		}
		public TerminalNode PROC() { return getToken(TSQLParser.PROC, 0); }
		public TerminalNode PROCEDURE() { return getToken(TSQLParser.PROCEDURE, 0); }
		public TerminalNode SEMI() { return getToken(TSQLParser.SEMI, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Procedure_optionContext> procedure_option() {
			return getRuleContexts(Procedure_optionContext.class);
		}
		public Procedure_optionContext procedure_option(int i) {
			return getRuleContext(Procedure_optionContext.class,i);
		}
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSQLParser.REPLICATION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Create_or_alter_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_or_alter_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_or_alter_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_or_alter_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_procedureContext create_or_alter_procedure() throws RecognitionException {
		Create_or_alter_procedureContext _localctx = new Create_or_alter_procedureContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_create_or_alter_procedure);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5640);
			((Create_or_alter_procedureContext)_localctx).proc = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==PROC || _la==PROCEDURE) ) {
				((Create_or_alter_procedureContext)_localctx).proc = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5641);
			qualified_name();
			setState(5644);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI) {
				{
				setState(5642);
				match(SEMI);
				setState(5643);
				match(DECIMAL);
				}
			}

			setState(5660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID || _la==LR_BRACKET) {
				{
				setState(5647);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5646);
					match(LR_BRACKET);
					}
				}

				setState(5649);
				procedure_param();
				setState(5654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5650);
					match(COMMA);
					setState(5651);
					procedure_param();
					}
					}
					setState(5656);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5658);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RR_BRACKET) {
					{
					setState(5657);
					match(RR_BRACKET);
					}
				}

				}
			}

			setState(5671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5662);
				match(WITH);
				setState(5663);
				procedure_option();
				setState(5668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5664);
					match(COMMA);
					setState(5665);
					procedure_option();
					}
					}
					setState(5670);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5675);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(5673);
				match(FOR);
				setState(5674);
				match(REPLICATION);
				}
			}

			setState(5677);
			match(AS);
			setState(5678);
			proc_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_bodyContext extends ParserRuleContext {
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public Assembly_specifierContext assembly_specifier() {
			return getRuleContext(Assembly_specifierContext.class,0);
		}
		public Proc_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterProc_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitProc_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitProc_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_bodyContext proc_body() throws RecognitionException {
		Proc_bodyContext _localctx = new Proc_bodyContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_proc_body);
		try {
			setState(5684);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
			case ALTER:
			case BACKUP:
			case BEGIN:
			case BREAK:
			case CLOSE:
			case COMMIT:
			case CONTINUE:
			case CREATE:
			case DBCC:
			case DEALLOCATE:
			case DECLARE:
			case DELETE:
			case DENY:
			case DROP:
			case END:
			case EXECUTE:
			case FETCH:
			case GRANT:
			case IF:
			case INSERT:
			case MERGE:
			case OPEN:
			case PRINT:
			case RAISERROR:
			case RETURN:
			case REVERT:
			case REVOKE:
			case ROLLBACK:
			case SAVE:
			case SELECT:
			case SET:
			case SETUSER:
			case TRUNCATE:
			case UPDATE:
			case USE:
			case VALUES:
			case WAITFOR:
			case WHILE:
			case WITH:
			case DISABLE:
			case ENABLE:
			case GET:
			case LOCK:
			case MOVE:
			case RECEIVE:
			case SEND:
			case THROW:
			case LR_BRACKET:
			case SEMI:
				enterOuterAlt(_localctx, 1);
				{
				setState(5680);
				sql_clauses();
				}
				break;
			case EXTERNAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5681);
				match(EXTERNAL);
				setState(5682);
				match(NAME);
				setState(5683);
				assembly_specifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_triggerContext extends ParserRuleContext {
		public Qualified_nameContext trigger_name;
		public Qualified_nameContext table_name;
		public TerminalNode TRIGGER() { return getToken(TSQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public List<Trigger_operationContext> trigger_operation() {
			return getRuleContexts(Trigger_operationContext.class);
		}
		public Trigger_operationContext trigger_operation(int i) {
			return getRuleContext(Trigger_operationContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode AFTER() { return getToken(TSQLParser.AFTER, 0); }
		public TerminalNode INSTEAD() { return getToken(TSQLParser.INSTEAD, 0); }
		public TerminalNode OF() { return getToken(TSQLParser.OF, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Trigger_optionContext> trigger_option() {
			return getRuleContexts(Trigger_optionContext.class);
		}
		public Trigger_optionContext trigger_option(int i) {
			return getRuleContext(Trigger_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public With_appendContext with_append() {
			return getRuleContext(With_appendContext.class,0);
		}
		public Not_for_replicationContext not_for_replication() {
			return getRuleContext(Not_for_replicationContext.class,0);
		}
		public Create_or_alter_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_or_alter_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_or_alter_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_or_alter_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_triggerContext create_or_alter_trigger() throws RecognitionException {
		Create_or_alter_triggerContext _localctx = new Create_or_alter_triggerContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_create_or_alter_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5686);
			match(TRIGGER);
			setState(5687);
			((Create_or_alter_triggerContext)_localctx).trigger_name = qualified_name();
			setState(5688);
			match(ON);
			setState(5693);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(5689);
				((Create_or_alter_triggerContext)_localctx).table_name = qualified_name();
				}
				break;
			case ALL:
				{
				setState(5690);
				match(ALL);
				setState(5691);
				match(SERVER);
				}
				break;
			case DATABASE:
				{
				setState(5692);
				match(DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5695);
				match(WITH);
				setState(5696);
				trigger_option();
				setState(5701);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5697);
					match(COMMA);
					setState(5698);
					trigger_option();
					}
					}
					setState(5703);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5710);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(5706);
				match(FOR);
				}
				break;
			case AFTER:
				{
				setState(5707);
				match(AFTER);
				}
				break;
			case INSTEAD:
				{
				setState(5708);
				match(INSTEAD);
				setState(5709);
				match(OF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5712);
			trigger_operation();
			setState(5717);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5713);
				match(COMMA);
				setState(5714);
				trigger_operation();
				}
				}
				setState(5719);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5721);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5720);
				with_append();
				}
			}

			setState(5724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(5723);
				not_for_replication();
				}
			}

			setState(5726);
			match(AS);
			setState(5727);
			sql_clauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_for_replicationContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(TSQLParser.NOT, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode REPLICATION() { return getToken(TSQLParser.REPLICATION, 0); }
		public Not_for_replicationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_for_replication; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterNot_for_replication(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitNot_for_replication(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitNot_for_replication(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not_for_replicationContext not_for_replication() throws RecognitionException {
		Not_for_replicationContext _localctx = new Not_for_replicationContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_not_for_replication);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5729);
			match(NOT);
			setState(5730);
			match(FOR);
			setState(5731);
			match(REPLICATION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_appendContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode APPEND() { return getToken(TSQLParser.APPEND, 0); }
		public With_appendContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_append; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWith_append(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWith_append(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWith_append(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_appendContext with_append() throws RecognitionException {
		With_appendContext _localctx = new With_appendContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_with_append);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5733);
			match(WITH);
			setState(5734);
			match(APPEND);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Trigger_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTrigger_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTrigger_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTrigger_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_optionContext trigger_option() throws RecognitionException {
		Trigger_optionContext _localctx = new Trigger_optionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_trigger_option);
		try {
			setState(5738);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(5736);
				match(ENCRYPTION);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5737);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_operationContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(TSQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(TSQLParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(TSQLParser.DELETE, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Trigger_operationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_operation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTrigger_operation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTrigger_operation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTrigger_operation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_operationContext trigger_operation() throws RecognitionException {
		Trigger_operationContext _localctx = new Trigger_operationContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_trigger_operation);
		try {
			setState(5744);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INSERT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5740);
				match(INSERT);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5741);
				match(UPDATE);
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5742);
				match(DELETE);
				}
				break;
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case ID:
				enterOuterAlt(_localctx, 4);
				{
				setState(5743);
				simple_id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_functionContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(TSQLParser.FUNCTION, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode RETURNS() { return getToken(TSQLParser.RETURNS, 0); }
		public Func_returnContext func_return() {
			return getRuleContext(Func_returnContext.class,0);
		}
		public Func_bodyContext func_body() {
			return getRuleContext(Func_bodyContext.class,0);
		}
		public List<Procedure_paramContext> procedure_param() {
			return getRuleContexts(Procedure_paramContext.class);
		}
		public Procedure_paramContext procedure_param(int i) {
			return getRuleContext(Procedure_paramContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Function_optionContext> function_option() {
			return getRuleContexts(Function_optionContext.class);
		}
		public Function_optionContext function_option(int i) {
			return getRuleContext(Function_optionContext.class,i);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_or_alter_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_or_alter_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_or_alter_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_or_alter_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_functionContext create_or_alter_function() throws RecognitionException {
		Create_or_alter_functionContext _localctx = new Create_or_alter_functionContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_create_or_alter_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5746);
			match(FUNCTION);
			setState(5747);
			qualified_name();
			setState(5748);
			match(LR_BRACKET);
			setState(5757);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL_ID) {
				{
				setState(5749);
				procedure_param();
				setState(5754);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5750);
					match(COMMA);
					setState(5751);
					procedure_param();
					}
					}
					setState(5756);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5759);
			match(RR_BRACKET);
			setState(5760);
			match(RETURNS);
			setState(5761);
			func_return();
			setState(5771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5762);
				match(WITH);
				setState(5763);
				function_option();
				setState(5768);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5764);
					match(COMMA);
					setState(5765);
					function_option();
					}
					}
					setState(5770);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(5774);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5773);
				match(AS);
				}
			}

			setState(5776);
			func_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_returnContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(TSQLParser.TABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Func_returnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_return; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFunc_return(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFunc_return(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFunc_return(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_returnContext func_return() throws RecognitionException {
		Func_returnContext _localctx = new Func_returnContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_func_return);
		int _la;
		try {
			setState(5792);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5778);
				match(TABLE);
				setState(5783);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(5779);
					match(LR_BRACKET);
					setState(5780);
					column_def_table_constraints();
					setState(5781);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5785);
				match(LOCAL_ID);
				setState(5786);
				match(TABLE);
				setState(5787);
				match(LR_BRACKET);
				setState(5788);
				column_def_table_constraints();
				setState(5789);
				match(RR_BRACKET);
				}
				break;
			case CURSOR:
			case DOUBLE:
			case FILLFACTOR:
			case NATIONAL:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(5791);
				data_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_bodyContext extends ParserRuleContext {
		public ExpressionContext ret;
		public TerminalNode RETURN() { return getToken(TSQLParser.RETURN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode BEGIN() { return getToken(TSQLParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(TSQLParser.END, 0); }
		public Sql_clausesContext sql_clauses() {
			return getRuleContext(Sql_clausesContext.class,0);
		}
		public TerminalNode SEMI() { return getToken(TSQLParser.SEMI, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public Assembly_specifierContext assembly_specifier() {
			return getRuleContext(Assembly_specifierContext.class,0);
		}
		public Func_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFunc_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFunc_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFunc_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_bodyContext func_body() throws RecognitionException {
		Func_bodyContext _localctx = new Func_bodyContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_func_body);
		int _la;
		try {
			setState(5811);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5794);
				match(RETURN);
				setState(5795);
				select_statement();
				}
				break;
			case BEGIN:
				enterOuterAlt(_localctx, 2);
				{
				setState(5796);
				match(BEGIN);
				setState(5798);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
				case 1:
					{
					setState(5797);
					sql_clauses();
					}
					break;
				}
				setState(5800);
				match(RETURN);
				setState(5802);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << COALESCE) | (1L << CONVERT) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (FILLFACTOR - 65)) | (1L << (IDENTITY - 65)) | (1L << (LEFT - 65)) | (1L << (NULL - 65)) | (1L << (NULLIF - 65)) | (1L << (OVER - 65)) | (1L << (PRECISION - 65)))) != 0) || ((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (RIGHT - 138)) | (1L << (SESSION_USER - 138)) | (1L << (SYSTEM_USER - 138)) | (1L << (USER - 138)) | (1L << (FUNC_IDENTITY - 138)) | (1L << (FUNC_CURSOR_ROWS - 138)) | (1L << (FUNC_DATEFIRST - 138)) | (1L << (FUNC_ERROR - 138)) | (1L << (FUNC_FETCH_STATUS - 138)) | (1L << (FUNC_PACK_RECEIVED - 138)) | (1L << (FUNC_PROCID - 138)) | (1L << (FUNC_ROWCOUNT - 138)) | (1L << (FUNC_TRANCOUNT - 138)) | (1L << (ABSENT - 138)) | (1L << (ABSOLUTE - 138)) | (1L << (ACCENT_SENSITIVITY - 138)) | (1L << (ACTION - 138)) | (1L << (ACTIVATION - 138)) | (1L << (ACTIVE - 138)) | (1L << (ADDRESS - 138)) | (1L << (AES_128 - 138)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (AES_192 - 202)) | (1L << (AES_256 - 202)) | (1L << (AES - 202)) | (1L << (AFFINITY - 202)) | (1L << (AFTER - 202)) | (1L << (AGGREGATE - 202)) | (1L << (ALGORITHM - 202)) | (1L << (ALLOW_CONNECTIONS - 202)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 202)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 202)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 202)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 202)) | (1L << (ALLOWED - 202)) | (1L << (ANONYMOUS - 202)) | (1L << (ANSI_NULL_DEFAULT - 202)) | (1L << (ANSI_NULLS - 202)) | (1L << (ANSI_PADDING - 202)) | (1L << (ANSI_WARNINGS - 202)) | (1L << (APPEND - 202)) | (1L << (APPLICATION_LOG - 202)) | (1L << (APPLICATION - 202)) | (1L << (APPLY - 202)) | (1L << (ARITHABORT - 202)) | (1L << (ASSEMBLY - 202)) | (1L << (ASYMMETRIC - 202)) | (1L << (ASYNCHRONOUS_COMMIT - 202)) | (1L << (AUDIT_GUID - 202)) | (1L << (AUDIT - 202)) | (1L << (AUTHENTICATION - 202)) | (1L << (AUTO_CLEANUP - 202)) | (1L << (AUTO_CLOSE - 202)) | (1L << (AUTO_CREATE_STATISTICS - 202)) | (1L << (AUTO_SHRINK - 202)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 202)) | (1L << (AUTO_UPDATE_STATISTICS - 202)) | (1L << (AUTO - 202)) | (1L << (AUTOGROW_ALL_FILES - 202)) | (1L << (AUTOGROW_SINGLE_FILE - 202)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 202)) | (1L << (AUTOMATIC - 202)) | (1L << (AVAILABILITY_MODE - 202)) | (1L << (AVAILABILITY - 202)) | (1L << (BACKUP_PRIORITY - 202)) | (1L << (BEFORE - 202)) | (1L << (BEGIN_DIALOG - 202)) | (1L << (BINARY_BASE64 - 202)) | (1L << (BINDING - 202)) | (1L << (BLOB_STORAGE - 202)) | (1L << (BLOCK - 202)) | (1L << (BLOCKING_HIERARCHY - 202)) | (1L << (BLOCKSIZE - 202)) | (1L << (BROKER_INSTANCE - 202)) | (1L << (BROKER - 202)) | (1L << (BUFFER - 202)) | (1L << (BUFFERCOUNT - 202)) | (1L << (BULK_LOGGED - 202)) | (1L << (CACHE - 202)) | (1L << (CALLED - 202)) | (1L << (CALLER - 202)) | (1L << (CAP_CPU_PERCENT - 202)) | (1L << (CAST - 202)) | (1L << (CATALOG - 202)) | (1L << (CATCH - 202)) | (1L << (CERTIFICATE - 202)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (CHANGE_RETENTION - 266)) | (1L << (CHANGE_TRACKING - 266)) | (1L << (CHANGES - 266)) | (1L << (CHANGETABLE - 266)) | (1L << (CHAR - 266)) | (1L << (CHARACTER - 266)) | (1L << (CHECK_EXPIRATION - 266)) | (1L << (CHECK_POLICY - 266)) | (1L << (CHECKSUM - 266)) | (1L << (CLASSIFIER_FUNCTION - 266)) | (1L << (CLEANUP - 266)) | (1L << (CLUSTER - 266)) | (1L << (COLLECTION - 266)) | (1L << (COLUMN_MASTER_KEY - 266)) | (1L << (COMMITTED - 266)) | (1L << (COMPATIBILITY_LEVEL - 266)) | (1L << (COMPRESSION - 266)) | (1L << (CONCAT_NULL_YIELDS_NULL - 266)) | (1L << (CONCAT - 266)) | (1L << (CONFIGURATION - 266)) | (1L << (CONNECT - 266)) | (1L << (CONTAINMENT - 266)) | (1L << (CONTENT - 266)) | (1L << (CONTEXT - 266)) | (1L << (CONTINUE_AFTER_ERROR - 266)) | (1L << (CONTRACT_NAME - 266)) | (1L << (CONTRACT - 266)) | (1L << (CONTROL - 266)) | (1L << (CONVERSATION - 266)) | (1L << (COOKIE - 266)) | (1L << (COPY_ONLY - 266)) | (1L << (COUNTER - 266)) | (1L << (CPU - 266)) | (1L << (CREATE_NEW - 266)) | (1L << (CREATION_DISPOSITION - 266)) | (1L << (CREDENTIAL - 266)) | (1L << (CRYPTOGRAPHIC - 266)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 266)) | (1L << (CURSOR_DEFAULT - 266)) | (1L << (CYCLE - 266)) | (1L << (DATA_COMPRESSION - 266)) | (1L << (DATA_SOURCE - 266)) | (1L << (DATA - 266)) | (1L << (DATABASE_MIRRORING - 266)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 266)) | (1L << (DAYS - 266)) | (1L << (DB_CHAINING - 266)) | (1L << (DB_FAILOVER - 266)) | (1L << (DECRYPTION - 266)) | (1L << (DEFAULT_DATABASE - 266)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 266)) | (1L << (DEFAULT_LANGUAGE - 266)) | (1L << (DEFAULT_SCHEMA - 266)) | (1L << (DELAY - 266)) | (1L << (DELAYED_DURABILITY - 266)) | (1L << (DEPENDENTS - 266)) | (1L << (DES - 266)) | (1L << (DESCRIPTION - 266)) | (1L << (DESX - 266)) | (1L << (DHCP - 266)) | (1L << (DIAGNOSTICS - 266)) | (1L << (DIALOG - 266)) | (1L << (DIFFERENTIAL - 266)) | (1L << (DIRECTORY_NAME - 266)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (DISABLE_BROKER - 330)) | (1L << (DISABLE - 330)) | (1L << (DISABLED - 330)) | (1L << (DOCUMENT - 330)) | (1L << (DTC_SUPPORT - 330)) | (1L << (DYNAMIC - 330)) | (1L << (ELEMENTS - 330)) | (1L << (EMERGENCY - 330)) | (1L << (EMPTY - 330)) | (1L << (ENABLE_BROKER - 330)) | (1L << (ENABLE - 330)) | (1L << (ENABLED - 330)) | (1L << (ENCRYPTED_VALUE - 330)) | (1L << (ENCRYPTION - 330)) | (1L << (ENDPOINT_URL - 330)) | (1L << (ENDPOINT - 330)) | (1L << (ERROR_BROKER_CONVERSATIONS - 330)) | (1L << (ERROR - 330)) | (1L << (EVENT_RETENTION_MODE - 330)) | (1L << (EVENT - 330)) | (1L << (EXCLUSIVE - 330)) | (1L << (EXECUTABLE_FILE - 330)) | (1L << (EXECUTABLE - 330)) | (1L << (EXPAND - 330)) | (1L << (EXPIREDATE - 330)) | (1L << (EXPIRY_DATE - 330)) | (1L << (EXPLICIT - 330)) | (1L << (EXTENSION - 330)) | (1L << (EXTERNAL_ACCESS - 330)) | (1L << (FAIL_OPERATION - 330)) | (1L << (FAILOVER_MODE - 330)) | (1L << (FAILOVER - 330)) | (1L << (FAILURE_CONDITION_LEVEL - 330)) | (1L << (FAILURECONDITIONLEVEL - 330)) | (1L << (FALSE - 330)) | (1L << (FAN_IN - 330)) | (1L << (FAST_FORWARD - 330)) | (1L << (FAST - 330)) | (1L << (FILE_SNAPSHOT - 330)) | (1L << (FILEGROUP - 330)) | (1L << (FILEGROWTH - 330)) | (1L << (FILENAME - 330)) | (1L << (FILEPATH - 330)) | (1L << (FILESTREAM_ON - 330)) | (1L << (FILESTREAM - 330)) | (1L << (FILTER - 330)) | (1L << (FIRST - 330)) | (1L << (FOLLOWING - 330)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 330)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 330)) | (1L << (FORCE - 330)) | (1L << (FORCED - 330)) | (1L << (FORCESEEK - 330)) | (1L << (FORMAT - 330)) | (1L << (FORWARD_ONLY - 330)) | (1L << (FULLSCAN - 330)) | (1L << (FULLTEXT - 330)) | (1L << (GB - 330)) | (1L << (GET - 330)) | (1L << (GLOBAL - 330)) | (1L << (GOVERNOR - 330)) | (1L << (GROUP_MAX_REQUESTS - 330)) | (1L << (HADR - 330)) | (1L << (HASH - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (HASHED - 394)) | (1L << (HEALTH_CHECK_TIMEOUT - 394)) | (1L << (HEALTHCHECKTIMEOUT - 394)) | (1L << (HIGH - 394)) | (1L << (HONOR_BROKER_PRIORITY - 394)) | (1L << (HOURS - 394)) | (1L << (IDENTITY_VALUE - 394)) | (1L << (IIF - 394)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 394)) | (1L << (IMMEDIATE - 394)) | (1L << (IMPERSONATE - 394)) | (1L << (IMPORTANCE - 394)) | (1L << (INCLUDE_NULL_VALUES - 394)) | (1L << (INCLUDE - 394)) | (1L << (INCREMENT - 394)) | (1L << (INCREMENTAL - 394)) | (1L << (INFINITE - 394)) | (1L << (INIT - 394)) | (1L << (INITIATOR - 394)) | (1L << (INPUT - 394)) | (1L << (INSENSITIVE - 394)) | (1L << (INSTEAD - 394)) | (1L << (IO - 394)) | (1L << (IP - 394)) | (1L << (ISOLATION - 394)) | (1L << (JSON - 394)) | (1L << (KB - 394)) | (1L << (KEEP - 394)) | (1L << (KEEPFIXED - 394)) | (1L << (KERBEROS - 394)) | (1L << (KEY_PATH - 394)) | (1L << (KEY_SOURCE - 394)) | (1L << (KEY_STORE_PROVIDER_NAME - 394)) | (1L << (KEYS - 394)) | (1L << (KEYSET - 394)) | (1L << (LANGUAGE - 394)) | (1L << (LAST - 394)) | (1L << (LEVEL - 394)) | (1L << (LIBRARY - 394)) | (1L << (LIFETIME - 394)) | (1L << (LINUX - 394)) | (1L << (LIST - 394)) | (1L << (LISTENER_IP - 394)) | (1L << (LISTENER_PORT - 394)) | (1L << (LISTENER_URL - 394)) | (1L << (LISTENER - 394)) | (1L << (LOB_COMPACTION - 394)) | (1L << (LOCAL_SERVICE_NAME - 394)) | (1L << (LOCAL - 394)) | (1L << (LOCATION - 394)) | (1L << (LOCK_ESCALATION - 394)) | (1L << (LOCK - 394)) | (1L << (LOG - 394)) | (1L << (LOGIN - 394)) | (1L << (LOOP - 394)) | (1L << (LOW - 394)) | (1L << (MANUAL - 394)) | (1L << (MARK - 394)) | (1L << (MASTER - 394)) | (1L << (MATCHED - 394)) | (1L << (MATERIALIZED - 394)) | (1L << (MAX_CPU_PERCENT - 394)) | (1L << (MAX_DISPATCH_LATENCY - 394)) | (1L << (MAX_DOP - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (MAX_EVENT_SIZE - 458)) | (1L << (MAX_FILES - 458)) | (1L << (MAX_IOPS_PER_VOLUME - 458)) | (1L << (MAX_MEMORY_PERCENT - 458)) | (1L << (MAX_MEMORY - 458)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 458)) | (1L << (MAX_PROCESSES - 458)) | (1L << (MAX_QUEUE_READERS - 458)) | (1L << (MAX_ROLLOVER_FILES - 458)) | (1L << (MAX_SIZE - 458)) | (1L << (MAX - 458)) | (1L << (MAXDOP - 458)) | (1L << (MAXRECURSION - 458)) | (1L << (MAXSIZE - 458)) | (1L << (MAXTRANSFER - 458)) | (1L << (MAXVALUE - 458)) | (1L << (MB - 458)) | (1L << (MEDIADESCRIPTION - 458)) | (1L << (MEDIANAME - 458)) | (1L << (MEDIUM - 458)) | (1L << (MEMBER - 458)) | (1L << (MEMORY_OPTIMIZED_DATA - 458)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 458)) | (1L << (MEMORY_OPTIMIZED - 458)) | (1L << (MEMORY_PARTITION_MODE - 458)) | (1L << (MESSAGE_FORWARD_SIZE - 458)) | (1L << (MESSAGE_FORWARDING - 458)) | (1L << (MESSAGE - 458)) | (1L << (MIN_ACTIVE_ROWVERSION - 458)) | (1L << (MIN_CPU_PERCENT - 458)) | (1L << (MIN_IOPS_PER_VOLUME - 458)) | (1L << (MIN_MEMORY_PERCENT - 458)) | (1L << (MINUTES - 458)) | (1L << (MINVALUE - 458)) | (1L << (MIRROR_ADDRESS - 458)) | (1L << (MIRROR - 458)) | (1L << (MIXED_PAGE_ALLOCATION - 458)) | (1L << (MODE - 458)) | (1L << (MODIFY - 458)) | (1L << (MOVE - 458)) | (1L << (MULTI_USER - 458)) | (1L << (MUST_CHANGE - 458)) | (1L << (NAME - 458)) | (1L << (NCHAR - 458)) | (1L << (NEGOTIATE - 458)) | (1L << (NESTED_TRIGGERS - 458)) | (1L << (NEW_ACCOUNT - 458)) | (1L << (NEW_BROKER - 458)) | (1L << (NEW_PASSWORD - 458)) | (1L << (NEWNAME - 458)) | (1L << (NEXT - 458)) | (1L << (NO_CHECKSUM - 458)) | (1L << (NO_COMPRESSION - 458)) | (1L << (NO_EVENT_LOSS - 458)) | (1L << (NO_TRUNCATE - 458)) | (1L << (NO_WAIT - 458)) | (1L << (NO - 458)) | (1L << (NODES - 458)) | (1L << (NOEXPAND - 458)) | (1L << (NOFORMAT - 458)) | (1L << (NOINIT - 458)) | (1L << (NON_TRANSACTED_ACCESS - 458)) | (1L << (NONE - 458)) | (1L << (NORECOMPUTE - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (NORECOVERY - 522)) | (1L << (NOREWIND - 522)) | (1L << (NOSKIP - 522)) | (1L << (NOTIFICATION - 522)) | (1L << (NOUNLOAD - 522)) | (1L << (NOWAIT - 522)) | (1L << (NTLM - 522)) | (1L << (NUMANODE - 522)) | (1L << (NUMERIC_ROUNDABORT - 522)) | (1L << (OBJECT - 522)) | (1L << (OFFLINE - 522)) | (1L << (OFFSET - 522)) | (1L << (OLD_ACCOUNT - 522)) | (1L << (OLD_PASSWORD - 522)) | (1L << (ON_FAILURE - 522)) | (1L << (ONLINE - 522)) | (1L << (ONLY - 522)) | (1L << (OPEN_EXISTING - 522)) | (1L << (OPENJSON - 522)) | (1L << (OPTIMISTIC - 522)) | (1L << (OPTIMIZE - 522)) | (1L << (OUT - 522)) | (1L << (OUTPUT - 522)) | (1L << (OWNER - 522)) | (1L << (PAGE_VERIFY - 522)) | (1L << (PARAMETERIZATION - 522)) | (1L << (PARSE - 522)) | (1L << (PARTIAL - 522)) | (1L << (PARTITION - 522)) | (1L << (PARTITIONS - 522)) | (1L << (PARTNER - 522)) | (1L << (PASSWORD - 522)) | (1L << (PATH - 522)) | (1L << (PAUSE - 522)) | (1L << (PER_CPU - 522)) | (1L << (PER_DB - 522)) | (1L << (PER_NODE - 522)) | (1L << (PERMISSION_SET - 522)) | (1L << (PERSIST_SAMPLE_PERSENT - 522)) | (1L << (PERSISTED - 522)) | (1L << (PERSISTENT_LOG_BUFFER - 522)) | (1L << (PLATFORM - 522)) | (1L << (POISON_MESSAGE_HANDLING - 522)) | (1L << (POLICY - 522)) | (1L << (POOL - 522)) | (1L << (POPULATION - 522)) | (1L << (PORT - 522)) | (1L << (PRECEDING - 522)) | (1L << (PREDICATE - 522)) | (1L << (PRIMARY_ROLE - 522)) | (1L << (PRIOR - 522)) | (1L << (PRIORITY_LEVEL - 522)) | (1L << (PRIORITY - 522)) | (1L << (PRIVATE_KEY - 522)) | (1L << (PRIVATE - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (PROCEDURE_NAME - 522)) | (1L << (PROCESS - 522)) | (1L << (PROFILE - 522)) | (1L << (PROPERTY_DESCRIPTION - 522)) | (1L << (PROPERTY_INT_ID - 522)) | (1L << (PROPERTY_SET_GUID - 522)) | (1L << (PROPERTY - 522)) | (1L << (PROVIDER_KEY_NAME - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (PROVIDER - 586)) | (1L << (QUERYTRACEON - 586)) | (1L << (QUEUE_DELAY - 586)) | (1L << (QUEUE - 586)) | (1L << (QUOTED_IDENTIFIER - 586)) | (1L << (R_LETTER - 586)) | (1L << (RANGE - 586)) | (1L << (RAW - 586)) | (1L << (RC2 - 586)) | (1L << (RC4_128 - 586)) | (1L << (RC4 - 586)) | (1L << (READ_COMMITTED_SNAPSHOT - 586)) | (1L << (READ_ONLY_ROUTING_LIST - 586)) | (1L << (READ_ONLY - 586)) | (1L << (READ_WRITE_FILEGROUPS - 586)) | (1L << (READ_WRITE - 586)) | (1L << (READWRITE - 586)) | (1L << (READONLY - 586)) | (1L << (REBUILD - 586)) | (1L << (RECEIVE - 586)) | (1L << (RECOMPILE - 586)) | (1L << (RECOVERY - 586)) | (1L << (RECURSIVE_TRIGGERS - 586)) | (1L << (REGENERATE - 586)) | (1L << (RELATED_CONVERSATION_GROUP - 586)) | (1L << (RELATED_CONVERSATION - 586)) | (1L << (RELATIVE - 586)) | (1L << (REMOTE_SERVICE_NAME - 586)) | (1L << (REMOTE - 586)) | (1L << (REMOVE - 586)) | (1L << (REORGANIZE - 586)) | (1L << (REPEATABLE - 586)) | (1L << (REPLICA - 586)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 586)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 586)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 586)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 586)) | (1L << (REQUIRED - 586)) | (1L << (RESAMPLE - 586)) | (1L << (RESERVE_DISK_SPACE - 586)) | (1L << (RESET - 586)) | (1L << (RESOURCE_MANAGER_LOCATION - 586)) | (1L << (RESOURCE - 586)) | (1L << (RESTART - 586)) | (1L << (RESTRICTED_USER - 586)) | (1L << (RESULT - 586)) | (1L << (RESUME - 586)) | (1L << (RETAINDAYS - 586)) | (1L << (RETENTION - 586)) | (1L << (RETURNS - 586)) | (1L << (REWIND - 586)) | (1L << (ROBUST - 586)) | (1L << (ROLE - 586)) | (1L << (ROOT - 586)) | (1L << (ROUTE - 586)) | (1L << (ROW - 586)) | (1L << (ROWGUID - 586)) | (1L << (ROWS - 586)) | (1L << (RSA_1024 - 586)) | (1L << (RSA_2048 - 586)) | (1L << (RSA_3072 - 586)) | (1L << (RSA_4096 - 586)) | (1L << (RSA_512 - 586)) | (1L << (SAFE - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (SAFETY - 650)) | (1L << (SAMPLE - 650)) | (1L << (SCHEDULER - 650)) | (1L << (SCHEMABINDING - 650)) | (1L << (SCHEME - 650)) | (1L << (SCOPED - 650)) | (1L << (SCROLL_LOCKS - 650)) | (1L << (SCROLL - 650)) | (1L << (SEARCH - 650)) | (1L << (SECONDARY_ONLY - 650)) | (1L << (SECONDARY_ROLE - 650)) | (1L << (SECONDARY - 650)) | (1L << (SECONDS - 650)) | (1L << (SECRET - 650)) | (1L << (SECURITY_LOG - 650)) | (1L << (SECURITY - 650)) | (1L << (SEEDING_MODE - 650)) | (1L << (SELECTIVE - 650)) | (1L << (SELF - 650)) | (1L << (SEMI_SENSITIVE - 650)) | (1L << (SEND - 650)) | (1L << (SENT - 650)) | (1L << (SEQUENCE - 650)) | (1L << (SERIALIZABLE - 650)) | (1L << (SERVER - 650)) | (1L << (SERVICE_BROKER - 650)) | (1L << (SERVICE_NAME - 650)) | (1L << (SERVICE - 650)) | (1L << (SESSION_TIMEOUT - 650)) | (1L << (SESSION - 650)) | (1L << (SETERROR - 650)) | (1L << (SETS - 650)) | (1L << (SHARE - 650)) | (1L << (SHOWPLAN - 650)) | (1L << (SID - 650)) | (1L << (SIGNATURE - 650)) | (1L << (SIMPLE - 650)) | (1L << (SINGLE_USER - 650)) | (1L << (SINGLETON - 650)) | (1L << (SIZE - 650)) | (1L << (SKIP_KEYWORD - 650)) | (1L << (SNAPSHOT - 650)) | (1L << (SOFTNUMA - 650)) | (1L << (SOURCE - 650)) | (1L << (SPARSE - 650)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 650)) | (1L << (SPECIFICATION - 650)) | (1L << (SPLIT - 650)) | (1L << (SQL - 650)) | (1L << (SQLDUMPERFLAGS - 650)) | (1L << (SQLDUMPERPATH - 650)) | (1L << (SQLDUMPERTIMEOUT - 650)) | (1L << (STANDBY - 650)) | (1L << (START_DATE - 650)) | (1L << (START - 650)) | (1L << (STARTED - 650)) | (1L << (STARTUP_STATE - 650)) | (1L << (STATE - 650)) | (1L << (STATIC - 650)) | (1L << (STATISTICAL_SEMANTICS - 650)) | (1L << (STATS - 650)) | (1L << (STATUS - 650)) | (1L << (STOP_ON_ERROR - 650)) | (1L << (STOP - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (STOPLIST - 714)) | (1L << (STOPPED - 714)) | (1L << (STRING_AGG - 714)) | (1L << (SUBJECT - 714)) | (1L << (SUPPORTED - 714)) | (1L << (SUSPEND - 714)) | (1L << (SYMMETRIC - 714)) | (1L << (SYNCHRONOUS_COMMIT - 714)) | (1L << (SYNONYM - 714)) | (1L << (SYSTEM - 714)) | (1L << (TAKE - 714)) | (1L << (TAPE - 714)) | (1L << (TARGET_RECOVERY_TIME - 714)) | (1L << (TARGET - 714)) | (1L << (TB - 714)) | (1L << (TCP - 714)) | (1L << (TEXTIMAGE_ON - 714)) | (1L << (THROW - 714)) | (1L << (TIES - 714)) | (1L << (TIME - 714)) | (1L << (TIMEOUT - 714)) | (1L << (TIMER - 714)) | (1L << (TORN_PAGE_DETECTION - 714)) | (1L << (TRACK_CAUSALITY - 714)) | (1L << (TRACK_COLUMNS_UPDATED - 714)) | (1L << (TRANSFER - 714)) | (1L << (TRANSFORM_NOISE_WORDS - 714)) | (1L << (TRIM - 714)) | (1L << (TRIPLE_DES_3KEY - 714)) | (1L << (TRIPLE_DES - 714)) | (1L << (TRUE - 714)) | (1L << (TRUSTWORTHY - 714)) | (1L << (TRY - 714)) | (1L << (TSQL - 714)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 714)) | (1L << (TYPE_WARNING - 714)) | (1L << (TYPE - 714)) | (1L << (UNBOUNDED - 714)) | (1L << (UNCHECKED - 714)) | (1L << (UNCOMMITTED - 714)) | (1L << (UNDEFINED - 714)) | (1L << (UNKNOWN - 714)) | (1L << (UNLIMITED - 714)) | (1L << (UNLOCK - 714)) | (1L << (UNSAFE - 714)) | (1L << (URL - 714)) | (1L << (USED - 714)) | (1L << (USING - 714)) | (1L << (VALID_XML - 714)) | (1L << (VALIDATION - 714)) | (1L << (VALUE - 714)) | (1L << (VERBOSELOGGING - 714)) | (1L << (VERSION - 714)) | (1L << (VIEW_METADATA - 714)) | (1L << (VIEWS - 714)) | (1L << (VISIBILITY - 714)) | (1L << (WAIT - 714)) | (1L << (WELL_FORMED_XML - 714)) | (1L << (WINDOWS - 714)) | (1L << (WITHOUT_ARRAY_WRAPPER - 714)) | (1L << (WITHOUT - 714)) | (1L << (WITNESS - 714)) | (1L << (WORK - 714)) | (1L << (WORKLOAD - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (XML - 778)) | (1L << (XMLDATA - 778)) | (1L << (XMLNAMESPACES - 778)) | (1L << (XMLSCHEMA - 778)) | (1L << (XQUERY - 778)) | (1L << (XSINIL - 778)) | (1L << (LEFT_FIGURE_PAREN - 778)) | (1L << (DOUBLE_QUOTE_ID - 778)) | (1L << (SQUARE_BRACKET_ID - 778)) | (1L << (LOCAL_ID - 778)) | (1L << (DECIMAL - 778)) | (1L << (ID - 778)) | (1L << (STRING - 778)) | (1L << (BINARY - 778)) | (1L << (FLOAT - 778)) | (1L << (REAL - 778)) | (1L << (IPV4_ADDR - 778)) | (1L << (DOLLAR - 778)) | (1L << (LR_BRACKET - 778)) | (1L << (PLUS - 778)) | (1L << (MINUS - 778)) | (1L << (BIT_NOT - 778)))) != 0)) {
					{
					setState(5801);
					((Func_bodyContext)_localctx).ret = expression(0);
					}
				}

				setState(5805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI) {
					{
					setState(5804);
					match(SEMI);
					}
				}

				setState(5807);
				match(END);
				}
				break;
			case EXTERNAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5808);
				match(EXTERNAL);
				setState(5809);
				match(NAME);
				setState(5810);
				assembly_specifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assembly_specifierContext extends ParserRuleContext {
		public IdContext assembly_name;
		public IdContext class_name;
		public IdContext method_name;
		public List<TerminalNode> DOT() { return getTokens(TSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSQLParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Assembly_specifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assembly_specifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAssembly_specifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAssembly_specifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAssembly_specifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assembly_specifierContext assembly_specifier() throws RecognitionException {
		Assembly_specifierContext _localctx = new Assembly_specifierContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_assembly_specifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5813);
			((Assembly_specifierContext)_localctx).assembly_name = id();
			setState(5814);
			match(DOT);
			setState(5815);
			((Assembly_specifierContext)_localctx).class_name = id();
			setState(5816);
			match(DOT);
			setState(5817);
			((Assembly_specifierContext)_localctx).method_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_paramContext extends ParserRuleContext {
		public Token name;
		public Default_valueContext default_val;
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public Arg_modeContext arg_mode() {
			return getRuleContext(Arg_modeContext.class,0);
		}
		public TerminalNode READONLY() { return getToken(TSQLParser.READONLY, 0); }
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public Procedure_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterProcedure_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitProcedure_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitProcedure_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_paramContext procedure_param() throws RecognitionException {
		Procedure_paramContext _localctx = new Procedure_paramContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_procedure_param);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5819);
			((Procedure_paramContext)_localctx).name = match(LOCAL_ID);
			setState(5821);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(5820);
				match(AS);
				}
			}

			setState(5823);
			data_type();
			setState(5826);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(5824);
				match(EQUAL);
				setState(5825);
				((Procedure_paramContext)_localctx).default_val = default_value();
				}
			}

			setState(5829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUT || _la==OUTPUT) {
				{
				setState(5828);
				arg_mode();
				}
			}

			setState(5832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READONLY) {
				{
				setState(5831);
				match(READONLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Arg_modeContext extends ParserRuleContext {
		public TerminalNode OUT() { return getToken(TSQLParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(TSQLParser.OUTPUT, 0); }
		public Arg_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arg_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterArg_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitArg_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitArg_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Arg_modeContext arg_mode() throws RecognitionException {
		Arg_modeContext _localctx = new Arg_modeContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_arg_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5834);
			_la = _input.LA(1);
			if ( !(_la==OUT || _la==OUTPUT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSQLParser.RECOMPILE, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Procedure_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterProcedure_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitProcedure_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitProcedure_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_optionContext procedure_option() throws RecognitionException {
		Procedure_optionContext _localctx = new Procedure_optionContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_procedure_option);
		try {
			setState(5839);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(5836);
				match(ENCRYPTION);
				}
				break;
			case RECOMPILE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5837);
				match(RECOMPILE);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5838);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSQLParser.SCHEMABINDING, 0); }
		public TerminalNode RETURNS() { return getToken(TSQLParser.RETURNS, 0); }
		public List<TerminalNode> NULL() { return getTokens(TSQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(TSQLParser.NULL, i);
		}
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode INPUT() { return getToken(TSQLParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(TSQLParser.CALLED, 0); }
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Function_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFunction_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFunction_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFunction_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_optionContext function_option() throws RecognitionException {
		Function_optionContext _localctx = new Function_optionContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_function_option);
		try {
			setState(5853);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(5841);
				match(ENCRYPTION);
				}
				break;
			case SCHEMABINDING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5842);
				match(SCHEMABINDING);
				}
				break;
			case RETURNS:
				enterOuterAlt(_localctx, 3);
				{
				setState(5843);
				match(RETURNS);
				setState(5844);
				match(NULL);
				setState(5845);
				match(ON);
				setState(5846);
				match(NULL);
				setState(5847);
				match(INPUT);
				}
				break;
			case CALLED:
				enterOuterAlt(_localctx, 4);
				{
				setState(5848);
				match(CALLED);
				setState(5849);
				match(ON);
				setState(5850);
				match(NULL);
				setState(5851);
				match(INPUT);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5852);
				execute_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_statisticsContext extends ParserRuleContext {
		public TerminalNode STATISTICS() { return getToken(TSQLParser.STATISTICS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public Table_name_with_hintContext table_name_with_hint() {
			return getRuleContext(Table_name_with_hintContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Update_statistics_with_optionContext> update_statistics_with_option() {
			return getRuleContexts(Update_statistics_with_optionContext.class);
		}
		public Update_statistics_with_optionContext update_statistics_with_option(int i) {
			return getRuleContext(Update_statistics_with_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_statistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_statistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_statisticsContext create_statistics() throws RecognitionException {
		Create_statisticsContext _localctx = new Create_statisticsContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_create_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5855);
			match(STATISTICS);
			setState(5856);
			id();
			setState(5857);
			match(ON);
			setState(5858);
			table_name_with_hint();
			setState(5859);
			match(LR_BRACKET);
			setState(5860);
			column_name_list();
			setState(5861);
			match(RR_BRACKET);
			setState(5871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,780,_ctx) ) {
			case 1:
				{
				setState(5862);
				match(WITH);
				setState(5863);
				update_statistics_with_option();
				setState(5868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5864);
					match(COMMA);
					setState(5865);
					update_statistics_with_option();
					}
					}
					setState(5870);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statisticsContext extends ParserRuleContext {
		public Qualified_nameContext table_name;
		public Qualified_nameContext index_name;
		public TerminalNode UPDATE() { return getToken(TSQLParser.UPDATE, 0); }
		public TerminalNode STATISTICS() { return getToken(TSQLParser.STATISTICS, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Names_referencesContext names_references() {
			return getRuleContext(Names_referencesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Update_statistics_with_optionContext> update_statistics_with_option() {
			return getRuleContexts(Update_statistics_with_optionContext.class);
		}
		public Update_statistics_with_optionContext update_statistics_with_option(int i) {
			return getRuleContext(Update_statistics_with_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Update_statisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterUpdate_statistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitUpdate_statistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitUpdate_statistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statisticsContext update_statistics() throws RecognitionException {
		Update_statisticsContext _localctx = new Update_statisticsContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_update_statistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5873);
			match(UPDATE);
			setState(5874);
			match(STATISTICS);
			setState(5875);
			((Update_statisticsContext)_localctx).table_name = qualified_name();
			setState(5881);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,781,_ctx) ) {
			case 1:
				{
				setState(5876);
				((Update_statisticsContext)_localctx).index_name = qualified_name();
				}
				break;
			case 2:
				{
				setState(5877);
				match(LR_BRACKET);
				setState(5878);
				names_references();
				setState(5879);
				match(RR_BRACKET);
				}
				break;
			}
			setState(5892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,783,_ctx) ) {
			case 1:
				{
				setState(5883);
				match(WITH);
				setState(5884);
				update_statistics_with_option();
				setState(5889);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5885);
					match(COMMA);
					setState(5886);
					update_statistics_with_option();
					}
					}
					setState(5891);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statistics_with_optionContext extends ParserRuleContext {
		public TerminalNode FULLSCAN() { return getToken(TSQLParser.FULLSCAN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode PERSIST_SAMPLE_PERSENT() { return getToken(TSQLParser.PERSIST_SAMPLE_PERSENT, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode SAMPLE() { return getToken(TSQLParser.SAMPLE, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public TerminalNode PERCENT() { return getToken(TSQLParser.PERCENT, 0); }
		public TerminalNode ROWS() { return getToken(TSQLParser.ROWS, 0); }
		public TerminalNode RESAMPLE() { return getToken(TSQLParser.RESAMPLE, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode PARTITIONS() { return getToken(TSQLParser.PARTITIONS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> TO() { return getTokens(TSQLParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSQLParser.TO, i);
		}
		public TerminalNode NORECOMPUTE() { return getToken(TSQLParser.NORECOMPUTE, 0); }
		public TerminalNode INCREMENTAL() { return getToken(TSQLParser.INCREMENTAL, 0); }
		public TerminalNode MAXDOP() { return getToken(TSQLParser.MAXDOP, 0); }
		public Update_statistics_with_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statistics_with_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterUpdate_statistics_with_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitUpdate_statistics_with_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitUpdate_statistics_with_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statistics_with_optionContext update_statistics_with_option() throws RecognitionException {
		Update_statistics_with_optionContext _localctx = new Update_statistics_with_optionContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_update_statistics_with_option);
		int _la;
		try {
			setState(5935);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FULLSCAN:
				enterOuterAlt(_localctx, 1);
				{
				setState(5894);
				match(FULLSCAN);
				setState(5899);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,784,_ctx) ) {
				case 1:
					{
					setState(5895);
					match(COMMA);
					setState(5896);
					match(PERSIST_SAMPLE_PERSENT);
					setState(5897);
					match(EQUAL);
					setState(5898);
					on_off();
					}
					break;
				}
				}
				break;
			case SAMPLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5901);
				match(SAMPLE);
				setState(5902);
				match(DECIMAL);
				setState(5903);
				_la = _input.LA(1);
				if ( !(_la==PERCENT || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5908);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
				case 1:
					{
					setState(5904);
					match(COMMA);
					setState(5905);
					match(PERSIST_SAMPLE_PERSENT);
					setState(5906);
					match(EQUAL);
					setState(5907);
					on_off();
					}
					break;
				}
				}
				break;
			case RESAMPLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5910);
				match(RESAMPLE);
				{
				setState(5911);
				match(ON);
				setState(5912);
				match(PARTITIONS);
				setState(5913);
				match(LR_BRACKET);
				setState(5923); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5915);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5914);
						match(COMMA);
						}
					}

					setState(5921);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,787,_ctx) ) {
					case 1:
						{
						setState(5917);
						match(DECIMAL);
						}
						break;
					case 2:
						{
						setState(5918);
						match(DECIMAL);
						setState(5919);
						match(TO);
						setState(5920);
						match(DECIMAL);
						}
						break;
					}
					}
					}
					setState(5925); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DECIMAL || _la==COMMA );
				setState(5927);
				match(RR_BRACKET);
				}
				}
				break;
			case NORECOMPUTE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5928);
				match(NORECOMPUTE);
				}
				break;
			case INCREMENTAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(5929);
				match(INCREMENTAL);
				setState(5930);
				match(EQUAL);
				setState(5931);
				on_off();
				}
				break;
			case MAXDOP:
				enterOuterAlt(_localctx, 6);
				{
				setState(5932);
				match(MAXDOP);
				setState(5933);
				match(EQUAL);
				setState(5934);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_tableContext extends ParserRuleContext {
		public Id_or_defaultContext tablespace;
		public IdContext partition_col_name;
		public Id_or_defaultContext textimage;
		public Id_or_defaultContext filestream;
		public TerminalNode TABLE() { return getToken(TSQLParser.TABLE, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(TSQLParser.TEXTIMAGE_ON, 0); }
		public TerminalNode FILESTREAM_ON() { return getToken(TSQLParser.FILESTREAM_ON, 0); }
		public List<Table_optionsContext> table_options() {
			return getRuleContexts(Table_optionsContext.class);
		}
		public Table_optionsContext table_options(int i) {
			return getRuleContext(Table_optionsContext.class,i);
		}
		public List<Id_or_defaultContext> id_or_default() {
			return getRuleContexts(Id_or_defaultContext.class);
		}
		public Id_or_defaultContext id_or_default(int i) {
			return getRuleContext(Id_or_defaultContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Create_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_tableContext create_table() throws RecognitionException {
		Create_tableContext _localctx = new Create_tableContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_create_table);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5937);
			match(TABLE);
			setState(5938);
			qualified_name();
			setState(5939);
			match(LR_BRACKET);
			setState(5940);
			column_def_table_constraints();
			setState(5942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5941);
				match(COMMA);
				}
			}

			setState(5944);
			match(RR_BRACKET);
			setState(5953);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(5945);
				match(ON);
				setState(5946);
				((Create_tableContext)_localctx).tablespace = id_or_default();
				setState(5951);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,791,_ctx) ) {
				case 1:
					{
					setState(5947);
					match(LR_BRACKET);
					setState(5948);
					((Create_tableContext)_localctx).partition_col_name = id();
					setState(5949);
					match(RR_BRACKET);
					}
					break;
				}
				}
			}

			setState(5957);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEXTIMAGE_ON) {
				{
				setState(5955);
				match(TEXTIMAGE_ON);
				setState(5956);
				((Create_tableContext)_localctx).textimage = id_or_default();
				}
			}

			setState(5961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILESTREAM_ON) {
				{
				setState(5959);
				match(FILESTREAM_ON);
				setState(5960);
				((Create_tableContext)_localctx).filestream = id_or_default();
				}
			}

			setState(5966);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,795,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5963);
					table_options();
					}
					} 
				}
				setState(5968);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,795,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_or_defaultContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public Id_or_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_or_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterId_or_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitId_or_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitId_or_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_or_defaultContext id_or_default() throws RecognitionException {
		Id_or_defaultContext _localctx = new Id_or_defaultContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_id_or_default);
		try {
			setState(5971);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5969);
				id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5970);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_or_primaryContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PRIMARY() { return getToken(TSQLParser.PRIMARY, 0); }
		public Id_or_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_or_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterId_or_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitId_or_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitId_or_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_or_primaryContext id_or_primary() throws RecognitionException {
		Id_or_primaryContext _localctx = new Id_or_primaryContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_id_or_primary);
		try {
			setState(5975);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5973);
				id();
				}
				break;
			case PRIMARY:
				enterOuterAlt(_localctx, 2);
				{
				setState(5974);
				match(PRIMARY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Table_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTable_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTable_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTable_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_optionsContext table_options() throws RecognitionException {
		Table_optionsContext _localctx = new Table_optionsContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_table_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5977);
			match(WITH);
			setState(5997);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(5978);
				match(LR_BRACKET);
				setState(5979);
				index_option();
				setState(5984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5980);
					match(COMMA);
					setState(5981);
					index_option();
					}
					}
					setState(5986);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5987);
				match(RR_BRACKET);
				}
				break;
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case ID:
				{
				setState(5989);
				index_option();
				setState(5994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5990);
					match(COMMA);
					setState(5991);
					index_option();
					}
					}
					setState(5996);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_or_alter_viewContext extends ParserRuleContext {
		public TerminalNode VIEW() { return getToken(TSQLParser.VIEW, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<View_attributeContext> view_attribute() {
			return getRuleContexts(View_attributeContext.class);
		}
		public View_attributeContext view_attribute(int i) {
			return getRuleContext(View_attributeContext.class,i);
		}
		public With_check_optionContext with_check_option() {
			return getRuleContext(With_check_optionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_or_alter_viewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_or_alter_view; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_or_alter_view(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_or_alter_view(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_or_alter_view(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_or_alter_viewContext create_or_alter_view() throws RecognitionException {
		Create_or_alter_viewContext _localctx = new Create_or_alter_viewContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_create_or_alter_view);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5999);
			match(VIEW);
			setState(6000);
			qualified_name();
			setState(6005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(6001);
				match(LR_BRACKET);
				setState(6002);
				column_name_list();
				setState(6003);
				match(RR_BRACKET);
				}
			}

			setState(6016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6007);
				match(WITH);
				setState(6008);
				view_attribute();
				setState(6013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6009);
					match(COMMA);
					setState(6010);
					view_attribute();
					}
					}
					setState(6015);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6018);
			match(AS);
			setState(6019);
			select_statement();
			setState(6021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6020);
				with_check_option();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_check_optionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(TSQLParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(TSQLParser.OPTION, 0); }
		public With_check_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_check_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWith_check_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWith_check_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWith_check_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_check_optionContext with_check_option() throws RecognitionException {
		With_check_optionContext _localctx = new With_check_optionContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_with_check_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6023);
			match(WITH);
			setState(6024);
			match(CHECK);
			setState(6025);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_attributeContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSQLParser.SCHEMABINDING, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(TSQLParser.VIEW_METADATA, 0); }
		public View_attributeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_attribute; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterView_attribute(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitView_attribute(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitView_attribute(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_attributeContext view_attribute() throws RecognitionException {
		View_attributeContext _localctx = new View_attributeContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_view_attribute);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6027);
			_la = _input.LA(1);
			if ( !(_la==ENCRYPTION || _la==SCHEMABINDING || _la==VIEW_METADATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_tableContext extends ParserRuleContext {
		public Qualified_nameContext name;
		public Token nocheck_add;
		public Token nocheck_check;
		public Token nocheck;
		public List<TerminalNode> TABLE() { return getTokens(TSQLParser.TABLE); }
		public TerminalNode TABLE(int i) {
			return getToken(TSQLParser.TABLE, i);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(TSQLParser.LOCK_ESCALATION, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(TSQLParser.ALTER, 0); }
		public TerminalNode COLUMN() { return getToken(TSQLParser.COLUMN, 0); }
		public Column_definitionContext column_definition() {
			return getRuleContext(Column_definitionContext.class,0);
		}
		public TerminalNode DROP() { return getToken(TSQLParser.DROP, 0); }
		public List<Table_action_dropContext> table_action_drop() {
			return getRuleContexts(Table_action_dropContext.class);
		}
		public Table_action_dropContext table_action_drop(int i) {
			return getRuleContext(Table_action_dropContext.class,i);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSQLParser.CONSTRAINT, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode TRIGGER() { return getToken(TSQLParser.TRIGGER, 0); }
		public TerminalNode CHANGE_TRACKING() { return getToken(TSQLParser.CHANGE_TRACKING, 0); }
		public TerminalNode REBUILD() { return getToken(TSQLParser.REBUILD, 0); }
		public Table_optionsContext table_options() {
			return getRuleContext(Table_optionsContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(TSQLParser.AUTO, 0); }
		public TerminalNode DISABLE() { return getToken(TSQLParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(TSQLParser.ENABLE, 0); }
		public List<TerminalNode> CHECK() { return getTokens(TSQLParser.CHECK); }
		public TerminalNode CHECK(int i) {
			return getToken(TSQLParser.CHECK, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> NOCHECK() { return getTokens(TSQLParser.NOCHECK); }
		public TerminalNode NOCHECK(int i) {
			return getToken(TSQLParser.NOCHECK, i);
		}
		public TerminalNode TRACK_COLUMNS_UPDATED() { return getToken(TSQLParser.TRACK_COLUMNS_UPDATED, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public Alter_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_tableContext alter_table() throws RecognitionException {
		Alter_tableContext _localctx = new Alter_tableContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_alter_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6029);
			match(TABLE);
			setState(6030);
			((Alter_tableContext)_localctx).name = qualified_name();
			setState(6100);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,814,_ctx) ) {
			case 1:
				{
				setState(6031);
				match(SET);
				setState(6032);
				match(LR_BRACKET);
				setState(6033);
				match(LOCK_ESCALATION);
				setState(6034);
				match(EQUAL);
				setState(6035);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==AUTO || _la==DISABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6036);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(6042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6037);
					match(WITH);
					setState(6040);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHECK:
						{
						setState(6038);
						match(CHECK);
						}
						break;
					case NOCHECK:
						{
						setState(6039);
						((Alter_tableContext)_localctx).nocheck_add = match(NOCHECK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(6044);
				match(ADD);
				setState(6045);
				column_def_table_constraints();
				}
				break;
			case 3:
				{
				setState(6046);
				match(ALTER);
				setState(6047);
				match(COLUMN);
				setState(6048);
				column_definition();
				}
				break;
			case 4:
				{
				setState(6049);
				match(DROP);
				setState(6050);
				table_action_drop();
				setState(6055);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6051);
					match(COMMA);
					setState(6052);
					table_action_drop();
					}
					}
					setState(6057);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				{
				setState(6063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(6058);
					match(WITH);
					setState(6061);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CHECK:
						{
						setState(6059);
						match(CHECK);
						}
						break;
					case NOCHECK:
						{
						setState(6060);
						((Alter_tableContext)_localctx).nocheck_check = match(NOCHECK);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(6067);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CHECK:
					{
					setState(6065);
					match(CHECK);
					}
					break;
				case NOCHECK:
					{
					setState(6066);
					((Alter_tableContext)_localctx).nocheck = match(NOCHECK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6069);
				match(CONSTRAINT);
				setState(6070);
				id();
				setState(6075);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6071);
					match(COMMA);
					setState(6072);
					id();
					}
					}
					setState(6077);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				{
				setState(6078);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6079);
				match(TRIGGER);
				setState(6080);
				id();
				setState(6085);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6081);
					match(COMMA);
					setState(6082);
					id();
					}
					}
					setState(6087);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				{
				setState(6088);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6089);
				match(CHANGE_TRACKING);
				setState(6096);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,813,_ctx) ) {
				case 1:
					{
					setState(6090);
					match(WITH);
					setState(6091);
					match(LR_BRACKET);
					setState(6092);
					match(TRACK_COLUMNS_UPDATED);
					setState(6093);
					match(EQUAL);
					setState(6094);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6095);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 8:
				{
				setState(6098);
				match(REBUILD);
				setState(6099);
				table_options();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_action_dropContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode COLUMN() { return getToken(TSQLParser.COLUMN, 0); }
		public TerminalNode IF() { return getToken(TSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSQLParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSQLParser.CONSTRAINT, 0); }
		public Table_action_dropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_action_drop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTable_action_drop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTable_action_drop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTable_action_drop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_action_dropContext table_action_drop() throws RecognitionException {
		Table_action_dropContext _localctx = new Table_action_dropContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_table_action_drop);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6106);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COLUMN:
				{
				setState(6102);
				match(COLUMN);
				}
				break;
			case CONSTRAINT:
			case FILLFACTOR:
			case IF:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(6104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(6103);
					match(CONSTRAINT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6110);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(6108);
				match(IF);
				setState(6109);
				match(EXISTS);
				}
			}

			setState(6112);
			id();
			setState(6117);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,818,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6113);
					match(COMMA);
					setState(6114);
					id();
					}
					} 
				}
				setState(6119);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,818,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_databaseContext extends ParserRuleContext {
		public IdContext database;
		public IdContext new_name;
		public IdContext collation;
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode CURRENT() { return getToken(TSQLParser.CURRENT, 0); }
		public TerminalNode MODIFY() { return getToken(TSQLParser.MODIFY, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode COLLATE() { return getToken(TSQLParser.COLLATE, 0); }
		public File_and_filegroup_optionsContext file_and_filegroup_options() {
			return getRuleContext(File_and_filegroup_optionsContext.class,0);
		}
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public Database_optionspecContext database_optionspec() {
			return getRuleContext(Database_optionspecContext.class,0);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Alter_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_databaseContext alter_database() throws RecognitionException {
		Alter_databaseContext _localctx = new Alter_databaseContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_alter_database);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6120);
			match(DATABASE);
			setState(6123);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(6121);
				((Alter_databaseContext)_localctx).database = id();
				}
				break;
			case CURRENT:
				{
				setState(6122);
				match(CURRENT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,821,_ctx) ) {
			case 1:
				{
				setState(6125);
				match(MODIFY);
				setState(6126);
				match(NAME);
				setState(6127);
				match(EQUAL);
				setState(6128);
				((Alter_databaseContext)_localctx).new_name = id();
				}
				break;
			case 2:
				{
				setState(6129);
				match(COLLATE);
				setState(6130);
				((Alter_databaseContext)_localctx).collation = id();
				}
				break;
			case 3:
				{
				setState(6131);
				file_and_filegroup_options();
				}
				break;
			case 4:
				{
				setState(6132);
				match(SET);
				setState(6133);
				database_optionspec();
				setState(6136);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,820,_ctx) ) {
				case 1:
					{
					setState(6134);
					match(WITH);
					setState(6135);
					termination();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_database_encryption_keyContext extends ParserRuleContext {
		public IdContext encryptor_name;
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSQLParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSQLParser.ENCRYPTION, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSQLParser.KEY, i);
		}
		public TerminalNode REGENERATE() { return getToken(TSQLParser.REGENERATE, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSQLParser.ALGORITHM, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode AES_128() { return getToken(TSQLParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSQLParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSQLParser.AES_256, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSQLParser.TRIPLE_DES_3KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public Alter_database_encryption_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database_encryption_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_database_encryption_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_database_encryption_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_database_encryption_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_database_encryption_keyContext alter_database_encryption_key() throws RecognitionException {
		Alter_database_encryption_keyContext _localctx = new Alter_database_encryption_keyContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_alter_database_encryption_key);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6140);
			match(DATABASE);
			setState(6141);
			match(ENCRYPTION);
			setState(6142);
			match(KEY);
			setState(6148);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REGENERATE) {
				{
				setState(6143);
				match(REGENERATE);
				setState(6144);
				match(WITH);
				setState(6145);
				match(ALGORITHM);
				setState(6146);
				match(EQUAL);
				setState(6147);
				_la = _input.LA(1);
				if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (AES_128 - 201)) | (1L << (AES_192 - 201)) | (1L << (AES_256 - 201)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6159);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPTION) {
				{
				setState(6150);
				match(ENCRYPTION);
				setState(6151);
				match(BY);
				setState(6152);
				match(SERVER);
				setState(6156);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CERTIFICATE:
					{
					setState(6153);
					match(CERTIFICATE);
					}
					break;
				case ASYMMETRIC:
					{
					setState(6154);
					match(ASYMMETRIC);
					setState(6155);
					match(KEY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6158);
				((Alter_database_encryption_keyContext)_localctx).encryptor_name = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_database_scoped_credentialContext extends ParserRuleContext {
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode SCOPED() { return getToken(TSQLParser.SCOPED, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSQLParser.CREDENTIAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode IDENTITY() { return getToken(TSQLParser.IDENTITY, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode SECRET() { return getToken(TSQLParser.SECRET, 0); }
		public Alter_database_scoped_credentialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_database_scoped_credential; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_database_scoped_credential(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_database_scoped_credential(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_database_scoped_credential(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_database_scoped_credentialContext alter_database_scoped_credential() throws RecognitionException {
		Alter_database_scoped_credentialContext _localctx = new Alter_database_scoped_credentialContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_alter_database_scoped_credential);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6161);
			match(DATABASE);
			setState(6162);
			match(SCOPED);
			setState(6163);
			match(CREDENTIAL);
			setState(6164);
			id();
			setState(6165);
			match(WITH);
			setState(6166);
			match(IDENTITY);
			setState(6167);
			match(EQUAL);
			setState(6168);
			match(STRING);
			setState(6173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6169);
				match(COMMA);
				setState(6170);
				match(SECRET);
				setState(6171);
				match(EQUAL);
				setState(6172);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_optionspecContext extends ParserRuleContext {
		public Auto_optionContext auto_option() {
			return getRuleContext(Auto_optionContext.class,0);
		}
		public Change_tracking_optionContext change_tracking_option() {
			return getRuleContext(Change_tracking_optionContext.class,0);
		}
		public Containment_optionContext containment_option() {
			return getRuleContext(Containment_optionContext.class,0);
		}
		public Cursor_optionContext cursor_option() {
			return getRuleContext(Cursor_optionContext.class,0);
		}
		public Database_mirroring_optionContext database_mirroring_option() {
			return getRuleContext(Database_mirroring_optionContext.class,0);
		}
		public Date_correlation_optimization_optionContext date_correlation_optimization_option() {
			return getRuleContext(Date_correlation_optimization_optionContext.class,0);
		}
		public Db_encryption_optionContext db_encryption_option() {
			return getRuleContext(Db_encryption_optionContext.class,0);
		}
		public Db_state_optionContext db_state_option() {
			return getRuleContext(Db_state_optionContext.class,0);
		}
		public Db_update_optionContext db_update_option() {
			return getRuleContext(Db_update_optionContext.class,0);
		}
		public Db_user_access_optionContext db_user_access_option() {
			return getRuleContext(Db_user_access_optionContext.class,0);
		}
		public Delayed_durability_optionContext delayed_durability_option() {
			return getRuleContext(Delayed_durability_optionContext.class,0);
		}
		public External_access_optionContext external_access_option() {
			return getRuleContext(External_access_optionContext.class,0);
		}
		public TerminalNode FILESTREAM() { return getToken(TSQLParser.FILESTREAM, 0); }
		public Database_filestream_optionContext database_filestream_option() {
			return getRuleContext(Database_filestream_optionContext.class,0);
		}
		public TerminalNode HADR() { return getToken(TSQLParser.HADR, 0); }
		public Hadr_optionsContext hadr_options() {
			return getRuleContext(Hadr_optionsContext.class,0);
		}
		public Mixed_page_allocation_optionContext mixed_page_allocation_option() {
			return getRuleContext(Mixed_page_allocation_optionContext.class,0);
		}
		public Parameterization_optionContext parameterization_option() {
			return getRuleContext(Parameterization_optionContext.class,0);
		}
		public Recovery_optionContext recovery_option() {
			return getRuleContext(Recovery_optionContext.class,0);
		}
		public Service_broker_optionContext service_broker_option() {
			return getRuleContext(Service_broker_optionContext.class,0);
		}
		public Snapshot_optionContext snapshot_option() {
			return getRuleContext(Snapshot_optionContext.class,0);
		}
		public Sql_optionContext sql_option() {
			return getRuleContext(Sql_optionContext.class,0);
		}
		public Target_recovery_time_optionContext target_recovery_time_option() {
			return getRuleContext(Target_recovery_time_optionContext.class,0);
		}
		public TerminationContext termination() {
			return getRuleContext(TerminationContext.class,0);
		}
		public Database_optionspecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_optionspec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDatabase_optionspec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDatabase_optionspec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDatabase_optionspec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_optionspecContext database_optionspec() throws RecognitionException {
		Database_optionspecContext _localctx = new Database_optionspecContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_database_optionspec);
		try {
			setState(6199);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ON:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
				enterOuterAlt(_localctx, 1);
				{
				setState(6175);
				auto_option();
				}
				break;
			case CHANGE_TRACKING:
				enterOuterAlt(_localctx, 2);
				{
				setState(6176);
				change_tracking_option();
				}
				break;
			case CONTAINMENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6177);
				containment_option();
				}
				break;
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6178);
				cursor_option();
				}
				break;
			case PARTNER:
			case WITNESS:
				enterOuterAlt(_localctx, 5);
				{
				setState(6179);
				database_mirroring_option();
				}
				break;
			case DATE_CORRELATION_OPTIMIZATION:
				enterOuterAlt(_localctx, 6);
				{
				setState(6180);
				date_correlation_optimization_option();
				}
				break;
			case ENCRYPTION:
				enterOuterAlt(_localctx, 7);
				{
				setState(6181);
				db_encryption_option();
				}
				break;
			case EMERGENCY:
			case OFFLINE:
			case ONLINE:
				enterOuterAlt(_localctx, 8);
				{
				setState(6182);
				db_state_option();
				}
				break;
			case READ_ONLY:
			case READ_WRITE:
				enterOuterAlt(_localctx, 9);
				{
				setState(6183);
				db_update_option();
				}
				break;
			case MULTI_USER:
			case RESTRICTED_USER:
			case SINGLE_USER:
				enterOuterAlt(_localctx, 10);
				{
				setState(6184);
				db_user_access_option();
				}
				break;
			case DELAYED_DURABILITY:
				enterOuterAlt(_localctx, 11);
				{
				setState(6185);
				delayed_durability_option();
				}
				break;
			case DB_CHAINING:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case NESTED_TRIGGERS:
			case TRANSFORM_NOISE_WORDS:
			case TRUSTWORTHY:
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 12);
				{
				setState(6186);
				external_access_option();
				}
				break;
			case FILESTREAM:
				enterOuterAlt(_localctx, 13);
				{
				setState(6187);
				match(FILESTREAM);
				setState(6188);
				database_filestream_option();
				}
				break;
			case HADR:
				enterOuterAlt(_localctx, 14);
				{
				setState(6189);
				match(HADR);
				setState(6190);
				hadr_options();
				}
				break;
			case MIXED_PAGE_ALLOCATION:
				enterOuterAlt(_localctx, 15);
				{
				setState(6191);
				mixed_page_allocation_option();
				}
				break;
			case PARAMETERIZATION:
				enterOuterAlt(_localctx, 16);
				{
				setState(6192);
				parameterization_option();
				}
				break;
			case PAGE_VERIFY:
			case RECOVERY:
			case TORN_PAGE_DETECTION:
				enterOuterAlt(_localctx, 17);
				{
				setState(6193);
				recovery_option();
				}
				break;
			case DISABLE_BROKER:
			case ENABLE_BROKER:
			case ERROR_BROKER_CONVERSATIONS:
			case HONOR_BROKER_PRIORITY:
			case NEW_BROKER:
				enterOuterAlt(_localctx, 18);
				{
				setState(6194);
				service_broker_option();
				}
				break;
			case ALLOW_SNAPSHOT_ISOLATION:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case READ_COMMITTED_SNAPSHOT:
				enterOuterAlt(_localctx, 19);
				{
				setState(6195);
				snapshot_option();
				}
				break;
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case ARITHABORT:
			case COMPATIBILITY_LEVEL:
			case CONCAT_NULL_YIELDS_NULL:
			case NUMERIC_ROUNDABORT:
			case QUOTED_IDENTIFIER:
			case RECURSIVE_TRIGGERS:
				enterOuterAlt(_localctx, 20);
				{
				setState(6196);
				sql_option();
				}
				break;
			case TARGET_RECOVERY_TIME:
				enterOuterAlt(_localctx, 21);
				{
				setState(6197);
				target_recovery_time_option();
				}
				break;
			case ROLLBACK:
			case NO_WAIT:
				enterOuterAlt(_localctx, 22);
				{
				setState(6198);
				termination();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Auto_optionContext extends ParserRuleContext {
		public TerminalNode AUTO_CLOSE() { return getToken(TSQLParser.AUTO_CLOSE, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(TSQLParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode INCREMENTAL() { return getToken(TSQLParser.INCREMENTAL, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(TSQLParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(TSQLParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(TSQLParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public Auto_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_auto_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAuto_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAuto_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAuto_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Auto_optionContext auto_option() throws RecognitionException {
		Auto_optionContext _localctx = new Auto_optionContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_auto_option);
		try {
			setState(6215);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLOSE:
				enterOuterAlt(_localctx, 1);
				{
				setState(6201);
				match(AUTO_CLOSE);
				setState(6202);
				on_off();
				}
				break;
			case AUTO_CREATE_STATISTICS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6203);
				match(AUTO_CREATE_STATISTICS);
				setState(6204);
				match(OFF);
				}
				break;
			case ON:
				enterOuterAlt(_localctx, 3);
				{
				setState(6205);
				match(ON);
				{
				setState(6206);
				match(INCREMENTAL);
				setState(6207);
				match(EQUAL);
				setState(6208);
				on_off();
				}
				}
				break;
			case AUTO_SHRINK:
				enterOuterAlt(_localctx, 4);
				{
				setState(6209);
				match(AUTO_SHRINK);
				setState(6210);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS:
				enterOuterAlt(_localctx, 5);
				{
				setState(6211);
				match(AUTO_UPDATE_STATISTICS);
				setState(6212);
				on_off();
				}
				break;
			case AUTO_UPDATE_STATISTICS_ASYNC:
				enterOuterAlt(_localctx, 6);
				{
				setState(6213);
				match(AUTO_UPDATE_STATISTICS_ASYNC);
				setState(6214);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_optionContext extends ParserRuleContext {
		public TerminalNode CHANGE_TRACKING() { return getToken(TSQLParser.CHANGE_TRACKING, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public List<Change_tracking_option_listContext> change_tracking_option_list() {
			return getRuleContexts(Change_tracking_option_listContext.class);
		}
		public Change_tracking_option_listContext change_tracking_option_list(int i) {
			return getRuleContext(Change_tracking_option_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Change_tracking_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterChange_tracking_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitChange_tracking_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitChange_tracking_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tracking_optionContext change_tracking_option() throws RecognitionException {
		Change_tracking_optionContext _localctx = new Change_tracking_optionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_change_tracking_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6217);
			match(CHANGE_TRACKING);
			setState(6218);
			match(EQUAL);
			setState(6234);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OFF:
				{
				setState(6219);
				match(OFF);
				}
				break;
			case ON:
				{
				setState(6220);
				match(ON);
				setState(6231);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==AUTO_CLEANUP || _la==CHANGE_RETENTION) {
					{
					{
					setState(6221);
					change_tracking_option_list();
					setState(6226);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6222);
						match(COMMA);
						setState(6223);
						change_tracking_option_list();
						}
						}
						setState(6228);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					}
					setState(6233);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tracking_option_listContext extends ParserRuleContext {
		public TerminalNode AUTO_CLEANUP() { return getToken(TSQLParser.AUTO_CLEANUP, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CHANGE_RETENTION() { return getToken(TSQLParser.CHANGE_RETENTION, 0); }
		public TerminalNode DAYS() { return getToken(TSQLParser.DAYS, 0); }
		public TerminalNode HOURS() { return getToken(TSQLParser.HOURS, 0); }
		public TerminalNode MINUTES() { return getToken(TSQLParser.MINUTES, 0); }
		public Change_tracking_option_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_tracking_option_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterChange_tracking_option_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitChange_tracking_option_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitChange_tracking_option_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tracking_option_listContext change_tracking_option_list() throws RecognitionException {
		Change_tracking_option_listContext _localctx = new Change_tracking_option_listContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_change_tracking_option_list);
		int _la;
		try {
			setState(6242);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AUTO_CLEANUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(6236);
				match(AUTO_CLEANUP);
				setState(6237);
				match(EQUAL);
				setState(6238);
				on_off();
				}
				break;
			case CHANGE_RETENTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(6239);
				match(CHANGE_RETENTION);
				setState(6240);
				match(EQUAL);
				setState(6241);
				_la = _input.LA(1);
				if ( !(_la==DAYS || _la==HOURS || _la==MINUTES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Containment_optionContext extends ParserRuleContext {
		public TerminalNode CONTAINMENT() { return getToken(TSQLParser.CONTAINMENT, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSQLParser.PARTIAL, 0); }
		public Containment_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_containment_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterContainment_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitContainment_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitContainment_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Containment_optionContext containment_option() throws RecognitionException {
		Containment_optionContext _localctx = new Containment_optionContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_containment_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6244);
			match(CONTAINMENT);
			setState(6245);
			match(EQUAL);
			setState(6246);
			_la = _input.LA(1);
			if ( !(_la==NONE || _la==PARTIAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_optionContext extends ParserRuleContext {
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(TSQLParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode CURSOR_DEFAULT() { return getToken(TSQLParser.CURSOR_DEFAULT, 0); }
		public TerminalNode LOCAL() { return getToken(TSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(TSQLParser.GLOBAL, 0); }
		public Cursor_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCursor_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCursor_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCursor_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_optionContext cursor_option() throws RecognitionException {
		Cursor_optionContext _localctx = new Cursor_optionContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_cursor_option);
		int _la;
		try {
			setState(6252);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR_CLOSE_ON_COMMIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6248);
				match(CURSOR_CLOSE_ON_COMMIT);
				setState(6249);
				on_off();
				}
				break;
			case CURSOR_DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6250);
				match(CURSOR_DEFAULT);
				setState(6251);
				_la = _input.LA(1);
				if ( !(_la==GLOBAL || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_endpointContext extends ParserRuleContext {
		public IdContext endpointname;
		public Token state;
		public Token port;
		public IdContext cert_name;
		public TerminalNode ENDPOINT() { return getToken(TSQLParser.ENDPOINT, 0); }
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public TerminalNode TCP() { return getToken(TSQLParser.TCP, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public TerminalNode LISTENER_PORT() { return getToken(TSQLParser.LISTENER_PORT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public TerminalNode TSQL() { return getToken(TSQLParser.TSQL, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode SERVICE_BROKER() { return getToken(TSQLParser.SERVICE_BROKER, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(TSQLParser.AUTHENTICATION, 0); }
		public TerminalNode DATABASE_MIRRORING() { return getToken(TSQLParser.DATABASE_MIRRORING, 0); }
		public TerminalNode ROLE() { return getToken(TSQLParser.ROLE, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode STATE() { return getToken(TSQLParser.STATE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode LISTENER_IP() { return getToken(TSQLParser.LISTENER_IP, 0); }
		public TerminalNode WITNESS() { return getToken(TSQLParser.WITNESS, 0); }
		public TerminalNode PARTNER() { return getToken(TSQLParser.PARTNER, 0); }
		public List<TerminalNode> ALL() { return getTokens(TSQLParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(TSQLParser.ALL, i);
		}
		public TerminalNode IPV4_ADDR() { return getToken(TSQLParser.IPV4_ADDR, 0); }
		public TerminalNode IPV6_ADDR() { return getToken(TSQLParser.IPV6_ADDR, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode WINDOWS() { return getToken(TSQLParser.WINDOWS, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode MESSAGE_FORWARDING() { return getToken(TSQLParser.MESSAGE_FORWARDING, 0); }
		public TerminalNode MESSAGE_FORWARD_SIZE() { return getToken(TSQLParser.MESSAGE_FORWARD_SIZE, 0); }
		public TerminalNode STARTED() { return getToken(TSQLParser.STARTED, 0); }
		public TerminalNode STOPPED() { return getToken(TSQLParser.STOPPED, 0); }
		public List<TerminalNode> DISABLED() { return getTokens(TSQLParser.DISABLED); }
		public TerminalNode DISABLED(int i) {
			return getToken(TSQLParser.DISABLED, i);
		}
		public TerminalNode SUPPORTED() { return getToken(TSQLParser.SUPPORTED, 0); }
		public TerminalNode REQUIRED() { return getToken(TSQLParser.REQUIRED, 0); }
		public TerminalNode ENABLED() { return getToken(TSQLParser.ENABLED, 0); }
		public TerminalNode NTLM() { return getToken(TSQLParser.NTLM, 0); }
		public TerminalNode KERBEROS() { return getToken(TSQLParser.KERBEROS, 0); }
		public TerminalNode NEGOTIATE() { return getToken(TSQLParser.NEGOTIATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSQLParser.ALGORITHM, 0); }
		public TerminalNode AES() { return getToken(TSQLParser.AES, 0); }
		public TerminalNode RC4() { return getToken(TSQLParser.RC4, 0); }
		public Alter_endpointContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_endpoint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlter_endpoint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlter_endpoint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlter_endpoint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_endpointContext alter_endpoint() throws RecognitionException {
		Alter_endpointContext _localctx = new Alter_endpointContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_alter_endpoint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6254);
			match(ENDPOINT);
			setState(6255);
			((Alter_endpointContext)_localctx).endpointname = id();
			setState(6258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(6256);
				match(AUTHORIZATION);
				setState(6257);
				id();
				}
			}

			setState(6267);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STATE) {
				{
				setState(6260);
				match(STATE);
				setState(6261);
				match(EQUAL);
				setState(6265);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STARTED:
					{
					setState(6262);
					((Alter_endpointContext)_localctx).state = match(STARTED);
					}
					break;
				case STOPPED:
					{
					setState(6263);
					((Alter_endpointContext)_localctx).state = match(STOPPED);
					}
					break;
				case DISABLED:
					{
					setState(6264);
					((Alter_endpointContext)_localctx).state = match(DISABLED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(6269);
			match(AS);
			setState(6270);
			match(TCP);
			setState(6271);
			match(LR_BRACKET);
			setState(6272);
			match(LISTENER_PORT);
			setState(6273);
			match(EQUAL);
			setState(6274);
			((Alter_endpointContext)_localctx).port = match(DECIMAL);
			setState(6279);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(6275);
				match(COMMA);
				setState(6276);
				match(LISTENER_IP);
				setState(6277);
				match(EQUAL);
				setState(6278);
				_la = _input.LA(1);
				if ( !(_la==ALL || ((((_la - 794)) & ~0x3f) == 0 && ((1L << (_la - 794)) & ((1L << (STRING - 794)) | (1L << (IPV4_ADDR - 794)) | (1L << (IPV6_ADDR - 794)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(6281);
			match(RR_BRACKET);
			setState(6391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,860,_ctx) ) {
			case 1:
				{
				setState(6282);
				match(TSQL);
				}
				break;
			case 2:
				{
				setState(6283);
				match(FOR);
				setState(6284);
				match(SERVICE_BROKER);
				setState(6285);
				match(LR_BRACKET);
				setState(6286);
				match(AUTHENTICATION);
				setState(6287);
				match(EQUAL);
				setState(6304);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(6288);
					match(WINDOWS);
					setState(6290);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) {
						{
						setState(6289);
						_la = _input.LA(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(6294);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(6292);
						match(CERTIFICATE);
						setState(6293);
						((Alter_endpointContext)_localctx).cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(6296);
					match(CERTIFICATE);
					setState(6297);
					((Alter_endpointContext)_localctx).cert_name = id();
					setState(6299);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(6298);
						match(WINDOWS);
						}
					}

					setState(6302);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) {
						{
						setState(6301);
						_la = _input.LA(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6323);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
				case 1:
					{
					setState(6307);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6306);
						match(COMMA);
						}
					}

					setState(6309);
					match(ENCRYPTION);
					setState(6310);
					match(EQUAL);
					setState(6311);
					_la = _input.LA(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6321);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(6312);
						match(ALGORITHM);
						setState(6319);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,843,_ctx) ) {
						case 1:
							{
							setState(6313);
							match(AES);
							}
							break;
						case 2:
							{
							setState(6314);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(6315);
							match(AES);
							setState(6316);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(6317);
							match(RC4);
							setState(6318);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(6331);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
				case 1:
					{
					setState(6326);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6325);
						match(COMMA);
						}
					}

					setState(6328);
					match(MESSAGE_FORWARDING);
					setState(6329);
					match(EQUAL);
					setState(6330);
					_la = _input.LA(1);
					if ( !(_la==DISABLED || _la==ENABLED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(6339);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MESSAGE_FORWARD_SIZE || _la==COMMA) {
					{
					setState(6334);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6333);
						match(COMMA);
						}
					}

					setState(6336);
					match(MESSAGE_FORWARD_SIZE);
					setState(6337);
					match(EQUAL);
					setState(6338);
					match(DECIMAL);
					}
				}

				setState(6341);
				match(RR_BRACKET);
				}
				break;
			case 3:
				{
				setState(6342);
				match(FOR);
				setState(6343);
				match(DATABASE_MIRRORING);
				setState(6344);
				match(LR_BRACKET);
				setState(6345);
				match(AUTHENTICATION);
				setState(6346);
				match(EQUAL);
				setState(6363);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WINDOWS:
					{
					setState(6347);
					match(WINDOWS);
					setState(6349);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) {
						{
						setState(6348);
						_la = _input.LA(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(6353);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==CERTIFICATE) {
						{
						setState(6351);
						match(CERTIFICATE);
						setState(6352);
						((Alter_endpointContext)_localctx).cert_name = id();
						}
					}

					}
					break;
				case CERTIFICATE:
					{
					setState(6355);
					match(CERTIFICATE);
					setState(6356);
					((Alter_endpointContext)_localctx).cert_name = id();
					setState(6358);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WINDOWS) {
						{
						setState(6357);
						match(WINDOWS);
						}
					}

					setState(6361);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) {
						{
						setState(6360);
						_la = _input.LA(1);
						if ( !(_la==KERBEROS || _la==NEGOTIATE || _la==NTLM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6382);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
				case 1:
					{
					setState(6366);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6365);
						match(COMMA);
						}
					}

					setState(6368);
					match(ENCRYPTION);
					setState(6369);
					match(EQUAL);
					setState(6370);
					_la = _input.LA(1);
					if ( !(_la==DISABLED || _la==REQUIRED || _la==SUPPORTED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6380);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALGORITHM) {
						{
						setState(6371);
						match(ALGORITHM);
						setState(6378);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,856,_ctx) ) {
						case 1:
							{
							setState(6372);
							match(AES);
							}
							break;
						case 2:
							{
							setState(6373);
							match(RC4);
							}
							break;
						case 3:
							{
							setState(6374);
							match(AES);
							setState(6375);
							match(RC4);
							}
							break;
						case 4:
							{
							setState(6376);
							match(RC4);
							setState(6377);
							match(AES);
							}
							break;
						}
						}
					}

					}
					break;
				}
				setState(6385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6384);
					match(COMMA);
					}
				}

				setState(6387);
				match(ROLE);
				setState(6388);
				match(EQUAL);
				setState(6389);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==PARTNER || _la==WITNESS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6390);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_mirroring_optionContext extends ParserRuleContext {
		public TerminalNode PARTNER() { return getToken(TSQLParser.PARTNER, 0); }
		public Partner_optionContext partner_option() {
			return getRuleContext(Partner_optionContext.class,0);
		}
		public TerminalNode WITNESS() { return getToken(TSQLParser.WITNESS, 0); }
		public Witness_optionContext witness_option() {
			return getRuleContext(Witness_optionContext.class,0);
		}
		public Database_mirroring_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_mirroring_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDatabase_mirroring_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDatabase_mirroring_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDatabase_mirroring_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_mirroring_optionContext database_mirroring_option() throws RecognitionException {
		Database_mirroring_optionContext _localctx = new Database_mirroring_optionContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_database_mirroring_option);
		try {
			setState(6397);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARTNER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6393);
				match(PARTNER);
				setState(6394);
				partner_option();
				}
				break;
			case WITNESS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6395);
				match(WITNESS);
				setState(6396);
				witness_option();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partner_optionContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode FAILOVER() { return getToken(TSQLParser.FAILOVER, 0); }
		public TerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return getToken(TSQLParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode RESUME() { return getToken(TSQLParser.RESUME, 0); }
		public TerminalNode SAFETY() { return getToken(TSQLParser.SAFETY, 0); }
		public TerminalNode FULL() { return getToken(TSQLParser.FULL, 0); }
		public TerminalNode SUSPEND() { return getToken(TSQLParser.SUSPEND, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSQLParser.TIMEOUT, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public Partner_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partner_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterPartner_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitPartner_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitPartner_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partner_optionContext partner_option() throws RecognitionException {
		Partner_optionContext _localctx = new Partner_optionContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_partner_option);
		int _la;
		try {
			setState(6410);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6399);
				match(EQUAL);
				setState(6400);
				match(STRING);
				}
				break;
			case FAILOVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6401);
				match(FAILOVER);
				}
				break;
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
				enterOuterAlt(_localctx, 3);
				{
				setState(6402);
				match(FORCE_SERVICE_ALLOW_DATA_LOSS);
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 4);
				{
				setState(6403);
				match(OFF);
				}
				break;
			case RESUME:
				enterOuterAlt(_localctx, 5);
				{
				setState(6404);
				match(RESUME);
				}
				break;
			case SAFETY:
				enterOuterAlt(_localctx, 6);
				{
				setState(6405);
				match(SAFETY);
				setState(6406);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 7);
				{
				setState(6407);
				match(SUSPEND);
				}
				break;
			case TIMEOUT:
				enterOuterAlt(_localctx, 8);
				{
				setState(6408);
				match(TIMEOUT);
				setState(6409);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Witness_optionContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public Witness_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_witness_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWitness_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWitness_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWitness_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Witness_optionContext witness_option() throws RecognitionException {
		Witness_optionContext _localctx = new Witness_optionContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_witness_option);
		try {
			setState(6415);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(6412);
				match(EQUAL);
				setState(6413);
				match(STRING);
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 2);
				{
				setState(6414);
				match(OFF);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_correlation_optimization_optionContext extends ParserRuleContext {
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(TSQLParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Date_correlation_optimization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_correlation_optimization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDate_correlation_optimization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDate_correlation_optimization_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDate_correlation_optimization_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_correlation_optimization_optionContext date_correlation_optimization_option() throws RecognitionException {
		Date_correlation_optimization_optionContext _localctx = new Date_correlation_optimization_optionContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_date_correlation_optimization_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6417);
			match(DATE_CORRELATION_OPTIMIZATION);
			setState(6418);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_encryption_optionContext extends ParserRuleContext {
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Db_encryption_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_encryption_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDb_encryption_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDb_encryption_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDb_encryption_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_encryption_optionContext db_encryption_option() throws RecognitionException {
		Db_encryption_optionContext _localctx = new Db_encryption_optionContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_db_encryption_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6420);
			match(ENCRYPTION);
			setState(6421);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_state_optionContext extends ParserRuleContext {
		public TerminalNode ONLINE() { return getToken(TSQLParser.ONLINE, 0); }
		public TerminalNode OFFLINE() { return getToken(TSQLParser.OFFLINE, 0); }
		public TerminalNode EMERGENCY() { return getToken(TSQLParser.EMERGENCY, 0); }
		public Db_state_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_state_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDb_state_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDb_state_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDb_state_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_state_optionContext db_state_option() throws RecognitionException {
		Db_state_optionContext _localctx = new Db_state_optionContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_db_state_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6423);
			_la = _input.LA(1);
			if ( !(_la==EMERGENCY || _la==OFFLINE || _la==ONLINE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_update_optionContext extends ParserRuleContext {
		public TerminalNode READ_ONLY() { return getToken(TSQLParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(TSQLParser.READ_WRITE, 0); }
		public Db_update_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_update_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDb_update_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDb_update_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDb_update_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_update_optionContext db_update_option() throws RecognitionException {
		Db_update_optionContext _localctx = new Db_update_optionContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_db_update_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6425);
			_la = _input.LA(1);
			if ( !(_la==READ_ONLY || _la==READ_WRITE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Db_user_access_optionContext extends ParserRuleContext {
		public TerminalNode SINGLE_USER() { return getToken(TSQLParser.SINGLE_USER, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(TSQLParser.RESTRICTED_USER, 0); }
		public TerminalNode MULTI_USER() { return getToken(TSQLParser.MULTI_USER, 0); }
		public Db_user_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_db_user_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDb_user_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDb_user_access_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDb_user_access_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Db_user_access_optionContext db_user_access_option() throws RecognitionException {
		Db_user_access_optionContext _localctx = new Db_user_access_optionContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_db_user_access_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6427);
			_la = _input.LA(1);
			if ( !(_la==MULTI_USER || _la==RESTRICTED_USER || _la==SINGLE_USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delayed_durability_optionContext extends ParserRuleContext {
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSQLParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode DISABLED() { return getToken(TSQLParser.DISABLED, 0); }
		public TerminalNode ALLOWED() { return getToken(TSQLParser.ALLOWED, 0); }
		public TerminalNode FORCED() { return getToken(TSQLParser.FORCED, 0); }
		public Delayed_durability_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delayed_durability_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDelayed_durability_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDelayed_durability_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDelayed_durability_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delayed_durability_optionContext delayed_durability_option() throws RecognitionException {
		Delayed_durability_optionContext _localctx = new Delayed_durability_optionContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_delayed_durability_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6429);
			match(DELAYED_DURABILITY);
			setState(6430);
			match(EQUAL);
			setState(6431);
			_la = _input.LA(1);
			if ( !(_la==ALLOWED || _la==DISABLED || _la==FORCED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class External_access_optionContext extends ParserRuleContext {
		public TerminalNode DB_CHAINING() { return getToken(TSQLParser.DB_CHAINING, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRUSTWORTHY() { return getToken(TSQLParser.TRUSTWORTHY, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSQLParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSQLParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSQLParser.NESTED_TRIGGERS, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSQLParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSQLParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public External_access_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_external_access_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExternal_access_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExternal_access_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExternal_access_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final External_access_optionContext external_access_option() throws RecognitionException {
		External_access_optionContext _localctx = new External_access_optionContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_external_access_option);
		try {
			setState(6458);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DB_CHAINING:
				enterOuterAlt(_localctx, 1);
				{
				setState(6433);
				match(DB_CHAINING);
				setState(6434);
				on_off();
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 2);
				{
				setState(6435);
				match(TRUSTWORTHY);
				setState(6436);
				on_off();
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(6437);
				match(DEFAULT_LANGUAGE);
				setState(6438);
				match(EQUAL);
				setState(6441);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(6439);
					id();
					}
					break;
				case STRING:
					{
					setState(6440);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 4);
				{
				setState(6443);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(6444);
				match(EQUAL);
				setState(6447);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(6445);
					id();
					}
					break;
				case STRING:
					{
					setState(6446);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 5);
				{
				setState(6449);
				match(NESTED_TRIGGERS);
				setState(6450);
				match(EQUAL);
				setState(6451);
				on_off();
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 6);
				{
				setState(6452);
				match(TRANSFORM_NOISE_WORDS);
				setState(6453);
				match(EQUAL);
				setState(6454);
				on_off();
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 7);
				{
				setState(6455);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(6456);
				match(EQUAL);
				setState(6457);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hadr_optionsContext extends ParserRuleContext {
		public IdContext availability_group_name;
		public TerminalNode AVAILABILITY() { return getToken(TSQLParser.AVAILABILITY, 0); }
		public TerminalNode GROUP() { return getToken(TSQLParser.GROUP, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode SUSPEND() { return getToken(TSQLParser.SUSPEND, 0); }
		public TerminalNode RESUME() { return getToken(TSQLParser.RESUME, 0); }
		public Hadr_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hadr_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterHadr_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitHadr_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitHadr_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hadr_optionsContext hadr_options() throws RecognitionException {
		Hadr_optionsContext _localctx = new Hadr_optionsContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_hadr_options);
		try {
			setState(6467);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVAILABILITY:
				enterOuterAlt(_localctx, 1);
				{
				setState(6460);
				match(AVAILABILITY);
				setState(6461);
				match(GROUP);
				setState(6462);
				match(EQUAL);
				setState(6463);
				((Hadr_optionsContext)_localctx).availability_group_name = id();
				}
				break;
			case OFF:
				enterOuterAlt(_localctx, 2);
				{
				setState(6464);
				match(OFF);
				}
				break;
			case SUSPEND:
				enterOuterAlt(_localctx, 3);
				{
				setState(6465);
				match(SUSPEND);
				}
				break;
			case RESUME:
				enterOuterAlt(_localctx, 4);
				{
				setState(6466);
				match(RESUME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Mixed_page_allocation_optionContext extends ParserRuleContext {
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(TSQLParser.MIXED_PAGE_ALLOCATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Mixed_page_allocation_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mixed_page_allocation_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterMixed_page_allocation_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitMixed_page_allocation_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitMixed_page_allocation_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Mixed_page_allocation_optionContext mixed_page_allocation_option() throws RecognitionException {
		Mixed_page_allocation_optionContext _localctx = new Mixed_page_allocation_optionContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_mixed_page_allocation_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6469);
			match(MIXED_PAGE_ALLOCATION);
			setState(6470);
			on_off();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameterization_optionContext extends ParserRuleContext {
		public TerminalNode PARAMETERIZATION() { return getToken(TSQLParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(TSQLParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(TSQLParser.FORCED, 0); }
		public Parameterization_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameterization_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterParameterization_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitParameterization_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitParameterization_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameterization_optionContext parameterization_option() throws RecognitionException {
		Parameterization_optionContext _localctx = new Parameterization_optionContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_parameterization_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6472);
			match(PARAMETERIZATION);
			setState(6473);
			_la = _input.LA(1);
			if ( !(_la==FORCED || _la==SIMPLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Recovery_optionContext extends ParserRuleContext {
		public TerminalNode RECOVERY() { return getToken(TSQLParser.RECOVERY, 0); }
		public TerminalNode FULL() { return getToken(TSQLParser.FULL, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(TSQLParser.BULK_LOGGED, 0); }
		public TerminalNode SIMPLE() { return getToken(TSQLParser.SIMPLE, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(TSQLParser.TORN_PAGE_DETECTION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode PAGE_VERIFY() { return getToken(TSQLParser.PAGE_VERIFY, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSQLParser.CHECKSUM, 0); }
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public Recovery_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_recovery_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterRecovery_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitRecovery_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitRecovery_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Recovery_optionContext recovery_option() throws RecognitionException {
		Recovery_optionContext _localctx = new Recovery_optionContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_recovery_option);
		int _la;
		try {
			setState(6481);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECOVERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(6475);
				match(RECOVERY);
				setState(6476);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==BULK_LOGGED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TORN_PAGE_DETECTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(6477);
				match(TORN_PAGE_DETECTION);
				setState(6478);
				on_off();
				}
				break;
			case PAGE_VERIFY:
				enterOuterAlt(_localctx, 3);
				{
				setState(6479);
				match(PAGE_VERIFY);
				setState(6480);
				_la = _input.LA(1);
				if ( !(_la==CHECKSUM || _la==NONE || _la==TORN_PAGE_DETECTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Service_broker_optionContext extends ParserRuleContext {
		public TerminalNode ENABLE_BROKER() { return getToken(TSQLParser.ENABLE_BROKER, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(TSQLParser.DISABLE_BROKER, 0); }
		public TerminalNode NEW_BROKER() { return getToken(TSQLParser.NEW_BROKER, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(TSQLParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(TSQLParser.HONOR_BROKER_PRIORITY, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Service_broker_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_service_broker_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterService_broker_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitService_broker_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitService_broker_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Service_broker_optionContext service_broker_option() throws RecognitionException {
		Service_broker_optionContext _localctx = new Service_broker_optionContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_service_broker_option);
		try {
			setState(6489);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENABLE_BROKER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6483);
				match(ENABLE_BROKER);
				}
				break;
			case DISABLE_BROKER:
				enterOuterAlt(_localctx, 2);
				{
				setState(6484);
				match(DISABLE_BROKER);
				}
				break;
			case NEW_BROKER:
				enterOuterAlt(_localctx, 3);
				{
				setState(6485);
				match(NEW_BROKER);
				}
				break;
			case ERROR_BROKER_CONVERSATIONS:
				enterOuterAlt(_localctx, 4);
				{
				setState(6486);
				match(ERROR_BROKER_CONVERSATIONS);
				}
				break;
			case HONOR_BROKER_PRIORITY:
				enterOuterAlt(_localctx, 5);
				{
				setState(6487);
				match(HONOR_BROKER_PRIORITY);
				setState(6488);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Snapshot_optionContext extends ParserRuleContext {
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(TSQLParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(TSQLParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() { return getToken(TSQLParser.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public Snapshot_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_snapshot_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSnapshot_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSnapshot_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSnapshot_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Snapshot_optionContext snapshot_option() throws RecognitionException {
		Snapshot_optionContext _localctx = new Snapshot_optionContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_snapshot_option);
		try {
			setState(6498);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALLOW_SNAPSHOT_ISOLATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(6491);
				match(ALLOW_SNAPSHOT_ISOLATION);
				setState(6492);
				on_off();
				}
				break;
			case READ_COMMITTED_SNAPSHOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6493);
				match(READ_COMMITTED_SNAPSHOT);
				setState(6494);
				on_off();
				}
				break;
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				enterOuterAlt(_localctx, 3);
				{
				setState(6495);
				match(MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT);
				setState(6496);
				match(EQUAL);
				setState(6497);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_optionContext extends ParserRuleContext {
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(TSQLParser.ANSI_NULL_DEFAULT, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode ANSI_NULLS() { return getToken(TSQLParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSQLParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSQLParser.ANSI_WARNINGS, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSQLParser.ARITHABORT, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(TSQLParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSQLParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(TSQLParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSQLParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(TSQLParser.RECURSIVE_TRIGGERS, 0); }
		public Sql_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSql_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSql_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSql_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_optionContext sql_option() throws RecognitionException {
		Sql_optionContext _localctx = new Sql_optionContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_sql_option);
		try {
			setState(6521);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ANSI_NULL_DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6500);
				match(ANSI_NULL_DEFAULT);
				setState(6501);
				on_off();
				}
				break;
			case ANSI_NULLS:
				enterOuterAlt(_localctx, 2);
				{
				setState(6502);
				match(ANSI_NULLS);
				setState(6503);
				on_off();
				}
				break;
			case ANSI_PADDING:
				enterOuterAlt(_localctx, 3);
				{
				setState(6504);
				match(ANSI_PADDING);
				setState(6505);
				on_off();
				}
				break;
			case ANSI_WARNINGS:
				enterOuterAlt(_localctx, 4);
				{
				setState(6506);
				match(ANSI_WARNINGS);
				setState(6507);
				on_off();
				}
				break;
			case ARITHABORT:
				enterOuterAlt(_localctx, 5);
				{
				setState(6508);
				match(ARITHABORT);
				setState(6509);
				on_off();
				}
				break;
			case COMPATIBILITY_LEVEL:
				enterOuterAlt(_localctx, 6);
				{
				setState(6510);
				match(COMPATIBILITY_LEVEL);
				setState(6511);
				match(EQUAL);
				setState(6512);
				match(DECIMAL);
				}
				break;
			case CONCAT_NULL_YIELDS_NULL:
				enterOuterAlt(_localctx, 7);
				{
				setState(6513);
				match(CONCAT_NULL_YIELDS_NULL);
				setState(6514);
				on_off();
				}
				break;
			case NUMERIC_ROUNDABORT:
				enterOuterAlt(_localctx, 8);
				{
				setState(6515);
				match(NUMERIC_ROUNDABORT);
				setState(6516);
				on_off();
				}
				break;
			case QUOTED_IDENTIFIER:
				enterOuterAlt(_localctx, 9);
				{
				setState(6517);
				match(QUOTED_IDENTIFIER);
				setState(6518);
				on_off();
				}
				break;
			case RECURSIVE_TRIGGERS:
				enterOuterAlt(_localctx, 10);
				{
				setState(6519);
				match(RECURSIVE_TRIGGERS);
				setState(6520);
				on_off();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Target_recovery_time_optionContext extends ParserRuleContext {
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(TSQLParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode SECONDS() { return getToken(TSQLParser.SECONDS, 0); }
		public TerminalNode MINUTES() { return getToken(TSQLParser.MINUTES, 0); }
		public Target_recovery_time_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_target_recovery_time_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTarget_recovery_time_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTarget_recovery_time_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTarget_recovery_time_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Target_recovery_time_optionContext target_recovery_time_option() throws RecognitionException {
		Target_recovery_time_optionContext _localctx = new Target_recovery_time_optionContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_target_recovery_time_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6523);
			match(TARGET_RECOVERY_TIME);
			setState(6524);
			match(EQUAL);
			setState(6525);
			match(DECIMAL);
			setState(6526);
			_la = _input.LA(1);
			if ( !(_la==MINUTES || _la==SECONDS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TerminationContext extends ParserRuleContext {
		public Token seconds;
		public TerminalNode ROLLBACK() { return getToken(TSQLParser.ROLLBACK, 0); }
		public TerminalNode AFTER() { return getToken(TSQLParser.AFTER, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode IMMEDIATE() { return getToken(TSQLParser.IMMEDIATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(TSQLParser.NO_WAIT, 0); }
		public TerminationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_termination; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTermination(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTermination(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTermination(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TerminationContext termination() throws RecognitionException {
		TerminationContext _localctx = new TerminationContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_termination);
		try {
			setState(6534);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,872,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6528);
				match(ROLLBACK);
				setState(6529);
				match(AFTER);
				setState(6530);
				((TerminationContext)_localctx).seconds = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6531);
				match(ROLLBACK);
				setState(6532);
				match(IMMEDIATE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6533);
				match(NO_WAIT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_indexContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(TSQLParser.INDEX, 0); }
		public List<Drop_relational_or_xml_or_spatial_indexContext> drop_relational_or_xml_or_spatial_index() {
			return getRuleContexts(Drop_relational_or_xml_or_spatial_indexContext.class);
		}
		public Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index(int i) {
			return getRuleContext(Drop_relational_or_xml_or_spatial_indexContext.class,i);
		}
		public List<Drop_backward_compatible_indexContext> drop_backward_compatible_index() {
			return getRuleContexts(Drop_backward_compatible_indexContext.class);
		}
		public Drop_backward_compatible_indexContext drop_backward_compatible_index(int i) {
			return getRuleContext(Drop_backward_compatible_indexContext.class,i);
		}
		public TerminalNode IF() { return getToken(TSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSQLParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Drop_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_indexContext drop_index() throws RecognitionException {
		Drop_indexContext _localctx = new Drop_indexContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_drop_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6536);
			match(INDEX);
			setState(6539);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(6537);
				match(IF);
				setState(6538);
				match(EXISTS);
				}
			}

			setState(6557);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,876,_ctx) ) {
			case 1:
				{
				setState(6541);
				drop_relational_or_xml_or_spatial_index();
				setState(6546);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6542);
					match(COMMA);
					setState(6543);
					drop_relational_or_xml_or_spatial_index();
					}
					}
					setState(6548);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(6549);
				drop_backward_compatible_index();
				setState(6554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6550);
					match(COMMA);
					setState(6551);
					drop_backward_compatible_index();
					}
					}
					setState(6556);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_relational_or_xml_or_spatial_indexContext extends ParserRuleContext {
		public IdContext index_name;
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Drop_relational_or_xml_or_spatial_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_relational_or_xml_or_spatial_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_relational_or_xml_or_spatial_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_relational_or_xml_or_spatial_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_relational_or_xml_or_spatial_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_relational_or_xml_or_spatial_indexContext drop_relational_or_xml_or_spatial_index() throws RecognitionException {
		Drop_relational_or_xml_or_spatial_indexContext _localctx = new Drop_relational_or_xml_or_spatial_indexContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_drop_relational_or_xml_or_spatial_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6559);
			((Drop_relational_or_xml_or_spatial_indexContext)_localctx).index_name = id();
			setState(6560);
			match(ON);
			setState(6561);
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_backward_compatible_indexContext extends ParserRuleContext {
		public IdContext owner_name;
		public IdContext table_or_view_name;
		public IdContext index_name;
		public List<TerminalNode> DOT() { return getTokens(TSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSQLParser.DOT, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Drop_backward_compatible_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_backward_compatible_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_backward_compatible_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_backward_compatible_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_backward_compatible_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_backward_compatible_indexContext drop_backward_compatible_index() throws RecognitionException {
		Drop_backward_compatible_indexContext _localctx = new Drop_backward_compatible_indexContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_drop_backward_compatible_index);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,877,_ctx) ) {
			case 1:
				{
				setState(6563);
				((Drop_backward_compatible_indexContext)_localctx).owner_name = id();
				setState(6564);
				match(DOT);
				}
				break;
			}
			setState(6568);
			((Drop_backward_compatible_indexContext)_localctx).table_or_view_name = id();
			setState(6569);
			match(DOT);
			setState(6570);
			((Drop_backward_compatible_indexContext)_localctx).index_name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_ddl_triggerContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(TSQLParser.TRIGGER, 0); }
		public List<Qualified_nameContext> qualified_name() {
			return getRuleContexts(Qualified_nameContext.class);
		}
		public Qualified_nameContext qualified_name(int i) {
			return getRuleContext(Qualified_nameContext.class,i);
		}
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode IF() { return getToken(TSQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(TSQLParser.EXISTS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Drop_ddl_triggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_ddl_trigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDrop_ddl_trigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDrop_ddl_trigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDrop_ddl_trigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_ddl_triggerContext drop_ddl_trigger() throws RecognitionException {
		Drop_ddl_triggerContext _localctx = new Drop_ddl_triggerContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_drop_ddl_trigger);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6572);
			match(TRIGGER);
			setState(6575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(6573);
				match(IF);
				setState(6574);
				match(EXISTS);
				}
			}

			setState(6577);
			qualified_name();
			setState(6582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6578);
				match(COMMA);
				setState(6579);
				qualified_name();
				}
				}
				setState(6584);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6585);
			match(ON);
			setState(6589);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
				{
				setState(6586);
				match(DATABASE);
				}
				break;
			case ALL:
				{
				setState(6587);
				match(ALL);
				setState(6588);
				match(SERVER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_typeContext extends ParserRuleContext {
		public Qualified_nameContext name;
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public Type_definitionContext type_definition() {
			return getRuleContext(Type_definitionContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Create_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_typeContext create_type() throws RecognitionException {
		Create_typeContext _localctx = new Create_typeContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_create_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6591);
			match(TYPE);
			setState(6592);
			((Create_typeContext)_localctx).name = qualified_name();
			setState(6593);
			type_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public IdContext assembly_name;
		public IdContext class_name;
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(TSQLParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public TerminalNode TABLE() { return getToken(TSQLParser.TABLE, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode MEMORY_OPTIMIZED() { return getToken(TSQLParser.MEMORY_OPTIMIZED, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitType_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitType_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_type_definition);
		int _la;
		try {
			setState(6621);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				enterOuterAlt(_localctx, 1);
				{
				setState(6595);
				match(FROM);
				setState(6596);
				data_type();
				setState(6598);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT || _la==NULL) {
					{
					setState(6597);
					null_notnull();
					}
				}

				}
				break;
			case EXTERNAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(6600);
				match(EXTERNAL);
				setState(6601);
				match(NAME);
				setState(6602);
				((Type_definitionContext)_localctx).assembly_name = id();
				setState(6605);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(6603);
					match(DOT);
					setState(6604);
					((Type_definitionContext)_localctx).class_name = id();
					}
				}

				}
				break;
			case AS:
				enterOuterAlt(_localctx, 3);
				{
				setState(6607);
				match(AS);
				setState(6608);
				match(TABLE);
				setState(6609);
				match(LR_BRACKET);
				setState(6610);
				column_def_table_constraints();
				setState(6611);
				match(RR_BRACKET);
				setState(6619);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,883,_ctx) ) {
				case 1:
					{
					setState(6612);
					match(WITH);
					setState(6613);
					match(LR_BRACKET);
					setState(6614);
					match(MEMORY_OPTIMIZED);
					setState(6615);
					match(EQUAL);
					setState(6616);
					on_off();
					setState(6617);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_function_limitedContext extends ParserRuleContext {
		public OpenqueryContext openquery() {
			return getRuleContext(OpenqueryContext.class,0);
		}
		public OpendatasourceContext opendatasource() {
			return getRuleContext(OpendatasourceContext.class,0);
		}
		public Rowset_function_limitedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function_limited; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterRowset_function_limited(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitRowset_function_limited(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitRowset_function_limited(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_function_limitedContext rowset_function_limited() throws RecognitionException {
		Rowset_function_limitedContext _localctx = new Rowset_function_limitedContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_rowset_function_limited);
		try {
			setState(6625);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPENQUERY:
				enterOuterAlt(_localctx, 1);
				{
				setState(6623);
				openquery();
				}
				break;
			case OPENDATASOURCE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6624);
				opendatasource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpenqueryContext extends ParserRuleContext {
		public IdContext linked_server;
		public Token query;
		public TerminalNode OPENQUERY() { return getToken(TSQLParser.OPENQUERY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public OpenqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_openquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOpenquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOpenquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOpenquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpenqueryContext openquery() throws RecognitionException {
		OpenqueryContext _localctx = new OpenqueryContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_openquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6627);
			match(OPENQUERY);
			setState(6628);
			match(LR_BRACKET);
			setState(6629);
			((OpenqueryContext)_localctx).linked_server = id();
			setState(6630);
			match(COMMA);
			setState(6631);
			((OpenqueryContext)_localctx).query = match(STRING);
			setState(6632);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpendatasourceContext extends ParserRuleContext {
		public Token provider;
		public Token init;
		public IdContext database;
		public IdContext scheme;
		public IdContext table;
		public TerminalNode OPENDATASOURCE() { return getToken(TSQLParser.OPENDATASOURCE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSQLParser.DOT, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public OpendatasourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opendatasource; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOpendatasource(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOpendatasource(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOpendatasource(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpendatasourceContext opendatasource() throws RecognitionException {
		OpendatasourceContext _localctx = new OpendatasourceContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_opendatasource);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6634);
			match(OPENDATASOURCE);
			setState(6635);
			match(LR_BRACKET);
			setState(6636);
			((OpendatasourceContext)_localctx).provider = match(STRING);
			setState(6637);
			match(COMMA);
			setState(6638);
			((OpendatasourceContext)_localctx).init = match(STRING);
			setState(6639);
			match(RR_BRACKET);
			setState(6640);
			match(DOT);
			setState(6642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)))) != 0)) {
				{
				setState(6641);
				((OpendatasourceContext)_localctx).database = id();
				}
			}

			setState(6644);
			match(DOT);
			setState(6646);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)))) != 0)) {
				{
				setState(6645);
				((OpendatasourceContext)_localctx).scheme = id();
				}
			}

			setState(6648);
			match(DOT);
			{
			setState(6649);
			((OpendatasourceContext)_localctx).table = id();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_statementContext extends ParserRuleContext {
		public Token xml_namespace_uri;
		public TerminalNode DECLARE() { return getToken(TSQLParser.DECLARE, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode TABLE() { return getToken(TSQLParser.TABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Column_def_table_constraintsContext column_def_table_constraints() {
			return getRuleContext(Column_def_table_constraintsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public List<Declare_localContext> declare_local() {
			return getRuleContexts(Declare_localContext.class);
		}
		public Declare_localContext declare_local(int i) {
			return getRuleContext(Declare_localContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Xml_type_definitionContext xml_type_definition() {
			return getRuleContext(Xml_type_definitionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(TSQLParser.XMLNAMESPACES, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Declare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDeclare_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDeclare_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDeclare_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_statementContext declare_statement() throws RecognitionException {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_declare_statement);
		int _la;
		try {
			setState(6687);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6651);
				match(DECLARE);
				setState(6652);
				match(LOCAL_ID);
				setState(6654);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6653);
					match(AS);
					}
				}

				setState(6656);
				match(TABLE);
				setState(6657);
				match(LR_BRACKET);
				setState(6658);
				column_def_table_constraints();
				setState(6659);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6661);
				match(DECLARE);
				setState(6662);
				declare_local();
				setState(6667);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6663);
					match(COMMA);
					setState(6664);
					declare_local();
					}
					}
					setState(6669);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6670);
				match(DECLARE);
				setState(6671);
				match(LOCAL_ID);
				setState(6673);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6672);
					match(AS);
					}
				}

				setState(6675);
				xml_type_definition();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6676);
				match(WITH);
				setState(6677);
				match(XMLNAMESPACES);
				setState(6678);
				match(LR_BRACKET);
				setState(6679);
				((Declare_statementContext)_localctx).xml_namespace_uri = match(STRING);
				setState(6681);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6680);
					match(COMMA);
					}
				}

				setState(6683);
				match(AS);
				setState(6684);
				id();
				setState(6685);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_statementContext extends ParserRuleContext {
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(TSQLParser.CLOSE, 0); }
		public TerminalNode OPEN() { return getToken(TSQLParser.OPEN, 0); }
		public TerminalNode DEALLOCATE() { return getToken(TSQLParser.DEALLOCATE, 0); }
		public TerminalNode GLOBAL() { return getToken(TSQLParser.GLOBAL, 0); }
		public TerminalNode DECLARE() { return getToken(TSQLParser.DECLARE, 0); }
		public Cursor_commonContext cursor_common() {
			return getRuleContext(Cursor_commonContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(TSQLParser.SCROLL, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(TSQLParser.SEMI_SENSITIVE, 0); }
		public TerminalNode INSENSITIVE() { return getToken(TSQLParser.INSENSITIVE, 0); }
		public TerminalNode FETCH() { return getToken(TSQLParser.FETCH, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode INTO() { return getToken(TSQLParser.INTO, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSQLParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSQLParser.LOCAL_ID, i);
		}
		public TerminalNode NEXT() { return getToken(TSQLParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(TSQLParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(TSQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(TSQLParser.LAST, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode ABSOLUTE() { return getToken(TSQLParser.ABSOLUTE, 0); }
		public TerminalNode RELATIVE() { return getToken(TSQLParser.RELATIVE, 0); }
		public Cursor_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCursor_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCursor_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCursor_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_statementContext cursor_statement() throws RecognitionException {
		Cursor_statementContext _localctx = new Cursor_statementContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_cursor_statement);
		int _la;
		try {
			setState(6731);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CLOSE:
			case DEALLOCATE:
			case OPEN:
				enterOuterAlt(_localctx, 1);
				{
				setState(6689);
				_la = _input.LA(1);
				if ( !(_la==CLOSE || _la==DEALLOCATE || _la==OPEN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6691);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,893,_ctx) ) {
				case 1:
					{
					setState(6690);
					match(GLOBAL);
					}
					break;
				}
				setState(6693);
				cursor_name();
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6694);
				match(DECLARE);
				setState(6695);
				cursor_name();
				setState(6697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INSENSITIVE || _la==SEMI_SENSITIVE) {
					{
					setState(6696);
					_la = _input.LA(1);
					if ( !(_la==INSENSITIVE || _la==SEMI_SENSITIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(6700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SCROLL) {
					{
					setState(6699);
					match(SCROLL);
					}
				}

				setState(6702);
				cursor_common();
				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 3);
				{
				setState(6704);
				match(FETCH);
				setState(6714);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,897,_ctx) ) {
				case 1:
					{
					setState(6711);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NEXT:
						{
						setState(6705);
						match(NEXT);
						}
						break;
					case PRIOR:
						{
						setState(6706);
						match(PRIOR);
						}
						break;
					case FIRST:
						{
						setState(6707);
						match(FIRST);
						}
						break;
					case LAST:
						{
						setState(6708);
						match(LAST);
						}
						break;
					case ABSOLUTE:
					case RELATIVE:
						{
						setState(6709);
						_la = _input.LA(1);
						if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6710);
						expression(0);
						}
						break;
					case FROM:
						break;
					default:
						break;
					}
					setState(6713);
					match(FROM);
					}
					break;
				}
				setState(6717);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,898,_ctx) ) {
				case 1:
					{
					setState(6716);
					match(GLOBAL);
					}
					break;
				}
				setState(6719);
				cursor_name();
				setState(6729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(6720);
					match(INTO);
					setState(6721);
					match(LOCAL_ID);
					setState(6726);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6722);
						match(COMMA);
						setState(6723);
						match(LOCAL_ID);
						}
						}
						setState(6728);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_databaseContext extends ParserRuleContext {
		public IdContext database_name;
		public Token file_or_filegroup;
		public IdContext logical_device_name;
		public IdContext backup_set_name;
		public Token medianame;
		public Token stats_percent;
		public IdContext encryptor_name;
		public TerminalNode BACKUP() { return getToken(TSQLParser.BACKUP, 0); }
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public List<TerminalNode> TO() { return getTokens(TSQLParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSQLParser.TO, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode READ_WRITE_FILEGROUPS() { return getToken(TSQLParser.READ_WRITE_FILEGROUPS, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSQLParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSQLParser.FILE, i);
		}
		public List<TerminalNode> FILEGROUP() { return getTokens(TSQLParser.FILEGROUP); }
		public TerminalNode FILEGROUP(int i) {
			return getToken(TSQLParser.FILEGROUP, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> DISK() { return getTokens(TSQLParser.DISK); }
		public TerminalNode DISK(int i) {
			return getToken(TSQLParser.DISK, i);
		}
		public List<TerminalNode> TAPE() { return getTokens(TSQLParser.TAPE); }
		public TerminalNode TAPE(int i) {
			return getToken(TSQLParser.TAPE, i);
		}
		public List<TerminalNode> URL() { return getTokens(TSQLParser.URL); }
		public TerminalNode URL(int i) {
			return getToken(TSQLParser.URL, i);
		}
		public List<TerminalNode> MIRROR() { return getTokens(TSQLParser.MIRROR); }
		public TerminalNode MIRROR(int i) {
			return getToken(TSQLParser.MIRROR, i);
		}
		public List<TerminalNode> DIFFERENTIAL() { return getTokens(TSQLParser.DIFFERENTIAL); }
		public TerminalNode DIFFERENTIAL(int i) {
			return getToken(TSQLParser.DIFFERENTIAL, i);
		}
		public List<TerminalNode> COPY_ONLY() { return getTokens(TSQLParser.COPY_ONLY); }
		public TerminalNode COPY_ONLY(int i) {
			return getToken(TSQLParser.COPY_ONLY, i);
		}
		public List<TerminalNode> DESCRIPTION() { return getTokens(TSQLParser.DESCRIPTION); }
		public TerminalNode DESCRIPTION(int i) {
			return getToken(TSQLParser.DESCRIPTION, i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSQLParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSQLParser.NAME, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSQLParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSQLParser.CREDENTIAL, i);
		}
		public List<TerminalNode> FILE_SNAPSHOT() { return getTokens(TSQLParser.FILE_SNAPSHOT); }
		public TerminalNode FILE_SNAPSHOT(int i) {
			return getToken(TSQLParser.FILE_SNAPSHOT, i);
		}
		public List<TerminalNode> MEDIADESCRIPTION() { return getTokens(TSQLParser.MEDIADESCRIPTION); }
		public TerminalNode MEDIADESCRIPTION(int i) {
			return getToken(TSQLParser.MEDIADESCRIPTION, i);
		}
		public List<TerminalNode> MEDIANAME() { return getTokens(TSQLParser.MEDIANAME); }
		public TerminalNode MEDIANAME(int i) {
			return getToken(TSQLParser.MEDIANAME, i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(TSQLParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(TSQLParser.BLOCKSIZE, i);
		}
		public List<TerminalNode> BUFFERCOUNT() { return getTokens(TSQLParser.BUFFERCOUNT); }
		public TerminalNode BUFFERCOUNT(int i) {
			return getToken(TSQLParser.BUFFERCOUNT, i);
		}
		public List<TerminalNode> MAXTRANSFER() { return getTokens(TSQLParser.MAXTRANSFER); }
		public TerminalNode MAXTRANSFER(int i) {
			return getToken(TSQLParser.MAXTRANSFER, i);
		}
		public List<TerminalNode> RESTART() { return getTokens(TSQLParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(TSQLParser.RESTART, i);
		}
		public List<TerminalNode> STATS() { return getTokens(TSQLParser.STATS); }
		public TerminalNode STATS(int i) {
			return getToken(TSQLParser.STATS, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSQLParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSQLParser.ENCRYPTION, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSQLParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSQLParser.ALGORITHM, i);
		}
		public List<TerminalNode> SERVER() { return getTokens(TSQLParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSQLParser.SERVER, i);
		}
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSQLParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSQLParser.CERTIFICATE, i);
		}
		public List<TerminalNode> COMPRESSION() { return getTokens(TSQLParser.COMPRESSION); }
		public TerminalNode COMPRESSION(int i) {
			return getToken(TSQLParser.COMPRESSION, i);
		}
		public List<TerminalNode> NO_COMPRESSION() { return getTokens(TSQLParser.NO_COMPRESSION); }
		public TerminalNode NO_COMPRESSION(int i) {
			return getToken(TSQLParser.NO_COMPRESSION, i);
		}
		public List<TerminalNode> NOINIT() { return getTokens(TSQLParser.NOINIT); }
		public TerminalNode NOINIT(int i) {
			return getToken(TSQLParser.NOINIT, i);
		}
		public List<TerminalNode> INIT() { return getTokens(TSQLParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(TSQLParser.INIT, i);
		}
		public List<TerminalNode> NOSKIP() { return getTokens(TSQLParser.NOSKIP); }
		public TerminalNode NOSKIP(int i) {
			return getToken(TSQLParser.NOSKIP, i);
		}
		public List<TerminalNode> SKIP_KEYWORD() { return getTokens(TSQLParser.SKIP_KEYWORD); }
		public TerminalNode SKIP_KEYWORD(int i) {
			return getToken(TSQLParser.SKIP_KEYWORD, i);
		}
		public List<TerminalNode> NOFORMAT() { return getTokens(TSQLParser.NOFORMAT); }
		public TerminalNode NOFORMAT(int i) {
			return getToken(TSQLParser.NOFORMAT, i);
		}
		public List<TerminalNode> FORMAT() { return getTokens(TSQLParser.FORMAT); }
		public TerminalNode FORMAT(int i) {
			return getToken(TSQLParser.FORMAT, i);
		}
		public List<TerminalNode> NO_CHECKSUM() { return getTokens(TSQLParser.NO_CHECKSUM); }
		public TerminalNode NO_CHECKSUM(int i) {
			return getToken(TSQLParser.NO_CHECKSUM, i);
		}
		public List<TerminalNode> CHECKSUM() { return getTokens(TSQLParser.CHECKSUM); }
		public TerminalNode CHECKSUM(int i) {
			return getToken(TSQLParser.CHECKSUM, i);
		}
		public List<TerminalNode> STOP_ON_ERROR() { return getTokens(TSQLParser.STOP_ON_ERROR); }
		public TerminalNode STOP_ON_ERROR(int i) {
			return getToken(TSQLParser.STOP_ON_ERROR, i);
		}
		public List<TerminalNode> CONTINUE_AFTER_ERROR() { return getTokens(TSQLParser.CONTINUE_AFTER_ERROR); }
		public TerminalNode CONTINUE_AFTER_ERROR(int i) {
			return getToken(TSQLParser.CONTINUE_AFTER_ERROR, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(TSQLParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(TSQLParser.REWIND, i);
		}
		public List<TerminalNode> NOREWIND() { return getTokens(TSQLParser.NOREWIND); }
		public TerminalNode NOREWIND(int i) {
			return getToken(TSQLParser.NOREWIND, i);
		}
		public List<TerminalNode> LOAD() { return getTokens(TSQLParser.LOAD); }
		public TerminalNode LOAD(int i) {
			return getToken(TSQLParser.LOAD, i);
		}
		public List<TerminalNode> NOUNLOAD() { return getTokens(TSQLParser.NOUNLOAD); }
		public TerminalNode NOUNLOAD(int i) {
			return getToken(TSQLParser.NOUNLOAD, i);
		}
		public List<TerminalNode> AES_128() { return getTokens(TSQLParser.AES_128); }
		public TerminalNode AES_128(int i) {
			return getToken(TSQLParser.AES_128, i);
		}
		public List<TerminalNode> AES_192() { return getTokens(TSQLParser.AES_192); }
		public TerminalNode AES_192(int i) {
			return getToken(TSQLParser.AES_192, i);
		}
		public List<TerminalNode> AES_256() { return getTokens(TSQLParser.AES_256); }
		public TerminalNode AES_256(int i) {
			return getToken(TSQLParser.AES_256, i);
		}
		public List<TerminalNode> TRIPLE_DES_3KEY() { return getTokens(TSQLParser.TRIPLE_DES_3KEY); }
		public TerminalNode TRIPLE_DES_3KEY(int i) {
			return getToken(TSQLParser.TRIPLE_DES_3KEY, i);
		}
		public List<TerminalNode> EXPIREDATE() { return getTokens(TSQLParser.EXPIREDATE); }
		public TerminalNode EXPIREDATE(int i) {
			return getToken(TSQLParser.EXPIREDATE, i);
		}
		public List<TerminalNode> RETAINDAYS() { return getTokens(TSQLParser.RETAINDAYS); }
		public TerminalNode RETAINDAYS(int i) {
			return getToken(TSQLParser.RETAINDAYS, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSQLParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSQLParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSQLParser.KEY, i);
		}
		public Backup_databaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_database; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBackup_database(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBackup_database(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBackup_database(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_databaseContext backup_database() throws RecognitionException {
		Backup_databaseContext _localctx = new Backup_databaseContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_backup_database);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6733);
			match(BACKUP);
			setState(6734);
			match(DATABASE);
			{
			setState(6735);
			((Backup_databaseContext)_localctx).database_name = id();
			}
			setState(6748);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READ_WRITE_FILEGROUPS) {
				{
				setState(6736);
				match(READ_WRITE_FILEGROUPS);
				setState(6745);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,903,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(6738);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6737);
							match(COMMA);
							}
						}

						setState(6740);
						_la = _input.LA(1);
						if ( !(_la==FILE || _la==FILEGROUP) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6741);
						match(EQUAL);
						setState(6742);
						((Backup_databaseContext)_localctx).file_or_filegroup = match(STRING);
						}
						} 
					}
					setState(6747);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,903,_ctx);
				}
				}
			}

			setState(6758);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FILE || _la==FILEGROUP || _la==COMMA) {
				{
				{
				setState(6751);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6750);
					match(COMMA);
					}
				}

				setState(6753);
				_la = _input.LA(1);
				if ( !(_la==FILE || _la==FILEGROUP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6754);
				match(EQUAL);
				setState(6755);
				((Backup_databaseContext)_localctx).file_or_filegroup = match(STRING);
				}
				}
				setState(6760);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6784);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,912,_ctx) ) {
			case 1:
				{
				setState(6761);
				match(TO);
				setState(6766); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(6763);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6762);
							match(COMMA);
							}
						}

						setState(6765);
						((Backup_databaseContext)_localctx).logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6768); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,908,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(6770);
				match(TO);
				setState(6780); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6772);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6771);
						match(COMMA);
						}
					}

					setState(6774);
					_la = _input.LA(1);
					if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6775);
					match(EQUAL);
					setState(6778);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(6776);
						match(STRING);
						}
						break;
					case FILLFACTOR:
					case PRECISION:
					case ABSENT:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AES:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_CONNECTIONS:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANONYMOUS:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPEND:
					case APPLICATION_LOG:
					case APPLICATION:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUDIT_GUID:
					case AUDIT:
					case AUTHENTICATION:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AUTO_UPDATE_STATISTICS:
					case AUTO:
					case AUTOGROW_ALL_FILES:
					case AUTOGROW_SINGLE_FILE:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case AVAILABILITY:
					case BACKUP_PRIORITY:
					case BEFORE:
					case BEGIN_DIALOG:
					case BINARY_BASE64:
					case BINDING:
					case BLOB_STORAGE:
					case BLOCK:
					case BLOCKING_HIERARCHY:
					case BLOCKSIZE:
					case BROKER_INSTANCE:
					case BROKER:
					case BUFFER:
					case BUFFERCOUNT:
					case BULK_LOGGED:
					case CACHE:
					case CALLED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CERTIFICATE:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHANGES:
					case CHANGETABLE:
					case CHAR:
					case CHARACTER:
					case CHECK_EXPIRATION:
					case CHECK_POLICY:
					case CHECKSUM:
					case CLASSIFIER_FUNCTION:
					case CLEANUP:
					case CLUSTER:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case COMPRESSION:
					case CONCAT_NULL_YIELDS_NULL:
					case CONCAT:
					case CONFIGURATION:
					case CONNECT:
					case CONTAINMENT:
					case CONTENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT_NAME:
					case CONTRACT:
					case CONTROL:
					case CONVERSATION:
					case COOKIE:
					case COPY_ONLY:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATA:
					case DATABASE_MIRRORING:
					case DATE_CORRELATION_OPTIMIZATION:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DATABASE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DEFAULT_SCHEMA:
					case DELAY:
					case DELAYED_DURABILITY:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIAGNOSTICS:
					case DIALOG:
					case DIFFERENTIAL:
					case DIRECTORY_NAME:
					case DISABLE_BROKER:
					case DISABLE:
					case DISABLED:
					case DOCUMENT:
					case DTC_SUPPORT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE_BROKER:
					case ENABLE:
					case ENABLED:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ENDPOINT:
					case ERROR_BROKER_CONVERSATIONS:
					case ERROR:
					case EVENT_RETENTION_MODE:
					case EVENT:
					case EXCLUSIVE:
					case EXECUTABLE_FILE:
					case EXECUTABLE:
					case EXPAND:
					case EXPIREDATE:
					case EXPIRY_DATE:
					case EXPLICIT:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILOVER:
					case FAILURE_CONDITION_LEVEL:
					case FAILURECONDITIONLEVEL:
					case FALSE:
					case FAN_IN:
					case FAST_FORWARD:
					case FAST:
					case FILE_SNAPSHOT:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM_ON:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case FORCE:
					case FORCED:
					case FORCESEEK:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GET:
					case GLOBAL:
					case GOVERNOR:
					case GROUP_MAX_REQUESTS:
					case HADR:
					case HASH:
					case HASHED:
					case HEALTH_CHECK_TIMEOUT:
					case HEALTHCHECKTIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IIF:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCLUDE:
					case INCREMENT:
					case INCREMENTAL:
					case INFINITE:
					case INIT:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSTEAD:
					case IO:
					case IP:
					case ISOLATION:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KERBEROS:
					case KEY_PATH:
					case KEY_SOURCE:
					case KEY_STORE_PROVIDER_NAME:
					case KEYS:
					case KEYSET:
					case LANGUAGE:
					case LAST:
					case LEVEL:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LIST:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LISTENER_URL:
					case LISTENER:
					case LOB_COMPACTION:
					case LOCAL_SERVICE_NAME:
					case LOCAL:
					case LOCATION:
					case LOCK_ESCALATION:
					case LOCK:
					case LOG:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MASTER:
					case MATCHED:
					case MATERIALIZED:
					case MAX_CPU_PERCENT:
					case MAX_DISPATCH_LATENCY:
					case MAX_DOP:
					case MAX_EVENT_SIZE:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_MEMORY:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAX_SIZE:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MAXTRANSFER:
					case MAXVALUE:
					case MB:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEDIUM:
					case MEMBER:
					case MEMORY_OPTIMIZED_DATA:
					case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
					case MEMORY_OPTIMIZED:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARD_SIZE:
					case MESSAGE_FORWARDING:
					case MESSAGE:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MINVALUE:
					case MIRROR_ADDRESS:
					case MIRROR:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case MUST_CHANGE:
					case NAME:
					case NCHAR:
					case NEGOTIATE:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEWNAME:
					case NEXT:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NO:
					case NODES:
					case NOEXPAND:
					case NOFORMAT:
					case NOINIT:
					case NON_TRANSACTED_ACCESS:
					case NONE:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOREWIND:
					case NOSKIP:
					case NOTIFICATION:
					case NOUNLOAD:
					case NOWAIT:
					case NTLM:
					case NUMANODE:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPENJSON:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARSE:
					case PARTIAL:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PASSWORD:
					case PATH:
					case PAUSE:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERMISSION_SET:
					case PERSIST_SAMPLE_PERSENT:
					case PERSISTED:
					case PERSISTENT_LOG_BUFFER:
					case PLATFORM:
					case POISON_MESSAGE_HANDLING:
					case POLICY:
					case POOL:
					case POPULATION:
					case PORT:
					case PRECEDING:
					case PREDICATE:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY_LEVEL:
					case PRIORITY:
					case PRIVATE_KEY:
					case PRIVATE:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROCESS:
					case PROFILE:
					case PROPERTY_DESCRIPTION:
					case PROPERTY_INT_ID:
					case PROPERTY_SET_GUID:
					case PROPERTY:
					case PROVIDER_KEY_NAME:
					case PROVIDER:
					case QUERYTRACEON:
					case QUEUE_DELAY:
					case QUEUE:
					case QUOTED_IDENTIFIER:
					case R_LETTER:
					case RANGE:
					case RAW:
					case RC2:
					case RC4_128:
					case RC4:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY_ROUTING_LIST:
					case READ_ONLY:
					case READ_WRITE_FILEGROUPS:
					case READ_WRITE:
					case READWRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case REGENERATE:
					case RELATED_CONVERSATION_GROUP:
					case RELATED_CONVERSATION:
					case RELATIVE:
					case REMOTE_SERVICE_NAME:
					case REMOTE:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case REQUIRED:
					case RESAMPLE:
					case RESERVE_DISK_SPACE:
					case RESET:
					case RESOURCE_MANAGER_LOCATION:
					case RESOURCE:
					case RESTART:
					case RESTRICTED_USER:
					case RESULT:
					case RESUME:
					case RETAINDAYS:
					case RETENTION:
					case RETURNS:
					case REWIND:
					case ROBUST:
					case ROLE:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROWGUID:
					case ROWS:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case RSA_512:
					case SAFE:
					case SAFETY:
					case SAMPLE:
					case SCHEDULER:
					case SCHEMABINDING:
					case SCHEME:
					case SCOPED:
					case SCROLL_LOCKS:
					case SCROLL:
					case SEARCH:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDARY:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SECURITY:
					case SEEDING_MODE:
					case SELECTIVE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SERVER:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SERVICE:
					case SESSION_TIMEOUT:
					case SESSION:
					case SETERROR:
					case SETS:
					case SHARE:
					case SHOWPLAN:
					case SID:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SINGLETON:
					case SIZE:
					case SKIP_KEYWORD:
					case SNAPSHOT:
					case SOFTNUMA:
					case SOURCE:
					case SPARSE:
					case SPATIAL_WINDOW_MAX_CELLS:
					case SPECIFICATION:
					case SPLIT:
					case SQL:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STANDBY:
					case START_DATE:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STATE:
					case STATIC:
					case STATISTICAL_SEMANTICS:
					case STATS:
					case STATUS:
					case STOP_ON_ERROR:
					case STOP:
					case STOPLIST:
					case STOPPED:
					case STRING_AGG:
					case SUBJECT:
					case SUPPORTED:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TAPE:
					case TARGET_RECOVERY_TIME:
					case TARGET:
					case TB:
					case TCP:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TORN_PAGE_DETECTION:
					case TRACK_CAUSALITY:
					case TRACK_COLUMNS_UPDATED:
					case TRANSFER:
					case TRANSFORM_NOISE_WORDS:
					case TRIM:
					case TRIPLE_DES_3KEY:
					case TRIPLE_DES:
					case TRUE:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE_WARNING:
					case TYPE:
					case UNBOUNDED:
					case UNCHECKED:
					case UNCOMMITTED:
					case UNDEFINED:
					case UNKNOWN:
					case UNLIMITED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VERBOSELOGGING:
					case VERSION:
					case VIEW_METADATA:
					case VIEWS:
					case VISIBILITY:
					case WAIT:
					case WELL_FORMED_XML:
					case WINDOWS:
					case WITHOUT_ARRAY_WRAPPER:
					case WITHOUT:
					case WITNESS:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XQUERY:
					case XSINIL:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(6777);
						id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(6782); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
				}
				break;
			}
			setState(6819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,920,_ctx) ) {
			case 1:
				{
				setState(6796); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6786);
					match(MIRROR);
					setState(6787);
					match(TO);
					setState(6792); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(6789);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(6788);
								match(COMMA);
								}
							}

							setState(6791);
							((Backup_databaseContext)_localctx).logical_device_name = id();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(6794); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,914,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(6798); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			case 2:
				{
				setState(6815); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6800);
					match(MIRROR);
					setState(6801);
					match(TO);
					setState(6811); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(6803);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6802);
							match(COMMA);
							}
						}

						setState(6805);
						_la = _input.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6806);
						match(EQUAL);
						setState(6809);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(6807);
							match(STRING);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(6808);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						setState(6813); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
					}
					}
					setState(6817); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			}
			setState(6981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,956,_ctx) ) {
			case 1:
				{
				setState(6821);
				match(WITH);
				setState(6978);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==LOAD || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (BLOCKSIZE - 252)) | (1L << (BUFFERCOUNT - 252)) | (1L << (CHECKSUM - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONTINUE_AFTER_ERROR - 252)) | (1L << (COPY_ONLY - 252)) | (1L << (CREDENTIAL - 252)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DESCRIPTION - 323)) | (1L << (DIFFERENTIAL - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (EXPIREDATE - 323)) | (1L << (FILE_SNAPSHOT - 323)) | (1L << (FORMAT - 323)))) != 0) || _la==INIT || _la==MAXTRANSFER || ((((_la - 475)) & ~0x3f) == 0 && ((1L << (_la - 475)) & ((1L << (MEDIADESCRIPTION - 475)) | (1L << (MEDIANAME - 475)) | (1L << (NAME - 475)) | (1L << (NO_CHECKSUM - 475)) | (1L << (NO_COMPRESSION - 475)) | (1L << (NOFORMAT - 475)) | (1L << (NOINIT - 475)) | (1L << (NOREWIND - 475)) | (1L << (NOSKIP - 475)) | (1L << (NOUNLOAD - 475)))) != 0) || ((((_la - 629)) & ~0x3f) == 0 && ((1L << (_la - 629)) & ((1L << (RESTART - 629)) | (1L << (RETAINDAYS - 629)) | (1L << (REWIND - 629)) | (1L << (SKIP_KEYWORD - 629)))) != 0) || _la==STATS || _la==STOP_ON_ERROR || _la==COMMA) {
					{
					setState(6976);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,954,_ctx) ) {
					case 1:
						{
						setState(6823);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6822);
							match(COMMA);
							}
						}

						setState(6825);
						match(DIFFERENTIAL);
						}
						break;
					case 2:
						{
						setState(6827);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6826);
							match(COMMA);
							}
						}

						setState(6829);
						match(COPY_ONLY);
						}
						break;
					case 3:
						{
						setState(6831);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6830);
							match(COMMA);
							}
						}

						setState(6833);
						_la = _input.LA(1);
						if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 4:
						{
						setState(6835);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6834);
							match(COMMA);
							}
						}

						setState(6837);
						match(DESCRIPTION);
						setState(6838);
						match(EQUAL);
						setState(6841);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(6839);
							match(STRING);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(6840);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 5:
						{
						setState(6844);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6843);
							match(COMMA);
							}
						}

						setState(6846);
						match(NAME);
						setState(6847);
						match(EQUAL);
						setState(6848);
						((Backup_databaseContext)_localctx).backup_set_name = id();
						}
						break;
					case 6:
						{
						setState(6850);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6849);
							match(COMMA);
							}
						}

						setState(6852);
						match(CREDENTIAL);
						}
						break;
					case 7:
						{
						setState(6854);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6853);
							match(COMMA);
							}
						}

						setState(6856);
						match(FILE_SNAPSHOT);
						}
						break;
					case 8:
						{
						setState(6858);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6857);
							match(COMMA);
							}
						}

						setState(6872);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case EXPIREDATE:
							{
							setState(6860);
							match(EXPIREDATE);
							setState(6861);
							match(EQUAL);
							setState(6864);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(6862);
								match(STRING);
								}
								break;
							case FILLFACTOR:
							case PRECISION:
							case ABSENT:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AES:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_CONNECTIONS:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANONYMOUS:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPEND:
							case APPLICATION_LOG:
							case APPLICATION:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUDIT_GUID:
							case AUDIT:
							case AUTHENTICATION:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AUTO_UPDATE_STATISTICS:
							case AUTO:
							case AUTOGROW_ALL_FILES:
							case AUTOGROW_SINGLE_FILE:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case AVAILABILITY:
							case BACKUP_PRIORITY:
							case BEFORE:
							case BEGIN_DIALOG:
							case BINARY_BASE64:
							case BINDING:
							case BLOB_STORAGE:
							case BLOCK:
							case BLOCKING_HIERARCHY:
							case BLOCKSIZE:
							case BROKER_INSTANCE:
							case BROKER:
							case BUFFER:
							case BUFFERCOUNT:
							case BULK_LOGGED:
							case CACHE:
							case CALLED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CERTIFICATE:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHANGES:
							case CHANGETABLE:
							case CHAR:
							case CHARACTER:
							case CHECK_EXPIRATION:
							case CHECK_POLICY:
							case CHECKSUM:
							case CLASSIFIER_FUNCTION:
							case CLEANUP:
							case CLUSTER:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case COMPRESSION:
							case CONCAT_NULL_YIELDS_NULL:
							case CONCAT:
							case CONFIGURATION:
							case CONNECT:
							case CONTAINMENT:
							case CONTENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT_NAME:
							case CONTRACT:
							case CONTROL:
							case CONVERSATION:
							case COOKIE:
							case COPY_ONLY:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATA:
							case DATABASE_MIRRORING:
							case DATE_CORRELATION_OPTIMIZATION:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DATABASE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DEFAULT_SCHEMA:
							case DELAY:
							case DELAYED_DURABILITY:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIAGNOSTICS:
							case DIALOG:
							case DIFFERENTIAL:
							case DIRECTORY_NAME:
							case DISABLE_BROKER:
							case DISABLE:
							case DISABLED:
							case DOCUMENT:
							case DTC_SUPPORT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE_BROKER:
							case ENABLE:
							case ENABLED:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ENDPOINT:
							case ERROR_BROKER_CONVERSATIONS:
							case ERROR:
							case EVENT_RETENTION_MODE:
							case EVENT:
							case EXCLUSIVE:
							case EXECUTABLE_FILE:
							case EXECUTABLE:
							case EXPAND:
							case EXPIREDATE:
							case EXPIRY_DATE:
							case EXPLICIT:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILOVER:
							case FAILURE_CONDITION_LEVEL:
							case FAILURECONDITIONLEVEL:
							case FALSE:
							case FAN_IN:
							case FAST_FORWARD:
							case FAST:
							case FILE_SNAPSHOT:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM_ON:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FOLLOWING:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case FORCE:
							case FORCED:
							case FORCESEEK:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GET:
							case GLOBAL:
							case GOVERNOR:
							case GROUP_MAX_REQUESTS:
							case HADR:
							case HASH:
							case HASHED:
							case HEALTH_CHECK_TIMEOUT:
							case HEALTHCHECKTIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IIF:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCLUDE:
							case INCREMENT:
							case INCREMENTAL:
							case INFINITE:
							case INIT:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSTEAD:
							case IO:
							case IP:
							case ISOLATION:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KERBEROS:
							case KEY_PATH:
							case KEY_SOURCE:
							case KEY_STORE_PROVIDER_NAME:
							case KEYS:
							case KEYSET:
							case LANGUAGE:
							case LAST:
							case LEVEL:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LIST:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LISTENER_URL:
							case LISTENER:
							case LOB_COMPACTION:
							case LOCAL_SERVICE_NAME:
							case LOCAL:
							case LOCATION:
							case LOCK_ESCALATION:
							case LOCK:
							case LOG:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MASTER:
							case MATCHED:
							case MATERIALIZED:
							case MAX_CPU_PERCENT:
							case MAX_DISPATCH_LATENCY:
							case MAX_DOP:
							case MAX_EVENT_SIZE:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_MEMORY:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAX_SIZE:
							case MAX:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MAXTRANSFER:
							case MAXVALUE:
							case MB:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEDIUM:
							case MEMBER:
							case MEMORY_OPTIMIZED_DATA:
							case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
							case MEMORY_OPTIMIZED:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARD_SIZE:
							case MESSAGE_FORWARDING:
							case MESSAGE:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MINVALUE:
							case MIRROR_ADDRESS:
							case MIRROR:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case MUST_CHANGE:
							case NAME:
							case NCHAR:
							case NEGOTIATE:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEWNAME:
							case NEXT:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NO:
							case NODES:
							case NOEXPAND:
							case NOFORMAT:
							case NOINIT:
							case NON_TRANSACTED_ACCESS:
							case NONE:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOREWIND:
							case NOSKIP:
							case NOTIFICATION:
							case NOUNLOAD:
							case NOWAIT:
							case NTLM:
							case NUMANODE:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPENJSON:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARSE:
							case PARTIAL:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PASSWORD:
							case PATH:
							case PAUSE:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERMISSION_SET:
							case PERSIST_SAMPLE_PERSENT:
							case PERSISTED:
							case PERSISTENT_LOG_BUFFER:
							case PLATFORM:
							case POISON_MESSAGE_HANDLING:
							case POLICY:
							case POOL:
							case POPULATION:
							case PORT:
							case PRECEDING:
							case PREDICATE:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY_LEVEL:
							case PRIORITY:
							case PRIVATE_KEY:
							case PRIVATE:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROCESS:
							case PROFILE:
							case PROPERTY_DESCRIPTION:
							case PROPERTY_INT_ID:
							case PROPERTY_SET_GUID:
							case PROPERTY:
							case PROVIDER_KEY_NAME:
							case PROVIDER:
							case QUERYTRACEON:
							case QUEUE_DELAY:
							case QUEUE:
							case QUOTED_IDENTIFIER:
							case R_LETTER:
							case RANGE:
							case RAW:
							case RC2:
							case RC4_128:
							case RC4:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY_ROUTING_LIST:
							case READ_ONLY:
							case READ_WRITE_FILEGROUPS:
							case READ_WRITE:
							case READWRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case REGENERATE:
							case RELATED_CONVERSATION_GROUP:
							case RELATED_CONVERSATION:
							case RELATIVE:
							case REMOTE_SERVICE_NAME:
							case REMOTE:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case REQUIRED:
							case RESAMPLE:
							case RESERVE_DISK_SPACE:
							case RESET:
							case RESOURCE_MANAGER_LOCATION:
							case RESOURCE:
							case RESTART:
							case RESTRICTED_USER:
							case RESULT:
							case RESUME:
							case RETAINDAYS:
							case RETENTION:
							case RETURNS:
							case REWIND:
							case ROBUST:
							case ROLE:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROWGUID:
							case ROWS:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case RSA_512:
							case SAFE:
							case SAFETY:
							case SAMPLE:
							case SCHEDULER:
							case SCHEMABINDING:
							case SCHEME:
							case SCOPED:
							case SCROLL_LOCKS:
							case SCROLL:
							case SEARCH:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDARY:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SECURITY:
							case SEEDING_MODE:
							case SELECTIVE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SERVER:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SERVICE:
							case SESSION_TIMEOUT:
							case SESSION:
							case SETERROR:
							case SETS:
							case SHARE:
							case SHOWPLAN:
							case SID:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SINGLETON:
							case SIZE:
							case SKIP_KEYWORD:
							case SNAPSHOT:
							case SOFTNUMA:
							case SOURCE:
							case SPARSE:
							case SPATIAL_WINDOW_MAX_CELLS:
							case SPECIFICATION:
							case SPLIT:
							case SQL:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STANDBY:
							case START_DATE:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STATE:
							case STATIC:
							case STATISTICAL_SEMANTICS:
							case STATS:
							case STATUS:
							case STOP_ON_ERROR:
							case STOP:
							case STOPLIST:
							case STOPPED:
							case STRING_AGG:
							case SUBJECT:
							case SUPPORTED:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TAPE:
							case TARGET_RECOVERY_TIME:
							case TARGET:
							case TB:
							case TCP:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TORN_PAGE_DETECTION:
							case TRACK_CAUSALITY:
							case TRACK_COLUMNS_UPDATED:
							case TRANSFER:
							case TRANSFORM_NOISE_WORDS:
							case TRIM:
							case TRIPLE_DES_3KEY:
							case TRIPLE_DES:
							case TRUE:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE_WARNING:
							case TYPE:
							case UNBOUNDED:
							case UNCHECKED:
							case UNCOMMITTED:
							case UNDEFINED:
							case UNKNOWN:
							case UNLIMITED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VERBOSELOGGING:
							case VERSION:
							case VIEW_METADATA:
							case VIEWS:
							case VISIBILITY:
							case WAIT:
							case WELL_FORMED_XML:
							case WINDOWS:
							case WITHOUT_ARRAY_WRAPPER:
							case WITHOUT:
							case WITNESS:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XQUERY:
							case XSINIL:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(6863);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case RETAINDAYS:
							{
							setState(6866);
							match(RETAINDAYS);
							setState(6867);
							match(EQUAL);
							setState(6870);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(6868);
								match(DECIMAL);
								}
								break;
							case FILLFACTOR:
							case PRECISION:
							case ABSENT:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AES:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_CONNECTIONS:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANONYMOUS:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPEND:
							case APPLICATION_LOG:
							case APPLICATION:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUDIT_GUID:
							case AUDIT:
							case AUTHENTICATION:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AUTO_UPDATE_STATISTICS:
							case AUTO:
							case AUTOGROW_ALL_FILES:
							case AUTOGROW_SINGLE_FILE:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case AVAILABILITY:
							case BACKUP_PRIORITY:
							case BEFORE:
							case BEGIN_DIALOG:
							case BINARY_BASE64:
							case BINDING:
							case BLOB_STORAGE:
							case BLOCK:
							case BLOCKING_HIERARCHY:
							case BLOCKSIZE:
							case BROKER_INSTANCE:
							case BROKER:
							case BUFFER:
							case BUFFERCOUNT:
							case BULK_LOGGED:
							case CACHE:
							case CALLED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CERTIFICATE:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHANGES:
							case CHANGETABLE:
							case CHAR:
							case CHARACTER:
							case CHECK_EXPIRATION:
							case CHECK_POLICY:
							case CHECKSUM:
							case CLASSIFIER_FUNCTION:
							case CLEANUP:
							case CLUSTER:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case COMPRESSION:
							case CONCAT_NULL_YIELDS_NULL:
							case CONCAT:
							case CONFIGURATION:
							case CONNECT:
							case CONTAINMENT:
							case CONTENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT_NAME:
							case CONTRACT:
							case CONTROL:
							case CONVERSATION:
							case COOKIE:
							case COPY_ONLY:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATA:
							case DATABASE_MIRRORING:
							case DATE_CORRELATION_OPTIMIZATION:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DATABASE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DEFAULT_SCHEMA:
							case DELAY:
							case DELAYED_DURABILITY:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIAGNOSTICS:
							case DIALOG:
							case DIFFERENTIAL:
							case DIRECTORY_NAME:
							case DISABLE_BROKER:
							case DISABLE:
							case DISABLED:
							case DOCUMENT:
							case DTC_SUPPORT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE_BROKER:
							case ENABLE:
							case ENABLED:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ENDPOINT:
							case ERROR_BROKER_CONVERSATIONS:
							case ERROR:
							case EVENT_RETENTION_MODE:
							case EVENT:
							case EXCLUSIVE:
							case EXECUTABLE_FILE:
							case EXECUTABLE:
							case EXPAND:
							case EXPIREDATE:
							case EXPIRY_DATE:
							case EXPLICIT:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILOVER:
							case FAILURE_CONDITION_LEVEL:
							case FAILURECONDITIONLEVEL:
							case FALSE:
							case FAN_IN:
							case FAST_FORWARD:
							case FAST:
							case FILE_SNAPSHOT:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM_ON:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FOLLOWING:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case FORCE:
							case FORCED:
							case FORCESEEK:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GET:
							case GLOBAL:
							case GOVERNOR:
							case GROUP_MAX_REQUESTS:
							case HADR:
							case HASH:
							case HASHED:
							case HEALTH_CHECK_TIMEOUT:
							case HEALTHCHECKTIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IIF:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCLUDE:
							case INCREMENT:
							case INCREMENTAL:
							case INFINITE:
							case INIT:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSTEAD:
							case IO:
							case IP:
							case ISOLATION:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KERBEROS:
							case KEY_PATH:
							case KEY_SOURCE:
							case KEY_STORE_PROVIDER_NAME:
							case KEYS:
							case KEYSET:
							case LANGUAGE:
							case LAST:
							case LEVEL:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LIST:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LISTENER_URL:
							case LISTENER:
							case LOB_COMPACTION:
							case LOCAL_SERVICE_NAME:
							case LOCAL:
							case LOCATION:
							case LOCK_ESCALATION:
							case LOCK:
							case LOG:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MASTER:
							case MATCHED:
							case MATERIALIZED:
							case MAX_CPU_PERCENT:
							case MAX_DISPATCH_LATENCY:
							case MAX_DOP:
							case MAX_EVENT_SIZE:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_MEMORY:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAX_SIZE:
							case MAX:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MAXTRANSFER:
							case MAXVALUE:
							case MB:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEDIUM:
							case MEMBER:
							case MEMORY_OPTIMIZED_DATA:
							case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
							case MEMORY_OPTIMIZED:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARD_SIZE:
							case MESSAGE_FORWARDING:
							case MESSAGE:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MINVALUE:
							case MIRROR_ADDRESS:
							case MIRROR:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case MUST_CHANGE:
							case NAME:
							case NCHAR:
							case NEGOTIATE:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEWNAME:
							case NEXT:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NO:
							case NODES:
							case NOEXPAND:
							case NOFORMAT:
							case NOINIT:
							case NON_TRANSACTED_ACCESS:
							case NONE:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOREWIND:
							case NOSKIP:
							case NOTIFICATION:
							case NOUNLOAD:
							case NOWAIT:
							case NTLM:
							case NUMANODE:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPENJSON:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARSE:
							case PARTIAL:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PASSWORD:
							case PATH:
							case PAUSE:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERMISSION_SET:
							case PERSIST_SAMPLE_PERSENT:
							case PERSISTED:
							case PERSISTENT_LOG_BUFFER:
							case PLATFORM:
							case POISON_MESSAGE_HANDLING:
							case POLICY:
							case POOL:
							case POPULATION:
							case PORT:
							case PRECEDING:
							case PREDICATE:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY_LEVEL:
							case PRIORITY:
							case PRIVATE_KEY:
							case PRIVATE:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROCESS:
							case PROFILE:
							case PROPERTY_DESCRIPTION:
							case PROPERTY_INT_ID:
							case PROPERTY_SET_GUID:
							case PROPERTY:
							case PROVIDER_KEY_NAME:
							case PROVIDER:
							case QUERYTRACEON:
							case QUEUE_DELAY:
							case QUEUE:
							case QUOTED_IDENTIFIER:
							case R_LETTER:
							case RANGE:
							case RAW:
							case RC2:
							case RC4_128:
							case RC4:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY_ROUTING_LIST:
							case READ_ONLY:
							case READ_WRITE_FILEGROUPS:
							case READ_WRITE:
							case READWRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case REGENERATE:
							case RELATED_CONVERSATION_GROUP:
							case RELATED_CONVERSATION:
							case RELATIVE:
							case REMOTE_SERVICE_NAME:
							case REMOTE:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case REQUIRED:
							case RESAMPLE:
							case RESERVE_DISK_SPACE:
							case RESET:
							case RESOURCE_MANAGER_LOCATION:
							case RESOURCE:
							case RESTART:
							case RESTRICTED_USER:
							case RESULT:
							case RESUME:
							case RETAINDAYS:
							case RETENTION:
							case RETURNS:
							case REWIND:
							case ROBUST:
							case ROLE:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROWGUID:
							case ROWS:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case RSA_512:
							case SAFE:
							case SAFETY:
							case SAMPLE:
							case SCHEDULER:
							case SCHEMABINDING:
							case SCHEME:
							case SCOPED:
							case SCROLL_LOCKS:
							case SCROLL:
							case SEARCH:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDARY:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SECURITY:
							case SEEDING_MODE:
							case SELECTIVE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SERVER:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SERVICE:
							case SESSION_TIMEOUT:
							case SESSION:
							case SETERROR:
							case SETS:
							case SHARE:
							case SHOWPLAN:
							case SID:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SINGLETON:
							case SIZE:
							case SKIP_KEYWORD:
							case SNAPSHOT:
							case SOFTNUMA:
							case SOURCE:
							case SPARSE:
							case SPATIAL_WINDOW_MAX_CELLS:
							case SPECIFICATION:
							case SPLIT:
							case SQL:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STANDBY:
							case START_DATE:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STATE:
							case STATIC:
							case STATISTICAL_SEMANTICS:
							case STATS:
							case STATUS:
							case STOP_ON_ERROR:
							case STOP:
							case STOPLIST:
							case STOPPED:
							case STRING_AGG:
							case SUBJECT:
							case SUPPORTED:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TAPE:
							case TARGET_RECOVERY_TIME:
							case TARGET:
							case TB:
							case TCP:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TORN_PAGE_DETECTION:
							case TRACK_CAUSALITY:
							case TRACK_COLUMNS_UPDATED:
							case TRANSFER:
							case TRANSFORM_NOISE_WORDS:
							case TRIM:
							case TRIPLE_DES_3KEY:
							case TRIPLE_DES:
							case TRUE:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE_WARNING:
							case TYPE:
							case UNBOUNDED:
							case UNCHECKED:
							case UNCOMMITTED:
							case UNDEFINED:
							case UNKNOWN:
							case UNLIMITED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VERBOSELOGGING:
							case VERSION:
							case VIEW_METADATA:
							case VIEWS:
							case VISIBILITY:
							case WAIT:
							case WELL_FORMED_XML:
							case WINDOWS:
							case WITHOUT_ARRAY_WRAPPER:
							case WITHOUT:
							case WITNESS:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XQUERY:
							case XSINIL:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(6869);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 9:
						{
						setState(6875);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6874);
							match(COMMA);
							}
						}

						setState(6877);
						_la = _input.LA(1);
						if ( !(_la==INIT || _la==NOINIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 10:
						{
						setState(6879);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6878);
							match(COMMA);
							}
						}

						setState(6881);
						_la = _input.LA(1);
						if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 11:
						{
						setState(6883);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6882);
							match(COMMA);
							}
						}

						setState(6885);
						_la = _input.LA(1);
						if ( !(_la==FORMAT || _la==NOFORMAT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 12:
						{
						setState(6887);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6886);
							match(COMMA);
							}
						}

						setState(6889);
						match(MEDIADESCRIPTION);
						setState(6890);
						match(EQUAL);
						setState(6893);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(6891);
							match(STRING);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(6892);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 13:
						{
						setState(6896);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6895);
							match(COMMA);
							}
						}

						setState(6898);
						match(MEDIANAME);
						setState(6899);
						match(EQUAL);
						{
						setState(6900);
						((Backup_databaseContext)_localctx).medianame = match(STRING);
						}
						}
						break;
					case 14:
						{
						setState(6902);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6901);
							match(COMMA);
							}
						}

						setState(6904);
						match(BLOCKSIZE);
						setState(6905);
						match(EQUAL);
						setState(6908);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DECIMAL:
							{
							setState(6906);
							match(DECIMAL);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(6907);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 15:
						{
						setState(6911);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6910);
							match(COMMA);
							}
						}

						setState(6913);
						match(BUFFERCOUNT);
						setState(6914);
						match(EQUAL);
						setState(6917);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DECIMAL:
							{
							setState(6915);
							match(DECIMAL);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(6916);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 16:
						{
						setState(6920);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6919);
							match(COMMA);
							}
						}

						setState(6922);
						match(MAXTRANSFER);
						setState(6923);
						match(EQUAL);
						setState(6926);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DECIMAL:
							{
							setState(6924);
							match(DECIMAL);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(6925);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 17:
						{
						setState(6929);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6928);
							match(COMMA);
							}
						}

						setState(6931);
						_la = _input.LA(1);
						if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 18:
						{
						setState(6933);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6932);
							match(COMMA);
							}
						}

						setState(6935);
						_la = _input.LA(1);
						if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 19:
						{
						setState(6937);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6936);
							match(COMMA);
							}
						}

						setState(6939);
						match(RESTART);
						}
						break;
					case 20:
						{
						setState(6941);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6940);
							match(COMMA);
							}
						}

						setState(6943);
						match(STATS);
						setState(6946);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL) {
							{
							setState(6944);
							match(EQUAL);
							setState(6945);
							((Backup_databaseContext)_localctx).stats_percent = match(DECIMAL);
							}
						}

						}
						break;
					case 21:
						{
						setState(6949);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6948);
							match(COMMA);
							}
						}

						setState(6951);
						_la = _input.LA(1);
						if ( !(_la==NOREWIND || _la==REWIND) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 22:
						{
						setState(6953);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6952);
							match(COMMA);
							}
						}

						setState(6955);
						_la = _input.LA(1);
						if ( !(_la==LOAD || _la==NOUNLOAD) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 23:
						{
						setState(6957);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6956);
							match(COMMA);
							}
						}

						setState(6959);
						match(ENCRYPTION);
						setState(6960);
						match(LR_BRACKET);
						setState(6961);
						match(ALGORITHM);
						setState(6962);
						match(EQUAL);
						setState(6963);
						_la = _input.LA(1);
						if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (AES_128 - 201)) | (1L << (AES_192 - 201)) | (1L << (AES_256 - 201)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(6964);
						match(COMMA);
						setState(6965);
						match(SERVER);
						setState(6966);
						match(CERTIFICATE);
						setState(6967);
						match(EQUAL);
						setState(6974);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,953,_ctx) ) {
						case 1:
							{
							setState(6968);
							((Backup_databaseContext)_localctx).encryptor_name = id();
							}
							break;
						case 2:
							{
							setState(6969);
							match(SERVER);
							setState(6970);
							match(ASYMMETRIC);
							setState(6971);
							match(KEY);
							setState(6972);
							match(EQUAL);
							setState(6973);
							((Backup_databaseContext)_localctx).encryptor_name = id();
							}
							break;
						}
						}
						break;
					}
					}
					setState(6980);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_logContext extends ParserRuleContext {
		public IdContext database_name;
		public IdContext logical_device_name;
		public IdContext backup_set_name;
		public Token medianame;
		public Token stats_percent;
		public Token undo_file_name;
		public IdContext encryptor_name;
		public TerminalNode BACKUP() { return getToken(TSQLParser.BACKUP, 0); }
		public TerminalNode LOG() { return getToken(TSQLParser.LOG, 0); }
		public List<TerminalNode> TO() { return getTokens(TSQLParser.TO); }
		public TerminalNode TO(int i) {
			return getToken(TSQLParser.TO, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> DISK() { return getTokens(TSQLParser.DISK); }
		public TerminalNode DISK(int i) {
			return getToken(TSQLParser.DISK, i);
		}
		public List<TerminalNode> TAPE() { return getTokens(TSQLParser.TAPE); }
		public TerminalNode TAPE(int i) {
			return getToken(TSQLParser.TAPE, i);
		}
		public List<TerminalNode> URL() { return getTokens(TSQLParser.URL); }
		public TerminalNode URL(int i) {
			return getToken(TSQLParser.URL, i);
		}
		public List<TerminalNode> MIRROR() { return getTokens(TSQLParser.MIRROR); }
		public TerminalNode MIRROR(int i) {
			return getToken(TSQLParser.MIRROR, i);
		}
		public List<TerminalNode> DIFFERENTIAL() { return getTokens(TSQLParser.DIFFERENTIAL); }
		public TerminalNode DIFFERENTIAL(int i) {
			return getToken(TSQLParser.DIFFERENTIAL, i);
		}
		public List<TerminalNode> COPY_ONLY() { return getTokens(TSQLParser.COPY_ONLY); }
		public TerminalNode COPY_ONLY(int i) {
			return getToken(TSQLParser.COPY_ONLY, i);
		}
		public List<TerminalNode> DESCRIPTION() { return getTokens(TSQLParser.DESCRIPTION); }
		public TerminalNode DESCRIPTION(int i) {
			return getToken(TSQLParser.DESCRIPTION, i);
		}
		public List<TerminalNode> NAME() { return getTokens(TSQLParser.NAME); }
		public TerminalNode NAME(int i) {
			return getToken(TSQLParser.NAME, i);
		}
		public List<TerminalNode> CREDENTIAL() { return getTokens(TSQLParser.CREDENTIAL); }
		public TerminalNode CREDENTIAL(int i) {
			return getToken(TSQLParser.CREDENTIAL, i);
		}
		public List<TerminalNode> FILE_SNAPSHOT() { return getTokens(TSQLParser.FILE_SNAPSHOT); }
		public TerminalNode FILE_SNAPSHOT(int i) {
			return getToken(TSQLParser.FILE_SNAPSHOT, i);
		}
		public List<TerminalNode> MEDIADESCRIPTION() { return getTokens(TSQLParser.MEDIADESCRIPTION); }
		public TerminalNode MEDIADESCRIPTION(int i) {
			return getToken(TSQLParser.MEDIADESCRIPTION, i);
		}
		public List<TerminalNode> MEDIANAME() { return getTokens(TSQLParser.MEDIANAME); }
		public TerminalNode MEDIANAME(int i) {
			return getToken(TSQLParser.MEDIANAME, i);
		}
		public List<TerminalNode> BLOCKSIZE() { return getTokens(TSQLParser.BLOCKSIZE); }
		public TerminalNode BLOCKSIZE(int i) {
			return getToken(TSQLParser.BLOCKSIZE, i);
		}
		public List<TerminalNode> BUFFERCOUNT() { return getTokens(TSQLParser.BUFFERCOUNT); }
		public TerminalNode BUFFERCOUNT(int i) {
			return getToken(TSQLParser.BUFFERCOUNT, i);
		}
		public List<TerminalNode> MAXTRANSFER() { return getTokens(TSQLParser.MAXTRANSFER); }
		public TerminalNode MAXTRANSFER(int i) {
			return getToken(TSQLParser.MAXTRANSFER, i);
		}
		public List<TerminalNode> RESTART() { return getTokens(TSQLParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(TSQLParser.RESTART, i);
		}
		public List<TerminalNode> STATS() { return getTokens(TSQLParser.STATS); }
		public TerminalNode STATS(int i) {
			return getToken(TSQLParser.STATS, i);
		}
		public List<TerminalNode> NO_TRUNCATE() { return getTokens(TSQLParser.NO_TRUNCATE); }
		public TerminalNode NO_TRUNCATE(int i) {
			return getToken(TSQLParser.NO_TRUNCATE, i);
		}
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSQLParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSQLParser.ENCRYPTION, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> ALGORITHM() { return getTokens(TSQLParser.ALGORITHM); }
		public TerminalNode ALGORITHM(int i) {
			return getToken(TSQLParser.ALGORITHM, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> SERVER() { return getTokens(TSQLParser.SERVER); }
		public TerminalNode SERVER(int i) {
			return getToken(TSQLParser.SERVER, i);
		}
		public List<TerminalNode> CERTIFICATE() { return getTokens(TSQLParser.CERTIFICATE); }
		public TerminalNode CERTIFICATE(int i) {
			return getToken(TSQLParser.CERTIFICATE, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> COMPRESSION() { return getTokens(TSQLParser.COMPRESSION); }
		public TerminalNode COMPRESSION(int i) {
			return getToken(TSQLParser.COMPRESSION, i);
		}
		public List<TerminalNode> NO_COMPRESSION() { return getTokens(TSQLParser.NO_COMPRESSION); }
		public TerminalNode NO_COMPRESSION(int i) {
			return getToken(TSQLParser.NO_COMPRESSION, i);
		}
		public List<TerminalNode> NOINIT() { return getTokens(TSQLParser.NOINIT); }
		public TerminalNode NOINIT(int i) {
			return getToken(TSQLParser.NOINIT, i);
		}
		public List<TerminalNode> INIT() { return getTokens(TSQLParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(TSQLParser.INIT, i);
		}
		public List<TerminalNode> NOSKIP() { return getTokens(TSQLParser.NOSKIP); }
		public TerminalNode NOSKIP(int i) {
			return getToken(TSQLParser.NOSKIP, i);
		}
		public List<TerminalNode> SKIP_KEYWORD() { return getTokens(TSQLParser.SKIP_KEYWORD); }
		public TerminalNode SKIP_KEYWORD(int i) {
			return getToken(TSQLParser.SKIP_KEYWORD, i);
		}
		public List<TerminalNode> NOFORMAT() { return getTokens(TSQLParser.NOFORMAT); }
		public TerminalNode NOFORMAT(int i) {
			return getToken(TSQLParser.NOFORMAT, i);
		}
		public List<TerminalNode> FORMAT() { return getTokens(TSQLParser.FORMAT); }
		public TerminalNode FORMAT(int i) {
			return getToken(TSQLParser.FORMAT, i);
		}
		public List<TerminalNode> NO_CHECKSUM() { return getTokens(TSQLParser.NO_CHECKSUM); }
		public TerminalNode NO_CHECKSUM(int i) {
			return getToken(TSQLParser.NO_CHECKSUM, i);
		}
		public List<TerminalNode> CHECKSUM() { return getTokens(TSQLParser.CHECKSUM); }
		public TerminalNode CHECKSUM(int i) {
			return getToken(TSQLParser.CHECKSUM, i);
		}
		public List<TerminalNode> STOP_ON_ERROR() { return getTokens(TSQLParser.STOP_ON_ERROR); }
		public TerminalNode STOP_ON_ERROR(int i) {
			return getToken(TSQLParser.STOP_ON_ERROR, i);
		}
		public List<TerminalNode> CONTINUE_AFTER_ERROR() { return getTokens(TSQLParser.CONTINUE_AFTER_ERROR); }
		public TerminalNode CONTINUE_AFTER_ERROR(int i) {
			return getToken(TSQLParser.CONTINUE_AFTER_ERROR, i);
		}
		public List<TerminalNode> REWIND() { return getTokens(TSQLParser.REWIND); }
		public TerminalNode REWIND(int i) {
			return getToken(TSQLParser.REWIND, i);
		}
		public List<TerminalNode> NOREWIND() { return getTokens(TSQLParser.NOREWIND); }
		public TerminalNode NOREWIND(int i) {
			return getToken(TSQLParser.NOREWIND, i);
		}
		public List<TerminalNode> LOAD() { return getTokens(TSQLParser.LOAD); }
		public TerminalNode LOAD(int i) {
			return getToken(TSQLParser.LOAD, i);
		}
		public List<TerminalNode> NOUNLOAD() { return getTokens(TSQLParser.NOUNLOAD); }
		public TerminalNode NOUNLOAD(int i) {
			return getToken(TSQLParser.NOUNLOAD, i);
		}
		public List<TerminalNode> AES_128() { return getTokens(TSQLParser.AES_128); }
		public TerminalNode AES_128(int i) {
			return getToken(TSQLParser.AES_128, i);
		}
		public List<TerminalNode> AES_192() { return getTokens(TSQLParser.AES_192); }
		public TerminalNode AES_192(int i) {
			return getToken(TSQLParser.AES_192, i);
		}
		public List<TerminalNode> AES_256() { return getTokens(TSQLParser.AES_256); }
		public TerminalNode AES_256(int i) {
			return getToken(TSQLParser.AES_256, i);
		}
		public List<TerminalNode> TRIPLE_DES_3KEY() { return getTokens(TSQLParser.TRIPLE_DES_3KEY); }
		public TerminalNode TRIPLE_DES_3KEY(int i) {
			return getToken(TSQLParser.TRIPLE_DES_3KEY, i);
		}
		public List<TerminalNode> EXPIREDATE() { return getTokens(TSQLParser.EXPIREDATE); }
		public TerminalNode EXPIREDATE(int i) {
			return getToken(TSQLParser.EXPIREDATE, i);
		}
		public List<TerminalNode> RETAINDAYS() { return getTokens(TSQLParser.RETAINDAYS); }
		public TerminalNode RETAINDAYS(int i) {
			return getToken(TSQLParser.RETAINDAYS, i);
		}
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public List<TerminalNode> NORECOVERY() { return getTokens(TSQLParser.NORECOVERY); }
		public TerminalNode NORECOVERY(int i) {
			return getToken(TSQLParser.NORECOVERY, i);
		}
		public List<TerminalNode> STANDBY() { return getTokens(TSQLParser.STANDBY); }
		public TerminalNode STANDBY(int i) {
			return getToken(TSQLParser.STANDBY, i);
		}
		public List<TerminalNode> ASYMMETRIC() { return getTokens(TSQLParser.ASYMMETRIC); }
		public TerminalNode ASYMMETRIC(int i) {
			return getToken(TSQLParser.ASYMMETRIC, i);
		}
		public List<TerminalNode> KEY() { return getTokens(TSQLParser.KEY); }
		public TerminalNode KEY(int i) {
			return getToken(TSQLParser.KEY, i);
		}
		public Backup_logContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_log; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBackup_log(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBackup_log(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBackup_log(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_logContext backup_log() throws RecognitionException {
		Backup_logContext _localctx = new Backup_logContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_backup_log);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6983);
			match(BACKUP);
			setState(6984);
			match(LOG);
			{
			setState(6985);
			((Backup_logContext)_localctx).database_name = id();
			}
			setState(7009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,962,_ctx) ) {
			case 1:
				{
				setState(6986);
				match(TO);
				setState(6991); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(6988);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(6987);
							match(COMMA);
							}
						}

						setState(6990);
						((Backup_logContext)_localctx).logical_device_name = id();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(6993); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,958,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				{
				setState(6995);
				match(TO);
				setState(7005); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(6997);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(6996);
						match(COMMA);
						}
					}

					setState(6999);
					_la = _input.LA(1);
					if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7000);
					match(EQUAL);
					setState(7003);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case STRING:
						{
						setState(7001);
						match(STRING);
						}
						break;
					case FILLFACTOR:
					case PRECISION:
					case ABSENT:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AES:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_CONNECTIONS:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANONYMOUS:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPEND:
					case APPLICATION_LOG:
					case APPLICATION:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUDIT_GUID:
					case AUDIT:
					case AUTHENTICATION:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AUTO_UPDATE_STATISTICS:
					case AUTO:
					case AUTOGROW_ALL_FILES:
					case AUTOGROW_SINGLE_FILE:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case AVAILABILITY:
					case BACKUP_PRIORITY:
					case BEFORE:
					case BEGIN_DIALOG:
					case BINARY_BASE64:
					case BINDING:
					case BLOB_STORAGE:
					case BLOCK:
					case BLOCKING_HIERARCHY:
					case BLOCKSIZE:
					case BROKER_INSTANCE:
					case BROKER:
					case BUFFER:
					case BUFFERCOUNT:
					case BULK_LOGGED:
					case CACHE:
					case CALLED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CERTIFICATE:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHANGES:
					case CHANGETABLE:
					case CHAR:
					case CHARACTER:
					case CHECK_EXPIRATION:
					case CHECK_POLICY:
					case CHECKSUM:
					case CLASSIFIER_FUNCTION:
					case CLEANUP:
					case CLUSTER:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case COMPRESSION:
					case CONCAT_NULL_YIELDS_NULL:
					case CONCAT:
					case CONFIGURATION:
					case CONNECT:
					case CONTAINMENT:
					case CONTENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT_NAME:
					case CONTRACT:
					case CONTROL:
					case CONVERSATION:
					case COOKIE:
					case COPY_ONLY:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATA:
					case DATABASE_MIRRORING:
					case DATE_CORRELATION_OPTIMIZATION:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DATABASE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DEFAULT_SCHEMA:
					case DELAY:
					case DELAYED_DURABILITY:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIAGNOSTICS:
					case DIALOG:
					case DIFFERENTIAL:
					case DIRECTORY_NAME:
					case DISABLE_BROKER:
					case DISABLE:
					case DISABLED:
					case DOCUMENT:
					case DTC_SUPPORT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE_BROKER:
					case ENABLE:
					case ENABLED:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ENDPOINT:
					case ERROR_BROKER_CONVERSATIONS:
					case ERROR:
					case EVENT_RETENTION_MODE:
					case EVENT:
					case EXCLUSIVE:
					case EXECUTABLE_FILE:
					case EXECUTABLE:
					case EXPAND:
					case EXPIREDATE:
					case EXPIRY_DATE:
					case EXPLICIT:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILOVER:
					case FAILURE_CONDITION_LEVEL:
					case FAILURECONDITIONLEVEL:
					case FALSE:
					case FAN_IN:
					case FAST_FORWARD:
					case FAST:
					case FILE_SNAPSHOT:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM_ON:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case FORCE:
					case FORCED:
					case FORCESEEK:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GET:
					case GLOBAL:
					case GOVERNOR:
					case GROUP_MAX_REQUESTS:
					case HADR:
					case HASH:
					case HASHED:
					case HEALTH_CHECK_TIMEOUT:
					case HEALTHCHECKTIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IIF:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCLUDE:
					case INCREMENT:
					case INCREMENTAL:
					case INFINITE:
					case INIT:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSTEAD:
					case IO:
					case IP:
					case ISOLATION:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KERBEROS:
					case KEY_PATH:
					case KEY_SOURCE:
					case KEY_STORE_PROVIDER_NAME:
					case KEYS:
					case KEYSET:
					case LANGUAGE:
					case LAST:
					case LEVEL:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LIST:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LISTENER_URL:
					case LISTENER:
					case LOB_COMPACTION:
					case LOCAL_SERVICE_NAME:
					case LOCAL:
					case LOCATION:
					case LOCK_ESCALATION:
					case LOCK:
					case LOG:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MASTER:
					case MATCHED:
					case MATERIALIZED:
					case MAX_CPU_PERCENT:
					case MAX_DISPATCH_LATENCY:
					case MAX_DOP:
					case MAX_EVENT_SIZE:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_MEMORY:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAX_SIZE:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MAXTRANSFER:
					case MAXVALUE:
					case MB:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEDIUM:
					case MEMBER:
					case MEMORY_OPTIMIZED_DATA:
					case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
					case MEMORY_OPTIMIZED:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARD_SIZE:
					case MESSAGE_FORWARDING:
					case MESSAGE:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MINVALUE:
					case MIRROR_ADDRESS:
					case MIRROR:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case MUST_CHANGE:
					case NAME:
					case NCHAR:
					case NEGOTIATE:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEWNAME:
					case NEXT:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NO:
					case NODES:
					case NOEXPAND:
					case NOFORMAT:
					case NOINIT:
					case NON_TRANSACTED_ACCESS:
					case NONE:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOREWIND:
					case NOSKIP:
					case NOTIFICATION:
					case NOUNLOAD:
					case NOWAIT:
					case NTLM:
					case NUMANODE:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPENJSON:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARSE:
					case PARTIAL:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PASSWORD:
					case PATH:
					case PAUSE:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERMISSION_SET:
					case PERSIST_SAMPLE_PERSENT:
					case PERSISTED:
					case PERSISTENT_LOG_BUFFER:
					case PLATFORM:
					case POISON_MESSAGE_HANDLING:
					case POLICY:
					case POOL:
					case POPULATION:
					case PORT:
					case PRECEDING:
					case PREDICATE:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY_LEVEL:
					case PRIORITY:
					case PRIVATE_KEY:
					case PRIVATE:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROCESS:
					case PROFILE:
					case PROPERTY_DESCRIPTION:
					case PROPERTY_INT_ID:
					case PROPERTY_SET_GUID:
					case PROPERTY:
					case PROVIDER_KEY_NAME:
					case PROVIDER:
					case QUERYTRACEON:
					case QUEUE_DELAY:
					case QUEUE:
					case QUOTED_IDENTIFIER:
					case R_LETTER:
					case RANGE:
					case RAW:
					case RC2:
					case RC4_128:
					case RC4:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY_ROUTING_LIST:
					case READ_ONLY:
					case READ_WRITE_FILEGROUPS:
					case READ_WRITE:
					case READWRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case REGENERATE:
					case RELATED_CONVERSATION_GROUP:
					case RELATED_CONVERSATION:
					case RELATIVE:
					case REMOTE_SERVICE_NAME:
					case REMOTE:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case REQUIRED:
					case RESAMPLE:
					case RESERVE_DISK_SPACE:
					case RESET:
					case RESOURCE_MANAGER_LOCATION:
					case RESOURCE:
					case RESTART:
					case RESTRICTED_USER:
					case RESULT:
					case RESUME:
					case RETAINDAYS:
					case RETENTION:
					case RETURNS:
					case REWIND:
					case ROBUST:
					case ROLE:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROWGUID:
					case ROWS:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case RSA_512:
					case SAFE:
					case SAFETY:
					case SAMPLE:
					case SCHEDULER:
					case SCHEMABINDING:
					case SCHEME:
					case SCOPED:
					case SCROLL_LOCKS:
					case SCROLL:
					case SEARCH:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDARY:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SECURITY:
					case SEEDING_MODE:
					case SELECTIVE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SERVER:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SERVICE:
					case SESSION_TIMEOUT:
					case SESSION:
					case SETERROR:
					case SETS:
					case SHARE:
					case SHOWPLAN:
					case SID:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SINGLETON:
					case SIZE:
					case SKIP_KEYWORD:
					case SNAPSHOT:
					case SOFTNUMA:
					case SOURCE:
					case SPARSE:
					case SPATIAL_WINDOW_MAX_CELLS:
					case SPECIFICATION:
					case SPLIT:
					case SQL:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STANDBY:
					case START_DATE:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STATE:
					case STATIC:
					case STATISTICAL_SEMANTICS:
					case STATS:
					case STATUS:
					case STOP_ON_ERROR:
					case STOP:
					case STOPLIST:
					case STOPPED:
					case STRING_AGG:
					case SUBJECT:
					case SUPPORTED:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TAPE:
					case TARGET_RECOVERY_TIME:
					case TARGET:
					case TB:
					case TCP:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TORN_PAGE_DETECTION:
					case TRACK_CAUSALITY:
					case TRACK_COLUMNS_UPDATED:
					case TRANSFER:
					case TRANSFORM_NOISE_WORDS:
					case TRIM:
					case TRIPLE_DES_3KEY:
					case TRIPLE_DES:
					case TRUE:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE_WARNING:
					case TYPE:
					case UNBOUNDED:
					case UNCHECKED:
					case UNCOMMITTED:
					case UNDEFINED:
					case UNKNOWN:
					case UNLIMITED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VERBOSELOGGING:
					case VERSION:
					case VIEW_METADATA:
					case VIEWS:
					case VISIBILITY:
					case WAIT:
					case WELL_FORMED_XML:
					case WINDOWS:
					case WITHOUT_ARRAY_WRAPPER:
					case WITHOUT:
					case WITNESS:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XQUERY:
					case XSINIL:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(7002);
						id();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(7007); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
				}
				break;
			}
			setState(7044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,970,_ctx) ) {
			case 1:
				{
				setState(7021); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7011);
					match(MIRROR);
					setState(7012);
					match(TO);
					setState(7017); 
					_errHandler.sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							setState(7014);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==COMMA) {
								{
								setState(7013);
								match(COMMA);
								}
							}

							setState(7016);
							((Backup_logContext)_localctx).logical_device_name = id();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(7019); 
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,964,_ctx);
					} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
					}
					}
					setState(7023); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			case 2:
				{
				setState(7040); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7025);
					match(MIRROR);
					setState(7026);
					match(TO);
					setState(7036); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(7028);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7027);
							match(COMMA);
							}
						}

						setState(7030);
						_la = _input.LA(1);
						if ( !(_la==DISK || _la==TAPE || _la==URL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7031);
						match(EQUAL);
						setState(7034);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(7032);
							match(STRING);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(7033);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						setState(7038); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==DISK || _la==TAPE || _la==URL || _la==COMMA );
					}
					}
					setState(7042); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==MIRROR );
				}
				break;
			}
			setState(7219);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
			case 1:
				{
				setState(7046);
				match(WITH);
				setState(7216);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==LOAD || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & ((1L << (BLOCKSIZE - 252)) | (1L << (BUFFERCOUNT - 252)) | (1L << (CHECKSUM - 252)) | (1L << (COMPRESSION - 252)) | (1L << (CONTINUE_AFTER_ERROR - 252)) | (1L << (COPY_ONLY - 252)) | (1L << (CREDENTIAL - 252)))) != 0) || ((((_la - 323)) & ~0x3f) == 0 && ((1L << (_la - 323)) & ((1L << (DESCRIPTION - 323)) | (1L << (DIFFERENTIAL - 323)) | (1L << (ENCRYPTION - 323)) | (1L << (EXPIREDATE - 323)) | (1L << (FILE_SNAPSHOT - 323)) | (1L << (FORMAT - 323)))) != 0) || _la==INIT || _la==MAXTRANSFER || ((((_la - 475)) & ~0x3f) == 0 && ((1L << (_la - 475)) & ((1L << (MEDIADESCRIPTION - 475)) | (1L << (MEDIANAME - 475)) | (1L << (NAME - 475)) | (1L << (NO_CHECKSUM - 475)) | (1L << (NO_COMPRESSION - 475)) | (1L << (NO_TRUNCATE - 475)) | (1L << (NOFORMAT - 475)) | (1L << (NOINIT - 475)) | (1L << (NORECOVERY - 475)) | (1L << (NOREWIND - 475)) | (1L << (NOSKIP - 475)) | (1L << (NOUNLOAD - 475)))) != 0) || ((((_la - 629)) & ~0x3f) == 0 && ((1L << (_la - 629)) & ((1L << (RESTART - 629)) | (1L << (RETAINDAYS - 629)) | (1L << (REWIND - 629)) | (1L << (SKIP_KEYWORD - 629)))) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & ((1L << (STANDBY - 702)) | (1L << (STATS - 702)) | (1L << (STOP_ON_ERROR - 702)))) != 0) || _la==COMMA) {
					{
					setState(7214);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1007,_ctx) ) {
					case 1:
						{
						setState(7048);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7047);
							match(COMMA);
							}
						}

						setState(7050);
						match(DIFFERENTIAL);
						}
						break;
					case 2:
						{
						setState(7052);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7051);
							match(COMMA);
							}
						}

						setState(7054);
						match(COPY_ONLY);
						}
						break;
					case 3:
						{
						setState(7056);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7055);
							match(COMMA);
							}
						}

						setState(7058);
						_la = _input.LA(1);
						if ( !(_la==COMPRESSION || _la==NO_COMPRESSION) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 4:
						{
						setState(7060);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7059);
							match(COMMA);
							}
						}

						setState(7062);
						match(DESCRIPTION);
						setState(7063);
						match(EQUAL);
						setState(7066);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(7064);
							match(STRING);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(7065);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 5:
						{
						setState(7069);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7068);
							match(COMMA);
							}
						}

						setState(7071);
						match(NAME);
						setState(7072);
						match(EQUAL);
						setState(7073);
						((Backup_logContext)_localctx).backup_set_name = id();
						}
						break;
					case 6:
						{
						setState(7075);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7074);
							match(COMMA);
							}
						}

						setState(7077);
						match(CREDENTIAL);
						}
						break;
					case 7:
						{
						setState(7079);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7078);
							match(COMMA);
							}
						}

						setState(7081);
						match(FILE_SNAPSHOT);
						}
						break;
					case 8:
						{
						setState(7083);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7082);
							match(COMMA);
							}
						}

						setState(7097);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case EXPIREDATE:
							{
							setState(7085);
							match(EXPIREDATE);
							setState(7086);
							match(EQUAL);
							setState(7089);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case STRING:
								{
								setState(7087);
								match(STRING);
								}
								break;
							case FILLFACTOR:
							case PRECISION:
							case ABSENT:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AES:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_CONNECTIONS:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANONYMOUS:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPEND:
							case APPLICATION_LOG:
							case APPLICATION:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUDIT_GUID:
							case AUDIT:
							case AUTHENTICATION:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AUTO_UPDATE_STATISTICS:
							case AUTO:
							case AUTOGROW_ALL_FILES:
							case AUTOGROW_SINGLE_FILE:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case AVAILABILITY:
							case BACKUP_PRIORITY:
							case BEFORE:
							case BEGIN_DIALOG:
							case BINARY_BASE64:
							case BINDING:
							case BLOB_STORAGE:
							case BLOCK:
							case BLOCKING_HIERARCHY:
							case BLOCKSIZE:
							case BROKER_INSTANCE:
							case BROKER:
							case BUFFER:
							case BUFFERCOUNT:
							case BULK_LOGGED:
							case CACHE:
							case CALLED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CERTIFICATE:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHANGES:
							case CHANGETABLE:
							case CHAR:
							case CHARACTER:
							case CHECK_EXPIRATION:
							case CHECK_POLICY:
							case CHECKSUM:
							case CLASSIFIER_FUNCTION:
							case CLEANUP:
							case CLUSTER:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case COMPRESSION:
							case CONCAT_NULL_YIELDS_NULL:
							case CONCAT:
							case CONFIGURATION:
							case CONNECT:
							case CONTAINMENT:
							case CONTENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT_NAME:
							case CONTRACT:
							case CONTROL:
							case CONVERSATION:
							case COOKIE:
							case COPY_ONLY:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATA:
							case DATABASE_MIRRORING:
							case DATE_CORRELATION_OPTIMIZATION:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DATABASE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DEFAULT_SCHEMA:
							case DELAY:
							case DELAYED_DURABILITY:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIAGNOSTICS:
							case DIALOG:
							case DIFFERENTIAL:
							case DIRECTORY_NAME:
							case DISABLE_BROKER:
							case DISABLE:
							case DISABLED:
							case DOCUMENT:
							case DTC_SUPPORT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE_BROKER:
							case ENABLE:
							case ENABLED:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ENDPOINT:
							case ERROR_BROKER_CONVERSATIONS:
							case ERROR:
							case EVENT_RETENTION_MODE:
							case EVENT:
							case EXCLUSIVE:
							case EXECUTABLE_FILE:
							case EXECUTABLE:
							case EXPAND:
							case EXPIREDATE:
							case EXPIRY_DATE:
							case EXPLICIT:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILOVER:
							case FAILURE_CONDITION_LEVEL:
							case FAILURECONDITIONLEVEL:
							case FALSE:
							case FAN_IN:
							case FAST_FORWARD:
							case FAST:
							case FILE_SNAPSHOT:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM_ON:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FOLLOWING:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case FORCE:
							case FORCED:
							case FORCESEEK:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GET:
							case GLOBAL:
							case GOVERNOR:
							case GROUP_MAX_REQUESTS:
							case HADR:
							case HASH:
							case HASHED:
							case HEALTH_CHECK_TIMEOUT:
							case HEALTHCHECKTIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IIF:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCLUDE:
							case INCREMENT:
							case INCREMENTAL:
							case INFINITE:
							case INIT:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSTEAD:
							case IO:
							case IP:
							case ISOLATION:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KERBEROS:
							case KEY_PATH:
							case KEY_SOURCE:
							case KEY_STORE_PROVIDER_NAME:
							case KEYS:
							case KEYSET:
							case LANGUAGE:
							case LAST:
							case LEVEL:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LIST:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LISTENER_URL:
							case LISTENER:
							case LOB_COMPACTION:
							case LOCAL_SERVICE_NAME:
							case LOCAL:
							case LOCATION:
							case LOCK_ESCALATION:
							case LOCK:
							case LOG:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MASTER:
							case MATCHED:
							case MATERIALIZED:
							case MAX_CPU_PERCENT:
							case MAX_DISPATCH_LATENCY:
							case MAX_DOP:
							case MAX_EVENT_SIZE:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_MEMORY:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAX_SIZE:
							case MAX:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MAXTRANSFER:
							case MAXVALUE:
							case MB:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEDIUM:
							case MEMBER:
							case MEMORY_OPTIMIZED_DATA:
							case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
							case MEMORY_OPTIMIZED:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARD_SIZE:
							case MESSAGE_FORWARDING:
							case MESSAGE:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MINVALUE:
							case MIRROR_ADDRESS:
							case MIRROR:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case MUST_CHANGE:
							case NAME:
							case NCHAR:
							case NEGOTIATE:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEWNAME:
							case NEXT:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NO:
							case NODES:
							case NOEXPAND:
							case NOFORMAT:
							case NOINIT:
							case NON_TRANSACTED_ACCESS:
							case NONE:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOREWIND:
							case NOSKIP:
							case NOTIFICATION:
							case NOUNLOAD:
							case NOWAIT:
							case NTLM:
							case NUMANODE:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPENJSON:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARSE:
							case PARTIAL:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PASSWORD:
							case PATH:
							case PAUSE:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERMISSION_SET:
							case PERSIST_SAMPLE_PERSENT:
							case PERSISTED:
							case PERSISTENT_LOG_BUFFER:
							case PLATFORM:
							case POISON_MESSAGE_HANDLING:
							case POLICY:
							case POOL:
							case POPULATION:
							case PORT:
							case PRECEDING:
							case PREDICATE:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY_LEVEL:
							case PRIORITY:
							case PRIVATE_KEY:
							case PRIVATE:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROCESS:
							case PROFILE:
							case PROPERTY_DESCRIPTION:
							case PROPERTY_INT_ID:
							case PROPERTY_SET_GUID:
							case PROPERTY:
							case PROVIDER_KEY_NAME:
							case PROVIDER:
							case QUERYTRACEON:
							case QUEUE_DELAY:
							case QUEUE:
							case QUOTED_IDENTIFIER:
							case R_LETTER:
							case RANGE:
							case RAW:
							case RC2:
							case RC4_128:
							case RC4:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY_ROUTING_LIST:
							case READ_ONLY:
							case READ_WRITE_FILEGROUPS:
							case READ_WRITE:
							case READWRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case REGENERATE:
							case RELATED_CONVERSATION_GROUP:
							case RELATED_CONVERSATION:
							case RELATIVE:
							case REMOTE_SERVICE_NAME:
							case REMOTE:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case REQUIRED:
							case RESAMPLE:
							case RESERVE_DISK_SPACE:
							case RESET:
							case RESOURCE_MANAGER_LOCATION:
							case RESOURCE:
							case RESTART:
							case RESTRICTED_USER:
							case RESULT:
							case RESUME:
							case RETAINDAYS:
							case RETENTION:
							case RETURNS:
							case REWIND:
							case ROBUST:
							case ROLE:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROWGUID:
							case ROWS:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case RSA_512:
							case SAFE:
							case SAFETY:
							case SAMPLE:
							case SCHEDULER:
							case SCHEMABINDING:
							case SCHEME:
							case SCOPED:
							case SCROLL_LOCKS:
							case SCROLL:
							case SEARCH:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDARY:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SECURITY:
							case SEEDING_MODE:
							case SELECTIVE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SERVER:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SERVICE:
							case SESSION_TIMEOUT:
							case SESSION:
							case SETERROR:
							case SETS:
							case SHARE:
							case SHOWPLAN:
							case SID:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SINGLETON:
							case SIZE:
							case SKIP_KEYWORD:
							case SNAPSHOT:
							case SOFTNUMA:
							case SOURCE:
							case SPARSE:
							case SPATIAL_WINDOW_MAX_CELLS:
							case SPECIFICATION:
							case SPLIT:
							case SQL:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STANDBY:
							case START_DATE:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STATE:
							case STATIC:
							case STATISTICAL_SEMANTICS:
							case STATS:
							case STATUS:
							case STOP_ON_ERROR:
							case STOP:
							case STOPLIST:
							case STOPPED:
							case STRING_AGG:
							case SUBJECT:
							case SUPPORTED:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TAPE:
							case TARGET_RECOVERY_TIME:
							case TARGET:
							case TB:
							case TCP:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TORN_PAGE_DETECTION:
							case TRACK_CAUSALITY:
							case TRACK_COLUMNS_UPDATED:
							case TRANSFER:
							case TRANSFORM_NOISE_WORDS:
							case TRIM:
							case TRIPLE_DES_3KEY:
							case TRIPLE_DES:
							case TRUE:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE_WARNING:
							case TYPE:
							case UNBOUNDED:
							case UNCHECKED:
							case UNCOMMITTED:
							case UNDEFINED:
							case UNKNOWN:
							case UNLIMITED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VERBOSELOGGING:
							case VERSION:
							case VIEW_METADATA:
							case VIEWS:
							case VISIBILITY:
							case WAIT:
							case WELL_FORMED_XML:
							case WINDOWS:
							case WITHOUT_ARRAY_WRAPPER:
							case WITHOUT:
							case WITNESS:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XQUERY:
							case XSINIL:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7088);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case RETAINDAYS:
							{
							setState(7091);
							match(RETAINDAYS);
							setState(7092);
							match(EQUAL);
							setState(7095);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case DECIMAL:
								{
								setState(7093);
								match(DECIMAL);
								}
								break;
							case FILLFACTOR:
							case PRECISION:
							case ABSENT:
							case ABSOLUTE:
							case ACCENT_SENSITIVITY:
							case ACTION:
							case ACTIVATION:
							case ACTIVE:
							case ADDRESS:
							case AES_128:
							case AES_192:
							case AES_256:
							case AES:
							case AFFINITY:
							case AFTER:
							case AGGREGATE:
							case ALGORITHM:
							case ALLOW_CONNECTIONS:
							case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
							case ALLOW_MULTIPLE_EVENT_LOSS:
							case ALLOW_SINGLE_EVENT_LOSS:
							case ALLOW_SNAPSHOT_ISOLATION:
							case ALLOWED:
							case ANONYMOUS:
							case ANSI_NULL_DEFAULT:
							case ANSI_NULLS:
							case ANSI_PADDING:
							case ANSI_WARNINGS:
							case APPEND:
							case APPLICATION_LOG:
							case APPLICATION:
							case APPLY:
							case ARITHABORT:
							case ASSEMBLY:
							case ASYMMETRIC:
							case ASYNCHRONOUS_COMMIT:
							case AUDIT_GUID:
							case AUDIT:
							case AUTHENTICATION:
							case AUTO_CLEANUP:
							case AUTO_CLOSE:
							case AUTO_CREATE_STATISTICS:
							case AUTO_SHRINK:
							case AUTO_UPDATE_STATISTICS_ASYNC:
							case AUTO_UPDATE_STATISTICS:
							case AUTO:
							case AUTOGROW_ALL_FILES:
							case AUTOGROW_SINGLE_FILE:
							case AUTOMATED_BACKUP_PREFERENCE:
							case AUTOMATIC:
							case AVAILABILITY_MODE:
							case AVAILABILITY:
							case BACKUP_PRIORITY:
							case BEFORE:
							case BEGIN_DIALOG:
							case BINARY_BASE64:
							case BINDING:
							case BLOB_STORAGE:
							case BLOCK:
							case BLOCKING_HIERARCHY:
							case BLOCKSIZE:
							case BROKER_INSTANCE:
							case BROKER:
							case BUFFER:
							case BUFFERCOUNT:
							case BULK_LOGGED:
							case CACHE:
							case CALLED:
							case CALLER:
							case CAP_CPU_PERCENT:
							case CAST:
							case CATALOG:
							case CATCH:
							case CERTIFICATE:
							case CHANGE_RETENTION:
							case CHANGE_TRACKING:
							case CHANGES:
							case CHANGETABLE:
							case CHAR:
							case CHARACTER:
							case CHECK_EXPIRATION:
							case CHECK_POLICY:
							case CHECKSUM:
							case CLASSIFIER_FUNCTION:
							case CLEANUP:
							case CLUSTER:
							case COLLECTION:
							case COLUMN_MASTER_KEY:
							case COMMITTED:
							case COMPATIBILITY_LEVEL:
							case COMPRESSION:
							case CONCAT_NULL_YIELDS_NULL:
							case CONCAT:
							case CONFIGURATION:
							case CONNECT:
							case CONTAINMENT:
							case CONTENT:
							case CONTEXT:
							case CONTINUE_AFTER_ERROR:
							case CONTRACT_NAME:
							case CONTRACT:
							case CONTROL:
							case CONVERSATION:
							case COOKIE:
							case COPY_ONLY:
							case COUNTER:
							case CPU:
							case CREATE_NEW:
							case CREATION_DISPOSITION:
							case CREDENTIAL:
							case CRYPTOGRAPHIC:
							case CURSOR_CLOSE_ON_COMMIT:
							case CURSOR_DEFAULT:
							case CYCLE:
							case DATA_COMPRESSION:
							case DATA_SOURCE:
							case DATA:
							case DATABASE_MIRRORING:
							case DATE_CORRELATION_OPTIMIZATION:
							case DAYS:
							case DB_CHAINING:
							case DB_FAILOVER:
							case DECRYPTION:
							case DEFAULT_DATABASE:
							case DEFAULT_FULLTEXT_LANGUAGE:
							case DEFAULT_LANGUAGE:
							case DEFAULT_SCHEMA:
							case DELAY:
							case DELAYED_DURABILITY:
							case DEPENDENTS:
							case DES:
							case DESCRIPTION:
							case DESX:
							case DHCP:
							case DIAGNOSTICS:
							case DIALOG:
							case DIFFERENTIAL:
							case DIRECTORY_NAME:
							case DISABLE_BROKER:
							case DISABLE:
							case DISABLED:
							case DOCUMENT:
							case DTC_SUPPORT:
							case DYNAMIC:
							case ELEMENTS:
							case EMERGENCY:
							case EMPTY:
							case ENABLE_BROKER:
							case ENABLE:
							case ENABLED:
							case ENCRYPTED_VALUE:
							case ENCRYPTION:
							case ENDPOINT_URL:
							case ENDPOINT:
							case ERROR_BROKER_CONVERSATIONS:
							case ERROR:
							case EVENT_RETENTION_MODE:
							case EVENT:
							case EXCLUSIVE:
							case EXECUTABLE_FILE:
							case EXECUTABLE:
							case EXPAND:
							case EXPIREDATE:
							case EXPIRY_DATE:
							case EXPLICIT:
							case EXTENSION:
							case EXTERNAL_ACCESS:
							case FAIL_OPERATION:
							case FAILOVER_MODE:
							case FAILOVER:
							case FAILURE_CONDITION_LEVEL:
							case FAILURECONDITIONLEVEL:
							case FALSE:
							case FAN_IN:
							case FAST_FORWARD:
							case FAST:
							case FILE_SNAPSHOT:
							case FILEGROUP:
							case FILEGROWTH:
							case FILENAME:
							case FILEPATH:
							case FILESTREAM_ON:
							case FILESTREAM:
							case FILTER:
							case FIRST:
							case FOLLOWING:
							case FORCE_FAILOVER_ALLOW_DATA_LOSS:
							case FORCE_SERVICE_ALLOW_DATA_LOSS:
							case FORCE:
							case FORCED:
							case FORCESEEK:
							case FORMAT:
							case FORWARD_ONLY:
							case FULLSCAN:
							case FULLTEXT:
							case GB:
							case GET:
							case GLOBAL:
							case GOVERNOR:
							case GROUP_MAX_REQUESTS:
							case HADR:
							case HASH:
							case HASHED:
							case HEALTH_CHECK_TIMEOUT:
							case HEALTHCHECKTIMEOUT:
							case HIGH:
							case HONOR_BROKER_PRIORITY:
							case HOURS:
							case IDENTITY_VALUE:
							case IIF:
							case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
							case IMMEDIATE:
							case IMPERSONATE:
							case IMPORTANCE:
							case INCLUDE_NULL_VALUES:
							case INCLUDE:
							case INCREMENT:
							case INCREMENTAL:
							case INFINITE:
							case INIT:
							case INITIATOR:
							case INPUT:
							case INSENSITIVE:
							case INSTEAD:
							case IO:
							case IP:
							case ISOLATION:
							case JSON:
							case KB:
							case KEEP:
							case KEEPFIXED:
							case KERBEROS:
							case KEY_PATH:
							case KEY_SOURCE:
							case KEY_STORE_PROVIDER_NAME:
							case KEYS:
							case KEYSET:
							case LANGUAGE:
							case LAST:
							case LEVEL:
							case LIBRARY:
							case LIFETIME:
							case LINUX:
							case LIST:
							case LISTENER_IP:
							case LISTENER_PORT:
							case LISTENER_URL:
							case LISTENER:
							case LOB_COMPACTION:
							case LOCAL_SERVICE_NAME:
							case LOCAL:
							case LOCATION:
							case LOCK_ESCALATION:
							case LOCK:
							case LOG:
							case LOGIN:
							case LOOP:
							case LOW:
							case MANUAL:
							case MARK:
							case MASTER:
							case MATCHED:
							case MATERIALIZED:
							case MAX_CPU_PERCENT:
							case MAX_DISPATCH_LATENCY:
							case MAX_DOP:
							case MAX_EVENT_SIZE:
							case MAX_FILES:
							case MAX_IOPS_PER_VOLUME:
							case MAX_MEMORY_PERCENT:
							case MAX_MEMORY:
							case MAX_OUTSTANDING_IO_PER_VOLUME:
							case MAX_PROCESSES:
							case MAX_QUEUE_READERS:
							case MAX_ROLLOVER_FILES:
							case MAX_SIZE:
							case MAX:
							case MAXDOP:
							case MAXRECURSION:
							case MAXSIZE:
							case MAXTRANSFER:
							case MAXVALUE:
							case MB:
							case MEDIADESCRIPTION:
							case MEDIANAME:
							case MEDIUM:
							case MEMBER:
							case MEMORY_OPTIMIZED_DATA:
							case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
							case MEMORY_OPTIMIZED:
							case MEMORY_PARTITION_MODE:
							case MESSAGE_FORWARD_SIZE:
							case MESSAGE_FORWARDING:
							case MESSAGE:
							case MIN_ACTIVE_ROWVERSION:
							case MIN_CPU_PERCENT:
							case MIN_IOPS_PER_VOLUME:
							case MIN_MEMORY_PERCENT:
							case MINUTES:
							case MINVALUE:
							case MIRROR_ADDRESS:
							case MIRROR:
							case MIXED_PAGE_ALLOCATION:
							case MODE:
							case MODIFY:
							case MOVE:
							case MULTI_USER:
							case MUST_CHANGE:
							case NAME:
							case NCHAR:
							case NEGOTIATE:
							case NESTED_TRIGGERS:
							case NEW_ACCOUNT:
							case NEW_BROKER:
							case NEW_PASSWORD:
							case NEWNAME:
							case NEXT:
							case NO_CHECKSUM:
							case NO_COMPRESSION:
							case NO_EVENT_LOSS:
							case NO_TRUNCATE:
							case NO_WAIT:
							case NO:
							case NODES:
							case NOEXPAND:
							case NOFORMAT:
							case NOINIT:
							case NON_TRANSACTED_ACCESS:
							case NONE:
							case NORECOMPUTE:
							case NORECOVERY:
							case NOREWIND:
							case NOSKIP:
							case NOTIFICATION:
							case NOUNLOAD:
							case NOWAIT:
							case NTLM:
							case NUMANODE:
							case NUMERIC_ROUNDABORT:
							case OBJECT:
							case OFFLINE:
							case OFFSET:
							case OLD_ACCOUNT:
							case OLD_PASSWORD:
							case ON_FAILURE:
							case ONLINE:
							case ONLY:
							case OPEN_EXISTING:
							case OPENJSON:
							case OPTIMISTIC:
							case OPTIMIZE:
							case OUT:
							case OUTPUT:
							case OWNER:
							case PAGE_VERIFY:
							case PARAMETERIZATION:
							case PARSE:
							case PARTIAL:
							case PARTITION:
							case PARTITIONS:
							case PARTNER:
							case PASSWORD:
							case PATH:
							case PAUSE:
							case PER_CPU:
							case PER_DB:
							case PER_NODE:
							case PERMISSION_SET:
							case PERSIST_SAMPLE_PERSENT:
							case PERSISTED:
							case PERSISTENT_LOG_BUFFER:
							case PLATFORM:
							case POISON_MESSAGE_HANDLING:
							case POLICY:
							case POOL:
							case POPULATION:
							case PORT:
							case PRECEDING:
							case PREDICATE:
							case PRIMARY_ROLE:
							case PRIOR:
							case PRIORITY_LEVEL:
							case PRIORITY:
							case PRIVATE_KEY:
							case PRIVATE:
							case PRIVILEGES:
							case PROCEDURE_NAME:
							case PROCESS:
							case PROFILE:
							case PROPERTY_DESCRIPTION:
							case PROPERTY_INT_ID:
							case PROPERTY_SET_GUID:
							case PROPERTY:
							case PROVIDER_KEY_NAME:
							case PROVIDER:
							case QUERYTRACEON:
							case QUEUE_DELAY:
							case QUEUE:
							case QUOTED_IDENTIFIER:
							case R_LETTER:
							case RANGE:
							case RAW:
							case RC2:
							case RC4_128:
							case RC4:
							case READ_COMMITTED_SNAPSHOT:
							case READ_ONLY_ROUTING_LIST:
							case READ_ONLY:
							case READ_WRITE_FILEGROUPS:
							case READ_WRITE:
							case READWRITE:
							case READONLY:
							case REBUILD:
							case RECEIVE:
							case RECOMPILE:
							case RECOVERY:
							case RECURSIVE_TRIGGERS:
							case REGENERATE:
							case RELATED_CONVERSATION_GROUP:
							case RELATED_CONVERSATION:
							case RELATIVE:
							case REMOTE_SERVICE_NAME:
							case REMOTE:
							case REMOVE:
							case REORGANIZE:
							case REPEATABLE:
							case REPLICA:
							case REQUEST_MAX_CPU_TIME_SEC:
							case REQUEST_MAX_MEMORY_GRANT_PERCENT:
							case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
							case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
							case REQUIRED:
							case RESAMPLE:
							case RESERVE_DISK_SPACE:
							case RESET:
							case RESOURCE_MANAGER_LOCATION:
							case RESOURCE:
							case RESTART:
							case RESTRICTED_USER:
							case RESULT:
							case RESUME:
							case RETAINDAYS:
							case RETENTION:
							case RETURNS:
							case REWIND:
							case ROBUST:
							case ROLE:
							case ROOT:
							case ROUTE:
							case ROW:
							case ROWGUID:
							case ROWS:
							case RSA_1024:
							case RSA_2048:
							case RSA_3072:
							case RSA_4096:
							case RSA_512:
							case SAFE:
							case SAFETY:
							case SAMPLE:
							case SCHEDULER:
							case SCHEMABINDING:
							case SCHEME:
							case SCOPED:
							case SCROLL_LOCKS:
							case SCROLL:
							case SEARCH:
							case SECONDARY_ONLY:
							case SECONDARY_ROLE:
							case SECONDARY:
							case SECONDS:
							case SECRET:
							case SECURITY_LOG:
							case SECURITY:
							case SEEDING_MODE:
							case SELECTIVE:
							case SELF:
							case SEMI_SENSITIVE:
							case SEND:
							case SENT:
							case SEQUENCE:
							case SERIALIZABLE:
							case SERVER:
							case SERVICE_BROKER:
							case SERVICE_NAME:
							case SERVICE:
							case SESSION_TIMEOUT:
							case SESSION:
							case SETERROR:
							case SETS:
							case SHARE:
							case SHOWPLAN:
							case SID:
							case SIGNATURE:
							case SIMPLE:
							case SINGLE_USER:
							case SINGLETON:
							case SIZE:
							case SKIP_KEYWORD:
							case SNAPSHOT:
							case SOFTNUMA:
							case SOURCE:
							case SPARSE:
							case SPATIAL_WINDOW_MAX_CELLS:
							case SPECIFICATION:
							case SPLIT:
							case SQL:
							case SQLDUMPERFLAGS:
							case SQLDUMPERPATH:
							case SQLDUMPERTIMEOUT:
							case STANDBY:
							case START_DATE:
							case START:
							case STARTED:
							case STARTUP_STATE:
							case STATE:
							case STATIC:
							case STATISTICAL_SEMANTICS:
							case STATS:
							case STATUS:
							case STOP_ON_ERROR:
							case STOP:
							case STOPLIST:
							case STOPPED:
							case STRING_AGG:
							case SUBJECT:
							case SUPPORTED:
							case SUSPEND:
							case SYMMETRIC:
							case SYNCHRONOUS_COMMIT:
							case SYNONYM:
							case SYSTEM:
							case TAKE:
							case TAPE:
							case TARGET_RECOVERY_TIME:
							case TARGET:
							case TB:
							case TCP:
							case TEXTIMAGE_ON:
							case THROW:
							case TIES:
							case TIME:
							case TIMEOUT:
							case TIMER:
							case TORN_PAGE_DETECTION:
							case TRACK_CAUSALITY:
							case TRACK_COLUMNS_UPDATED:
							case TRANSFER:
							case TRANSFORM_NOISE_WORDS:
							case TRIM:
							case TRIPLE_DES_3KEY:
							case TRIPLE_DES:
							case TRUE:
							case TRUSTWORTHY:
							case TRY:
							case TSQL:
							case TWO_DIGIT_YEAR_CUTOFF:
							case TYPE_WARNING:
							case TYPE:
							case UNBOUNDED:
							case UNCHECKED:
							case UNCOMMITTED:
							case UNDEFINED:
							case UNKNOWN:
							case UNLIMITED:
							case UNLOCK:
							case UNSAFE:
							case URL:
							case USED:
							case USING:
							case VALID_XML:
							case VALIDATION:
							case VALUE:
							case VERBOSELOGGING:
							case VERSION:
							case VIEW_METADATA:
							case VIEWS:
							case VISIBILITY:
							case WAIT:
							case WELL_FORMED_XML:
							case WINDOWS:
							case WITHOUT_ARRAY_WRAPPER:
							case WITHOUT:
							case WITNESS:
							case WORK:
							case WORKLOAD:
							case XML:
							case XMLDATA:
							case XMLNAMESPACES:
							case XMLSCHEMA:
							case XQUERY:
							case XSINIL:
							case DOUBLE_QUOTE_ID:
							case SQUARE_BRACKET_ID:
							case ID:
								{
								setState(7094);
								id();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 9:
						{
						setState(7100);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7099);
							match(COMMA);
							}
						}

						setState(7102);
						_la = _input.LA(1);
						if ( !(_la==INIT || _la==NOINIT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 10:
						{
						setState(7104);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7103);
							match(COMMA);
							}
						}

						setState(7106);
						_la = _input.LA(1);
						if ( !(_la==NOSKIP || _la==SKIP_KEYWORD) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 11:
						{
						setState(7108);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7107);
							match(COMMA);
							}
						}

						setState(7110);
						_la = _input.LA(1);
						if ( !(_la==FORMAT || _la==NOFORMAT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 12:
						{
						setState(7112);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7111);
							match(COMMA);
							}
						}

						setState(7114);
						match(MEDIADESCRIPTION);
						setState(7115);
						match(EQUAL);
						setState(7118);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case STRING:
							{
							setState(7116);
							match(STRING);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(7117);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 13:
						{
						setState(7121);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7120);
							match(COMMA);
							}
						}

						setState(7123);
						match(MEDIANAME);
						setState(7124);
						match(EQUAL);
						{
						setState(7125);
						((Backup_logContext)_localctx).medianame = match(STRING);
						}
						}
						break;
					case 14:
						{
						setState(7127);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7126);
							match(COMMA);
							}
						}

						setState(7129);
						match(BLOCKSIZE);
						setState(7130);
						match(EQUAL);
						setState(7133);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DECIMAL:
							{
							setState(7131);
							match(DECIMAL);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(7132);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 15:
						{
						setState(7136);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7135);
							match(COMMA);
							}
						}

						setState(7138);
						match(BUFFERCOUNT);
						setState(7139);
						match(EQUAL);
						setState(7142);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DECIMAL:
							{
							setState(7140);
							match(DECIMAL);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(7141);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 16:
						{
						setState(7145);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7144);
							match(COMMA);
							}
						}

						setState(7147);
						match(MAXTRANSFER);
						setState(7148);
						match(EQUAL);
						setState(7151);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case DECIMAL:
							{
							setState(7149);
							match(DECIMAL);
							}
							break;
						case FILLFACTOR:
						case PRECISION:
						case ABSENT:
						case ABSOLUTE:
						case ACCENT_SENSITIVITY:
						case ACTION:
						case ACTIVATION:
						case ACTIVE:
						case ADDRESS:
						case AES_128:
						case AES_192:
						case AES_256:
						case AES:
						case AFFINITY:
						case AFTER:
						case AGGREGATE:
						case ALGORITHM:
						case ALLOW_CONNECTIONS:
						case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
						case ALLOW_MULTIPLE_EVENT_LOSS:
						case ALLOW_SINGLE_EVENT_LOSS:
						case ALLOW_SNAPSHOT_ISOLATION:
						case ALLOWED:
						case ANONYMOUS:
						case ANSI_NULL_DEFAULT:
						case ANSI_NULLS:
						case ANSI_PADDING:
						case ANSI_WARNINGS:
						case APPEND:
						case APPLICATION_LOG:
						case APPLICATION:
						case APPLY:
						case ARITHABORT:
						case ASSEMBLY:
						case ASYMMETRIC:
						case ASYNCHRONOUS_COMMIT:
						case AUDIT_GUID:
						case AUDIT:
						case AUTHENTICATION:
						case AUTO_CLEANUP:
						case AUTO_CLOSE:
						case AUTO_CREATE_STATISTICS:
						case AUTO_SHRINK:
						case AUTO_UPDATE_STATISTICS_ASYNC:
						case AUTO_UPDATE_STATISTICS:
						case AUTO:
						case AUTOGROW_ALL_FILES:
						case AUTOGROW_SINGLE_FILE:
						case AUTOMATED_BACKUP_PREFERENCE:
						case AUTOMATIC:
						case AVAILABILITY_MODE:
						case AVAILABILITY:
						case BACKUP_PRIORITY:
						case BEFORE:
						case BEGIN_DIALOG:
						case BINARY_BASE64:
						case BINDING:
						case BLOB_STORAGE:
						case BLOCK:
						case BLOCKING_HIERARCHY:
						case BLOCKSIZE:
						case BROKER_INSTANCE:
						case BROKER:
						case BUFFER:
						case BUFFERCOUNT:
						case BULK_LOGGED:
						case CACHE:
						case CALLED:
						case CALLER:
						case CAP_CPU_PERCENT:
						case CAST:
						case CATALOG:
						case CATCH:
						case CERTIFICATE:
						case CHANGE_RETENTION:
						case CHANGE_TRACKING:
						case CHANGES:
						case CHANGETABLE:
						case CHAR:
						case CHARACTER:
						case CHECK_EXPIRATION:
						case CHECK_POLICY:
						case CHECKSUM:
						case CLASSIFIER_FUNCTION:
						case CLEANUP:
						case CLUSTER:
						case COLLECTION:
						case COLUMN_MASTER_KEY:
						case COMMITTED:
						case COMPATIBILITY_LEVEL:
						case COMPRESSION:
						case CONCAT_NULL_YIELDS_NULL:
						case CONCAT:
						case CONFIGURATION:
						case CONNECT:
						case CONTAINMENT:
						case CONTENT:
						case CONTEXT:
						case CONTINUE_AFTER_ERROR:
						case CONTRACT_NAME:
						case CONTRACT:
						case CONTROL:
						case CONVERSATION:
						case COOKIE:
						case COPY_ONLY:
						case COUNTER:
						case CPU:
						case CREATE_NEW:
						case CREATION_DISPOSITION:
						case CREDENTIAL:
						case CRYPTOGRAPHIC:
						case CURSOR_CLOSE_ON_COMMIT:
						case CURSOR_DEFAULT:
						case CYCLE:
						case DATA_COMPRESSION:
						case DATA_SOURCE:
						case DATA:
						case DATABASE_MIRRORING:
						case DATE_CORRELATION_OPTIMIZATION:
						case DAYS:
						case DB_CHAINING:
						case DB_FAILOVER:
						case DECRYPTION:
						case DEFAULT_DATABASE:
						case DEFAULT_FULLTEXT_LANGUAGE:
						case DEFAULT_LANGUAGE:
						case DEFAULT_SCHEMA:
						case DELAY:
						case DELAYED_DURABILITY:
						case DEPENDENTS:
						case DES:
						case DESCRIPTION:
						case DESX:
						case DHCP:
						case DIAGNOSTICS:
						case DIALOG:
						case DIFFERENTIAL:
						case DIRECTORY_NAME:
						case DISABLE_BROKER:
						case DISABLE:
						case DISABLED:
						case DOCUMENT:
						case DTC_SUPPORT:
						case DYNAMIC:
						case ELEMENTS:
						case EMERGENCY:
						case EMPTY:
						case ENABLE_BROKER:
						case ENABLE:
						case ENABLED:
						case ENCRYPTED_VALUE:
						case ENCRYPTION:
						case ENDPOINT_URL:
						case ENDPOINT:
						case ERROR_BROKER_CONVERSATIONS:
						case ERROR:
						case EVENT_RETENTION_MODE:
						case EVENT:
						case EXCLUSIVE:
						case EXECUTABLE_FILE:
						case EXECUTABLE:
						case EXPAND:
						case EXPIREDATE:
						case EXPIRY_DATE:
						case EXPLICIT:
						case EXTENSION:
						case EXTERNAL_ACCESS:
						case FAIL_OPERATION:
						case FAILOVER_MODE:
						case FAILOVER:
						case FAILURE_CONDITION_LEVEL:
						case FAILURECONDITIONLEVEL:
						case FALSE:
						case FAN_IN:
						case FAST_FORWARD:
						case FAST:
						case FILE_SNAPSHOT:
						case FILEGROUP:
						case FILEGROWTH:
						case FILENAME:
						case FILEPATH:
						case FILESTREAM_ON:
						case FILESTREAM:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE_FAILOVER_ALLOW_DATA_LOSS:
						case FORCE_SERVICE_ALLOW_DATA_LOSS:
						case FORCE:
						case FORCED:
						case FORCESEEK:
						case FORMAT:
						case FORWARD_ONLY:
						case FULLSCAN:
						case FULLTEXT:
						case GB:
						case GET:
						case GLOBAL:
						case GOVERNOR:
						case GROUP_MAX_REQUESTS:
						case HADR:
						case HASH:
						case HASHED:
						case HEALTH_CHECK_TIMEOUT:
						case HEALTHCHECKTIMEOUT:
						case HIGH:
						case HONOR_BROKER_PRIORITY:
						case HOURS:
						case IDENTITY_VALUE:
						case IIF:
						case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
						case IMMEDIATE:
						case IMPERSONATE:
						case IMPORTANCE:
						case INCLUDE_NULL_VALUES:
						case INCLUDE:
						case INCREMENT:
						case INCREMENTAL:
						case INFINITE:
						case INIT:
						case INITIATOR:
						case INPUT:
						case INSENSITIVE:
						case INSTEAD:
						case IO:
						case IP:
						case ISOLATION:
						case JSON:
						case KB:
						case KEEP:
						case KEEPFIXED:
						case KERBEROS:
						case KEY_PATH:
						case KEY_SOURCE:
						case KEY_STORE_PROVIDER_NAME:
						case KEYS:
						case KEYSET:
						case LANGUAGE:
						case LAST:
						case LEVEL:
						case LIBRARY:
						case LIFETIME:
						case LINUX:
						case LIST:
						case LISTENER_IP:
						case LISTENER_PORT:
						case LISTENER_URL:
						case LISTENER:
						case LOB_COMPACTION:
						case LOCAL_SERVICE_NAME:
						case LOCAL:
						case LOCATION:
						case LOCK_ESCALATION:
						case LOCK:
						case LOG:
						case LOGIN:
						case LOOP:
						case LOW:
						case MANUAL:
						case MARK:
						case MASTER:
						case MATCHED:
						case MATERIALIZED:
						case MAX_CPU_PERCENT:
						case MAX_DISPATCH_LATENCY:
						case MAX_DOP:
						case MAX_EVENT_SIZE:
						case MAX_FILES:
						case MAX_IOPS_PER_VOLUME:
						case MAX_MEMORY_PERCENT:
						case MAX_MEMORY:
						case MAX_OUTSTANDING_IO_PER_VOLUME:
						case MAX_PROCESSES:
						case MAX_QUEUE_READERS:
						case MAX_ROLLOVER_FILES:
						case MAX_SIZE:
						case MAX:
						case MAXDOP:
						case MAXRECURSION:
						case MAXSIZE:
						case MAXTRANSFER:
						case MAXVALUE:
						case MB:
						case MEDIADESCRIPTION:
						case MEDIANAME:
						case MEDIUM:
						case MEMBER:
						case MEMORY_OPTIMIZED_DATA:
						case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
						case MEMORY_OPTIMIZED:
						case MEMORY_PARTITION_MODE:
						case MESSAGE_FORWARD_SIZE:
						case MESSAGE_FORWARDING:
						case MESSAGE:
						case MIN_ACTIVE_ROWVERSION:
						case MIN_CPU_PERCENT:
						case MIN_IOPS_PER_VOLUME:
						case MIN_MEMORY_PERCENT:
						case MINUTES:
						case MINVALUE:
						case MIRROR_ADDRESS:
						case MIRROR:
						case MIXED_PAGE_ALLOCATION:
						case MODE:
						case MODIFY:
						case MOVE:
						case MULTI_USER:
						case MUST_CHANGE:
						case NAME:
						case NCHAR:
						case NEGOTIATE:
						case NESTED_TRIGGERS:
						case NEW_ACCOUNT:
						case NEW_BROKER:
						case NEW_PASSWORD:
						case NEWNAME:
						case NEXT:
						case NO_CHECKSUM:
						case NO_COMPRESSION:
						case NO_EVENT_LOSS:
						case NO_TRUNCATE:
						case NO_WAIT:
						case NO:
						case NODES:
						case NOEXPAND:
						case NOFORMAT:
						case NOINIT:
						case NON_TRANSACTED_ACCESS:
						case NONE:
						case NORECOMPUTE:
						case NORECOVERY:
						case NOREWIND:
						case NOSKIP:
						case NOTIFICATION:
						case NOUNLOAD:
						case NOWAIT:
						case NTLM:
						case NUMANODE:
						case NUMERIC_ROUNDABORT:
						case OBJECT:
						case OFFLINE:
						case OFFSET:
						case OLD_ACCOUNT:
						case OLD_PASSWORD:
						case ON_FAILURE:
						case ONLINE:
						case ONLY:
						case OPEN_EXISTING:
						case OPENJSON:
						case OPTIMISTIC:
						case OPTIMIZE:
						case OUT:
						case OUTPUT:
						case OWNER:
						case PAGE_VERIFY:
						case PARAMETERIZATION:
						case PARSE:
						case PARTIAL:
						case PARTITION:
						case PARTITIONS:
						case PARTNER:
						case PASSWORD:
						case PATH:
						case PAUSE:
						case PER_CPU:
						case PER_DB:
						case PER_NODE:
						case PERMISSION_SET:
						case PERSIST_SAMPLE_PERSENT:
						case PERSISTED:
						case PERSISTENT_LOG_BUFFER:
						case PLATFORM:
						case POISON_MESSAGE_HANDLING:
						case POLICY:
						case POOL:
						case POPULATION:
						case PORT:
						case PRECEDING:
						case PREDICATE:
						case PRIMARY_ROLE:
						case PRIOR:
						case PRIORITY_LEVEL:
						case PRIORITY:
						case PRIVATE_KEY:
						case PRIVATE:
						case PRIVILEGES:
						case PROCEDURE_NAME:
						case PROCESS:
						case PROFILE:
						case PROPERTY_DESCRIPTION:
						case PROPERTY_INT_ID:
						case PROPERTY_SET_GUID:
						case PROPERTY:
						case PROVIDER_KEY_NAME:
						case PROVIDER:
						case QUERYTRACEON:
						case QUEUE_DELAY:
						case QUEUE:
						case QUOTED_IDENTIFIER:
						case R_LETTER:
						case RANGE:
						case RAW:
						case RC2:
						case RC4_128:
						case RC4:
						case READ_COMMITTED_SNAPSHOT:
						case READ_ONLY_ROUTING_LIST:
						case READ_ONLY:
						case READ_WRITE_FILEGROUPS:
						case READ_WRITE:
						case READWRITE:
						case READONLY:
						case REBUILD:
						case RECEIVE:
						case RECOMPILE:
						case RECOVERY:
						case RECURSIVE_TRIGGERS:
						case REGENERATE:
						case RELATED_CONVERSATION_GROUP:
						case RELATED_CONVERSATION:
						case RELATIVE:
						case REMOTE_SERVICE_NAME:
						case REMOTE:
						case REMOVE:
						case REORGANIZE:
						case REPEATABLE:
						case REPLICA:
						case REQUEST_MAX_CPU_TIME_SEC:
						case REQUEST_MAX_MEMORY_GRANT_PERCENT:
						case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
						case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
						case REQUIRED:
						case RESAMPLE:
						case RESERVE_DISK_SPACE:
						case RESET:
						case RESOURCE_MANAGER_LOCATION:
						case RESOURCE:
						case RESTART:
						case RESTRICTED_USER:
						case RESULT:
						case RESUME:
						case RETAINDAYS:
						case RETENTION:
						case RETURNS:
						case REWIND:
						case ROBUST:
						case ROLE:
						case ROOT:
						case ROUTE:
						case ROW:
						case ROWGUID:
						case ROWS:
						case RSA_1024:
						case RSA_2048:
						case RSA_3072:
						case RSA_4096:
						case RSA_512:
						case SAFE:
						case SAFETY:
						case SAMPLE:
						case SCHEDULER:
						case SCHEMABINDING:
						case SCHEME:
						case SCOPED:
						case SCROLL_LOCKS:
						case SCROLL:
						case SEARCH:
						case SECONDARY_ONLY:
						case SECONDARY_ROLE:
						case SECONDARY:
						case SECONDS:
						case SECRET:
						case SECURITY_LOG:
						case SECURITY:
						case SEEDING_MODE:
						case SELECTIVE:
						case SELF:
						case SEMI_SENSITIVE:
						case SEND:
						case SENT:
						case SEQUENCE:
						case SERIALIZABLE:
						case SERVER:
						case SERVICE_BROKER:
						case SERVICE_NAME:
						case SERVICE:
						case SESSION_TIMEOUT:
						case SESSION:
						case SETERROR:
						case SETS:
						case SHARE:
						case SHOWPLAN:
						case SID:
						case SIGNATURE:
						case SIMPLE:
						case SINGLE_USER:
						case SINGLETON:
						case SIZE:
						case SKIP_KEYWORD:
						case SNAPSHOT:
						case SOFTNUMA:
						case SOURCE:
						case SPARSE:
						case SPATIAL_WINDOW_MAX_CELLS:
						case SPECIFICATION:
						case SPLIT:
						case SQL:
						case SQLDUMPERFLAGS:
						case SQLDUMPERPATH:
						case SQLDUMPERTIMEOUT:
						case STANDBY:
						case START_DATE:
						case START:
						case STARTED:
						case STARTUP_STATE:
						case STATE:
						case STATIC:
						case STATISTICAL_SEMANTICS:
						case STATS:
						case STATUS:
						case STOP_ON_ERROR:
						case STOP:
						case STOPLIST:
						case STOPPED:
						case STRING_AGG:
						case SUBJECT:
						case SUPPORTED:
						case SUSPEND:
						case SYMMETRIC:
						case SYNCHRONOUS_COMMIT:
						case SYNONYM:
						case SYSTEM:
						case TAKE:
						case TAPE:
						case TARGET_RECOVERY_TIME:
						case TARGET:
						case TB:
						case TCP:
						case TEXTIMAGE_ON:
						case THROW:
						case TIES:
						case TIME:
						case TIMEOUT:
						case TIMER:
						case TORN_PAGE_DETECTION:
						case TRACK_CAUSALITY:
						case TRACK_COLUMNS_UPDATED:
						case TRANSFER:
						case TRANSFORM_NOISE_WORDS:
						case TRIM:
						case TRIPLE_DES_3KEY:
						case TRIPLE_DES:
						case TRUE:
						case TRUSTWORTHY:
						case TRY:
						case TSQL:
						case TWO_DIGIT_YEAR_CUTOFF:
						case TYPE_WARNING:
						case TYPE:
						case UNBOUNDED:
						case UNCHECKED:
						case UNCOMMITTED:
						case UNDEFINED:
						case UNKNOWN:
						case UNLIMITED:
						case UNLOCK:
						case UNSAFE:
						case URL:
						case USED:
						case USING:
						case VALID_XML:
						case VALIDATION:
						case VALUE:
						case VERBOSELOGGING:
						case VERSION:
						case VIEW_METADATA:
						case VIEWS:
						case VISIBILITY:
						case WAIT:
						case WELL_FORMED_XML:
						case WINDOWS:
						case WITHOUT_ARRAY_WRAPPER:
						case WITHOUT:
						case WITNESS:
						case WORK:
						case WORKLOAD:
						case XML:
						case XMLDATA:
						case XMLNAMESPACES:
						case XMLSCHEMA:
						case XQUERY:
						case XSINIL:
						case DOUBLE_QUOTE_ID:
						case SQUARE_BRACKET_ID:
						case ID:
							{
							setState(7150);
							id();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 17:
						{
						setState(7154);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7153);
							match(COMMA);
							}
						}

						setState(7156);
						_la = _input.LA(1);
						if ( !(_la==CHECKSUM || _la==NO_CHECKSUM) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 18:
						{
						setState(7158);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7157);
							match(COMMA);
							}
						}

						setState(7160);
						_la = _input.LA(1);
						if ( !(_la==CONTINUE_AFTER_ERROR || _la==STOP_ON_ERROR) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 19:
						{
						setState(7162);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7161);
							match(COMMA);
							}
						}

						setState(7164);
						match(RESTART);
						}
						break;
					case 20:
						{
						setState(7166);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7165);
							match(COMMA);
							}
						}

						setState(7168);
						match(STATS);
						setState(7171);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==EQUAL) {
							{
							setState(7169);
							match(EQUAL);
							setState(7170);
							((Backup_logContext)_localctx).stats_percent = match(DECIMAL);
							}
						}

						}
						break;
					case 21:
						{
						setState(7174);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7173);
							match(COMMA);
							}
						}

						setState(7176);
						_la = _input.LA(1);
						if ( !(_la==NOREWIND || _la==REWIND) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 22:
						{
						setState(7178);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7177);
							match(COMMA);
							}
						}

						setState(7180);
						_la = _input.LA(1);
						if ( !(_la==LOAD || _la==NOUNLOAD) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case 23:
						{
						setState(7182);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7181);
							match(COMMA);
							}
						}

						setState(7188);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case NORECOVERY:
							{
							setState(7184);
							match(NORECOVERY);
							}
							break;
						case STANDBY:
							{
							setState(7185);
							match(STANDBY);
							setState(7186);
							match(EQUAL);
							setState(7187);
							((Backup_logContext)_localctx).undo_file_name = match(STRING);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 24:
						{
						setState(7191);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7190);
							match(COMMA);
							}
						}

						setState(7193);
						match(NO_TRUNCATE);
						}
						break;
					case 25:
						{
						setState(7195);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7194);
							match(COMMA);
							}
						}

						setState(7197);
						match(ENCRYPTION);
						setState(7198);
						match(LR_BRACKET);
						setState(7199);
						match(ALGORITHM);
						setState(7200);
						match(EQUAL);
						setState(7201);
						_la = _input.LA(1);
						if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (AES_128 - 201)) | (1L << (AES_192 - 201)) | (1L << (AES_256 - 201)))) != 0) || _la==TRIPLE_DES_3KEY) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7202);
						match(COMMA);
						setState(7203);
						match(SERVER);
						setState(7204);
						match(CERTIFICATE);
						setState(7205);
						match(EQUAL);
						setState(7212);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1006,_ctx) ) {
						case 1:
							{
							setState(7206);
							((Backup_logContext)_localctx).encryptor_name = id();
							}
							break;
						case 2:
							{
							setState(7207);
							match(SERVER);
							setState(7208);
							match(ASYMMETRIC);
							setState(7209);
							match(KEY);
							setState(7210);
							match(EQUAL);
							setState(7211);
							((Backup_logContext)_localctx).encryptor_name = id();
							}
							break;
						}
						}
						break;
					}
					}
					setState(7218);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_certificateContext extends ParserRuleContext {
		public IdContext certname;
		public Token cert_file;
		public Token private_key_file;
		public Token encryption_password;
		public Token decryption_pasword;
		public TerminalNode BACKUP() { return getToken(TSQLParser.BACKUP, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public List<TerminalNode> FILE() { return getTokens(TSQLParser.FILE); }
		public TerminalNode FILE(int i) {
			return getToken(TSQLParser.FILE, i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSQLParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSQLParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSQLParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSQLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSQLParser.BY, i);
		}
		public List<TerminalNode> PASSWORD() { return getTokens(TSQLParser.PASSWORD); }
		public TerminalNode PASSWORD(int i) {
			return getToken(TSQLParser.PASSWORD, i);
		}
		public List<TerminalNode> DECRYPTION() { return getTokens(TSQLParser.DECRYPTION); }
		public TerminalNode DECRYPTION(int i) {
			return getToken(TSQLParser.DECRYPTION, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Backup_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBackup_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBackup_certificate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBackup_certificate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_certificateContext backup_certificate() throws RecognitionException {
		Backup_certificateContext _localctx = new Backup_certificateContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_backup_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7221);
			match(BACKUP);
			setState(7222);
			match(CERTIFICATE);
			setState(7223);
			((Backup_certificateContext)_localctx).certname = id();
			setState(7224);
			match(TO);
			setState(7225);
			match(FILE);
			setState(7226);
			match(EQUAL);
			setState(7227);
			((Backup_certificateContext)_localctx).cert_file = match(STRING);
			setState(7259);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1015,_ctx) ) {
			case 1:
				{
				setState(7228);
				match(WITH);
				setState(7229);
				match(PRIVATE);
				setState(7230);
				match(KEY);
				setState(7231);
				match(LR_BRACKET);
				setState(7254); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(7254);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1013,_ctx) ) {
					case 1:
						{
						setState(7233);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7232);
							match(COMMA);
							}
						}

						setState(7235);
						match(FILE);
						setState(7236);
						match(EQUAL);
						setState(7237);
						((Backup_certificateContext)_localctx).private_key_file = match(STRING);
						}
						break;
					case 2:
						{
						setState(7239);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7238);
							match(COMMA);
							}
						}

						setState(7241);
						match(ENCRYPTION);
						setState(7242);
						match(BY);
						setState(7243);
						match(PASSWORD);
						setState(7244);
						match(EQUAL);
						setState(7245);
						((Backup_certificateContext)_localctx).encryption_password = match(STRING);
						}
						break;
					case 3:
						{
						setState(7247);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==COMMA) {
							{
							setState(7246);
							match(COMMA);
							}
						}

						setState(7249);
						match(DECRYPTION);
						setState(7250);
						match(BY);
						setState(7251);
						match(PASSWORD);
						setState(7252);
						match(EQUAL);
						setState(7253);
						((Backup_certificateContext)_localctx).decryption_pasword = match(STRING);
						}
						break;
					}
					}
					setState(7256); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==FILE || _la==DECRYPTION || _la==ENCRYPTION || _la==COMMA );
				setState(7258);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_master_keyContext extends ParserRuleContext {
		public Token master_key_backup_file;
		public Token encryption_password;
		public TerminalNode BACKUP() { return getToken(TSQLParser.BACKUP, 0); }
		public TerminalNode MASTER() { return getToken(TSQLParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public TerminalNode FILE() { return getToken(TSQLParser.FILE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public Backup_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBackup_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBackup_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBackup_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_master_keyContext backup_master_key() throws RecognitionException {
		Backup_master_keyContext _localctx = new Backup_master_keyContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_backup_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7261);
			match(BACKUP);
			setState(7262);
			match(MASTER);
			setState(7263);
			match(KEY);
			setState(7264);
			match(TO);
			setState(7265);
			match(FILE);
			setState(7266);
			match(EQUAL);
			setState(7267);
			((Backup_master_keyContext)_localctx).master_key_backup_file = match(STRING);
			setState(7268);
			match(ENCRYPTION);
			setState(7269);
			match(BY);
			setState(7270);
			match(PASSWORD);
			setState(7271);
			match(EQUAL);
			setState(7272);
			((Backup_master_keyContext)_localctx).encryption_password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Backup_service_master_keyContext extends ParserRuleContext {
		public Token service_master_key_backup_file;
		public Token encryption_password;
		public TerminalNode BACKUP() { return getToken(TSQLParser.BACKUP, 0); }
		public TerminalNode SERVICE() { return getToken(TSQLParser.SERVICE, 0); }
		public TerminalNode MASTER() { return getToken(TSQLParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public TerminalNode FILE() { return getToken(TSQLParser.FILE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public Backup_service_master_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_backup_service_master_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBackup_service_master_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBackup_service_master_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBackup_service_master_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Backup_service_master_keyContext backup_service_master_key() throws RecognitionException {
		Backup_service_master_keyContext _localctx = new Backup_service_master_keyContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_backup_service_master_key);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7274);
			match(BACKUP);
			setState(7275);
			match(SERVICE);
			setState(7276);
			match(MASTER);
			setState(7277);
			match(KEY);
			setState(7278);
			match(TO);
			setState(7279);
			match(FILE);
			setState(7280);
			match(EQUAL);
			setState(7281);
			((Backup_service_master_keyContext)_localctx).service_master_key_backup_file = match(STRING);
			setState(7282);
			match(ENCRYPTION);
			setState(7283);
			match(BY);
			setState(7284);
			match(PASSWORD);
			setState(7285);
			match(EQUAL);
			setState(7286);
			((Backup_service_master_keyContext)_localctx).encryption_password = match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(TSQLParser.EXECUTE, 0); }
		public Execute_stringContext execute_string() {
			return getRuleContext(Execute_stringContext.class,0);
		}
		public Execute_moduleContext execute_module() {
			return getRuleContext(Execute_moduleContext.class,0);
		}
		public Execute_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExecute_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExecute_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExecute_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statementContext execute_statement() throws RecognitionException {
		Execute_statementContext _localctx = new Execute_statementContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_execute_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7288);
			match(EXECUTE);
			setState(7291);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(7289);
				execute_string();
				}
				break;
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case LOCAL_ID:
			case ID:
				{
				setState(7290);
				execute_module();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_stringContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Execute_string_partContext> execute_string_part() {
			return getRuleContexts(Execute_string_partContext.class);
		}
		public Execute_string_partContext execute_string_part(int i) {
			return getRuleContext(Execute_string_partContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> PLUS() { return getTokens(TSQLParser.PLUS); }
		public TerminalNode PLUS(int i) {
			return getToken(TSQLParser.PLUS, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode AT() { return getToken(TSQLParser.AT, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode LOGIN() { return getToken(TSQLParser.LOGIN, 0); }
		public TerminalNode USER() { return getToken(TSQLParser.USER, 0); }
		public List<Default_valueContext> default_value() {
			return getRuleContexts(Default_valueContext.class);
		}
		public Default_valueContext default_value(int i) {
			return getRuleContext(Default_valueContext.class,i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSQLParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSQLParser.LOCAL_ID, i);
		}
		public List<TerminalNode> OUTPUT() { return getTokens(TSQLParser.OUTPUT); }
		public TerminalNode OUTPUT(int i) {
			return getToken(TSQLParser.OUTPUT, i);
		}
		public List<TerminalNode> OUT() { return getTokens(TSQLParser.OUT); }
		public TerminalNode OUT(int i) {
			return getToken(TSQLParser.OUT, i);
		}
		public Execute_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExecute_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExecute_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExecute_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_stringContext execute_string() throws RecognitionException {
		Execute_stringContext _localctx = new Execute_stringContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_execute_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7293);
			match(LR_BRACKET);
			setState(7294);
			execute_string_part();
			setState(7299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PLUS) {
				{
				{
				setState(7295);
				match(PLUS);
				setState(7296);
				execute_string_part();
				}
				}
				setState(7301);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7313);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7302);
				match(COMMA);
				setState(7309);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1019,_ctx) ) {
				case 1:
					{
					setState(7303);
					default_value();
					}
					break;
				case 2:
					{
					setState(7304);
					id();
					}
					break;
				case 3:
					{
					{
					setState(7305);
					match(LOCAL_ID);
					setState(7307);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUT || _la==OUTPUT) {
						{
						setState(7306);
						_la = _input.LA(1);
						if ( !(_la==OUT || _la==OUTPUT) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					}
					break;
				}
				}
				}
				setState(7315);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7316);
			match(RR_BRACKET);
			setState(7321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7317);
				match(AS);
				setState(7318);
				_la = _input.LA(1);
				if ( !(_la==USER || _la==LOGIN) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7319);
				match(EQUAL);
				setState(7320);
				match(STRING);
				}
			}

			setState(7325);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT) {
				{
				setState(7323);
				match(AT);
				setState(7324);
				qualified_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_string_partContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Execute_string_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_string_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExecute_string_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExecute_string_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExecute_string_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_string_partContext execute_string_part() throws RecognitionException {
		Execute_string_partContext _localctx = new Execute_string_partContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_execute_string_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7327);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_moduleContext extends ParserRuleContext {
		public Token return_status;
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSQLParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSQLParser.LOCAL_ID, i);
		}
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public List<Execute_statement_argContext> execute_statement_arg() {
			return getRuleContexts(Execute_statement_argContext.class);
		}
		public Execute_statement_argContext execute_statement_arg(int i) {
			return getRuleContext(Execute_statement_argContext.class,i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Execute_optionContext> execute_option() {
			return getRuleContexts(Execute_optionContext.class);
		}
		public Execute_optionContext execute_option(int i) {
			return getRuleContext(Execute_optionContext.class,i);
		}
		public TerminalNode SEMI() { return getToken(TSQLParser.SEMI, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Execute_moduleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_module; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExecute_module(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExecute_module(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExecute_module(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_moduleContext execute_module() throws RecognitionException {
		Execute_moduleContext _localctx = new Execute_moduleContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_execute_module);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7331);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1023,_ctx) ) {
			case 1:
				{
				setState(7329);
				((Execute_moduleContext)_localctx).return_status = match(LOCAL_ID);
				setState(7330);
				match(EQUAL);
				}
				break;
			}
			setState(7339);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(7333);
				qualified_name();
				setState(7336);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1024,_ctx) ) {
				case 1:
					{
					setState(7334);
					match(SEMI);
					setState(7335);
					match(DECIMAL);
					}
					break;
				}
				}
				break;
			case LOCAL_ID:
				{
				setState(7338);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7349);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1027,_ctx) ) {
			case 1:
				{
				setState(7341);
				execute_statement_arg();
				setState(7346);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7342);
					match(COMMA);
					setState(7343);
					execute_statement_arg();
					}
					}
					setState(7348);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(7360);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1029,_ctx) ) {
			case 1:
				{
				setState(7351);
				match(WITH);
				setState(7352);
				execute_option();
				setState(7357);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7353);
					match(COMMA);
					setState(7354);
					execute_option();
					}
					}
					setState(7359);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_statement_argContext extends ParserRuleContext {
		public Token parameter;
		public Default_valueContext default_value() {
			return getRuleContext(Default_valueContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSQLParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSQLParser.LOCAL_ID, i);
		}
		public TerminalNode OUTPUT() { return getToken(TSQLParser.OUTPUT, 0); }
		public TerminalNode OUT() { return getToken(TSQLParser.OUT, 0); }
		public Execute_statement_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_statement_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExecute_statement_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExecute_statement_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExecute_statement_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_statement_argContext execute_statement_arg() throws RecognitionException {
		Execute_statement_argContext _localctx = new Execute_statement_argContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_execute_statement_arg);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1030,_ctx) ) {
			case 1:
				{
				setState(7362);
				((Execute_statement_argContext)_localctx).parameter = match(LOCAL_ID);
				setState(7363);
				match(EQUAL);
				}
				break;
			}
			setState(7372);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1032,_ctx) ) {
			case 1:
				{
				setState(7366);
				default_value();
				}
				break;
			case 2:
				{
				setState(7367);
				id();
				}
				break;
			case 3:
				{
				{
				setState(7368);
				match(LOCAL_ID);
				setState(7370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUT || _la==OUTPUT) {
					{
					setState(7369);
					_la = _input.LA(1);
					if ( !(_la==OUT || _la==OUTPUT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_optionContext extends ParserRuleContext {
		public TerminalNode RECOMPILE() { return getToken(TSQLParser.RECOMPILE, 0); }
		public TerminalNode RESULT() { return getToken(TSQLParser.RESULT, 0); }
		public TerminalNode SETS() { return getToken(TSQLParser.SETS, 0); }
		public Result_sets_valueContext result_sets_value() {
			return getRuleContext(Result_sets_valueContext.class,0);
		}
		public Execute_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExecute_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExecute_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExecute_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_optionContext execute_option() throws RecognitionException {
		Execute_optionContext _localctx = new Execute_optionContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_execute_option);
		try {
			setState(7378);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECOMPILE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7374);
				match(RECOMPILE);
				}
				break;
			case RESULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7375);
				match(RESULT);
				setState(7376);
				match(SETS);
				setState(7377);
				result_sets_value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_sets_valueContext extends ParserRuleContext {
		public TerminalNode UNDEFINED() { return getToken(TSQLParser.UNDEFINED, 0); }
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Result_sets_definitionContext> result_sets_definition() {
			return getRuleContexts(Result_sets_definitionContext.class);
		}
		public Result_sets_definitionContext result_sets_definition(int i) {
			return getRuleContext(Result_sets_definitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Result_sets_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_sets_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterResult_sets_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitResult_sets_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitResult_sets_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_sets_valueContext result_sets_value() throws RecognitionException {
		Result_sets_valueContext _localctx = new Result_sets_valueContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_result_sets_value);
		int _la;
		try {
			setState(7393);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNDEFINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(7380);
				match(UNDEFINED);
				}
				break;
			case NONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7381);
				match(NONE);
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 3);
				{
				setState(7382);
				match(LR_BRACKET);
				setState(7383);
				result_sets_definition();
				setState(7388);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7384);
					match(COMMA);
					setState(7385);
					result_sets_definition();
					}
					}
					setState(7390);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7391);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Result_sets_definitionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Column_definitionContext> column_definition() {
			return getRuleContexts(Column_definitionContext.class);
		}
		public Column_definitionContext column_definition(int i) {
			return getRuleContext(Column_definitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode OBJECT() { return getToken(TSQLParser.OBJECT, 0); }
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public Result_sets_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_result_sets_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterResult_sets_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitResult_sets_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitResult_sets_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Result_sets_definitionContext result_sets_definition() throws RecognitionException {
		Result_sets_definitionContext _localctx = new Result_sets_definitionContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_result_sets_definition);
		int _la;
		try {
			setState(7408);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1036,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7395);
				match(LR_BRACKET);
				setState(7396);
				column_definition();
				{
				setState(7397);
				match(COMMA);
				setState(7398);
				column_definition();
				}
				setState(7400);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7402);
				match(AS);
				setState(7403);
				_la = _input.LA(1);
				if ( !(_la==OBJECT || _la==TYPE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7404);
				qualified_name();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7405);
				match(AS);
				setState(7406);
				match(FOR);
				setState(7407);
				match(XML);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_statementContext extends ParserRuleContext {
		public Execute_clauseContext execute_clause() {
			return getRuleContext(Execute_clauseContext.class,0);
		}
		public Rule_commonContext rule_common() {
			return getRuleContext(Rule_commonContext.class,0);
		}
		public TerminalNode REVERT() { return getToken(TSQLParser.REVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode COOKIE() { return getToken(TSQLParser.COOKIE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Open_keyContext open_key() {
			return getRuleContext(Open_keyContext.class,0);
		}
		public Close_keyContext close_key() {
			return getRuleContext(Close_keyContext.class,0);
		}
		public Add_signatureContext add_signature() {
			return getRuleContext(Add_signatureContext.class,0);
		}
		public Security_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSecurity_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSecurity_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSecurity_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_statementContext security_statement() throws RecognitionException {
		Security_statementContext _localctx = new Security_statementContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_security_statement);
		try {
			setState(7424);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7410);
				execute_clause();
				}
				break;
			case DENY:
			case GRANT:
			case REVOKE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7411);
				rule_common();
				}
				break;
			case REVERT:
				enterOuterAlt(_localctx, 3);
				{
				setState(7412);
				match(REVERT);
				setState(7419);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1037,_ctx) ) {
				case 1:
					{
					setState(7413);
					match(LR_BRACKET);
					setState(7414);
					match(WITH);
					setState(7415);
					match(COOKIE);
					setState(7416);
					match(EQUAL);
					setState(7417);
					match(LOCAL_ID);
					setState(7418);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case OPEN:
				enterOuterAlt(_localctx, 4);
				{
				setState(7421);
				open_key();
				}
				break;
			case CLOSE:
				enterOuterAlt(_localctx, 5);
				{
				setState(7422);
				close_key();
				}
				break;
			case ADD:
				enterOuterAlt(_localctx, 6);
				{
				setState(7423);
				add_signature();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rule_commonContext extends ParserRuleContext {
		public IdContext as_principal;
		public Role_namesContext role_names() {
			return getRuleContext(Role_namesContext.class,0);
		}
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public List<TerminalNode> GRANT() { return getTokens(TSQLParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(TSQLParser.GRANT, i);
		}
		public TerminalNode DENY() { return getToken(TSQLParser.DENY, 0); }
		public TerminalNode REVOKE() { return getToken(TSQLParser.REVOKE, 0); }
		public PermissionsContext permissions() {
			return getRuleContext(PermissionsContext.class,0);
		}
		public Columns_permissionsContext columns_permissions() {
			return getRuleContext(Columns_permissionsContext.class,0);
		}
		public Object_typeContext object_type() {
			return getRuleContext(Object_typeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> OPTION() { return getTokens(TSQLParser.OPTION); }
		public TerminalNode OPTION(int i) {
			return getToken(TSQLParser.OPTION, i);
		}
		public TerminalNode CASCADE() { return getToken(TSQLParser.CASCADE, 0); }
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public Rule_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rule_common; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterRule_common(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitRule_common(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitRule_common(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rule_commonContext rule_common() throws RecognitionException {
		Rule_commonContext _localctx = new Rule_commonContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_rule_common);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7434);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANT:
				{
				setState(7426);
				match(GRANT);
				}
				break;
			case DENY:
				{
				setState(7427);
				match(DENY);
				}
				break;
			case REVOKE:
				{
				setState(7428);
				match(REVOKE);
				setState(7432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(7429);
					match(GRANT);
					setState(7430);
					match(OPTION);
					setState(7431);
					match(FOR);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7438);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1041,_ctx) ) {
			case 1:
				{
				setState(7436);
				permissions();
				}
				break;
			case 2:
				{
				setState(7437);
				columns_permissions();
				}
				break;
			}
			setState(7441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(7440);
				object_type();
				}
			}

			setState(7443);
			_la = _input.LA(1);
			if ( !(_la==FROM || _la==TO) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7444);
			role_names();
			setState(7449);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1043,_ctx) ) {
			case 1:
				{
				setState(7445);
				match(WITH);
				setState(7446);
				match(GRANT);
				setState(7447);
				match(OPTION);
				}
				break;
			case 2:
				{
				setState(7448);
				match(CASCADE);
				}
				break;
			}
			setState(7453);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7451);
				match(AS);
				setState(7452);
				((Rule_commonContext)_localctx).as_principal = id();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PermissionsContext extends ParserRuleContext {
		public List<PermissionContext> permission() {
			return getRuleContexts(PermissionContext.class);
		}
		public PermissionContext permission(int i) {
			return getRuleContext(PermissionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public PermissionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permissions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterPermissions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitPermissions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitPermissions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PermissionsContext permissions() throws RecognitionException {
		PermissionsContext _localctx = new PermissionsContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_permissions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7455);
			permission();
			setState(7460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7456);
				match(COMMA);
				setState(7457);
				permission();
				}
				}
				setState(7462);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Columns_permissionsContext extends ParserRuleContext {
		public List<Table_column_privilegesContext> table_column_privileges() {
			return getRuleContexts(Table_column_privilegesContext.class);
		}
		public Table_column_privilegesContext table_column_privileges(int i) {
			return getRuleContext(Table_column_privilegesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Columns_permissionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columns_permissions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumns_permissions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumns_permissions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumns_permissions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Columns_permissionsContext columns_permissions() throws RecognitionException {
		Columns_permissionsContext _localctx = new Columns_permissionsContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_columns_permissions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7463);
			table_column_privileges();
			setState(7468);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7464);
				match(COMMA);
				setState(7465);
				table_column_privileges();
				}
				}
				setState(7470);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_column_privilegesContext extends ParserRuleContext {
		public PermissionContext permission() {
			return getRuleContext(PermissionContext.class,0);
		}
		public Table_columnsContext table_columns() {
			return getRuleContext(Table_columnsContext.class,0);
		}
		public Table_column_privilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_column_privileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTable_column_privileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTable_column_privileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTable_column_privileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_column_privilegesContext table_column_privileges() throws RecognitionException {
		Table_column_privilegesContext _localctx = new Table_column_privilegesContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_table_column_privileges);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7471);
			permission();
			setState(7472);
			table_columns();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_columnsContext extends ParserRuleContext {
		public IdContext id;
		public List<IdContext> column = new ArrayList<IdContext>();
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Table_columnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_columns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTable_columns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTable_columns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTable_columns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_columnsContext table_columns() throws RecognitionException {
		Table_columnsContext _localctx = new Table_columnsContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_table_columns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7474);
			match(LR_BRACKET);
			setState(7475);
			((Table_columnsContext)_localctx).id = id();
			((Table_columnsContext)_localctx).column.add(((Table_columnsContext)_localctx).id);
			setState(7480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7476);
				match(COMMA);
				setState(7477);
				((Table_columnsContext)_localctx).id = id();
				((Table_columnsContext)_localctx).column.add(((Table_columnsContext)_localctx).id);
				}
				}
				setState(7482);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7483);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PermissionContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(TSQLParser.PRIVILEGES, 0); }
		public TerminalNode EXECUTE() { return getToken(TSQLParser.EXECUTE, 0); }
		public TerminalNode VIEW() { return getToken(TSQLParser.VIEW, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode TAKE() { return getToken(TSQLParser.TAKE, 0); }
		public TerminalNode CONTROL() { return getToken(TSQLParser.CONTROL, 0); }
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode CREATE() { return getToken(TSQLParser.CREATE, 0); }
		public TerminalNode TABLE() { return getToken(TSQLParser.TABLE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(TSQLParser.SHOWPLAN, 0); }
		public TerminalNode IMPERSONATE() { return getToken(TSQLParser.IMPERSONATE, 0); }
		public TerminalNode SELECT() { return getToken(TSQLParser.SELECT, 0); }
		public TerminalNode DELETE() { return getToken(TSQLParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(TSQLParser.UPDATE, 0); }
		public TerminalNode REFERENCES() { return getToken(TSQLParser.REFERENCES, 0); }
		public TerminalNode INSERT() { return getToken(TSQLParser.INSERT, 0); }
		public TerminalNode CONNECT() { return getToken(TSQLParser.CONNECT, 0); }
		public TerminalNode ALTER() { return getToken(TSQLParser.ALTER, 0); }
		public TerminalNode DATABASE() { return getToken(TSQLParser.DATABASE, 0); }
		public TerminalNode ANY() { return getToken(TSQLParser.ANY, 0); }
		public PermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PermissionContext permission() throws RecognitionException {
		PermissionContext _localctx = new PermissionContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_permission);
		int _la;
		try {
			setState(7517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1052,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7485);
				match(ALL);
				setState(7487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(7486);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7489);
				match(EXECUTE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7490);
				match(VIEW);
				setState(7491);
				id();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7492);
				match(TAKE);
				setState(7493);
				id();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7494);
				match(CONTROL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7495);
				match(CONTROL);
				setState(7496);
				match(SERVER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7497);
				match(CREATE);
				setState(7498);
				_la = _input.LA(1);
				if ( !(_la==TABLE || _la==VIEW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7499);
				match(SHOWPLAN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7500);
				match(IMPERSONATE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(7501);
				match(SELECT);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(7502);
				match(DELETE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(7503);
				match(UPDATE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(7504);
				match(REFERENCES);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(7505);
				match(INSERT);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(7506);
				match(CONNECT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(7507);
				match(ALTER);
				setState(7515);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANY || _la==DATABASE || _la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)))) != 0)) {
					{
					setState(7509);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ANY) {
						{
						setState(7508);
						match(ANY);
						}
					}

					setState(7513);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILLFACTOR:
					case PRECISION:
					case ABSENT:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AES:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_CONNECTIONS:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANONYMOUS:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPEND:
					case APPLICATION_LOG:
					case APPLICATION:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUDIT_GUID:
					case AUDIT:
					case AUTHENTICATION:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AUTO_UPDATE_STATISTICS:
					case AUTO:
					case AUTOGROW_ALL_FILES:
					case AUTOGROW_SINGLE_FILE:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case AVAILABILITY:
					case BACKUP_PRIORITY:
					case BEFORE:
					case BEGIN_DIALOG:
					case BINARY_BASE64:
					case BINDING:
					case BLOB_STORAGE:
					case BLOCK:
					case BLOCKING_HIERARCHY:
					case BLOCKSIZE:
					case BROKER_INSTANCE:
					case BROKER:
					case BUFFER:
					case BUFFERCOUNT:
					case BULK_LOGGED:
					case CACHE:
					case CALLED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CERTIFICATE:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHANGES:
					case CHANGETABLE:
					case CHAR:
					case CHARACTER:
					case CHECK_EXPIRATION:
					case CHECK_POLICY:
					case CHECKSUM:
					case CLASSIFIER_FUNCTION:
					case CLEANUP:
					case CLUSTER:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case COMPRESSION:
					case CONCAT_NULL_YIELDS_NULL:
					case CONCAT:
					case CONFIGURATION:
					case CONNECT:
					case CONTAINMENT:
					case CONTENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT_NAME:
					case CONTRACT:
					case CONTROL:
					case CONVERSATION:
					case COOKIE:
					case COPY_ONLY:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATA:
					case DATABASE_MIRRORING:
					case DATE_CORRELATION_OPTIMIZATION:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DATABASE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DEFAULT_SCHEMA:
					case DELAY:
					case DELAYED_DURABILITY:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIAGNOSTICS:
					case DIALOG:
					case DIFFERENTIAL:
					case DIRECTORY_NAME:
					case DISABLE_BROKER:
					case DISABLE:
					case DISABLED:
					case DOCUMENT:
					case DTC_SUPPORT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE_BROKER:
					case ENABLE:
					case ENABLED:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ENDPOINT:
					case ERROR_BROKER_CONVERSATIONS:
					case ERROR:
					case EVENT_RETENTION_MODE:
					case EVENT:
					case EXCLUSIVE:
					case EXECUTABLE_FILE:
					case EXECUTABLE:
					case EXPAND:
					case EXPIREDATE:
					case EXPIRY_DATE:
					case EXPLICIT:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILOVER:
					case FAILURE_CONDITION_LEVEL:
					case FAILURECONDITIONLEVEL:
					case FALSE:
					case FAN_IN:
					case FAST_FORWARD:
					case FAST:
					case FILE_SNAPSHOT:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM_ON:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case FORCE:
					case FORCED:
					case FORCESEEK:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GET:
					case GLOBAL:
					case GOVERNOR:
					case GROUP_MAX_REQUESTS:
					case HADR:
					case HASH:
					case HASHED:
					case HEALTH_CHECK_TIMEOUT:
					case HEALTHCHECKTIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IIF:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCLUDE:
					case INCREMENT:
					case INCREMENTAL:
					case INFINITE:
					case INIT:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSTEAD:
					case IO:
					case IP:
					case ISOLATION:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KERBEROS:
					case KEY_PATH:
					case KEY_SOURCE:
					case KEY_STORE_PROVIDER_NAME:
					case KEYS:
					case KEYSET:
					case LANGUAGE:
					case LAST:
					case LEVEL:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LIST:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LISTENER_URL:
					case LISTENER:
					case LOB_COMPACTION:
					case LOCAL_SERVICE_NAME:
					case LOCAL:
					case LOCATION:
					case LOCK_ESCALATION:
					case LOCK:
					case LOG:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MASTER:
					case MATCHED:
					case MATERIALIZED:
					case MAX_CPU_PERCENT:
					case MAX_DISPATCH_LATENCY:
					case MAX_DOP:
					case MAX_EVENT_SIZE:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_MEMORY:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAX_SIZE:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MAXTRANSFER:
					case MAXVALUE:
					case MB:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEDIUM:
					case MEMBER:
					case MEMORY_OPTIMIZED_DATA:
					case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
					case MEMORY_OPTIMIZED:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARD_SIZE:
					case MESSAGE_FORWARDING:
					case MESSAGE:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MINVALUE:
					case MIRROR_ADDRESS:
					case MIRROR:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case MUST_CHANGE:
					case NAME:
					case NCHAR:
					case NEGOTIATE:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEWNAME:
					case NEXT:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NO:
					case NODES:
					case NOEXPAND:
					case NOFORMAT:
					case NOINIT:
					case NON_TRANSACTED_ACCESS:
					case NONE:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOREWIND:
					case NOSKIP:
					case NOTIFICATION:
					case NOUNLOAD:
					case NOWAIT:
					case NTLM:
					case NUMANODE:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPENJSON:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARSE:
					case PARTIAL:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PASSWORD:
					case PATH:
					case PAUSE:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERMISSION_SET:
					case PERSIST_SAMPLE_PERSENT:
					case PERSISTED:
					case PERSISTENT_LOG_BUFFER:
					case PLATFORM:
					case POISON_MESSAGE_HANDLING:
					case POLICY:
					case POOL:
					case POPULATION:
					case PORT:
					case PRECEDING:
					case PREDICATE:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY_LEVEL:
					case PRIORITY:
					case PRIVATE_KEY:
					case PRIVATE:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROCESS:
					case PROFILE:
					case PROPERTY_DESCRIPTION:
					case PROPERTY_INT_ID:
					case PROPERTY_SET_GUID:
					case PROPERTY:
					case PROVIDER_KEY_NAME:
					case PROVIDER:
					case QUERYTRACEON:
					case QUEUE_DELAY:
					case QUEUE:
					case QUOTED_IDENTIFIER:
					case R_LETTER:
					case RANGE:
					case RAW:
					case RC2:
					case RC4_128:
					case RC4:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY_ROUTING_LIST:
					case READ_ONLY:
					case READ_WRITE_FILEGROUPS:
					case READ_WRITE:
					case READWRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case REGENERATE:
					case RELATED_CONVERSATION_GROUP:
					case RELATED_CONVERSATION:
					case RELATIVE:
					case REMOTE_SERVICE_NAME:
					case REMOTE:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case REQUIRED:
					case RESAMPLE:
					case RESERVE_DISK_SPACE:
					case RESET:
					case RESOURCE_MANAGER_LOCATION:
					case RESOURCE:
					case RESTART:
					case RESTRICTED_USER:
					case RESULT:
					case RESUME:
					case RETAINDAYS:
					case RETENTION:
					case RETURNS:
					case REWIND:
					case ROBUST:
					case ROLE:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROWGUID:
					case ROWS:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case RSA_512:
					case SAFE:
					case SAFETY:
					case SAMPLE:
					case SCHEDULER:
					case SCHEMABINDING:
					case SCHEME:
					case SCOPED:
					case SCROLL_LOCKS:
					case SCROLL:
					case SEARCH:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDARY:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SECURITY:
					case SEEDING_MODE:
					case SELECTIVE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SERVER:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SERVICE:
					case SESSION_TIMEOUT:
					case SESSION:
					case SETERROR:
					case SETS:
					case SHARE:
					case SHOWPLAN:
					case SID:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SINGLETON:
					case SIZE:
					case SKIP_KEYWORD:
					case SNAPSHOT:
					case SOFTNUMA:
					case SOURCE:
					case SPARSE:
					case SPATIAL_WINDOW_MAX_CELLS:
					case SPECIFICATION:
					case SPLIT:
					case SQL:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STANDBY:
					case START_DATE:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STATE:
					case STATIC:
					case STATISTICAL_SEMANTICS:
					case STATS:
					case STATUS:
					case STOP_ON_ERROR:
					case STOP:
					case STOPLIST:
					case STOPPED:
					case STRING_AGG:
					case SUBJECT:
					case SUPPORTED:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TAPE:
					case TARGET_RECOVERY_TIME:
					case TARGET:
					case TB:
					case TCP:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TORN_PAGE_DETECTION:
					case TRACK_CAUSALITY:
					case TRACK_COLUMNS_UPDATED:
					case TRANSFER:
					case TRANSFORM_NOISE_WORDS:
					case TRIM:
					case TRIPLE_DES_3KEY:
					case TRIPLE_DES:
					case TRUE:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE_WARNING:
					case TYPE:
					case UNBOUNDED:
					case UNCHECKED:
					case UNCOMMITTED:
					case UNDEFINED:
					case UNKNOWN:
					case UNLIMITED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VERBOSELOGGING:
					case VERSION:
					case VIEW_METADATA:
					case VIEWS:
					case VISIBILITY:
					case WAIT:
					case WELL_FORMED_XML:
					case WINDOWS:
					case WITHOUT_ARRAY_WRAPPER:
					case WITHOUT:
					case WITNESS:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XQUERY:
					case XSINIL:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(7511);
						id();
						}
						break;
					case DATABASE:
						{
						setState(7512);
						match(DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_typeContext extends ParserRuleContext {
		public Class_typeContext type;
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<TerminalNode> COLON() { return getTokens(TSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSQLParser.COLON, i);
		}
		public Table_columnsContext table_columns() {
			return getRuleContext(Table_columnsContext.class,0);
		}
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public Object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterObject_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitObject_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitObject_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_typeContext object_type() throws RecognitionException {
		Object_typeContext _localctx = new Object_typeContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7519);
			match(ON);
			setState(7524);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1053,_ctx) ) {
			case 1:
				{
				setState(7520);
				((Object_typeContext)_localctx).type = class_type();
				setState(7521);
				match(COLON);
				setState(7522);
				match(COLON);
				}
				break;
			}
			setState(7526);
			qualified_name();
			setState(7528);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(7527);
				table_columns();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Role_namesContext extends ParserRuleContext {
		public IdContext id;
		public List<IdContext> to_principal = new ArrayList<IdContext>();
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Role_namesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_role_names; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterRole_names(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitRole_names(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitRole_names(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Role_namesContext role_names() throws RecognitionException {
		Role_namesContext _localctx = new Role_namesContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_role_names);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7530);
			((Role_namesContext)_localctx).id = id();
			((Role_namesContext)_localctx).to_principal.add(((Role_namesContext)_localctx).id);
			setState(7535);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7531);
				match(COMMA);
				setState(7532);
				((Role_namesContext)_localctx).id = id();
				((Role_namesContext)_localctx).to_principal.add(((Role_namesContext)_localctx).id);
				}
				}
				setState(7537);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_certificateContext extends ParserRuleContext {
		public IdContext certificate_name;
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public Existing_keysContext existing_keys() {
			return getRuleContext(Existing_keysContext.class,0);
		}
		public Generate_new_keysContext generate_new_keys() {
			return getRuleContext(Generate_new_keysContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode ACTIVE() { return getToken(TSQLParser.ACTIVE, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode BEGIN() { return getToken(TSQLParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(TSQLParser.DIALOG, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public Create_certificateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_certificate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_certificate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_certificate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_certificate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_certificateContext create_certificate() throws RecognitionException {
		Create_certificateContext _localctx = new Create_certificateContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_create_certificate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7538);
			match(CERTIFICATE);
			setState(7539);
			((Create_certificateContext)_localctx).certificate_name = id();
			setState(7542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(7540);
				match(AUTHORIZATION);
				setState(7541);
				id();
				}
			}

			setState(7547);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				setState(7544);
				match(FROM);
				setState(7545);
				existing_keys();
				}
				break;
			case WITH:
			case ENCRYPTION:
				{
				setState(7546);
				generate_new_keys();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7555);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ACTIVE) {
				{
				setState(7549);
				match(ACTIVE);
				setState(7550);
				match(FOR);
				setState(7551);
				match(BEGIN);
				setState(7552);
				match(DIALOG);
				setState(7553);
				match(EQUAL);
				setState(7554);
				_la = _input.LA(1);
				if ( !(_la==OFF || _la==ON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Existing_keysContext extends ParserRuleContext {
		public IdContext assembly_name;
		public Token path_to_file;
		public TerminalNode ASSEMBLY() { return getToken(TSQLParser.ASSEMBLY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode FILE() { return getToken(TSQLParser.FILE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode EXECUTABLE() { return getToken(TSQLParser.EXECUTABLE, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode PRIVATE() { return getToken(TSQLParser.PRIVATE, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Private_key_optionsContext private_key_options() {
			return getRuleContext(Private_key_optionsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Existing_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_existing_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExisting_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExisting_keys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExisting_keys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Existing_keysContext existing_keys() throws RecognitionException {
		Existing_keysContext _localctx = new Existing_keysContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_existing_keys);
		int _la;
		try {
			setState(7574);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASSEMBLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(7557);
				match(ASSEMBLY);
				setState(7558);
				((Existing_keysContext)_localctx).assembly_name = id();
				}
				break;
			case FILE:
			case EXECUTABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXECUTABLE) {
					{
					setState(7559);
					match(EXECUTABLE);
					}
				}

				setState(7562);
				match(FILE);
				setState(7563);
				match(EQUAL);
				setState(7564);
				((Existing_keysContext)_localctx).path_to_file = match(STRING);
				setState(7572);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1060,_ctx) ) {
				case 1:
					{
					setState(7565);
					match(WITH);
					setState(7566);
					match(PRIVATE);
					setState(7567);
					match(KEY);
					setState(7568);
					match(LR_BRACKET);
					setState(7569);
					private_key_options();
					setState(7570);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Private_key_optionsContext extends ParserRuleContext {
		public Token path;
		public Token password;
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode FILE() { return getToken(TSQLParser.FILE, 0); }
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSQLParser.DECRYPTION, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public Private_key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_private_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterPrivate_key_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitPrivate_key_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitPrivate_key_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Private_key_optionsContext private_key_options() throws RecognitionException {
		Private_key_optionsContext _localctx = new Private_key_optionsContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_private_key_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7576);
			_la = _input.LA(1);
			if ( !(_la==FILE || _la==BINARY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7577);
			match(EQUAL);
			setState(7578);
			((Private_key_optionsContext)_localctx).path = match(STRING);
			setState(7585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7579);
				match(COMMA);
				setState(7580);
				_la = _input.LA(1);
				if ( !(_la==DECRYPTION || _la==ENCRYPTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7581);
				match(BY);
				setState(7582);
				match(PASSWORD);
				setState(7583);
				match(EQUAL);
				setState(7584);
				((Private_key_optionsContext)_localctx).password = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Generate_new_keysContext extends ParserRuleContext {
		public Token password;
		public Token certificate_subject_name;
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode SUBJECT() { return getToken(TSQLParser.SUBJECT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<Date_optionsContext> date_options() {
			return getRuleContexts(Date_optionsContext.class);
		}
		public Date_optionsContext date_options(int i) {
			return getRuleContext(Date_optionsContext.class,i);
		}
		public Generate_new_keysContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_generate_new_keys; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterGenerate_new_keys(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitGenerate_new_keys(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitGenerate_new_keys(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Generate_new_keysContext generate_new_keys() throws RecognitionException {
		Generate_new_keysContext _localctx = new Generate_new_keysContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_generate_new_keys);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7592);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ENCRYPTION) {
				{
				setState(7587);
				match(ENCRYPTION);
				setState(7588);
				match(BY);
				setState(7589);
				match(PASSWORD);
				setState(7590);
				match(EQUAL);
				setState(7591);
				((Generate_new_keysContext)_localctx).password = match(STRING);
				}
			}

			setState(7594);
			match(WITH);
			setState(7595);
			match(SUBJECT);
			setState(7596);
			match(EQUAL);
			setState(7597);
			((Generate_new_keysContext)_localctx).certificate_subject_name = match(STRING);
			setState(7602);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7598);
				match(COMMA);
				setState(7599);
				date_options();
				}
				}
				setState(7604);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Date_optionsContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode START_DATE() { return getToken(TSQLParser.START_DATE, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(TSQLParser.EXPIRY_DATE, 0); }
		public Date_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDate_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDate_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDate_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_optionsContext date_options() throws RecognitionException {
		Date_optionsContext _localctx = new Date_optionsContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_date_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7605);
			_la = _input.LA(1);
			if ( !(_la==EXPIRY_DATE || _la==START_DATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7606);
			match(EQUAL);
			setState(7607);
			match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public Token password;
		public TerminalNode OPEN() { return getToken(TSQLParser.OPEN, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSQLParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSQLParser.DECRYPTION, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public Decryption_mechanismContext decryption_mechanism() {
			return getRuleContext(Decryption_mechanismContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode MASTER() { return getToken(TSQLParser.MASTER, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Open_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOpen_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOpen_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOpen_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_keyContext open_key() throws RecognitionException {
		Open_keyContext _localctx = new Open_keyContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_open_key);
		try {
			setState(7625);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1065,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7609);
				match(OPEN);
				setState(7610);
				match(SYMMETRIC);
				setState(7611);
				match(KEY);
				setState(7612);
				((Open_keyContext)_localctx).key_name = id();
				setState(7613);
				match(DECRYPTION);
				setState(7614);
				match(BY);
				setState(7615);
				decryption_mechanism();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7617);
				match(OPEN);
				setState(7618);
				match(MASTER);
				setState(7619);
				match(KEY);
				setState(7620);
				match(DECRYPTION);
				setState(7621);
				match(BY);
				setState(7622);
				match(PASSWORD);
				setState(7623);
				match(EQUAL);
				setState(7624);
				((Open_keyContext)_localctx).password = match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_keyContext extends ParserRuleContext {
		public IdContext key_name;
		public TerminalNode CLOSE() { return getToken(TSQLParser.CLOSE, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSQLParser.SYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public TerminalNode KEYS() { return getToken(TSQLParser.KEYS, 0); }
		public TerminalNode MASTER() { return getToken(TSQLParser.MASTER, 0); }
		public Close_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterClose_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitClose_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitClose_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_keyContext close_key() throws RecognitionException {
		Close_keyContext _localctx = new Close_keyContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_close_key);
		try {
			setState(7638);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1066,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7627);
				match(CLOSE);
				setState(7628);
				match(SYMMETRIC);
				setState(7629);
				match(KEY);
				setState(7630);
				((Close_keyContext)_localctx).key_name = id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7631);
				match(CLOSE);
				setState(7632);
				match(ALL);
				setState(7633);
				match(SYMMETRIC);
				setState(7634);
				match(KEYS);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7635);
				match(CLOSE);
				setState(7636);
				match(MASTER);
				setState(7637);
				match(KEY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Add_signatureContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode SIGNATURE() { return getToken(TSQLParser.SIGNATURE, 0); }
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public List<Cripto_listContext> cripto_list() {
			return getRuleContexts(Cripto_listContext.class);
		}
		public Cripto_listContext cripto_list(int i) {
			return getRuleContext(Cripto_listContext.class,i);
		}
		public TerminalNode COUNTER() { return getToken(TSQLParser.COUNTER, 0); }
		public Class_typeContext class_type() {
			return getRuleContext(Class_typeContext.class,0);
		}
		public List<TerminalNode> COLON() { return getTokens(TSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSQLParser.COLON, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Add_signatureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_add_signature; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAdd_signature(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAdd_signature(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAdd_signature(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Add_signatureContext add_signature() throws RecognitionException {
		Add_signatureContext _localctx = new Add_signatureContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_add_signature);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7640);
			match(ADD);
			setState(7642);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COUNTER) {
				{
				setState(7641);
				match(COUNTER);
				}
			}

			setState(7644);
			match(SIGNATURE);
			setState(7645);
			match(TO);
			setState(7650);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1068,_ctx) ) {
			case 1:
				{
				setState(7646);
				class_type();
				setState(7647);
				match(COLON);
				setState(7648);
				match(COLON);
				}
				break;
			}
			setState(7652);
			qualified_name();
			setState(7653);
			match(BY);
			setState(7654);
			cripto_list();
			setState(7659);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7655);
				match(COMMA);
				setState(7656);
				cripto_list();
				}
				}
				setState(7661);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cripto_listContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode SIGNATURE() { return getToken(TSQLParser.SIGNATURE, 0); }
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public Cripto_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cripto_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCripto_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCripto_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCripto_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cripto_listContext cripto_list() throws RecognitionException {
		Cripto_listContext _localctx = new Cripto_listContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_cripto_list);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7665);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				{
				setState(7662);
				match(CERTIFICATE);
				}
				break;
			case ASYMMETRIC:
				{
				setState(7663);
				match(ASYMMETRIC);
				setState(7664);
				match(KEY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7667);
			id();
			setState(7677);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1072,_ctx) ) {
			case 1:
				{
				setState(7668);
				match(WITH);
				setState(7675);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PASSWORD:
					{
					setState(7669);
					match(PASSWORD);
					setState(7670);
					match(EQUAL);
					setState(7671);
					match(STRING);
					}
					break;
				case SIGNATURE:
					{
					setState(7672);
					match(SIGNATURE);
					setState(7673);
					match(EQUAL);
					setState(7674);
					match(BINARY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_keyContext extends ParserRuleContext {
		public Token password;
		public IdContext key_name;
		public IdContext provider_name;
		public TerminalNode MASTER() { return getToken(TSQLParser.MASTER, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public List<TerminalNode> ENCRYPTION() { return getTokens(TSQLParser.ENCRYPTION); }
		public TerminalNode ENCRYPTION(int i) {
			return getToken(TSQLParser.ENCRYPTION, i);
		}
		public List<TerminalNode> BY() { return getTokens(TSQLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(TSQLParser.BY, i);
		}
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSQLParser.SYMMETRIC, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode AUTHORIZATION() { return getToken(TSQLParser.AUTHORIZATION, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode PROVIDER() { return getToken(TSQLParser.PROVIDER, 0); }
		public List<Key_optionsContext> key_options() {
			return getRuleContexts(Key_optionsContext.class);
		}
		public Key_optionsContext key_options(int i) {
			return getRuleContext(Key_optionsContext.class,i);
		}
		public List<Encryption_mechanismContext> encryption_mechanism() {
			return getRuleContexts(Encryption_mechanismContext.class);
		}
		public Encryption_mechanismContext encryption_mechanism(int i) {
			return getRuleContext(Encryption_mechanismContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Create_keyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_key; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_key(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_key(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_key(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_keyContext create_key() throws RecognitionException {
		Create_keyContext _localctx = new Create_keyContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_create_key);
		int _la;
		try {
			setState(7712);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MASTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(7679);
				match(MASTER);
				setState(7680);
				match(KEY);
				setState(7681);
				match(ENCRYPTION);
				setState(7682);
				match(BY);
				setState(7683);
				match(PASSWORD);
				setState(7684);
				match(EQUAL);
				setState(7685);
				((Create_keyContext)_localctx).password = match(STRING);
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(7686);
				match(SYMMETRIC);
				setState(7687);
				match(KEY);
				setState(7688);
				((Create_keyContext)_localctx).key_name = id();
				setState(7691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTHORIZATION) {
					{
					setState(7689);
					match(AUTHORIZATION);
					setState(7690);
					id();
					}
				}

				setState(7696);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(7693);
					match(FROM);
					setState(7694);
					match(PROVIDER);
					setState(7695);
					((Create_keyContext)_localctx).provider_name = id();
					}
				}

				setState(7698);
				match(WITH);
				setState(7708); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(7703);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ALGORITHM:
					case CREATION_DISPOSITION:
					case IDENTITY_VALUE:
					case KEY_SOURCE:
					case PROVIDER_KEY_NAME:
						{
						setState(7699);
						key_options();
						}
						break;
					case ENCRYPTION:
						{
						setState(7700);
						match(ENCRYPTION);
						setState(7701);
						match(BY);
						setState(7702);
						encryption_mechanism();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7706);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(7705);
						match(COMMA);
						}
					}

					}
					}
					setState(7710); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ALGORITHM || _la==CREATION_DISPOSITION || _la==ENCRYPTION || _la==IDENTITY_VALUE || _la==KEY_SOURCE || _la==PROVIDER_KEY_NAME );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Key_optionsContext extends ParserRuleContext {
		public Token pass_phrase;
		public Token identity_phrase;
		public Token key_name_in_provider;
		public TerminalNode KEY_SOURCE() { return getToken(TSQLParser.KEY_SOURCE, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSQLParser.ALGORITHM, 0); }
		public AlgorithmContext algorithm() {
			return getRuleContext(AlgorithmContext.class,0);
		}
		public TerminalNode IDENTITY_VALUE() { return getToken(TSQLParser.IDENTITY_VALUE, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSQLParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSQLParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSQLParser.CREATE_NEW, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSQLParser.OPEN_EXISTING, 0); }
		public Key_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_key_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterKey_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitKey_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitKey_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Key_optionsContext key_options() throws RecognitionException {
		Key_optionsContext _localctx = new Key_optionsContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_key_options);
		int _la;
		try {
			setState(7729);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_SOURCE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7714);
				match(KEY_SOURCE);
				setState(7715);
				match(EQUAL);
				setState(7716);
				((Key_optionsContext)_localctx).pass_phrase = match(STRING);
				}
				break;
			case ALGORITHM:
				enterOuterAlt(_localctx, 2);
				{
				setState(7717);
				match(ALGORITHM);
				setState(7718);
				match(EQUAL);
				setState(7719);
				algorithm();
				}
				break;
			case IDENTITY_VALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(7720);
				match(IDENTITY_VALUE);
				setState(7721);
				match(EQUAL);
				setState(7722);
				((Key_optionsContext)_localctx).identity_phrase = match(STRING);
				}
				break;
			case PROVIDER_KEY_NAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(7723);
				match(PROVIDER_KEY_NAME);
				setState(7724);
				match(EQUAL);
				setState(7725);
				((Key_optionsContext)_localctx).key_name_in_provider = match(STRING);
				}
				break;
			case CREATION_DISPOSITION:
				enterOuterAlt(_localctx, 5);
				{
				setState(7726);
				match(CREATION_DISPOSITION);
				setState(7727);
				match(EQUAL);
				setState(7728);
				_la = _input.LA(1);
				if ( !(_la==CREATE_NEW || _la==OPEN_EXISTING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlgorithmContext extends ParserRuleContext {
		public TerminalNode DES() { return getToken(TSQLParser.DES, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSQLParser.TRIPLE_DES, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSQLParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode RC2() { return getToken(TSQLParser.RC2, 0); }
		public TerminalNode RC4() { return getToken(TSQLParser.RC4, 0); }
		public TerminalNode RC4_128() { return getToken(TSQLParser.RC4_128, 0); }
		public TerminalNode DESX() { return getToken(TSQLParser.DESX, 0); }
		public TerminalNode AES_128() { return getToken(TSQLParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSQLParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSQLParser.AES_256, 0); }
		public AlgorithmContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_algorithm; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAlgorithm(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAlgorithm(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAlgorithm(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlgorithmContext algorithm() throws RecognitionException {
		AlgorithmContext _localctx = new AlgorithmContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_algorithm);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7731);
			_la = _input.LA(1);
			if ( !(((((_la - 201)) & ~0x3f) == 0 && ((1L << (_la - 201)) & ((1L << (AES_128 - 201)) | (1L << (AES_192 - 201)) | (1L << (AES_256 - 201)))) != 0) || _la==DES || _la==DESX || ((((_la - 594)) & ~0x3f) == 0 && ((1L << (_la - 594)) & ((1L << (RC2 - 594)) | (1L << (RC4_128 - 594)) | (1L << (RC4 - 594)))) != 0) || _la==TRIPLE_DES_3KEY || _la==TRIPLE_DES) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Encryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSQLParser.SYMMETRIC, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Encryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_encryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterEncryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitEncryption_mechanism(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitEncryption_mechanism(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Encryption_mechanismContext encryption_mechanism() throws RecognitionException {
		Encryption_mechanismContext _localctx = new Encryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_encryption_mechanism);
		try {
			setState(7744);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7733);
				match(CERTIFICATE);
				setState(7734);
				((Encryption_mechanismContext)_localctx).certificate_name = id();
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(7735);
				match(ASYMMETRIC);
				setState(7736);
				match(KEY);
				setState(7737);
				((Encryption_mechanismContext)_localctx).asym_key_name = id();
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(7738);
				match(SYMMETRIC);
				setState(7739);
				match(KEY);
				setState(7740);
				((Encryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(7741);
				match(PASSWORD);
				setState(7742);
				match(EQUAL);
				setState(7743);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Decryption_mechanismContext extends ParserRuleContext {
		public IdContext certificate_name;
		public IdContext asym_key_name;
		public IdContext decrypting_Key_name;
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSQLParser.SYMMETRIC, 0); }
		public Decryption_mechanismContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decryption_mechanism; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDecryption_mechanism(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDecryption_mechanism(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDecryption_mechanism(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Decryption_mechanismContext decryption_mechanism() throws RecognitionException {
		Decryption_mechanismContext _localctx = new Decryption_mechanismContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_decryption_mechanism);
		try {
			setState(7769);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CERTIFICATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7746);
				match(CERTIFICATE);
				setState(7747);
				((Decryption_mechanismContext)_localctx).certificate_name = id();
				setState(7752);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1081,_ctx) ) {
				case 1:
					{
					setState(7748);
					match(WITH);
					setState(7749);
					match(PASSWORD);
					setState(7750);
					match(EQUAL);
					setState(7751);
					match(STRING);
					}
					break;
				}
				}
				break;
			case ASYMMETRIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(7754);
				match(ASYMMETRIC);
				setState(7755);
				match(KEY);
				setState(7756);
				((Decryption_mechanismContext)_localctx).asym_key_name = id();
				setState(7761);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1082,_ctx) ) {
				case 1:
					{
					setState(7757);
					match(WITH);
					setState(7758);
					match(PASSWORD);
					setState(7759);
					match(EQUAL);
					setState(7760);
					match(STRING);
					}
					break;
				}
				}
				break;
			case SYMMETRIC:
				enterOuterAlt(_localctx, 3);
				{
				setState(7763);
				match(SYMMETRIC);
				setState(7764);
				match(KEY);
				setState(7765);
				((Decryption_mechanismContext)_localctx).decrypting_Key_name = id();
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(7766);
				match(PASSWORD);
				setState(7767);
				match(EQUAL);
				setState(7768);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_statementContext extends ParserRuleContext {
		public IdContext member_name;
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public Cursor_commonContext cursor_common() {
			return getRuleContext(Cursor_commonContext.class,0);
		}
		public Set_specialContext set_special() {
			return getRuleContext(Set_specialContext.class,0);
		}
		public Set_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSet_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSet_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSet_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_statementContext set_statement() throws RecognitionException {
		Set_statementContext _localctx = new Set_statementContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_set_statement);
		int _la;
		try {
			setState(7789);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1085,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7771);
				match(SET);
				setState(7772);
				match(LOCAL_ID);
				setState(7775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(7773);
					match(DOT);
					setState(7774);
					((Set_statementContext)_localctx).member_name = id();
					}
				}

				setState(7777);
				match(EQUAL);
				setState(7778);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7779);
				match(SET);
				setState(7780);
				match(LOCAL_ID);
				setState(7781);
				assignment_operator();
				setState(7782);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7784);
				match(SET);
				setState(7785);
				match(LOCAL_ID);
				setState(7786);
				match(EQUAL);
				setState(7787);
				cursor_common();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7788);
				set_special();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_statementContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSQLParser.BEGIN, 0); }
		public TerminalNode DISTRIBUTED() { return getToken(TSQLParser.DISTRIBUTED, 0); }
		public TerminalNode TRAN() { return getToken(TSQLParser.TRAN, 0); }
		public TerminalNode TRANSACTION() { return getToken(TSQLParser.TRANSACTION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode MARK() { return getToken(TSQLParser.MARK, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode COMMIT() { return getToken(TSQLParser.COMMIT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSQLParser.DELAYED_DURABILITY, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode WORK() { return getToken(TSQLParser.WORK, 0); }
		public TerminalNode ROLLBACK() { return getToken(TSQLParser.ROLLBACK, 0); }
		public TerminalNode SAVE() { return getToken(TSQLParser.SAVE, 0); }
		public Transaction_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTransaction_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTransaction_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTransaction_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_statementContext transaction_statement() throws RecognitionException {
		Transaction_statementContext _localctx = new Transaction_statementContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_transaction_statement);
		int _la;
		try {
			setState(7851);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1097,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7791);
				match(BEGIN);
				setState(7792);
				match(DISTRIBUTED);
				setState(7793);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7796);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1086,_ctx) ) {
				case 1:
					{
					setState(7794);
					id();
					}
					break;
				case 2:
					{
					setState(7795);
					match(LOCAL_ID);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7798);
				match(BEGIN);
				setState(7799);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1089,_ctx) ) {
				case 1:
					{
					setState(7802);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILLFACTOR:
					case PRECISION:
					case ABSENT:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AES:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_CONNECTIONS:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANONYMOUS:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPEND:
					case APPLICATION_LOG:
					case APPLICATION:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUDIT_GUID:
					case AUDIT:
					case AUTHENTICATION:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AUTO_UPDATE_STATISTICS:
					case AUTO:
					case AUTOGROW_ALL_FILES:
					case AUTOGROW_SINGLE_FILE:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case AVAILABILITY:
					case BACKUP_PRIORITY:
					case BEFORE:
					case BEGIN_DIALOG:
					case BINARY_BASE64:
					case BINDING:
					case BLOB_STORAGE:
					case BLOCK:
					case BLOCKING_HIERARCHY:
					case BLOCKSIZE:
					case BROKER_INSTANCE:
					case BROKER:
					case BUFFER:
					case BUFFERCOUNT:
					case BULK_LOGGED:
					case CACHE:
					case CALLED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CERTIFICATE:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHANGES:
					case CHANGETABLE:
					case CHAR:
					case CHARACTER:
					case CHECK_EXPIRATION:
					case CHECK_POLICY:
					case CHECKSUM:
					case CLASSIFIER_FUNCTION:
					case CLEANUP:
					case CLUSTER:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case COMPRESSION:
					case CONCAT_NULL_YIELDS_NULL:
					case CONCAT:
					case CONFIGURATION:
					case CONNECT:
					case CONTAINMENT:
					case CONTENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT_NAME:
					case CONTRACT:
					case CONTROL:
					case CONVERSATION:
					case COOKIE:
					case COPY_ONLY:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATA:
					case DATABASE_MIRRORING:
					case DATE_CORRELATION_OPTIMIZATION:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DATABASE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DEFAULT_SCHEMA:
					case DELAY:
					case DELAYED_DURABILITY:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIAGNOSTICS:
					case DIALOG:
					case DIFFERENTIAL:
					case DIRECTORY_NAME:
					case DISABLE_BROKER:
					case DISABLE:
					case DISABLED:
					case DOCUMENT:
					case DTC_SUPPORT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE_BROKER:
					case ENABLE:
					case ENABLED:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ENDPOINT:
					case ERROR_BROKER_CONVERSATIONS:
					case ERROR:
					case EVENT_RETENTION_MODE:
					case EVENT:
					case EXCLUSIVE:
					case EXECUTABLE_FILE:
					case EXECUTABLE:
					case EXPAND:
					case EXPIREDATE:
					case EXPIRY_DATE:
					case EXPLICIT:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILOVER:
					case FAILURE_CONDITION_LEVEL:
					case FAILURECONDITIONLEVEL:
					case FALSE:
					case FAN_IN:
					case FAST_FORWARD:
					case FAST:
					case FILE_SNAPSHOT:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM_ON:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case FORCE:
					case FORCED:
					case FORCESEEK:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GET:
					case GLOBAL:
					case GOVERNOR:
					case GROUP_MAX_REQUESTS:
					case HADR:
					case HASH:
					case HASHED:
					case HEALTH_CHECK_TIMEOUT:
					case HEALTHCHECKTIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IIF:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCLUDE:
					case INCREMENT:
					case INCREMENTAL:
					case INFINITE:
					case INIT:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSTEAD:
					case IO:
					case IP:
					case ISOLATION:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KERBEROS:
					case KEY_PATH:
					case KEY_SOURCE:
					case KEY_STORE_PROVIDER_NAME:
					case KEYS:
					case KEYSET:
					case LANGUAGE:
					case LAST:
					case LEVEL:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LIST:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LISTENER_URL:
					case LISTENER:
					case LOB_COMPACTION:
					case LOCAL_SERVICE_NAME:
					case LOCAL:
					case LOCATION:
					case LOCK_ESCALATION:
					case LOCK:
					case LOG:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MASTER:
					case MATCHED:
					case MATERIALIZED:
					case MAX_CPU_PERCENT:
					case MAX_DISPATCH_LATENCY:
					case MAX_DOP:
					case MAX_EVENT_SIZE:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_MEMORY:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAX_SIZE:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MAXTRANSFER:
					case MAXVALUE:
					case MB:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEDIUM:
					case MEMBER:
					case MEMORY_OPTIMIZED_DATA:
					case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
					case MEMORY_OPTIMIZED:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARD_SIZE:
					case MESSAGE_FORWARDING:
					case MESSAGE:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MINVALUE:
					case MIRROR_ADDRESS:
					case MIRROR:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case MUST_CHANGE:
					case NAME:
					case NCHAR:
					case NEGOTIATE:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEWNAME:
					case NEXT:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NO:
					case NODES:
					case NOEXPAND:
					case NOFORMAT:
					case NOINIT:
					case NON_TRANSACTED_ACCESS:
					case NONE:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOREWIND:
					case NOSKIP:
					case NOTIFICATION:
					case NOUNLOAD:
					case NOWAIT:
					case NTLM:
					case NUMANODE:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPENJSON:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARSE:
					case PARTIAL:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PASSWORD:
					case PATH:
					case PAUSE:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERMISSION_SET:
					case PERSIST_SAMPLE_PERSENT:
					case PERSISTED:
					case PERSISTENT_LOG_BUFFER:
					case PLATFORM:
					case POISON_MESSAGE_HANDLING:
					case POLICY:
					case POOL:
					case POPULATION:
					case PORT:
					case PRECEDING:
					case PREDICATE:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY_LEVEL:
					case PRIORITY:
					case PRIVATE_KEY:
					case PRIVATE:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROCESS:
					case PROFILE:
					case PROPERTY_DESCRIPTION:
					case PROPERTY_INT_ID:
					case PROPERTY_SET_GUID:
					case PROPERTY:
					case PROVIDER_KEY_NAME:
					case PROVIDER:
					case QUERYTRACEON:
					case QUEUE_DELAY:
					case QUEUE:
					case QUOTED_IDENTIFIER:
					case R_LETTER:
					case RANGE:
					case RAW:
					case RC2:
					case RC4_128:
					case RC4:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY_ROUTING_LIST:
					case READ_ONLY:
					case READ_WRITE_FILEGROUPS:
					case READ_WRITE:
					case READWRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case REGENERATE:
					case RELATED_CONVERSATION_GROUP:
					case RELATED_CONVERSATION:
					case RELATIVE:
					case REMOTE_SERVICE_NAME:
					case REMOTE:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case REQUIRED:
					case RESAMPLE:
					case RESERVE_DISK_SPACE:
					case RESET:
					case RESOURCE_MANAGER_LOCATION:
					case RESOURCE:
					case RESTART:
					case RESTRICTED_USER:
					case RESULT:
					case RESUME:
					case RETAINDAYS:
					case RETENTION:
					case RETURNS:
					case REWIND:
					case ROBUST:
					case ROLE:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROWGUID:
					case ROWS:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case RSA_512:
					case SAFE:
					case SAFETY:
					case SAMPLE:
					case SCHEDULER:
					case SCHEMABINDING:
					case SCHEME:
					case SCOPED:
					case SCROLL_LOCKS:
					case SCROLL:
					case SEARCH:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDARY:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SECURITY:
					case SEEDING_MODE:
					case SELECTIVE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SERVER:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SERVICE:
					case SESSION_TIMEOUT:
					case SESSION:
					case SETERROR:
					case SETS:
					case SHARE:
					case SHOWPLAN:
					case SID:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SINGLETON:
					case SIZE:
					case SKIP_KEYWORD:
					case SNAPSHOT:
					case SOFTNUMA:
					case SOURCE:
					case SPARSE:
					case SPATIAL_WINDOW_MAX_CELLS:
					case SPECIFICATION:
					case SPLIT:
					case SQL:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STANDBY:
					case START_DATE:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STATE:
					case STATIC:
					case STATISTICAL_SEMANTICS:
					case STATS:
					case STATUS:
					case STOP_ON_ERROR:
					case STOP:
					case STOPLIST:
					case STOPPED:
					case STRING_AGG:
					case SUBJECT:
					case SUPPORTED:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TAPE:
					case TARGET_RECOVERY_TIME:
					case TARGET:
					case TB:
					case TCP:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TORN_PAGE_DETECTION:
					case TRACK_CAUSALITY:
					case TRACK_COLUMNS_UPDATED:
					case TRANSFER:
					case TRANSFORM_NOISE_WORDS:
					case TRIM:
					case TRIPLE_DES_3KEY:
					case TRIPLE_DES:
					case TRUE:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE_WARNING:
					case TYPE:
					case UNBOUNDED:
					case UNCHECKED:
					case UNCOMMITTED:
					case UNDEFINED:
					case UNKNOWN:
					case UNLIMITED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VERBOSELOGGING:
					case VERSION:
					case VIEW_METADATA:
					case VIEWS:
					case VISIBILITY:
					case WAIT:
					case WELL_FORMED_XML:
					case WINDOWS:
					case WITHOUT_ARRAY_WRAPPER:
					case WITHOUT:
					case WITNESS:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XQUERY:
					case XSINIL:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(7800);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(7801);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7807);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1088,_ctx) ) {
					case 1:
						{
						setState(7804);
						match(WITH);
						setState(7805);
						match(MARK);
						setState(7806);
						match(STRING);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7811);
				match(COMMIT);
				setState(7812);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7825);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1092,_ctx) ) {
				case 1:
					{
					setState(7815);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case FILLFACTOR:
					case PRECISION:
					case ABSENT:
					case ABSOLUTE:
					case ACCENT_SENSITIVITY:
					case ACTION:
					case ACTIVATION:
					case ACTIVE:
					case ADDRESS:
					case AES_128:
					case AES_192:
					case AES_256:
					case AES:
					case AFFINITY:
					case AFTER:
					case AGGREGATE:
					case ALGORITHM:
					case ALLOW_CONNECTIONS:
					case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
					case ALLOW_MULTIPLE_EVENT_LOSS:
					case ALLOW_SINGLE_EVENT_LOSS:
					case ALLOW_SNAPSHOT_ISOLATION:
					case ALLOWED:
					case ANONYMOUS:
					case ANSI_NULL_DEFAULT:
					case ANSI_NULLS:
					case ANSI_PADDING:
					case ANSI_WARNINGS:
					case APPEND:
					case APPLICATION_LOG:
					case APPLICATION:
					case APPLY:
					case ARITHABORT:
					case ASSEMBLY:
					case ASYMMETRIC:
					case ASYNCHRONOUS_COMMIT:
					case AUDIT_GUID:
					case AUDIT:
					case AUTHENTICATION:
					case AUTO_CLEANUP:
					case AUTO_CLOSE:
					case AUTO_CREATE_STATISTICS:
					case AUTO_SHRINK:
					case AUTO_UPDATE_STATISTICS_ASYNC:
					case AUTO_UPDATE_STATISTICS:
					case AUTO:
					case AUTOGROW_ALL_FILES:
					case AUTOGROW_SINGLE_FILE:
					case AUTOMATED_BACKUP_PREFERENCE:
					case AUTOMATIC:
					case AVAILABILITY_MODE:
					case AVAILABILITY:
					case BACKUP_PRIORITY:
					case BEFORE:
					case BEGIN_DIALOG:
					case BINARY_BASE64:
					case BINDING:
					case BLOB_STORAGE:
					case BLOCK:
					case BLOCKING_HIERARCHY:
					case BLOCKSIZE:
					case BROKER_INSTANCE:
					case BROKER:
					case BUFFER:
					case BUFFERCOUNT:
					case BULK_LOGGED:
					case CACHE:
					case CALLED:
					case CALLER:
					case CAP_CPU_PERCENT:
					case CAST:
					case CATALOG:
					case CATCH:
					case CERTIFICATE:
					case CHANGE_RETENTION:
					case CHANGE_TRACKING:
					case CHANGES:
					case CHANGETABLE:
					case CHAR:
					case CHARACTER:
					case CHECK_EXPIRATION:
					case CHECK_POLICY:
					case CHECKSUM:
					case CLASSIFIER_FUNCTION:
					case CLEANUP:
					case CLUSTER:
					case COLLECTION:
					case COLUMN_MASTER_KEY:
					case COMMITTED:
					case COMPATIBILITY_LEVEL:
					case COMPRESSION:
					case CONCAT_NULL_YIELDS_NULL:
					case CONCAT:
					case CONFIGURATION:
					case CONNECT:
					case CONTAINMENT:
					case CONTENT:
					case CONTEXT:
					case CONTINUE_AFTER_ERROR:
					case CONTRACT_NAME:
					case CONTRACT:
					case CONTROL:
					case CONVERSATION:
					case COOKIE:
					case COPY_ONLY:
					case COUNTER:
					case CPU:
					case CREATE_NEW:
					case CREATION_DISPOSITION:
					case CREDENTIAL:
					case CRYPTOGRAPHIC:
					case CURSOR_CLOSE_ON_COMMIT:
					case CURSOR_DEFAULT:
					case CYCLE:
					case DATA_COMPRESSION:
					case DATA_SOURCE:
					case DATA:
					case DATABASE_MIRRORING:
					case DATE_CORRELATION_OPTIMIZATION:
					case DAYS:
					case DB_CHAINING:
					case DB_FAILOVER:
					case DECRYPTION:
					case DEFAULT_DATABASE:
					case DEFAULT_FULLTEXT_LANGUAGE:
					case DEFAULT_LANGUAGE:
					case DEFAULT_SCHEMA:
					case DELAY:
					case DELAYED_DURABILITY:
					case DEPENDENTS:
					case DES:
					case DESCRIPTION:
					case DESX:
					case DHCP:
					case DIAGNOSTICS:
					case DIALOG:
					case DIFFERENTIAL:
					case DIRECTORY_NAME:
					case DISABLE_BROKER:
					case DISABLE:
					case DISABLED:
					case DOCUMENT:
					case DTC_SUPPORT:
					case DYNAMIC:
					case ELEMENTS:
					case EMERGENCY:
					case EMPTY:
					case ENABLE_BROKER:
					case ENABLE:
					case ENABLED:
					case ENCRYPTED_VALUE:
					case ENCRYPTION:
					case ENDPOINT_URL:
					case ENDPOINT:
					case ERROR_BROKER_CONVERSATIONS:
					case ERROR:
					case EVENT_RETENTION_MODE:
					case EVENT:
					case EXCLUSIVE:
					case EXECUTABLE_FILE:
					case EXECUTABLE:
					case EXPAND:
					case EXPIREDATE:
					case EXPIRY_DATE:
					case EXPLICIT:
					case EXTENSION:
					case EXTERNAL_ACCESS:
					case FAIL_OPERATION:
					case FAILOVER_MODE:
					case FAILOVER:
					case FAILURE_CONDITION_LEVEL:
					case FAILURECONDITIONLEVEL:
					case FALSE:
					case FAN_IN:
					case FAST_FORWARD:
					case FAST:
					case FILE_SNAPSHOT:
					case FILEGROUP:
					case FILEGROWTH:
					case FILENAME:
					case FILEPATH:
					case FILESTREAM_ON:
					case FILESTREAM:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE_FAILOVER_ALLOW_DATA_LOSS:
					case FORCE_SERVICE_ALLOW_DATA_LOSS:
					case FORCE:
					case FORCED:
					case FORCESEEK:
					case FORMAT:
					case FORWARD_ONLY:
					case FULLSCAN:
					case FULLTEXT:
					case GB:
					case GET:
					case GLOBAL:
					case GOVERNOR:
					case GROUP_MAX_REQUESTS:
					case HADR:
					case HASH:
					case HASHED:
					case HEALTH_CHECK_TIMEOUT:
					case HEALTHCHECKTIMEOUT:
					case HIGH:
					case HONOR_BROKER_PRIORITY:
					case HOURS:
					case IDENTITY_VALUE:
					case IIF:
					case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
					case IMMEDIATE:
					case IMPERSONATE:
					case IMPORTANCE:
					case INCLUDE_NULL_VALUES:
					case INCLUDE:
					case INCREMENT:
					case INCREMENTAL:
					case INFINITE:
					case INIT:
					case INITIATOR:
					case INPUT:
					case INSENSITIVE:
					case INSTEAD:
					case IO:
					case IP:
					case ISOLATION:
					case JSON:
					case KB:
					case KEEP:
					case KEEPFIXED:
					case KERBEROS:
					case KEY_PATH:
					case KEY_SOURCE:
					case KEY_STORE_PROVIDER_NAME:
					case KEYS:
					case KEYSET:
					case LANGUAGE:
					case LAST:
					case LEVEL:
					case LIBRARY:
					case LIFETIME:
					case LINUX:
					case LIST:
					case LISTENER_IP:
					case LISTENER_PORT:
					case LISTENER_URL:
					case LISTENER:
					case LOB_COMPACTION:
					case LOCAL_SERVICE_NAME:
					case LOCAL:
					case LOCATION:
					case LOCK_ESCALATION:
					case LOCK:
					case LOG:
					case LOGIN:
					case LOOP:
					case LOW:
					case MANUAL:
					case MARK:
					case MASTER:
					case MATCHED:
					case MATERIALIZED:
					case MAX_CPU_PERCENT:
					case MAX_DISPATCH_LATENCY:
					case MAX_DOP:
					case MAX_EVENT_SIZE:
					case MAX_FILES:
					case MAX_IOPS_PER_VOLUME:
					case MAX_MEMORY_PERCENT:
					case MAX_MEMORY:
					case MAX_OUTSTANDING_IO_PER_VOLUME:
					case MAX_PROCESSES:
					case MAX_QUEUE_READERS:
					case MAX_ROLLOVER_FILES:
					case MAX_SIZE:
					case MAX:
					case MAXDOP:
					case MAXRECURSION:
					case MAXSIZE:
					case MAXTRANSFER:
					case MAXVALUE:
					case MB:
					case MEDIADESCRIPTION:
					case MEDIANAME:
					case MEDIUM:
					case MEMBER:
					case MEMORY_OPTIMIZED_DATA:
					case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
					case MEMORY_OPTIMIZED:
					case MEMORY_PARTITION_MODE:
					case MESSAGE_FORWARD_SIZE:
					case MESSAGE_FORWARDING:
					case MESSAGE:
					case MIN_ACTIVE_ROWVERSION:
					case MIN_CPU_PERCENT:
					case MIN_IOPS_PER_VOLUME:
					case MIN_MEMORY_PERCENT:
					case MINUTES:
					case MINVALUE:
					case MIRROR_ADDRESS:
					case MIRROR:
					case MIXED_PAGE_ALLOCATION:
					case MODE:
					case MODIFY:
					case MOVE:
					case MULTI_USER:
					case MUST_CHANGE:
					case NAME:
					case NCHAR:
					case NEGOTIATE:
					case NESTED_TRIGGERS:
					case NEW_ACCOUNT:
					case NEW_BROKER:
					case NEW_PASSWORD:
					case NEWNAME:
					case NEXT:
					case NO_CHECKSUM:
					case NO_COMPRESSION:
					case NO_EVENT_LOSS:
					case NO_TRUNCATE:
					case NO_WAIT:
					case NO:
					case NODES:
					case NOEXPAND:
					case NOFORMAT:
					case NOINIT:
					case NON_TRANSACTED_ACCESS:
					case NONE:
					case NORECOMPUTE:
					case NORECOVERY:
					case NOREWIND:
					case NOSKIP:
					case NOTIFICATION:
					case NOUNLOAD:
					case NOWAIT:
					case NTLM:
					case NUMANODE:
					case NUMERIC_ROUNDABORT:
					case OBJECT:
					case OFFLINE:
					case OFFSET:
					case OLD_ACCOUNT:
					case OLD_PASSWORD:
					case ON_FAILURE:
					case ONLINE:
					case ONLY:
					case OPEN_EXISTING:
					case OPENJSON:
					case OPTIMISTIC:
					case OPTIMIZE:
					case OUT:
					case OUTPUT:
					case OWNER:
					case PAGE_VERIFY:
					case PARAMETERIZATION:
					case PARSE:
					case PARTIAL:
					case PARTITION:
					case PARTITIONS:
					case PARTNER:
					case PASSWORD:
					case PATH:
					case PAUSE:
					case PER_CPU:
					case PER_DB:
					case PER_NODE:
					case PERMISSION_SET:
					case PERSIST_SAMPLE_PERSENT:
					case PERSISTED:
					case PERSISTENT_LOG_BUFFER:
					case PLATFORM:
					case POISON_MESSAGE_HANDLING:
					case POLICY:
					case POOL:
					case POPULATION:
					case PORT:
					case PRECEDING:
					case PREDICATE:
					case PRIMARY_ROLE:
					case PRIOR:
					case PRIORITY_LEVEL:
					case PRIORITY:
					case PRIVATE_KEY:
					case PRIVATE:
					case PRIVILEGES:
					case PROCEDURE_NAME:
					case PROCESS:
					case PROFILE:
					case PROPERTY_DESCRIPTION:
					case PROPERTY_INT_ID:
					case PROPERTY_SET_GUID:
					case PROPERTY:
					case PROVIDER_KEY_NAME:
					case PROVIDER:
					case QUERYTRACEON:
					case QUEUE_DELAY:
					case QUEUE:
					case QUOTED_IDENTIFIER:
					case R_LETTER:
					case RANGE:
					case RAW:
					case RC2:
					case RC4_128:
					case RC4:
					case READ_COMMITTED_SNAPSHOT:
					case READ_ONLY_ROUTING_LIST:
					case READ_ONLY:
					case READ_WRITE_FILEGROUPS:
					case READ_WRITE:
					case READWRITE:
					case READONLY:
					case REBUILD:
					case RECEIVE:
					case RECOMPILE:
					case RECOVERY:
					case RECURSIVE_TRIGGERS:
					case REGENERATE:
					case RELATED_CONVERSATION_GROUP:
					case RELATED_CONVERSATION:
					case RELATIVE:
					case REMOTE_SERVICE_NAME:
					case REMOTE:
					case REMOVE:
					case REORGANIZE:
					case REPEATABLE:
					case REPLICA:
					case REQUEST_MAX_CPU_TIME_SEC:
					case REQUEST_MAX_MEMORY_GRANT_PERCENT:
					case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
					case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
					case REQUIRED:
					case RESAMPLE:
					case RESERVE_DISK_SPACE:
					case RESET:
					case RESOURCE_MANAGER_LOCATION:
					case RESOURCE:
					case RESTART:
					case RESTRICTED_USER:
					case RESULT:
					case RESUME:
					case RETAINDAYS:
					case RETENTION:
					case RETURNS:
					case REWIND:
					case ROBUST:
					case ROLE:
					case ROOT:
					case ROUTE:
					case ROW:
					case ROWGUID:
					case ROWS:
					case RSA_1024:
					case RSA_2048:
					case RSA_3072:
					case RSA_4096:
					case RSA_512:
					case SAFE:
					case SAFETY:
					case SAMPLE:
					case SCHEDULER:
					case SCHEMABINDING:
					case SCHEME:
					case SCOPED:
					case SCROLL_LOCKS:
					case SCROLL:
					case SEARCH:
					case SECONDARY_ONLY:
					case SECONDARY_ROLE:
					case SECONDARY:
					case SECONDS:
					case SECRET:
					case SECURITY_LOG:
					case SECURITY:
					case SEEDING_MODE:
					case SELECTIVE:
					case SELF:
					case SEMI_SENSITIVE:
					case SEND:
					case SENT:
					case SEQUENCE:
					case SERIALIZABLE:
					case SERVER:
					case SERVICE_BROKER:
					case SERVICE_NAME:
					case SERVICE:
					case SESSION_TIMEOUT:
					case SESSION:
					case SETERROR:
					case SETS:
					case SHARE:
					case SHOWPLAN:
					case SID:
					case SIGNATURE:
					case SIMPLE:
					case SINGLE_USER:
					case SINGLETON:
					case SIZE:
					case SKIP_KEYWORD:
					case SNAPSHOT:
					case SOFTNUMA:
					case SOURCE:
					case SPARSE:
					case SPATIAL_WINDOW_MAX_CELLS:
					case SPECIFICATION:
					case SPLIT:
					case SQL:
					case SQLDUMPERFLAGS:
					case SQLDUMPERPATH:
					case SQLDUMPERTIMEOUT:
					case STANDBY:
					case START_DATE:
					case START:
					case STARTED:
					case STARTUP_STATE:
					case STATE:
					case STATIC:
					case STATISTICAL_SEMANTICS:
					case STATS:
					case STATUS:
					case STOP_ON_ERROR:
					case STOP:
					case STOPLIST:
					case STOPPED:
					case STRING_AGG:
					case SUBJECT:
					case SUPPORTED:
					case SUSPEND:
					case SYMMETRIC:
					case SYNCHRONOUS_COMMIT:
					case SYNONYM:
					case SYSTEM:
					case TAKE:
					case TAPE:
					case TARGET_RECOVERY_TIME:
					case TARGET:
					case TB:
					case TCP:
					case TEXTIMAGE_ON:
					case THROW:
					case TIES:
					case TIME:
					case TIMEOUT:
					case TIMER:
					case TORN_PAGE_DETECTION:
					case TRACK_CAUSALITY:
					case TRACK_COLUMNS_UPDATED:
					case TRANSFER:
					case TRANSFORM_NOISE_WORDS:
					case TRIM:
					case TRIPLE_DES_3KEY:
					case TRIPLE_DES:
					case TRUE:
					case TRUSTWORTHY:
					case TRY:
					case TSQL:
					case TWO_DIGIT_YEAR_CUTOFF:
					case TYPE_WARNING:
					case TYPE:
					case UNBOUNDED:
					case UNCHECKED:
					case UNCOMMITTED:
					case UNDEFINED:
					case UNKNOWN:
					case UNLIMITED:
					case UNLOCK:
					case UNSAFE:
					case URL:
					case USED:
					case USING:
					case VALID_XML:
					case VALIDATION:
					case VALUE:
					case VERBOSELOGGING:
					case VERSION:
					case VIEW_METADATA:
					case VIEWS:
					case VISIBILITY:
					case WAIT:
					case WELL_FORMED_XML:
					case WINDOWS:
					case WITHOUT_ARRAY_WRAPPER:
					case WITHOUT:
					case WITNESS:
					case WORK:
					case WORKLOAD:
					case XML:
					case XMLDATA:
					case XMLNAMESPACES:
					case XMLSCHEMA:
					case XQUERY:
					case XSINIL:
					case DOUBLE_QUOTE_ID:
					case SQUARE_BRACKET_ID:
					case ID:
						{
						setState(7813);
						id();
						}
						break;
					case LOCAL_ID:
						{
						setState(7814);
						match(LOCAL_ID);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7823);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1091,_ctx) ) {
					case 1:
						{
						setState(7817);
						match(WITH);
						setState(7818);
						match(LR_BRACKET);
						setState(7819);
						match(DELAYED_DURABILITY);
						setState(7820);
						match(EQUAL);
						setState(7821);
						_la = _input.LA(1);
						if ( !(_la==OFF || _la==ON) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7822);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7827);
				match(COMMIT);
				setState(7829);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK) {
					{
					setState(7828);
					match(WORK);
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7831);
				match(COMMIT);
				setState(7832);
				id();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7833);
				match(ROLLBACK);
				setState(7834);
				id();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7835);
				match(ROLLBACK);
				setState(7836);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7839);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1094,_ctx) ) {
				case 1:
					{
					setState(7837);
					id();
					}
					break;
				case 2:
					{
					setState(7838);
					match(LOCAL_ID);
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7841);
				match(ROLLBACK);
				setState(7843);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WORK) {
					{
					setState(7842);
					match(WORK);
					}
				}

				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7845);
				match(SAVE);
				setState(7846);
				_la = _input.LA(1);
				if ( !(_la==TRAN || _la==TRANSACTION) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7849);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1096,_ctx) ) {
				case 1:
					{
					setState(7847);
					id();
					}
					break;
				case 2:
					{
					setState(7848);
					match(LOCAL_ID);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Go_statementContext extends ParserRuleContext {
		public TerminalNode GO() { return getToken(TSQLParser.GO, 0); }
		public Go_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_go_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterGo_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitGo_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitGo_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Go_statementContext go_statement() throws RecognitionException {
		Go_statementContext _localctx = new Go_statementContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_go_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7853);
			match(GO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Use_statementContext extends ParserRuleContext {
		public IdContext database;
		public TerminalNode USE() { return getToken(TSQLParser.USE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Use_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_use_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterUse_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitUse_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitUse_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Use_statementContext use_statement() throws RecognitionException {
		Use_statementContext _localctx = new Use_statementContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_use_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7855);
			match(USE);
			setState(7856);
			((Use_statementContext)_localctx).database = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Setuser_statementContext extends ParserRuleContext {
		public Token user;
		public TerminalNode SETUSER() { return getToken(TSQLParser.SETUSER, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Setuser_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setuser_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSetuser_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSetuser_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSetuser_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Setuser_statementContext setuser_statement() throws RecognitionException {
		Setuser_statementContext _localctx = new Setuser_statementContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_setuser_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7858);
			match(SETUSER);
			setState(7860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(7859);
				((Setuser_statementContext)_localctx).user = match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dbcc_clauseContext extends ParserRuleContext {
		public Simple_idContext name;
		public TerminalNode DBCC() { return getToken(TSQLParser.DBCC, 0); }
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public Names_referencesContext names_references() {
			return getRuleContext(Names_referencesContext.class,0);
		}
		public Dbcc_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dbcc_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDbcc_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDbcc_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDbcc_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dbcc_clauseContext dbcc_clause() throws RecognitionException {
		Dbcc_clauseContext _localctx = new Dbcc_clauseContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_dbcc_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7862);
			match(DBCC);
			setState(7863);
			((Dbcc_clauseContext)_localctx).name = simple_id();
			setState(7868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1099,_ctx) ) {
			case 1:
				{
				setState(7864);
				match(LR_BRACKET);
				setState(7865);
				expression_list();
				setState(7866);
				match(RR_BRACKET);
				}
				break;
			}
			setState(7872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1100,_ctx) ) {
			case 1:
				{
				setState(7870);
				match(WITH);
				setState(7871);
				names_references();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_clauseContext extends ParserRuleContext {
		public Token clause;
		public TerminalNode EXECUTE() { return getToken(TSQLParser.EXECUTE, 0); }
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public TerminalNode CALLER() { return getToken(TSQLParser.CALLER, 0); }
		public TerminalNode SELF() { return getToken(TSQLParser.SELF, 0); }
		public TerminalNode OWNER() { return getToken(TSQLParser.OWNER, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Execute_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExecute_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExecute_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExecute_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_clauseContext execute_clause() throws RecognitionException {
		Execute_clauseContext _localctx = new Execute_clauseContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_execute_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7874);
			match(EXECUTE);
			setState(7875);
			match(AS);
			setState(7876);
			((Execute_clauseContext)_localctx).clause = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==CALLER || _la==OWNER || _la==SELF || _la==STRING) ) {
				((Execute_clauseContext)_localctx).clause = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_localContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Declare_localContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_local; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDeclare_local(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDeclare_local(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDeclare_local(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_localContext declare_local() throws RecognitionException {
		Declare_localContext _localctx = new Declare_localContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_declare_local);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7878);
			match(LOCAL_ID);
			setState(7880);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(7879);
				match(AS);
				}
			}

			setState(7882);
			data_type();
			setState(7885);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(7883);
				match(EQUAL);
				setState(7884);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_type_definitionContext extends ParserRuleContext {
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Xml_schema_collectionContext xml_schema_collection() {
			return getRuleContext(Xml_schema_collectionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode CONTENT() { return getToken(TSQLParser.CONTENT, 0); }
		public TerminalNode DOCUMENT() { return getToken(TSQLParser.DOCUMENT, 0); }
		public Xml_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterXml_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitXml_type_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitXml_type_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_type_definitionContext xml_type_definition() throws RecognitionException {
		Xml_type_definitionContext _localctx = new Xml_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_xml_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7887);
			match(XML);
			setState(7888);
			match(LR_BRACKET);
			setState(7890);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTENT || _la==DOCUMENT) {
				{
				setState(7889);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(7892);
			xml_schema_collection();
			setState(7893);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_schema_collectionContext extends ParserRuleContext {
		public List<TerminalNode> ID() { return getTokens(TSQLParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(TSQLParser.ID, i);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public Xml_schema_collectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_schema_collection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterXml_schema_collection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitXml_schema_collection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitXml_schema_collection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_schema_collectionContext xml_schema_collection() throws RecognitionException {
		Xml_schema_collectionContext _localctx = new Xml_schema_collectionContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_xml_schema_collection);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7895);
			match(ID);
			setState(7896);
			match(DOT);
			setState(7897);
			match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintsContext extends ParserRuleContext {
		public List<Column_def_table_constraintContext> column_def_table_constraint() {
			return getRuleContexts(Column_def_table_constraintContext.class);
		}
		public Column_def_table_constraintContext column_def_table_constraint(int i) {
			return getRuleContext(Column_def_table_constraintContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Column_def_table_constraintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumn_def_table_constraints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumn_def_table_constraints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumn_def_table_constraints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintsContext column_def_table_constraints() throws RecognitionException {
		Column_def_table_constraintsContext _localctx = new Column_def_table_constraintsContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_column_def_table_constraints);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7899);
			column_def_table_constraint();
			setState(7904);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1104,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7900);
					match(COMMA);
					setState(7901);
					column_def_table_constraint();
					}
					} 
				}
				setState(7906);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1104,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_def_table_constraintContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Column_optionContext> column_option() {
			return getRuleContexts(Column_optionContext.class);
		}
		public Column_optionContext column_option(int i) {
			return getRuleContext(Column_optionContext.class,i);
		}
		public TerminalNode MATERIALIZED() { return getToken(TSQLParser.MATERIALIZED, 0); }
		public TerminalNode NOT() { return getToken(TSQLParser.NOT, 0); }
		public Table_constraintContext table_constraint() {
			return getRuleContext(Table_constraintContext.class,0);
		}
		public Table_indexContext table_index() {
			return getRuleContext(Table_indexContext.class,0);
		}
		public Column_def_table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_def_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumn_def_table_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumn_def_table_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumn_def_table_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_def_table_constraintContext column_def_table_constraint() throws RecognitionException {
		Column_def_table_constraintContext _localctx = new Column_def_table_constraintContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_column_def_table_constraint);
		try {
			int _alt;
			setState(7926);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(7907);
				id();
				setState(7911);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURSOR:
				case DOUBLE:
				case FILLFACTOR:
				case NATIONAL:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(7908);
					data_type();
					}
					break;
				case AS:
					{
					setState(7909);
					match(AS);
					setState(7910);
					expression(0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7916);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1106,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(7913);
						column_option();
						}
						} 
					}
					setState(7918);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1106,_ctx);
				}
				setState(7922);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MATERIALIZED:
					{
					setState(7919);
					match(MATERIALIZED);
					}
					break;
				case NOT:
					{
					setState(7920);
					match(NOT);
					setState(7921);
					match(MATERIALIZED);
					}
					break;
				case EOF:
				case ADD:
				case ALTER:
				case BACKUP:
				case BEGIN:
				case BREAK:
				case CLOSE:
				case COMMIT:
				case CONTINUE:
				case CREATE:
				case DBCC:
				case DEALLOCATE:
				case DECLARE:
				case DELETE:
				case DENY:
				case DROP:
				case ELSE:
				case END:
				case EXECUTE:
				case FETCH:
				case GO:
				case GRANT:
				case IF:
				case INSERT:
				case MERGE:
				case OPEN:
				case PRINT:
				case RAISERROR:
				case RETURN:
				case REVERT:
				case REVOKE:
				case ROLLBACK:
				case SAVE:
				case SELECT:
				case SET:
				case SETUSER:
				case TRUNCATE:
				case UPDATE:
				case USE:
				case VALUES:
				case WAITFOR:
				case WHILE:
				case WITH:
				case DISABLE:
				case ENABLE:
				case GET:
				case LOCK:
				case MOVE:
				case RECEIVE:
				case SEND:
				case THROW:
				case LR_BRACKET:
				case RR_BRACKET:
				case COMMA:
				case SEMI:
					break;
				default:
					break;
				}
				}
				break;
			case CHECK:
			case CONSTRAINT:
			case DEFAULT:
			case FOREIGN:
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7924);
				table_constraint();
				}
				break;
			case INDEX:
				enterOuterAlt(_localctx, 3);
				{
				setState(7925);
				table_index();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexContext extends ParserRuleContext {
		public IdContext index_name;
		public TerminalNode INDEX() { return getToken(TSQLParser.INDEX, 0); }
		public Index_restContext index_rest() {
			return getRuleContext(Index_restContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public TerminalNode HASH() { return getToken(TSQLParser.HASH, 0); }
		public Table_indexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_index; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTable_index(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTable_index(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTable_index(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_indexContext table_index() throws RecognitionException {
		Table_indexContext _localctx = new Table_indexContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_table_index);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7928);
			match(INDEX);
			setState(7929);
			((Table_indexContext)_localctx).index_name = id();
			setState(7931);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CLUSTERED || _la==NONCLUSTERED) {
				{
				setState(7930);
				clustered();
				}
			}

			setState(7934);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HASH) {
				{
				setState(7933);
				match(HASH);
				}
			}

			setState(7936);
			index_rest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_definitionContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<Column_optionContext> column_option() {
			return getRuleContexts(Column_optionContext.class);
		}
		public Column_optionContext column_option(int i) {
			return getRuleContext(Column_optionContext.class,i);
		}
		public Column_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumn_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumn_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumn_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_definitionContext column_definition() throws RecognitionException {
		Column_definitionContext _localctx = new Column_definitionContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_column_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7938);
			id();
			setState(7942);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURSOR:
			case DOUBLE:
			case FILLFACTOR:
			case NATIONAL:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(7939);
				data_type();
				}
				break;
			case AS:
				{
				setState(7940);
				match(AS);
				setState(7941);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CHECK) | (1L << COLLATE) | (1L << CONSTRAINT) | (1L << DEFAULT))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (FOREIGN - 67)) | (1L << (IDENTITY - 67)) | (1L << (NOT - 67)) | (1L << (NULL - 67)) | (1L << (PRIMARY - 67)))) != 0) || ((((_la - 131)) & ~0x3f) == 0 && ((1L << (_la - 131)) & ((1L << (REFERENCES - 131)) | (1L << (ROWGUIDCOL - 131)) | (1L << (UNIQUE - 131)))) != 0) || _la==PERSISTED || _la==SPARSE) {
				{
				{
				setState(7944);
				column_option();
				}
				}
				setState(7949);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_optionContext extends ParserRuleContext {
		public IdContext collate;
		public Not_for_replicationContext not_for_rep;
		public IdContext constraint;
		public TerminalNode PERSISTED() { return getToken(TSQLParser.PERSISTED, 0); }
		public TerminalNode SPARSE() { return getToken(TSQLParser.SPARSE, 0); }
		public TerminalNode COLLATE() { return getToken(TSQLParser.COLLATE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode ROWGUIDCOL() { return getToken(TSQLParser.ROWGUIDCOL, 0); }
		public TerminalNode NULL() { return getToken(TSQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(TSQLParser.NOT, 0); }
		public TerminalNode IDENTITY() { return getToken(TSQLParser.IDENTITY, 0); }
		public Identity_valueContext identity_value() {
			return getRuleContext(Identity_valueContext.class,0);
		}
		public Not_for_replicationContext not_for_replication() {
			return getRuleContext(Not_for_replicationContext.class,0);
		}
		public Column_constraint_bodyContext column_constraint_body() {
			return getRuleContext(Column_constraint_bodyContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSQLParser.CONSTRAINT, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode VALUES() { return getToken(TSQLParser.VALUES, 0); }
		public Column_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumn_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumn_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumn_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_optionContext column_option() throws RecognitionException {
		Column_optionContext _localctx = new Column_optionContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_column_option);
		int _la;
		try {
			setState(7981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1119,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7950);
				match(PERSISTED);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7951);
				match(SPARSE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7952);
				match(COLLATE);
				setState(7953);
				((Column_optionContext)_localctx).collate = id();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7954);
				match(ROWGUIDCOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7956);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7955);
					match(NOT);
					}
				}

				setState(7958);
				match(NULL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7959);
				match(IDENTITY);
				setState(7961);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1114,_ctx) ) {
				case 1:
					{
					setState(7960);
					identity_value();
					}
					break;
				}
				setState(7964);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1115,_ctx) ) {
				case 1:
					{
					setState(7963);
					((Column_optionContext)_localctx).not_for_rep = not_for_replication();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7968);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(7966);
					match(CONSTRAINT);
					setState(7967);
					((Column_optionContext)_localctx).constraint = id();
					}
				}

				setState(7970);
				column_constraint_body();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7973);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(7971);
					match(CONSTRAINT);
					setState(7972);
					((Column_optionContext)_localctx).constraint = id();
					}
				}

				setState(7975);
				match(DEFAULT);
				setState(7976);
				expression(0);
				setState(7979);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1118,_ctx) ) {
				case 1:
					{
					setState(7977);
					match(WITH);
					setState(7978);
					match(VALUES);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Identity_valueContext extends ParserRuleContext {
		public Token seed;
		public Token increment;
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public Identity_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identity_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterIdentity_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitIdentity_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitIdentity_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Identity_valueContext identity_value() throws RecognitionException {
		Identity_valueContext _localctx = new Identity_valueContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_identity_value);
		try {
			enterOuterAlt(_localctx, 1);
			{
			{
			setState(7983);
			match(LR_BRACKET);
			setState(7984);
			((Identity_valueContext)_localctx).seed = match(DECIMAL);
			setState(7985);
			match(COMMA);
			setState(7986);
			((Identity_valueContext)_localctx).increment = match(DECIMAL);
			setState(7987);
			match(RR_BRACKET);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_constraint_bodyContext extends ParserRuleContext {
		public TerminalNode PRIMARY() { return getToken(TSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(TSQLParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public TerminalNode HASH() { return getToken(TSQLParser.HASH, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(TSQLParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Not_for_replicationContext not_for_replication() {
			return getRuleContext(Not_for_replicationContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(TSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(TSQLParser.FOREIGN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Column_constraint_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_constraint_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumn_constraint_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumn_constraint_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumn_constraint_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_constraint_bodyContext column_constraint_body() throws RecognitionException {
		Column_constraint_bodyContext _localctx = new Column_constraint_bodyContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_column_constraint_body);
		int _la;
		try {
			setState(8032);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(7992);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(7989);
					match(PRIMARY);
					setState(7990);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(7991);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(7995);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(7994);
					clustered();
					}
				}

				setState(7998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HASH) {
					{
					setState(7997);
					match(HASH);
					}
				}

				setState(8001);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1123,_ctx) ) {
				case 1:
					{
					setState(8000);
					index_options();
					}
					break;
				}
				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 2);
				{
				setState(8003);
				match(CHECK);
				setState(8005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8004);
					not_for_replication();
					}
				}

				setState(8007);
				match(LR_BRACKET);
				setState(8008);
				search_condition();
				setState(8009);
				match(RR_BRACKET);
				}
				break;
			case FOREIGN:
			case REFERENCES:
				enterOuterAlt(_localctx, 3);
				{
				setState(8013);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(8011);
					match(FOREIGN);
					setState(8012);
					match(KEY);
					}
				}

				setState(8015);
				match(REFERENCES);
				setState(8016);
				qualified_name();
				setState(8021);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1126,_ctx) ) {
				case 1:
					{
					setState(8017);
					match(LR_BRACKET);
					setState(8018);
					id();
					setState(8019);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8024);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1127,_ctx) ) {
				case 1:
					{
					setState(8023);
					on_delete();
					}
					break;
				}
				setState(8027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8026);
					on_update();
					}
				}

				setState(8030);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1129,_ctx) ) {
				case 1:
					{
					setState(8029);
					not_for_replication();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraintContext extends ParserRuleContext {
		public IdContext constraint;
		public Table_constraint_bodyContext table_constraint_body() {
			return getRuleContext(Table_constraint_bodyContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(TSQLParser.CONSTRAINT, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_constraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTable_constraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTable_constraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTable_constraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraintContext table_constraint() throws RecognitionException {
		Table_constraintContext _localctx = new Table_constraintContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_table_constraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8036);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(8034);
				match(CONSTRAINT);
				setState(8035);
				((Table_constraintContext)_localctx).constraint = id();
				}
			}

			setState(8038);
			table_constraint_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_constraint_bodyContext extends ParserRuleContext {
		public Column_name_listContext fk;
		public Column_name_listContext pk;
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public Column_name_list_with_orderContext column_name_list_with_order() {
			return getRuleContext(Column_name_list_with_orderContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode PRIMARY() { return getToken(TSQLParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(TSQLParser.KEY, 0); }
		public TerminalNode UNIQUE() { return getToken(TSQLParser.UNIQUE, 0); }
		public ClusteredContext clustered() {
			return getRuleContext(ClusteredContext.class,0);
		}
		public TerminalNode HASH() { return getToken(TSQLParser.HASH, 0); }
		public Index_optionsContext index_options() {
			return getRuleContext(Index_optionsContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode CHECK() { return getToken(TSQLParser.CHECK, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public Not_for_replicationContext not_for_replication() {
			return getRuleContext(Not_for_replicationContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(TSQLParser.FOREIGN, 0); }
		public TerminalNode REFERENCES() { return getToken(TSQLParser.REFERENCES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public List<Column_name_listContext> column_name_list() {
			return getRuleContexts(Column_name_listContext.class);
		}
		public Column_name_listContext column_name_list(int i) {
			return getRuleContext(Column_name_listContext.class,i);
		}
		public On_deleteContext on_delete() {
			return getRuleContext(On_deleteContext.class,0);
		}
		public On_updateContext on_update() {
			return getRuleContext(On_updateContext.class,0);
		}
		public Table_constraint_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_constraint_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTable_constraint_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTable_constraint_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTable_constraint_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_constraint_bodyContext table_constraint_body() throws RecognitionException {
		Table_constraint_bodyContext _localctx = new Table_constraint_bodyContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_table_constraint_body);
		int _la;
		try {
			setState(8096);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRIMARY:
			case UNIQUE:
				enterOuterAlt(_localctx, 1);
				{
				setState(8043);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case PRIMARY:
					{
					setState(8040);
					match(PRIMARY);
					setState(8041);
					match(KEY);
					}
					break;
				case UNIQUE:
					{
					setState(8042);
					match(UNIQUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8046);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLUSTERED || _la==NONCLUSTERED) {
					{
					setState(8045);
					clustered();
					}
				}

				setState(8049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HASH) {
					{
					setState(8048);
					match(HASH);
					}
				}

				setState(8051);
				match(LR_BRACKET);
				setState(8052);
				column_name_list_with_order();
				setState(8053);
				match(RR_BRACKET);
				setState(8055);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1135,_ctx) ) {
				case 1:
					{
					setState(8054);
					index_options();
					}
					break;
				}
				setState(8059);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8057);
					match(ON);
					setState(8058);
					id();
					}
				}

				}
				break;
			case CHECK:
				enterOuterAlt(_localctx, 2);
				{
				setState(8061);
				match(CHECK);
				setState(8063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8062);
					not_for_replication();
					}
				}

				setState(8065);
				match(LR_BRACKET);
				setState(8066);
				search_condition();
				setState(8067);
				match(RR_BRACKET);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 3);
				{
				setState(8069);
				match(DEFAULT);
				setState(8070);
				expression(0);
				setState(8071);
				match(FOR);
				setState(8072);
				id();
				}
				break;
			case FOREIGN:
				enterOuterAlt(_localctx, 4);
				{
				setState(8074);
				match(FOREIGN);
				setState(8075);
				match(KEY);
				setState(8076);
				match(LR_BRACKET);
				setState(8077);
				((Table_constraint_bodyContext)_localctx).fk = column_name_list();
				setState(8078);
				match(RR_BRACKET);
				setState(8079);
				match(REFERENCES);
				setState(8080);
				qualified_name();
				setState(8085);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1138,_ctx) ) {
				case 1:
					{
					setState(8081);
					match(LR_BRACKET);
					setState(8082);
					((Table_constraint_bodyContext)_localctx).pk = column_name_list();
					setState(8083);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8088);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1139,_ctx) ) {
				case 1:
					{
					setState(8087);
					on_delete();
					}
					break;
				}
				setState(8091);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON) {
					{
					setState(8090);
					on_update();
					}
				}

				setState(8094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8093);
					not_for_replication();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_deleteContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode DELETE() { return getToken(TSQLParser.DELETE, 0); }
		public TerminalNode NO() { return getToken(TSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(TSQLParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(TSQLParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public TerminalNode NULL() { return getToken(TSQLParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public On_deleteContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_delete; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOn_delete(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOn_delete(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOn_delete(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_deleteContext on_delete() throws RecognitionException {
		On_deleteContext _localctx = new On_deleteContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_on_delete);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8098);
			match(ON);
			setState(8099);
			match(DELETE);
			setState(8107);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1143,_ctx) ) {
			case 1:
				{
				setState(8100);
				match(NO);
				setState(8101);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(8102);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(8103);
				match(SET);
				setState(8104);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(8105);
				match(SET);
				setState(8106);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_updateContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(TSQLParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(TSQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(TSQLParser.ACTION, 0); }
		public TerminalNode CASCADE() { return getToken(TSQLParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public TerminalNode NULL() { return getToken(TSQLParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public On_updateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_update; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOn_update(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOn_update(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOn_update(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_updateContext on_update() throws RecognitionException {
		On_updateContext _localctx = new On_updateContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_on_update);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8109);
			match(ON);
			setState(8110);
			match(UPDATE);
			setState(8118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1144,_ctx) ) {
			case 1:
				{
				setState(8111);
				match(NO);
				setState(8112);
				match(ACTION);
				}
				break;
			case 2:
				{
				setState(8113);
				match(CASCADE);
				}
				break;
			case 3:
				{
				setState(8114);
				match(SET);
				setState(8115);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(8116);
				match(SET);
				setState(8117);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Index_optionContext> index_option() {
			return getRuleContexts(Index_optionContext.class);
		}
		public Index_optionContext index_option(int i) {
			return getRuleContext(Index_optionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Index_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterIndex_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitIndex_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitIndex_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionsContext index_options() throws RecognitionException {
		Index_optionsContext _localctx = new Index_optionsContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_index_options);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8120);
			match(WITH);
			setState(8121);
			match(LR_BRACKET);
			setState(8122);
			index_option();
			setState(8127);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8123);
				match(COMMA);
				setState(8124);
				index_option();
				}
				}
				setState(8129);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8130);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_optionContext extends ParserRuleContext {
		public Simple_idContext key;
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public Index_option_valueContext index_option_value() {
			return getRuleContext(Index_option_valueContext.class,0);
		}
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public Index_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterIndex_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitIndex_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitIndex_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_optionContext index_option() throws RecognitionException {
		Index_optionContext _localctx = new Index_optionContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_index_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8132);
			((Index_optionContext)_localctx).key = simple_id();
			setState(8133);
			match(EQUAL);
			setState(8134);
			index_option_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_option_valueContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public Index_option_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_option_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterIndex_option_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitIndex_option_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitIndex_option_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_option_valueContext index_option_value() throws RecognitionException {
		Index_option_valueContext _localctx = new Index_option_valueContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_index_option_value);
		try {
			setState(8139);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(8136);
				simple_id();
				}
				break;
			case OFF:
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(8137);
				on_off();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(8138);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_commonContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(TSQLParser.CURSOR, 0); }
		public List<TerminalNode> FOR() { return getTokens(TSQLParser.FOR); }
		public TerminalNode FOR(int i) {
			return getToken(TSQLParser.FOR, i);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<Declare_cursor_partialContext> declare_cursor_partial() {
			return getRuleContexts(Declare_cursor_partialContext.class);
		}
		public Declare_cursor_partialContext declare_cursor_partial(int i) {
			return getRuleContext(Declare_cursor_partialContext.class,i);
		}
		public TerminalNode READ() { return getToken(TSQLParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(TSQLParser.ONLY, 0); }
		public TerminalNode UPDATE() { return getToken(TSQLParser.UPDATE, 0); }
		public TerminalNode OF() { return getToken(TSQLParser.OF, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Cursor_commonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_common; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCursor_common(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCursor_common(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCursor_common(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_commonContext cursor_common() throws RecognitionException {
		Cursor_commonContext _localctx = new Cursor_commonContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_cursor_common);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8141);
			match(CURSOR);
			setState(8145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (DYNAMIC - 335)) | (1L << (FAST_FORWARD - 335)) | (1L << (FORWARD_ONLY - 335)) | (1L << (GLOBAL - 335)))) != 0) || _la==KEYSET || _la==LOCAL || _la==OPTIMISTIC || _la==READ_ONLY || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (SCROLL_LOCKS - 656)) | (1L << (SCROLL - 656)) | (1L << (STATIC - 656)))) != 0) || _la==TYPE_WARNING) {
				{
				{
				setState(8142);
				declare_cursor_partial();
				}
				}
				setState(8147);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8148);
			match(FOR);
			setState(8149);
			select_statement();
			setState(8160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(8150);
				match(FOR);
				setState(8158);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case READ:
					{
					setState(8151);
					match(READ);
					setState(8152);
					match(ONLY);
					}
					break;
				case UPDATE:
					{
					setState(8153);
					match(UPDATE);
					setState(8156);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OF) {
						{
						setState(8154);
						match(OF);
						setState(8155);
						column_name_list();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_cursor_partialContext extends ParserRuleContext {
		public TerminalNode LOCAL() { return getToken(TSQLParser.LOCAL, 0); }
		public TerminalNode GLOBAL() { return getToken(TSQLParser.GLOBAL, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(TSQLParser.FORWARD_ONLY, 0); }
		public TerminalNode SCROLL() { return getToken(TSQLParser.SCROLL, 0); }
		public TerminalNode STATIC() { return getToken(TSQLParser.STATIC, 0); }
		public TerminalNode KEYSET() { return getToken(TSQLParser.KEYSET, 0); }
		public TerminalNode DYNAMIC() { return getToken(TSQLParser.DYNAMIC, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(TSQLParser.FAST_FORWARD, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSQLParser.READ_ONLY, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(TSQLParser.SCROLL_LOCKS, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(TSQLParser.OPTIMISTIC, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(TSQLParser.TYPE_WARNING, 0); }
		public Declare_cursor_partialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_cursor_partial; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDeclare_cursor_partial(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDeclare_cursor_partial(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDeclare_cursor_partial(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_cursor_partialContext declare_cursor_partial() throws RecognitionException {
		Declare_cursor_partialContext _localctx = new Declare_cursor_partialContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_declare_cursor_partial);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8162);
			_la = _input.LA(1);
			if ( !(((((_la - 335)) & ~0x3f) == 0 && ((1L << (_la - 335)) & ((1L << (DYNAMIC - 335)) | (1L << (FAST_FORWARD - 335)) | (1L << (FORWARD_ONLY - 335)) | (1L << (GLOBAL - 335)))) != 0) || _la==KEYSET || _la==LOCAL || _la==OPTIMISTIC || _la==READ_ONLY || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (SCROLL_LOCKS - 656)) | (1L << (SCROLL - 656)) | (1L << (STATIC - 656)))) != 0) || _la==TYPE_WARNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_specialContext extends ParserRuleContext {
		public IdContext name;
		public TerminalNode SET() { return getToken(TSQLParser.SET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID() {
			return getRuleContext(Constant_LOCAL_IDContext.class,0);
		}
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode TRANSACTION() { return getToken(TSQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(TSQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(TSQLParser.LEVEL, 0); }
		public TerminalNode READ() { return getToken(TSQLParser.READ, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(TSQLParser.UNCOMMITTED, 0); }
		public TerminalNode COMMITTED() { return getToken(TSQLParser.COMMITTED, 0); }
		public TerminalNode REPEATABLE() { return getToken(TSQLParser.REPEATABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSQLParser.SNAPSHOT, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSQLParser.SERIALIZABLE, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode IDENTITY_INSERT() { return getToken(TSQLParser.IDENTITY_INSERT, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TEXTSIZE() { return getToken(TSQLParser.TEXTSIZE, 0); }
		public TerminalNode LANGUAGE() { return getToken(TSQLParser.LANGUAGE, 0); }
		public TerminalNode STATISTICS() { return getToken(TSQLParser.STATISTICS, 0); }
		public TerminalNode IO() { return getToken(TSQLParser.IO, 0); }
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode PROFILE() { return getToken(TSQLParser.PROFILE, 0); }
		public TerminalNode TIME() { return getToken(TSQLParser.TIME, 0); }
		public Object_expressionContext object_expression() {
			return getRuleContext(Object_expressionContext.class,0);
		}
		public TerminalNode ROWCOUNT() { return getToken(TSQLParser.ROWCOUNT, 0); }
		public Decimal_or_local_idContext decimal_or_local_id() {
			return getRuleContext(Decimal_or_local_idContext.class,0);
		}
		public Set_specialContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_special; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSet_special(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSet_special(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSet_special(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_specialContext set_special() throws RecognitionException {
		Set_specialContext _localctx = new Set_specialContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_set_special);
		int _la;
		try {
			setState(8210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1154,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8164);
				match(SET);
				setState(8165);
				((Set_specialContext)_localctx).name = id();
				setState(8170);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1151,_ctx) ) {
				case 1:
					{
					setState(8166);
					id();
					}
					break;
				case 2:
					{
					setState(8167);
					constant_LOCAL_ID();
					}
					break;
				case 3:
					{
					setState(8168);
					match(ON);
					}
					break;
				case 4:
					{
					setState(8169);
					match(OFF);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8172);
				match(SET);
				setState(8173);
				match(TRANSACTION);
				setState(8174);
				match(ISOLATION);
				setState(8175);
				match(LEVEL);
				setState(8185);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1152,_ctx) ) {
				case 1:
					{
					setState(8176);
					match(READ);
					setState(8177);
					match(UNCOMMITTED);
					}
					break;
				case 2:
					{
					setState(8178);
					match(READ);
					setState(8179);
					match(COMMITTED);
					}
					break;
				case 3:
					{
					setState(8180);
					match(REPEATABLE);
					setState(8181);
					match(READ);
					}
					break;
				case 4:
					{
					setState(8182);
					match(SNAPSHOT);
					}
					break;
				case 5:
					{
					setState(8183);
					match(SERIALIZABLE);
					}
					break;
				case 6:
					{
					setState(8184);
					match(DECIMAL);
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8187);
				match(SET);
				setState(8188);
				match(IDENTITY_INSERT);
				setState(8189);
				qualified_name();
				setState(8190);
				on_off();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8192);
				match(SET);
				setState(8193);
				match(TEXTSIZE);
				setState(8194);
				match(DECIMAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8195);
				match(SET);
				setState(8196);
				match(LANGUAGE);
				setState(8199);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1153,_ctx) ) {
				case 1:
					{
					setState(8197);
					id();
					}
					break;
				case 2:
					{
					setState(8198);
					constant_LOCAL_ID();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8201);
				match(SET);
				setState(8202);
				match(STATISTICS);
				setState(8203);
				_la = _input.LA(1);
				if ( !(_la==IO || _la==PROFILE || _la==TIME || _la==XML) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8204);
				on_off();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8205);
				match(SET);
				setState(8206);
				object_expression(0);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8207);
				match(SET);
				setState(8208);
				match(ROWCOUNT);
				setState(8209);
				decimal_or_local_id();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_LOCAL_IDContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public Constant_LOCAL_IDContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_LOCAL_ID; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterConstant_LOCAL_ID(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitConstant_LOCAL_ID(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitConstant_LOCAL_ID(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_LOCAL_IDContext constant_LOCAL_ID() throws RecognitionException {
		Constant_LOCAL_IDContext _localctx = new Constant_LOCAL_IDContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_constant_LOCAL_ID);
		try {
			setState(8214);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FALSE:
			case TRUE:
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case IPV4_ADDR:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 1);
				{
				setState(8212);
				constant();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(8213);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Token op;
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode PLUS() { return getToken(TSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(TSQLParser.MINUS, 0); }
		public TerminalNode BIT_NOT() { return getToken(TSQLParser.BIT_NOT, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Object_expressionContext object_expression() {
			return getRuleContext(Object_expressionContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public List<TerminalNode> COLON() { return getTokens(TSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSQLParser.COLON, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Date_expressionContext date_expression() {
			return getRuleContext(Date_expressionContext.class,0);
		}
		public Select_stmt_no_parensContext select_stmt_no_parens() {
			return getRuleContext(Select_stmt_no_parensContext.class,0);
		}
		public Primitive_expressionContext primitive_expression() {
			return getRuleContext(Primitive_expressionContext.class,0);
		}
		public TerminalNode STAR() { return getToken(TSQLParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(TSQLParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(TSQLParser.MODULE, 0); }
		public TerminalNode BIT_AND() { return getToken(TSQLParser.BIT_AND, 0); }
		public TerminalNode BIT_XOR() { return getToken(TSQLParser.BIT_XOR, 0); }
		public TerminalNode BIT_OR() { return getToken(TSQLParser.BIT_OR, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(TSQLParser.COLLATE, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 654;
		enterRecursionRule(_localctx, 654, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8247);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1157,_ctx) ) {
			case 1:
				{
				setState(8217);
				match(LR_BRACKET);
				setState(8218);
				expression(0);
				setState(8219);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(8221);
				((ExpressionContext)_localctx).op = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 825)) & ~0x3f) == 0 && ((1L << (_la - 825)) & ((1L << (PLUS - 825)) | (1L << (MINUS - 825)) | (1L << (BIT_NOT - 825)))) != 0)) ) {
					((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8222);
				expression(15);
				}
				break;
			case 3:
				{
				setState(8223);
				function_call();
				}
				break;
			case 4:
				{
				setState(8224);
				object_expression(0);
				setState(8225);
				match(DOT);
				setState(8226);
				function_call();
				}
				break;
			case 5:
				{
				setState(8228);
				full_column_name();
				setState(8232);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1156,_ctx) ) {
				case 1:
					{
					setState(8229);
					match(COLON);
					setState(8230);
					match(COLON);
					setState(8231);
					function_call();
					}
					break;
				}
				}
				break;
			case 6:
				{
				setState(8234);
				id();
				setState(8235);
				match(COLON);
				setState(8236);
				match(COLON);
				setState(8237);
				id();
				}
				break;
			case 7:
				{
				setState(8239);
				case_expression();
				}
				break;
			case 8:
				{
				setState(8240);
				over_clause();
				}
				break;
			case 9:
				{
				setState(8241);
				date_expression();
				}
				break;
			case 10:
				{
				setState(8242);
				match(LR_BRACKET);
				setState(8243);
				select_stmt_no_parens();
				setState(8244);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				setState(8246);
				primitive_expression();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8267);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1159,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8265);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1158,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8249);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(8250);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 822)) & ~0x3f) == 0 && ((1L << (_la - 822)) & ((1L << (STAR - 822)) | (1L << (DIVIDE - 822)) | (1L << (MODULE - 822)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8251);
						expression(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8252);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(8253);
						((ExpressionContext)_localctx).op = _input.LT(1);
						_la = _input.LA(1);
						if ( !(((((_la - 825)) & ~0x3f) == 0 && ((1L << (_la - 825)) & ((1L << (PLUS - 825)) | (1L << (MINUS - 825)) | (1L << (BIT_OR - 825)) | (1L << (BIT_AND - 825)) | (1L << (BIT_XOR - 825)))) != 0)) ) {
							((ExpressionContext)_localctx).op = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(8254);
						expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8255);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(8256);
						match(EQUAL);
						setState(8257);
						expression(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8258);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(8259);
						assignment_operator();
						setState(8260);
						expression(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_expression);
						setState(8262);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(8263);
						match(COLLATE);
						setState(8264);
						id();
						}
						break;
					}
					} 
				}
				setState(8269);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1159,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Object_expressionContext extends ParserRuleContext {
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public List<TerminalNode> COLON() { return getTokens(TSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSQLParser.COLON, i);
		}
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Case_expressionContext case_expression() {
			return getRuleContext(Case_expressionContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Select_stmt_no_parensContext select_stmt_no_parens() {
			return getRuleContext(Select_stmt_no_parensContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public Object_expressionContext object_expression() {
			return getRuleContext(Object_expressionContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public Object_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterObject_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitObject_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitObject_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_expressionContext object_expression() throws RecognitionException {
		return object_expression(0);
	}

	private Object_expressionContext object_expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Object_expressionContext _localctx = new Object_expressionContext(_ctx, _parentState);
		Object_expressionContext _prevctx = _localctx;
		int _startState = 656;
		enterRecursionRule(_localctx, 656, RULE_object_expression, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8293);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1160,_ctx) ) {
			case 1:
				{
				setState(8271);
				function_call();
				}
				break;
			case 2:
				{
				setState(8272);
				full_column_name();
				setState(8273);
				match(COLON);
				setState(8274);
				match(COLON);
				setState(8275);
				function_call();
				}
				break;
			case 3:
				{
				setState(8277);
				id();
				setState(8278);
				match(COLON);
				setState(8279);
				match(COLON);
				setState(8280);
				id();
				}
				break;
			case 4:
				{
				setState(8282);
				case_expression();
				}
				break;
			case 5:
				{
				setState(8283);
				over_clause();
				}
				break;
			case 6:
				{
				setState(8284);
				match(LR_BRACKET);
				setState(8285);
				expression(0);
				setState(8286);
				match(RR_BRACKET);
				}
				break;
			case 7:
				{
				setState(8288);
				match(LR_BRACKET);
				setState(8289);
				select_stmt_no_parens();
				setState(8290);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				setState(8292);
				match(LOCAL_ID);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8300);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1161,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Object_expressionContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_object_expression);
					setState(8295);
					if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
					setState(8296);
					match(DOT);
					setState(8297);
					function_call();
					}
					} 
				}
				setState(8302);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1161,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Date_expressionContext extends ParserRuleContext {
		public TerminalNode LEFT_FIGURE_PAREN() { return getToken(TSQLParser.LEFT_FIGURE_PAREN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_FIGURE_PAREN() { return getToken(TSQLParser.RIGHT_FIGURE_PAREN, 0); }
		public Date_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_date_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDate_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDate_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDate_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Date_expressionContext date_expression() throws RecognitionException {
		Date_expressionContext _localctx = new Date_expressionContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_date_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8303);
			match(LEFT_FIGURE_PAREN);
			setState(8304);
			id();
			setState(8305);
			expression(0);
			setState(8306);
			match(RIGHT_FIGURE_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primitive_expressionContext extends ParserRuleContext {
		public Token dollar;
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(TSQLParser.NULL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode REAL() { return getToken(TSQLParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSQLParser.FLOAT, 0); }
		public TerminalNode DOLLAR() { return getToken(TSQLParser.DOLLAR, 0); }
		public TerminalNode TRUE() { return getToken(TSQLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(TSQLParser.FALSE, 0); }
		public TerminalNode IPV4_ADDR() { return getToken(TSQLParser.IPV4_ADDR, 0); }
		public Primitive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primitive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterPrimitive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitPrimitive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitPrimitive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primitive_expressionContext primitive_expression() throws RecognitionException {
		Primitive_expressionContext _localctx = new Primitive_expressionContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_primitive_expression);
		int _la;
		try {
			setState(8321);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DEFAULT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8308);
				match(DEFAULT);
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 2);
				{
				setState(8309);
				match(NULL);
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(8310);
				match(LOCAL_ID);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 4);
				{
				setState(8311);
				match(STRING);
				}
				break;
			case BINARY:
				enterOuterAlt(_localctx, 5);
				{
				setState(8312);
				match(BINARY);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 6);
				{
				setState(8313);
				match(DECIMAL);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 7);
				{
				setState(8314);
				match(REAL);
				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 8);
				{
				setState(8315);
				match(FLOAT);
				}
				break;
			case DOLLAR:
				enterOuterAlt(_localctx, 9);
				{
				setState(8316);
				((Primitive_expressionContext)_localctx).dollar = match(DOLLAR);
				setState(8317);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 10);
				{
				setState(8318);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 11);
				{
				setState(8319);
				match(FALSE);
				}
				break;
			case IPV4_ADDR:
				enterOuterAlt(_localctx, 12);
				{
				setState(8320);
				match(IPV4_ADDR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expressionContext extends ParserRuleContext {
		public ExpressionContext caseExpr;
		public ExpressionContext elseExpr;
		public TerminalNode CASE() { return getToken(TSQLParser.CASE, 0); }
		public TerminalNode END() { return getToken(TSQLParser.END, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<Switch_sectionContext> switch_section() {
			return getRuleContexts(Switch_sectionContext.class);
		}
		public Switch_sectionContext switch_section(int i) {
			return getRuleContext(Switch_sectionContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(TSQLParser.ELSE, 0); }
		public List<Switch_search_condition_sectionContext> switch_search_condition_section() {
			return getRuleContexts(Switch_search_condition_sectionContext.class);
		}
		public Switch_search_condition_sectionContext switch_search_condition_section(int i) {
			return getRuleContext(Switch_search_condition_sectionContext.class,i);
		}
		public Case_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCase_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCase_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCase_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_expressionContext case_expression() throws RecognitionException {
		Case_expressionContext _localctx = new Case_expressionContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_case_expression);
		int _la;
		try {
			setState(8348);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8323);
				match(CASE);
				setState(8324);
				((Case_expressionContext)_localctx).caseExpr = expression(0);
				setState(8326); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(8325);
					switch_section();
					}
					}
					setState(8328); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(8332);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(8330);
					match(ELSE);
					setState(8331);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(8334);
				match(END);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8336);
				match(CASE);
				setState(8338); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(8337);
					switch_search_condition_section();
					}
					}
					setState(8340); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(8344);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(8342);
					match(ELSE);
					setState(8343);
					((Case_expressionContext)_localctx).elseExpr = expression(0);
					}
				}

				setState(8346);
				match(END);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constant_expressionContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSQLParser.NULL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Constant_expressionContext constant_expression() {
			return getRuleContext(Constant_expressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Constant_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterConstant_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitConstant_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitConstant_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constant_expressionContext constant_expression() throws RecognitionException {
		Constant_expressionContext _localctx = new Constant_expressionContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_constant_expression);
		try {
			setState(8358);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1168,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8350);
				match(NULL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8351);
				constant();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8352);
				function_call();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8353);
				match(LOCAL_ID);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8354);
				match(LR_BRACKET);
				setState(8355);
				constant_expression();
				setState(8356);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_expressionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Common_table_expressionContext> common_table_expression() {
			return getRuleContexts(Common_table_expressionContext.class);
		}
		public Common_table_expressionContext common_table_expression(int i) {
			return getRuleContext(Common_table_expressionContext.class,i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(TSQLParser.XMLNAMESPACES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public With_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWith_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWith_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWith_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_expressionContext with_expression() throws RecognitionException {
		With_expressionContext _localctx = new With_expressionContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_with_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8360);
			match(WITH);
			setState(8363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1169,_ctx) ) {
			case 1:
				{
				setState(8361);
				match(XMLNAMESPACES);
				setState(8362);
				match(COMMA);
				}
				break;
			}
			setState(8365);
			common_table_expression();
			setState(8370);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8366);
				match(COMMA);
				setState(8367);
				common_table_expression();
				}
				}
				setState(8372);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Common_table_expressionContext extends ParserRuleContext {
		public IdContext expression_name;
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public Common_table_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_common_table_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCommon_table_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCommon_table_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCommon_table_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Common_table_expressionContext common_table_expression() throws RecognitionException {
		Common_table_expressionContext _localctx = new Common_table_expressionContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_common_table_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8373);
			((Common_table_expressionContext)_localctx).expression_name = id();
			setState(8378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(8374);
				match(LR_BRACKET);
				setState(8375);
				column_name_list();
				setState(8376);
				match(RR_BRACKET);
				}
			}

			setState(8380);
			match(AS);
			setState(8381);
			match(LR_BRACKET);
			setState(8382);
			select_statement();
			setState(8383);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_elemContext extends ParserRuleContext {
		public IdContext udt_column_name;
		public IdContext method_name;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public Assignment_operatorContext assignment_operator() {
			return getRuleContext(Assignment_operatorContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public Update_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterUpdate_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitUpdate_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitUpdate_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_elemContext update_elem() throws RecognitionException {
		Update_elemContext _localctx = new Update_elemContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_update_elem);
		try {
			setState(8401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1174,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8387);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(8385);
					full_column_name();
					}
					break;
				case LOCAL_ID:
					{
					setState(8386);
					match(LOCAL_ID);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8391);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EQUAL:
					{
					setState(8389);
					match(EQUAL);
					}
					break;
				case PLUS_ASSIGN:
				case MINUS_ASSIGN:
				case MULT_ASSIGN:
				case DIV_ASSIGN:
				case MOD_ASSIGN:
				case AND_ASSIGN:
				case XOR_ASSIGN:
				case OR_ASSIGN:
					{
					setState(8390);
					assignment_operator();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8393);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8394);
				((Update_elemContext)_localctx).udt_column_name = id();
				setState(8395);
				match(DOT);
				setState(8396);
				((Update_elemContext)_localctx).method_name = id();
				setState(8397);
				match(LR_BRACKET);
				setState(8398);
				expression_list();
				setState(8399);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_conditionContext extends ParserRuleContext {
		public List<Search_condition_andContext> search_condition_and() {
			return getRuleContexts(Search_condition_andContext.class);
		}
		public Search_condition_andContext search_condition_and(int i) {
			return getRuleContext(Search_condition_andContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(TSQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(TSQLParser.OR, i);
		}
		public Search_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSearch_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSearch_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSearch_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_conditionContext search_condition() throws RecognitionException {
		Search_conditionContext _localctx = new Search_conditionContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_search_condition);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8403);
			search_condition_and();
			setState(8408);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1175,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8404);
					match(OR);
					setState(8405);
					search_condition_and();
					}
					} 
				}
				setState(8410);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1175,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_andContext extends ParserRuleContext {
		public List<Search_condition_notContext> search_condition_not() {
			return getRuleContexts(Search_condition_notContext.class);
		}
		public Search_condition_notContext search_condition_not(int i) {
			return getRuleContext(Search_condition_notContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(TSQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(TSQLParser.AND, i);
		}
		public Search_condition_andContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_and; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSearch_condition_and(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSearch_condition_and(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSearch_condition_and(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_andContext search_condition_and() throws RecognitionException {
		Search_condition_andContext _localctx = new Search_condition_andContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_search_condition_and);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8411);
			search_condition_not();
			setState(8416);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1176,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8412);
					match(AND);
					setState(8413);
					search_condition_not();
					}
					} 
				}
				setState(8418);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1176,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_condition_notContext extends ParserRuleContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode NOT() { return getToken(TSQLParser.NOT, 0); }
		public Search_condition_notContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_condition_not; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSearch_condition_not(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSearch_condition_not(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSearch_condition_not(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_condition_notContext search_condition_not() throws RecognitionException {
		Search_condition_notContext _localctx = new Search_condition_notContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_search_condition_not);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8420);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(8419);
				match(NOT);
				}
			}

			setState(8422);
			predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(TSQLParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Comparison_operatorContext comparison_operator() {
			return getRuleContext(Comparison_operatorContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public TerminalNode SOME() { return getToken(TSQLParser.SOME, 0); }
		public TerminalNode ANY() { return getToken(TSQLParser.ANY, 0); }
		public TerminalNode BETWEEN() { return getToken(TSQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(TSQLParser.AND, 0); }
		public TerminalNode NOT() { return getToken(TSQLParser.NOT, 0); }
		public TerminalNode IN() { return getToken(TSQLParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(TSQLParser.LIKE, 0); }
		public TerminalNode ESCAPE() { return getToken(TSQLParser.ESCAPE, 0); }
		public TerminalNode IS() { return getToken(TSQLParser.IS, 0); }
		public Null_notnullContext null_notnull() {
			return getRuleContext(Null_notnullContext.class,0);
		}
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(TSQLParser.UPDATE, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_predicate);
		int _la;
		try {
			setState(8485);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1184,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8424);
				match(EXISTS);
				setState(8425);
				match(LR_BRACKET);
				setState(8426);
				select_statement();
				setState(8427);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8429);
				expression(0);
				setState(8430);
				comparison_operator();
				setState(8431);
				expression(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8433);
				expression(0);
				setState(8434);
				comparison_operator();
				setState(8435);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8436);
				match(LR_BRACKET);
				setState(8437);
				select_statement();
				setState(8438);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8440);
				expression(0);
				setState(8442);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8441);
					match(NOT);
					}
				}

				setState(8444);
				match(BETWEEN);
				setState(8445);
				expression(0);
				setState(8446);
				match(AND);
				setState(8447);
				expression(0);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8449);
				expression(0);
				setState(8451);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8450);
					match(NOT);
					}
				}

				setState(8453);
				match(IN);
				setState(8454);
				match(LR_BRACKET);
				setState(8457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1180,_ctx) ) {
				case 1:
					{
					setState(8455);
					select_statement();
					}
					break;
				case 2:
					{
					setState(8456);
					expression_list();
					}
					break;
				}
				setState(8459);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8461);
				expression(0);
				setState(8463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(8462);
					match(NOT);
					}
				}

				setState(8465);
				match(LIKE);
				setState(8466);
				expression(0);
				setState(8469);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1182,_ctx) ) {
				case 1:
					{
					setState(8467);
					match(ESCAPE);
					setState(8468);
					expression(0);
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8471);
				expression(0);
				setState(8472);
				match(IS);
				setState(8473);
				null_notnull();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8475);
				match(LR_BRACKET);
				setState(8476);
				search_condition();
				setState(8477);
				match(RR_BRACKET);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8479);
				match(UPDATE);
				setState(8480);
				match(LR_BRACKET);
				setState(8482);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << COALESCE) | (1L << CONVERT) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (FILLFACTOR - 65)) | (1L << (IDENTITY - 65)) | (1L << (LEFT - 65)) | (1L << (NULL - 65)) | (1L << (NULLIF - 65)) | (1L << (OVER - 65)) | (1L << (PRECISION - 65)))) != 0) || ((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (RIGHT - 138)) | (1L << (SESSION_USER - 138)) | (1L << (SYSTEM_USER - 138)) | (1L << (USER - 138)) | (1L << (FUNC_IDENTITY - 138)) | (1L << (FUNC_CURSOR_ROWS - 138)) | (1L << (FUNC_DATEFIRST - 138)) | (1L << (FUNC_ERROR - 138)) | (1L << (FUNC_FETCH_STATUS - 138)) | (1L << (FUNC_PACK_RECEIVED - 138)) | (1L << (FUNC_PROCID - 138)) | (1L << (FUNC_ROWCOUNT - 138)) | (1L << (FUNC_TRANCOUNT - 138)) | (1L << (ABSENT - 138)) | (1L << (ABSOLUTE - 138)) | (1L << (ACCENT_SENSITIVITY - 138)) | (1L << (ACTION - 138)) | (1L << (ACTIVATION - 138)) | (1L << (ACTIVE - 138)) | (1L << (ADDRESS - 138)) | (1L << (AES_128 - 138)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (AES_192 - 202)) | (1L << (AES_256 - 202)) | (1L << (AES - 202)) | (1L << (AFFINITY - 202)) | (1L << (AFTER - 202)) | (1L << (AGGREGATE - 202)) | (1L << (ALGORITHM - 202)) | (1L << (ALLOW_CONNECTIONS - 202)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 202)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 202)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 202)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 202)) | (1L << (ALLOWED - 202)) | (1L << (ANONYMOUS - 202)) | (1L << (ANSI_NULL_DEFAULT - 202)) | (1L << (ANSI_NULLS - 202)) | (1L << (ANSI_PADDING - 202)) | (1L << (ANSI_WARNINGS - 202)) | (1L << (APPEND - 202)) | (1L << (APPLICATION_LOG - 202)) | (1L << (APPLICATION - 202)) | (1L << (APPLY - 202)) | (1L << (ARITHABORT - 202)) | (1L << (ASSEMBLY - 202)) | (1L << (ASYMMETRIC - 202)) | (1L << (ASYNCHRONOUS_COMMIT - 202)) | (1L << (AUDIT_GUID - 202)) | (1L << (AUDIT - 202)) | (1L << (AUTHENTICATION - 202)) | (1L << (AUTO_CLEANUP - 202)) | (1L << (AUTO_CLOSE - 202)) | (1L << (AUTO_CREATE_STATISTICS - 202)) | (1L << (AUTO_SHRINK - 202)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 202)) | (1L << (AUTO_UPDATE_STATISTICS - 202)) | (1L << (AUTO - 202)) | (1L << (AUTOGROW_ALL_FILES - 202)) | (1L << (AUTOGROW_SINGLE_FILE - 202)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 202)) | (1L << (AUTOMATIC - 202)) | (1L << (AVAILABILITY_MODE - 202)) | (1L << (AVAILABILITY - 202)) | (1L << (BACKUP_PRIORITY - 202)) | (1L << (BEFORE - 202)) | (1L << (BEGIN_DIALOG - 202)) | (1L << (BINARY_BASE64 - 202)) | (1L << (BINDING - 202)) | (1L << (BLOB_STORAGE - 202)) | (1L << (BLOCK - 202)) | (1L << (BLOCKING_HIERARCHY - 202)) | (1L << (BLOCKSIZE - 202)) | (1L << (BROKER_INSTANCE - 202)) | (1L << (BROKER - 202)) | (1L << (BUFFER - 202)) | (1L << (BUFFERCOUNT - 202)) | (1L << (BULK_LOGGED - 202)) | (1L << (CACHE - 202)) | (1L << (CALLED - 202)) | (1L << (CALLER - 202)) | (1L << (CAP_CPU_PERCENT - 202)) | (1L << (CAST - 202)) | (1L << (CATALOG - 202)) | (1L << (CATCH - 202)) | (1L << (CERTIFICATE - 202)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (CHANGE_RETENTION - 266)) | (1L << (CHANGE_TRACKING - 266)) | (1L << (CHANGES - 266)) | (1L << (CHANGETABLE - 266)) | (1L << (CHAR - 266)) | (1L << (CHARACTER - 266)) | (1L << (CHECK_EXPIRATION - 266)) | (1L << (CHECK_POLICY - 266)) | (1L << (CHECKSUM - 266)) | (1L << (CLASSIFIER_FUNCTION - 266)) | (1L << (CLEANUP - 266)) | (1L << (CLUSTER - 266)) | (1L << (COLLECTION - 266)) | (1L << (COLUMN_MASTER_KEY - 266)) | (1L << (COMMITTED - 266)) | (1L << (COMPATIBILITY_LEVEL - 266)) | (1L << (COMPRESSION - 266)) | (1L << (CONCAT_NULL_YIELDS_NULL - 266)) | (1L << (CONCAT - 266)) | (1L << (CONFIGURATION - 266)) | (1L << (CONNECT - 266)) | (1L << (CONTAINMENT - 266)) | (1L << (CONTENT - 266)) | (1L << (CONTEXT - 266)) | (1L << (CONTINUE_AFTER_ERROR - 266)) | (1L << (CONTRACT_NAME - 266)) | (1L << (CONTRACT - 266)) | (1L << (CONTROL - 266)) | (1L << (CONVERSATION - 266)) | (1L << (COOKIE - 266)) | (1L << (COPY_ONLY - 266)) | (1L << (COUNTER - 266)) | (1L << (CPU - 266)) | (1L << (CREATE_NEW - 266)) | (1L << (CREATION_DISPOSITION - 266)) | (1L << (CREDENTIAL - 266)) | (1L << (CRYPTOGRAPHIC - 266)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 266)) | (1L << (CURSOR_DEFAULT - 266)) | (1L << (CYCLE - 266)) | (1L << (DATA_COMPRESSION - 266)) | (1L << (DATA_SOURCE - 266)) | (1L << (DATA - 266)) | (1L << (DATABASE_MIRRORING - 266)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 266)) | (1L << (DAYS - 266)) | (1L << (DB_CHAINING - 266)) | (1L << (DB_FAILOVER - 266)) | (1L << (DECRYPTION - 266)) | (1L << (DEFAULT_DATABASE - 266)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 266)) | (1L << (DEFAULT_LANGUAGE - 266)) | (1L << (DEFAULT_SCHEMA - 266)) | (1L << (DELAY - 266)) | (1L << (DELAYED_DURABILITY - 266)) | (1L << (DEPENDENTS - 266)) | (1L << (DES - 266)) | (1L << (DESCRIPTION - 266)) | (1L << (DESX - 266)) | (1L << (DHCP - 266)) | (1L << (DIAGNOSTICS - 266)) | (1L << (DIALOG - 266)) | (1L << (DIFFERENTIAL - 266)) | (1L << (DIRECTORY_NAME - 266)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (DISABLE_BROKER - 330)) | (1L << (DISABLE - 330)) | (1L << (DISABLED - 330)) | (1L << (DOCUMENT - 330)) | (1L << (DTC_SUPPORT - 330)) | (1L << (DYNAMIC - 330)) | (1L << (ELEMENTS - 330)) | (1L << (EMERGENCY - 330)) | (1L << (EMPTY - 330)) | (1L << (ENABLE_BROKER - 330)) | (1L << (ENABLE - 330)) | (1L << (ENABLED - 330)) | (1L << (ENCRYPTED_VALUE - 330)) | (1L << (ENCRYPTION - 330)) | (1L << (ENDPOINT_URL - 330)) | (1L << (ENDPOINT - 330)) | (1L << (ERROR_BROKER_CONVERSATIONS - 330)) | (1L << (ERROR - 330)) | (1L << (EVENT_RETENTION_MODE - 330)) | (1L << (EVENT - 330)) | (1L << (EXCLUSIVE - 330)) | (1L << (EXECUTABLE_FILE - 330)) | (1L << (EXECUTABLE - 330)) | (1L << (EXPAND - 330)) | (1L << (EXPIREDATE - 330)) | (1L << (EXPIRY_DATE - 330)) | (1L << (EXPLICIT - 330)) | (1L << (EXTENSION - 330)) | (1L << (EXTERNAL_ACCESS - 330)) | (1L << (FAIL_OPERATION - 330)) | (1L << (FAILOVER_MODE - 330)) | (1L << (FAILOVER - 330)) | (1L << (FAILURE_CONDITION_LEVEL - 330)) | (1L << (FAILURECONDITIONLEVEL - 330)) | (1L << (FALSE - 330)) | (1L << (FAN_IN - 330)) | (1L << (FAST_FORWARD - 330)) | (1L << (FAST - 330)) | (1L << (FILE_SNAPSHOT - 330)) | (1L << (FILEGROUP - 330)) | (1L << (FILEGROWTH - 330)) | (1L << (FILENAME - 330)) | (1L << (FILEPATH - 330)) | (1L << (FILESTREAM_ON - 330)) | (1L << (FILESTREAM - 330)) | (1L << (FILTER - 330)) | (1L << (FIRST - 330)) | (1L << (FOLLOWING - 330)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 330)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 330)) | (1L << (FORCE - 330)) | (1L << (FORCED - 330)) | (1L << (FORCESEEK - 330)) | (1L << (FORMAT - 330)) | (1L << (FORWARD_ONLY - 330)) | (1L << (FULLSCAN - 330)) | (1L << (FULLTEXT - 330)) | (1L << (GB - 330)) | (1L << (GET - 330)) | (1L << (GLOBAL - 330)) | (1L << (GOVERNOR - 330)) | (1L << (GROUP_MAX_REQUESTS - 330)) | (1L << (HADR - 330)) | (1L << (HASH - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (HASHED - 394)) | (1L << (HEALTH_CHECK_TIMEOUT - 394)) | (1L << (HEALTHCHECKTIMEOUT - 394)) | (1L << (HIGH - 394)) | (1L << (HONOR_BROKER_PRIORITY - 394)) | (1L << (HOURS - 394)) | (1L << (IDENTITY_VALUE - 394)) | (1L << (IIF - 394)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 394)) | (1L << (IMMEDIATE - 394)) | (1L << (IMPERSONATE - 394)) | (1L << (IMPORTANCE - 394)) | (1L << (INCLUDE_NULL_VALUES - 394)) | (1L << (INCLUDE - 394)) | (1L << (INCREMENT - 394)) | (1L << (INCREMENTAL - 394)) | (1L << (INFINITE - 394)) | (1L << (INIT - 394)) | (1L << (INITIATOR - 394)) | (1L << (INPUT - 394)) | (1L << (INSENSITIVE - 394)) | (1L << (INSTEAD - 394)) | (1L << (IO - 394)) | (1L << (IP - 394)) | (1L << (ISOLATION - 394)) | (1L << (JSON - 394)) | (1L << (KB - 394)) | (1L << (KEEP - 394)) | (1L << (KEEPFIXED - 394)) | (1L << (KERBEROS - 394)) | (1L << (KEY_PATH - 394)) | (1L << (KEY_SOURCE - 394)) | (1L << (KEY_STORE_PROVIDER_NAME - 394)) | (1L << (KEYS - 394)) | (1L << (KEYSET - 394)) | (1L << (LANGUAGE - 394)) | (1L << (LAST - 394)) | (1L << (LEVEL - 394)) | (1L << (LIBRARY - 394)) | (1L << (LIFETIME - 394)) | (1L << (LINUX - 394)) | (1L << (LIST - 394)) | (1L << (LISTENER_IP - 394)) | (1L << (LISTENER_PORT - 394)) | (1L << (LISTENER_URL - 394)) | (1L << (LISTENER - 394)) | (1L << (LOB_COMPACTION - 394)) | (1L << (LOCAL_SERVICE_NAME - 394)) | (1L << (LOCAL - 394)) | (1L << (LOCATION - 394)) | (1L << (LOCK_ESCALATION - 394)) | (1L << (LOCK - 394)) | (1L << (LOG - 394)) | (1L << (LOGIN - 394)) | (1L << (LOOP - 394)) | (1L << (LOW - 394)) | (1L << (MANUAL - 394)) | (1L << (MARK - 394)) | (1L << (MASTER - 394)) | (1L << (MATCHED - 394)) | (1L << (MATERIALIZED - 394)) | (1L << (MAX_CPU_PERCENT - 394)) | (1L << (MAX_DISPATCH_LATENCY - 394)) | (1L << (MAX_DOP - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (MAX_EVENT_SIZE - 458)) | (1L << (MAX_FILES - 458)) | (1L << (MAX_IOPS_PER_VOLUME - 458)) | (1L << (MAX_MEMORY_PERCENT - 458)) | (1L << (MAX_MEMORY - 458)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 458)) | (1L << (MAX_PROCESSES - 458)) | (1L << (MAX_QUEUE_READERS - 458)) | (1L << (MAX_ROLLOVER_FILES - 458)) | (1L << (MAX_SIZE - 458)) | (1L << (MAX - 458)) | (1L << (MAXDOP - 458)) | (1L << (MAXRECURSION - 458)) | (1L << (MAXSIZE - 458)) | (1L << (MAXTRANSFER - 458)) | (1L << (MAXVALUE - 458)) | (1L << (MB - 458)) | (1L << (MEDIADESCRIPTION - 458)) | (1L << (MEDIANAME - 458)) | (1L << (MEDIUM - 458)) | (1L << (MEMBER - 458)) | (1L << (MEMORY_OPTIMIZED_DATA - 458)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 458)) | (1L << (MEMORY_OPTIMIZED - 458)) | (1L << (MEMORY_PARTITION_MODE - 458)) | (1L << (MESSAGE_FORWARD_SIZE - 458)) | (1L << (MESSAGE_FORWARDING - 458)) | (1L << (MESSAGE - 458)) | (1L << (MIN_ACTIVE_ROWVERSION - 458)) | (1L << (MIN_CPU_PERCENT - 458)) | (1L << (MIN_IOPS_PER_VOLUME - 458)) | (1L << (MIN_MEMORY_PERCENT - 458)) | (1L << (MINUTES - 458)) | (1L << (MINVALUE - 458)) | (1L << (MIRROR_ADDRESS - 458)) | (1L << (MIRROR - 458)) | (1L << (MIXED_PAGE_ALLOCATION - 458)) | (1L << (MODE - 458)) | (1L << (MODIFY - 458)) | (1L << (MOVE - 458)) | (1L << (MULTI_USER - 458)) | (1L << (MUST_CHANGE - 458)) | (1L << (NAME - 458)) | (1L << (NCHAR - 458)) | (1L << (NEGOTIATE - 458)) | (1L << (NESTED_TRIGGERS - 458)) | (1L << (NEW_ACCOUNT - 458)) | (1L << (NEW_BROKER - 458)) | (1L << (NEW_PASSWORD - 458)) | (1L << (NEWNAME - 458)) | (1L << (NEXT - 458)) | (1L << (NO_CHECKSUM - 458)) | (1L << (NO_COMPRESSION - 458)) | (1L << (NO_EVENT_LOSS - 458)) | (1L << (NO_TRUNCATE - 458)) | (1L << (NO_WAIT - 458)) | (1L << (NO - 458)) | (1L << (NODES - 458)) | (1L << (NOEXPAND - 458)) | (1L << (NOFORMAT - 458)) | (1L << (NOINIT - 458)) | (1L << (NON_TRANSACTED_ACCESS - 458)) | (1L << (NONE - 458)) | (1L << (NORECOMPUTE - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (NORECOVERY - 522)) | (1L << (NOREWIND - 522)) | (1L << (NOSKIP - 522)) | (1L << (NOTIFICATION - 522)) | (1L << (NOUNLOAD - 522)) | (1L << (NOWAIT - 522)) | (1L << (NTLM - 522)) | (1L << (NUMANODE - 522)) | (1L << (NUMERIC_ROUNDABORT - 522)) | (1L << (OBJECT - 522)) | (1L << (OFFLINE - 522)) | (1L << (OFFSET - 522)) | (1L << (OLD_ACCOUNT - 522)) | (1L << (OLD_PASSWORD - 522)) | (1L << (ON_FAILURE - 522)) | (1L << (ONLINE - 522)) | (1L << (ONLY - 522)) | (1L << (OPEN_EXISTING - 522)) | (1L << (OPENJSON - 522)) | (1L << (OPTIMISTIC - 522)) | (1L << (OPTIMIZE - 522)) | (1L << (OUT - 522)) | (1L << (OUTPUT - 522)) | (1L << (OWNER - 522)) | (1L << (PAGE_VERIFY - 522)) | (1L << (PARAMETERIZATION - 522)) | (1L << (PARSE - 522)) | (1L << (PARTIAL - 522)) | (1L << (PARTITION - 522)) | (1L << (PARTITIONS - 522)) | (1L << (PARTNER - 522)) | (1L << (PASSWORD - 522)) | (1L << (PATH - 522)) | (1L << (PAUSE - 522)) | (1L << (PER_CPU - 522)) | (1L << (PER_DB - 522)) | (1L << (PER_NODE - 522)) | (1L << (PERMISSION_SET - 522)) | (1L << (PERSIST_SAMPLE_PERSENT - 522)) | (1L << (PERSISTED - 522)) | (1L << (PERSISTENT_LOG_BUFFER - 522)) | (1L << (PLATFORM - 522)) | (1L << (POISON_MESSAGE_HANDLING - 522)) | (1L << (POLICY - 522)) | (1L << (POOL - 522)) | (1L << (POPULATION - 522)) | (1L << (PORT - 522)) | (1L << (PRECEDING - 522)) | (1L << (PREDICATE - 522)) | (1L << (PRIMARY_ROLE - 522)) | (1L << (PRIOR - 522)) | (1L << (PRIORITY_LEVEL - 522)) | (1L << (PRIORITY - 522)) | (1L << (PRIVATE_KEY - 522)) | (1L << (PRIVATE - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (PROCEDURE_NAME - 522)) | (1L << (PROCESS - 522)) | (1L << (PROFILE - 522)) | (1L << (PROPERTY_DESCRIPTION - 522)) | (1L << (PROPERTY_INT_ID - 522)) | (1L << (PROPERTY_SET_GUID - 522)) | (1L << (PROPERTY - 522)) | (1L << (PROVIDER_KEY_NAME - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (PROVIDER - 586)) | (1L << (QUERYTRACEON - 586)) | (1L << (QUEUE_DELAY - 586)) | (1L << (QUEUE - 586)) | (1L << (QUOTED_IDENTIFIER - 586)) | (1L << (R_LETTER - 586)) | (1L << (RANGE - 586)) | (1L << (RAW - 586)) | (1L << (RC2 - 586)) | (1L << (RC4_128 - 586)) | (1L << (RC4 - 586)) | (1L << (READ_COMMITTED_SNAPSHOT - 586)) | (1L << (READ_ONLY_ROUTING_LIST - 586)) | (1L << (READ_ONLY - 586)) | (1L << (READ_WRITE_FILEGROUPS - 586)) | (1L << (READ_WRITE - 586)) | (1L << (READWRITE - 586)) | (1L << (READONLY - 586)) | (1L << (REBUILD - 586)) | (1L << (RECEIVE - 586)) | (1L << (RECOMPILE - 586)) | (1L << (RECOVERY - 586)) | (1L << (RECURSIVE_TRIGGERS - 586)) | (1L << (REGENERATE - 586)) | (1L << (RELATED_CONVERSATION_GROUP - 586)) | (1L << (RELATED_CONVERSATION - 586)) | (1L << (RELATIVE - 586)) | (1L << (REMOTE_SERVICE_NAME - 586)) | (1L << (REMOTE - 586)) | (1L << (REMOVE - 586)) | (1L << (REORGANIZE - 586)) | (1L << (REPEATABLE - 586)) | (1L << (REPLICA - 586)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 586)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 586)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 586)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 586)) | (1L << (REQUIRED - 586)) | (1L << (RESAMPLE - 586)) | (1L << (RESERVE_DISK_SPACE - 586)) | (1L << (RESET - 586)) | (1L << (RESOURCE_MANAGER_LOCATION - 586)) | (1L << (RESOURCE - 586)) | (1L << (RESTART - 586)) | (1L << (RESTRICTED_USER - 586)) | (1L << (RESULT - 586)) | (1L << (RESUME - 586)) | (1L << (RETAINDAYS - 586)) | (1L << (RETENTION - 586)) | (1L << (RETURNS - 586)) | (1L << (REWIND - 586)) | (1L << (ROBUST - 586)) | (1L << (ROLE - 586)) | (1L << (ROOT - 586)) | (1L << (ROUTE - 586)) | (1L << (ROW - 586)) | (1L << (ROWGUID - 586)) | (1L << (ROWS - 586)) | (1L << (RSA_1024 - 586)) | (1L << (RSA_2048 - 586)) | (1L << (RSA_3072 - 586)) | (1L << (RSA_4096 - 586)) | (1L << (RSA_512 - 586)) | (1L << (SAFE - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (SAFETY - 650)) | (1L << (SAMPLE - 650)) | (1L << (SCHEDULER - 650)) | (1L << (SCHEMABINDING - 650)) | (1L << (SCHEME - 650)) | (1L << (SCOPED - 650)) | (1L << (SCROLL_LOCKS - 650)) | (1L << (SCROLL - 650)) | (1L << (SEARCH - 650)) | (1L << (SECONDARY_ONLY - 650)) | (1L << (SECONDARY_ROLE - 650)) | (1L << (SECONDARY - 650)) | (1L << (SECONDS - 650)) | (1L << (SECRET - 650)) | (1L << (SECURITY_LOG - 650)) | (1L << (SECURITY - 650)) | (1L << (SEEDING_MODE - 650)) | (1L << (SELECTIVE - 650)) | (1L << (SELF - 650)) | (1L << (SEMI_SENSITIVE - 650)) | (1L << (SEND - 650)) | (1L << (SENT - 650)) | (1L << (SEQUENCE - 650)) | (1L << (SERIALIZABLE - 650)) | (1L << (SERVER - 650)) | (1L << (SERVICE_BROKER - 650)) | (1L << (SERVICE_NAME - 650)) | (1L << (SERVICE - 650)) | (1L << (SESSION_TIMEOUT - 650)) | (1L << (SESSION - 650)) | (1L << (SETERROR - 650)) | (1L << (SETS - 650)) | (1L << (SHARE - 650)) | (1L << (SHOWPLAN - 650)) | (1L << (SID - 650)) | (1L << (SIGNATURE - 650)) | (1L << (SIMPLE - 650)) | (1L << (SINGLE_USER - 650)) | (1L << (SINGLETON - 650)) | (1L << (SIZE - 650)) | (1L << (SKIP_KEYWORD - 650)) | (1L << (SNAPSHOT - 650)) | (1L << (SOFTNUMA - 650)) | (1L << (SOURCE - 650)) | (1L << (SPARSE - 650)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 650)) | (1L << (SPECIFICATION - 650)) | (1L << (SPLIT - 650)) | (1L << (SQL - 650)) | (1L << (SQLDUMPERFLAGS - 650)) | (1L << (SQLDUMPERPATH - 650)) | (1L << (SQLDUMPERTIMEOUT - 650)) | (1L << (STANDBY - 650)) | (1L << (START_DATE - 650)) | (1L << (START - 650)) | (1L << (STARTED - 650)) | (1L << (STARTUP_STATE - 650)) | (1L << (STATE - 650)) | (1L << (STATIC - 650)) | (1L << (STATISTICAL_SEMANTICS - 650)) | (1L << (STATS - 650)) | (1L << (STATUS - 650)) | (1L << (STOP_ON_ERROR - 650)) | (1L << (STOP - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (STOPLIST - 714)) | (1L << (STOPPED - 714)) | (1L << (STRING_AGG - 714)) | (1L << (SUBJECT - 714)) | (1L << (SUPPORTED - 714)) | (1L << (SUSPEND - 714)) | (1L << (SYMMETRIC - 714)) | (1L << (SYNCHRONOUS_COMMIT - 714)) | (1L << (SYNONYM - 714)) | (1L << (SYSTEM - 714)) | (1L << (TAKE - 714)) | (1L << (TAPE - 714)) | (1L << (TARGET_RECOVERY_TIME - 714)) | (1L << (TARGET - 714)) | (1L << (TB - 714)) | (1L << (TCP - 714)) | (1L << (TEXTIMAGE_ON - 714)) | (1L << (THROW - 714)) | (1L << (TIES - 714)) | (1L << (TIME - 714)) | (1L << (TIMEOUT - 714)) | (1L << (TIMER - 714)) | (1L << (TORN_PAGE_DETECTION - 714)) | (1L << (TRACK_CAUSALITY - 714)) | (1L << (TRACK_COLUMNS_UPDATED - 714)) | (1L << (TRANSFER - 714)) | (1L << (TRANSFORM_NOISE_WORDS - 714)) | (1L << (TRIM - 714)) | (1L << (TRIPLE_DES_3KEY - 714)) | (1L << (TRIPLE_DES - 714)) | (1L << (TRUE - 714)) | (1L << (TRUSTWORTHY - 714)) | (1L << (TRY - 714)) | (1L << (TSQL - 714)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 714)) | (1L << (TYPE_WARNING - 714)) | (1L << (TYPE - 714)) | (1L << (UNBOUNDED - 714)) | (1L << (UNCHECKED - 714)) | (1L << (UNCOMMITTED - 714)) | (1L << (UNDEFINED - 714)) | (1L << (UNKNOWN - 714)) | (1L << (UNLIMITED - 714)) | (1L << (UNLOCK - 714)) | (1L << (UNSAFE - 714)) | (1L << (URL - 714)) | (1L << (USED - 714)) | (1L << (USING - 714)) | (1L << (VALID_XML - 714)) | (1L << (VALIDATION - 714)) | (1L << (VALUE - 714)) | (1L << (VERBOSELOGGING - 714)) | (1L << (VERSION - 714)) | (1L << (VIEW_METADATA - 714)) | (1L << (VIEWS - 714)) | (1L << (VISIBILITY - 714)) | (1L << (WAIT - 714)) | (1L << (WELL_FORMED_XML - 714)) | (1L << (WINDOWS - 714)) | (1L << (WITHOUT_ARRAY_WRAPPER - 714)) | (1L << (WITHOUT - 714)) | (1L << (WITNESS - 714)) | (1L << (WORK - 714)) | (1L << (WORKLOAD - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (XML - 778)) | (1L << (XMLDATA - 778)) | (1L << (XMLNAMESPACES - 778)) | (1L << (XMLSCHEMA - 778)) | (1L << (XQUERY - 778)) | (1L << (XSINIL - 778)) | (1L << (LEFT_FIGURE_PAREN - 778)) | (1L << (DOUBLE_QUOTE_ID - 778)) | (1L << (SQUARE_BRACKET_ID - 778)) | (1L << (LOCAL_ID - 778)) | (1L << (DECIMAL - 778)) | (1L << (ID - 778)) | (1L << (STRING - 778)) | (1L << (BINARY - 778)) | (1L << (FLOAT - 778)) | (1L << (REAL - 778)) | (1L << (IPV4_ADDR - 778)) | (1L << (DOLLAR - 778)) | (1L << (LR_BRACKET - 778)) | (1L << (PLUS - 778)) | (1L << (MINUS - 778)) | (1L << (BIT_NOT - 778)))) != 0)) {
					{
					setState(8481);
					expression_list();
					}
				}

				setState(8484);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_specificationContext extends ParserRuleContext {
		public Search_conditionContext where;
		public Search_conditionContext having;
		public TerminalNode SELECT() { return getToken(TSQLParser.SELECT, 0); }
		public Select_listContext select_list() {
			return getRuleContext(Select_listContext.class,0);
		}
		public Set_qualifierContext set_qualifier() {
			return getRuleContext(Set_qualifierContext.class,0);
		}
		public Top_clauseContext top_clause() {
			return getRuleContext(Top_clauseContext.class,0);
		}
		public TerminalNode INTO() { return getToken(TSQLParser.INTO, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(TSQLParser.WHERE, 0); }
		public TerminalNode GROUP() { return getToken(TSQLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode HAVING() { return getToken(TSQLParser.HAVING, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public List<Search_conditionContext> search_condition() {
			return getRuleContexts(Search_conditionContext.class);
		}
		public Search_conditionContext search_condition(int i) {
			return getRuleContext(Search_conditionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public Table_value_constructorContext table_value_constructor() {
			return getRuleContext(Table_value_constructorContext.class,0);
		}
		public Query_specificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_specification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterQuery_specification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitQuery_specification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitQuery_specification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_specificationContext query_specification() throws RecognitionException {
		Query_specificationContext _localctx = new Query_specificationContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_query_specification);
		int _la;
		try {
			int _alt;
			setState(8537);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(8487);
				match(SELECT);
				setState(8489);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(8488);
					set_qualifier();
					}
				}

				setState(8492);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TOP) {
					{
					setState(8491);
					top_clause();
					}
				}

				setState(8494);
				select_list();
				setState(8497);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1187,_ctx) ) {
				case 1:
					{
					setState(8495);
					match(INTO);
					setState(8496);
					qualified_name();
					}
					break;
				}
				setState(8508);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1189,_ctx) ) {
				case 1:
					{
					setState(8499);
					match(FROM);
					setState(8500);
					from_item(0);
					setState(8505);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1188,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(8501);
							match(COMMA);
							setState(8502);
							from_item(0);
							}
							} 
						}
						setState(8507);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1188,_ctx);
					}
					}
					break;
				}
				setState(8512);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1190,_ctx) ) {
				case 1:
					{
					setState(8510);
					match(WHERE);
					setState(8511);
					((Query_specificationContext)_localctx).where = search_condition();
					}
					break;
				}
				setState(8527);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1193,_ctx) ) {
				case 1:
					{
					setState(8514);
					match(GROUP);
					setState(8515);
					match(BY);
					setState(8517);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL) {
						{
						setState(8516);
						match(ALL);
						}
					}

					setState(8519);
					expression(0);
					setState(8524);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1192,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(8520);
							match(COMMA);
							setState(8521);
							expression(0);
							}
							} 
						}
						setState(8526);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1192,_ctx);
					}
					}
					break;
				}
				setState(8531);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1194,_ctx) ) {
				case 1:
					{
					setState(8529);
					match(HAVING);
					setState(8530);
					((Query_specificationContext)_localctx).having = search_condition();
					}
					break;
				}
				setState(8534);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1195,_ctx) ) {
				case 1:
					{
					setState(8533);
					order_by_clause();
					}
					break;
				}
				}
				break;
			case VALUES:
				enterOuterAlt(_localctx, 2);
				{
				setState(8536);
				table_value_constructor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_itemContext extends ParserRuleContext {
		public From_itemContext sub_item;
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public List<From_itemContext> from_item() {
			return getRuleContexts(From_itemContext.class);
		}
		public From_itemContext from_item(int i) {
			return getRuleContext(From_itemContext.class,i);
		}
		public From_primaryContext from_primary() {
			return getRuleContext(From_primaryContext.class,0);
		}
		public TerminalNode CROSS() { return getToken(TSQLParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(TSQLParser.JOIN, 0); }
		public TerminalNode APPLY() { return getToken(TSQLParser.APPLY, 0); }
		public TerminalNode OUTER() { return getToken(TSQLParser.OUTER, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode INNER() { return getToken(TSQLParser.INNER, 0); }
		public TerminalNode LEFT() { return getToken(TSQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(TSQLParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(TSQLParser.FULL, 0); }
		public TerminalNode LOOP() { return getToken(TSQLParser.LOOP, 0); }
		public TerminalNode HASH() { return getToken(TSQLParser.HASH, 0); }
		public TerminalNode MERGE() { return getToken(TSQLParser.MERGE, 0); }
		public TerminalNode REMOTE() { return getToken(TSQLParser.REMOTE, 0); }
		public TerminalNode PIVOT() { return getToken(TSQLParser.PIVOT, 0); }
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public Full_column_nameContext full_column_name() {
			return getRuleContext(Full_column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(TSQLParser.IN, 0); }
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public TerminalNode UNPIVOT() { return getToken(TSQLParser.UNPIVOT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public From_itemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_item; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFrom_item(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFrom_item(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFrom_item(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_itemContext from_item() throws RecognitionException {
		return from_item(0);
	}

	private From_itemContext from_item(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		From_itemContext _localctx = new From_itemContext(_ctx, _parentState);
		From_itemContext _prevctx = _localctx;
		int _startState = 682;
		enterRecursionRule(_localctx, 682, RULE_from_item, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8545);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1197,_ctx) ) {
			case 1:
				{
				setState(8540);
				match(LR_BRACKET);
				setState(8541);
				((From_itemContext)_localctx).sub_item = from_item(0);
				setState(8542);
				match(RR_BRACKET);
				}
				break;
			case 2:
				{
				setState(8544);
				from_primary();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(8603);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1203,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(8601);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1202,_ctx) ) {
					case 1:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_from_item);
						setState(8547);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(8548);
						match(CROSS);
						setState(8549);
						match(JOIN);
						setState(8550);
						from_item(7);
						}
						break;
					case 2:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_from_item);
						setState(8551);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(8552);
						match(CROSS);
						setState(8553);
						match(APPLY);
						setState(8554);
						from_item(6);
						}
						break;
					case 3:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_from_item);
						setState(8555);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(8556);
						match(OUTER);
						setState(8557);
						match(APPLY);
						setState(8558);
						from_item(5);
						}
						break;
					case 4:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_from_item);
						setState(8559);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(8570);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (FULL - 71)) | (1L << (INNER - 71)) | (1L << (LEFT - 71)))) != 0) || _la==RIGHT) {
							{
							setState(8565);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case INNER:
								{
								setState(8560);
								match(INNER);
								}
								break;
							case FULL:
							case LEFT:
							case RIGHT:
								{
								setState(8561);
								_la = _input.LA(1);
								if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								setState(8563);
								_errHandler.sync(this);
								_la = _input.LA(1);
								if (_la==OUTER) {
									{
									setState(8562);
									match(OUTER);
									}
								}

								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(8568);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) {
								{
								setState(8567);
								_la = _input.LA(1);
								if ( !(_la==MERGE || _la==HASH || _la==LOOP || _la==REMOTE) ) {
								_errHandler.recoverInline(this);
								}
								else {
									if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
									_errHandler.reportMatch(this);
									consume();
								}
								}
							}

							}
						}

						setState(8572);
						match(JOIN);
						setState(8573);
						from_item(0);
						setState(8574);
						match(ON);
						setState(8575);
						search_condition();
						}
						break;
					case 5:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_from_item);
						setState(8577);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(8578);
						match(PIVOT);
						setState(8579);
						match(LR_BRACKET);
						setState(8580);
						function_call();
						setState(8581);
						match(FOR);
						setState(8582);
						full_column_name();
						setState(8583);
						match(IN);
						setState(8584);
						column_alias_list();
						setState(8585);
						match(RR_BRACKET);
						setState(8586);
						as_table_alias();
						}
						break;
					case 6:
						{
						_localctx = new From_itemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_from_item);
						setState(8588);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(8589);
						match(UNPIVOT);
						setState(8590);
						match(LR_BRACKET);
						setState(8591);
						expression(0);
						setState(8592);
						match(FOR);
						setState(8593);
						full_column_name();
						setState(8594);
						match(IN);
						setState(8595);
						match(LR_BRACKET);
						setState(8596);
						full_column_name_list();
						setState(8597);
						match(RR_BRACKET);
						setState(8598);
						match(RR_BRACKET);
						setState(8599);
						as_table_alias();
						}
						break;
					}
					} 
				}
				setState(8605);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1203,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class From_primaryContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public Insert_with_table_hintsContext insert_with_table_hints() {
			return getRuleContext(Insert_with_table_hintsContext.class,0);
		}
		public Rowset_functionContext rowset_function() {
			return getRuleContext(Rowset_functionContext.class,0);
		}
		public Derived_tableContext derived_table() {
			return getRuleContext(Derived_tableContext.class,0);
		}
		public Change_tableContext change_table() {
			return getRuleContext(Change_tableContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public Open_xmlContext open_xml() {
			return getRuleContext(Open_xmlContext.class,0);
		}
		public List<TerminalNode> COLON() { return getTokens(TSQLParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(TSQLParser.COLON, i);
		}
		public From_primaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_primary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFrom_primary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFrom_primary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFrom_primary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_primaryContext from_primary() throws RecognitionException {
		From_primaryContext _localctx = new From_primaryContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_from_primary);
		try {
			setState(8647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1212,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8606);
				qualified_name();
				setState(8608);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1204,_ctx) ) {
				case 1:
					{
					setState(8607);
					as_table_alias();
					}
					break;
				}
				setState(8611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1205,_ctx) ) {
				case 1:
					{
					setState(8610);
					insert_with_table_hints();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8613);
				rowset_function();
				setState(8615);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1206,_ctx) ) {
				case 1:
					{
					setState(8614);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8617);
				derived_table();
				setState(8618);
				as_table_alias();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8620);
				change_table();
				setState(8621);
				as_table_alias();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8623);
				function_call();
				setState(8625);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1207,_ctx) ) {
				case 1:
					{
					setState(8624);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8627);
				match(LOCAL_ID);
				setState(8629);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1208,_ctx) ) {
				case 1:
					{
					setState(8628);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8631);
				match(LOCAL_ID);
				setState(8632);
				match(DOT);
				setState(8633);
				function_call();
				setState(8635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1209,_ctx) ) {
				case 1:
					{
					setState(8634);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8637);
				open_xml();
				setState(8639);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1210,_ctx) ) {
				case 1:
					{
					setState(8638);
					as_table_alias();
					}
					break;
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8641);
				match(COLON);
				setState(8642);
				match(COLON);
				setState(8643);
				function_call();
				setState(8645);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1211,_ctx) ) {
				case 1:
					{
					setState(8644);
					as_table_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_clauseContext extends ParserRuleContext {
		public TerminalNode TOP() { return getToken(TSQLParser.TOP, 0); }
		public Top_countContext top_count() {
			return getRuleContext(Top_countContext.class,0);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode TIES() { return getToken(TSQLParser.TIES, 0); }
		public Top_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTop_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTop_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTop_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_clauseContext top_clause() throws RecognitionException {
		Top_clauseContext _localctx = new Top_clauseContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_top_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8649);
			match(TOP);
			setState(8650);
			top_count();
			setState(8653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(8651);
				match(WITH);
				setState(8652);
				match(TIES);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Top_countContext extends ParserRuleContext {
		public TerminalNode PERCENT() { return getToken(TSQLParser.PERCENT, 0); }
		public TerminalNode REAL() { return getToken(TSQLParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSQLParser.FLOAT, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Top_countContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_top_count; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTop_count(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTop_count(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTop_count(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Top_countContext top_count() throws RecognitionException {
		Top_countContext _localctx = new Top_countContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_top_count);
		int _la;
		try {
			setState(8667);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1214,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8655);
				_la = _input.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8656);
				match(PERCENT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8657);
				match(DECIMAL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8658);
				match(LR_BRACKET);
				setState(8659);
				expression(0);
				setState(8660);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8662);
				match(LR_BRACKET);
				setState(8663);
				expression(0);
				setState(8664);
				match(RR_BRACKET);
				setState(8665);
				match(PERCENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(TSQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public List<Order_by_expressionContext> order_by_expression() {
			return getRuleContexts(Order_by_expressionContext.class);
		}
		public Order_by_expressionContext order_by_expression(int i) {
			return getRuleContext(Order_by_expressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode OFFSET() { return getToken(TSQLParser.OFFSET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> ROW() { return getTokens(TSQLParser.ROW); }
		public TerminalNode ROW(int i) {
			return getToken(TSQLParser.ROW, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(TSQLParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(TSQLParser.ROWS, i);
		}
		public TerminalNode FETCH() { return getToken(TSQLParser.FETCH, 0); }
		public TerminalNode ONLY() { return getToken(TSQLParser.ONLY, 0); }
		public TerminalNode FIRST() { return getToken(TSQLParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(TSQLParser.NEXT, 0); }
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_order_by_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8669);
			match(ORDER);
			setState(8670);
			match(BY);
			setState(8671);
			order_by_expression();
			setState(8676);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1215,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8672);
					match(COMMA);
					setState(8673);
					order_by_expression();
					}
					} 
				}
				setState(8678);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1215,_ctx);
			}
			setState(8690);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1217,_ctx) ) {
			case 1:
				{
				setState(8679);
				match(OFFSET);
				setState(8680);
				expression(0);
				setState(8681);
				_la = _input.LA(1);
				if ( !(_la==ROW || _la==ROWS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8688);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1216,_ctx) ) {
				case 1:
					{
					setState(8682);
					match(FETCH);
					setState(8683);
					_la = _input.LA(1);
					if ( !(_la==FIRST || _la==NEXT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8684);
					expression(0);
					setState(8685);
					_la = _input.LA(1);
					if ( !(_la==ROW || _la==ROWS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(8686);
					match(ONLY);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode BROWSE() { return getToken(TSQLParser.BROWSE, 0); }
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode RAW() { return getToken(TSQLParser.RAW, 0); }
		public TerminalNode AUTO() { return getToken(TSQLParser.AUTO, 0); }
		public List<Xml_common_directivesContext> xml_common_directives() {
			return getRuleContexts(Xml_common_directivesContext.class);
		}
		public Xml_common_directivesContext xml_common_directives(int i) {
			return getRuleContext(Xml_common_directivesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode ELEMENTS() { return getToken(TSQLParser.ELEMENTS, 0); }
		public TerminalNode XSINIL() { return getToken(TSQLParser.XSINIL, 0); }
		public TerminalNode ABSENT() { return getToken(TSQLParser.ABSENT, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode XMLDATA() { return getToken(TSQLParser.XMLDATA, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(TSQLParser.XMLSCHEMA, 0); }
		public TerminalNode EXPLICIT() { return getToken(TSQLParser.EXPLICIT, 0); }
		public TerminalNode PATH() { return getToken(TSQLParser.PATH, 0); }
		public TerminalNode JSON() { return getToken(TSQLParser.JSON, 0); }
		public TerminalNode ROOT() { return getToken(TSQLParser.ROOT, 0); }
		public List<TerminalNode> INCLUDE_NULL_VALUES() { return getTokens(TSQLParser.INCLUDE_NULL_VALUES); }
		public TerminalNode INCLUDE_NULL_VALUES(int i) {
			return getToken(TSQLParser.INCLUDE_NULL_VALUES, i);
		}
		public List<TerminalNode> WITHOUT_ARRAY_WRAPPER() { return getTokens(TSQLParser.WITHOUT_ARRAY_WRAPPER); }
		public TerminalNode WITHOUT_ARRAY_WRAPPER(int i) {
			return getToken(TSQLParser.WITHOUT_ARRAY_WRAPPER, i);
		}
		public For_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFor_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFor_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFor_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_clauseContext for_clause() throws RecognitionException {
		For_clauseContext _localctx = new For_clauseContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_for_clause);
		int _la;
		try {
			int _alt;
			setState(8781);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1234,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8692);
				match(FOR);
				setState(8693);
				match(BROWSE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8694);
				match(FOR);
				setState(8695);
				match(XML);
				setState(8703);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RAW:
					{
					setState(8696);
					match(RAW);
					setState(8700);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1218,_ctx) ) {
					case 1:
						{
						setState(8697);
						match(LR_BRACKET);
						setState(8698);
						match(STRING);
						setState(8699);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				case AUTO:
					{
					setState(8702);
					match(AUTO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(8708);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1220,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8705);
						xml_common_directives();
						}
						} 
					}
					setState(8710);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1220,_ctx);
				}
				setState(8721);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1223,_ctx) ) {
				case 1:
					{
					setState(8711);
					match(COMMA);
					setState(8719);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case XMLDATA:
						{
						setState(8712);
						match(XMLDATA);
						}
						break;
					case XMLSCHEMA:
						{
						setState(8713);
						match(XMLSCHEMA);
						setState(8717);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1221,_ctx) ) {
						case 1:
							{
							setState(8714);
							match(LR_BRACKET);
							setState(8715);
							match(STRING);
							setState(8716);
							match(RR_BRACKET);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(8726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8723);
					match(COMMA);
					setState(8724);
					match(ELEMENTS);
					setState(8725);
					_la = _input.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8728);
				match(FOR);
				setState(8729);
				match(XML);
				setState(8730);
				match(EXPLICIT);
				setState(8734);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1225,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8731);
						xml_common_directives();
						}
						} 
					}
					setState(8736);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1225,_ctx);
				}
				setState(8739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8737);
					match(COMMA);
					setState(8738);
					match(XMLDATA);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8741);
				match(FOR);
				setState(8742);
				match(XML);
				setState(8743);
				match(PATH);
				setState(8747);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1227,_ctx) ) {
				case 1:
					{
					setState(8744);
					match(LR_BRACKET);
					setState(8745);
					match(STRING);
					setState(8746);
					match(RR_BRACKET);
					}
					break;
				}
				setState(8752);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1228,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(8749);
						xml_common_directives();
						}
						} 
					}
					setState(8754);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1228,_ctx);
				}
				setState(8758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(8755);
					match(COMMA);
					setState(8756);
					match(ELEMENTS);
					setState(8757);
					_la = _input.LA(1);
					if ( !(_la==ABSENT || _la==XSINIL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8760);
				match(FOR);
				setState(8761);
				match(JSON);
				setState(8762);
				_la = _input.LA(1);
				if ( !(_la==AUTO || _la==PATH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8770);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1231,_ctx) ) {
				case 1:
					{
					setState(8763);
					match(COMMA);
					setState(8764);
					match(ROOT);
					setState(8768);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1230,_ctx) ) {
					case 1:
						{
						setState(8765);
						match(LR_BRACKET);
						setState(8766);
						match(STRING);
						setState(8767);
						match(RR_BRACKET);
						}
						break;
					}
					}
					break;
				}
				setState(8778);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					setState(8776);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,1232,_ctx) ) {
					case 1:
						{
						setState(8772);
						match(COMMA);
						setState(8773);
						match(INCLUDE_NULL_VALUES);
						}
						break;
					case 2:
						{
						setState(8774);
						match(COMMA);
						setState(8775);
						match(WITHOUT_ARRAY_WRAPPER);
						}
						break;
					}
					}
					setState(8780);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_common_directivesContext extends ParserRuleContext {
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode BINARY_BASE64() { return getToken(TSQLParser.BINARY_BASE64, 0); }
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public TerminalNode ROOT() { return getToken(TSQLParser.ROOT, 0); }
		public Xml_common_directivesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_common_directives; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterXml_common_directives(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitXml_common_directives(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitXml_common_directives(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_common_directivesContext xml_common_directives() throws RecognitionException {
		Xml_common_directivesContext _localctx = new Xml_common_directivesContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_xml_common_directives);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8783);
			match(COMMA);
			setState(8784);
			_la = _input.LA(1);
			if ( !(_la==BINARY_BASE64 || _la==ROOT || _la==TYPE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Asc_descContext asc_desc() {
			return getRuleContext(Asc_descContext.class,0);
		}
		public Order_by_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOrder_by_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOrder_by_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOrder_by_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_expressionContext order_by_expression() throws RecognitionException {
		Order_by_expressionContext _localctx = new Order_by_expressionContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_order_by_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8786);
			expression(0);
			setState(8788);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1235,_ctx) ) {
			case 1:
				{
				setState(8787);
				asc_desc();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Option_clauseContext extends ParserRuleContext {
		public TerminalNode OPTION() { return getToken(TSQLParser.OPTION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Option_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOption_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOption_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOption_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Option_clauseContext option_clause() throws RecognitionException {
		Option_clauseContext _localctx = new Option_clauseContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_option_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8790);
			match(OPTION);
			setState(8791);
			match(LR_BRACKET);
			setState(8792);
			option();
			setState(8797);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8793);
				match(COMMA);
				setState(8794);
				option();
				}
				}
				setState(8799);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(8800);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionContext extends ParserRuleContext {
		public Token number_rows;
		public Token number_of_processors;
		public Token number_recursion;
		public TerminalNode FAST() { return getToken(TSQLParser.FAST, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode GROUP() { return getToken(TSQLParser.GROUP, 0); }
		public TerminalNode HASH() { return getToken(TSQLParser.HASH, 0); }
		public TerminalNode ORDER() { return getToken(TSQLParser.ORDER, 0); }
		public TerminalNode UNION() { return getToken(TSQLParser.UNION, 0); }
		public TerminalNode MERGE() { return getToken(TSQLParser.MERGE, 0); }
		public TerminalNode CONCAT() { return getToken(TSQLParser.CONCAT, 0); }
		public TerminalNode JOIN() { return getToken(TSQLParser.JOIN, 0); }
		public TerminalNode LOOP() { return getToken(TSQLParser.LOOP, 0); }
		public TerminalNode EXPAND() { return getToken(TSQLParser.EXPAND, 0); }
		public TerminalNode VIEWS() { return getToken(TSQLParser.VIEWS, 0); }
		public TerminalNode FORCE() { return getToken(TSQLParser.FORCE, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(TSQLParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode KEEP() { return getToken(TSQLParser.KEEP, 0); }
		public TerminalNode PLAN() { return getToken(TSQLParser.PLAN, 0); }
		public TerminalNode KEEPFIXED() { return getToken(TSQLParser.KEEPFIXED, 0); }
		public TerminalNode MAXDOP() { return getToken(TSQLParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(TSQLParser.MAXRECURSION, 0); }
		public TerminalNode OPTIMIZE() { return getToken(TSQLParser.OPTIMIZE, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Optimize_for_argContext> optimize_for_arg() {
			return getRuleContexts(Optimize_for_argContext.class);
		}
		public Optimize_for_argContext optimize_for_arg(int i) {
			return getRuleContext(Optimize_for_argContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode UNKNOWN() { return getToken(TSQLParser.UNKNOWN, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(TSQLParser.PARAMETERIZATION, 0); }
		public TerminalNode SIMPLE() { return getToken(TSQLParser.SIMPLE, 0); }
		public TerminalNode FORCED() { return getToken(TSQLParser.FORCED, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSQLParser.RECOMPILE, 0); }
		public TerminalNode ROBUST() { return getToken(TSQLParser.ROBUST, 0); }
		public TerminalNode USE() { return getToken(TSQLParser.USE, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode QUERYTRACEON() { return getToken(TSQLParser.QUERYTRACEON, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_option);
		int _la;
		try {
			setState(8849);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1238,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8802);
				match(FAST);
				setState(8803);
				((OptionContext)_localctx).number_rows = match(DECIMAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8804);
				_la = _input.LA(1);
				if ( !(_la==ORDER || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8805);
				match(GROUP);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(8806);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==CONCAT || _la==HASH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8807);
				match(UNION);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(8808);
				_la = _input.LA(1);
				if ( !(_la==MERGE || _la==HASH || _la==LOOP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(8809);
				match(JOIN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(8810);
				match(EXPAND);
				setState(8811);
				match(VIEWS);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(8812);
				match(FORCE);
				setState(8813);
				match(ORDER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(8814);
				match(IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(8815);
				match(KEEP);
				setState(8816);
				match(PLAN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(8817);
				match(KEEPFIXED);
				setState(8818);
				match(PLAN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(8819);
				match(MAXDOP);
				setState(8820);
				((OptionContext)_localctx).number_of_processors = match(DECIMAL);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(8821);
				match(MAXRECURSION);
				setState(8822);
				((OptionContext)_localctx).number_recursion = match(DECIMAL);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(8823);
				match(OPTIMIZE);
				setState(8824);
				match(FOR);
				setState(8825);
				match(LR_BRACKET);
				setState(8826);
				optimize_for_arg();
				setState(8831);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(8827);
					match(COMMA);
					setState(8828);
					optimize_for_arg();
					}
					}
					setState(8833);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(8834);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(8836);
				match(OPTIMIZE);
				setState(8837);
				match(FOR);
				setState(8838);
				match(UNKNOWN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(8839);
				match(PARAMETERIZATION);
				setState(8840);
				_la = _input.LA(1);
				if ( !(_la==FORCED || _la==SIMPLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(8841);
				match(RECOMPILE);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(8842);
				match(ROBUST);
				setState(8843);
				match(PLAN);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(8844);
				match(USE);
				setState(8845);
				match(PLAN);
				setState(8846);
				match(STRING);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(8847);
				match(QUERYTRACEON);
				setState(8848);
				match(DECIMAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Optimize_for_argContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode UNKNOWN() { return getToken(TSQLParser.UNKNOWN, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public TerminalNode NULL() { return getToken(TSQLParser.NULL, 0); }
		public Optimize_for_argContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optimize_for_arg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOptimize_for_arg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOptimize_for_arg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOptimize_for_arg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Optimize_for_argContext optimize_for_arg() throws RecognitionException {
		Optimize_for_argContext _localctx = new Optimize_for_argContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_optimize_for_arg);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8851);
			match(LOCAL_ID);
			setState(8858);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNKNOWN:
				{
				setState(8852);
				match(UNKNOWN);
				}
				break;
			case EQUAL:
				{
				setState(8853);
				match(EQUAL);
				setState(8856);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FALSE:
				case TRUE:
				case DECIMAL:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case IPV4_ADDR:
				case DOLLAR:
				case PLUS:
				case MINUS:
					{
					setState(8854);
					constant();
					}
					break;
				case NULL:
					{
					setState(8855);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_listContext extends ParserRuleContext {
		public List<Select_list_elemContext> select_list_elem() {
			return getRuleContexts(Select_list_elemContext.class);
		}
		public Select_list_elemContext select_list_elem(int i) {
			return getRuleContext(Select_list_elemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Select_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSelect_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSelect_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSelect_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_listContext select_list() throws RecognitionException {
		Select_listContext _localctx = new Select_listContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_select_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(8860);
			select_list_elem();
			setState(8865);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1241,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(8861);
					match(COMMA);
					setState(8862);
					select_list_elem();
					}
					} 
				}
				setState(8867);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1241,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elemContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(TSQLParser.STAR, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public TerminalNode DOLLAR() { return getToken(TSQLParser.DOLLAR, 0); }
		public TerminalNode IDENTITY() { return getToken(TSQLParser.IDENTITY, 0); }
		public TerminalNode ROWGUID() { return getToken(TSQLParser.ROWGUID, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public Select_list_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSelect_list_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSelect_list_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSelect_list_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elemContext select_list_elem() throws RecognitionException {
		Select_list_elemContext _localctx = new Select_list_elemContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_select_list_elem);
		int _la;
		try {
			setState(8887);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1246,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)))) != 0)) {
					{
					setState(8868);
					qualified_name();
					setState(8869);
					match(DOT);
					}
				}

				setState(8873);
				match(STAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8879);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1243,_ctx) ) {
				case 1:
					{
					setState(8874);
					match(DOLLAR);
					setState(8875);
					match(IDENTITY);
					}
					break;
				case 2:
					{
					setState(8876);
					match(DOLLAR);
					setState(8877);
					match(ROWGUID);
					}
					break;
				case 3:
					{
					setState(8878);
					expression(0);
					}
					break;
				}
				setState(8885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1245,_ctx) ) {
				case 1:
					{
					setState(8882);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(8881);
						match(AS);
						}
					}

					setState(8884);
					column_alias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_xmlContext extends ParserRuleContext {
		public TerminalNode OPENXML() { return getToken(TSQLParser.OPENXML, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public Schema_declarationContext schema_declaration() {
			return getRuleContext(Schema_declarationContext.class,0);
		}
		public Open_xmlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_xml; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOpen_xml(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOpen_xml(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOpen_xml(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_xmlContext open_xml() throws RecognitionException {
		Open_xmlContext _localctx = new Open_xmlContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_open_xml);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8889);
			match(OPENXML);
			setState(8890);
			match(LR_BRACKET);
			setState(8891);
			expression(0);
			setState(8892);
			match(COMMA);
			setState(8893);
			expression(0);
			setState(8896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(8894);
				match(COMMA);
				setState(8895);
				expression(0);
				}
			}

			setState(8898);
			match(RR_BRACKET);
			setState(8904);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1248,_ctx) ) {
			case 1:
				{
				setState(8899);
				match(WITH);
				setState(8900);
				match(LR_BRACKET);
				setState(8901);
				schema_declaration();
				setState(8902);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_declarationContext extends ParserRuleContext {
		public List<Column_declarationContext> column_declaration() {
			return getRuleContexts(Column_declarationContext.class);
		}
		public Column_declarationContext column_declaration(int i) {
			return getRuleContext(Column_declarationContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Schema_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSchema_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSchema_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSchema_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_declarationContext schema_declaration() throws RecognitionException {
		Schema_declarationContext _localctx = new Schema_declarationContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_schema_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8906);
			column_declaration();
			setState(8911);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8907);
				match(COMMA);
				setState(8908);
				column_declaration();
				}
				}
				setState(8913);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_declarationContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Column_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumn_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumn_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumn_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_declarationContext column_declaration() throws RecognitionException {
		Column_declarationContext _localctx = new Column_declarationContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_column_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8914);
			id();
			setState(8915);
			data_type();
			setState(8917);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING) {
				{
				setState(8916);
				match(STRING);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Change_tableContext extends ParserRuleContext {
		public TerminalNode CHANGETABLE() { return getToken(TSQLParser.CHANGETABLE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode CHANGES() { return getToken(TSQLParser.CHANGES, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public TerminalNode VERSION() { return getToken(TSQLParser.VERSION, 0); }
		public Primary_key_valuesContext primary_key_values() {
			return getRuleContext(Primary_key_valuesContext.class,0);
		}
		public TerminalNode NULL() { return getToken(TSQLParser.NULL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public Change_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_change_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterChange_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitChange_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitChange_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Change_tableContext change_table() throws RecognitionException {
		Change_tableContext _localctx = new Change_tableContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_change_table);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8919);
			match(CHANGETABLE);
			setState(8920);
			match(LR_BRACKET);
			setState(8931);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHANGES:
				{
				setState(8921);
				match(CHANGES);
				setState(8922);
				qualified_name();
				setState(8923);
				match(COMMA);
				setState(8924);
				_la = _input.LA(1);
				if ( !(_la==NULL || _la==LOCAL_ID || _la==DECIMAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case VERSION:
				{
				setState(8926);
				match(VERSION);
				setState(8927);
				qualified_name();
				setState(8928);
				match(COMMA);
				setState(8929);
				primary_key_values();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(8933);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Primary_key_valuesContext extends ParserRuleContext {
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public Full_column_name_listContext full_column_name_list() {
			return getRuleContext(Full_column_name_listContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Primary_key_valuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_primary_key_values; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterPrimary_key_values(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitPrimary_key_values(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitPrimary_key_values(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Primary_key_valuesContext primary_key_values() throws RecognitionException {
		Primary_key_valuesContext _localctx = new Primary_key_valuesContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_primary_key_values);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8935);
			match(LR_BRACKET);
			setState(8936);
			full_column_name_list();
			setState(8937);
			match(RR_BRACKET);
			setState(8938);
			match(COMMA);
			setState(8939);
			match(LR_BRACKET);
			setState(8940);
			expression_list();
			setState(8941);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_name_listContext extends ParserRuleContext {
		public List<Full_column_nameContext> full_column_name() {
			return getRuleContexts(Full_column_nameContext.class);
		}
		public Full_column_nameContext full_column_name(int i) {
			return getRuleContext(Full_column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Full_column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFull_column_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFull_column_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFull_column_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_name_listContext full_column_name_list() throws RecognitionException {
		Full_column_name_listContext _localctx = new Full_column_name_listContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_full_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8943);
			full_column_name();
			setState(8948);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(8944);
				match(COMMA);
				setState(8945);
				full_column_name();
				}
				}
				setState(8950);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_name_with_hintContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public With_table_hintsContext with_table_hints() {
			return getRuleContext(With_table_hintsContext.class,0);
		}
		public Table_name_with_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name_with_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTable_name_with_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTable_name_with_hint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTable_name_with_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_name_with_hintContext table_name_with_hint() throws RecognitionException {
		Table_name_with_hintContext _localctx = new Table_name_with_hintContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_table_name_with_hint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8951);
			qualified_name();
			setState(8953);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1253,_ctx) ) {
			case 1:
				{
				setState(8952);
				with_table_hints();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rowset_functionContext extends ParserRuleContext {
		public Token provider_name;
		public Token connectionString;
		public Token sql;
		public Token data_file;
		public TerminalNode OPENROWSET() { return getToken(TSQLParser.OPENROWSET, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public TerminalNode BULK() { return getToken(TSQLParser.BULK, 0); }
		public List<Bulk_optionContext> bulk_option() {
			return getRuleContexts(Bulk_optionContext.class);
		}
		public Bulk_optionContext bulk_option(int i) {
			return getRuleContext(Bulk_optionContext.class,i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rowset_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rowset_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterRowset_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitRowset_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitRowset_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rowset_functionContext rowset_function() throws RecognitionException {
		Rowset_functionContext _localctx = new Rowset_functionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_rowset_function);
		int _la;
		try {
			setState(8981);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1256,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8955);
				match(OPENROWSET);
				setState(8956);
				match(LR_BRACKET);
				setState(8957);
				((Rowset_functionContext)_localctx).provider_name = match(STRING);
				setState(8958);
				match(COMMA);
				setState(8959);
				((Rowset_functionContext)_localctx).connectionString = match(STRING);
				setState(8960);
				match(COMMA);
				setState(8961);
				((Rowset_functionContext)_localctx).sql = match(STRING);
				setState(8962);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(8963);
				match(OPENROWSET);
				setState(8964);
				match(LR_BRACKET);
				setState(8965);
				match(BULK);
				setState(8966);
				((Rowset_functionContext)_localctx).data_file = match(STRING);
				setState(8967);
				match(COMMA);
				setState(8977);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1255,_ctx) ) {
				case 1:
					{
					setState(8968);
					bulk_option();
					setState(8973);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(8969);
						match(COMMA);
						setState(8970);
						bulk_option();
						}
						}
						setState(8975);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case 2:
					{
					setState(8976);
					id();
					}
					break;
				}
				setState(8979);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bulk_optionContext extends ParserRuleContext {
		public Token bulk_option_value;
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Bulk_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bulk_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBulk_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBulk_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBulk_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bulk_optionContext bulk_option() throws RecognitionException {
		Bulk_optionContext _localctx = new Bulk_optionContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_bulk_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8983);
			id();
			setState(8984);
			match(EQUAL);
			setState(8985);
			((Bulk_optionContext)_localctx).bulk_option_value = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DECIMAL || _la==STRING) ) {
				((Bulk_optionContext)_localctx).bulk_option_value = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Derived_tableContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Derived_tableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_derived_table; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDerived_table(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDerived_table(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDerived_table(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Derived_tableContext derived_table() throws RecognitionException {
		Derived_tableContext _localctx = new Derived_tableContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_derived_table);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(8987);
			match(LR_BRACKET);
			setState(8988);
			select_statement();
			setState(8989);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Data_typeContext convert_data_type;
		public ExpressionContext convert_expression;
		public ExpressionContext style;
		public Token seed;
		public Token increment;
		public Token xquery;
		public Qualified_nameContext sequence_name;
		public Scalar_function_nameContext scalar_function_name() {
			return getRuleContext(Scalar_function_nameContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public TerminalNode STAR() { return getToken(TSQLParser.STAR, 0); }
		public All_distinct_expressionContext all_distinct_expression() {
			return getRuleContext(All_distinct_expressionContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode CAST() { return getToken(TSQLParser.CAST, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(TSQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(TSQLParser.AS, i);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public TerminalNode CONVERT() { return getToken(TSQLParser.CONVERT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode PARSE() { return getToken(TSQLParser.PARSE, 0); }
		public TerminalNode USING() { return getToken(TSQLParser.USING, 0); }
		public TerminalNode COALESCE() { return getToken(TSQLParser.COALESCE, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(TSQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(TSQLParser.CURRENT_USER, 0); }
		public TerminalNode IDENTITY() { return getToken(TSQLParser.IDENTITY, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public TerminalNode IIF() { return getToken(TSQLParser.IIF, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(TSQLParser.MIN_ACTIVE_ROWVERSION, 0); }
		public TerminalNode NODES() { return getToken(TSQLParser.NODES, 0); }
		public As_table_aliasContext as_table_alias() {
			return getRuleContext(As_table_aliasContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode NULLIF() { return getToken(TSQLParser.NULLIF, 0); }
		public TerminalNode SESSION_USER() { return getToken(TSQLParser.SESSION_USER, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(TSQLParser.SYSTEM_USER, 0); }
		public TerminalNode OPENJSON() { return getToken(TSQLParser.OPENJSON, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<Column_declarationContext> column_declaration() {
			return getRuleContexts(Column_declarationContext.class);
		}
		public Column_declarationContext column_declaration(int i) {
			return getRuleContext(Column_declarationContext.class,i);
		}
		public List<TerminalNode> JSON() { return getTokens(TSQLParser.JSON); }
		public TerminalNode JSON(int i) {
			return getToken(TSQLParser.JSON, i);
		}
		public TerminalNode USER() { return getToken(TSQLParser.USER, 0); }
		public TerminalNode FUNC_CURSOR_ROWS() { return getToken(TSQLParser.FUNC_CURSOR_ROWS, 0); }
		public TerminalNode FUNC_FETCH_STATUS() { return getToken(TSQLParser.FUNC_FETCH_STATUS, 0); }
		public TerminalNode FUNC_DATEFIRST() { return getToken(TSQLParser.FUNC_DATEFIRST, 0); }
		public TerminalNode FUNC_PROCID() { return getToken(TSQLParser.FUNC_PROCID, 0); }
		public TerminalNode FUNC_ERROR() { return getToken(TSQLParser.FUNC_ERROR, 0); }
		public TerminalNode FUNC_IDENTITY() { return getToken(TSQLParser.FUNC_IDENTITY, 0); }
		public TerminalNode FUNC_PACK_RECEIVED() { return getToken(TSQLParser.FUNC_PACK_RECEIVED, 0); }
		public TerminalNode FUNC_ROWCOUNT() { return getToken(TSQLParser.FUNC_ROWCOUNT, 0); }
		public TerminalNode FUNC_TRANCOUNT() { return getToken(TSQLParser.FUNC_TRANCOUNT, 0); }
		public TerminalNode NEXT() { return getToken(TSQLParser.NEXT, 0); }
		public TerminalNode VALUE() { return getToken(TSQLParser.VALUE, 0); }
		public TerminalNode FOR() { return getToken(TSQLParser.FOR, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode STRING_AGG() { return getToken(TSQLParser.STRING_AGG, 0); }
		public TerminalNode WITHIN_GROUP() { return getToken(TSQLParser.WITHIN_GROUP, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode TRIM() { return getToken(TSQLParser.TRIM, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public TerminalNode DOLLAR() { return getToken(TSQLParser.DOLLAR, 0); }
		public TerminalNode PARTITION() { return getToken(TSQLParser.PARTITION, 0); }
		public List<TerminalNode> DOT() { return getTokens(TSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSQLParser.DOT, i);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFunction_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_function_call);
		int _la;
		try {
			setState(9149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1270,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(8991);
				scalar_function_name();
				setState(8992);
				match(LR_BRACKET);
				setState(8998);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STAR:
					{
					setState(8993);
					match(STAR);
					}
					break;
				case ALL:
				case DISTINCT:
					{
					setState(8994);
					all_distinct_expression();
					}
					break;
				case CASE:
				case COALESCE:
				case CONVERT:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case DEFAULT:
				case FILLFACTOR:
				case IDENTITY:
				case LEFT:
				case NULL:
				case NULLIF:
				case OVER:
				case PRECISION:
				case RIGHT:
				case SESSION_USER:
				case SYSTEM_USER:
				case USER:
				case FUNC_IDENTITY:
				case FUNC_CURSOR_ROWS:
				case FUNC_DATEFIRST:
				case FUNC_ERROR:
				case FUNC_FETCH_STATUS:
				case FUNC_PACK_RECEIVED:
				case FUNC_PROCID:
				case FUNC_ROWCOUNT:
				case FUNC_TRANCOUNT:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case LEFT_FIGURE_PAREN:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case LOCAL_ID:
				case DECIMAL:
				case ID:
				case STRING:
				case BINARY:
				case FLOAT:
				case REAL:
				case IPV4_ADDR:
				case DOLLAR:
				case LR_BRACKET:
				case RR_BRACKET:
				case PLUS:
				case MINUS:
				case BIT_NOT:
					{
					setState(8996);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CASE) | (1L << COALESCE) | (1L << CONVERT) | (1L << CURRENT_TIMESTAMP) | (1L << CURRENT_USER) | (1L << DEFAULT))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (FILLFACTOR - 65)) | (1L << (IDENTITY - 65)) | (1L << (LEFT - 65)) | (1L << (NULL - 65)) | (1L << (NULLIF - 65)) | (1L << (OVER - 65)) | (1L << (PRECISION - 65)))) != 0) || ((((_la - 138)) & ~0x3f) == 0 && ((1L << (_la - 138)) & ((1L << (RIGHT - 138)) | (1L << (SESSION_USER - 138)) | (1L << (SYSTEM_USER - 138)) | (1L << (USER - 138)) | (1L << (FUNC_IDENTITY - 138)) | (1L << (FUNC_CURSOR_ROWS - 138)) | (1L << (FUNC_DATEFIRST - 138)) | (1L << (FUNC_ERROR - 138)) | (1L << (FUNC_FETCH_STATUS - 138)) | (1L << (FUNC_PACK_RECEIVED - 138)) | (1L << (FUNC_PROCID - 138)) | (1L << (FUNC_ROWCOUNT - 138)) | (1L << (FUNC_TRANCOUNT - 138)) | (1L << (ABSENT - 138)) | (1L << (ABSOLUTE - 138)) | (1L << (ACCENT_SENSITIVITY - 138)) | (1L << (ACTION - 138)) | (1L << (ACTIVATION - 138)) | (1L << (ACTIVE - 138)) | (1L << (ADDRESS - 138)) | (1L << (AES_128 - 138)))) != 0) || ((((_la - 202)) & ~0x3f) == 0 && ((1L << (_la - 202)) & ((1L << (AES_192 - 202)) | (1L << (AES_256 - 202)) | (1L << (AES - 202)) | (1L << (AFFINITY - 202)) | (1L << (AFTER - 202)) | (1L << (AGGREGATE - 202)) | (1L << (ALGORITHM - 202)) | (1L << (ALLOW_CONNECTIONS - 202)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 202)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 202)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 202)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 202)) | (1L << (ALLOWED - 202)) | (1L << (ANONYMOUS - 202)) | (1L << (ANSI_NULL_DEFAULT - 202)) | (1L << (ANSI_NULLS - 202)) | (1L << (ANSI_PADDING - 202)) | (1L << (ANSI_WARNINGS - 202)) | (1L << (APPEND - 202)) | (1L << (APPLICATION_LOG - 202)) | (1L << (APPLICATION - 202)) | (1L << (APPLY - 202)) | (1L << (ARITHABORT - 202)) | (1L << (ASSEMBLY - 202)) | (1L << (ASYMMETRIC - 202)) | (1L << (ASYNCHRONOUS_COMMIT - 202)) | (1L << (AUDIT_GUID - 202)) | (1L << (AUDIT - 202)) | (1L << (AUTHENTICATION - 202)) | (1L << (AUTO_CLEANUP - 202)) | (1L << (AUTO_CLOSE - 202)) | (1L << (AUTO_CREATE_STATISTICS - 202)) | (1L << (AUTO_SHRINK - 202)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 202)) | (1L << (AUTO_UPDATE_STATISTICS - 202)) | (1L << (AUTO - 202)) | (1L << (AUTOGROW_ALL_FILES - 202)) | (1L << (AUTOGROW_SINGLE_FILE - 202)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 202)) | (1L << (AUTOMATIC - 202)) | (1L << (AVAILABILITY_MODE - 202)) | (1L << (AVAILABILITY - 202)) | (1L << (BACKUP_PRIORITY - 202)) | (1L << (BEFORE - 202)) | (1L << (BEGIN_DIALOG - 202)) | (1L << (BINARY_BASE64 - 202)) | (1L << (BINDING - 202)) | (1L << (BLOB_STORAGE - 202)) | (1L << (BLOCK - 202)) | (1L << (BLOCKING_HIERARCHY - 202)) | (1L << (BLOCKSIZE - 202)) | (1L << (BROKER_INSTANCE - 202)) | (1L << (BROKER - 202)) | (1L << (BUFFER - 202)) | (1L << (BUFFERCOUNT - 202)) | (1L << (BULK_LOGGED - 202)) | (1L << (CACHE - 202)) | (1L << (CALLED - 202)) | (1L << (CALLER - 202)) | (1L << (CAP_CPU_PERCENT - 202)) | (1L << (CAST - 202)) | (1L << (CATALOG - 202)) | (1L << (CATCH - 202)) | (1L << (CERTIFICATE - 202)))) != 0) || ((((_la - 266)) & ~0x3f) == 0 && ((1L << (_la - 266)) & ((1L << (CHANGE_RETENTION - 266)) | (1L << (CHANGE_TRACKING - 266)) | (1L << (CHANGES - 266)) | (1L << (CHANGETABLE - 266)) | (1L << (CHAR - 266)) | (1L << (CHARACTER - 266)) | (1L << (CHECK_EXPIRATION - 266)) | (1L << (CHECK_POLICY - 266)) | (1L << (CHECKSUM - 266)) | (1L << (CLASSIFIER_FUNCTION - 266)) | (1L << (CLEANUP - 266)) | (1L << (CLUSTER - 266)) | (1L << (COLLECTION - 266)) | (1L << (COLUMN_MASTER_KEY - 266)) | (1L << (COMMITTED - 266)) | (1L << (COMPATIBILITY_LEVEL - 266)) | (1L << (COMPRESSION - 266)) | (1L << (CONCAT_NULL_YIELDS_NULL - 266)) | (1L << (CONCAT - 266)) | (1L << (CONFIGURATION - 266)) | (1L << (CONNECT - 266)) | (1L << (CONTAINMENT - 266)) | (1L << (CONTENT - 266)) | (1L << (CONTEXT - 266)) | (1L << (CONTINUE_AFTER_ERROR - 266)) | (1L << (CONTRACT_NAME - 266)) | (1L << (CONTRACT - 266)) | (1L << (CONTROL - 266)) | (1L << (CONVERSATION - 266)) | (1L << (COOKIE - 266)) | (1L << (COPY_ONLY - 266)) | (1L << (COUNTER - 266)) | (1L << (CPU - 266)) | (1L << (CREATE_NEW - 266)) | (1L << (CREATION_DISPOSITION - 266)) | (1L << (CREDENTIAL - 266)) | (1L << (CRYPTOGRAPHIC - 266)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 266)) | (1L << (CURSOR_DEFAULT - 266)) | (1L << (CYCLE - 266)) | (1L << (DATA_COMPRESSION - 266)) | (1L << (DATA_SOURCE - 266)) | (1L << (DATA - 266)) | (1L << (DATABASE_MIRRORING - 266)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 266)) | (1L << (DAYS - 266)) | (1L << (DB_CHAINING - 266)) | (1L << (DB_FAILOVER - 266)) | (1L << (DECRYPTION - 266)) | (1L << (DEFAULT_DATABASE - 266)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 266)) | (1L << (DEFAULT_LANGUAGE - 266)) | (1L << (DEFAULT_SCHEMA - 266)) | (1L << (DELAY - 266)) | (1L << (DELAYED_DURABILITY - 266)) | (1L << (DEPENDENTS - 266)) | (1L << (DES - 266)) | (1L << (DESCRIPTION - 266)) | (1L << (DESX - 266)) | (1L << (DHCP - 266)) | (1L << (DIAGNOSTICS - 266)) | (1L << (DIALOG - 266)) | (1L << (DIFFERENTIAL - 266)) | (1L << (DIRECTORY_NAME - 266)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (DISABLE_BROKER - 330)) | (1L << (DISABLE - 330)) | (1L << (DISABLED - 330)) | (1L << (DOCUMENT - 330)) | (1L << (DTC_SUPPORT - 330)) | (1L << (DYNAMIC - 330)) | (1L << (ELEMENTS - 330)) | (1L << (EMERGENCY - 330)) | (1L << (EMPTY - 330)) | (1L << (ENABLE_BROKER - 330)) | (1L << (ENABLE - 330)) | (1L << (ENABLED - 330)) | (1L << (ENCRYPTED_VALUE - 330)) | (1L << (ENCRYPTION - 330)) | (1L << (ENDPOINT_URL - 330)) | (1L << (ENDPOINT - 330)) | (1L << (ERROR_BROKER_CONVERSATIONS - 330)) | (1L << (ERROR - 330)) | (1L << (EVENT_RETENTION_MODE - 330)) | (1L << (EVENT - 330)) | (1L << (EXCLUSIVE - 330)) | (1L << (EXECUTABLE_FILE - 330)) | (1L << (EXECUTABLE - 330)) | (1L << (EXPAND - 330)) | (1L << (EXPIREDATE - 330)) | (1L << (EXPIRY_DATE - 330)) | (1L << (EXPLICIT - 330)) | (1L << (EXTENSION - 330)) | (1L << (EXTERNAL_ACCESS - 330)) | (1L << (FAIL_OPERATION - 330)) | (1L << (FAILOVER_MODE - 330)) | (1L << (FAILOVER - 330)) | (1L << (FAILURE_CONDITION_LEVEL - 330)) | (1L << (FAILURECONDITIONLEVEL - 330)) | (1L << (FALSE - 330)) | (1L << (FAN_IN - 330)) | (1L << (FAST_FORWARD - 330)) | (1L << (FAST - 330)) | (1L << (FILE_SNAPSHOT - 330)) | (1L << (FILEGROUP - 330)) | (1L << (FILEGROWTH - 330)) | (1L << (FILENAME - 330)) | (1L << (FILEPATH - 330)) | (1L << (FILESTREAM_ON - 330)) | (1L << (FILESTREAM - 330)) | (1L << (FILTER - 330)) | (1L << (FIRST - 330)) | (1L << (FOLLOWING - 330)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 330)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 330)) | (1L << (FORCE - 330)) | (1L << (FORCED - 330)) | (1L << (FORCESEEK - 330)) | (1L << (FORMAT - 330)) | (1L << (FORWARD_ONLY - 330)) | (1L << (FULLSCAN - 330)) | (1L << (FULLTEXT - 330)) | (1L << (GB - 330)) | (1L << (GET - 330)) | (1L << (GLOBAL - 330)) | (1L << (GOVERNOR - 330)) | (1L << (GROUP_MAX_REQUESTS - 330)) | (1L << (HADR - 330)) | (1L << (HASH - 330)))) != 0) || ((((_la - 394)) & ~0x3f) == 0 && ((1L << (_la - 394)) & ((1L << (HASHED - 394)) | (1L << (HEALTH_CHECK_TIMEOUT - 394)) | (1L << (HEALTHCHECKTIMEOUT - 394)) | (1L << (HIGH - 394)) | (1L << (HONOR_BROKER_PRIORITY - 394)) | (1L << (HOURS - 394)) | (1L << (IDENTITY_VALUE - 394)) | (1L << (IIF - 394)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 394)) | (1L << (IMMEDIATE - 394)) | (1L << (IMPERSONATE - 394)) | (1L << (IMPORTANCE - 394)) | (1L << (INCLUDE_NULL_VALUES - 394)) | (1L << (INCLUDE - 394)) | (1L << (INCREMENT - 394)) | (1L << (INCREMENTAL - 394)) | (1L << (INFINITE - 394)) | (1L << (INIT - 394)) | (1L << (INITIATOR - 394)) | (1L << (INPUT - 394)) | (1L << (INSENSITIVE - 394)) | (1L << (INSTEAD - 394)) | (1L << (IO - 394)) | (1L << (IP - 394)) | (1L << (ISOLATION - 394)) | (1L << (JSON - 394)) | (1L << (KB - 394)) | (1L << (KEEP - 394)) | (1L << (KEEPFIXED - 394)) | (1L << (KERBEROS - 394)) | (1L << (KEY_PATH - 394)) | (1L << (KEY_SOURCE - 394)) | (1L << (KEY_STORE_PROVIDER_NAME - 394)) | (1L << (KEYS - 394)) | (1L << (KEYSET - 394)) | (1L << (LANGUAGE - 394)) | (1L << (LAST - 394)) | (1L << (LEVEL - 394)) | (1L << (LIBRARY - 394)) | (1L << (LIFETIME - 394)) | (1L << (LINUX - 394)) | (1L << (LIST - 394)) | (1L << (LISTENER_IP - 394)) | (1L << (LISTENER_PORT - 394)) | (1L << (LISTENER_URL - 394)) | (1L << (LISTENER - 394)) | (1L << (LOB_COMPACTION - 394)) | (1L << (LOCAL_SERVICE_NAME - 394)) | (1L << (LOCAL - 394)) | (1L << (LOCATION - 394)) | (1L << (LOCK_ESCALATION - 394)) | (1L << (LOCK - 394)) | (1L << (LOG - 394)) | (1L << (LOGIN - 394)) | (1L << (LOOP - 394)) | (1L << (LOW - 394)) | (1L << (MANUAL - 394)) | (1L << (MARK - 394)) | (1L << (MASTER - 394)) | (1L << (MATCHED - 394)) | (1L << (MATERIALIZED - 394)) | (1L << (MAX_CPU_PERCENT - 394)) | (1L << (MAX_DISPATCH_LATENCY - 394)) | (1L << (MAX_DOP - 394)))) != 0) || ((((_la - 458)) & ~0x3f) == 0 && ((1L << (_la - 458)) & ((1L << (MAX_EVENT_SIZE - 458)) | (1L << (MAX_FILES - 458)) | (1L << (MAX_IOPS_PER_VOLUME - 458)) | (1L << (MAX_MEMORY_PERCENT - 458)) | (1L << (MAX_MEMORY - 458)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 458)) | (1L << (MAX_PROCESSES - 458)) | (1L << (MAX_QUEUE_READERS - 458)) | (1L << (MAX_ROLLOVER_FILES - 458)) | (1L << (MAX_SIZE - 458)) | (1L << (MAX - 458)) | (1L << (MAXDOP - 458)) | (1L << (MAXRECURSION - 458)) | (1L << (MAXSIZE - 458)) | (1L << (MAXTRANSFER - 458)) | (1L << (MAXVALUE - 458)) | (1L << (MB - 458)) | (1L << (MEDIADESCRIPTION - 458)) | (1L << (MEDIANAME - 458)) | (1L << (MEDIUM - 458)) | (1L << (MEMBER - 458)) | (1L << (MEMORY_OPTIMIZED_DATA - 458)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 458)) | (1L << (MEMORY_OPTIMIZED - 458)) | (1L << (MEMORY_PARTITION_MODE - 458)) | (1L << (MESSAGE_FORWARD_SIZE - 458)) | (1L << (MESSAGE_FORWARDING - 458)) | (1L << (MESSAGE - 458)) | (1L << (MIN_ACTIVE_ROWVERSION - 458)) | (1L << (MIN_CPU_PERCENT - 458)) | (1L << (MIN_IOPS_PER_VOLUME - 458)) | (1L << (MIN_MEMORY_PERCENT - 458)) | (1L << (MINUTES - 458)) | (1L << (MINVALUE - 458)) | (1L << (MIRROR_ADDRESS - 458)) | (1L << (MIRROR - 458)) | (1L << (MIXED_PAGE_ALLOCATION - 458)) | (1L << (MODE - 458)) | (1L << (MODIFY - 458)) | (1L << (MOVE - 458)) | (1L << (MULTI_USER - 458)) | (1L << (MUST_CHANGE - 458)) | (1L << (NAME - 458)) | (1L << (NCHAR - 458)) | (1L << (NEGOTIATE - 458)) | (1L << (NESTED_TRIGGERS - 458)) | (1L << (NEW_ACCOUNT - 458)) | (1L << (NEW_BROKER - 458)) | (1L << (NEW_PASSWORD - 458)) | (1L << (NEWNAME - 458)) | (1L << (NEXT - 458)) | (1L << (NO_CHECKSUM - 458)) | (1L << (NO_COMPRESSION - 458)) | (1L << (NO_EVENT_LOSS - 458)) | (1L << (NO_TRUNCATE - 458)) | (1L << (NO_WAIT - 458)) | (1L << (NO - 458)) | (1L << (NODES - 458)) | (1L << (NOEXPAND - 458)) | (1L << (NOFORMAT - 458)) | (1L << (NOINIT - 458)) | (1L << (NON_TRANSACTED_ACCESS - 458)) | (1L << (NONE - 458)) | (1L << (NORECOMPUTE - 458)))) != 0) || ((((_la - 522)) & ~0x3f) == 0 && ((1L << (_la - 522)) & ((1L << (NORECOVERY - 522)) | (1L << (NOREWIND - 522)) | (1L << (NOSKIP - 522)) | (1L << (NOTIFICATION - 522)) | (1L << (NOUNLOAD - 522)) | (1L << (NOWAIT - 522)) | (1L << (NTLM - 522)) | (1L << (NUMANODE - 522)) | (1L << (NUMERIC_ROUNDABORT - 522)) | (1L << (OBJECT - 522)) | (1L << (OFFLINE - 522)) | (1L << (OFFSET - 522)) | (1L << (OLD_ACCOUNT - 522)) | (1L << (OLD_PASSWORD - 522)) | (1L << (ON_FAILURE - 522)) | (1L << (ONLINE - 522)) | (1L << (ONLY - 522)) | (1L << (OPEN_EXISTING - 522)) | (1L << (OPENJSON - 522)) | (1L << (OPTIMISTIC - 522)) | (1L << (OPTIMIZE - 522)) | (1L << (OUT - 522)) | (1L << (OUTPUT - 522)) | (1L << (OWNER - 522)) | (1L << (PAGE_VERIFY - 522)) | (1L << (PARAMETERIZATION - 522)) | (1L << (PARSE - 522)) | (1L << (PARTIAL - 522)) | (1L << (PARTITION - 522)) | (1L << (PARTITIONS - 522)) | (1L << (PARTNER - 522)) | (1L << (PASSWORD - 522)) | (1L << (PATH - 522)) | (1L << (PAUSE - 522)) | (1L << (PER_CPU - 522)) | (1L << (PER_DB - 522)) | (1L << (PER_NODE - 522)) | (1L << (PERMISSION_SET - 522)) | (1L << (PERSIST_SAMPLE_PERSENT - 522)) | (1L << (PERSISTED - 522)) | (1L << (PERSISTENT_LOG_BUFFER - 522)) | (1L << (PLATFORM - 522)) | (1L << (POISON_MESSAGE_HANDLING - 522)) | (1L << (POLICY - 522)) | (1L << (POOL - 522)) | (1L << (POPULATION - 522)) | (1L << (PORT - 522)) | (1L << (PRECEDING - 522)) | (1L << (PREDICATE - 522)) | (1L << (PRIMARY_ROLE - 522)) | (1L << (PRIOR - 522)) | (1L << (PRIORITY_LEVEL - 522)) | (1L << (PRIORITY - 522)) | (1L << (PRIVATE_KEY - 522)) | (1L << (PRIVATE - 522)) | (1L << (PRIVILEGES - 522)) | (1L << (PROCEDURE_NAME - 522)) | (1L << (PROCESS - 522)) | (1L << (PROFILE - 522)) | (1L << (PROPERTY_DESCRIPTION - 522)) | (1L << (PROPERTY_INT_ID - 522)) | (1L << (PROPERTY_SET_GUID - 522)) | (1L << (PROPERTY - 522)) | (1L << (PROVIDER_KEY_NAME - 522)))) != 0) || ((((_la - 586)) & ~0x3f) == 0 && ((1L << (_la - 586)) & ((1L << (PROVIDER - 586)) | (1L << (QUERYTRACEON - 586)) | (1L << (QUEUE_DELAY - 586)) | (1L << (QUEUE - 586)) | (1L << (QUOTED_IDENTIFIER - 586)) | (1L << (R_LETTER - 586)) | (1L << (RANGE - 586)) | (1L << (RAW - 586)) | (1L << (RC2 - 586)) | (1L << (RC4_128 - 586)) | (1L << (RC4 - 586)) | (1L << (READ_COMMITTED_SNAPSHOT - 586)) | (1L << (READ_ONLY_ROUTING_LIST - 586)) | (1L << (READ_ONLY - 586)) | (1L << (READ_WRITE_FILEGROUPS - 586)) | (1L << (READ_WRITE - 586)) | (1L << (READWRITE - 586)) | (1L << (READONLY - 586)) | (1L << (REBUILD - 586)) | (1L << (RECEIVE - 586)) | (1L << (RECOMPILE - 586)) | (1L << (RECOVERY - 586)) | (1L << (RECURSIVE_TRIGGERS - 586)) | (1L << (REGENERATE - 586)) | (1L << (RELATED_CONVERSATION_GROUP - 586)) | (1L << (RELATED_CONVERSATION - 586)) | (1L << (RELATIVE - 586)) | (1L << (REMOTE_SERVICE_NAME - 586)) | (1L << (REMOTE - 586)) | (1L << (REMOVE - 586)) | (1L << (REORGANIZE - 586)) | (1L << (REPEATABLE - 586)) | (1L << (REPLICA - 586)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 586)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 586)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 586)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 586)) | (1L << (REQUIRED - 586)) | (1L << (RESAMPLE - 586)) | (1L << (RESERVE_DISK_SPACE - 586)) | (1L << (RESET - 586)) | (1L << (RESOURCE_MANAGER_LOCATION - 586)) | (1L << (RESOURCE - 586)) | (1L << (RESTART - 586)) | (1L << (RESTRICTED_USER - 586)) | (1L << (RESULT - 586)) | (1L << (RESUME - 586)) | (1L << (RETAINDAYS - 586)) | (1L << (RETENTION - 586)) | (1L << (RETURNS - 586)) | (1L << (REWIND - 586)) | (1L << (ROBUST - 586)) | (1L << (ROLE - 586)) | (1L << (ROOT - 586)) | (1L << (ROUTE - 586)) | (1L << (ROW - 586)) | (1L << (ROWGUID - 586)) | (1L << (ROWS - 586)) | (1L << (RSA_1024 - 586)) | (1L << (RSA_2048 - 586)) | (1L << (RSA_3072 - 586)) | (1L << (RSA_4096 - 586)) | (1L << (RSA_512 - 586)) | (1L << (SAFE - 586)))) != 0) || ((((_la - 650)) & ~0x3f) == 0 && ((1L << (_la - 650)) & ((1L << (SAFETY - 650)) | (1L << (SAMPLE - 650)) | (1L << (SCHEDULER - 650)) | (1L << (SCHEMABINDING - 650)) | (1L << (SCHEME - 650)) | (1L << (SCOPED - 650)) | (1L << (SCROLL_LOCKS - 650)) | (1L << (SCROLL - 650)) | (1L << (SEARCH - 650)) | (1L << (SECONDARY_ONLY - 650)) | (1L << (SECONDARY_ROLE - 650)) | (1L << (SECONDARY - 650)) | (1L << (SECONDS - 650)) | (1L << (SECRET - 650)) | (1L << (SECURITY_LOG - 650)) | (1L << (SECURITY - 650)) | (1L << (SEEDING_MODE - 650)) | (1L << (SELECTIVE - 650)) | (1L << (SELF - 650)) | (1L << (SEMI_SENSITIVE - 650)) | (1L << (SEND - 650)) | (1L << (SENT - 650)) | (1L << (SEQUENCE - 650)) | (1L << (SERIALIZABLE - 650)) | (1L << (SERVER - 650)) | (1L << (SERVICE_BROKER - 650)) | (1L << (SERVICE_NAME - 650)) | (1L << (SERVICE - 650)) | (1L << (SESSION_TIMEOUT - 650)) | (1L << (SESSION - 650)) | (1L << (SETERROR - 650)) | (1L << (SETS - 650)) | (1L << (SHARE - 650)) | (1L << (SHOWPLAN - 650)) | (1L << (SID - 650)) | (1L << (SIGNATURE - 650)) | (1L << (SIMPLE - 650)) | (1L << (SINGLE_USER - 650)) | (1L << (SINGLETON - 650)) | (1L << (SIZE - 650)) | (1L << (SKIP_KEYWORD - 650)) | (1L << (SNAPSHOT - 650)) | (1L << (SOFTNUMA - 650)) | (1L << (SOURCE - 650)) | (1L << (SPARSE - 650)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 650)) | (1L << (SPECIFICATION - 650)) | (1L << (SPLIT - 650)) | (1L << (SQL - 650)) | (1L << (SQLDUMPERFLAGS - 650)) | (1L << (SQLDUMPERPATH - 650)) | (1L << (SQLDUMPERTIMEOUT - 650)) | (1L << (STANDBY - 650)) | (1L << (START_DATE - 650)) | (1L << (START - 650)) | (1L << (STARTED - 650)) | (1L << (STARTUP_STATE - 650)) | (1L << (STATE - 650)) | (1L << (STATIC - 650)) | (1L << (STATISTICAL_SEMANTICS - 650)) | (1L << (STATS - 650)) | (1L << (STATUS - 650)) | (1L << (STOP_ON_ERROR - 650)) | (1L << (STOP - 650)))) != 0) || ((((_la - 714)) & ~0x3f) == 0 && ((1L << (_la - 714)) & ((1L << (STOPLIST - 714)) | (1L << (STOPPED - 714)) | (1L << (STRING_AGG - 714)) | (1L << (SUBJECT - 714)) | (1L << (SUPPORTED - 714)) | (1L << (SUSPEND - 714)) | (1L << (SYMMETRIC - 714)) | (1L << (SYNCHRONOUS_COMMIT - 714)) | (1L << (SYNONYM - 714)) | (1L << (SYSTEM - 714)) | (1L << (TAKE - 714)) | (1L << (TAPE - 714)) | (1L << (TARGET_RECOVERY_TIME - 714)) | (1L << (TARGET - 714)) | (1L << (TB - 714)) | (1L << (TCP - 714)) | (1L << (TEXTIMAGE_ON - 714)) | (1L << (THROW - 714)) | (1L << (TIES - 714)) | (1L << (TIME - 714)) | (1L << (TIMEOUT - 714)) | (1L << (TIMER - 714)) | (1L << (TORN_PAGE_DETECTION - 714)) | (1L << (TRACK_CAUSALITY - 714)) | (1L << (TRACK_COLUMNS_UPDATED - 714)) | (1L << (TRANSFER - 714)) | (1L << (TRANSFORM_NOISE_WORDS - 714)) | (1L << (TRIM - 714)) | (1L << (TRIPLE_DES_3KEY - 714)) | (1L << (TRIPLE_DES - 714)) | (1L << (TRUE - 714)) | (1L << (TRUSTWORTHY - 714)) | (1L << (TRY - 714)) | (1L << (TSQL - 714)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 714)) | (1L << (TYPE_WARNING - 714)) | (1L << (TYPE - 714)) | (1L << (UNBOUNDED - 714)) | (1L << (UNCHECKED - 714)) | (1L << (UNCOMMITTED - 714)) | (1L << (UNDEFINED - 714)) | (1L << (UNKNOWN - 714)) | (1L << (UNLIMITED - 714)) | (1L << (UNLOCK - 714)) | (1L << (UNSAFE - 714)) | (1L << (URL - 714)) | (1L << (USED - 714)) | (1L << (USING - 714)) | (1L << (VALID_XML - 714)) | (1L << (VALIDATION - 714)) | (1L << (VALUE - 714)) | (1L << (VERBOSELOGGING - 714)) | (1L << (VERSION - 714)) | (1L << (VIEW_METADATA - 714)) | (1L << (VIEWS - 714)) | (1L << (VISIBILITY - 714)) | (1L << (WAIT - 714)) | (1L << (WELL_FORMED_XML - 714)) | (1L << (WINDOWS - 714)) | (1L << (WITHOUT_ARRAY_WRAPPER - 714)) | (1L << (WITHOUT - 714)) | (1L << (WITNESS - 714)) | (1L << (WORK - 714)) | (1L << (WORKLOAD - 714)))) != 0) || ((((_la - 778)) & ~0x3f) == 0 && ((1L << (_la - 778)) & ((1L << (XML - 778)) | (1L << (XMLDATA - 778)) | (1L << (XMLNAMESPACES - 778)) | (1L << (XMLSCHEMA - 778)) | (1L << (XQUERY - 778)) | (1L << (XSINIL - 778)) | (1L << (LEFT_FIGURE_PAREN - 778)) | (1L << (DOUBLE_QUOTE_ID - 778)) | (1L << (SQUARE_BRACKET_ID - 778)) | (1L << (LOCAL_ID - 778)) | (1L << (DECIMAL - 778)) | (1L << (ID - 778)) | (1L << (STRING - 778)) | (1L << (BINARY - 778)) | (1L << (FLOAT - 778)) | (1L << (REAL - 778)) | (1L << (IPV4_ADDR - 778)) | (1L << (DOLLAR - 778)) | (1L << (LR_BRACKET - 778)) | (1L << (PLUS - 778)) | (1L << (MINUS - 778)) | (1L << (BIT_NOT - 778)))) != 0)) {
						{
						setState(8995);
						expression_list();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9000);
				match(RR_BRACKET);
				setState(9002);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1259,_ctx) ) {
				case 1:
					{
					setState(9001);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9004);
				match(CAST);
				setState(9005);
				match(LR_BRACKET);
				setState(9006);
				expression(0);
				setState(9007);
				match(AS);
				setState(9008);
				data_type();
				setState(9009);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9011);
				match(CONVERT);
				setState(9012);
				match(LR_BRACKET);
				setState(9013);
				((Function_callContext)_localctx).convert_data_type = data_type();
				setState(9014);
				match(COMMA);
				setState(9015);
				((Function_callContext)_localctx).convert_expression = expression(0);
				setState(9018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9016);
					match(COMMA);
					setState(9017);
					((Function_callContext)_localctx).style = expression(0);
					}
				}

				setState(9020);
				match(RR_BRACKET);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9022);
				match(PARSE);
				setState(9023);
				match(LR_BRACKET);
				setState(9024);
				expression(0);
				setState(9025);
				match(AS);
				setState(9026);
				data_type();
				setState(9029);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(9027);
					match(USING);
					setState(9028);
					expression(0);
					}
				}

				setState(9031);
				match(RR_BRACKET);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9033);
				match(COALESCE);
				setState(9034);
				match(LR_BRACKET);
				setState(9035);
				expression_list();
				setState(9036);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9038);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9039);
				match(CURRENT_USER);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9040);
				match(IDENTITY);
				setState(9041);
				match(LR_BRACKET);
				setState(9042);
				data_type();
				setState(9045);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1262,_ctx) ) {
				case 1:
					{
					setState(9043);
					match(COMMA);
					setState(9044);
					((Function_callContext)_localctx).seed = match(DECIMAL);
					}
					break;
				}
				setState(9049);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9047);
					match(COMMA);
					setState(9048);
					((Function_callContext)_localctx).increment = match(DECIMAL);
					}
				}

				setState(9051);
				match(RR_BRACKET);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9053);
				match(IIF);
				setState(9054);
				match(LR_BRACKET);
				setState(9055);
				search_condition();
				setState(9056);
				match(COMMA);
				setState(9057);
				expression(0);
				setState(9058);
				match(COMMA);
				setState(9059);
				expression(0);
				setState(9060);
				match(RR_BRACKET);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(9062);
				match(MIN_ACTIVE_ROWVERSION);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(9063);
				match(NODES);
				setState(9064);
				match(LR_BRACKET);
				setState(9065);
				((Function_callContext)_localctx).xquery = match(STRING);
				setState(9066);
				match(RR_BRACKET);
				setState(9067);
				as_table_alias();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(9068);
				match(NULLIF);
				setState(9069);
				match(LR_BRACKET);
				setState(9070);
				expression(0);
				setState(9071);
				match(COMMA);
				setState(9072);
				expression(0);
				setState(9073);
				match(RR_BRACKET);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(9075);
				match(SESSION_USER);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(9076);
				match(SYSTEM_USER);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(9077);
				match(OPENJSON);
				setState(9078);
				match(LR_BRACKET);
				setState(9079);
				expression(0);
				setState(9082);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9080);
					match(COMMA);
					setState(9081);
					expression(0);
					}
				}

				setState(9084);
				match(RR_BRACKET);
				setState(9085);
				match(WITH);
				setState(9086);
				match(LR_BRACKET);
				setState(9087);
				column_declaration();
				setState(9090);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(9088);
					match(AS);
					setState(9089);
					match(JSON);
					}
				}

				setState(9100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9092);
					match(COMMA);
					setState(9093);
					column_declaration();
					setState(9096);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(9094);
						match(AS);
						setState(9095);
						match(JSON);
						}
					}

					}
					}
					setState(9102);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9103);
				match(RR_BRACKET);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(9105);
				match(USER);
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(9106);
				match(FUNC_CURSOR_ROWS);
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(9107);
				match(FUNC_FETCH_STATUS);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(9108);
				match(FUNC_DATEFIRST);
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(9109);
				match(FUNC_PROCID);
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(9110);
				match(FUNC_ERROR);
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(9111);
				match(FUNC_IDENTITY);
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(9112);
				match(FUNC_PACK_RECEIVED);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(9113);
				match(FUNC_ROWCOUNT);
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(9114);
				match(FUNC_TRANCOUNT);
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(9115);
				match(NEXT);
				setState(9116);
				match(VALUE);
				setState(9117);
				match(FOR);
				setState(9118);
				((Function_callContext)_localctx).sequence_name = qualified_name();
				setState(9120);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1268,_ctx) ) {
				case 1:
					{
					setState(9119);
					over_clause();
					}
					break;
				}
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(9122);
				match(STRING_AGG);
				setState(9123);
				match(LR_BRACKET);
				setState(9124);
				expression(0);
				setState(9125);
				match(COMMA);
				setState(9126);
				expression(0);
				setState(9127);
				match(RR_BRACKET);
				setState(9128);
				match(WITHIN_GROUP);
				setState(9129);
				match(LR_BRACKET);
				setState(9130);
				order_by_clause();
				setState(9131);
				match(RR_BRACKET);
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(9133);
				match(TRIM);
				setState(9134);
				match(LR_BRACKET);
				setState(9135);
				expression(0);
				setState(9136);
				match(FROM);
				setState(9137);
				expression(0);
				setState(9138);
				match(RR_BRACKET);
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(9143);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)))) != 0)) {
					{
					setState(9140);
					id();
					setState(9141);
					match(DOT);
					}
				}

				setState(9145);
				match(DOLLAR);
				setState(9146);
				match(PARTITION);
				setState(9147);
				match(DOT);
				setState(9148);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(TSQLParser.WHEN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode THEN() { return getToken(TSQLParser.THEN, 0); }
		public Switch_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSwitch_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSwitch_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSwitch_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_sectionContext switch_section() throws RecognitionException {
		Switch_sectionContext _localctx = new Switch_sectionContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_switch_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9151);
			match(WHEN);
			setState(9152);
			expression(0);
			setState(9153);
			match(THEN);
			setState(9154);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Switch_search_condition_sectionContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(TSQLParser.WHEN, 0); }
		public Search_conditionContext search_condition() {
			return getRuleContext(Search_conditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(TSQLParser.THEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Switch_search_condition_sectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_switch_search_condition_section; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSwitch_search_condition_section(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSwitch_search_condition_section(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSwitch_search_condition_section(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Switch_search_condition_sectionContext switch_search_condition_section() throws RecognitionException {
		Switch_search_condition_sectionContext _localctx = new Switch_search_condition_sectionContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_switch_search_condition_section);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9156);
			match(WHEN);
			setState(9157);
			search_condition();
			setState(9158);
			match(THEN);
			setState(9159);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode AS() { return getToken(TSQLParser.AS, 0); }
		public Column_alias_listContext column_alias_list() {
			return getRuleContext(Column_alias_listContext.class,0);
		}
		public As_table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAs_table_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAs_table_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAs_table_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_table_aliasContext as_table_alias() throws RecognitionException {
		As_table_aliasContext _localctx = new As_table_aliasContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_as_table_alias);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9162);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(9161);
				match(AS);
				}
			}

			setState(9164);
			id();
			setState(9166);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1272,_ctx) ) {
			case 1:
				{
				setState(9165);
				column_alias_list();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class With_table_hintsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public With_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWith_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWith_table_hints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWith_table_hints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final With_table_hintsContext with_table_hints() throws RecognitionException {
		With_table_hintsContext _localctx = new With_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(9168);
				match(WITH);
				}
			}

			setState(9171);
			match(LR_BRACKET);
			setState(9172);
			table_hint();
			setState(9179);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INDEX || _la==FORCESEEK || _la==NOEXPAND || ((((_la - 673)) & ~0x3f) == 0 && ((1L << (_la - 673)) & ((1L << (SERIALIZABLE - 673)) | (1L << (SNAPSHOT - 673)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 673)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(9174);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9173);
					match(COMMA);
					}
				}

				setState(9176);
				table_hint();
				}
				}
				setState(9181);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9182);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_with_table_hintsContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Table_hintContext> table_hint() {
			return getRuleContexts(Table_hintContext.class);
		}
		public Table_hintContext table_hint(int i) {
			return getRuleContext(Table_hintContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Insert_with_table_hintsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_with_table_hints; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterInsert_with_table_hints(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitInsert_with_table_hints(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitInsert_with_table_hints(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_with_table_hintsContext insert_with_table_hints() throws RecognitionException {
		Insert_with_table_hintsContext _localctx = new Insert_with_table_hintsContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_insert_with_table_hints);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9184);
			match(WITH);
			setState(9185);
			match(LR_BRACKET);
			setState(9186);
			table_hint();
			setState(9193);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==INDEX || _la==FORCESEEK || _la==NOEXPAND || ((((_la - 673)) & ~0x3f) == 0 && ((1L << (_la - 673)) & ((1L << (SERIALIZABLE - 673)) | (1L << (SNAPSHOT - 673)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 673)))) != 0) || _la==ID || _la==COMMA) {
				{
				{
				setState(9188);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9187);
					match(COMMA);
					}
				}

				setState(9190);
				table_hint();
				}
				}
				setState(9195);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9196);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_hintContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(TSQLParser.INDEX, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public List<Index_valueContext> index_value() {
			return getRuleContexts(Index_valueContext.class);
		}
		public Index_valueContext index_value(int i) {
			return getRuleContext(Index_valueContext.class,i);
		}
		public TerminalNode FORCESEEK() { return getToken(TSQLParser.FORCESEEK, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSQLParser.SNAPSHOT, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(TSQLParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public List<TerminalNode> ID() { return getTokens(TSQLParser.ID); }
		public TerminalNode ID(int i) {
			return getToken(TSQLParser.ID, i);
		}
		public TerminalNode NOEXPAND() { return getToken(TSQLParser.NOEXPAND, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Table_hintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_hint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTable_hint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTable_hint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTable_hint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_hintContext table_hint() throws RecognitionException {
		Table_hintContext _localctx = new Table_hintContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_table_hint);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9199);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOEXPAND) {
				{
				setState(9198);
				match(NOEXPAND);
				}
			}

			setState(9249);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1284,_ctx) ) {
			case 1:
				{
				setState(9201);
				match(INDEX);
				setState(9221);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LR_BRACKET:
					{
					setState(9202);
					match(LR_BRACKET);
					setState(9203);
					index_value();
					setState(9208);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(9204);
						match(COMMA);
						setState(9205);
						index_value();
						}
						}
						setState(9210);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(9211);
					match(RR_BRACKET);
					}
					break;
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case DECIMAL:
				case ID:
					{
					setState(9213);
					index_value();
					setState(9218);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1280,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(9214);
							match(COMMA);
							setState(9215);
							index_value();
							}
							} 
						}
						setState(9220);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,1280,_ctx);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(9223);
				match(INDEX);
				setState(9224);
				match(EQUAL);
				setState(9225);
				index_value();
				}
				break;
			case 3:
				{
				setState(9226);
				match(FORCESEEK);
				setState(9241);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(9227);
					match(LR_BRACKET);
					setState(9228);
					index_value();
					setState(9229);
					match(LR_BRACKET);
					setState(9230);
					match(ID);
					setState(9235);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(9231);
						match(COMMA);
						setState(9232);
						match(ID);
						}
						}
						setState(9237);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(9238);
					match(RR_BRACKET);
					setState(9239);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 4:
				{
				setState(9243);
				match(SERIALIZABLE);
				}
				break;
			case 5:
				{
				setState(9244);
				match(SNAPSHOT);
				}
				break;
			case 6:
				{
				setState(9245);
				match(SPATIAL_WINDOW_MAX_CELLS);
				setState(9246);
				match(EQUAL);
				setState(9247);
				match(DECIMAL);
				}
				break;
			case 7:
				{
				setState(9248);
				match(ID);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_valueContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public Index_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterIndex_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitIndex_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitIndex_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_valueContext index_value() throws RecognitionException {
		Index_valueContext _localctx = new Index_valueContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_index_value);
		try {
			setState(9253);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9251);
				id();
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9252);
				match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_alias_listContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Column_alias_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumn_alias_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumn_alias_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumn_alias_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_alias_listContext column_alias_list() throws RecognitionException {
		Column_alias_listContext _localctx = new Column_alias_listContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_column_alias_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9255);
			match(LR_BRACKET);
			setState(9256);
			column_alias();
			setState(9261);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9257);
				match(COMMA);
				setState(9258);
				column_alias();
				}
				}
				setState(9263);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(9264);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_column_alias);
		try {
			setState(9268);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9266);
				id();
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(9267);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_value_constructorContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(TSQLParser.VALUES, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(TSQLParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(TSQLParser.LR_BRACKET, i);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(TSQLParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(TSQLParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Table_value_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_value_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterTable_value_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitTable_value_constructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitTable_value_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_value_constructorContext table_value_constructor() throws RecognitionException {
		Table_value_constructorContext _localctx = new Table_value_constructorContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_table_value_constructor);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9270);
			match(VALUES);
			setState(9271);
			match(LR_BRACKET);
			setState(9272);
			expression_list();
			setState(9273);
			match(RR_BRACKET);
			setState(9281);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1288,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9274);
					match(COMMA);
					setState(9275);
					match(LR_BRACKET);
					setState(9276);
					expression_list();
					setState(9277);
					match(RR_BRACKET);
					}
					} 
				}
				setState(9283);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1288,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9284);
			expression(0);
			setState(9289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9285);
				match(COMMA);
				setState(9286);
				expression(0);
				}
				}
				setState(9291);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class All_distinct_expressionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(TSQLParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(TSQLParser.DISTINCT, 0); }
		public All_distinct_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_all_distinct_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAll_distinct_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAll_distinct_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAll_distinct_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final All_distinct_expressionContext all_distinct_expression() throws RecognitionException {
		All_distinct_expressionContext _localctx = new All_distinct_expressionContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_all_distinct_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9292);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9293);
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(TSQLParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode PARTITION() { return getToken(TSQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(TSQLParser.BY, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Row_or_range_clauseContext row_or_range_clause() {
			return getRuleContext(Row_or_range_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9295);
			match(OVER);
			setState(9296);
			match(LR_BRACKET);
			setState(9300);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(9297);
				match(PARTITION);
				setState(9298);
				match(BY);
				setState(9299);
				expression_list();
				}
			}

			setState(9303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(9302);
				order_by_clause();
				}
			}

			setState(9306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(9305);
				row_or_range_clause();
				}
			}

			setState(9308);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Row_or_range_clauseContext extends ParserRuleContext {
		public Window_frame_extentContext window_frame_extent() {
			return getRuleContext(Window_frame_extentContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(TSQLParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(TSQLParser.RANGE, 0); }
		public Row_or_range_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_row_or_range_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterRow_or_range_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitRow_or_range_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitRow_or_range_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Row_or_range_clauseContext row_or_range_clause() throws RecognitionException {
		Row_or_range_clauseContext _localctx = new Row_or_range_clauseContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_row_or_range_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9310);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(9311);
			window_frame_extent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_extentContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(TSQLParser.BETWEEN, 0); }
		public List<Window_frame_boundContext> window_frame_bound() {
			return getRuleContexts(Window_frame_boundContext.class);
		}
		public Window_frame_boundContext window_frame_bound(int i) {
			return getRuleContext(Window_frame_boundContext.class,i);
		}
		public TerminalNode AND() { return getToken(TSQLParser.AND, 0); }
		public Window_frame_extentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_extent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWindow_frame_extent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWindow_frame_extent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWindow_frame_extent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_extentContext window_frame_extent() throws RecognitionException {
		Window_frame_extentContext _localctx = new Window_frame_extentContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_window_frame_extent);
		try {
			setState(9319);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
			case UNBOUNDED:
			case DECIMAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9313);
				window_frame_preceding();
				}
				break;
			case BETWEEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(9314);
				match(BETWEEN);
				setState(9315);
				window_frame_bound();
				setState(9316);
				match(AND);
				setState(9317);
				window_frame_bound();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_boundContext extends ParserRuleContext {
		public Window_frame_precedingContext window_frame_preceding() {
			return getRuleContext(Window_frame_precedingContext.class,0);
		}
		public Window_frame_followingContext window_frame_following() {
			return getRuleContext(Window_frame_followingContext.class,0);
		}
		public Window_frame_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWindow_frame_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWindow_frame_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWindow_frame_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_boundContext window_frame_bound() throws RecognitionException {
		Window_frame_boundContext _localctx = new Window_frame_boundContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_window_frame_bound);
		try {
			setState(9323);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1294,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9321);
				window_frame_preceding();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9322);
				window_frame_following();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_precedingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(TSQLParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(TSQLParser.PRECEDING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode CURRENT() { return getToken(TSQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(TSQLParser.ROW, 0); }
		public Window_frame_precedingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_preceding; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWindow_frame_preceding(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWindow_frame_preceding(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWindow_frame_preceding(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_precedingContext window_frame_preceding() throws RecognitionException {
		Window_frame_precedingContext _localctx = new Window_frame_precedingContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_window_frame_preceding);
		try {
			setState(9331);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(9325);
				match(UNBOUNDED);
				setState(9326);
				match(PRECEDING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9327);
				match(DECIMAL);
				setState(9328);
				match(PRECEDING);
				}
				break;
			case CURRENT:
				enterOuterAlt(_localctx, 3);
				{
				setState(9329);
				match(CURRENT);
				setState(9330);
				match(ROW);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Window_frame_followingContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(TSQLParser.UNBOUNDED, 0); }
		public TerminalNode FOLLOWING() { return getToken(TSQLParser.FOLLOWING, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public Window_frame_followingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_window_frame_following; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWindow_frame_following(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWindow_frame_following(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWindow_frame_following(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Window_frame_followingContext window_frame_following() throws RecognitionException {
		Window_frame_followingContext _localctx = new Window_frame_followingContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_window_frame_following);
		try {
			setState(9337);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNBOUNDED:
				enterOuterAlt(_localctx, 1);
				{
				setState(9333);
				match(UNBOUNDED);
				setState(9334);
				match(FOLLOWING);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(9335);
				match(DECIMAL);
				setState(9336);
				match(FOLLOWING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_database_optionContext extends ParserRuleContext {
		public TerminalNode FILESTREAM() { return getToken(TSQLParser.FILESTREAM, 0); }
		public List<Database_filestream_optionContext> database_filestream_option() {
			return getRuleContexts(Database_filestream_optionContext.class);
		}
		public Database_filestream_optionContext database_filestream_option(int i) {
			return getRuleContext(Database_filestream_optionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSQLParser.DEFAULT_LANGUAGE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSQLParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSQLParser.NESTED_TRIGGERS, 0); }
		public On_offContext on_off() {
			return getRuleContext(On_offContext.class,0);
		}
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSQLParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSQLParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode DB_CHAINING() { return getToken(TSQLParser.DB_CHAINING, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(TSQLParser.TRUSTWORTHY, 0); }
		public TerminalNode PERSISTENT_LOG_BUFFER() { return getToken(TSQLParser.PERSISTENT_LOG_BUFFER, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(TSQLParser.DIRECTORY_NAME, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Create_database_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_database_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCreate_database_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCreate_database_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCreate_database_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_database_optionContext create_database_option() throws RecognitionException {
		Create_database_optionContext _localctx = new Create_database_optionContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_create_database_option);
		try {
			int _alt;
			setState(9381);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESTREAM:
				enterOuterAlt(_localctx, 1);
				{
				setState(9339);
				match(FILESTREAM);
				{
				setState(9340);
				database_filestream_option();
				setState(9345);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1297,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(9341);
						match(COMMA);
						setState(9342);
						database_filestream_option();
						}
						} 
					}
					setState(9347);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1297,_ctx);
				}
				}
				}
				break;
			case DEFAULT_LANGUAGE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9348);
				match(DEFAULT_LANGUAGE);
				setState(9349);
				match(EQUAL);
				setState(9352);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(9350);
					id();
					}
					break;
				case STRING:
					{
					setState(9351);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DEFAULT_FULLTEXT_LANGUAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(9354);
				match(DEFAULT_FULLTEXT_LANGUAGE);
				setState(9355);
				match(EQUAL);
				setState(9358);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(9356);
					id();
					}
					break;
				case STRING:
					{
					setState(9357);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NESTED_TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(9360);
				match(NESTED_TRIGGERS);
				setState(9361);
				match(EQUAL);
				setState(9362);
				on_off();
				}
				break;
			case TRANSFORM_NOISE_WORDS:
				enterOuterAlt(_localctx, 5);
				{
				setState(9363);
				match(TRANSFORM_NOISE_WORDS);
				setState(9364);
				match(EQUAL);
				setState(9365);
				on_off();
				}
				break;
			case TWO_DIGIT_YEAR_CUTOFF:
				enterOuterAlt(_localctx, 6);
				{
				setState(9366);
				match(TWO_DIGIT_YEAR_CUTOFF);
				setState(9367);
				match(EQUAL);
				setState(9368);
				match(DECIMAL);
				}
				break;
			case DB_CHAINING:
				enterOuterAlt(_localctx, 7);
				{
				setState(9369);
				match(DB_CHAINING);
				setState(9370);
				on_off();
				}
				break;
			case TRUSTWORTHY:
				enterOuterAlt(_localctx, 8);
				{
				setState(9371);
				match(TRUSTWORTHY);
				setState(9372);
				on_off();
				}
				break;
			case PERSISTENT_LOG_BUFFER:
				enterOuterAlt(_localctx, 9);
				{
				setState(9373);
				match(PERSISTENT_LOG_BUFFER);
				setState(9374);
				match(EQUAL);
				setState(9375);
				match(ON);
				setState(9376);
				match(LR_BRACKET);
				setState(9377);
				match(DIRECTORY_NAME);
				setState(9378);
				match(EQUAL);
				setState(9379);
				match(STRING);
				setState(9380);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_filestream_optionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(TSQLParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(TSQLParser.DIRECTORY_NAME, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSQLParser.READ_ONLY, 0); }
		public TerminalNode FULL() { return getToken(TSQLParser.FULL, 0); }
		public Database_filestream_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_filestream_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDatabase_filestream_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDatabase_filestream_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDatabase_filestream_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_filestream_optionContext database_filestream_option() throws RecognitionException {
		Database_filestream_optionContext _localctx = new Database_filestream_optionContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_database_filestream_option);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9383);
			match(LR_BRACKET);
			setState(9390);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NON_TRANSACTED_ACCESS:
				{
				setState(9384);
				match(NON_TRANSACTED_ACCESS);
				setState(9385);
				match(EQUAL);
				setState(9386);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==OFF || _la==READ_ONLY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DIRECTORY_NAME:
				{
				setState(9387);
				match(DIRECTORY_NAME);
				setState(9388);
				match(EQUAL);
				setState(9389);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9392);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_and_filegroup_optionsContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(TSQLParser.ADD, 0); }
		public TerminalNode FILE() { return getToken(TSQLParser.FILE, 0); }
		public List<File_spec_alterContext> file_spec_alter() {
			return getRuleContexts(File_spec_alterContext.class);
		}
		public File_spec_alterContext file_spec_alter(int i) {
			return getRuleContext(File_spec_alterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public TerminalNode FILEGROUP() { return getToken(TSQLParser.FILEGROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOG() { return getToken(TSQLParser.LOG, 0); }
		public TerminalNode REMOVE() { return getToken(TSQLParser.REMOVE, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode MODIFY() { return getToken(TSQLParser.MODIFY, 0); }
		public TerminalNode CONTAINS() { return getToken(TSQLParser.CONTAINS, 0); }
		public TerminalNode FILESTREAM() { return getToken(TSQLParser.FILESTREAM, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(TSQLParser.MEMORY_OPTIMIZED_DATA, 0); }
		public Filegroup_modify_optionContext filegroup_modify_option() {
			return getRuleContext(Filegroup_modify_optionContext.class,0);
		}
		public File_and_filegroup_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_and_filegroup_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFile_and_filegroup_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFile_and_filegroup_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFile_and_filegroup_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_and_filegroup_optionsContext file_and_filegroup_options() throws RecognitionException {
		File_and_filegroup_optionsContext _localctx = new File_and_filegroup_optionsContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_file_and_filegroup_options);
		int _la;
		try {
			setState(9446);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1308,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9394);
				match(ADD);
				setState(9395);
				match(FILE);
				setState(9396);
				file_spec_alter();
				setState(9401);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9397);
					match(COMMA);
					setState(9398);
					file_spec_alter();
					}
					}
					setState(9403);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(9407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(9404);
					match(TO);
					setState(9405);
					match(FILEGROUP);
					setState(9406);
					id();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9409);
				match(ADD);
				setState(9410);
				match(LOG);
				setState(9411);
				match(FILE);
				setState(9412);
				file_spec_alter();
				setState(9417);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(9413);
					match(COMMA);
					setState(9414);
					file_spec_alter();
					}
					}
					setState(9419);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9420);
				match(REMOVE);
				setState(9421);
				match(FILE);
				setState(9424);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(9422);
					id();
					}
					break;
				case STRING:
					{
					setState(9423);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9426);
				match(MODIFY);
				setState(9427);
				match(FILE);
				setState(9428);
				file_spec_alter();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9429);
				match(ADD);
				setState(9430);
				match(FILEGROUP);
				setState(9431);
				id();
				setState(9433);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONTAINS) {
					{
					setState(9432);
					match(CONTAINS);
					}
				}

				setState(9436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILESTREAM || _la==MEMORY_OPTIMIZED_DATA) {
					{
					setState(9435);
					_la = _input.LA(1);
					if ( !(_la==FILESTREAM || _la==MEMORY_OPTIMIZED_DATA) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9438);
				match(REMOVE);
				setState(9439);
				match(FILEGROUP);
				setState(9440);
				id();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9441);
				match(MODIFY);
				setState(9442);
				match(FILEGROUP);
				setState(9443);
				id();
				setState(9444);
				filegroup_modify_option();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_spec_alterContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode NEWNAME() { return getToken(TSQLParser.NEWNAME, 0); }
		public TerminalNode FILENAME() { return getToken(TSQLParser.FILENAME, 0); }
		public TerminalNode SIZE() { return getToken(TSQLParser.SIZE, 0); }
		public List<File_sizeContext> file_size() {
			return getRuleContexts(File_sizeContext.class);
		}
		public File_sizeContext file_size(int i) {
			return getRuleContext(File_sizeContext.class,i);
		}
		public TerminalNode MAXSIZE() { return getToken(TSQLParser.MAXSIZE, 0); }
		public TerminalNode FILEGROWTH() { return getToken(TSQLParser.FILEGROWTH, 0); }
		public TerminalNode OFFLINE() { return getToken(TSQLParser.OFFLINE, 0); }
		public TerminalNode UNLIMITED() { return getToken(TSQLParser.UNLIMITED, 0); }
		public File_spec_alterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_spec_alter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFile_spec_alter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFile_spec_alter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFile_spec_alter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_spec_alterContext file_spec_alter() throws RecognitionException {
		File_spec_alterContext _localctx = new File_spec_alterContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_file_spec_alter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9448);
			match(LR_BRACKET);
			setState(9449);
			match(NAME);
			setState(9450);
			match(EQUAL);
			setState(9453);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(9451);
				id();
				}
				break;
			case STRING:
				{
				setState(9452);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1311,_ctx) ) {
			case 1:
				{
				setState(9455);
				match(COMMA);
				setState(9456);
				match(NEWNAME);
				setState(9457);
				match(EQUAL);
				setState(9460);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FILLFACTOR:
				case PRECISION:
				case ABSENT:
				case ABSOLUTE:
				case ACCENT_SENSITIVITY:
				case ACTION:
				case ACTIVATION:
				case ACTIVE:
				case ADDRESS:
				case AES_128:
				case AES_192:
				case AES_256:
				case AES:
				case AFFINITY:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ALLOW_CONNECTIONS:
				case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
				case ALLOW_MULTIPLE_EVENT_LOSS:
				case ALLOW_SINGLE_EVENT_LOSS:
				case ALLOW_SNAPSHOT_ISOLATION:
				case ALLOWED:
				case ANONYMOUS:
				case ANSI_NULL_DEFAULT:
				case ANSI_NULLS:
				case ANSI_PADDING:
				case ANSI_WARNINGS:
				case APPEND:
				case APPLICATION_LOG:
				case APPLICATION:
				case APPLY:
				case ARITHABORT:
				case ASSEMBLY:
				case ASYMMETRIC:
				case ASYNCHRONOUS_COMMIT:
				case AUDIT_GUID:
				case AUDIT:
				case AUTHENTICATION:
				case AUTO_CLEANUP:
				case AUTO_CLOSE:
				case AUTO_CREATE_STATISTICS:
				case AUTO_SHRINK:
				case AUTO_UPDATE_STATISTICS_ASYNC:
				case AUTO_UPDATE_STATISTICS:
				case AUTO:
				case AUTOGROW_ALL_FILES:
				case AUTOGROW_SINGLE_FILE:
				case AUTOMATED_BACKUP_PREFERENCE:
				case AUTOMATIC:
				case AVAILABILITY_MODE:
				case AVAILABILITY:
				case BACKUP_PRIORITY:
				case BEFORE:
				case BEGIN_DIALOG:
				case BINARY_BASE64:
				case BINDING:
				case BLOB_STORAGE:
				case BLOCK:
				case BLOCKING_HIERARCHY:
				case BLOCKSIZE:
				case BROKER_INSTANCE:
				case BROKER:
				case BUFFER:
				case BUFFERCOUNT:
				case BULK_LOGGED:
				case CACHE:
				case CALLED:
				case CALLER:
				case CAP_CPU_PERCENT:
				case CAST:
				case CATALOG:
				case CATCH:
				case CERTIFICATE:
				case CHANGE_RETENTION:
				case CHANGE_TRACKING:
				case CHANGES:
				case CHANGETABLE:
				case CHAR:
				case CHARACTER:
				case CHECK_EXPIRATION:
				case CHECK_POLICY:
				case CHECKSUM:
				case CLASSIFIER_FUNCTION:
				case CLEANUP:
				case CLUSTER:
				case COLLECTION:
				case COLUMN_MASTER_KEY:
				case COMMITTED:
				case COMPATIBILITY_LEVEL:
				case COMPRESSION:
				case CONCAT_NULL_YIELDS_NULL:
				case CONCAT:
				case CONFIGURATION:
				case CONNECT:
				case CONTAINMENT:
				case CONTENT:
				case CONTEXT:
				case CONTINUE_AFTER_ERROR:
				case CONTRACT_NAME:
				case CONTRACT:
				case CONTROL:
				case CONVERSATION:
				case COOKIE:
				case COPY_ONLY:
				case COUNTER:
				case CPU:
				case CREATE_NEW:
				case CREATION_DISPOSITION:
				case CREDENTIAL:
				case CRYPTOGRAPHIC:
				case CURSOR_CLOSE_ON_COMMIT:
				case CURSOR_DEFAULT:
				case CYCLE:
				case DATA_COMPRESSION:
				case DATA_SOURCE:
				case DATA:
				case DATABASE_MIRRORING:
				case DATE_CORRELATION_OPTIMIZATION:
				case DAYS:
				case DB_CHAINING:
				case DB_FAILOVER:
				case DECRYPTION:
				case DEFAULT_DATABASE:
				case DEFAULT_FULLTEXT_LANGUAGE:
				case DEFAULT_LANGUAGE:
				case DEFAULT_SCHEMA:
				case DELAY:
				case DELAYED_DURABILITY:
				case DEPENDENTS:
				case DES:
				case DESCRIPTION:
				case DESX:
				case DHCP:
				case DIAGNOSTICS:
				case DIALOG:
				case DIFFERENTIAL:
				case DIRECTORY_NAME:
				case DISABLE_BROKER:
				case DISABLE:
				case DISABLED:
				case DOCUMENT:
				case DTC_SUPPORT:
				case DYNAMIC:
				case ELEMENTS:
				case EMERGENCY:
				case EMPTY:
				case ENABLE_BROKER:
				case ENABLE:
				case ENABLED:
				case ENCRYPTED_VALUE:
				case ENCRYPTION:
				case ENDPOINT_URL:
				case ENDPOINT:
				case ERROR_BROKER_CONVERSATIONS:
				case ERROR:
				case EVENT_RETENTION_MODE:
				case EVENT:
				case EXCLUSIVE:
				case EXECUTABLE_FILE:
				case EXECUTABLE:
				case EXPAND:
				case EXPIREDATE:
				case EXPIRY_DATE:
				case EXPLICIT:
				case EXTENSION:
				case EXTERNAL_ACCESS:
				case FAIL_OPERATION:
				case FAILOVER_MODE:
				case FAILOVER:
				case FAILURE_CONDITION_LEVEL:
				case FAILURECONDITIONLEVEL:
				case FALSE:
				case FAN_IN:
				case FAST_FORWARD:
				case FAST:
				case FILE_SNAPSHOT:
				case FILEGROUP:
				case FILEGROWTH:
				case FILENAME:
				case FILEPATH:
				case FILESTREAM_ON:
				case FILESTREAM:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE_FAILOVER_ALLOW_DATA_LOSS:
				case FORCE_SERVICE_ALLOW_DATA_LOSS:
				case FORCE:
				case FORCED:
				case FORCESEEK:
				case FORMAT:
				case FORWARD_ONLY:
				case FULLSCAN:
				case FULLTEXT:
				case GB:
				case GET:
				case GLOBAL:
				case GOVERNOR:
				case GROUP_MAX_REQUESTS:
				case HADR:
				case HASH:
				case HASHED:
				case HEALTH_CHECK_TIMEOUT:
				case HEALTHCHECKTIMEOUT:
				case HIGH:
				case HONOR_BROKER_PRIORITY:
				case HOURS:
				case IDENTITY_VALUE:
				case IIF:
				case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
				case IMMEDIATE:
				case IMPERSONATE:
				case IMPORTANCE:
				case INCLUDE_NULL_VALUES:
				case INCLUDE:
				case INCREMENT:
				case INCREMENTAL:
				case INFINITE:
				case INIT:
				case INITIATOR:
				case INPUT:
				case INSENSITIVE:
				case INSTEAD:
				case IO:
				case IP:
				case ISOLATION:
				case JSON:
				case KB:
				case KEEP:
				case KEEPFIXED:
				case KERBEROS:
				case KEY_PATH:
				case KEY_SOURCE:
				case KEY_STORE_PROVIDER_NAME:
				case KEYS:
				case KEYSET:
				case LANGUAGE:
				case LAST:
				case LEVEL:
				case LIBRARY:
				case LIFETIME:
				case LINUX:
				case LIST:
				case LISTENER_IP:
				case LISTENER_PORT:
				case LISTENER_URL:
				case LISTENER:
				case LOB_COMPACTION:
				case LOCAL_SERVICE_NAME:
				case LOCAL:
				case LOCATION:
				case LOCK_ESCALATION:
				case LOCK:
				case LOG:
				case LOGIN:
				case LOOP:
				case LOW:
				case MANUAL:
				case MARK:
				case MASTER:
				case MATCHED:
				case MATERIALIZED:
				case MAX_CPU_PERCENT:
				case MAX_DISPATCH_LATENCY:
				case MAX_DOP:
				case MAX_EVENT_SIZE:
				case MAX_FILES:
				case MAX_IOPS_PER_VOLUME:
				case MAX_MEMORY_PERCENT:
				case MAX_MEMORY:
				case MAX_OUTSTANDING_IO_PER_VOLUME:
				case MAX_PROCESSES:
				case MAX_QUEUE_READERS:
				case MAX_ROLLOVER_FILES:
				case MAX_SIZE:
				case MAX:
				case MAXDOP:
				case MAXRECURSION:
				case MAXSIZE:
				case MAXTRANSFER:
				case MAXVALUE:
				case MB:
				case MEDIADESCRIPTION:
				case MEDIANAME:
				case MEDIUM:
				case MEMBER:
				case MEMORY_OPTIMIZED_DATA:
				case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
				case MEMORY_OPTIMIZED:
				case MEMORY_PARTITION_MODE:
				case MESSAGE_FORWARD_SIZE:
				case MESSAGE_FORWARDING:
				case MESSAGE:
				case MIN_ACTIVE_ROWVERSION:
				case MIN_CPU_PERCENT:
				case MIN_IOPS_PER_VOLUME:
				case MIN_MEMORY_PERCENT:
				case MINUTES:
				case MINVALUE:
				case MIRROR_ADDRESS:
				case MIRROR:
				case MIXED_PAGE_ALLOCATION:
				case MODE:
				case MODIFY:
				case MOVE:
				case MULTI_USER:
				case MUST_CHANGE:
				case NAME:
				case NCHAR:
				case NEGOTIATE:
				case NESTED_TRIGGERS:
				case NEW_ACCOUNT:
				case NEW_BROKER:
				case NEW_PASSWORD:
				case NEWNAME:
				case NEXT:
				case NO_CHECKSUM:
				case NO_COMPRESSION:
				case NO_EVENT_LOSS:
				case NO_TRUNCATE:
				case NO_WAIT:
				case NO:
				case NODES:
				case NOEXPAND:
				case NOFORMAT:
				case NOINIT:
				case NON_TRANSACTED_ACCESS:
				case NONE:
				case NORECOMPUTE:
				case NORECOVERY:
				case NOREWIND:
				case NOSKIP:
				case NOTIFICATION:
				case NOUNLOAD:
				case NOWAIT:
				case NTLM:
				case NUMANODE:
				case NUMERIC_ROUNDABORT:
				case OBJECT:
				case OFFLINE:
				case OFFSET:
				case OLD_ACCOUNT:
				case OLD_PASSWORD:
				case ON_FAILURE:
				case ONLINE:
				case ONLY:
				case OPEN_EXISTING:
				case OPENJSON:
				case OPTIMISTIC:
				case OPTIMIZE:
				case OUT:
				case OUTPUT:
				case OWNER:
				case PAGE_VERIFY:
				case PARAMETERIZATION:
				case PARSE:
				case PARTIAL:
				case PARTITION:
				case PARTITIONS:
				case PARTNER:
				case PASSWORD:
				case PATH:
				case PAUSE:
				case PER_CPU:
				case PER_DB:
				case PER_NODE:
				case PERMISSION_SET:
				case PERSIST_SAMPLE_PERSENT:
				case PERSISTED:
				case PERSISTENT_LOG_BUFFER:
				case PLATFORM:
				case POISON_MESSAGE_HANDLING:
				case POLICY:
				case POOL:
				case POPULATION:
				case PORT:
				case PRECEDING:
				case PREDICATE:
				case PRIMARY_ROLE:
				case PRIOR:
				case PRIORITY_LEVEL:
				case PRIORITY:
				case PRIVATE_KEY:
				case PRIVATE:
				case PRIVILEGES:
				case PROCEDURE_NAME:
				case PROCESS:
				case PROFILE:
				case PROPERTY_DESCRIPTION:
				case PROPERTY_INT_ID:
				case PROPERTY_SET_GUID:
				case PROPERTY:
				case PROVIDER_KEY_NAME:
				case PROVIDER:
				case QUERYTRACEON:
				case QUEUE_DELAY:
				case QUEUE:
				case QUOTED_IDENTIFIER:
				case R_LETTER:
				case RANGE:
				case RAW:
				case RC2:
				case RC4_128:
				case RC4:
				case READ_COMMITTED_SNAPSHOT:
				case READ_ONLY_ROUTING_LIST:
				case READ_ONLY:
				case READ_WRITE_FILEGROUPS:
				case READ_WRITE:
				case READWRITE:
				case READONLY:
				case REBUILD:
				case RECEIVE:
				case RECOMPILE:
				case RECOVERY:
				case RECURSIVE_TRIGGERS:
				case REGENERATE:
				case RELATED_CONVERSATION_GROUP:
				case RELATED_CONVERSATION:
				case RELATIVE:
				case REMOTE_SERVICE_NAME:
				case REMOTE:
				case REMOVE:
				case REORGANIZE:
				case REPEATABLE:
				case REPLICA:
				case REQUEST_MAX_CPU_TIME_SEC:
				case REQUEST_MAX_MEMORY_GRANT_PERCENT:
				case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
				case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
				case REQUIRED:
				case RESAMPLE:
				case RESERVE_DISK_SPACE:
				case RESET:
				case RESOURCE_MANAGER_LOCATION:
				case RESOURCE:
				case RESTART:
				case RESTRICTED_USER:
				case RESULT:
				case RESUME:
				case RETAINDAYS:
				case RETENTION:
				case RETURNS:
				case REWIND:
				case ROBUST:
				case ROLE:
				case ROOT:
				case ROUTE:
				case ROW:
				case ROWGUID:
				case ROWS:
				case RSA_1024:
				case RSA_2048:
				case RSA_3072:
				case RSA_4096:
				case RSA_512:
				case SAFE:
				case SAFETY:
				case SAMPLE:
				case SCHEDULER:
				case SCHEMABINDING:
				case SCHEME:
				case SCOPED:
				case SCROLL_LOCKS:
				case SCROLL:
				case SEARCH:
				case SECONDARY_ONLY:
				case SECONDARY_ROLE:
				case SECONDARY:
				case SECONDS:
				case SECRET:
				case SECURITY_LOG:
				case SECURITY:
				case SEEDING_MODE:
				case SELECTIVE:
				case SELF:
				case SEMI_SENSITIVE:
				case SEND:
				case SENT:
				case SEQUENCE:
				case SERIALIZABLE:
				case SERVER:
				case SERVICE_BROKER:
				case SERVICE_NAME:
				case SERVICE:
				case SESSION_TIMEOUT:
				case SESSION:
				case SETERROR:
				case SETS:
				case SHARE:
				case SHOWPLAN:
				case SID:
				case SIGNATURE:
				case SIMPLE:
				case SINGLE_USER:
				case SINGLETON:
				case SIZE:
				case SKIP_KEYWORD:
				case SNAPSHOT:
				case SOFTNUMA:
				case SOURCE:
				case SPARSE:
				case SPATIAL_WINDOW_MAX_CELLS:
				case SPECIFICATION:
				case SPLIT:
				case SQL:
				case SQLDUMPERFLAGS:
				case SQLDUMPERPATH:
				case SQLDUMPERTIMEOUT:
				case STANDBY:
				case START_DATE:
				case START:
				case STARTED:
				case STARTUP_STATE:
				case STATE:
				case STATIC:
				case STATISTICAL_SEMANTICS:
				case STATS:
				case STATUS:
				case STOP_ON_ERROR:
				case STOP:
				case STOPLIST:
				case STOPPED:
				case STRING_AGG:
				case SUBJECT:
				case SUPPORTED:
				case SUSPEND:
				case SYMMETRIC:
				case SYNCHRONOUS_COMMIT:
				case SYNONYM:
				case SYSTEM:
				case TAKE:
				case TAPE:
				case TARGET_RECOVERY_TIME:
				case TARGET:
				case TB:
				case TCP:
				case TEXTIMAGE_ON:
				case THROW:
				case TIES:
				case TIME:
				case TIMEOUT:
				case TIMER:
				case TORN_PAGE_DETECTION:
				case TRACK_CAUSALITY:
				case TRACK_COLUMNS_UPDATED:
				case TRANSFER:
				case TRANSFORM_NOISE_WORDS:
				case TRIM:
				case TRIPLE_DES_3KEY:
				case TRIPLE_DES:
				case TRUE:
				case TRUSTWORTHY:
				case TRY:
				case TSQL:
				case TWO_DIGIT_YEAR_CUTOFF:
				case TYPE_WARNING:
				case TYPE:
				case UNBOUNDED:
				case UNCHECKED:
				case UNCOMMITTED:
				case UNDEFINED:
				case UNKNOWN:
				case UNLIMITED:
				case UNLOCK:
				case UNSAFE:
				case URL:
				case USED:
				case USING:
				case VALID_XML:
				case VALIDATION:
				case VALUE:
				case VERBOSELOGGING:
				case VERSION:
				case VIEW_METADATA:
				case VIEWS:
				case VISIBILITY:
				case WAIT:
				case WELL_FORMED_XML:
				case WINDOWS:
				case WITHOUT_ARRAY_WRAPPER:
				case WITHOUT:
				case WITNESS:
				case WORK:
				case WORKLOAD:
				case XML:
				case XMLDATA:
				case XMLNAMESPACES:
				case XMLSCHEMA:
				case XQUERY:
				case XSINIL:
				case DOUBLE_QUOTE_ID:
				case SQUARE_BRACKET_ID:
				case ID:
					{
					setState(9458);
					id();
					}
					break;
				case STRING:
					{
					setState(9459);
					match(STRING);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(9468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1312,_ctx) ) {
			case 1:
				{
				setState(9464);
				match(COMMA);
				setState(9465);
				match(FILENAME);
				setState(9466);
				match(EQUAL);
				setState(9467);
				match(STRING);
				}
				break;
			}
			setState(9474);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1313,_ctx) ) {
			case 1:
				{
				setState(9470);
				match(COMMA);
				setState(9471);
				match(SIZE);
				setState(9472);
				match(EQUAL);
				setState(9473);
				file_size();
				}
				break;
			}
			setState(9483);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1315,_ctx) ) {
			case 1:
				{
				setState(9476);
				match(COMMA);
				setState(9477);
				match(MAXSIZE);
				setState(9478);
				match(EQUAL);
				setState(9481);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(9479);
					file_size();
					}
					break;
				case UNLIMITED:
					{
					setState(9480);
					match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(9489);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1316,_ctx) ) {
			case 1:
				{
				setState(9485);
				match(COMMA);
				setState(9486);
				match(FILEGROWTH);
				setState(9487);
				match(EQUAL);
				setState(9488);
				file_size();
				}
				break;
			}
			setState(9493);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9491);
				match(COMMA);
				setState(9492);
				match(OFFLINE);
				}
			}

			setState(9495);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Filegroup_modify_optionContext extends ParserRuleContext {
		public TerminalNode READONLY() { return getToken(TSQLParser.READONLY, 0); }
		public TerminalNode READWRITE() { return getToken(TSQLParser.READWRITE, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSQLParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(TSQLParser.READ_WRITE, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode AUTOGROW_SINGLE_FILE() { return getToken(TSQLParser.AUTOGROW_SINGLE_FILE, 0); }
		public TerminalNode AUTOGROW_ALL_FILES() { return getToken(TSQLParser.AUTOGROW_ALL_FILES, 0); }
		public Filegroup_modify_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filegroup_modify_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFilegroup_modify_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFilegroup_modify_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFilegroup_modify_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Filegroup_modify_optionContext filegroup_modify_option() throws RecognitionException {
		Filegroup_modify_optionContext _localctx = new Filegroup_modify_optionContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_filegroup_modify_option);
		try {
			setState(9507);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READONLY:
				enterOuterAlt(_localctx, 1);
				{
				setState(9497);
				match(READONLY);
				}
				break;
			case READWRITE:
				enterOuterAlt(_localctx, 2);
				{
				setState(9498);
				match(READWRITE);
				}
				break;
			case READ_ONLY:
				enterOuterAlt(_localctx, 3);
				{
				setState(9499);
				match(READ_ONLY);
				}
				break;
			case READ_WRITE:
				enterOuterAlt(_localctx, 4);
				{
				setState(9500);
				match(READ_WRITE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(9501);
				match(DEFAULT);
				}
				break;
			case NAME:
				enterOuterAlt(_localctx, 6);
				{
				setState(9502);
				match(NAME);
				setState(9503);
				match(EQUAL);
				setState(9504);
				id();
				}
				break;
			case AUTOGROW_SINGLE_FILE:
				enterOuterAlt(_localctx, 7);
				{
				setState(9505);
				match(AUTOGROW_SINGLE_FILE);
				}
				break;
			case AUTOGROW_ALL_FILES:
				enterOuterAlt(_localctx, 8);
				{
				setState(9506);
				match(AUTOGROW_ALL_FILES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Database_file_specContext extends ParserRuleContext {
		public File_groupContext file_group() {
			return getRuleContext(File_groupContext.class,0);
		}
		public File_specContext file_spec() {
			return getRuleContext(File_specContext.class,0);
		}
		public Database_file_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_database_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDatabase_file_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDatabase_file_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDatabase_file_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Database_file_specContext database_file_spec() throws RecognitionException {
		Database_file_specContext _localctx = new Database_file_specContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_database_file_spec);
		try {
			setState(9511);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILEGROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(9509);
				file_group();
				}
				break;
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(9510);
				file_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_groupContext extends ParserRuleContext {
		public TerminalNode FILEGROUP() { return getToken(TSQLParser.FILEGROUP, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<File_specContext> file_spec() {
			return getRuleContexts(File_specContext.class);
		}
		public File_specContext file_spec(int i) {
			return getRuleContext(File_specContext.class,i);
		}
		public List<TerminalNode> CONTAINS() { return getTokens(TSQLParser.CONTAINS); }
		public TerminalNode CONTAINS(int i) {
			return getToken(TSQLParser.CONTAINS, i);
		}
		public TerminalNode FILESTREAM() { return getToken(TSQLParser.FILESTREAM, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(TSQLParser.MEMORY_OPTIMIZED_DATA, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public File_groupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_group; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFile_group(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFile_group(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFile_group(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_groupContext file_group() throws RecognitionException {
		File_groupContext _localctx = new File_groupContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_file_group);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(9513);
			match(FILEGROUP);
			setState(9514);
			id();
			setState(9517);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1320,_ctx) ) {
			case 1:
				{
				setState(9515);
				match(CONTAINS);
				setState(9516);
				match(FILESTREAM);
				}
				break;
			}
			setState(9520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(9519);
				match(DEFAULT);
				}
			}

			setState(9524);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTAINS) {
				{
				setState(9522);
				match(CONTAINS);
				setState(9523);
				match(MEMORY_OPTIMIZED_DATA);
				}
			}

			setState(9526);
			file_spec();
			setState(9531);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,1323,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(9527);
					match(COMMA);
					setState(9528);
					file_spec();
					}
					} 
				}
				setState(9533);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,1323,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_specContext extends ParserRuleContext {
		public Token file;
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode FILENAME() { return getToken(TSQLParser.FILENAME, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode SIZE() { return getToken(TSQLParser.SIZE, 0); }
		public List<File_sizeContext> file_size() {
			return getRuleContexts(File_sizeContext.class);
		}
		public File_sizeContext file_size(int i) {
			return getRuleContext(File_sizeContext.class,i);
		}
		public TerminalNode MAXSIZE() { return getToken(TSQLParser.MAXSIZE, 0); }
		public TerminalNode FILEGROWTH() { return getToken(TSQLParser.FILEGROWTH, 0); }
		public TerminalNode UNLIMITED() { return getToken(TSQLParser.UNLIMITED, 0); }
		public File_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFile_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFile_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFile_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_specContext file_spec() throws RecognitionException {
		File_specContext _localctx = new File_specContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_file_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9534);
			match(LR_BRACKET);
			setState(9535);
			match(NAME);
			setState(9536);
			match(EQUAL);
			setState(9539);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				{
				setState(9537);
				id();
				}
				break;
			case STRING:
				{
				setState(9538);
				match(STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9542);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9541);
				match(COMMA);
				}
			}

			setState(9544);
			match(FILENAME);
			setState(9545);
			match(EQUAL);
			setState(9546);
			((File_specContext)_localctx).file = match(STRING);
			setState(9548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9547);
				match(COMMA);
				}
			}

			setState(9556);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIZE) {
				{
				setState(9550);
				match(SIZE);
				setState(9551);
				match(EQUAL);
				setState(9552);
				file_size();
				setState(9554);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9553);
					match(COMMA);
					}
				}

				}
			}

			setState(9567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAXSIZE) {
				{
				setState(9558);
				match(MAXSIZE);
				setState(9559);
				match(EQUAL);
				setState(9562);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DECIMAL:
					{
					setState(9560);
					file_size();
					}
					break;
				case UNLIMITED:
					{
					setState(9561);
					match(UNLIMITED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(9565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9564);
					match(COMMA);
					}
				}

				}
			}

			setState(9575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FILEGROWTH) {
				{
				setState(9569);
				match(FILEGROWTH);
				setState(9570);
				match(EQUAL);
				setState(9571);
				file_size();
				setState(9573);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9572);
					match(COMMA);
					}
				}

				}
			}

			setState(9577);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Qualified_nameContext extends ParserRuleContext {
		public IdContext schema;
		public IdContext name;
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(TSQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(TSQLParser.DOT, i);
		}
		public Qualified_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qualified_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterQualified_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitQualified_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitQualified_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Qualified_nameContext qualified_name() throws RecognitionException {
		Qualified_nameContext _localctx = new Qualified_nameContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_qualified_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1335,_ctx) ) {
			case 1:
				{
				setState(9579);
				id();
				setState(9580);
				match(DOT);
				setState(9581);
				id();
				setState(9582);
				match(DOT);
				setState(9583);
				((Qualified_nameContext)_localctx).schema = id();
				setState(9584);
				match(DOT);
				}
				break;
			case 2:
				{
				setState(9586);
				id();
				setState(9587);
				match(DOT);
				setState(9589);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (DOUBLE_QUOTE_ID - 770)) | (1L << (SQUARE_BRACKET_ID - 770)) | (1L << (ID - 770)))) != 0)) {
					{
					setState(9588);
					((Qualified_nameContext)_localctx).schema = id();
					}
				}

				setState(9591);
				match(DOT);
				}
				break;
			case 3:
				{
				setState(9593);
				((Qualified_nameContext)_localctx).schema = id();
				setState(9594);
				match(DOT);
				}
				break;
			}
			setState(9598);
			((Qualified_nameContext)_localctx).name = id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Full_column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode DOT() { return getToken(TSQLParser.DOT, 0); }
		public Full_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_full_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFull_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFull_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFull_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Full_column_nameContext full_column_name() throws RecognitionException {
		Full_column_nameContext _localctx = new Full_column_nameContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_full_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9603);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1336,_ctx) ) {
			case 1:
				{
				setState(9600);
				qualified_name();
				setState(9601);
				match(DOT);
				}
				break;
			}
			setState(9605);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_list_with_orderContext extends ParserRuleContext {
		public List<Column_with_orderContext> column_with_order() {
			return getRuleContexts(Column_with_orderContext.class);
		}
		public Column_with_orderContext column_with_order(int i) {
			return getRuleContext(Column_with_orderContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Column_name_list_with_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list_with_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumn_name_list_with_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumn_name_list_with_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumn_name_list_with_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_list_with_orderContext column_name_list_with_order() throws RecognitionException {
		Column_name_list_with_orderContext _localctx = new Column_name_list_with_orderContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_column_name_list_with_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9607);
			column_with_order();
			setState(9612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9608);
				match(COMMA);
				setState(9609);
				column_with_order();
				}
				}
				setState(9614);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_with_orderContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Asc_descContext asc_desc() {
			return getRuleContext(Asc_descContext.class,0);
		}
		public Column_with_orderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_with_order; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumn_with_order(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumn_with_order(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumn_with_order(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_with_orderContext column_with_order() throws RecognitionException {
		Column_with_orderContext _localctx = new Column_with_orderContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_column_with_order);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9615);
			id();
			setState(9617);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(9616);
				asc_desc();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Asc_descContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(TSQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(TSQLParser.DESC, 0); }
		public Asc_descContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_asc_desc; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAsc_desc(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAsc_desc(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAsc_desc(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Asc_descContext asc_desc() throws RecognitionException {
		Asc_descContext _localctx = new Asc_descContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_asc_desc);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9619);
			_la = _input.LA(1);
			if ( !(_la==ASC || _la==DESC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitColumn_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9621);
			id();
			setState(9626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(9622);
				match(COMMA);
				setState(9623);
				id();
				}
				}
				setState(9628);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_cursor_name);
		try {
			setState(9631);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9629);
				id();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(9630);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class On_offContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public On_offContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_on_off; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterOn_off(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitOn_off(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitOn_off(this);
			else return visitor.visitChildren(this);
		}
	}

	public final On_offContext on_off() throws RecognitionException {
		On_offContext _localctx = new On_offContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_on_off);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9633);
			_la = _input.LA(1);
			if ( !(_la==OFF || _la==ON) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClusteredContext extends ParserRuleContext {
		public TerminalNode CLUSTERED() { return getToken(TSQLParser.CLUSTERED, 0); }
		public TerminalNode NONCLUSTERED() { return getToken(TSQLParser.NONCLUSTERED, 0); }
		public ClusteredContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_clustered; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterClustered(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitClustered(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitClustered(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClusteredContext clustered() throws RecognitionException {
		ClusteredContext _localctx = new ClusteredContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_clustered);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9635);
			_la = _input.LA(1);
			if ( !(_la==CLUSTERED || _la==NONCLUSTERED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_notnullContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(TSQLParser.NOT, 0); }
		public Null_notnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_notnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterNull_notnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitNull_notnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitNull_notnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_notnullContext null_notnull() throws RecognitionException {
		Null_notnullContext _localctx = new Null_notnullContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_null_notnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9638);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(9637);
				match(NOT);
				}
			}

			setState(9640);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Scalar_function_nameContext extends ParserRuleContext {
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public TerminalNode RIGHT() { return getToken(TSQLParser.RIGHT, 0); }
		public TerminalNode LEFT() { return getToken(TSQLParser.LEFT, 0); }
		public Scalar_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalar_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterScalar_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitScalar_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitScalar_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Scalar_function_nameContext scalar_function_name() throws RecognitionException {
		Scalar_function_nameContext _localctx = new Scalar_function_nameContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_scalar_function_name);
		try {
			setState(9645);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case DOUBLE_QUOTE_ID:
			case SQUARE_BRACKET_ID:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9642);
				qualified_name();
				}
				break;
			case RIGHT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9643);
				match(RIGHT);
				}
				break;
			case LEFT:
				enterOuterAlt(_localctx, 3);
				{
				setState(9644);
				match(LEFT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_timerContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(TSQLParser.BEGIN, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSQLParser.CONVERSATION, 0); }
		public TerminalNode TIMER() { return getToken(TSQLParser.TIMER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode LOCAL_ID() { return getToken(TSQLParser.LOCAL_ID, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSQLParser.TIMEOUT, 0); }
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public Begin_conversation_timerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_timer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBegin_conversation_timer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBegin_conversation_timer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBegin_conversation_timer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_conversation_timerContext begin_conversation_timer() throws RecognitionException {
		Begin_conversation_timerContext _localctx = new Begin_conversation_timerContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_begin_conversation_timer);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9647);
			match(BEGIN);
			setState(9648);
			match(CONVERSATION);
			setState(9649);
			match(TIMER);
			setState(9650);
			match(LR_BRACKET);
			setState(9651);
			match(LOCAL_ID);
			setState(9652);
			match(RR_BRACKET);
			setState(9653);
			match(TIMEOUT);
			setState(9654);
			match(EQUAL);
			setState(9655);
			time();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Begin_conversation_dialogContext extends ParserRuleContext {
		public Token dialog_handle;
		public Id_or_expressionContext initiator_service_name;
		public Id_or_expressionContext target_service_name;
		public Token service_broker_guid;
		public TerminalNode BEGIN() { return getToken(TSQLParser.BEGIN, 0); }
		public TerminalNode DIALOG() { return getToken(TSQLParser.DIALOG, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public List<TerminalNode> SERVICE() { return getTokens(TSQLParser.SERVICE); }
		public TerminalNode SERVICE(int i) {
			return getToken(TSQLParser.SERVICE, i);
		}
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public List<TerminalNode> ON() { return getTokens(TSQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(TSQLParser.ON, i);
		}
		public TerminalNode CONTRACT() { return getToken(TSQLParser.CONTRACT, 0); }
		public List<Id_or_expressionContext> id_or_expression() {
			return getRuleContexts(Id_or_expressionContext.class);
		}
		public Id_or_expressionContext id_or_expression(int i) {
			return getRuleContext(Id_or_expressionContext.class,i);
		}
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSQLParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSQLParser.LOCAL_ID, i);
		}
		public TerminalNode CONVERSATION() { return getToken(TSQLParser.CONVERSATION, 0); }
		public List<TerminalNode> COMMA() { return getTokens(TSQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(TSQLParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode LIFETIME() { return getToken(TSQLParser.LIFETIME, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode RELATED_CONVERSATION() { return getToken(TSQLParser.RELATED_CONVERSATION, 0); }
		public TerminalNode RELATED_CONVERSATION_GROUP() { return getToken(TSQLParser.RELATED_CONVERSATION_GROUP, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode OFF() { return getToken(TSQLParser.OFF, 0); }
		public Begin_conversation_dialogContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_begin_conversation_dialog; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterBegin_conversation_dialog(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitBegin_conversation_dialog(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitBegin_conversation_dialog(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Begin_conversation_dialogContext begin_conversation_dialog() throws RecognitionException {
		Begin_conversation_dialogContext _localctx = new Begin_conversation_dialogContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_begin_conversation_dialog);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9657);
			match(BEGIN);
			setState(9658);
			match(DIALOG);
			setState(9660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONVERSATION) {
				{
				setState(9659);
				match(CONVERSATION);
				}
			}

			setState(9662);
			((Begin_conversation_dialogContext)_localctx).dialog_handle = match(LOCAL_ID);
			setState(9663);
			match(FROM);
			setState(9664);
			match(SERVICE);
			setState(9665);
			((Begin_conversation_dialogContext)_localctx).initiator_service_name = id_or_expression();
			setState(9666);
			match(TO);
			setState(9667);
			match(SERVICE);
			setState(9668);
			((Begin_conversation_dialogContext)_localctx).target_service_name = id_or_expression();
			setState(9671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9669);
				match(COMMA);
				setState(9670);
				((Begin_conversation_dialogContext)_localctx).service_broker_guid = match(STRING);
				}
			}

			setState(9673);
			match(ON);
			setState(9674);
			match(CONTRACT);
			setState(9675);
			id_or_expression();
			setState(9698);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1350,_ctx) ) {
			case 1:
				{
				setState(9676);
				match(WITH);
				setState(9683);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RELATED_CONVERSATION_GROUP || _la==RELATED_CONVERSATION) {
					{
					setState(9677);
					_la = _input.LA(1);
					if ( !(_la==RELATED_CONVERSATION_GROUP || _la==RELATED_CONVERSATION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9678);
					match(EQUAL);
					setState(9679);
					match(LOCAL_ID);
					setState(9681);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(9680);
						match(COMMA);
						}
					}

					}
				}

				setState(9691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIFETIME) {
					{
					setState(9685);
					match(LIFETIME);
					setState(9686);
					match(EQUAL);
					setState(9687);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==DECIMAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9689);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(9688);
						match(COMMA);
						}
					}

					}
				}

				setState(9696);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCRYPTION) {
					{
					setState(9693);
					match(ENCRYPTION);
					setState(9694);
					match(EQUAL);
					setState(9695);
					_la = _input.LA(1);
					if ( !(_la==OFF || _la==ON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Move_conversationContext extends ParserRuleContext {
		public Constant_LOCAL_IDContext conversation_handle;
		public Constant_LOCAL_IDContext conversation_group_id;
		public TerminalNode MOVE() { return getToken(TSQLParser.MOVE, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSQLParser.CONVERSATION, 0); }
		public TerminalNode TO() { return getToken(TSQLParser.TO, 0); }
		public List<Constant_LOCAL_IDContext> constant_LOCAL_ID() {
			return getRuleContexts(Constant_LOCAL_IDContext.class);
		}
		public Constant_LOCAL_IDContext constant_LOCAL_ID(int i) {
			return getRuleContext(Constant_LOCAL_IDContext.class,i);
		}
		public Move_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_move_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterMove_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitMove_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitMove_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Move_conversationContext move_conversation() throws RecognitionException {
		Move_conversationContext _localctx = new Move_conversationContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_move_conversation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9700);
			match(MOVE);
			setState(9701);
			match(CONVERSATION);
			setState(9702);
			((Move_conversationContext)_localctx).conversation_handle = constant_LOCAL_ID();
			setState(9703);
			match(TO);
			setState(9704);
			((Move_conversationContext)_localctx).conversation_group_id = constant_LOCAL_ID();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_or_expressionContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Id_or_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_or_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterId_or_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitId_or_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitId_or_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_or_expressionContext id_or_expression() throws RecognitionException {
		Id_or_expressionContext _localctx = new Id_or_expressionContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_id_or_expression);
		try {
			setState(9708);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9706);
				id();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9707);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class End_conversationContext extends ParserRuleContext {
		public Token conversation_handle;
		public Token faliure_code;
		public Token failure_text;
		public TerminalNode END() { return getToken(TSQLParser.END, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSQLParser.CONVERSATION, 0); }
		public List<TerminalNode> LOCAL_ID() { return getTokens(TSQLParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(TSQLParser.LOCAL_ID, i);
		}
		public TerminalNode WITH() { return getToken(TSQLParser.WITH, 0); }
		public TerminalNode ERROR() { return getToken(TSQLParser.ERROR, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(TSQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(TSQLParser.EQUAL, i);
		}
		public TerminalNode DESCRIPTION() { return getToken(TSQLParser.DESCRIPTION, 0); }
		public TerminalNode CLEANUP() { return getToken(TSQLParser.CLEANUP, 0); }
		public List<TerminalNode> STRING() { return getTokens(TSQLParser.STRING); }
		public TerminalNode STRING(int i) {
			return getToken(TSQLParser.STRING, i);
		}
		public End_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_end_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterEnd_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitEnd_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitEnd_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final End_conversationContext end_conversation() throws RecognitionException {
		End_conversationContext _localctx = new End_conversationContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_end_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9710);
			match(END);
			setState(9711);
			match(CONVERSATION);
			setState(9712);
			((End_conversationContext)_localctx).conversation_handle = match(LOCAL_ID);
			setState(9725);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1354,_ctx) ) {
			case 1:
				{
				setState(9713);
				match(WITH);
				setState(9720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ERROR) {
					{
					setState(9714);
					match(ERROR);
					setState(9715);
					match(EQUAL);
					setState(9716);
					((End_conversationContext)_localctx).faliure_code = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).faliure_code = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(9717);
					match(DESCRIPTION);
					setState(9718);
					match(EQUAL);
					setState(9719);
					((End_conversationContext)_localctx).failure_text = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==LOCAL_ID || _la==STRING) ) {
						((End_conversationContext)_localctx).failure_text = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(9723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CLEANUP) {
					{
					setState(9722);
					match(CLEANUP);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Waitfor_conversationContext extends ParserRuleContext {
		public TimeContext timeout;
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public Get_conversationContext get_conversation() {
			return getRuleContext(Get_conversationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode WAITFOR() { return getToken(TSQLParser.WAITFOR, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSQLParser.TIMEOUT, 0); }
		public TimeContext time() {
			return getRuleContext(TimeContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public Waitfor_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitfor_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterWaitfor_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitWaitfor_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitWaitfor_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Waitfor_conversationContext waitfor_conversation() throws RecognitionException {
		Waitfor_conversationContext _localctx = new Waitfor_conversationContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_waitfor_conversation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9728);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WAITFOR) {
				{
				setState(9727);
				match(WAITFOR);
				}
			}

			setState(9730);
			match(LR_BRACKET);
			setState(9731);
			get_conversation();
			setState(9732);
			match(RR_BRACKET);
			setState(9738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TIMEOUT || _la==COMMA) {
				{
				setState(9734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(9733);
					match(COMMA);
					}
				}

				setState(9736);
				match(TIMEOUT);
				setState(9737);
				((Waitfor_conversationContext)_localctx).timeout = time();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Get_conversationContext extends ParserRuleContext {
		public String_or_local_idContext conversation_group_id;
		public TerminalNode GET() { return getToken(TSQLParser.GET, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSQLParser.CONVERSATION, 0); }
		public TerminalNode GROUP() { return getToken(TSQLParser.GROUP, 0); }
		public TerminalNode FROM() { return getToken(TSQLParser.FROM, 0); }
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public String_or_local_idContext string_or_local_id() {
			return getRuleContext(String_or_local_idContext.class,0);
		}
		public Get_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_get_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterGet_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitGet_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitGet_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Get_conversationContext get_conversation() throws RecognitionException {
		Get_conversationContext _localctx = new Get_conversationContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_get_conversation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9740);
			match(GET);
			setState(9741);
			match(CONVERSATION);
			setState(9742);
			match(GROUP);
			setState(9743);
			((Get_conversationContext)_localctx).conversation_group_id = string_or_local_id();
			setState(9744);
			match(FROM);
			setState(9745);
			qualified_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Send_conversationContext extends ParserRuleContext {
		public String_or_local_idContext conversation_handle;
		public ExpressionContext message_type_name;
		public String_or_local_idContext message_body_expression;
		public TerminalNode SEND() { return getToken(TSQLParser.SEND, 0); }
		public TerminalNode ON() { return getToken(TSQLParser.ON, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSQLParser.CONVERSATION, 0); }
		public TerminalNode MESSAGE() { return getToken(TSQLParser.MESSAGE, 0); }
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public List<String_or_local_idContext> string_or_local_id() {
			return getRuleContexts(String_or_local_idContext.class);
		}
		public String_or_local_idContext string_or_local_id(int i) {
			return getRuleContext(String_or_local_idContext.class,i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public Send_conversationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_send_conversation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSend_conversation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSend_conversation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSend_conversation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Send_conversationContext send_conversation() throws RecognitionException {
		Send_conversationContext _localctx = new Send_conversationContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_send_conversation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9747);
			match(SEND);
			setState(9748);
			match(ON);
			setState(9749);
			match(CONVERSATION);
			setState(9750);
			((Send_conversationContext)_localctx).conversation_handle = string_or_local_id();
			setState(9751);
			match(MESSAGE);
			setState(9752);
			match(TYPE);
			setState(9753);
			((Send_conversationContext)_localctx).message_type_name = expression(0);
			setState(9758);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1358,_ctx) ) {
			case 1:
				{
				setState(9754);
				match(LR_BRACKET);
				setState(9755);
				((Send_conversationContext)_localctx).message_body_expression = string_or_local_id();
				setState(9756);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public Data_type_sizeContext size;
		public Qualified_nameContext qualified_name() {
			return getRuleContext(Qualified_nameContext.class,0);
		}
		public Data_type_sizeContext data_type_size() {
			return getRuleContext(Data_type_sizeContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(TSQLParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(TSQLParser.PRECISION, 0); }
		public TerminalNode VARYING() { return getToken(TSQLParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(TSQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(TSQLParser.CHARACTER, 0); }
		public TerminalNode NCHAR() { return getToken(TSQLParser.NCHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(TSQLParser.NATIONAL, 0); }
		public TerminalNode CURSOR() { return getToken(TSQLParser.CURSOR, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitData_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitData_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_data_type);
		int _la;
		try {
			setState(9783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1364,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9760);
				qualified_name();
				setState(9762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1359,_ctx) ) {
				case 1:
					{
					setState(9761);
					((Data_typeContext)_localctx).size = data_type_size();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9764);
				match(DOUBLE);
				setState(9765);
				match(PRECISION);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9766);
				_la = _input.LA(1);
				if ( !(_la==CHAR || _la==CHARACTER || _la==NCHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9767);
				match(VARYING);
				setState(9769);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1360,_ctx) ) {
				case 1:
					{
					setState(9768);
					((Data_typeContext)_localctx).size = data_type_size();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9771);
				match(NATIONAL);
				setState(9772);
				_la = _input.LA(1);
				if ( !(_la==CHAR || _la==CHARACTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(9774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(9773);
					match(VARYING);
					}
				}

				setState(9777);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1362,_ctx) ) {
				case 1:
					{
					setState(9776);
					((Data_typeContext)_localctx).size = data_type_size();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9779);
				match(CURSOR);
				setState(9781);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(9780);
					match(VARYING);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_type_sizeContext extends ParserRuleContext {
		public Token presicion;
		public Token scale;
		public TerminalNode LR_BRACKET() { return getToken(TSQLParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(TSQLParser.RR_BRACKET, 0); }
		public TerminalNode MAX() { return getToken(TSQLParser.MAX, 0); }
		public List<TerminalNode> DECIMAL() { return getTokens(TSQLParser.DECIMAL); }
		public TerminalNode DECIMAL(int i) {
			return getToken(TSQLParser.DECIMAL, i);
		}
		public TerminalNode COMMA() { return getToken(TSQLParser.COMMA, 0); }
		public Data_type_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterData_type_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitData_type_size(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitData_type_size(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_type_sizeContext data_type_size() throws RecognitionException {
		Data_type_sizeContext _localctx = new Data_type_sizeContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_data_type_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9785);
			match(LR_BRACKET);
			setState(9788);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DECIMAL:
				{
				setState(9786);
				((Data_type_sizeContext)_localctx).presicion = match(DECIMAL);
				}
				break;
			case MAX:
				{
				setState(9787);
				match(MAX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(9792);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(9790);
				match(COMMA);
				setState(9791);
				((Data_type_sizeContext)_localctx).scale = match(DECIMAL);
				}
			}

			setState(9794);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_valueContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(TSQLParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(TSQLParser.DEFAULT, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Default_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterDefault_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitDefault_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitDefault_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_valueContext default_value() throws RecognitionException {
		Default_valueContext _localctx = new Default_valueContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_default_value);
		try {
			setState(9799);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(9796);
				match(NULL);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(9797);
				match(DEFAULT);
				}
				break;
			case FALSE:
			case TRUE:
			case DECIMAL:
			case STRING:
			case BINARY:
			case FLOAT:
			case REAL:
			case IPV4_ADDR:
			case DOLLAR:
			case PLUS:
			case MINUS:
				enterOuterAlt(_localctx, 3);
				{
				setState(9798);
				constant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token dollar;
		public TerminalNode STRING() { return getToken(TSQLParser.STRING, 0); }
		public TerminalNode BINARY() { return getToken(TSQLParser.BINARY, 0); }
		public Signed_numerical_literalContext signed_numerical_literal() {
			return getRuleContext(Signed_numerical_literalContext.class,0);
		}
		public TerminalNode DOLLAR() { return getToken(TSQLParser.DOLLAR, 0); }
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSQLParser.FLOAT, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode TRUE() { return getToken(TSQLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(TSQLParser.FALSE, 0); }
		public TerminalNode IPV4_ADDR() { return getToken(TSQLParser.IPV4_ADDR, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_constant);
		int _la;
		try {
			setState(9812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1369,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9801);
				match(STRING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9802);
				match(BINARY);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9803);
				signed_numerical_literal();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9805);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(9804);
					sign();
					}
				}

				setState(9807);
				((ConstantContext)_localctx).dollar = match(DOLLAR);
				setState(9808);
				_la = _input.LA(1);
				if ( !(_la==DECIMAL || _la==FLOAT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9809);
				match(TRUE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9810);
				match(FALSE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9811);
				match(IPV4_ADDR);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signed_numerical_literalContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode REAL() { return getToken(TSQLParser.REAL, 0); }
		public TerminalNode FLOAT() { return getToken(TSQLParser.FLOAT, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public Signed_numerical_literalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signed_numerical_literal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSigned_numerical_literal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSigned_numerical_literal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSigned_numerical_literal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Signed_numerical_literalContext signed_numerical_literal() throws RecognitionException {
		Signed_numerical_literalContext _localctx = new Signed_numerical_literalContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_signed_numerical_literal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9815);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(9814);
				sign();
				}
			}

			setState(9817);
			_la = _input.LA(1);
			if ( !(((((_la - 792)) & ~0x3f) == 0 && ((1L << (_la - 792)) & ((1L << (DECIMAL - 792)) | (1L << (FLOAT - 792)) | (1L << (REAL - 792)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(TSQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(TSQLParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9819);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Simple_idContext simple_id() {
			return getRuleContext(Simple_idContext.class,0);
		}
		public TerminalNode DOUBLE_QUOTE_ID() { return getToken(TSQLParser.DOUBLE_QUOTE_ID, 0); }
		public TerminalNode SQUARE_BRACKET_ID() { return getToken(TSQLParser.SQUARE_BRACKET_ID, 0); }
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_id);
		try {
			setState(9824);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILLFACTOR:
			case PRECISION:
			case ABSENT:
			case ABSOLUTE:
			case ACCENT_SENSITIVITY:
			case ACTION:
			case ACTIVATION:
			case ACTIVE:
			case ADDRESS:
			case AES_128:
			case AES_192:
			case AES_256:
			case AES:
			case AFFINITY:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ALLOW_CONNECTIONS:
			case ALLOW_ENCRYPTED_VALUE_MODIFICATIONS:
			case ALLOW_MULTIPLE_EVENT_LOSS:
			case ALLOW_SINGLE_EVENT_LOSS:
			case ALLOW_SNAPSHOT_ISOLATION:
			case ALLOWED:
			case ANONYMOUS:
			case ANSI_NULL_DEFAULT:
			case ANSI_NULLS:
			case ANSI_PADDING:
			case ANSI_WARNINGS:
			case APPEND:
			case APPLICATION_LOG:
			case APPLICATION:
			case APPLY:
			case ARITHABORT:
			case ASSEMBLY:
			case ASYMMETRIC:
			case ASYNCHRONOUS_COMMIT:
			case AUDIT_GUID:
			case AUDIT:
			case AUTHENTICATION:
			case AUTO_CLEANUP:
			case AUTO_CLOSE:
			case AUTO_CREATE_STATISTICS:
			case AUTO_SHRINK:
			case AUTO_UPDATE_STATISTICS_ASYNC:
			case AUTO_UPDATE_STATISTICS:
			case AUTO:
			case AUTOGROW_ALL_FILES:
			case AUTOGROW_SINGLE_FILE:
			case AUTOMATED_BACKUP_PREFERENCE:
			case AUTOMATIC:
			case AVAILABILITY_MODE:
			case AVAILABILITY:
			case BACKUP_PRIORITY:
			case BEFORE:
			case BEGIN_DIALOG:
			case BINARY_BASE64:
			case BINDING:
			case BLOB_STORAGE:
			case BLOCK:
			case BLOCKING_HIERARCHY:
			case BLOCKSIZE:
			case BROKER_INSTANCE:
			case BROKER:
			case BUFFER:
			case BUFFERCOUNT:
			case BULK_LOGGED:
			case CACHE:
			case CALLED:
			case CALLER:
			case CAP_CPU_PERCENT:
			case CAST:
			case CATALOG:
			case CATCH:
			case CERTIFICATE:
			case CHANGE_RETENTION:
			case CHANGE_TRACKING:
			case CHANGES:
			case CHANGETABLE:
			case CHAR:
			case CHARACTER:
			case CHECK_EXPIRATION:
			case CHECK_POLICY:
			case CHECKSUM:
			case CLASSIFIER_FUNCTION:
			case CLEANUP:
			case CLUSTER:
			case COLLECTION:
			case COLUMN_MASTER_KEY:
			case COMMITTED:
			case COMPATIBILITY_LEVEL:
			case COMPRESSION:
			case CONCAT_NULL_YIELDS_NULL:
			case CONCAT:
			case CONFIGURATION:
			case CONNECT:
			case CONTAINMENT:
			case CONTENT:
			case CONTEXT:
			case CONTINUE_AFTER_ERROR:
			case CONTRACT_NAME:
			case CONTRACT:
			case CONTROL:
			case CONVERSATION:
			case COOKIE:
			case COPY_ONLY:
			case COUNTER:
			case CPU:
			case CREATE_NEW:
			case CREATION_DISPOSITION:
			case CREDENTIAL:
			case CRYPTOGRAPHIC:
			case CURSOR_CLOSE_ON_COMMIT:
			case CURSOR_DEFAULT:
			case CYCLE:
			case DATA_COMPRESSION:
			case DATA_SOURCE:
			case DATA:
			case DATABASE_MIRRORING:
			case DATE_CORRELATION_OPTIMIZATION:
			case DAYS:
			case DB_CHAINING:
			case DB_FAILOVER:
			case DECRYPTION:
			case DEFAULT_DATABASE:
			case DEFAULT_FULLTEXT_LANGUAGE:
			case DEFAULT_LANGUAGE:
			case DEFAULT_SCHEMA:
			case DELAY:
			case DELAYED_DURABILITY:
			case DEPENDENTS:
			case DES:
			case DESCRIPTION:
			case DESX:
			case DHCP:
			case DIAGNOSTICS:
			case DIALOG:
			case DIFFERENTIAL:
			case DIRECTORY_NAME:
			case DISABLE_BROKER:
			case DISABLE:
			case DISABLED:
			case DOCUMENT:
			case DTC_SUPPORT:
			case DYNAMIC:
			case ELEMENTS:
			case EMERGENCY:
			case EMPTY:
			case ENABLE_BROKER:
			case ENABLE:
			case ENABLED:
			case ENCRYPTED_VALUE:
			case ENCRYPTION:
			case ENDPOINT_URL:
			case ENDPOINT:
			case ERROR_BROKER_CONVERSATIONS:
			case ERROR:
			case EVENT_RETENTION_MODE:
			case EVENT:
			case EXCLUSIVE:
			case EXECUTABLE_FILE:
			case EXECUTABLE:
			case EXPAND:
			case EXPIREDATE:
			case EXPIRY_DATE:
			case EXPLICIT:
			case EXTENSION:
			case EXTERNAL_ACCESS:
			case FAIL_OPERATION:
			case FAILOVER_MODE:
			case FAILOVER:
			case FAILURE_CONDITION_LEVEL:
			case FAILURECONDITIONLEVEL:
			case FALSE:
			case FAN_IN:
			case FAST_FORWARD:
			case FAST:
			case FILE_SNAPSHOT:
			case FILEGROUP:
			case FILEGROWTH:
			case FILENAME:
			case FILEPATH:
			case FILESTREAM_ON:
			case FILESTREAM:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE_FAILOVER_ALLOW_DATA_LOSS:
			case FORCE_SERVICE_ALLOW_DATA_LOSS:
			case FORCE:
			case FORCED:
			case FORCESEEK:
			case FORMAT:
			case FORWARD_ONLY:
			case FULLSCAN:
			case FULLTEXT:
			case GB:
			case GET:
			case GLOBAL:
			case GOVERNOR:
			case GROUP_MAX_REQUESTS:
			case HADR:
			case HASH:
			case HASHED:
			case HEALTH_CHECK_TIMEOUT:
			case HEALTHCHECKTIMEOUT:
			case HIGH:
			case HONOR_BROKER_PRIORITY:
			case HOURS:
			case IDENTITY_VALUE:
			case IIF:
			case IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX:
			case IMMEDIATE:
			case IMPERSONATE:
			case IMPORTANCE:
			case INCLUDE_NULL_VALUES:
			case INCLUDE:
			case INCREMENT:
			case INCREMENTAL:
			case INFINITE:
			case INIT:
			case INITIATOR:
			case INPUT:
			case INSENSITIVE:
			case INSTEAD:
			case IO:
			case IP:
			case ISOLATION:
			case JSON:
			case KB:
			case KEEP:
			case KEEPFIXED:
			case KERBEROS:
			case KEY_PATH:
			case KEY_SOURCE:
			case KEY_STORE_PROVIDER_NAME:
			case KEYS:
			case KEYSET:
			case LANGUAGE:
			case LAST:
			case LEVEL:
			case LIBRARY:
			case LIFETIME:
			case LINUX:
			case LIST:
			case LISTENER_IP:
			case LISTENER_PORT:
			case LISTENER_URL:
			case LISTENER:
			case LOB_COMPACTION:
			case LOCAL_SERVICE_NAME:
			case LOCAL:
			case LOCATION:
			case LOCK_ESCALATION:
			case LOCK:
			case LOG:
			case LOGIN:
			case LOOP:
			case LOW:
			case MANUAL:
			case MARK:
			case MASTER:
			case MATCHED:
			case MATERIALIZED:
			case MAX_CPU_PERCENT:
			case MAX_DISPATCH_LATENCY:
			case MAX_DOP:
			case MAX_EVENT_SIZE:
			case MAX_FILES:
			case MAX_IOPS_PER_VOLUME:
			case MAX_MEMORY_PERCENT:
			case MAX_MEMORY:
			case MAX_OUTSTANDING_IO_PER_VOLUME:
			case MAX_PROCESSES:
			case MAX_QUEUE_READERS:
			case MAX_ROLLOVER_FILES:
			case MAX_SIZE:
			case MAX:
			case MAXDOP:
			case MAXRECURSION:
			case MAXSIZE:
			case MAXTRANSFER:
			case MAXVALUE:
			case MB:
			case MEDIADESCRIPTION:
			case MEDIANAME:
			case MEDIUM:
			case MEMBER:
			case MEMORY_OPTIMIZED_DATA:
			case MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT:
			case MEMORY_OPTIMIZED:
			case MEMORY_PARTITION_MODE:
			case MESSAGE_FORWARD_SIZE:
			case MESSAGE_FORWARDING:
			case MESSAGE:
			case MIN_ACTIVE_ROWVERSION:
			case MIN_CPU_PERCENT:
			case MIN_IOPS_PER_VOLUME:
			case MIN_MEMORY_PERCENT:
			case MINUTES:
			case MINVALUE:
			case MIRROR_ADDRESS:
			case MIRROR:
			case MIXED_PAGE_ALLOCATION:
			case MODE:
			case MODIFY:
			case MOVE:
			case MULTI_USER:
			case MUST_CHANGE:
			case NAME:
			case NCHAR:
			case NEGOTIATE:
			case NESTED_TRIGGERS:
			case NEW_ACCOUNT:
			case NEW_BROKER:
			case NEW_PASSWORD:
			case NEWNAME:
			case NEXT:
			case NO_CHECKSUM:
			case NO_COMPRESSION:
			case NO_EVENT_LOSS:
			case NO_TRUNCATE:
			case NO_WAIT:
			case NO:
			case NODES:
			case NOEXPAND:
			case NOFORMAT:
			case NOINIT:
			case NON_TRANSACTED_ACCESS:
			case NONE:
			case NORECOMPUTE:
			case NORECOVERY:
			case NOREWIND:
			case NOSKIP:
			case NOTIFICATION:
			case NOUNLOAD:
			case NOWAIT:
			case NTLM:
			case NUMANODE:
			case NUMERIC_ROUNDABORT:
			case OBJECT:
			case OFFLINE:
			case OFFSET:
			case OLD_ACCOUNT:
			case OLD_PASSWORD:
			case ON_FAILURE:
			case ONLINE:
			case ONLY:
			case OPEN_EXISTING:
			case OPENJSON:
			case OPTIMISTIC:
			case OPTIMIZE:
			case OUT:
			case OUTPUT:
			case OWNER:
			case PAGE_VERIFY:
			case PARAMETERIZATION:
			case PARSE:
			case PARTIAL:
			case PARTITION:
			case PARTITIONS:
			case PARTNER:
			case PASSWORD:
			case PATH:
			case PAUSE:
			case PER_CPU:
			case PER_DB:
			case PER_NODE:
			case PERMISSION_SET:
			case PERSIST_SAMPLE_PERSENT:
			case PERSISTED:
			case PERSISTENT_LOG_BUFFER:
			case PLATFORM:
			case POISON_MESSAGE_HANDLING:
			case POLICY:
			case POOL:
			case POPULATION:
			case PORT:
			case PRECEDING:
			case PREDICATE:
			case PRIMARY_ROLE:
			case PRIOR:
			case PRIORITY_LEVEL:
			case PRIORITY:
			case PRIVATE_KEY:
			case PRIVATE:
			case PRIVILEGES:
			case PROCEDURE_NAME:
			case PROCESS:
			case PROFILE:
			case PROPERTY_DESCRIPTION:
			case PROPERTY_INT_ID:
			case PROPERTY_SET_GUID:
			case PROPERTY:
			case PROVIDER_KEY_NAME:
			case PROVIDER:
			case QUERYTRACEON:
			case QUEUE_DELAY:
			case QUEUE:
			case QUOTED_IDENTIFIER:
			case R_LETTER:
			case RANGE:
			case RAW:
			case RC2:
			case RC4_128:
			case RC4:
			case READ_COMMITTED_SNAPSHOT:
			case READ_ONLY_ROUTING_LIST:
			case READ_ONLY:
			case READ_WRITE_FILEGROUPS:
			case READ_WRITE:
			case READWRITE:
			case READONLY:
			case REBUILD:
			case RECEIVE:
			case RECOMPILE:
			case RECOVERY:
			case RECURSIVE_TRIGGERS:
			case REGENERATE:
			case RELATED_CONVERSATION_GROUP:
			case RELATED_CONVERSATION:
			case RELATIVE:
			case REMOTE_SERVICE_NAME:
			case REMOTE:
			case REMOVE:
			case REORGANIZE:
			case REPEATABLE:
			case REPLICA:
			case REQUEST_MAX_CPU_TIME_SEC:
			case REQUEST_MAX_MEMORY_GRANT_PERCENT:
			case REQUEST_MEMORY_GRANT_TIMEOUT_SEC:
			case REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT:
			case REQUIRED:
			case RESAMPLE:
			case RESERVE_DISK_SPACE:
			case RESET:
			case RESOURCE_MANAGER_LOCATION:
			case RESOURCE:
			case RESTART:
			case RESTRICTED_USER:
			case RESULT:
			case RESUME:
			case RETAINDAYS:
			case RETENTION:
			case RETURNS:
			case REWIND:
			case ROBUST:
			case ROLE:
			case ROOT:
			case ROUTE:
			case ROW:
			case ROWGUID:
			case ROWS:
			case RSA_1024:
			case RSA_2048:
			case RSA_3072:
			case RSA_4096:
			case RSA_512:
			case SAFE:
			case SAFETY:
			case SAMPLE:
			case SCHEDULER:
			case SCHEMABINDING:
			case SCHEME:
			case SCOPED:
			case SCROLL_LOCKS:
			case SCROLL:
			case SEARCH:
			case SECONDARY_ONLY:
			case SECONDARY_ROLE:
			case SECONDARY:
			case SECONDS:
			case SECRET:
			case SECURITY_LOG:
			case SECURITY:
			case SEEDING_MODE:
			case SELECTIVE:
			case SELF:
			case SEMI_SENSITIVE:
			case SEND:
			case SENT:
			case SEQUENCE:
			case SERIALIZABLE:
			case SERVER:
			case SERVICE_BROKER:
			case SERVICE_NAME:
			case SERVICE:
			case SESSION_TIMEOUT:
			case SESSION:
			case SETERROR:
			case SETS:
			case SHARE:
			case SHOWPLAN:
			case SID:
			case SIGNATURE:
			case SIMPLE:
			case SINGLE_USER:
			case SINGLETON:
			case SIZE:
			case SKIP_KEYWORD:
			case SNAPSHOT:
			case SOFTNUMA:
			case SOURCE:
			case SPARSE:
			case SPATIAL_WINDOW_MAX_CELLS:
			case SPECIFICATION:
			case SPLIT:
			case SQL:
			case SQLDUMPERFLAGS:
			case SQLDUMPERPATH:
			case SQLDUMPERTIMEOUT:
			case STANDBY:
			case START_DATE:
			case START:
			case STARTED:
			case STARTUP_STATE:
			case STATE:
			case STATIC:
			case STATISTICAL_SEMANTICS:
			case STATS:
			case STATUS:
			case STOP_ON_ERROR:
			case STOP:
			case STOPLIST:
			case STOPPED:
			case STRING_AGG:
			case SUBJECT:
			case SUPPORTED:
			case SUSPEND:
			case SYMMETRIC:
			case SYNCHRONOUS_COMMIT:
			case SYNONYM:
			case SYSTEM:
			case TAKE:
			case TAPE:
			case TARGET_RECOVERY_TIME:
			case TARGET:
			case TB:
			case TCP:
			case TEXTIMAGE_ON:
			case THROW:
			case TIES:
			case TIME:
			case TIMEOUT:
			case TIMER:
			case TORN_PAGE_DETECTION:
			case TRACK_CAUSALITY:
			case TRACK_COLUMNS_UPDATED:
			case TRANSFER:
			case TRANSFORM_NOISE_WORDS:
			case TRIM:
			case TRIPLE_DES_3KEY:
			case TRIPLE_DES:
			case TRUE:
			case TRUSTWORTHY:
			case TRY:
			case TSQL:
			case TWO_DIGIT_YEAR_CUTOFF:
			case TYPE_WARNING:
			case TYPE:
			case UNBOUNDED:
			case UNCHECKED:
			case UNCOMMITTED:
			case UNDEFINED:
			case UNKNOWN:
			case UNLIMITED:
			case UNLOCK:
			case UNSAFE:
			case URL:
			case USED:
			case USING:
			case VALID_XML:
			case VALIDATION:
			case VALUE:
			case VERBOSELOGGING:
			case VERSION:
			case VIEW_METADATA:
			case VIEWS:
			case VISIBILITY:
			case WAIT:
			case WELL_FORMED_XML:
			case WINDOWS:
			case WITHOUT_ARRAY_WRAPPER:
			case WITHOUT:
			case WITNESS:
			case WORK:
			case WORKLOAD:
			case XML:
			case XMLDATA:
			case XMLNAMESPACES:
			case XMLSCHEMA:
			case XQUERY:
			case XSINIL:
			case ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(9821);
				simple_id();
				}
				break;
			case DOUBLE_QUOTE_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(9822);
				match(DOUBLE_QUOTE_ID);
				}
				break;
			case SQUARE_BRACKET_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(9823);
				match(SQUARE_BRACKET_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_idContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(TSQLParser.ID, 0); }
		public TerminalNode ABSENT() { return getToken(TSQLParser.ABSENT, 0); }
		public TerminalNode ABSOLUTE() { return getToken(TSQLParser.ABSOLUTE, 0); }
		public TerminalNode ACCENT_SENSITIVITY() { return getToken(TSQLParser.ACCENT_SENSITIVITY, 0); }
		public TerminalNode ACTION() { return getToken(TSQLParser.ACTION, 0); }
		public TerminalNode ACTIVATION() { return getToken(TSQLParser.ACTIVATION, 0); }
		public TerminalNode ACTIVE() { return getToken(TSQLParser.ACTIVE, 0); }
		public TerminalNode ADDRESS() { return getToken(TSQLParser.ADDRESS, 0); }
		public TerminalNode AES_128() { return getToken(TSQLParser.AES_128, 0); }
		public TerminalNode AES_192() { return getToken(TSQLParser.AES_192, 0); }
		public TerminalNode AES_256() { return getToken(TSQLParser.AES_256, 0); }
		public TerminalNode AES() { return getToken(TSQLParser.AES, 0); }
		public TerminalNode AFFINITY() { return getToken(TSQLParser.AFFINITY, 0); }
		public TerminalNode AFTER() { return getToken(TSQLParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(TSQLParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(TSQLParser.ALGORITHM, 0); }
		public TerminalNode ALLOW_CONNECTIONS() { return getToken(TSQLParser.ALLOW_CONNECTIONS, 0); }
		public TerminalNode ALLOW_ENCRYPTED_VALUE_MODIFICATIONS() { return getToken(TSQLParser.ALLOW_ENCRYPTED_VALUE_MODIFICATIONS, 0); }
		public TerminalNode ALLOW_MULTIPLE_EVENT_LOSS() { return getToken(TSQLParser.ALLOW_MULTIPLE_EVENT_LOSS, 0); }
		public TerminalNode ALLOW_SINGLE_EVENT_LOSS() { return getToken(TSQLParser.ALLOW_SINGLE_EVENT_LOSS, 0); }
		public TerminalNode ALLOW_SNAPSHOT_ISOLATION() { return getToken(TSQLParser.ALLOW_SNAPSHOT_ISOLATION, 0); }
		public TerminalNode ALLOWED() { return getToken(TSQLParser.ALLOWED, 0); }
		public TerminalNode ANONYMOUS() { return getToken(TSQLParser.ANONYMOUS, 0); }
		public TerminalNode ANSI_NULL_DEFAULT() { return getToken(TSQLParser.ANSI_NULL_DEFAULT, 0); }
		public TerminalNode ANSI_NULLS() { return getToken(TSQLParser.ANSI_NULLS, 0); }
		public TerminalNode ANSI_PADDING() { return getToken(TSQLParser.ANSI_PADDING, 0); }
		public TerminalNode ANSI_WARNINGS() { return getToken(TSQLParser.ANSI_WARNINGS, 0); }
		public TerminalNode APPEND() { return getToken(TSQLParser.APPEND, 0); }
		public TerminalNode APPLICATION_LOG() { return getToken(TSQLParser.APPLICATION_LOG, 0); }
		public TerminalNode APPLICATION() { return getToken(TSQLParser.APPLICATION, 0); }
		public TerminalNode APPLY() { return getToken(TSQLParser.APPLY, 0); }
		public TerminalNode ARITHABORT() { return getToken(TSQLParser.ARITHABORT, 0); }
		public TerminalNode ASSEMBLY() { return getToken(TSQLParser.ASSEMBLY, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(TSQLParser.ASYMMETRIC, 0); }
		public TerminalNode ASYNCHRONOUS_COMMIT() { return getToken(TSQLParser.ASYNCHRONOUS_COMMIT, 0); }
		public TerminalNode AUDIT_GUID() { return getToken(TSQLParser.AUDIT_GUID, 0); }
		public TerminalNode AUDIT() { return getToken(TSQLParser.AUDIT, 0); }
		public TerminalNode AUTHENTICATION() { return getToken(TSQLParser.AUTHENTICATION, 0); }
		public TerminalNode AUTO_CLEANUP() { return getToken(TSQLParser.AUTO_CLEANUP, 0); }
		public TerminalNode AUTO_CLOSE() { return getToken(TSQLParser.AUTO_CLOSE, 0); }
		public TerminalNode AUTO_CREATE_STATISTICS() { return getToken(TSQLParser.AUTO_CREATE_STATISTICS, 0); }
		public TerminalNode AUTO_SHRINK() { return getToken(TSQLParser.AUTO_SHRINK, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS_ASYNC() { return getToken(TSQLParser.AUTO_UPDATE_STATISTICS_ASYNC, 0); }
		public TerminalNode AUTO_UPDATE_STATISTICS() { return getToken(TSQLParser.AUTO_UPDATE_STATISTICS, 0); }
		public TerminalNode AUTO() { return getToken(TSQLParser.AUTO, 0); }
		public TerminalNode AUTOGROW_ALL_FILES() { return getToken(TSQLParser.AUTOGROW_ALL_FILES, 0); }
		public TerminalNode AUTOGROW_SINGLE_FILE() { return getToken(TSQLParser.AUTOGROW_SINGLE_FILE, 0); }
		public TerminalNode AUTOMATED_BACKUP_PREFERENCE() { return getToken(TSQLParser.AUTOMATED_BACKUP_PREFERENCE, 0); }
		public TerminalNode AUTOMATIC() { return getToken(TSQLParser.AUTOMATIC, 0); }
		public TerminalNode AVAILABILITY_MODE() { return getToken(TSQLParser.AVAILABILITY_MODE, 0); }
		public TerminalNode AVAILABILITY() { return getToken(TSQLParser.AVAILABILITY, 0); }
		public TerminalNode BACKUP_PRIORITY() { return getToken(TSQLParser.BACKUP_PRIORITY, 0); }
		public TerminalNode BEFORE() { return getToken(TSQLParser.BEFORE, 0); }
		public TerminalNode BEGIN_DIALOG() { return getToken(TSQLParser.BEGIN_DIALOG, 0); }
		public TerminalNode BINARY_BASE64() { return getToken(TSQLParser.BINARY_BASE64, 0); }
		public TerminalNode BINDING() { return getToken(TSQLParser.BINDING, 0); }
		public TerminalNode BLOB_STORAGE() { return getToken(TSQLParser.BLOB_STORAGE, 0); }
		public TerminalNode BLOCK() { return getToken(TSQLParser.BLOCK, 0); }
		public TerminalNode BLOCKING_HIERARCHY() { return getToken(TSQLParser.BLOCKING_HIERARCHY, 0); }
		public TerminalNode BLOCKSIZE() { return getToken(TSQLParser.BLOCKSIZE, 0); }
		public TerminalNode BROKER_INSTANCE() { return getToken(TSQLParser.BROKER_INSTANCE, 0); }
		public TerminalNode BROKER() { return getToken(TSQLParser.BROKER, 0); }
		public TerminalNode BUFFER() { return getToken(TSQLParser.BUFFER, 0); }
		public TerminalNode BUFFERCOUNT() { return getToken(TSQLParser.BUFFERCOUNT, 0); }
		public TerminalNode BULK_LOGGED() { return getToken(TSQLParser.BULK_LOGGED, 0); }
		public TerminalNode CACHE() { return getToken(TSQLParser.CACHE, 0); }
		public TerminalNode CALLED() { return getToken(TSQLParser.CALLED, 0); }
		public TerminalNode CALLER() { return getToken(TSQLParser.CALLER, 0); }
		public TerminalNode CAP_CPU_PERCENT() { return getToken(TSQLParser.CAP_CPU_PERCENT, 0); }
		public TerminalNode CAST() { return getToken(TSQLParser.CAST, 0); }
		public TerminalNode CATALOG() { return getToken(TSQLParser.CATALOG, 0); }
		public TerminalNode CATCH() { return getToken(TSQLParser.CATCH, 0); }
		public TerminalNode CERTIFICATE() { return getToken(TSQLParser.CERTIFICATE, 0); }
		public TerminalNode CHANGE_RETENTION() { return getToken(TSQLParser.CHANGE_RETENTION, 0); }
		public TerminalNode CHANGE_TRACKING() { return getToken(TSQLParser.CHANGE_TRACKING, 0); }
		public TerminalNode CHANGES() { return getToken(TSQLParser.CHANGES, 0); }
		public TerminalNode CHANGETABLE() { return getToken(TSQLParser.CHANGETABLE, 0); }
		public TerminalNode CHAR() { return getToken(TSQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(TSQLParser.CHARACTER, 0); }
		public TerminalNode CHECK_EXPIRATION() { return getToken(TSQLParser.CHECK_EXPIRATION, 0); }
		public TerminalNode CHECK_POLICY() { return getToken(TSQLParser.CHECK_POLICY, 0); }
		public TerminalNode CHECKSUM() { return getToken(TSQLParser.CHECKSUM, 0); }
		public TerminalNode CLASSIFIER_FUNCTION() { return getToken(TSQLParser.CLASSIFIER_FUNCTION, 0); }
		public TerminalNode CLEANUP() { return getToken(TSQLParser.CLEANUP, 0); }
		public TerminalNode CLUSTER() { return getToken(TSQLParser.CLUSTER, 0); }
		public TerminalNode COLLECTION() { return getToken(TSQLParser.COLLECTION, 0); }
		public TerminalNode COLUMN_MASTER_KEY() { return getToken(TSQLParser.COLUMN_MASTER_KEY, 0); }
		public TerminalNode COMMITTED() { return getToken(TSQLParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY_LEVEL() { return getToken(TSQLParser.COMPATIBILITY_LEVEL, 0); }
		public TerminalNode COMPRESSION() { return getToken(TSQLParser.COMPRESSION, 0); }
		public TerminalNode CONCAT_NULL_YIELDS_NULL() { return getToken(TSQLParser.CONCAT_NULL_YIELDS_NULL, 0); }
		public TerminalNode CONCAT() { return getToken(TSQLParser.CONCAT, 0); }
		public TerminalNode CONFIGURATION() { return getToken(TSQLParser.CONFIGURATION, 0); }
		public TerminalNode CONNECT() { return getToken(TSQLParser.CONNECT, 0); }
		public TerminalNode CONTAINMENT() { return getToken(TSQLParser.CONTAINMENT, 0); }
		public TerminalNode CONTENT() { return getToken(TSQLParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(TSQLParser.CONTEXT, 0); }
		public TerminalNode CONTINUE_AFTER_ERROR() { return getToken(TSQLParser.CONTINUE_AFTER_ERROR, 0); }
		public TerminalNode CONTRACT_NAME() { return getToken(TSQLParser.CONTRACT_NAME, 0); }
		public TerminalNode CONTRACT() { return getToken(TSQLParser.CONTRACT, 0); }
		public TerminalNode CONTROL() { return getToken(TSQLParser.CONTROL, 0); }
		public TerminalNode CONVERSATION() { return getToken(TSQLParser.CONVERSATION, 0); }
		public TerminalNode COOKIE() { return getToken(TSQLParser.COOKIE, 0); }
		public TerminalNode COPY_ONLY() { return getToken(TSQLParser.COPY_ONLY, 0); }
		public TerminalNode COUNTER() { return getToken(TSQLParser.COUNTER, 0); }
		public TerminalNode CPU() { return getToken(TSQLParser.CPU, 0); }
		public TerminalNode CREATE_NEW() { return getToken(TSQLParser.CREATE_NEW, 0); }
		public TerminalNode CREATION_DISPOSITION() { return getToken(TSQLParser.CREATION_DISPOSITION, 0); }
		public TerminalNode CREDENTIAL() { return getToken(TSQLParser.CREDENTIAL, 0); }
		public TerminalNode CRYPTOGRAPHIC() { return getToken(TSQLParser.CRYPTOGRAPHIC, 0); }
		public TerminalNode CURSOR_CLOSE_ON_COMMIT() { return getToken(TSQLParser.CURSOR_CLOSE_ON_COMMIT, 0); }
		public TerminalNode CURSOR_DEFAULT() { return getToken(TSQLParser.CURSOR_DEFAULT, 0); }
		public TerminalNode CYCLE() { return getToken(TSQLParser.CYCLE, 0); }
		public TerminalNode DATA_COMPRESSION() { return getToken(TSQLParser.DATA_COMPRESSION, 0); }
		public TerminalNode DATA_SOURCE() { return getToken(TSQLParser.DATA_SOURCE, 0); }
		public TerminalNode DATA() { return getToken(TSQLParser.DATA, 0); }
		public TerminalNode DATABASE_MIRRORING() { return getToken(TSQLParser.DATABASE_MIRRORING, 0); }
		public TerminalNode DATE_CORRELATION_OPTIMIZATION() { return getToken(TSQLParser.DATE_CORRELATION_OPTIMIZATION, 0); }
		public TerminalNode DAYS() { return getToken(TSQLParser.DAYS, 0); }
		public TerminalNode DB_CHAINING() { return getToken(TSQLParser.DB_CHAINING, 0); }
		public TerminalNode DB_FAILOVER() { return getToken(TSQLParser.DB_FAILOVER, 0); }
		public TerminalNode DECRYPTION() { return getToken(TSQLParser.DECRYPTION, 0); }
		public TerminalNode DEFAULT_DATABASE() { return getToken(TSQLParser.DEFAULT_DATABASE, 0); }
		public TerminalNode DEFAULT_FULLTEXT_LANGUAGE() { return getToken(TSQLParser.DEFAULT_FULLTEXT_LANGUAGE, 0); }
		public TerminalNode DEFAULT_LANGUAGE() { return getToken(TSQLParser.DEFAULT_LANGUAGE, 0); }
		public TerminalNode DEFAULT_SCHEMA() { return getToken(TSQLParser.DEFAULT_SCHEMA, 0); }
		public TerminalNode DELAY() { return getToken(TSQLParser.DELAY, 0); }
		public TerminalNode DELAYED_DURABILITY() { return getToken(TSQLParser.DELAYED_DURABILITY, 0); }
		public TerminalNode DEPENDENTS() { return getToken(TSQLParser.DEPENDENTS, 0); }
		public TerminalNode DES() { return getToken(TSQLParser.DES, 0); }
		public TerminalNode DESCRIPTION() { return getToken(TSQLParser.DESCRIPTION, 0); }
		public TerminalNode DESX() { return getToken(TSQLParser.DESX, 0); }
		public TerminalNode DHCP() { return getToken(TSQLParser.DHCP, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(TSQLParser.DIAGNOSTICS, 0); }
		public TerminalNode DIALOG() { return getToken(TSQLParser.DIALOG, 0); }
		public TerminalNode DIFFERENTIAL() { return getToken(TSQLParser.DIFFERENTIAL, 0); }
		public TerminalNode DIRECTORY_NAME() { return getToken(TSQLParser.DIRECTORY_NAME, 0); }
		public TerminalNode DISABLE_BROKER() { return getToken(TSQLParser.DISABLE_BROKER, 0); }
		public TerminalNode DISABLE() { return getToken(TSQLParser.DISABLE, 0); }
		public TerminalNode DISABLED() { return getToken(TSQLParser.DISABLED, 0); }
		public TerminalNode DOCUMENT() { return getToken(TSQLParser.DOCUMENT, 0); }
		public TerminalNode DTC_SUPPORT() { return getToken(TSQLParser.DTC_SUPPORT, 0); }
		public TerminalNode DYNAMIC() { return getToken(TSQLParser.DYNAMIC, 0); }
		public TerminalNode ELEMENTS() { return getToken(TSQLParser.ELEMENTS, 0); }
		public TerminalNode EMERGENCY() { return getToken(TSQLParser.EMERGENCY, 0); }
		public TerminalNode EMPTY() { return getToken(TSQLParser.EMPTY, 0); }
		public TerminalNode ENABLE_BROKER() { return getToken(TSQLParser.ENABLE_BROKER, 0); }
		public TerminalNode ENABLE() { return getToken(TSQLParser.ENABLE, 0); }
		public TerminalNode ENABLED() { return getToken(TSQLParser.ENABLED, 0); }
		public TerminalNode ENCRYPTED_VALUE() { return getToken(TSQLParser.ENCRYPTED_VALUE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(TSQLParser.ENCRYPTION, 0); }
		public TerminalNode ENDPOINT_URL() { return getToken(TSQLParser.ENDPOINT_URL, 0); }
		public TerminalNode ENDPOINT() { return getToken(TSQLParser.ENDPOINT, 0); }
		public TerminalNode ERROR_BROKER_CONVERSATIONS() { return getToken(TSQLParser.ERROR_BROKER_CONVERSATIONS, 0); }
		public TerminalNode ERROR() { return getToken(TSQLParser.ERROR, 0); }
		public TerminalNode EVENT_RETENTION_MODE() { return getToken(TSQLParser.EVENT_RETENTION_MODE, 0); }
		public TerminalNode EVENT() { return getToken(TSQLParser.EVENT, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(TSQLParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTABLE_FILE() { return getToken(TSQLParser.EXECUTABLE_FILE, 0); }
		public TerminalNode EXECUTABLE() { return getToken(TSQLParser.EXECUTABLE, 0); }
		public TerminalNode EXPAND() { return getToken(TSQLParser.EXPAND, 0); }
		public TerminalNode EXPIREDATE() { return getToken(TSQLParser.EXPIREDATE, 0); }
		public TerminalNode EXPIRY_DATE() { return getToken(TSQLParser.EXPIRY_DATE, 0); }
		public TerminalNode EXPLICIT() { return getToken(TSQLParser.EXPLICIT, 0); }
		public TerminalNode EXTENSION() { return getToken(TSQLParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL_ACCESS() { return getToken(TSQLParser.EXTERNAL_ACCESS, 0); }
		public TerminalNode FAIL_OPERATION() { return getToken(TSQLParser.FAIL_OPERATION, 0); }
		public TerminalNode FAILOVER_MODE() { return getToken(TSQLParser.FAILOVER_MODE, 0); }
		public TerminalNode FAILOVER() { return getToken(TSQLParser.FAILOVER, 0); }
		public TerminalNode FAILURE_CONDITION_LEVEL() { return getToken(TSQLParser.FAILURE_CONDITION_LEVEL, 0); }
		public TerminalNode FAILURECONDITIONLEVEL() { return getToken(TSQLParser.FAILURECONDITIONLEVEL, 0); }
		public TerminalNode FALSE() { return getToken(TSQLParser.FALSE, 0); }
		public TerminalNode FAN_IN() { return getToken(TSQLParser.FAN_IN, 0); }
		public TerminalNode FAST_FORWARD() { return getToken(TSQLParser.FAST_FORWARD, 0); }
		public TerminalNode FAST() { return getToken(TSQLParser.FAST, 0); }
		public TerminalNode FILE_SNAPSHOT() { return getToken(TSQLParser.FILE_SNAPSHOT, 0); }
		public TerminalNode FILEGROUP() { return getToken(TSQLParser.FILEGROUP, 0); }
		public TerminalNode FILEGROWTH() { return getToken(TSQLParser.FILEGROWTH, 0); }
		public TerminalNode FILENAME() { return getToken(TSQLParser.FILENAME, 0); }
		public TerminalNode FILEPATH() { return getToken(TSQLParser.FILEPATH, 0); }
		public TerminalNode FILESTREAM_ON() { return getToken(TSQLParser.FILESTREAM_ON, 0); }
		public TerminalNode FILESTREAM() { return getToken(TSQLParser.FILESTREAM, 0); }
		public TerminalNode FILLFACTOR() { return getToken(TSQLParser.FILLFACTOR, 0); }
		public TerminalNode FILTER() { return getToken(TSQLParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(TSQLParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(TSQLParser.FOLLOWING, 0); }
		public TerminalNode FORCE_FAILOVER_ALLOW_DATA_LOSS() { return getToken(TSQLParser.FORCE_FAILOVER_ALLOW_DATA_LOSS, 0); }
		public TerminalNode FORCE_SERVICE_ALLOW_DATA_LOSS() { return getToken(TSQLParser.FORCE_SERVICE_ALLOW_DATA_LOSS, 0); }
		public TerminalNode FORCE() { return getToken(TSQLParser.FORCE, 0); }
		public TerminalNode FORCED() { return getToken(TSQLParser.FORCED, 0); }
		public TerminalNode FORCESEEK() { return getToken(TSQLParser.FORCESEEK, 0); }
		public TerminalNode FORMAT() { return getToken(TSQLParser.FORMAT, 0); }
		public TerminalNode FORWARD_ONLY() { return getToken(TSQLParser.FORWARD_ONLY, 0); }
		public TerminalNode FULLSCAN() { return getToken(TSQLParser.FULLSCAN, 0); }
		public TerminalNode FULLTEXT() { return getToken(TSQLParser.FULLTEXT, 0); }
		public TerminalNode GB() { return getToken(TSQLParser.GB, 0); }
		public TerminalNode GET() { return getToken(TSQLParser.GET, 0); }
		public TerminalNode GLOBAL() { return getToken(TSQLParser.GLOBAL, 0); }
		public TerminalNode GOVERNOR() { return getToken(TSQLParser.GOVERNOR, 0); }
		public TerminalNode GROUP_MAX_REQUESTS() { return getToken(TSQLParser.GROUP_MAX_REQUESTS, 0); }
		public TerminalNode HADR() { return getToken(TSQLParser.HADR, 0); }
		public TerminalNode HASH() { return getToken(TSQLParser.HASH, 0); }
		public TerminalNode HASHED() { return getToken(TSQLParser.HASHED, 0); }
		public TerminalNode HEALTH_CHECK_TIMEOUT() { return getToken(TSQLParser.HEALTH_CHECK_TIMEOUT, 0); }
		public TerminalNode HEALTHCHECKTIMEOUT() { return getToken(TSQLParser.HEALTHCHECKTIMEOUT, 0); }
		public TerminalNode HIGH() { return getToken(TSQLParser.HIGH, 0); }
		public TerminalNode HONOR_BROKER_PRIORITY() { return getToken(TSQLParser.HONOR_BROKER_PRIORITY, 0); }
		public TerminalNode HOURS() { return getToken(TSQLParser.HOURS, 0); }
		public TerminalNode IDENTITY_VALUE() { return getToken(TSQLParser.IDENTITY_VALUE, 0); }
		public TerminalNode IIF() { return getToken(TSQLParser.IIF, 0); }
		public TerminalNode IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX() { return getToken(TSQLParser.IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX, 0); }
		public TerminalNode IMMEDIATE() { return getToken(TSQLParser.IMMEDIATE, 0); }
		public TerminalNode IMPERSONATE() { return getToken(TSQLParser.IMPERSONATE, 0); }
		public TerminalNode IMPORTANCE() { return getToken(TSQLParser.IMPORTANCE, 0); }
		public TerminalNode INCLUDE_NULL_VALUES() { return getToken(TSQLParser.INCLUDE_NULL_VALUES, 0); }
		public TerminalNode INCLUDE() { return getToken(TSQLParser.INCLUDE, 0); }
		public TerminalNode INCREMENT() { return getToken(TSQLParser.INCREMENT, 0); }
		public TerminalNode INCREMENTAL() { return getToken(TSQLParser.INCREMENTAL, 0); }
		public TerminalNode INFINITE() { return getToken(TSQLParser.INFINITE, 0); }
		public TerminalNode INIT() { return getToken(TSQLParser.INIT, 0); }
		public TerminalNode INITIATOR() { return getToken(TSQLParser.INITIATOR, 0); }
		public TerminalNode INPUT() { return getToken(TSQLParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(TSQLParser.INSENSITIVE, 0); }
		public TerminalNode INSTEAD() { return getToken(TSQLParser.INSTEAD, 0); }
		public TerminalNode IO() { return getToken(TSQLParser.IO, 0); }
		public TerminalNode IP() { return getToken(TSQLParser.IP, 0); }
		public TerminalNode ISOLATION() { return getToken(TSQLParser.ISOLATION, 0); }
		public TerminalNode JSON() { return getToken(TSQLParser.JSON, 0); }
		public TerminalNode KB() { return getToken(TSQLParser.KB, 0); }
		public TerminalNode KEEP() { return getToken(TSQLParser.KEEP, 0); }
		public TerminalNode KEEPFIXED() { return getToken(TSQLParser.KEEPFIXED, 0); }
		public TerminalNode KERBEROS() { return getToken(TSQLParser.KERBEROS, 0); }
		public TerminalNode KEY_PATH() { return getToken(TSQLParser.KEY_PATH, 0); }
		public TerminalNode KEY_SOURCE() { return getToken(TSQLParser.KEY_SOURCE, 0); }
		public TerminalNode KEY_STORE_PROVIDER_NAME() { return getToken(TSQLParser.KEY_STORE_PROVIDER_NAME, 0); }
		public TerminalNode KEYS() { return getToken(TSQLParser.KEYS, 0); }
		public TerminalNode KEYSET() { return getToken(TSQLParser.KEYSET, 0); }
		public TerminalNode LANGUAGE() { return getToken(TSQLParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(TSQLParser.LAST, 0); }
		public TerminalNode LEVEL() { return getToken(TSQLParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(TSQLParser.LIBRARY, 0); }
		public TerminalNode LIFETIME() { return getToken(TSQLParser.LIFETIME, 0); }
		public TerminalNode LINUX() { return getToken(TSQLParser.LINUX, 0); }
		public TerminalNode LIST() { return getToken(TSQLParser.LIST, 0); }
		public TerminalNode LISTENER_IP() { return getToken(TSQLParser.LISTENER_IP, 0); }
		public TerminalNode LISTENER_PORT() { return getToken(TSQLParser.LISTENER_PORT, 0); }
		public TerminalNode LISTENER_URL() { return getToken(TSQLParser.LISTENER_URL, 0); }
		public TerminalNode LISTENER() { return getToken(TSQLParser.LISTENER, 0); }
		public TerminalNode LOB_COMPACTION() { return getToken(TSQLParser.LOB_COMPACTION, 0); }
		public TerminalNode LOCAL_SERVICE_NAME() { return getToken(TSQLParser.LOCAL_SERVICE_NAME, 0); }
		public TerminalNode LOCAL() { return getToken(TSQLParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(TSQLParser.LOCATION, 0); }
		public TerminalNode LOCK_ESCALATION() { return getToken(TSQLParser.LOCK_ESCALATION, 0); }
		public TerminalNode LOCK() { return getToken(TSQLParser.LOCK, 0); }
		public TerminalNode LOG() { return getToken(TSQLParser.LOG, 0); }
		public TerminalNode LOGIN() { return getToken(TSQLParser.LOGIN, 0); }
		public TerminalNode LOOP() { return getToken(TSQLParser.LOOP, 0); }
		public TerminalNode LOW() { return getToken(TSQLParser.LOW, 0); }
		public TerminalNode MANUAL() { return getToken(TSQLParser.MANUAL, 0); }
		public TerminalNode MARK() { return getToken(TSQLParser.MARK, 0); }
		public TerminalNode MASTER() { return getToken(TSQLParser.MASTER, 0); }
		public TerminalNode MATCHED() { return getToken(TSQLParser.MATCHED, 0); }
		public TerminalNode MATERIALIZED() { return getToken(TSQLParser.MATERIALIZED, 0); }
		public TerminalNode MAX_CPU_PERCENT() { return getToken(TSQLParser.MAX_CPU_PERCENT, 0); }
		public TerminalNode MAX_DISPATCH_LATENCY() { return getToken(TSQLParser.MAX_DISPATCH_LATENCY, 0); }
		public TerminalNode MAX_DOP() { return getToken(TSQLParser.MAX_DOP, 0); }
		public TerminalNode MAX_EVENT_SIZE() { return getToken(TSQLParser.MAX_EVENT_SIZE, 0); }
		public TerminalNode MAX_FILES() { return getToken(TSQLParser.MAX_FILES, 0); }
		public TerminalNode MAX_IOPS_PER_VOLUME() { return getToken(TSQLParser.MAX_IOPS_PER_VOLUME, 0); }
		public TerminalNode MAX_MEMORY_PERCENT() { return getToken(TSQLParser.MAX_MEMORY_PERCENT, 0); }
		public TerminalNode MAX_MEMORY() { return getToken(TSQLParser.MAX_MEMORY, 0); }
		public TerminalNode MAX_OUTSTANDING_IO_PER_VOLUME() { return getToken(TSQLParser.MAX_OUTSTANDING_IO_PER_VOLUME, 0); }
		public TerminalNode MAX_PROCESSES() { return getToken(TSQLParser.MAX_PROCESSES, 0); }
		public TerminalNode MAX_QUEUE_READERS() { return getToken(TSQLParser.MAX_QUEUE_READERS, 0); }
		public TerminalNode MAX_ROLLOVER_FILES() { return getToken(TSQLParser.MAX_ROLLOVER_FILES, 0); }
		public TerminalNode MAX_SIZE() { return getToken(TSQLParser.MAX_SIZE, 0); }
		public TerminalNode MAX() { return getToken(TSQLParser.MAX, 0); }
		public TerminalNode MAXDOP() { return getToken(TSQLParser.MAXDOP, 0); }
		public TerminalNode MAXRECURSION() { return getToken(TSQLParser.MAXRECURSION, 0); }
		public TerminalNode MAXSIZE() { return getToken(TSQLParser.MAXSIZE, 0); }
		public TerminalNode MAXTRANSFER() { return getToken(TSQLParser.MAXTRANSFER, 0); }
		public TerminalNode MAXVALUE() { return getToken(TSQLParser.MAXVALUE, 0); }
		public TerminalNode MB() { return getToken(TSQLParser.MB, 0); }
		public TerminalNode MEDIADESCRIPTION() { return getToken(TSQLParser.MEDIADESCRIPTION, 0); }
		public TerminalNode MEDIANAME() { return getToken(TSQLParser.MEDIANAME, 0); }
		public TerminalNode MEDIUM() { return getToken(TSQLParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(TSQLParser.MEMBER, 0); }
		public TerminalNode MEMORY_OPTIMIZED_DATA() { return getToken(TSQLParser.MEMORY_OPTIMIZED_DATA, 0); }
		public TerminalNode MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT() { return getToken(TSQLParser.MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT, 0); }
		public TerminalNode MEMORY_OPTIMIZED() { return getToken(TSQLParser.MEMORY_OPTIMIZED, 0); }
		public TerminalNode MEMORY_PARTITION_MODE() { return getToken(TSQLParser.MEMORY_PARTITION_MODE, 0); }
		public TerminalNode MESSAGE_FORWARD_SIZE() { return getToken(TSQLParser.MESSAGE_FORWARD_SIZE, 0); }
		public TerminalNode MESSAGE_FORWARDING() { return getToken(TSQLParser.MESSAGE_FORWARDING, 0); }
		public TerminalNode MESSAGE() { return getToken(TSQLParser.MESSAGE, 0); }
		public TerminalNode MIN_ACTIVE_ROWVERSION() { return getToken(TSQLParser.MIN_ACTIVE_ROWVERSION, 0); }
		public TerminalNode MIN_CPU_PERCENT() { return getToken(TSQLParser.MIN_CPU_PERCENT, 0); }
		public TerminalNode MIN_IOPS_PER_VOLUME() { return getToken(TSQLParser.MIN_IOPS_PER_VOLUME, 0); }
		public TerminalNode MIN_MEMORY_PERCENT() { return getToken(TSQLParser.MIN_MEMORY_PERCENT, 0); }
		public TerminalNode MINUTES() { return getToken(TSQLParser.MINUTES, 0); }
		public TerminalNode MINVALUE() { return getToken(TSQLParser.MINVALUE, 0); }
		public TerminalNode MIRROR_ADDRESS() { return getToken(TSQLParser.MIRROR_ADDRESS, 0); }
		public TerminalNode MIRROR() { return getToken(TSQLParser.MIRROR, 0); }
		public TerminalNode MIXED_PAGE_ALLOCATION() { return getToken(TSQLParser.MIXED_PAGE_ALLOCATION, 0); }
		public TerminalNode MODE() { return getToken(TSQLParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(TSQLParser.MODIFY, 0); }
		public TerminalNode MOVE() { return getToken(TSQLParser.MOVE, 0); }
		public TerminalNode MULTI_USER() { return getToken(TSQLParser.MULTI_USER, 0); }
		public TerminalNode MUST_CHANGE() { return getToken(TSQLParser.MUST_CHANGE, 0); }
		public TerminalNode NAME() { return getToken(TSQLParser.NAME, 0); }
		public TerminalNode NCHAR() { return getToken(TSQLParser.NCHAR, 0); }
		public TerminalNode NEGOTIATE() { return getToken(TSQLParser.NEGOTIATE, 0); }
		public TerminalNode NESTED_TRIGGERS() { return getToken(TSQLParser.NESTED_TRIGGERS, 0); }
		public TerminalNode NEW_ACCOUNT() { return getToken(TSQLParser.NEW_ACCOUNT, 0); }
		public TerminalNode NEW_BROKER() { return getToken(TSQLParser.NEW_BROKER, 0); }
		public TerminalNode NEW_PASSWORD() { return getToken(TSQLParser.NEW_PASSWORD, 0); }
		public TerminalNode NEWNAME() { return getToken(TSQLParser.NEWNAME, 0); }
		public TerminalNode NEXT() { return getToken(TSQLParser.NEXT, 0); }
		public TerminalNode NO_CHECKSUM() { return getToken(TSQLParser.NO_CHECKSUM, 0); }
		public TerminalNode NO_COMPRESSION() { return getToken(TSQLParser.NO_COMPRESSION, 0); }
		public TerminalNode NO_EVENT_LOSS() { return getToken(TSQLParser.NO_EVENT_LOSS, 0); }
		public TerminalNode NO_TRUNCATE() { return getToken(TSQLParser.NO_TRUNCATE, 0); }
		public TerminalNode NO_WAIT() { return getToken(TSQLParser.NO_WAIT, 0); }
		public TerminalNode NO() { return getToken(TSQLParser.NO, 0); }
		public TerminalNode NODES() { return getToken(TSQLParser.NODES, 0); }
		public TerminalNode NOEXPAND() { return getToken(TSQLParser.NOEXPAND, 0); }
		public TerminalNode NOFORMAT() { return getToken(TSQLParser.NOFORMAT, 0); }
		public TerminalNode NOINIT() { return getToken(TSQLParser.NOINIT, 0); }
		public TerminalNode NON_TRANSACTED_ACCESS() { return getToken(TSQLParser.NON_TRANSACTED_ACCESS, 0); }
		public TerminalNode NONE() { return getToken(TSQLParser.NONE, 0); }
		public TerminalNode NORECOMPUTE() { return getToken(TSQLParser.NORECOMPUTE, 0); }
		public TerminalNode NORECOVERY() { return getToken(TSQLParser.NORECOVERY, 0); }
		public TerminalNode NOREWIND() { return getToken(TSQLParser.NOREWIND, 0); }
		public TerminalNode NOSKIP() { return getToken(TSQLParser.NOSKIP, 0); }
		public TerminalNode NOTIFICATION() { return getToken(TSQLParser.NOTIFICATION, 0); }
		public TerminalNode NOUNLOAD() { return getToken(TSQLParser.NOUNLOAD, 0); }
		public TerminalNode NOWAIT() { return getToken(TSQLParser.NOWAIT, 0); }
		public TerminalNode NTLM() { return getToken(TSQLParser.NTLM, 0); }
		public TerminalNode NUMANODE() { return getToken(TSQLParser.NUMANODE, 0); }
		public TerminalNode NUMERIC_ROUNDABORT() { return getToken(TSQLParser.NUMERIC_ROUNDABORT, 0); }
		public TerminalNode OBJECT() { return getToken(TSQLParser.OBJECT, 0); }
		public TerminalNode OFFLINE() { return getToken(TSQLParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(TSQLParser.OFFSET, 0); }
		public TerminalNode OLD_ACCOUNT() { return getToken(TSQLParser.OLD_ACCOUNT, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(TSQLParser.OLD_PASSWORD, 0); }
		public TerminalNode ON_FAILURE() { return getToken(TSQLParser.ON_FAILURE, 0); }
		public TerminalNode ONLINE() { return getToken(TSQLParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(TSQLParser.ONLY, 0); }
		public TerminalNode OPEN_EXISTING() { return getToken(TSQLParser.OPEN_EXISTING, 0); }
		public TerminalNode OPENJSON() { return getToken(TSQLParser.OPENJSON, 0); }
		public TerminalNode OPTIMISTIC() { return getToken(TSQLParser.OPTIMISTIC, 0); }
		public TerminalNode OPTIMIZE() { return getToken(TSQLParser.OPTIMIZE, 0); }
		public TerminalNode OUT() { return getToken(TSQLParser.OUT, 0); }
		public TerminalNode OUTPUT() { return getToken(TSQLParser.OUTPUT, 0); }
		public TerminalNode OWNER() { return getToken(TSQLParser.OWNER, 0); }
		public TerminalNode PAGE_VERIFY() { return getToken(TSQLParser.PAGE_VERIFY, 0); }
		public TerminalNode PARAMETERIZATION() { return getToken(TSQLParser.PARAMETERIZATION, 0); }
		public TerminalNode PARSE() { return getToken(TSQLParser.PARSE, 0); }
		public TerminalNode PARTIAL() { return getToken(TSQLParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(TSQLParser.PARTITION, 0); }
		public TerminalNode PARTITIONS() { return getToken(TSQLParser.PARTITIONS, 0); }
		public TerminalNode PARTNER() { return getToken(TSQLParser.PARTNER, 0); }
		public TerminalNode PASSWORD() { return getToken(TSQLParser.PASSWORD, 0); }
		public TerminalNode PATH() { return getToken(TSQLParser.PATH, 0); }
		public TerminalNode PAUSE() { return getToken(TSQLParser.PAUSE, 0); }
		public TerminalNode PER_CPU() { return getToken(TSQLParser.PER_CPU, 0); }
		public TerminalNode PER_DB() { return getToken(TSQLParser.PER_DB, 0); }
		public TerminalNode PER_NODE() { return getToken(TSQLParser.PER_NODE, 0); }
		public TerminalNode PERMISSION_SET() { return getToken(TSQLParser.PERMISSION_SET, 0); }
		public TerminalNode PERSIST_SAMPLE_PERSENT() { return getToken(TSQLParser.PERSIST_SAMPLE_PERSENT, 0); }
		public TerminalNode PERSISTED() { return getToken(TSQLParser.PERSISTED, 0); }
		public TerminalNode PERSISTENT_LOG_BUFFER() { return getToken(TSQLParser.PERSISTENT_LOG_BUFFER, 0); }
		public TerminalNode PLATFORM() { return getToken(TSQLParser.PLATFORM, 0); }
		public TerminalNode POISON_MESSAGE_HANDLING() { return getToken(TSQLParser.POISON_MESSAGE_HANDLING, 0); }
		public TerminalNode POLICY() { return getToken(TSQLParser.POLICY, 0); }
		public TerminalNode POOL() { return getToken(TSQLParser.POOL, 0); }
		public TerminalNode POPULATION() { return getToken(TSQLParser.POPULATION, 0); }
		public TerminalNode PORT() { return getToken(TSQLParser.PORT, 0); }
		public TerminalNode PRECEDING() { return getToken(TSQLParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(TSQLParser.PRECISION, 0); }
		public TerminalNode PREDICATE() { return getToken(TSQLParser.PREDICATE, 0); }
		public TerminalNode PRIMARY_ROLE() { return getToken(TSQLParser.PRIMARY_ROLE, 0); }
		public TerminalNode PRIOR() { return getToken(TSQLParser.PRIOR, 0); }
		public TerminalNode PRIORITY_LEVEL() { return getToken(TSQLParser.PRIORITY_LEVEL, 0); }
		public TerminalNode PRIORITY() { return getToken(TSQLParser.PRIORITY, 0); }
		public TerminalNode PRIVATE_KEY() { return getToken(TSQLParser.PRIVATE_KEY, 0); }
		public TerminalNode PRIVATE() { return getToken(TSQLParser.PRIVATE, 0); }
		public TerminalNode PRIVILEGES() { return getToken(TSQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURE_NAME() { return getToken(TSQLParser.PROCEDURE_NAME, 0); }
		public TerminalNode PROCESS() { return getToken(TSQLParser.PROCESS, 0); }
		public TerminalNode PROFILE() { return getToken(TSQLParser.PROFILE, 0); }
		public TerminalNode PROPERTY_DESCRIPTION() { return getToken(TSQLParser.PROPERTY_DESCRIPTION, 0); }
		public TerminalNode PROPERTY_INT_ID() { return getToken(TSQLParser.PROPERTY_INT_ID, 0); }
		public TerminalNode PROPERTY_SET_GUID() { return getToken(TSQLParser.PROPERTY_SET_GUID, 0); }
		public TerminalNode PROPERTY() { return getToken(TSQLParser.PROPERTY, 0); }
		public TerminalNode PROVIDER_KEY_NAME() { return getToken(TSQLParser.PROVIDER_KEY_NAME, 0); }
		public TerminalNode PROVIDER() { return getToken(TSQLParser.PROVIDER, 0); }
		public TerminalNode QUERYTRACEON() { return getToken(TSQLParser.QUERYTRACEON, 0); }
		public TerminalNode QUEUE_DELAY() { return getToken(TSQLParser.QUEUE_DELAY, 0); }
		public TerminalNode QUEUE() { return getToken(TSQLParser.QUEUE, 0); }
		public TerminalNode QUOTED_IDENTIFIER() { return getToken(TSQLParser.QUOTED_IDENTIFIER, 0); }
		public TerminalNode R_LETTER() { return getToken(TSQLParser.R_LETTER, 0); }
		public TerminalNode RANGE() { return getToken(TSQLParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(TSQLParser.RAW, 0); }
		public TerminalNode RC2() { return getToken(TSQLParser.RC2, 0); }
		public TerminalNode RC4_128() { return getToken(TSQLParser.RC4_128, 0); }
		public TerminalNode RC4() { return getToken(TSQLParser.RC4, 0); }
		public TerminalNode READ_COMMITTED_SNAPSHOT() { return getToken(TSQLParser.READ_COMMITTED_SNAPSHOT, 0); }
		public TerminalNode READ_ONLY_ROUTING_LIST() { return getToken(TSQLParser.READ_ONLY_ROUTING_LIST, 0); }
		public TerminalNode READ_ONLY() { return getToken(TSQLParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE_FILEGROUPS() { return getToken(TSQLParser.READ_WRITE_FILEGROUPS, 0); }
		public TerminalNode READ_WRITE() { return getToken(TSQLParser.READ_WRITE, 0); }
		public TerminalNode READWRITE() { return getToken(TSQLParser.READWRITE, 0); }
		public TerminalNode READONLY() { return getToken(TSQLParser.READONLY, 0); }
		public TerminalNode REBUILD() { return getToken(TSQLParser.REBUILD, 0); }
		public TerminalNode RECEIVE() { return getToken(TSQLParser.RECEIVE, 0); }
		public TerminalNode RECOMPILE() { return getToken(TSQLParser.RECOMPILE, 0); }
		public TerminalNode RECOVERY() { return getToken(TSQLParser.RECOVERY, 0); }
		public TerminalNode RECURSIVE_TRIGGERS() { return getToken(TSQLParser.RECURSIVE_TRIGGERS, 0); }
		public TerminalNode REGENERATE() { return getToken(TSQLParser.REGENERATE, 0); }
		public TerminalNode RELATED_CONVERSATION_GROUP() { return getToken(TSQLParser.RELATED_CONVERSATION_GROUP, 0); }
		public TerminalNode RELATED_CONVERSATION() { return getToken(TSQLParser.RELATED_CONVERSATION, 0); }
		public TerminalNode RELATIVE() { return getToken(TSQLParser.RELATIVE, 0); }
		public TerminalNode REMOTE_SERVICE_NAME() { return getToken(TSQLParser.REMOTE_SERVICE_NAME, 0); }
		public TerminalNode REMOTE() { return getToken(TSQLParser.REMOTE, 0); }
		public TerminalNode REMOVE() { return getToken(TSQLParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(TSQLParser.REORGANIZE, 0); }
		public TerminalNode REPEATABLE() { return getToken(TSQLParser.REPEATABLE, 0); }
		public TerminalNode REPLICA() { return getToken(TSQLParser.REPLICA, 0); }
		public TerminalNode REQUEST_MAX_CPU_TIME_SEC() { return getToken(TSQLParser.REQUEST_MAX_CPU_TIME_SEC, 0); }
		public TerminalNode REQUEST_MAX_MEMORY_GRANT_PERCENT() { return getToken(TSQLParser.REQUEST_MAX_MEMORY_GRANT_PERCENT, 0); }
		public TerminalNode REQUEST_MEMORY_GRANT_TIMEOUT_SEC() { return getToken(TSQLParser.REQUEST_MEMORY_GRANT_TIMEOUT_SEC, 0); }
		public TerminalNode REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT() { return getToken(TSQLParser.REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT, 0); }
		public TerminalNode REQUIRED() { return getToken(TSQLParser.REQUIRED, 0); }
		public TerminalNode RESAMPLE() { return getToken(TSQLParser.RESAMPLE, 0); }
		public TerminalNode RESERVE_DISK_SPACE() { return getToken(TSQLParser.RESERVE_DISK_SPACE, 0); }
		public TerminalNode RESET() { return getToken(TSQLParser.RESET, 0); }
		public TerminalNode RESOURCE_MANAGER_LOCATION() { return getToken(TSQLParser.RESOURCE_MANAGER_LOCATION, 0); }
		public TerminalNode RESOURCE() { return getToken(TSQLParser.RESOURCE, 0); }
		public TerminalNode RESTART() { return getToken(TSQLParser.RESTART, 0); }
		public TerminalNode RESTRICTED_USER() { return getToken(TSQLParser.RESTRICTED_USER, 0); }
		public TerminalNode RESULT() { return getToken(TSQLParser.RESULT, 0); }
		public TerminalNode RESUME() { return getToken(TSQLParser.RESUME, 0); }
		public TerminalNode RETAINDAYS() { return getToken(TSQLParser.RETAINDAYS, 0); }
		public TerminalNode RETENTION() { return getToken(TSQLParser.RETENTION, 0); }
		public TerminalNode RETURNS() { return getToken(TSQLParser.RETURNS, 0); }
		public TerminalNode REWIND() { return getToken(TSQLParser.REWIND, 0); }
		public TerminalNode ROBUST() { return getToken(TSQLParser.ROBUST, 0); }
		public TerminalNode ROLE() { return getToken(TSQLParser.ROLE, 0); }
		public TerminalNode ROOT() { return getToken(TSQLParser.ROOT, 0); }
		public TerminalNode ROUTE() { return getToken(TSQLParser.ROUTE, 0); }
		public TerminalNode ROW() { return getToken(TSQLParser.ROW, 0); }
		public TerminalNode ROWGUID() { return getToken(TSQLParser.ROWGUID, 0); }
		public TerminalNode ROWS() { return getToken(TSQLParser.ROWS, 0); }
		public TerminalNode RSA_1024() { return getToken(TSQLParser.RSA_1024, 0); }
		public TerminalNode RSA_2048() { return getToken(TSQLParser.RSA_2048, 0); }
		public TerminalNode RSA_3072() { return getToken(TSQLParser.RSA_3072, 0); }
		public TerminalNode RSA_4096() { return getToken(TSQLParser.RSA_4096, 0); }
		public TerminalNode RSA_512() { return getToken(TSQLParser.RSA_512, 0); }
		public TerminalNode SAFE() { return getToken(TSQLParser.SAFE, 0); }
		public TerminalNode SAFETY() { return getToken(TSQLParser.SAFETY, 0); }
		public TerminalNode SAMPLE() { return getToken(TSQLParser.SAMPLE, 0); }
		public TerminalNode SCHEDULER() { return getToken(TSQLParser.SCHEDULER, 0); }
		public TerminalNode SCHEMABINDING() { return getToken(TSQLParser.SCHEMABINDING, 0); }
		public TerminalNode SCHEME() { return getToken(TSQLParser.SCHEME, 0); }
		public TerminalNode SCOPED() { return getToken(TSQLParser.SCOPED, 0); }
		public TerminalNode SCROLL_LOCKS() { return getToken(TSQLParser.SCROLL_LOCKS, 0); }
		public TerminalNode SCROLL() { return getToken(TSQLParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(TSQLParser.SEARCH, 0); }
		public TerminalNode SECONDARY_ONLY() { return getToken(TSQLParser.SECONDARY_ONLY, 0); }
		public TerminalNode SECONDARY_ROLE() { return getToken(TSQLParser.SECONDARY_ROLE, 0); }
		public TerminalNode SECONDARY() { return getToken(TSQLParser.SECONDARY, 0); }
		public TerminalNode SECONDS() { return getToken(TSQLParser.SECONDS, 0); }
		public TerminalNode SECRET() { return getToken(TSQLParser.SECRET, 0); }
		public TerminalNode SECURITY_LOG() { return getToken(TSQLParser.SECURITY_LOG, 0); }
		public TerminalNode SECURITY() { return getToken(TSQLParser.SECURITY, 0); }
		public TerminalNode SEEDING_MODE() { return getToken(TSQLParser.SEEDING_MODE, 0); }
		public TerminalNode SELECTIVE() { return getToken(TSQLParser.SELECTIVE, 0); }
		public TerminalNode SELF() { return getToken(TSQLParser.SELF, 0); }
		public TerminalNode SEMI_SENSITIVE() { return getToken(TSQLParser.SEMI_SENSITIVE, 0); }
		public TerminalNode SEND() { return getToken(TSQLParser.SEND, 0); }
		public TerminalNode SENT() { return getToken(TSQLParser.SENT, 0); }
		public TerminalNode SEQUENCE() { return getToken(TSQLParser.SEQUENCE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(TSQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(TSQLParser.SERVER, 0); }
		public TerminalNode SERVICE_BROKER() { return getToken(TSQLParser.SERVICE_BROKER, 0); }
		public TerminalNode SERVICE_NAME() { return getToken(TSQLParser.SERVICE_NAME, 0); }
		public TerminalNode SERVICE() { return getToken(TSQLParser.SERVICE, 0); }
		public TerminalNode SESSION_TIMEOUT() { return getToken(TSQLParser.SESSION_TIMEOUT, 0); }
		public TerminalNode SESSION() { return getToken(TSQLParser.SESSION, 0); }
		public TerminalNode SETERROR() { return getToken(TSQLParser.SETERROR, 0); }
		public TerminalNode SETS() { return getToken(TSQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(TSQLParser.SHARE, 0); }
		public TerminalNode SHOWPLAN() { return getToken(TSQLParser.SHOWPLAN, 0); }
		public TerminalNode SID() { return getToken(TSQLParser.SID, 0); }
		public TerminalNode SIGNATURE() { return getToken(TSQLParser.SIGNATURE, 0); }
		public TerminalNode SIMPLE() { return getToken(TSQLParser.SIMPLE, 0); }
		public TerminalNode SINGLE_USER() { return getToken(TSQLParser.SINGLE_USER, 0); }
		public TerminalNode SINGLETON() { return getToken(TSQLParser.SINGLETON, 0); }
		public TerminalNode SIZE() { return getToken(TSQLParser.SIZE, 0); }
		public TerminalNode SKIP_KEYWORD() { return getToken(TSQLParser.SKIP_KEYWORD, 0); }
		public TerminalNode SNAPSHOT() { return getToken(TSQLParser.SNAPSHOT, 0); }
		public TerminalNode SOFTNUMA() { return getToken(TSQLParser.SOFTNUMA, 0); }
		public TerminalNode SOURCE() { return getToken(TSQLParser.SOURCE, 0); }
		public TerminalNode SPARSE() { return getToken(TSQLParser.SPARSE, 0); }
		public TerminalNode SPATIAL_WINDOW_MAX_CELLS() { return getToken(TSQLParser.SPATIAL_WINDOW_MAX_CELLS, 0); }
		public TerminalNode SPECIFICATION() { return getToken(TSQLParser.SPECIFICATION, 0); }
		public TerminalNode SPLIT() { return getToken(TSQLParser.SPLIT, 0); }
		public TerminalNode SQL() { return getToken(TSQLParser.SQL, 0); }
		public TerminalNode SQLDUMPERFLAGS() { return getToken(TSQLParser.SQLDUMPERFLAGS, 0); }
		public TerminalNode SQLDUMPERPATH() { return getToken(TSQLParser.SQLDUMPERPATH, 0); }
		public TerminalNode SQLDUMPERTIMEOUT() { return getToken(TSQLParser.SQLDUMPERTIMEOUT, 0); }
		public TerminalNode STANDBY() { return getToken(TSQLParser.STANDBY, 0); }
		public TerminalNode START_DATE() { return getToken(TSQLParser.START_DATE, 0); }
		public TerminalNode START() { return getToken(TSQLParser.START, 0); }
		public TerminalNode STARTED() { return getToken(TSQLParser.STARTED, 0); }
		public TerminalNode STARTUP_STATE() { return getToken(TSQLParser.STARTUP_STATE, 0); }
		public TerminalNode STATE() { return getToken(TSQLParser.STATE, 0); }
		public TerminalNode STATIC() { return getToken(TSQLParser.STATIC, 0); }
		public TerminalNode STATISTICAL_SEMANTICS() { return getToken(TSQLParser.STATISTICAL_SEMANTICS, 0); }
		public TerminalNode STATS() { return getToken(TSQLParser.STATS, 0); }
		public TerminalNode STATUS() { return getToken(TSQLParser.STATUS, 0); }
		public TerminalNode STOP_ON_ERROR() { return getToken(TSQLParser.STOP_ON_ERROR, 0); }
		public TerminalNode STOP() { return getToken(TSQLParser.STOP, 0); }
		public TerminalNode STOPLIST() { return getToken(TSQLParser.STOPLIST, 0); }
		public TerminalNode STOPPED() { return getToken(TSQLParser.STOPPED, 0); }
		public TerminalNode STRING_AGG() { return getToken(TSQLParser.STRING_AGG, 0); }
		public TerminalNode SUBJECT() { return getToken(TSQLParser.SUBJECT, 0); }
		public TerminalNode SUPPORTED() { return getToken(TSQLParser.SUPPORTED, 0); }
		public TerminalNode SUSPEND() { return getToken(TSQLParser.SUSPEND, 0); }
		public TerminalNode SYMMETRIC() { return getToken(TSQLParser.SYMMETRIC, 0); }
		public TerminalNode SYNCHRONOUS_COMMIT() { return getToken(TSQLParser.SYNCHRONOUS_COMMIT, 0); }
		public TerminalNode SYNONYM() { return getToken(TSQLParser.SYNONYM, 0); }
		public TerminalNode SYSTEM() { return getToken(TSQLParser.SYSTEM, 0); }
		public TerminalNode TAKE() { return getToken(TSQLParser.TAKE, 0); }
		public TerminalNode TAPE() { return getToken(TSQLParser.TAPE, 0); }
		public TerminalNode TARGET_RECOVERY_TIME() { return getToken(TSQLParser.TARGET_RECOVERY_TIME, 0); }
		public TerminalNode TARGET() { return getToken(TSQLParser.TARGET, 0); }
		public TerminalNode TB() { return getToken(TSQLParser.TB, 0); }
		public TerminalNode TCP() { return getToken(TSQLParser.TCP, 0); }
		public TerminalNode TEXTIMAGE_ON() { return getToken(TSQLParser.TEXTIMAGE_ON, 0); }
		public TerminalNode THROW() { return getToken(TSQLParser.THROW, 0); }
		public TerminalNode TIES() { return getToken(TSQLParser.TIES, 0); }
		public TerminalNode TIME() { return getToken(TSQLParser.TIME, 0); }
		public TerminalNode TIMEOUT() { return getToken(TSQLParser.TIMEOUT, 0); }
		public TerminalNode TIMER() { return getToken(TSQLParser.TIMER, 0); }
		public TerminalNode TORN_PAGE_DETECTION() { return getToken(TSQLParser.TORN_PAGE_DETECTION, 0); }
		public TerminalNode TRACK_CAUSALITY() { return getToken(TSQLParser.TRACK_CAUSALITY, 0); }
		public TerminalNode TRACK_COLUMNS_UPDATED() { return getToken(TSQLParser.TRACK_COLUMNS_UPDATED, 0); }
		public TerminalNode TRANSFER() { return getToken(TSQLParser.TRANSFER, 0); }
		public TerminalNode TRANSFORM_NOISE_WORDS() { return getToken(TSQLParser.TRANSFORM_NOISE_WORDS, 0); }
		public TerminalNode TRIM() { return getToken(TSQLParser.TRIM, 0); }
		public TerminalNode TRIPLE_DES_3KEY() { return getToken(TSQLParser.TRIPLE_DES_3KEY, 0); }
		public TerminalNode TRIPLE_DES() { return getToken(TSQLParser.TRIPLE_DES, 0); }
		public TerminalNode TRUE() { return getToken(TSQLParser.TRUE, 0); }
		public TerminalNode TRUSTWORTHY() { return getToken(TSQLParser.TRUSTWORTHY, 0); }
		public TerminalNode TRY() { return getToken(TSQLParser.TRY, 0); }
		public TerminalNode TSQL() { return getToken(TSQLParser.TSQL, 0); }
		public TerminalNode TWO_DIGIT_YEAR_CUTOFF() { return getToken(TSQLParser.TWO_DIGIT_YEAR_CUTOFF, 0); }
		public TerminalNode TYPE_WARNING() { return getToken(TSQLParser.TYPE_WARNING, 0); }
		public TerminalNode TYPE() { return getToken(TSQLParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(TSQLParser.UNBOUNDED, 0); }
		public TerminalNode UNCHECKED() { return getToken(TSQLParser.UNCHECKED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(TSQLParser.UNCOMMITTED, 0); }
		public TerminalNode UNDEFINED() { return getToken(TSQLParser.UNDEFINED, 0); }
		public TerminalNode UNKNOWN() { return getToken(TSQLParser.UNKNOWN, 0); }
		public TerminalNode UNLIMITED() { return getToken(TSQLParser.UNLIMITED, 0); }
		public TerminalNode UNLOCK() { return getToken(TSQLParser.UNLOCK, 0); }
		public TerminalNode UNSAFE() { return getToken(TSQLParser.UNSAFE, 0); }
		public TerminalNode URL() { return getToken(TSQLParser.URL, 0); }
		public TerminalNode USED() { return getToken(TSQLParser.USED, 0); }
		public TerminalNode USING() { return getToken(TSQLParser.USING, 0); }
		public TerminalNode VALID_XML() { return getToken(TSQLParser.VALID_XML, 0); }
		public TerminalNode VALIDATION() { return getToken(TSQLParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(TSQLParser.VALUE, 0); }
		public TerminalNode VERBOSELOGGING() { return getToken(TSQLParser.VERBOSELOGGING, 0); }
		public TerminalNode VERSION() { return getToken(TSQLParser.VERSION, 0); }
		public TerminalNode VIEW_METADATA() { return getToken(TSQLParser.VIEW_METADATA, 0); }
		public TerminalNode VIEWS() { return getToken(TSQLParser.VIEWS, 0); }
		public TerminalNode VISIBILITY() { return getToken(TSQLParser.VISIBILITY, 0); }
		public TerminalNode WAIT() { return getToken(TSQLParser.WAIT, 0); }
		public TerminalNode WELL_FORMED_XML() { return getToken(TSQLParser.WELL_FORMED_XML, 0); }
		public TerminalNode WINDOWS() { return getToken(TSQLParser.WINDOWS, 0); }
		public TerminalNode WITHOUT_ARRAY_WRAPPER() { return getToken(TSQLParser.WITHOUT_ARRAY_WRAPPER, 0); }
		public TerminalNode WITHOUT() { return getToken(TSQLParser.WITHOUT, 0); }
		public TerminalNode WITNESS() { return getToken(TSQLParser.WITNESS, 0); }
		public TerminalNode WORK() { return getToken(TSQLParser.WORK, 0); }
		public TerminalNode WORKLOAD() { return getToken(TSQLParser.WORKLOAD, 0); }
		public TerminalNode XML() { return getToken(TSQLParser.XML, 0); }
		public TerminalNode XMLDATA() { return getToken(TSQLParser.XMLDATA, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(TSQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLSCHEMA() { return getToken(TSQLParser.XMLSCHEMA, 0); }
		public TerminalNode XQUERY() { return getToken(TSQLParser.XQUERY, 0); }
		public TerminalNode XSINIL() { return getToken(TSQLParser.XSINIL, 0); }
		public Simple_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterSimple_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitSimple_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitSimple_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_idContext simple_id() throws RecognitionException {
		Simple_idContext _localctx = new Simple_idContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_simple_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9826);
			_la = _input.LA(1);
			if ( !(_la==FILLFACTOR || _la==PRECISION || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (ABSENT - 194)) | (1L << (ABSOLUTE - 194)) | (1L << (ACCENT_SENSITIVITY - 194)) | (1L << (ACTION - 194)) | (1L << (ACTIVATION - 194)) | (1L << (ACTIVE - 194)) | (1L << (ADDRESS - 194)) | (1L << (AES_128 - 194)) | (1L << (AES_192 - 194)) | (1L << (AES_256 - 194)) | (1L << (AES - 194)) | (1L << (AFFINITY - 194)) | (1L << (AFTER - 194)) | (1L << (AGGREGATE - 194)) | (1L << (ALGORITHM - 194)) | (1L << (ALLOW_CONNECTIONS - 194)) | (1L << (ALLOW_ENCRYPTED_VALUE_MODIFICATIONS - 194)) | (1L << (ALLOW_MULTIPLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SINGLE_EVENT_LOSS - 194)) | (1L << (ALLOW_SNAPSHOT_ISOLATION - 194)) | (1L << (ALLOWED - 194)) | (1L << (ANONYMOUS - 194)) | (1L << (ANSI_NULL_DEFAULT - 194)) | (1L << (ANSI_NULLS - 194)) | (1L << (ANSI_PADDING - 194)) | (1L << (ANSI_WARNINGS - 194)) | (1L << (APPEND - 194)) | (1L << (APPLICATION_LOG - 194)) | (1L << (APPLICATION - 194)) | (1L << (APPLY - 194)) | (1L << (ARITHABORT - 194)) | (1L << (ASSEMBLY - 194)) | (1L << (ASYMMETRIC - 194)) | (1L << (ASYNCHRONOUS_COMMIT - 194)) | (1L << (AUDIT_GUID - 194)) | (1L << (AUDIT - 194)) | (1L << (AUTHENTICATION - 194)) | (1L << (AUTO_CLEANUP - 194)) | (1L << (AUTO_CLOSE - 194)) | (1L << (AUTO_CREATE_STATISTICS - 194)) | (1L << (AUTO_SHRINK - 194)) | (1L << (AUTO_UPDATE_STATISTICS_ASYNC - 194)) | (1L << (AUTO_UPDATE_STATISTICS - 194)) | (1L << (AUTO - 194)) | (1L << (AUTOGROW_ALL_FILES - 194)) | (1L << (AUTOGROW_SINGLE_FILE - 194)) | (1L << (AUTOMATED_BACKUP_PREFERENCE - 194)) | (1L << (AUTOMATIC - 194)) | (1L << (AVAILABILITY_MODE - 194)) | (1L << (AVAILABILITY - 194)) | (1L << (BACKUP_PRIORITY - 194)) | (1L << (BEFORE - 194)) | (1L << (BEGIN_DIALOG - 194)) | (1L << (BINARY_BASE64 - 194)) | (1L << (BINDING - 194)) | (1L << (BLOB_STORAGE - 194)) | (1L << (BLOCK - 194)) | (1L << (BLOCKING_HIERARCHY - 194)) | (1L << (BLOCKSIZE - 194)) | (1L << (BROKER_INSTANCE - 194)) | (1L << (BROKER - 194)) | (1L << (BUFFER - 194)) | (1L << (BUFFERCOUNT - 194)) | (1L << (BULK_LOGGED - 194)))) != 0) || ((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (CACHE - 258)) | (1L << (CALLED - 258)) | (1L << (CALLER - 258)) | (1L << (CAP_CPU_PERCENT - 258)) | (1L << (CAST - 258)) | (1L << (CATALOG - 258)) | (1L << (CATCH - 258)) | (1L << (CERTIFICATE - 258)) | (1L << (CHANGE_RETENTION - 258)) | (1L << (CHANGE_TRACKING - 258)) | (1L << (CHANGES - 258)) | (1L << (CHANGETABLE - 258)) | (1L << (CHAR - 258)) | (1L << (CHARACTER - 258)) | (1L << (CHECK_EXPIRATION - 258)) | (1L << (CHECK_POLICY - 258)) | (1L << (CHECKSUM - 258)) | (1L << (CLASSIFIER_FUNCTION - 258)) | (1L << (CLEANUP - 258)) | (1L << (CLUSTER - 258)) | (1L << (COLLECTION - 258)) | (1L << (COLUMN_MASTER_KEY - 258)) | (1L << (COMMITTED - 258)) | (1L << (COMPATIBILITY_LEVEL - 258)) | (1L << (COMPRESSION - 258)) | (1L << (CONCAT_NULL_YIELDS_NULL - 258)) | (1L << (CONCAT - 258)) | (1L << (CONFIGURATION - 258)) | (1L << (CONNECT - 258)) | (1L << (CONTAINMENT - 258)) | (1L << (CONTENT - 258)) | (1L << (CONTEXT - 258)) | (1L << (CONTINUE_AFTER_ERROR - 258)) | (1L << (CONTRACT_NAME - 258)) | (1L << (CONTRACT - 258)) | (1L << (CONTROL - 258)) | (1L << (CONVERSATION - 258)) | (1L << (COOKIE - 258)) | (1L << (COPY_ONLY - 258)) | (1L << (COUNTER - 258)) | (1L << (CPU - 258)) | (1L << (CREATE_NEW - 258)) | (1L << (CREATION_DISPOSITION - 258)) | (1L << (CREDENTIAL - 258)) | (1L << (CRYPTOGRAPHIC - 258)) | (1L << (CURSOR_CLOSE_ON_COMMIT - 258)) | (1L << (CURSOR_DEFAULT - 258)) | (1L << (CYCLE - 258)) | (1L << (DATA_COMPRESSION - 258)) | (1L << (DATA_SOURCE - 258)) | (1L << (DATA - 258)) | (1L << (DATABASE_MIRRORING - 258)) | (1L << (DATE_CORRELATION_OPTIMIZATION - 258)) | (1L << (DAYS - 258)) | (1L << (DB_CHAINING - 258)) | (1L << (DB_FAILOVER - 258)) | (1L << (DECRYPTION - 258)) | (1L << (DEFAULT_DATABASE - 258)) | (1L << (DEFAULT_FULLTEXT_LANGUAGE - 258)) | (1L << (DEFAULT_LANGUAGE - 258)) | (1L << (DEFAULT_SCHEMA - 258)) | (1L << (DELAY - 258)) | (1L << (DELAYED_DURABILITY - 258)) | (1L << (DEPENDENTS - 258)))) != 0) || ((((_la - 322)) & ~0x3f) == 0 && ((1L << (_la - 322)) & ((1L << (DES - 322)) | (1L << (DESCRIPTION - 322)) | (1L << (DESX - 322)) | (1L << (DHCP - 322)) | (1L << (DIAGNOSTICS - 322)) | (1L << (DIALOG - 322)) | (1L << (DIFFERENTIAL - 322)) | (1L << (DIRECTORY_NAME - 322)) | (1L << (DISABLE_BROKER - 322)) | (1L << (DISABLE - 322)) | (1L << (DISABLED - 322)) | (1L << (DOCUMENT - 322)) | (1L << (DTC_SUPPORT - 322)) | (1L << (DYNAMIC - 322)) | (1L << (ELEMENTS - 322)) | (1L << (EMERGENCY - 322)) | (1L << (EMPTY - 322)) | (1L << (ENABLE_BROKER - 322)) | (1L << (ENABLE - 322)) | (1L << (ENABLED - 322)) | (1L << (ENCRYPTED_VALUE - 322)) | (1L << (ENCRYPTION - 322)) | (1L << (ENDPOINT_URL - 322)) | (1L << (ENDPOINT - 322)) | (1L << (ERROR_BROKER_CONVERSATIONS - 322)) | (1L << (ERROR - 322)) | (1L << (EVENT_RETENTION_MODE - 322)) | (1L << (EVENT - 322)) | (1L << (EXCLUSIVE - 322)) | (1L << (EXECUTABLE_FILE - 322)) | (1L << (EXECUTABLE - 322)) | (1L << (EXPAND - 322)) | (1L << (EXPIREDATE - 322)) | (1L << (EXPIRY_DATE - 322)) | (1L << (EXPLICIT - 322)) | (1L << (EXTENSION - 322)) | (1L << (EXTERNAL_ACCESS - 322)) | (1L << (FAIL_OPERATION - 322)) | (1L << (FAILOVER_MODE - 322)) | (1L << (FAILOVER - 322)) | (1L << (FAILURE_CONDITION_LEVEL - 322)) | (1L << (FAILURECONDITIONLEVEL - 322)) | (1L << (FALSE - 322)) | (1L << (FAN_IN - 322)) | (1L << (FAST_FORWARD - 322)) | (1L << (FAST - 322)) | (1L << (FILE_SNAPSHOT - 322)) | (1L << (FILEGROUP - 322)) | (1L << (FILEGROWTH - 322)) | (1L << (FILENAME - 322)) | (1L << (FILEPATH - 322)) | (1L << (FILESTREAM_ON - 322)) | (1L << (FILESTREAM - 322)) | (1L << (FILTER - 322)) | (1L << (FIRST - 322)) | (1L << (FOLLOWING - 322)) | (1L << (FORCE_FAILOVER_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE_SERVICE_ALLOW_DATA_LOSS - 322)) | (1L << (FORCE - 322)) | (1L << (FORCED - 322)) | (1L << (FORCESEEK - 322)) | (1L << (FORMAT - 322)) | (1L << (FORWARD_ONLY - 322)) | (1L << (FULLSCAN - 322)))) != 0) || ((((_la - 386)) & ~0x3f) == 0 && ((1L << (_la - 386)) & ((1L << (FULLTEXT - 386)) | (1L << (GB - 386)) | (1L << (GET - 386)) | (1L << (GLOBAL - 386)) | (1L << (GOVERNOR - 386)) | (1L << (GROUP_MAX_REQUESTS - 386)) | (1L << (HADR - 386)) | (1L << (HASH - 386)) | (1L << (HASHED - 386)) | (1L << (HEALTH_CHECK_TIMEOUT - 386)) | (1L << (HEALTHCHECKTIMEOUT - 386)) | (1L << (HIGH - 386)) | (1L << (HONOR_BROKER_PRIORITY - 386)) | (1L << (HOURS - 386)) | (1L << (IDENTITY_VALUE - 386)) | (1L << (IIF - 386)) | (1L << (IGNORE_NONCLUSTERED_COLUMNSTORE_INDEX - 386)) | (1L << (IMMEDIATE - 386)) | (1L << (IMPERSONATE - 386)) | (1L << (IMPORTANCE - 386)) | (1L << (INCLUDE_NULL_VALUES - 386)) | (1L << (INCLUDE - 386)) | (1L << (INCREMENT - 386)) | (1L << (INCREMENTAL - 386)) | (1L << (INFINITE - 386)) | (1L << (INIT - 386)) | (1L << (INITIATOR - 386)) | (1L << (INPUT - 386)) | (1L << (INSENSITIVE - 386)) | (1L << (INSTEAD - 386)) | (1L << (IO - 386)) | (1L << (IP - 386)) | (1L << (ISOLATION - 386)) | (1L << (JSON - 386)) | (1L << (KB - 386)) | (1L << (KEEP - 386)) | (1L << (KEEPFIXED - 386)) | (1L << (KERBEROS - 386)) | (1L << (KEY_PATH - 386)) | (1L << (KEY_SOURCE - 386)) | (1L << (KEY_STORE_PROVIDER_NAME - 386)) | (1L << (KEYS - 386)) | (1L << (KEYSET - 386)) | (1L << (LANGUAGE - 386)) | (1L << (LAST - 386)) | (1L << (LEVEL - 386)) | (1L << (LIBRARY - 386)) | (1L << (LIFETIME - 386)) | (1L << (LINUX - 386)) | (1L << (LIST - 386)) | (1L << (LISTENER_IP - 386)) | (1L << (LISTENER_PORT - 386)) | (1L << (LISTENER_URL - 386)) | (1L << (LISTENER - 386)) | (1L << (LOB_COMPACTION - 386)) | (1L << (LOCAL_SERVICE_NAME - 386)) | (1L << (LOCAL - 386)) | (1L << (LOCATION - 386)) | (1L << (LOCK_ESCALATION - 386)) | (1L << (LOCK - 386)) | (1L << (LOG - 386)) | (1L << (LOGIN - 386)) | (1L << (LOOP - 386)) | (1L << (LOW - 386)))) != 0) || ((((_la - 450)) & ~0x3f) == 0 && ((1L << (_la - 450)) & ((1L << (MANUAL - 450)) | (1L << (MARK - 450)) | (1L << (MASTER - 450)) | (1L << (MATCHED - 450)) | (1L << (MATERIALIZED - 450)) | (1L << (MAX_CPU_PERCENT - 450)) | (1L << (MAX_DISPATCH_LATENCY - 450)) | (1L << (MAX_DOP - 450)) | (1L << (MAX_EVENT_SIZE - 450)) | (1L << (MAX_FILES - 450)) | (1L << (MAX_IOPS_PER_VOLUME - 450)) | (1L << (MAX_MEMORY_PERCENT - 450)) | (1L << (MAX_MEMORY - 450)) | (1L << (MAX_OUTSTANDING_IO_PER_VOLUME - 450)) | (1L << (MAX_PROCESSES - 450)) | (1L << (MAX_QUEUE_READERS - 450)) | (1L << (MAX_ROLLOVER_FILES - 450)) | (1L << (MAX_SIZE - 450)) | (1L << (MAX - 450)) | (1L << (MAXDOP - 450)) | (1L << (MAXRECURSION - 450)) | (1L << (MAXSIZE - 450)) | (1L << (MAXTRANSFER - 450)) | (1L << (MAXVALUE - 450)) | (1L << (MB - 450)) | (1L << (MEDIADESCRIPTION - 450)) | (1L << (MEDIANAME - 450)) | (1L << (MEDIUM - 450)) | (1L << (MEMBER - 450)) | (1L << (MEMORY_OPTIMIZED_DATA - 450)) | (1L << (MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT - 450)) | (1L << (MEMORY_OPTIMIZED - 450)) | (1L << (MEMORY_PARTITION_MODE - 450)) | (1L << (MESSAGE_FORWARD_SIZE - 450)) | (1L << (MESSAGE_FORWARDING - 450)) | (1L << (MESSAGE - 450)) | (1L << (MIN_ACTIVE_ROWVERSION - 450)) | (1L << (MIN_CPU_PERCENT - 450)) | (1L << (MIN_IOPS_PER_VOLUME - 450)) | (1L << (MIN_MEMORY_PERCENT - 450)) | (1L << (MINUTES - 450)) | (1L << (MINVALUE - 450)) | (1L << (MIRROR_ADDRESS - 450)) | (1L << (MIRROR - 450)) | (1L << (MIXED_PAGE_ALLOCATION - 450)) | (1L << (MODE - 450)) | (1L << (MODIFY - 450)) | (1L << (MOVE - 450)) | (1L << (MULTI_USER - 450)) | (1L << (MUST_CHANGE - 450)) | (1L << (NAME - 450)) | (1L << (NCHAR - 450)) | (1L << (NEGOTIATE - 450)) | (1L << (NESTED_TRIGGERS - 450)) | (1L << (NEW_ACCOUNT - 450)) | (1L << (NEW_BROKER - 450)) | (1L << (NEW_PASSWORD - 450)) | (1L << (NEWNAME - 450)) | (1L << (NEXT - 450)) | (1L << (NO_CHECKSUM - 450)) | (1L << (NO_COMPRESSION - 450)) | (1L << (NO_EVENT_LOSS - 450)) | (1L << (NO_TRUNCATE - 450)) | (1L << (NO_WAIT - 450)))) != 0) || ((((_la - 514)) & ~0x3f) == 0 && ((1L << (_la - 514)) & ((1L << (NO - 514)) | (1L << (NODES - 514)) | (1L << (NOEXPAND - 514)) | (1L << (NOFORMAT - 514)) | (1L << (NOINIT - 514)) | (1L << (NON_TRANSACTED_ACCESS - 514)) | (1L << (NONE - 514)) | (1L << (NORECOMPUTE - 514)) | (1L << (NORECOVERY - 514)) | (1L << (NOREWIND - 514)) | (1L << (NOSKIP - 514)) | (1L << (NOTIFICATION - 514)) | (1L << (NOUNLOAD - 514)) | (1L << (NOWAIT - 514)) | (1L << (NTLM - 514)) | (1L << (NUMANODE - 514)) | (1L << (NUMERIC_ROUNDABORT - 514)) | (1L << (OBJECT - 514)) | (1L << (OFFLINE - 514)) | (1L << (OFFSET - 514)) | (1L << (OLD_ACCOUNT - 514)) | (1L << (OLD_PASSWORD - 514)) | (1L << (ON_FAILURE - 514)) | (1L << (ONLINE - 514)) | (1L << (ONLY - 514)) | (1L << (OPEN_EXISTING - 514)) | (1L << (OPENJSON - 514)) | (1L << (OPTIMISTIC - 514)) | (1L << (OPTIMIZE - 514)) | (1L << (OUT - 514)) | (1L << (OUTPUT - 514)) | (1L << (OWNER - 514)) | (1L << (PAGE_VERIFY - 514)) | (1L << (PARAMETERIZATION - 514)) | (1L << (PARSE - 514)) | (1L << (PARTIAL - 514)) | (1L << (PARTITION - 514)) | (1L << (PARTITIONS - 514)) | (1L << (PARTNER - 514)) | (1L << (PASSWORD - 514)) | (1L << (PATH - 514)) | (1L << (PAUSE - 514)) | (1L << (PER_CPU - 514)) | (1L << (PER_DB - 514)) | (1L << (PER_NODE - 514)) | (1L << (PERMISSION_SET - 514)) | (1L << (PERSIST_SAMPLE_PERSENT - 514)) | (1L << (PERSISTED - 514)) | (1L << (PERSISTENT_LOG_BUFFER - 514)) | (1L << (PLATFORM - 514)) | (1L << (POISON_MESSAGE_HANDLING - 514)) | (1L << (POLICY - 514)) | (1L << (POOL - 514)) | (1L << (POPULATION - 514)) | (1L << (PORT - 514)) | (1L << (PRECEDING - 514)) | (1L << (PREDICATE - 514)) | (1L << (PRIMARY_ROLE - 514)) | (1L << (PRIOR - 514)) | (1L << (PRIORITY_LEVEL - 514)) | (1L << (PRIORITY - 514)) | (1L << (PRIVATE_KEY - 514)) | (1L << (PRIVATE - 514)) | (1L << (PRIVILEGES - 514)))) != 0) || ((((_la - 578)) & ~0x3f) == 0 && ((1L << (_la - 578)) & ((1L << (PROCEDURE_NAME - 578)) | (1L << (PROCESS - 578)) | (1L << (PROFILE - 578)) | (1L << (PROPERTY_DESCRIPTION - 578)) | (1L << (PROPERTY_INT_ID - 578)) | (1L << (PROPERTY_SET_GUID - 578)) | (1L << (PROPERTY - 578)) | (1L << (PROVIDER_KEY_NAME - 578)) | (1L << (PROVIDER - 578)) | (1L << (QUERYTRACEON - 578)) | (1L << (QUEUE_DELAY - 578)) | (1L << (QUEUE - 578)) | (1L << (QUOTED_IDENTIFIER - 578)) | (1L << (R_LETTER - 578)) | (1L << (RANGE - 578)) | (1L << (RAW - 578)) | (1L << (RC2 - 578)) | (1L << (RC4_128 - 578)) | (1L << (RC4 - 578)) | (1L << (READ_COMMITTED_SNAPSHOT - 578)) | (1L << (READ_ONLY_ROUTING_LIST - 578)) | (1L << (READ_ONLY - 578)) | (1L << (READ_WRITE_FILEGROUPS - 578)) | (1L << (READ_WRITE - 578)) | (1L << (READWRITE - 578)) | (1L << (READONLY - 578)) | (1L << (REBUILD - 578)) | (1L << (RECEIVE - 578)) | (1L << (RECOMPILE - 578)) | (1L << (RECOVERY - 578)) | (1L << (RECURSIVE_TRIGGERS - 578)) | (1L << (REGENERATE - 578)) | (1L << (RELATED_CONVERSATION_GROUP - 578)) | (1L << (RELATED_CONVERSATION - 578)) | (1L << (RELATIVE - 578)) | (1L << (REMOTE_SERVICE_NAME - 578)) | (1L << (REMOTE - 578)) | (1L << (REMOVE - 578)) | (1L << (REORGANIZE - 578)) | (1L << (REPEATABLE - 578)) | (1L << (REPLICA - 578)) | (1L << (REQUEST_MAX_CPU_TIME_SEC - 578)) | (1L << (REQUEST_MAX_MEMORY_GRANT_PERCENT - 578)) | (1L << (REQUEST_MEMORY_GRANT_TIMEOUT_SEC - 578)) | (1L << (REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT - 578)) | (1L << (REQUIRED - 578)) | (1L << (RESAMPLE - 578)) | (1L << (RESERVE_DISK_SPACE - 578)) | (1L << (RESET - 578)) | (1L << (RESOURCE_MANAGER_LOCATION - 578)) | (1L << (RESOURCE - 578)) | (1L << (RESTART - 578)) | (1L << (RESTRICTED_USER - 578)) | (1L << (RESULT - 578)) | (1L << (RESUME - 578)) | (1L << (RETAINDAYS - 578)) | (1L << (RETENTION - 578)) | (1L << (RETURNS - 578)) | (1L << (REWIND - 578)) | (1L << (ROBUST - 578)) | (1L << (ROLE - 578)) | (1L << (ROOT - 578)) | (1L << (ROUTE - 578)) | (1L << (ROW - 578)))) != 0) || ((((_la - 642)) & ~0x3f) == 0 && ((1L << (_la - 642)) & ((1L << (ROWGUID - 642)) | (1L << (ROWS - 642)) | (1L << (RSA_1024 - 642)) | (1L << (RSA_2048 - 642)) | (1L << (RSA_3072 - 642)) | (1L << (RSA_4096 - 642)) | (1L << (RSA_512 - 642)) | (1L << (SAFE - 642)) | (1L << (SAFETY - 642)) | (1L << (SAMPLE - 642)) | (1L << (SCHEDULER - 642)) | (1L << (SCHEMABINDING - 642)) | (1L << (SCHEME - 642)) | (1L << (SCOPED - 642)) | (1L << (SCROLL_LOCKS - 642)) | (1L << (SCROLL - 642)) | (1L << (SEARCH - 642)) | (1L << (SECONDARY_ONLY - 642)) | (1L << (SECONDARY_ROLE - 642)) | (1L << (SECONDARY - 642)) | (1L << (SECONDS - 642)) | (1L << (SECRET - 642)) | (1L << (SECURITY_LOG - 642)) | (1L << (SECURITY - 642)) | (1L << (SEEDING_MODE - 642)) | (1L << (SELECTIVE - 642)) | (1L << (SELF - 642)) | (1L << (SEMI_SENSITIVE - 642)) | (1L << (SEND - 642)) | (1L << (SENT - 642)) | (1L << (SEQUENCE - 642)) | (1L << (SERIALIZABLE - 642)) | (1L << (SERVER - 642)) | (1L << (SERVICE_BROKER - 642)) | (1L << (SERVICE_NAME - 642)) | (1L << (SERVICE - 642)) | (1L << (SESSION_TIMEOUT - 642)) | (1L << (SESSION - 642)) | (1L << (SETERROR - 642)) | (1L << (SETS - 642)) | (1L << (SHARE - 642)) | (1L << (SHOWPLAN - 642)) | (1L << (SID - 642)) | (1L << (SIGNATURE - 642)) | (1L << (SIMPLE - 642)) | (1L << (SINGLE_USER - 642)) | (1L << (SINGLETON - 642)) | (1L << (SIZE - 642)) | (1L << (SKIP_KEYWORD - 642)) | (1L << (SNAPSHOT - 642)) | (1L << (SOFTNUMA - 642)) | (1L << (SOURCE - 642)) | (1L << (SPARSE - 642)) | (1L << (SPATIAL_WINDOW_MAX_CELLS - 642)) | (1L << (SPECIFICATION - 642)) | (1L << (SPLIT - 642)) | (1L << (SQL - 642)) | (1L << (SQLDUMPERFLAGS - 642)) | (1L << (SQLDUMPERPATH - 642)) | (1L << (SQLDUMPERTIMEOUT - 642)) | (1L << (STANDBY - 642)) | (1L << (START_DATE - 642)) | (1L << (START - 642)) | (1L << (STARTED - 642)))) != 0) || ((((_la - 706)) & ~0x3f) == 0 && ((1L << (_la - 706)) & ((1L << (STARTUP_STATE - 706)) | (1L << (STATE - 706)) | (1L << (STATIC - 706)) | (1L << (STATISTICAL_SEMANTICS - 706)) | (1L << (STATS - 706)) | (1L << (STATUS - 706)) | (1L << (STOP_ON_ERROR - 706)) | (1L << (STOP - 706)) | (1L << (STOPLIST - 706)) | (1L << (STOPPED - 706)) | (1L << (STRING_AGG - 706)) | (1L << (SUBJECT - 706)) | (1L << (SUPPORTED - 706)) | (1L << (SUSPEND - 706)) | (1L << (SYMMETRIC - 706)) | (1L << (SYNCHRONOUS_COMMIT - 706)) | (1L << (SYNONYM - 706)) | (1L << (SYSTEM - 706)) | (1L << (TAKE - 706)) | (1L << (TAPE - 706)) | (1L << (TARGET_RECOVERY_TIME - 706)) | (1L << (TARGET - 706)) | (1L << (TB - 706)) | (1L << (TCP - 706)) | (1L << (TEXTIMAGE_ON - 706)) | (1L << (THROW - 706)) | (1L << (TIES - 706)) | (1L << (TIME - 706)) | (1L << (TIMEOUT - 706)) | (1L << (TIMER - 706)) | (1L << (TORN_PAGE_DETECTION - 706)) | (1L << (TRACK_CAUSALITY - 706)) | (1L << (TRACK_COLUMNS_UPDATED - 706)) | (1L << (TRANSFER - 706)) | (1L << (TRANSFORM_NOISE_WORDS - 706)) | (1L << (TRIM - 706)) | (1L << (TRIPLE_DES_3KEY - 706)) | (1L << (TRIPLE_DES - 706)) | (1L << (TRUE - 706)) | (1L << (TRUSTWORTHY - 706)) | (1L << (TRY - 706)) | (1L << (TSQL - 706)) | (1L << (TWO_DIGIT_YEAR_CUTOFF - 706)) | (1L << (TYPE_WARNING - 706)) | (1L << (TYPE - 706)) | (1L << (UNBOUNDED - 706)) | (1L << (UNCHECKED - 706)) | (1L << (UNCOMMITTED - 706)) | (1L << (UNDEFINED - 706)) | (1L << (UNKNOWN - 706)) | (1L << (UNLIMITED - 706)) | (1L << (UNLOCK - 706)) | (1L << (UNSAFE - 706)) | (1L << (URL - 706)) | (1L << (USED - 706)) | (1L << (USING - 706)) | (1L << (VALID_XML - 706)) | (1L << (VALIDATION - 706)) | (1L << (VALUE - 706)) | (1L << (VERBOSELOGGING - 706)) | (1L << (VERSION - 706)) | (1L << (VIEW_METADATA - 706)) | (1L << (VIEWS - 706)) | (1L << (VISIBILITY - 706)))) != 0) || ((((_la - 770)) & ~0x3f) == 0 && ((1L << (_la - 770)) & ((1L << (WAIT - 770)) | (1L << (WELL_FORMED_XML - 770)) | (1L << (WINDOWS - 770)) | (1L << (WITHOUT_ARRAY_WRAPPER - 770)) | (1L << (WITHOUT - 770)) | (1L << (WITNESS - 770)) | (1L << (WORK - 770)) | (1L << (WORKLOAD - 770)) | (1L << (XML - 770)) | (1L << (XMLDATA - 770)) | (1L << (XMLNAMESPACES - 770)) | (1L << (XMLSCHEMA - 770)) | (1L << (XQUERY - 770)) | (1L << (XSINIL - 770)) | (1L << (ID - 770)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_operatorContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(TSQLParser.EQUAL, 0); }
		public TerminalNode GREATER() { return getToken(TSQLParser.GREATER, 0); }
		public TerminalNode LESS() { return getToken(TSQLParser.LESS, 0); }
		public TerminalNode EXCLAMATION() { return getToken(TSQLParser.EXCLAMATION, 0); }
		public Comparison_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterComparison_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitComparison_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitComparison_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparison_operatorContext comparison_operator() throws RecognitionException {
		Comparison_operatorContext _localctx = new Comparison_operatorContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_comparison_operator);
		try {
			setState(9843);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1372,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(9828);
				match(EQUAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(9829);
				match(GREATER);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(9830);
				match(LESS);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(9831);
				match(LESS);
				setState(9832);
				match(EQUAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(9833);
				match(GREATER);
				setState(9834);
				match(EQUAL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(9835);
				match(LESS);
				setState(9836);
				match(GREATER);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(9837);
				match(EXCLAMATION);
				setState(9838);
				match(EQUAL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(9839);
				match(EXCLAMATION);
				setState(9840);
				match(GREATER);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(9841);
				match(EXCLAMATION);
				setState(9842);
				match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_operatorContext extends ParserRuleContext {
		public TerminalNode PLUS_ASSIGN() { return getToken(TSQLParser.PLUS_ASSIGN, 0); }
		public TerminalNode MINUS_ASSIGN() { return getToken(TSQLParser.MINUS_ASSIGN, 0); }
		public TerminalNode MULT_ASSIGN() { return getToken(TSQLParser.MULT_ASSIGN, 0); }
		public TerminalNode DIV_ASSIGN() { return getToken(TSQLParser.DIV_ASSIGN, 0); }
		public TerminalNode MOD_ASSIGN() { return getToken(TSQLParser.MOD_ASSIGN, 0); }
		public TerminalNode AND_ASSIGN() { return getToken(TSQLParser.AND_ASSIGN, 0); }
		public TerminalNode XOR_ASSIGN() { return getToken(TSQLParser.XOR_ASSIGN, 0); }
		public TerminalNode OR_ASSIGN() { return getToken(TSQLParser.OR_ASSIGN, 0); }
		public Assignment_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterAssignment_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitAssignment_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitAssignment_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_operatorContext assignment_operator() throws RecognitionException {
		Assignment_operatorContext _localctx = new Assignment_operatorContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_assignment_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9845);
			_la = _input.LA(1);
			if ( !(((((_la - 806)) & ~0x3f) == 0 && ((1L << (_la - 806)) & ((1L << (PLUS_ASSIGN - 806)) | (1L << (MINUS_ASSIGN - 806)) | (1L << (MULT_ASSIGN - 806)) | (1L << (DIV_ASSIGN - 806)) | (1L << (MOD_ASSIGN - 806)) | (1L << (AND_ASSIGN - 806)) | (1L << (XOR_ASSIGN - 806)) | (1L << (OR_ASSIGN - 806)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class File_sizeContext extends ParserRuleContext {
		public TerminalNode DECIMAL() { return getToken(TSQLParser.DECIMAL, 0); }
		public TerminalNode KB() { return getToken(TSQLParser.KB, 0); }
		public TerminalNode MB() { return getToken(TSQLParser.MB, 0); }
		public TerminalNode GB() { return getToken(TSQLParser.GB, 0); }
		public TerminalNode TB() { return getToken(TSQLParser.TB, 0); }
		public TerminalNode MODULE() { return getToken(TSQLParser.MODULE, 0); }
		public File_sizeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_file_size; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).enterFile_size(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof TSQLParserListener ) ((TSQLParserListener)listener).exitFile_size(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof TSQLParserVisitor ) return ((TSQLParserVisitor<? extends T>)visitor).visitFile_size(this);
			else return visitor.visitChildren(this);
		}
	}

	public final File_sizeContext file_size() throws RecognitionException {
		File_sizeContext _localctx = new File_sizeContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_file_size);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(9847);
			match(DECIMAL);
			setState(9849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) {
				{
				setState(9848);
				_la = _input.LA(1);
				if ( !(_la==GB || _la==KB || _la==MB || _la==TB || _la==MODULE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 162:
			return select_ops_sempred((Select_opsContext)_localctx, predIndex);
		case 327:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 328:
			return object_expression_sempred((Object_expressionContext)_localctx, predIndex);
		case 341:
			return from_item_sempred((From_itemContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean select_ops_sempred(Select_opsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 14);
		case 2:
			return precpred(_ctx, 13);
		case 3:
			return precpred(_ctx, 12);
		case 4:
			return precpred(_ctx, 11);
		case 5:
			return precpred(_ctx, 9);
		}
		return true;
	}
	private boolean object_expression_sempred(Object_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6:
			return precpred(_ctx, 9);
		}
		return true;
	}
	private boolean from_item_sempred(From_itemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7:
			return precpred(_ctx, 6);
		case 8:
			return precpred(_ctx, 5);
		case 9:
			return precpred(_ctx, 4);
		case 10:
			return precpred(_ctx, 7);
		case 11:
			return precpred(_ctx, 3);
		case 12:
			return precpred(_ctx, 2);
		}
		return true;
	}

	private static final int _serializedATNSegments = 5;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0343\u267e\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\4\u017f\t\u017f\4\u0180\t\u0180\4\u0181"+
		"\t\u0181\4\u0182\t\u0182\4\u0183\t\u0183\4\u0184\t\u0184\4\u0185\t\u0185"+
		"\4\u0186\t\u0186\4\u0187\t\u0187\4\u0188\t\u0188\4\u0189\t\u0189\4\u018a"+
		"\t\u018a\4\u018b\t\u018b\4\u018c\t\u018c\4\u018d\t\u018d\4\u018e\t\u018e"+
		"\4\u018f\t\u018f\4\u0190\t\u0190\4\u0191\t\u0191\4\u0192\t\u0192\4\u0193"+
		"\t\u0193\4\u0194\t\u0194\4\u0195\t\u0195\4\u0196\t\u0196\4\u0197\t\u0197"+
		"\4\u0198\t\u0198\4\u0199\t\u0199\4\u019a\t\u019a\4\u019b\t\u019b\4\u019c"+
		"\t\u019c\4\u019d\t\u019d\4\u019e\t\u019e\4\u019f\t\u019f\4\u01a0\t\u01a0"+
		"\4\u01a1\t\u01a1\4\u01a2\t\u01a2\4\u01a3\t\u01a3\4\u01a4\t\u01a4\4\u01a5"+
		"\t\u01a5\4\u01a6\t\u01a6\3\2\5\2\u034e\n\2\3\2\7\2\u0351\n\2\f\2\16\2"+
		"\u0354\13\2\3\2\7\2\u0357\n\2\f\2\16\2\u035a\13\2\3\2\3\2\3\3\3\3\3\3"+
		"\7\3\u0361\n\3\f\3\16\3\u0364\13\3\3\3\3\3\3\4\3\4\5\4\u036a\n\4\3\4\6"+
		"\4\u036d\n\4\r\4\16\4\u036e\3\4\5\4\u0372\n\4\3\5\3\5\3\5\5\5\u0377\n"+
		"\5\3\5\5\5\u037a\n\5\3\5\3\5\3\5\3\5\7\5\u0380\n\5\f\5\16\5\u0383\13\5"+
		"\5\5\u0385\n\5\3\6\3\6\3\6\7\6\u038a\n\6\f\6\16\6\u038d\13\6\3\6\3\6\7"+
		"\6\u0391\n\6\f\6\16\6\u0394\13\6\3\6\5\6\u0397\n\6\3\7\7\7\u039a\n\7\f"+
		"\7\16\7\u039d\13\7\3\7\3\7\7\7\u03a1\n\7\f\7\16\7\u03a4\13\7\6\7\u03a6"+
		"\n\7\r\7\16\7\u03a7\3\b\3\b\3\b\3\b\3\b\3\b\5\b\u03b0\n\b\3\t\3\t\3\t"+
		"\3\t\3\t\5\t\u03b7\n\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u03c0\n\n\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u03f4\n\13\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3"+
		"\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u042c\n"+
		"\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u043a\n\r\3\16"+
		"\3\16\3\16\3\16\3\16\5\16\u0441\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17"+
		"\3\17\3\17\3\17\3\17\5\17\u044e\n\17\3\20\3\20\3\20\3\20\3\21\3\21\3\22"+
		"\3\22\3\23\3\23\3\23\3\23\3\23\5\23\u045d\n\23\3\24\3\24\5\24\u0461\n"+
		"\24\3\25\3\25\3\25\3\25\5\25\u0467\n\25\3\25\3\25\5\25\u046b\n\25\3\26"+
		"\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0474\n\26\3\27\3\27\3\30\3\30\3\31"+
		"\3\31\3\31\5\31\u047d\n\31\3\31\3\31\3\31\5\31\u0482\n\31\3\31\3\31\3"+
		"\31\5\31\u0487\n\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\5\32\u0490\n\32"+
		"\3\33\3\33\3\33\3\33\3\34\3\34\3\34\5\34\u0499\n\34\3\34\3\34\7\34\u049d"+
		"\n\34\f\34\16\34\u04a0\13\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3"+
		"\35\7\35\u04ab\n\35\f\35\16\35\u04ae\13\35\3\35\3\35\3\35\5\35\u04b3\n"+
		"\35\3\35\3\35\3\35\3\35\3\35\7\35\u04ba\n\35\f\35\16\35\u04bd\13\35\5"+
		"\35\u04bf\n\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36"+
		"\u04cb\n\36\3\37\3\37\3\37\5\37\u04d0\n\37\3\37\3\37\3\37\7\37\u04d5\n"+
		"\37\f\37\16\37\u04d8\13\37\3\37\5\37\u04db\n\37\5\37\u04dd\n\37\3\37\3"+
		"\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \7 \u04ec\n \f \16 \u04ef"+
		"\13 \3!\3!\3!\3!\3!\3!\3!\7!\u04f8\n!\f!\16!\u04fb\13!\3\"\3\"\3\"\3\""+
		"\5\"\u0501\n\"\3#\3#\3#\3#\3#\3#\5#\u0509\n#\3$\3$\3$\3$\3$\3$\7$\u0511"+
		"\n$\f$\16$\u0514\13$\5$\u0516\n$\3$\3$\3$\3$\7$\u051c\n$\f$\16$\u051f"+
		"\13$\5$\u0521\n$\3$\3$\3$\3$\3$\3$\5$\u0529\n$\5$\u052b\n$\3$\3$\3$\3"+
		"$\3$\3$\5$\u0533\n$\3$\3$\3$\3$\3$\7$\u053a\n$\f$\16$\u053d\13$\5$\u053f"+
		"\n$\3%\3%\3%\3%\3%\3%\3%\3%\5%\u0549\n%\3&\3&\3&\3&\5&\u054f\n&\3&\3&"+
		"\3&\3&\7&\u0555\n&\f&\16&\u0558\13&\3&\3&\3&\3&\5&\u055e\n&\3\'\3\'\3"+
		"(\3(\3(\5(\u0565\n(\3(\5(\u0568\n(\3(\6(\u056b\n(\r(\16(\u056c\3(\3(\3"+
		"(\5(\u0572\n(\3)\3)\3)\3)\3)\3)\3)\5)\u057b\n)\3*\3*\3*\3*\3*\3*\3*\5"+
		"*\u0584\n*\3*\3*\3+\3+\3+\3+\3+\3+\3,\3,\3,\3,\3,\5,\u0593\n,\3,\3,\3"+
		",\3,\3,\3,\3,\3,\3,\3,\3,\5,\u05a0\n,\5,\u05a2\n,\3,\3,\3,\3,\3,\3,\3"+
		",\3,\3,\3,\5,\u05ae\n,\5,\u05b0\n,\3,\3,\3,\3,\3,\5,\u05b7\n,\3-\3-\3"+
		"-\3-\3-\3-\5-\u05bf\n-\3.\3.\3.\3.\3.\3.\5.\u05c7\n.\3.\3.\3.\3.\3/\3"+
		"/\3/\5/\u05d0\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60"+
		"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60"+
		"\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u05f5\n\60\3\61"+
		"\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u060d\n\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u061f"+
		"\n\62\3\62\5\62\u0622\n\62\3\62\3\62\3\62\5\62\u0627\n\62\3\62\5\62\u062a"+
		"\n\62\3\62\3\62\3\62\5\62\u062f\n\62\3\62\5\62\u0632\n\62\3\62\3\62\3"+
		"\62\5\62\u0637\n\62\3\62\5\62\u063a\n\62\3\62\3\62\3\62\5\62\u063f\n\62"+
		"\3\62\5\62\u0642\n\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u064a\n\62\3"+
		"\62\5\62\u064d\n\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0655\n\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0662\n\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u066d\n\62\3\62\7\62\u0670"+
		"\n\62\f\62\16\62\u0673\13\62\3\62\5\62\u0676\n\62\3\62\3\62\3\62\3\62"+
		"\5\62\u067c\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0693\n\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u069f\n\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u06aa\n\62\3\62\7\62\u06ad\n"+
		"\62\f\62\16\62\u06b0\13\62\3\62\5\62\u06b3\n\62\3\62\3\62\3\62\3\62\5"+
		"\62\u06b9\n\62\5\62\u06bb\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\5\62\u06c8\n\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\6\62\u06dd\n\62"+
		"\r\62\16\62\u06de\3\62\3\62\3\62\3\62\3\62\5\62\u06e6\n\62\3\62\3\62\3"+
		"\62\3\62\3\62\3\62\3\62\5\62\u06ef\n\62\3\62\3\62\3\62\5\62\u06f4\n\62"+
		"\3\62\5\62\u06f7\n\62\3\62\3\62\3\62\5\62\u06fc\n\62\3\62\5\62\u06ff\n"+
		"\62\3\62\3\62\3\62\5\62\u0704\n\62\3\62\6\62\u0707\n\62\r\62\16\62\u0708"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0724\n\62"+
		"\3\62\3\62\3\62\3\62\6\62\u072a\n\62\r\62\16\62\u072b\3\62\3\62\3\62\3"+
		"\62\3\62\5\62\u0733\n\62\5\62\u0735\n\62\3\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0743\n\62\3\62\3\62\3\62\3\62\3\62"+
		"\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\5\62\u0752\n\62\3\63\3\63\3\63"+
		"\3\63\3\63\3\63\3\63\5\63\u075b\n\63\5\63\u075d\n\63\3\64\3\64\3\64\3"+
		"\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u076a\n\64\3\64\5\64\u076d"+
		"\n\64\5\64\u076f\n\64\3\64\3\64\3\64\5\64\u0774\n\64\3\64\3\64\5\64\u0778"+
		"\n\64\3\64\5\64\u077b\n\64\5\64\u077d\n\64\3\64\3\64\3\64\3\64\5\64\u0783"+
		"\n\64\5\64\u0785\n\64\3\64\3\64\3\64\5\64\u078a\n\64\3\64\3\64\3\65\3"+
		"\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u079a\n\65"+
		"\3\65\3\65\3\65\3\65\3\65\3\65\5\65\u07a2\n\65\3\65\3\65\3\65\3\65\3\65"+
		"\3\65\5\65\u07aa\n\65\6\65\u07ac\n\65\r\65\16\65\u07ad\3\65\3\65\3\65"+
		"\3\65\3\65\3\65\3\65\5\65\u07b7\n\65\3\66\3\66\3\66\3\66\3\66\3\66\3\66"+
		"\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u07cb\n\66"+
		"\3\66\3\66\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u07d7\n\67\3\67"+
		"\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67\u07e6"+
		"\n\67\6\67\u07e8\n\67\r\67\16\67\u07e9\38\38\38\38\38\38\38\38\38\38\3"+
		"8\38\38\38\38\38\38\38\38\38\58\u0800\n8\38\38\38\38\38\38\38\38\38\3"+
		"8\58\u080c\n8\38\38\38\38\38\58\u0813\n8\38\38\38\38\58\u0819\n8\38\3"+
		"8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\5"+
		"8\u0833\n8\38\38\38\38\38\38\38\38\38\38\38\38\38\38\38\58\u0844\n8\3"+
		"8\38\58\u0848\n8\38\38\38\78\u084d\n8\f8\168\u0850\138\39\39\39\59\u0855"+
		"\n9\39\69\u0858\n9\r9\169\u0859\39\39\39\39\39\59\u0861\n9\3:\3:\3:\3"+
		":\3:\5:\u0868\n:\3;\3;\3;\3<\3<\3<\3<\3=\5=\u0872\n=\3=\3=\3=\3=\3=\5"+
		"=\u0879\n=\3=\3=\3=\5=\u087e\n=\3=\3=\3=\6=\u0883\n=\r=\16=\u0884\3>\3"+
		">\3>\3>\3>\3>\5>\u088d\n>\3?\3?\3?\3?\5?\u0893\n?\3?\3?\3?\3?\3?\5?\u089a"+
		"\n?\3@\3@\3@\7@\u089f\n@\f@\16@\u08a2\13@\3A\3A\3A\3A\3A\3A\3A\3A\3A\5"+
		"A\u08ad\nA\3B\3B\3B\3B\3B\3B\3B\3B\5B\u08b7\nB\3B\3B\3B\3B\5B\u08bd\n"+
		"B\6B\u08bf\nB\rB\16B\u08c0\3B\3B\5B\u08c5\nB\3C\3C\3C\3C\3C\3C\3C\3C\3"+
		"C\3C\3C\3C\3C\3C\3C\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u08e0\nD\3E\3E\3"+
		"E\3E\3E\3E\3E\3E\3E\3E\5E\u08ec\nE\3E\3E\3E\3E\5E\u08f2\nE\3F\3F\3F\3"+
		"F\3F\3F\3F\5F\u08fb\nF\3F\5F\u08fe\nF\3G\3G\3G\3G\3G\3G\3G\3G\3H\3H\3"+
		"H\3H\3H\3H\3H\3H\5H\u0910\nH\3H\3H\5H\u0914\nH\3H\3H\5H\u0918\nH\3H\6"+
		"H\u091b\nH\rH\16H\u091c\3H\3H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3I\5I\u092b\n"+
		"I\3I\3I\5I\u092f\nI\7I\u0931\nI\fI\16I\u0934\13I\3I\5I\u0937\nI\3I\3I"+
		"\3I\5I\u093c\nI\3J\3J\3J\3J\3J\5J\u0943\nJ\3J\3J\3J\3J\3J\3J\3J\3J\5J"+
		"\u094d\nJ\3J\7J\u0950\nJ\fJ\16J\u0953\13J\5J\u0955\nJ\3J\3J\3J\3J\3J\7"+
		"J\u095c\nJ\fJ\16J\u095f\13J\3J\3J\5J\u0963\nJ\3J\3J\5J\u0967\nJ\3J\5J"+
		"\u096a\nJ\3J\3J\3J\3J\3J\5J\u0971\nJ\3J\3J\3J\3J\5J\u0977\nJ\3K\3K\3K"+
		"\5K\u097c\nK\3K\3K\3K\3K\3L\3L\3L\3L\3L\5L\u0987\nL\3L\3L\3L\3L\3L\3L"+
		"\3L\5L\u0990\nL\3L\7L\u0993\nL\fL\16L\u0996\13L\3L\3L\5L\u099a\nL\3L\3"+
		"L\3L\3L\3L\5L\u09a1\nL\3L\3L\3L\3L\5L\u09a7\nL\3M\3M\3M\5M\u09ac\nM\3"+
		"M\3M\5M\u09b0\nM\3M\5M\u09b3\nM\3N\3N\3N\5N\u09b8\nN\3N\3N\3N\3N\5N\u09be"+
		"\nN\3N\5N\u09c1\nN\3N\3N\3N\5N\u09c6\nN\3N\5N\u09c9\nN\3N\3N\3N\3N\3N"+
		"\5N\u09d0\nN\5N\u09d2\nN\3N\5N\u09d5\nN\3N\3N\3N\3N\5N\u09db\nN\3N\5N"+
		"\u09de\nN\3N\3N\3N\5N\u09e3\nN\3N\5N\u09e6\nN\3N\3N\3N\5N\u09eb\nN\3N"+
		"\5N\u09ee\nN\3N\3N\3N\5N\u09f3\nN\3N\3N\3O\5O\u09f8\nO\3O\5O\u09fb\nO"+
		"\3O\5O\u09fe\nO\3O\3O\3O\3O\3O\5O\u0a05\nO\6O\u0a07\nO\rO\16O\u0a08\3"+
		"P\3P\3P\3P\3P\5P\u0a10\nP\3Q\3Q\3Q\3Q\3Q\5Q\u0a17\nQ\3Q\3Q\3Q\3Q\5Q\u0a1d"+
		"\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0a2a\nQ\3Q\3Q\3Q\3Q\3Q\5Q\u0a31"+
		"\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0a3b\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0a44"+
		"\nQ\3Q\3Q\5Q\u0a48\nQ\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0a53\nR\3R\3R\3R"+
		"\3R\5R\u0a59\nR\3R\3R\3R\6R\u0a5e\nR\rR\16R\u0a5f\3R\3R\3R\3R\3R\3R\3"+
		"R\3R\3R\3R\3R\3R\3R\3R\3R\3R\3R\5R\u0a73\nR\3R\3R\5R\u0a77\nR\3S\3S\3"+
		"S\3S\3S\5S\u0a7e\nS\3S\3S\3S\3S\3S\3S\3S\5S\u0a87\nS\3S\3S\3S\3S\5S\u0a8d"+
		"\nS\3S\3S\3S\3S\5S\u0a93\nS\3S\3S\3S\3S\3S\3S\6S\u0a9b\nS\rS\16S\u0a9c"+
		"\3S\3S\3T\3T\3T\3T\3T\5T\u0aa6\nT\3T\3T\5T\u0aaa\nT\3T\5T\u0aad\nT\3T"+
		"\3T\5T\u0ab1\nT\3T\3T\3T\5T\u0ab6\nT\3T\3T\3T\3T\5T\u0abc\nT\3T\5T\u0abf"+
		"\nT\3T\3T\5T\u0ac3\nT\3T\3T\3T\3T\3T\3T\6T\u0acb\nT\rT\16T\u0acc\3T\5"+
		"T\u0ad0\nT\3U\3U\3U\3U\3U\3U\3U\3U\3U\3U\5U\u0adc\nU\3U\3U\3U\3U\3U\5"+
		"U\u0ae3\nU\3U\3U\3U\3U\3U\6U\u0aea\nU\rU\16U\u0aeb\5U\u0aee\nU\3U\3U\3"+
		"U\5U\u0af3\nU\3U\3U\3U\3U\5U\u0af9\nU\3U\6U\u0afc\nU\rU\16U\u0afd\5U\u0b00"+
		"\nU\3U\5U\u0b03\nU\3U\3U\3U\5U\u0b08\nU\3U\5U\u0b0b\nU\3U\3U\3U\5U\u0b10"+
		"\nU\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u0b1e\nV\3V\3V\3V\3V\3V\5V"+
		"\u0b25\nV\3V\3V\3V\3V\3V\6V\u0b2c\nV\rV\16V\u0b2d\5V\u0b30\nV\3V\3V\3"+
		"V\5V\u0b35\nV\3V\3V\3V\3V\5V\u0b3b\nV\3V\6V\u0b3e\nV\rV\16V\u0b3f\5V\u0b42"+
		"\nV\3V\5V\u0b45\nV\3V\3V\3V\5V\u0b4a\nV\3V\5V\u0b4d\nV\3V\3V\3V\5V\u0b52"+
		"\nV\3V\3V\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\3W\7W\u0b61\nW\fW\16W\u0b64\13"+
		"W\3W\3W\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0b74\nY\3Y\3Y\3Y\5Y\u0b79"+
		"\nY\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0b81\nZ\3Z\3Z\3Z\5Z\u0b86\nZ\3Z\3Z\3Z\3Z\5Z"+
		"\u0b8c\nZ\3Z\3Z\5Z\u0b90\nZ\3Z\3Z\5Z\u0b94\nZ\3[\3[\3[\3[\3[\3[\3[\3["+
		"\3[\3[\3[\3[\3[\3[\5[\u0ba4\n[\5[\u0ba6\n[\3\\\3\\\3\\\3\\\3\\\3\\\3\\"+
		"\5\\\u0baf\n\\\3\\\3\\\3\\\5\\\u0bb4\n\\\5\\\u0bb6\n\\\3\\\3\\\5\\\u0bba"+
		"\n\\\3]\3]\3]\5]\u0bbf\n]\3]\3]\3]\3]\3]\3]\5]\u0bc7\n]\3]\7]\u0bca\n"+
		"]\f]\16]\u0bcd\13]\5]\u0bcf\n]\3]\3]\3]\3]\7]\u0bd5\n]\f]\16]\u0bd8\13"+
		"]\5]\u0bda\n]\3]\3]\3]\5]\u0bdf\n]\3]\3]\3]\5]\u0be4\n]\3]\3]\3]\5]\u0be9"+
		"\n]\3]\3]\3]\5]\u0bee\n]\3]\3]\3]\5]\u0bf3\n]\3]\3]\3]\5]\u0bf8\n]\3]"+
		"\3]\5]\u0bfc\n]\3]\3]\3]\5]\u0c01\n]\3^\3^\3^\3^\3^\3^\3^\3^\5^\u0c0b"+
		"\n^\3^\7^\u0c0e\n^\f^\16^\u0c11\13^\5^\u0c13\n^\3^\5^\u0c16\n^\3^\3^\3"+
		"^\5^\u0c1b\n^\3^\5^\u0c1e\n^\3^\3^\3^\5^\u0c23\n^\3^\5^\u0c26\n^\3^\3"+
		"^\3^\5^\u0c2b\n^\3^\5^\u0c2e\n^\3^\3^\3^\5^\u0c33\n^\3^\5^\u0c36\n^\3"+
		"^\3^\3^\5^\u0c3b\n^\3^\5^\u0c3e\n^\3^\3^\3^\5^\u0c43\n^\3^\3^\3^\3^\5"+
		"^\u0c49\n^\3^\3^\3^\5^\u0c4e\n^\3^\5^\u0c51\n^\3^\3^\3^\5^\u0c56\n^\3"+
		"^\3^\3^\3^\3^\5^\u0c5d\n^\5^\u0c5f\n^\3_\3_\3_\3_\3_\3_\3_\3_\3_\5_\u0c6a"+
		"\n_\3_\3_\3_\5_\u0c6f\n_\3_\3_\3_\5_\u0c74\n_\5_\u0c76\n_\5_\u0c78\n_"+
		"\3`\3`\3`\5`\u0c7d\n`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`\3`"+
		"\5`\u0c8f\n`\5`\u0c91\n`\3a\3a\3a\3a\3a\3a\3a\3a\3b\3b\3b\3b\3b\3b\3b"+
		"\3b\3b\3b\3b\3b\3b\5b\u0ca8\nb\3c\3c\3c\3c\3c\3c\3c\3c\3c\5c\u0cb3\nc"+
		"\3c\3c\3c\3c\3c\3c\7c\u0cbb\nc\fc\16c\u0cbe\13c\5c\u0cc0\nc\3c\3c\3d\3"+
		"d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3e\3e\3e\3e\3e\3e\3e\5e\u0cd6\ne\3e\3e\3"+
		"e\3e\3e\7e\u0cdd\ne\fe\16e\u0ce0\13e\3e\3e\3f\3f\3f\3f\3f\3f\5f\u0cea"+
		"\nf\3g\3g\3g\3g\3g\3g\3g\3g\5g\u0cf4\ng\3g\3g\3g\3g\5g\u0cfa\ng\3h\3h"+
		"\3h\3h\3h\3h\5h\u0d02\nh\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\5h\u0d0f\nh"+
		"\3i\3i\3i\3i\3i\3i\5i\u0d17\ni\3i\3i\3i\5i\u0d1c\ni\3i\5i\u0d1f\ni\3i"+
		"\3i\3i\5i\u0d24\ni\3i\5i\u0d27\ni\3i\3i\3i\5i\u0d2c\ni\3i\5i\u0d2f\ni"+
		"\3i\3i\3i\3i\3i\3i\5i\u0d37\ni\3i\3i\3i\3i\5i\u0d3d\ni\6i\u0d3f\ni\ri"+
		"\16i\u0d40\3i\3i\3i\3i\3i\5i\u0d48\ni\3i\3i\3i\3i\5i\u0d4e\ni\6i\u0d50"+
		"\ni\ri\16i\u0d51\3i\5i\u0d55\ni\5i\u0d57\ni\3i\5i\u0d5a\ni\3i\3i\3i\5"+
		"i\u0d5f\ni\3i\5i\u0d62\ni\3i\3i\3i\5i\u0d67\ni\3i\5i\u0d6a\ni\3i\3i\3"+
		"i\5i\u0d6f\ni\3i\5i\u0d72\ni\3i\3i\3i\5i\u0d77\ni\3i\5i\u0d7a\ni\3j\3"+
		"j\3j\3j\3j\3j\3j\3j\3j\5j\u0d85\nj\3j\3j\3j\3j\3j\3j\3j\3j\3j\5j\u0d90"+
		"\nj\3k\3k\3k\3k\3k\3k\3k\5k\u0d99\nk\5k\u0d9b\nk\3k\3k\3k\3k\5k\u0da1"+
		"\nk\5k\u0da3\nk\3k\3k\3k\3k\5k\u0da9\nk\5k\u0dab\nk\3k\3k\3k\3k\5k\u0db1"+
		"\nk\5k\u0db3\nk\3k\3k\3k\5k\u0db8\nk\3l\3l\3l\3l\3l\3l\3l\3l\3l\5l\u0dc3"+
		"\nl\3m\3m\3m\3m\5m\u0dc9\nm\3n\3n\3n\3n\5n\u0dcf\nn\3n\3n\5n\u0dd3\nn"+
		"\3n\3n\3n\5n\u0dd8\nn\3n\5n\u0ddb\nn\3n\3n\3n\5n\u0de0\nn\3n\5n\u0de3"+
		"\nn\3n\3n\3n\5n\u0de8\nn\3n\5n\u0deb\nn\3n\3n\3n\3n\3n\3n\3n\5n\u0df4"+
		"\nn\3o\3o\3o\3o\3o\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0e03\np\3p\3p\5p\u0e07"+
		"\np\3p\3p\3p\5p\u0e0c\np\3p\3p\3q\3q\3q\3q\5q\u0e14\nq\3r\3r\3r\3r\3r"+
		"\3r\3r\3r\5r\u0e1e\nr\3r\5r\u0e21\nr\3r\3r\5r\u0e25\nr\3s\3s\3s\3s\3s"+
		"\3s\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\3t\5t\u0e3c\nt\3t\3t\3t"+
		"\3t\5t\u0e42\nt\3u\3u\3u\3u\5u\u0e48\nu\3u\3u\5u\u0e4c\nu\3u\3u\3u\3u"+
		"\5u\u0e52\nu\3u\6u\u0e55\nu\ru\16u\u0e56\3u\3u\3u\3u\5u\u0e5d\nu\3u\3"+
		"u\3u\5u\u0e62\nu\3u\3u\7u\u0e66\nu\fu\16u\u0e69\13u\6u\u0e6b\nu\ru\16"+
		"u\u0e6c\3u\3u\3u\3u\3u\3u\3u\5u\u0e76\nu\3u\5u\u0e79\nu\3u\5u\u0e7c\n"+
		"u\3v\3v\3v\3v\5v\u0e82\nv\3v\3v\3v\7v\u0e87\nv\fv\16v\u0e8a\13v\3v\5v"+
		"\u0e8d\nv\3v\3v\3v\3v\3v\3v\3v\5v\u0e96\nv\3v\5v\u0e99\nv\3w\3w\3w\3w"+
		"\3w\3w\3w\3w\7w\u0ea3\nw\fw\16w\u0ea6\13w\3w\3w\3w\3w\5w\u0eac\nw\3w\3"+
		"w\3w\3w\3w\5w\u0eb3\nw\3x\3x\3x\3x\5x\u0eb9\nx\3y\3y\3y\3y\3y\3y\5y\u0ec1"+
		"\ny\7y\u0ec3\ny\fy\16y\u0ec6\13y\3z\3z\3z\7z\u0ecb\nz\fz\16z\u0ece\13"+
		"z\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\3{\5{\u0edc\n{\3{\3{\3{\3{\5{\u0ee2"+
		"\n{\3{\5{\u0ee5\n{\3{\3{\3{\5{\u0eea\n{\3{\3{\5{\u0eee\n{\5{\u0ef0\n{"+
		"\3|\3|\3|\3|\3|\3|\3|\5|\u0ef9\n|\3|\3|\3|\3|\5|\u0eff\n|\3|\3|\3|\3|"+
		"\3|\5|\u0f06\n|\3|\5|\u0f09\n|\3|\3|\3|\3|\5|\u0f0f\n|\3|\3|\3|\3|\5|"+
		"\u0f15\n|\3|\3|\3|\7|\u0f1a\n|\f|\16|\u0f1d\13|\3|\3|\3|\5|\u0f22\n|\5"+
		"|\u0f24\n|\3|\3|\3|\5|\u0f29\n|\3|\3|\3|\3|\5|\u0f2f\n|\3|\3|\3|\3|\5"+
		"|\u0f35\n|\3|\3|\3|\7|\u0f3a\n|\f|\16|\u0f3d\13|\3|\5|\u0f40\n|\3|\3|"+
		"\5|\u0f44\n|\3|\5|\u0f47\n|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\3|\5|\u0f55"+
		"\n|\3|\3|\3|\5|\u0f5a\n|\3|\3|\5|\u0f5e\n|\3|\3|\3|\3|\3|\3|\3|\3|\3|"+
		"\3|\3|\5|\u0f6b\n|\3|\5|\u0f6e\n|\5|\u0f70\n|\3|\3|\3|\3|\3|\3|\5|\u0f78"+
		"\n|\3}\3}\3}\3}\3}\3}\3}\5}\u0f81\n}\3}\3}\3}\3}\5}\u0f87\n}\3}\3}\3}"+
		"\3}\3}\5}\u0f8e\n}\3}\5}\u0f91\n}\3}\3}\3}\3}\5}\u0f97\n}\3}\3}\3}\3}"+
		"\5}\u0f9d\n}\3}\3}\3}\7}\u0fa2\n}\f}\16}\u0fa5\13}\3}\3}\3}\5}\u0faa\n"+
		"}\5}\u0fac\n}\3}\3}\3}\5}\u0fb1\n}\3}\3}\3}\3}\5}\u0fb7\n}\3}\3}\3}\3"+
		"}\5}\u0fbd\n}\3}\3}\3}\3}\5}\u0fc3\n}\3}\3}\3}\7}\u0fc8\n}\f}\16}\u0fcb"+
		"\13}\3}\5}\u0fce\n}\3}\3}\5}\u0fd2\n}\3}\5}\u0fd5\n}\3}\3}\3}\3}\3}\3"+
		"}\3}\3}\3}\3}\3}\3}\5}\u0fe3\n}\3}\3}\3}\5}\u0fe8\n}\3}\3}\5}\u0fec\n"+
		"}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0ff9\n}\3}\5}\u0ffc\n}\5}\u0ffe"+
		"\n}\3}\3}\3}\3}\3}\3}\5}\u1006\n}\3~\3~\3~\3~\3~\3~\3~\3~\5~\u1010\n~"+
		"\3~\3~\3~\3~\3~\7~\u1017\n~\f~\16~\u101a\13~\3~\3~\3~\3~\3~\3~\5~\u1022"+
		"\n~\3\177\3\177\3\177\3\177\3\177\3\177\3\177\3\177\5\177\u102c\n\177"+
		"\3\177\3\177\3\177\3\177\3\177\7\177\u1033\n\177\f\177\16\177\u1036\13"+
		"\177\3\177\3\177\3\177\3\177\3\177\3\177\5\177\u103e\n\177\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u1049"+
		"\n\u0080\3\u0080\3\u0080\5\u0080\u104d\n\u0080\3\u0080\3\u0080\3\u0080"+
		"\6\u0080\u1052\n\u0080\r\u0080\16\u0080\u1053\5\u0080\u1056\n\u0080\3"+
		"\u0080\3\u0080\3\u0080\5\u0080\u105b\n\u0080\3\u0080\3\u0080\5\u0080\u105f"+
		"\n\u0080\3\u0080\3\u0080\3\u0080\6\u0080\u1064\n\u0080\r\u0080\16\u0080"+
		"\u1065\5\u0080\u1068\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3"+
		"\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u1076\n"+
		"\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u107b\n\u0080\3\u0080\3\u0080\3"+
		"\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\5\u0080\u1091\n\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080"+
		"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\5\u0080\u10a7\n\u0080\3\u0080"+
		"\3\u0080\3\u0080\5\u0080\u10ac\n\u0080\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\5\u0081\u10b8\n\u0081"+
		"\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u10bf\n\u0082\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0084\3\u0084\3\u0084"+
		"\3\u0084\3\u0084\5\u0084\u10cd\n\u0084\3\u0084\5\u0084\u10d0\n\u0084\3"+
		"\u0084\3\u0084\7\u0084\u10d4\n\u0084\f\u0084\16\u0084\u10d7\13\u0084\3"+
		"\u0085\3\u0085\3\u0085\3\u0085\5\u0085\u10dd\n\u0085\3\u0085\3\u0085\3"+
		"\u0085\3\u0085\3\u0085\5\u0085\u10e4\n\u0085\3\u0085\6\u0085\u10e7\n\u0085"+
		"\r\u0085\16\u0085\u10e8\3\u0085\3\u0085\5\u0085\u10ed\n\u0085\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\5\u0086\u10f3\n\u0086\3\u0086\3\u0086\3\u0086"+
		"\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u10fe\n\u0086"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087"+
		"\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087"+
		"\u1111\n\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u1118\n"+
		"\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u111d\n\u0088\3\u0088\3\u0088\3"+
		"\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\5\u0088\u112f\n\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\3\u0088\5\u0088\u113e\n\u0088\5\u0088\u1140\n\u0088\3"+
		"\u0089\3\u0089\3\u0089\3\u0089\3\u0089\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\5\u008a\u114b\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u1151\n"+
		"\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u1157\n\u008a\3\u008a\5"+
		"\u008a\u115a\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u1160\n\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\6\u008a\u1168\n\u008a"+
		"\r\u008a\16\u008a\u1169\3\u008a\5\u008a\u116d\n\u008a\3\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\5\u008a\u1174\n\u008a\3\u008a\5\u008a\u1177\n"+
		"\u008a\3\u008a\3\u008a\3\u008a\6\u008a\u117c\n\u008a\r\u008a\16\u008a"+
		"\u117d\3\u008b\3\u008b\3\u008b\5\u008b\u1183\n\u008b\3\u008b\3\u008b\3"+
		"\u008b\5\u008b\u1188\n\u008b\3\u008b\3\u008b\3\u008b\3\u008b\7\u008b\u118e"+
		"\n\u008b\f\u008b\16\u008b\u1191\13\u008b\5\u008b\u1193\n\u008b\3\u008b"+
		"\3\u008b\3\u008b\3\u008b\5\u008b\u1199\n\u008b\3\u008b\5\u008b\u119c\n"+
		"\u008b\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\5\u008c\u11a3\n\u008c\3"+
		"\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d"+
		"\u11ad\n\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d"+
		"\3\u008d\3\u008d\5\u008d\u11b8\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u11c3\n\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\5\u008e\u11c9\n\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\6\u008e\u11d7\n\u008e\r\u008e\16\u008e\u11d8\3\u008e\5\u008e\u11dc\n"+
		"\u008e\3\u008e\3\u008e\5\u008e\u11e0\n\u008e\3\u008f\3\u008f\3\u008f\3"+
		"\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u11eb\n\u008f\3"+
		"\u008f\3\u008f\3\u008f\3\u008f\5\u008f\u11f1\n\u008f\3\u008f\3\u008f\3"+
		"\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f"+
		"\3\u008f\6\u008f\u11ff\n\u008f\r\u008f\16\u008f\u1200\3\u008f\5\u008f"+
		"\u1204\n\u008f\3\u008f\3\u008f\5\u008f\u1208\n\u008f\3\u008f\5\u008f\u120b"+
		"\n\u008f\3\u008f\3\u008f\5\u008f\u120f\n\u008f\5\u008f\u1211\n\u008f\3"+
		"\u0090\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090\5\u0090\u1219\n\u0090\3"+
		"\u0090\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091"+
		"\3\u0091\5\u0091\u1225\n\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0092"+
		"\3\u0092\3\u0092\5\u0092\u122e\n\u0092\3\u0092\5\u0092\u1231\n\u0092\3"+
		"\u0092\3\u0092\3\u0092\5\u0092\u1236\n\u0092\3\u0093\3\u0093\3\u0093\3"+
		"\u0093\3\u0093\5\u0093\u123d\n\u0093\5\u0093\u123f\n\u0093\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\5\u0093\u1245\n\u0093\5\u0093\u1247\n\u0093\3\u0093\3"+
		"\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u124f\n\u0093\5\u0093\u1251"+
		"\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u1257\n\u0093\5\u0093"+
		"\u1259\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u125f\n\u0093\5"+
		"\u0093\u1261\n\u0093\3\u0093\3\u0093\5\u0093\u1265\n\u0093\5\u0093\u1267"+
		"\n\u0093\3\u0093\5\u0093\u126a\n\u0093\3\u0093\3\u0093\5\u0093\u126e\n"+
		"\u0093\5\u0093\u1270\n\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\3"+
		"\u0093\3\u0093\5\u0093\u1279\n\u0093\3\u0094\3\u0094\3\u0094\5\u0094\u127e"+
		"\n\u0094\3\u0094\3\u0094\5\u0094\u1282\n\u0094\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\3\u0095\5\u0095\u128a\n\u0095\3\u0095\3\u0095\3\u0095"+
		"\3\u0095\3\u0095\5\u0095\u1291\n\u0095\3\u0095\3\u0095\3\u0095\5\u0095"+
		"\u1296\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096\3\u0097\3\u0097\3\u0097"+
		"\3\u0097\5\u0097\u12a0\n\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u12a5\n"+
		"\u0097\3\u0097\3\u0097\3\u0097\3\u0097\5\u0097\u12ab\n\u0097\6\u0097\u12ad"+
		"\n\u0097\r\u0097\16\u0097\u12ae\3\u0097\3\u0097\3\u0098\3\u0098\3\u0098"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u12ba\n\u0098\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\5\u0099\u12c1\n\u0099\3\u0099\3\u0099\3\u0099"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u12cd"+
		"\n\u0099\3\u009a\5\u009a\u12d0\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\5\u009a\u12d8\n\u009a\5\u009a\u12da\n\u009a\3\u009a\5"+
		"\u009a\u12dd\n\u009a\3\u009a\3\u009a\5\u009a\u12e1\n\u009a\3\u009a\5\u009a"+
		"\u12e4\n\u009a\3\u009a\5\u009a\u12e7\n\u009a\3\u009a\3\u009a\3\u009a\3"+
		"\u009a\7\u009a\u12ed\n\u009a\f\u009a\16\u009a\u12f0\13\u009a\3\u009a\3"+
		"\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u12f8\n\u009a\3\u009a\3"+
		"\u009a\7\u009a\u12fc\n\u009a\f\u009a\16\u009a\u12ff\13\u009a\3\u009a\3"+
		"\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u1306\n\u009a\3\u009a\3\u009a\5"+
		"\u009a\u130a\n\u009a\3\u009a\3\u009a\5\u009a\u130e\n\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u1317\n\u009a\3\u009a"+
		"\3\u009a\7\u009a\u131b\n\u009a\f\u009a\16\u009a\u131e\13\u009a\3\u009a"+
		"\5\u009a\u1321\n\u009a\3\u009a\5\u009a\u1324\n\u009a\3\u009a\3\u009a\3"+
		"\u009b\3\u009b\3\u009b\3\u009b\3\u009b\7\u009b\u132d\n\u009b\f\u009b\16"+
		"\u009b\u1330\13\u009b\3\u009b\5\u009b\u1333\n\u009b\3\u009c\3\u009c\3"+
		"\u009c\3\u009c\3\u009c\5\u009c\u133a\n\u009c\3\u009c\3\u009c\3\u009c\5"+
		"\u009c\u133f\n\u009c\3\u009d\5\u009d\u1342\n\u009d\3\u009d\3\u009d\3\u009d"+
		"\5\u009d\u1347\n\u009d\3\u009d\5\u009d\u134a\n\u009d\3\u009d\3\u009d\3"+
		"\u009d\5\u009d\u134f\n\u009d\3\u009d\5\u009d\u1352\n\u009d\3\u009d\5\u009d"+
		"\u1355\n\u009d\3\u009d\3\u009d\3\u009d\3\u009d\7\u009d\u135b\n\u009d\f"+
		"\u009d\16\u009d\u135e\13\u009d\5\u009d\u1360\n\u009d\3\u009d\3\u009d\3"+
		"\u009d\3\u009d\3\u009d\5\u009d\u1367\n\u009d\3\u009d\3\u009d\5\u009d\u136b"+
		"\n\u009d\5\u009d\u136d\n\u009d\5\u009d\u136f\n\u009d\3\u009d\5\u009d\u1372"+
		"\n\u009d\3\u009d\5\u009d\u1375\n\u009d\3\u009e\5\u009e\u1378\n\u009e\3"+
		"\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\5\u009e\u1380\n\u009e\5"+
		"\u009e\u1382\n\u009e\3\u009e\5\u009e\u1385\n\u009e\3\u009e\3\u009e\3\u009e"+
		"\5\u009e\u138a\n\u009e\3\u009e\5\u009e\u138d\n\u009e\3\u009e\3\u009e\3"+
		"\u009e\3\u009e\5\u009e\u1393\n\u009e\3\u009e\5\u009e\u1396\n\u009e\3\u009e"+
		"\3\u009e\3\u009e\3\u009e\5\u009e\u139c\n\u009e\3\u009e\5\u009e\u139f\n"+
		"\u009e\3\u009e\5\u009e\u13a2\n\u009e\3\u009f\3\u009f\3\u009f\3\u009f\3"+
		"\u009f\3\u009f\5\u009f\u13aa\n\u009f\3\u00a0\3\u00a0\5\u00a0\u13ae\n\u00a0"+
		"\3\u00a0\3\u00a0\3\u00a0\7\u00a0\u13b3\n\u00a0\f\u00a0\16\u00a0\u13b6"+
		"\13\u00a0\3\u00a0\3\u00a0\3\u00a0\3\u00a0\5\u00a0\u13bc\n\u00a0\3\u00a0"+
		"\3\u00a0\5\u00a0\u13c0\n\u00a0\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u13c5\n"+
		"\u00a1\3\u00a1\5\u00a1\u13c8\n\u00a1\3\u00a1\3\u00a1\5\u00a1\u13cc\n\u00a1"+
		"\3\u00a1\5\u00a1\u13cf\n\u00a1\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u13d4\n"+
		"\u00a1\3\u00a2\5\u00a2\u13d7\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u13db\n\u00a2"+
		"\3\u00a2\5\u00a2\u13de\n\u00a2\3\u00a3\5\u00a3\u13e1\n\u00a3\3\u00a3\3"+
		"\u00a3\5\u00a3\u13e5\n\u00a3\3\u00a3\5\u00a3\u13e8\n\u00a3\3\u00a4\3\u00a4"+
		"\3\u00a4\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u13f0\n\u00a4\3\u00a4\3\u00a4"+
		"\3\u00a4\5\u00a4\u13f5\n\u00a4\3\u00a4\7\u00a4\u13f8\n\u00a4\f\u00a4\16"+
		"\u00a4\u13fb\13\u00a4\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u1400\n\u00a5\3"+
		"\u00a5\3\u00a5\3\u00a5\5\u00a5\u1405\n\u00a5\3\u00a6\3\u00a6\3\u00a7\3"+
		"\u00a7\5\u00a7\u140b\n\u00a7\3\u00a8\5\u00a8\u140e\n\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u1416\n\u00a8\5\u00a8\u1418\n"+
		"\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u141d\n\u00a8\3\u00a8\5\u00a8\u1420"+
		"\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\7\u00a8\u1426\n\u00a8\f\u00a8"+
		"\16\u00a8\u1429\13\u00a8\3\u00a8\5\u00a8\u142c\n\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\3\u00a8\7\u00a8\u1432\n\u00a8\f\u00a8\16\u00a8\u1435\13\u00a8"+
		"\5\u00a8\u1437\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8"+
		"\u143e\n\u00a8\3\u00a8\3\u00a8\5\u00a8\u1442\n\u00a8\5\u00a8\u1444\n\u00a8"+
		"\5\u00a8\u1446\n\u00a8\3\u00a8\5\u00a8\u1449\n\u00a8\3\u00a8\5\u00a8\u144c"+
		"\n\u00a8\3\u00a9\3\u00a9\3\u00a9\3\u00a9\7\u00a9\u1452\n\u00a9\f\u00a9"+
		"\16\u00a9\u1455\13\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u145a\n\u00a9"+
		"\3\u00a9\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u1460\n\u00a9\5\u00a9\u1462\n"+
		"\u00a9\3\u00aa\3\u00aa\5\u00aa\u1466\n\u00aa\3\u00aa\5\u00aa\u1469\n\u00aa"+
		"\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u146e\n\u00ab\3\u00ab\3\u00ab\5\u00ab"+
		"\u1472\n\u00ab\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\5\u00ac\u1479\n"+
		"\u00ac\3\u00ac\3\u00ac\5\u00ac\u147d\n\u00ac\3\u00ac\3\u00ac\3\u00ac\7"+
		"\u00ac\u1482\n\u00ac\f\u00ac\16\u00ac\u1485\13\u00ac\3\u00ac\3\u00ac\3"+
		"\u00ac\3\u00ac\3\u00ac\7\u00ac\u148c\n\u00ac\f\u00ac\16\u00ac\u148f\13"+
		"\u00ac\5\u00ac\u1491\n\u00ac\5\u00ac\u1493\n\u00ac\3\u00ac\3\u00ac\5\u00ac"+
		"\u1497\n\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ac\7\u00ac\u149d\n\u00ac\f"+
		"\u00ac\16\u00ac\u14a0\13\u00ac\5\u00ac\u14a2\n\u00ac\3\u00ad\3\u00ad\3"+
		"\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\3\u00ad\5\u00ad\u14b1\n\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae"+
		"\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\3\u00ae\5\u00ae\u14c1\n\u00ae\3\u00af\3\u00af\3\u00af\3\u00af\3\u00af"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\3\u00b1\5\u00b1\u14d3\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\5\u00b1\u14d9\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\5\u00b1\u14e1\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\7\u00b1"+
		"\u14e8\n\u00b1\f\u00b1\16\u00b1\u14eb\13\u00b1\3\u00b1\3\u00b1\5\u00b1"+
		"\u14ef\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1"+
		"\3\u00b1\5\u00b1\u14f9\n\u00b1\3\u00b1\3\u00b1\3\u00b1\5\u00b1\u14fe\n"+
		"\u00b1\3\u00b1\5\u00b1\u1501\n\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3"+
		"\u00b1\5\u00b1\u1508\n\u00b1\3\u00b1\3\u00b1\5\u00b1\u150c\n\u00b1\3\u00b1"+
		"\5\u00b1\u150f\n\u00b1\5\u00b1\u1511\n\u00b1\3\u00b2\3\u00b2\3\u00b2\3"+
		"\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u151c\n\u00b3\3"+
		"\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u1523\n\u00b3\3\u00b3\5"+
		"\u00b3\u1526\n\u00b3\3\u00b4\3\u00b4\3\u00b4\3\u00b4\7\u00b4\u152c\n\u00b4"+
		"\f\u00b4\16\u00b4\u152f\13\u00b4\3\u00b4\3\u00b4\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\5\u00b5\u1537\n\u00b5\3\u00b5\3\u00b5\5\u00b5\u153b\n\u00b5\3"+
		"\u00b5\5\u00b5\u153e\n\u00b5\3\u00b6\3\u00b6\5\u00b6\u1542\n\u00b6\3\u00b6"+
		"\3\u00b6\3\u00b6\7\u00b6\u1547\n\u00b6\f\u00b6\16\u00b6\u154a\13\u00b6"+
		"\3\u00b6\5\u00b6\u154d\n\u00b6\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1563\n\u00b7"+
		"\3\u00b8\3\u00b8\5\u00b8\u1567\n\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\3\u00b8\3\u00b8\5\u00b8\u156f\n\u00b8\5\u00b8\u1571\n\u00b8\3\u00b8\3"+
		"\u00b8\5\u00b8\u1575\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u157a\n\u00b8"+
		"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u1580\n\u00b8\3\u00b8\5\u00b8"+
		"\u1583\n\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9"+
		"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9"+
		"\u1594\n\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u159b\n"+
		"\u00b9\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u15a0\n\u00ba\3\u00bb\3\u00bb\3"+
		"\u00bb\3\u00bb\3\u00bc\3\u00bc\3\u00bc\7\u00bc\u15a9\n\u00bc\f\u00bc\16"+
		"\u00bc\u15ac\13\u00bc\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd"+
		"\3\u00bd\5\u00bd\u15b5\n\u00bd\3\u00bd\3\u00bd\5\u00bd\u15b9\n\u00bd\5"+
		"\u00bd\u15bb\n\u00bd\3\u00bd\5\u00bd\u15be\n\u00bd\3\u00be\3\u00be\5\u00be"+
		"\u15c2\n\u00be\3\u00bf\5\u00bf\u15c5\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u15d0\n\u00bf\3"+
		"\u00bf\5\u00bf\u15d3\n\u00bf\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3"+
		"\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u15e1\n"+
		"\u00c0\5\u00c0\u15e3\n\u00c0\3\u00c1\5\u00c1\u15e6\n\u00c1\3\u00c1\5\u00c1"+
		"\u15e9\n\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c2"+
		"\3\u00c2\5\u00c2\u15f3\n\u00c2\3\u00c2\5\u00c2\u15f6\n\u00c2\3\u00c2\5"+
		"\u00c2\u15f9\n\u00c2\3\u00c2\3\u00c2\5\u00c2\u15fd\n\u00c2\3\u00c3\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c5\3\u00c5"+
		"\3\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u160f\n\u00c6\3\u00c6"+
		"\5\u00c6\u1612\n\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u1617\n\u00c6\f"+
		"\u00c6\16\u00c6\u161a\13\u00c6\3\u00c6\5\u00c6\u161d\n\u00c6\5\u00c6\u161f"+
		"\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6\u1625\n\u00c6\f\u00c6"+
		"\16\u00c6\u1628\13\u00c6\5\u00c6\u162a\n\u00c6\3\u00c6\3\u00c6\5\u00c6"+
		"\u162e\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7\3\u00c7\3\u00c7\3\u00c7"+
		"\5\u00c7\u1637\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c8\5\u00c8\u1640\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\7\u00c8"+
		"\u1646\n\u00c8\f\u00c8\16\u00c8\u1649\13\u00c8\5\u00c8\u164b\n\u00c8\3"+
		"\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u1651\n\u00c8\3\u00c8\3\u00c8\3"+
		"\u00c8\7\u00c8\u1656\n\u00c8\f\u00c8\16\u00c8\u1659\13\u00c8\3\u00c8\5"+
		"\u00c8\u165c\n\u00c8\3\u00c8\5\u00c8\u165f\n\u00c8\3\u00c8\3\u00c8\3\u00c8"+
		"\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00ca\3\u00ca\3\u00ca\3\u00cb\3\u00cb"+
		"\5\u00cb\u166d\n\u00cb\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc\u1673\n"+
		"\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd\u167b\n"+
		"\u00cd\f\u00cd\16\u00cd\u167e\13\u00cd\5\u00cd\u1680\n\u00cd\3\u00cd\3"+
		"\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd\7\u00cd\u1689\n\u00cd\f"+
		"\u00cd\16\u00cd\u168c\13\u00cd\5\u00cd\u168e\n\u00cd\3\u00cd\5\u00cd\u1691"+
		"\n\u00cd\3\u00cd\3\u00cd\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\5\u00ce"+
		"\u169a\n\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce\3\u00ce"+
		"\5\u00ce\u16a3\n\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u16a9\n"+
		"\u00cf\3\u00cf\3\u00cf\5\u00cf\u16ad\n\u00cf\3\u00cf\5\u00cf\u16b0\n\u00cf"+
		"\3\u00cf\3\u00cf\3\u00cf\3\u00cf\5\u00cf\u16b6\n\u00cf\3\u00d0\3\u00d0"+
		"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d1\3\u00d1\5\u00d1\u16c0\n\u00d1"+
		"\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u16c5\n\u00d1\3\u00d1\5\u00d1\u16c8\n"+
		"\u00d1\3\u00d1\5\u00d1\u16cb\n\u00d1\3\u00d2\3\u00d2\3\u00d3\3\u00d3\3"+
		"\u00d3\5\u00d3\u16d2\n\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3"+
		"\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\3\u00d4\5\u00d4\u16e0\n"+
		"\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5\3\u00d5"+
		"\3\u00d5\3\u00d5\3\u00d5\7\u00d5\u16ed\n\u00d5\f\u00d5\16\u00d5\u16f0"+
		"\13\u00d5\5\u00d5\u16f2\n\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u16fc\n\u00d6\3\u00d6\3\u00d6\3\u00d6"+
		"\3\u00d6\7\u00d6\u1702\n\u00d6\f\u00d6\16\u00d6\u1705\13\u00d6\5\u00d6"+
		"\u1707\n\u00d6\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u170e\n"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7"+
		"\u1717\n\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u171e\n"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1724\n\u00d7\6\u00d7\u1726"+
		"\n\u00d7\r\u00d7\16\u00d7\u1727\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\5\u00d7\u1732\n\u00d7\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\5\u00d8\u1739\n\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8"+
		"\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u1742\n\u00d8\5\u00d8\u1744\n\u00d8\3"+
		"\u00d8\3\u00d8\5\u00d8\u1748\n\u00d8\3\u00d8\3\u00d8\5\u00d8\u174c\n\u00d8"+
		"\3\u00d8\7\u00d8\u174f\n\u00d8\f\u00d8\16\u00d8\u1752\13\u00d8\3\u00d9"+
		"\3\u00d9\5\u00d9\u1756\n\u00d9\3\u00da\3\u00da\5\u00da\u175a\n\u00da\3"+
		"\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db\u1761\n\u00db\f\u00db\16"+
		"\u00db\u1764\13\u00db\3\u00db\3\u00db\3\u00db\3\u00db\3\u00db\7\u00db"+
		"\u176b\n\u00db\f\u00db\16\u00db\u176e\13\u00db\5\u00db\u1770\n\u00db\3"+
		"\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u1778\n\u00dc\3"+
		"\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u177e\n\u00dc\f\u00dc\16\u00dc"+
		"\u1781\13\u00dc\5\u00dc\u1783\n\u00dc\3\u00dc\3\u00dc\3\u00dc\5\u00dc"+
		"\u1788\n\u00dc\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00de\3\u00de\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\5\u00df\u179b\n\u00df\5\u00df\u179d\n\u00df\3\u00df\3\u00df\3"+
		"\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\7\u00df\u17a8\n"+
		"\u00df\f\u00df\16\u00df\u17ab\13\u00df\3\u00df\3\u00df\3\u00df\5\u00df"+
		"\u17b0\n\u00df\5\u00df\u17b2\n\u00df\3\u00df\3\u00df\5\u00df\u17b6\n\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\7\u00df\u17bc\n\u00df\f\u00df\16\u00df"+
		"\u17bf\13\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\7\u00df\u17c6"+
		"\n\u00df\f\u00df\16\u00df\u17c9\13\u00df\3\u00df\3\u00df\3\u00df\3\u00df"+
		"\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u17d3\n\u00df\3\u00df\3\u00df"+
		"\5\u00df\u17d7\n\u00df\3\u00e0\3\u00e0\5\u00e0\u17db\n\u00e0\5\u00e0\u17dd"+
		"\n\u00e0\3\u00e0\3\u00e0\5\u00e0\u17e1\n\u00e0\3\u00e0\3\u00e0\3\u00e0"+
		"\7\u00e0\u17e6\n\u00e0\f\u00e0\16\u00e0\u17e9\13\u00e0\3\u00e1\3\u00e1"+
		"\3\u00e1\5\u00e1\u17ee\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1"+
		"\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\5\u00e1\u17fb\n\u00e1"+
		"\5\u00e1\u17fd\n\u00e1\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\5\u00e2\u1807\n\u00e2\3\u00e2\3\u00e2\3\u00e2\3\u00e2"+
		"\3\u00e2\3\u00e2\5\u00e2\u180f\n\u00e2\3\u00e2\5\u00e2\u1812\n\u00e2\3"+
		"\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\3\u00e3\3\u00e3\3\u00e3\5\u00e3\u1820\n\u00e3\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4\3\u00e4"+
		"\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u183a\n\u00e4\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5"+
		"\3\u00e5\3\u00e5\5\u00e5\u184a\n\u00e5\3\u00e6\3\u00e6\3\u00e6\3\u00e6"+
		"\3\u00e6\3\u00e6\3\u00e6\7\u00e6\u1853\n\u00e6\f\u00e6\16\u00e6\u1856"+
		"\13\u00e6\7\u00e6\u1858\n\u00e6\f\u00e6\16\u00e6\u185b\13\u00e6\5\u00e6"+
		"\u185d\n\u00e6\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\3\u00e7\5\u00e7"+
		"\u1865\n\u00e7\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\5\u00e9\u186f\n\u00e9\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea"+
		"\u1875\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u187c\n"+
		"\u00ea\5\u00ea\u187e\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3"+
		"\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u188a\n\u00ea\3\u00ea\3"+
		"\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea"+
		"\u1895\n\u00ea\3\u00ea\3\u00ea\5\u00ea\u1899\n\u00ea\3\u00ea\3\u00ea\3"+
		"\u00ea\5\u00ea\u189e\n\u00ea\3\u00ea\5\u00ea\u18a1\n\u00ea\5\u00ea\u18a3"+
		"\n\u00ea\3\u00ea\5\u00ea\u18a6\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u18b2\n\u00ea"+
		"\5\u00ea\u18b4\n\u00ea\5\u00ea\u18b6\n\u00ea\3\u00ea\5\u00ea\u18b9\n\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u18be\n\u00ea\3\u00ea\5\u00ea\u18c1\n"+
		"\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u18c6\n\u00ea\3\u00ea\3\u00ea\3"+
		"\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u18d0\n\u00ea\3"+
		"\u00ea\3\u00ea\5\u00ea\u18d4\n\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u18d9"+
		"\n\u00ea\3\u00ea\5\u00ea\u18dc\n\u00ea\5\u00ea\u18de\n\u00ea\3\u00ea\5"+
		"\u00ea\u18e1\n\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3"+
		"\u00ea\3\u00ea\3\u00ea\3\u00ea\5\u00ea\u18ed\n\u00ea\5\u00ea\u18ef\n\u00ea"+
		"\5\u00ea\u18f1\n\u00ea\3\u00ea\5\u00ea\u18f4\n\u00ea\3\u00ea\3\u00ea\3"+
		"\u00ea\3\u00ea\5\u00ea\u18fa\n\u00ea\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5"+
		"\u00eb\u1900\n\u00eb\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3"+
		"\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u190d\n\u00ec\3\u00ed\3"+
		"\u00ed\3\u00ed\5\u00ed\u1912\n\u00ed\3\u00ee\3\u00ee\3\u00ee\3\u00ef\3"+
		"\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f3"+
		"\3\u00f3\3\u00f3\3\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\5\u00f4\u192c\n\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\5\u00f4\u1932\n\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u193d\n\u00f4\3\u00f5\3\u00f5\3\u00f5"+
		"\3\u00f5\3\u00f5\3\u00f5\3\u00f5\5\u00f5\u1946\n\u00f5\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f8"+
		"\3\u00f8\5\u00f8\u1954\n\u00f8\3\u00f9\3\u00f9\3\u00f9\3\u00f9\3\u00f9"+
		"\3\u00f9\5\u00f9\u195c\n\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\5\u00fa\u1965\n\u00fa\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb"+
		"\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\3\u00fb\5\u00fb"+
		"\u197c\n\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fd\3\u00fd"+
		"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\5\u00fd\u1989\n\u00fd\3\u00fe\3\u00fe"+
		"\3\u00fe\5\u00fe\u198e\n\u00fe\3\u00fe\3\u00fe\3\u00fe\7\u00fe\u1993\n"+
		"\u00fe\f\u00fe\16\u00fe\u1996\13\u00fe\3\u00fe\3\u00fe\3\u00fe\7\u00fe"+
		"\u199b\n\u00fe\f\u00fe\16\u00fe\u199e\13\u00fe\5\u00fe\u19a0\n\u00fe\3"+
		"\u00ff\3\u00ff\3\u00ff\3\u00ff\3\u0100\3\u0100\3\u0100\5\u0100\u19a9\n"+
		"\u0100\3\u0100\3\u0100\3\u0100\3\u0100\3\u0101\3\u0101\3\u0101\5\u0101"+
		"\u19b2\n\u0101\3\u0101\3\u0101\3\u0101\7\u0101\u19b7\n\u0101\f\u0101\16"+
		"\u0101\u19ba\13\u0101\3\u0101\3\u0101\3\u0101\3\u0101\5\u0101\u19c0\n"+
		"\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3\u0103\3\u0103\3\u0103\5\u0103"+
		"\u19c9\n\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u19d0\n"+
		"\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103\3\u0103"+
		"\3\u0103\3\u0103\3\u0103\3\u0103\5\u0103\u19de\n\u0103\5\u0103\u19e0\n"+
		"\u0103\3\u0104\3\u0104\5\u0104\u19e4\n\u0104\3\u0105\3\u0105\3\u0105\3"+
		"\u0105\3\u0105\3\u0105\3\u0105\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\3\u0106\3\u0106\3\u0106\5\u0106\u19f5\n\u0106\3\u0106\3\u0106\5\u0106"+
		"\u19f9\n\u0106\3\u0106\3\u0106\3\u0106\3\u0107\3\u0107\3\u0107\5\u0107"+
		"\u1a01\n\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\7\u0107\u1a0c\n\u0107\f\u0107\16\u0107\u1a0f\13\u0107"+
		"\3\u0107\3\u0107\3\u0107\5\u0107\u1a14\n\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\3\u0107\3\u0107\5\u0107\u1a1c\n\u0107\3\u0107\3\u0107\3\u0107"+
		"\3\u0107\5\u0107\u1a22\n\u0107\3\u0108\3\u0108\5\u0108\u1a26\n\u0108\3"+
		"\u0108\3\u0108\3\u0108\3\u0108\5\u0108\u1a2c\n\u0108\3\u0108\5\u0108\u1a2f"+
		"\n\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108"+
		"\3\u0108\5\u0108\u1a3a\n\u0108\3\u0108\5\u0108\u1a3d\n\u0108\3\u0108\5"+
		"\u0108\u1a40\n\u0108\3\u0108\3\u0108\3\u0108\3\u0108\3\u0108\7\u0108\u1a47"+
		"\n\u0108\f\u0108\16\u0108\u1a4a\13\u0108\5\u0108\u1a4c\n\u0108\5\u0108"+
		"\u1a4e\n\u0108\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u1a55\n"+
		"\u0109\3\u0109\3\u0109\3\u0109\7\u0109\u1a5a\n\u0109\f\u0109\16\u0109"+
		"\u1a5d\13\u0109\5\u0109\u1a5f\n\u0109\3\u0109\5\u0109\u1a62\n\u0109\3"+
		"\u0109\3\u0109\3\u0109\7\u0109\u1a67\n\u0109\f\u0109\16\u0109\u1a6a\13"+
		"\u0109\3\u0109\3\u0109\5\u0109\u1a6e\n\u0109\3\u0109\6\u0109\u1a71\n\u0109"+
		"\r\u0109\16\u0109\u1a72\3\u0109\3\u0109\5\u0109\u1a77\n\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\5\u0109\u1a7d\n\u0109\6\u0109\u1a7f\n\u0109\r"+
		"\u0109\16\u0109\u1a80\5\u0109\u1a83\n\u0109\3\u0109\3\u0109\3\u0109\5"+
		"\u0109\u1a88\n\u0109\3\u0109\6\u0109\u1a8b\n\u0109\r\u0109\16\u0109\u1a8c"+
		"\6\u0109\u1a8f\n\u0109\r\u0109\16\u0109\u1a90\3\u0109\3\u0109\3\u0109"+
		"\5\u0109\u1a96\n\u0109\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u1a9c\n"+
		"\u0109\6\u0109\u1a9e\n\u0109\r\u0109\16\u0109\u1a9f\6\u0109\u1aa2\n\u0109"+
		"\r\u0109\16\u0109\u1aa3\5\u0109\u1aa6\n\u0109\3\u0109\3\u0109\5\u0109"+
		"\u1aaa\n\u0109\3\u0109\3\u0109\5\u0109\u1aae\n\u0109\3\u0109\3\u0109\5"+
		"\u0109\u1ab2\n\u0109\3\u0109\3\u0109\5\u0109\u1ab6\n\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\5\u0109\u1abc\n\u0109\3\u0109\5\u0109\u1abf\n\u0109\3"+
		"\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u1ac5\n\u0109\3\u0109\3\u0109\5"+
		"\u0109\u1ac9\n\u0109\3\u0109\3\u0109\5\u0109\u1acd\n\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\5\u0109\u1ad3\n\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\5\u0109\u1ad9\n\u0109\5\u0109\u1adb\n\u0109\3\u0109\5\u0109\u1ade\n\u0109"+
		"\3\u0109\3\u0109\5\u0109\u1ae2\n\u0109\3\u0109\3\u0109\5\u0109\u1ae6\n"+
		"\u0109\3\u0109\3\u0109\5\u0109\u1aea\n\u0109\3\u0109\3\u0109\3\u0109\3"+
		"\u0109\5\u0109\u1af0\n\u0109\3\u0109\5\u0109\u1af3\n\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\5\u0109\u1af9\n\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\5\u0109\u1aff\n\u0109\3\u0109\5\u0109\u1b02\n\u0109\3\u0109\3\u0109\3"+
		"\u0109\3\u0109\5\u0109\u1b08\n\u0109\3\u0109\5\u0109\u1b0b\n\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\5\u0109\u1b11\n\u0109\3\u0109\5\u0109\u1b14\n"+
		"\u0109\3\u0109\3\u0109\5\u0109\u1b18\n\u0109\3\u0109\3\u0109\5\u0109\u1b1c"+
		"\n\u0109\3\u0109\3\u0109\5\u0109\u1b20\n\u0109\3\u0109\3\u0109\3\u0109"+
		"\5\u0109\u1b25\n\u0109\3\u0109\5\u0109\u1b28\n\u0109\3\u0109\3\u0109\5"+
		"\u0109\u1b2c\n\u0109\3\u0109\3\u0109\5\u0109\u1b30\n\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109\3\u0109"+
		"\3\u0109\3\u0109\3\u0109\3\u0109\5\u0109\u1b41\n\u0109\7\u0109\u1b43\n"+
		"\u0109\f\u0109\16\u0109\u1b46\13\u0109\5\u0109\u1b48\n\u0109\3\u010a\3"+
		"\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1b4f\n\u010a\3\u010a\6\u010a\u1b52"+
		"\n\u010a\r\u010a\16\u010a\u1b53\3\u010a\3\u010a\5\u010a\u1b58\n\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1b5e\n\u010a\6\u010a\u1b60\n"+
		"\u010a\r\u010a\16\u010a\u1b61\5\u010a\u1b64\n\u010a\3\u010a\3\u010a\3"+
		"\u010a\5\u010a\u1b69\n\u010a\3\u010a\6\u010a\u1b6c\n\u010a\r\u010a\16"+
		"\u010a\u1b6d\6\u010a\u1b70\n\u010a\r\u010a\16\u010a\u1b71\3\u010a\3\u010a"+
		"\3\u010a\5\u010a\u1b77\n\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a"+
		"\u1b7d\n\u010a\6\u010a\u1b7f\n\u010a\r\u010a\16\u010a\u1b80\6\u010a\u1b83"+
		"\n\u010a\r\u010a\16\u010a\u1b84\5\u010a\u1b87\n\u010a\3\u010a\3\u010a"+
		"\5\u010a\u1b8b\n\u010a\3\u010a\3\u010a\5\u010a\u1b8f\n\u010a\3\u010a\3"+
		"\u010a\5\u010a\u1b93\n\u010a\3\u010a\3\u010a\5\u010a\u1b97\n\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\5\u010a\u1b9d\n\u010a\3\u010a\5\u010a\u1ba0\n"+
		"\u010a\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1ba6\n\u010a\3\u010a\3"+
		"\u010a\5\u010a\u1baa\n\u010a\3\u010a\3\u010a\5\u010a\u1bae\n\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\5\u010a\u1bb4\n\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\5\u010a\u1bba\n\u010a\5\u010a\u1bbc\n\u010a\3\u010a\5\u010a\u1bbf"+
		"\n\u010a\3\u010a\3\u010a\5\u010a\u1bc3\n\u010a\3\u010a\3\u010a\5\u010a"+
		"\u1bc7\n\u010a\3\u010a\3\u010a\5\u010a\u1bcb\n\u010a\3\u010a\3\u010a\3"+
		"\u010a\3\u010a\5\u010a\u1bd1\n\u010a\3\u010a\5\u010a\u1bd4\n\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\5\u010a\u1bda\n\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\5\u010a\u1be0\n\u010a\3\u010a\5\u010a\u1be3\n\u010a\3\u010a\3"+
		"\u010a\3\u010a\3\u010a\5\u010a\u1be9\n\u010a\3\u010a\5\u010a\u1bec\n\u010a"+
		"\3\u010a\3\u010a\3\u010a\3\u010a\5\u010a\u1bf2\n\u010a\3\u010a\5\u010a"+
		"\u1bf5\n\u010a\3\u010a\3\u010a\5\u010a\u1bf9\n\u010a\3\u010a\3\u010a\5"+
		"\u010a\u1bfd\n\u010a\3\u010a\3\u010a\5\u010a\u1c01\n\u010a\3\u010a\3\u010a"+
		"\3\u010a\5\u010a\u1c06\n\u010a\3\u010a\5\u010a\u1c09\n\u010a\3\u010a\3"+
		"\u010a\5\u010a\u1c0d\n\u010a\3\u010a\3\u010a\5\u010a\u1c11\n\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\5\u010a\u1c17\n\u010a\3\u010a\5\u010a\u1c1a\n"+
		"\u010a\3\u010a\3\u010a\5\u010a\u1c1e\n\u010a\3\u010a\3\u010a\3\u010a\3"+
		"\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a"+
		"\3\u010a\3\u010a\3\u010a\5\u010a\u1c2f\n\u010a\7\u010a\u1c31\n\u010a\f"+
		"\u010a\16\u010a\u1c34\13\u010a\5\u010a\u1c36\n\u010a\3\u010b\3\u010b\3"+
		"\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b"+
		"\3\u010b\5\u010b\u1c44\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b"+
		"\u1c4a\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b"+
		"\u1c52\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\6\u010b\u1c59\n"+
		"\u010b\r\u010b\16\u010b\u1c5a\3\u010b\5\u010b\u1c5e\n\u010b\3\u010c\3"+
		"\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c\3\u010c"+
		"\3\u010c\3\u010c\3\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d"+
		"\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010d\3\u010e"+
		"\3\u010e\3\u010e\5\u010e\u1c7e\n\u010e\3\u010f\3\u010f\3\u010f\3\u010f"+
		"\7\u010f\u1c84\n\u010f\f\u010f\16\u010f\u1c87\13\u010f\3\u010f\3\u010f"+
		"\3\u010f\3\u010f\3\u010f\5\u010f\u1c8e\n\u010f\5\u010f\u1c90\n\u010f\7"+
		"\u010f\u1c92\n\u010f\f\u010f\16\u010f\u1c95\13\u010f\3\u010f\3\u010f\3"+
		"\u010f\3\u010f\3\u010f\5\u010f\u1c9c\n\u010f\3\u010f\3\u010f\5\u010f\u1ca0"+
		"\n\u010f\3\u0110\3\u0110\3\u0111\3\u0111\5\u0111\u1ca6\n\u0111\3\u0111"+
		"\3\u0111\3\u0111\5\u0111\u1cab\n\u0111\3\u0111\5\u0111\u1cae\n\u0111\3"+
		"\u0111\3\u0111\3\u0111\7\u0111\u1cb3\n\u0111\f\u0111\16\u0111\u1cb6\13"+
		"\u0111\5\u0111\u1cb8\n\u0111\3\u0111\3\u0111\3\u0111\3\u0111\7\u0111\u1cbe"+
		"\n\u0111\f\u0111\16\u0111\u1cc1\13\u0111\5\u0111\u1cc3\n\u0111\3\u0112"+
		"\3\u0112\5\u0112\u1cc7\n\u0112\3\u0112\3\u0112\3\u0112\3\u0112\5\u0112"+
		"\u1ccd\n\u0112\5\u0112\u1ccf\n\u0112\3\u0113\3\u0113\3\u0113\3\u0113\5"+
		"\u0113\u1cd5\n\u0113\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\3\u0114\7"+
		"\u0114\u1cdd\n\u0114\f\u0114\16\u0114\u1ce0\13\u0114\3\u0114\3\u0114\5"+
		"\u0114\u1ce4\n\u0114\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3"+
		"\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1cf3\n"+
		"\u0115\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\5\u0116\u1cfe\n\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u1d03\n"+
		"\u0116\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\5\u0117\u1d0b\n"+
		"\u0117\5\u0117\u1d0d\n\u0117\3\u0117\3\u0117\5\u0117\u1d11\n\u0117\3\u0117"+
		"\5\u0117\u1d14\n\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117\3\u0117"+
		"\5\u0117\u1d1c\n\u0117\3\u0117\3\u0117\5\u0117\u1d20\n\u0117\3\u0118\3"+
		"\u0118\3\u0118\7\u0118\u1d25\n\u0118\f\u0118\16\u0118\u1d28\13\u0118\3"+
		"\u0119\3\u0119\3\u0119\7\u0119\u1d2d\n\u0119\f\u0119\16\u0119\u1d30\13"+
		"\u0119\3\u011a\3\u011a\3\u011a\3\u011b\3\u011b\3\u011b\3\u011b\7\u011b"+
		"\u1d39\n\u011b\f\u011b\16\u011b\u1d3c\13\u011b\3\u011b\3\u011b\3\u011c"+
		"\3\u011c\5\u011c\u1d42\n\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c\5\u011c\u1d58\n\u011c"+
		"\3\u011c\3\u011c\5\u011c\u1d5c\n\u011c\5\u011c\u1d5e\n\u011c\5\u011c\u1d60"+
		"\n\u011c\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1d67\n\u011d"+
		"\3\u011d\3\u011d\5\u011d\u1d6b\n\u011d\3\u011e\3\u011e\3\u011e\7\u011e"+
		"\u1d70\n\u011e\f\u011e\16\u011e\u1d73\13\u011e\3\u011f\3\u011f\3\u011f"+
		"\3\u011f\5\u011f\u1d79\n\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1d7e\n"+
		"\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\5\u011f\u1d86\n"+
		"\u011f\3\u0120\3\u0120\3\u0120\5\u0120\u1d8b\n\u0120\3\u0120\3\u0120\3"+
		"\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120\5\u0120"+
		"\u1d97\n\u0120\5\u0120\u1d99\n\u0120\3\u0121\3\u0121\3\u0121\3\u0121\3"+
		"\u0121\3\u0121\3\u0121\3\u0121\3\u0121\5\u0121\u1da4\n\u0121\3\u0122\3"+
		"\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u1dab\n\u0122\3\u0122\3\u0122\3"+
		"\u0122\3\u0122\3\u0122\3\u0122\7\u0122\u1db3\n\u0122\f\u0122\16\u0122"+
		"\u1db6\13\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124"+
		"\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u1dcc\n\u0124\3\u0125\3\u0125"+
		"\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125"+
		"\5\u0125\u1dd9\n\u0125\3\u0126\3\u0126\5\u0126\u1ddd\n\u0126\3\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\3\u0126\5\u0126\u1de5\n\u0126\3\u0126\3"+
		"\u0126\3\u0126\3\u0126\3\u0126\7\u0126\u1dec\n\u0126\f\u0126\16\u0126"+
		"\u1def\13\u0126\3\u0127\3\u0127\3\u0127\5\u0127\u1df4\n\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\5\u0127\u1dfe"+
		"\n\u0127\5\u0127\u1e00\n\u0127\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1e0e"+
		"\n\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1e13\n\u0128\3\u0128\3\u0128"+
		"\3\u0128\3\u0128\3\u0128\5\u0128\u1e1a\n\u0128\3\u0128\5\u0128\u1e1d\n"+
		"\u0128\6\u0128\u1e1f\n\u0128\r\u0128\16\u0128\u1e20\5\u0128\u1e23\n\u0128"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129"+
		"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129\u1e34\n\u0129"+
		"\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u1e43\n\u012b\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1e4b\n\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1e54\n\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1e5c\n\u012c\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\5\u012d\u1e62\n\u012d\3\u012d\3\u012d\3\u012d"+
		"\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d"+
		"\5\u012d\u1e70\n\u012d\3\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e"+
		"\u1e77\n\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1e7d\n\u012e\3"+
		"\u012e\3\u012e\3\u012e\5\u012e\u1e82\n\u012e\5\u012e\u1e84\n\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\5\u012e\u1e8a\n\u012e\3\u012e\3\u012e\3\u012e"+
		"\3\u012e\3\u012e\3\u012e\5\u012e\u1e92\n\u012e\5\u012e\u1e94\n\u012e\3"+
		"\u012e\3\u012e\5\u012e\u1e98\n\u012e\3\u012e\3\u012e\3\u012e\3\u012e\3"+
		"\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1ea2\n\u012e\3\u012e\3\u012e\5"+
		"\u012e\u1ea6\n\u012e\3\u012e\3\u012e\3\u012e\3\u012e\5\u012e\u1eac\n\u012e"+
		"\5\u012e\u1eae\n\u012e\3\u012f\3\u012f\3\u0130\3\u0130\3\u0130\3\u0131"+
		"\3\u0131\5\u0131\u1eb7\n\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132"+
		"\3\u0132\5\u0132\u1ebf\n\u0132\3\u0132\3\u0132\5\u0132\u1ec3\n\u0132\3"+
		"\u0133\3\u0133\3\u0133\3\u0133\3\u0134\3\u0134\5\u0134\u1ecb\n\u0134\3"+
		"\u0134\3\u0134\3\u0134\5\u0134\u1ed0\n\u0134\3\u0135\3\u0135\3\u0135\5"+
		"\u0135\u1ed5\n\u0135\3\u0135\3\u0135\3\u0135\3\u0136\3\u0136\3\u0136\3"+
		"\u0136\3\u0137\3\u0137\3\u0137\7\u0137\u1ee1\n\u0137\f\u0137\16\u0137"+
		"\u1ee4\13\u0137\3\u0138\3\u0138\3\u0138\3\u0138\5\u0138\u1eea\n\u0138"+
		"\3\u0138\7\u0138\u1eed\n\u0138\f\u0138\16\u0138\u1ef0\13\u0138\3\u0138"+
		"\3\u0138\3\u0138\5\u0138\u1ef5\n\u0138\3\u0138\3\u0138\5\u0138\u1ef9\n"+
		"\u0138\3\u0139\3\u0139\3\u0139\5\u0139\u1efe\n\u0139\3\u0139\5\u0139\u1f01"+
		"\n\u0139\3\u0139\3\u0139\3\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u1f09"+
		"\n\u013a\3\u013a\7\u013a\u1f0c\n\u013a\f\u013a\16\u013a\u1f0f\13\u013a"+
		"\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u1f17\n\u013b"+
		"\3\u013b\3\u013b\3\u013b\5\u013b\u1f1c\n\u013b\3\u013b\5\u013b\u1f1f\n"+
		"\u013b\3\u013b\3\u013b\5\u013b\u1f23\n\u013b\3\u013b\3\u013b\3\u013b\5"+
		"\u013b\u1f28\n\u013b\3\u013b\3\u013b\3\u013b\3\u013b\5\u013b\u1f2e\n\u013b"+
		"\5\u013b\u1f30\n\u013b\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c\3\u013c"+
		"\3\u013d\3\u013d\3\u013d\5\u013d\u1f3b\n\u013d\3\u013d\5\u013d\u1f3e\n"+
		"\u013d\3\u013d\5\u013d\u1f41\n\u013d\3\u013d\5\u013d\u1f44\n\u013d\3\u013d"+
		"\3\u013d\5\u013d\u1f48\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\5\u013d\u1f50\n\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d"+
		"\3\u013d\5\u013d\u1f58\n\u013d\3\u013d\5\u013d\u1f5b\n\u013d\3\u013d\5"+
		"\u013d\u1f5e\n\u013d\3\u013d\5\u013d\u1f61\n\u013d\5\u013d\u1f63\n\u013d"+
		"\3\u013e\3\u013e\5\u013e\u1f67\n\u013e\3\u013e\3\u013e\3\u013f\3\u013f"+
		"\3\u013f\5\u013f\u1f6e\n\u013f\3\u013f\5\u013f\u1f71\n\u013f\3\u013f\5"+
		"\u013f\u1f74\n\u013f\3\u013f\3\u013f\3\u013f\3\u013f\5\u013f\u1f7a\n\u013f"+
		"\3\u013f\3\u013f\5\u013f\u1f7e\n\u013f\3\u013f\3\u013f\5\u013f\u1f82\n"+
		"\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f\3\u013f"+
		"\3\u013f\3\u013f\3\u013f\5\u013f\u1f98\n\u013f\3\u013f\5\u013f\u1f9b\n"+
		"\u013f\3\u013f\5\u013f\u1f9e\n\u013f\3\u013f\5\u013f\u1fa1\n\u013f\5\u013f"+
		"\u1fa3\n\u013f\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140"+
		"\3\u0140\3\u0140\5\u0140\u1fae\n\u0140\3\u0141\3\u0141\3\u0141\3\u0141"+
		"\3\u0141\3\u0141\3\u0141\3\u0141\3\u0141\5\u0141\u1fb9\n\u0141\3\u0142"+
		"\3\u0142\3\u0142\3\u0142\3\u0142\7\u0142\u1fc0\n\u0142\f\u0142\16\u0142"+
		"\u1fc3\13\u0142\3\u0142\3\u0142\3\u0143\3\u0143\3\u0143\3\u0143\3\u0144"+
		"\3\u0144\3\u0144\5\u0144\u1fce\n\u0144\3\u0145\3\u0145\7\u0145\u1fd2\n"+
		"\u0145\f\u0145\16\u0145\u1fd5\13\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1fdf\n\u0145\5\u0145\u1fe1\n"+
		"\u0145\5\u0145\u1fe3\n\u0145\3\u0146\3\u0146\3\u0147\3\u0147\3\u0147\3"+
		"\u0147\3\u0147\3\u0147\5\u0147\u1fed\n\u0147\3\u0147\3\u0147\3\u0147\3"+
		"\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\5\u0147\u1ffc\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\5\u0147\u200a"+
		"\n\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\5\u0147\u2015\n\u0147\3\u0148\3\u0148\5\u0148\u2019\n\u0148\3"+
		"\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u202b"+
		"\n\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\5\u0149\u203a\n\u0149\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149"+
		"\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\3\u0149\7\u0149\u204c\n\u0149"+
		"\f\u0149\16\u0149\u204f\13\u0149\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a"+
		"\5\u014a\u2068\n\u014a\3\u014a\3\u014a\3\u014a\7\u014a\u206d\n\u014a\f"+
		"\u014a\16\u014a\u2070\13\u014a\3\u014b\3\u014b\3\u014b\3\u014b\3\u014b"+
		"\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c\3\u014c"+
		"\3\u014c\3\u014c\3\u014c\3\u014c\5\u014c\u2084\n\u014c\3\u014d\3\u014d"+
		"\3\u014d\6\u014d\u2089\n\u014d\r\u014d\16\u014d\u208a\3\u014d\3\u014d"+
		"\5\u014d\u208f\n\u014d\3\u014d\3\u014d\3\u014d\3\u014d\6\u014d\u2095\n"+
		"\u014d\r\u014d\16\u014d\u2096\3\u014d\3\u014d\5\u014d\u209b\n\u014d\3"+
		"\u014d\3\u014d\5\u014d\u209f\n\u014d\3\u014e\3\u014e\3\u014e\3\u014e\3"+
		"\u014e\3\u014e\3\u014e\3\u014e\5\u014e\u20a9\n\u014e\3\u014f\3\u014f\3"+
		"\u014f\5\u014f\u20ae\n\u014f\3\u014f\3\u014f\3\u014f\7\u014f\u20b3\n\u014f"+
		"\f\u014f\16\u014f\u20b6\13\u014f\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150"+
		"\5\u0150\u20bd\n\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0150\3\u0151"+
		"\3\u0151\5\u0151\u20c6\n\u0151\3\u0151\3\u0151\5\u0151\u20ca\n\u0151\3"+
		"\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\3\u0151\5\u0151"+
		"\u20d4\n\u0151\3\u0152\3\u0152\3\u0152\7\u0152\u20d9\n\u0152\f\u0152\16"+
		"\u0152\u20dc\13\u0152\3\u0153\3\u0153\3\u0153\7\u0153\u20e1\n\u0153\f"+
		"\u0153\16\u0153\u20e4\13\u0153\3\u0154\5\u0154\u20e7\n\u0154\3\u0154\3"+
		"\u0154\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\5\u0155\u20fd\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\3\u0155\5\u0155\u2106\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\5\u0155\u210c\n\u0155\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u2112\n"+
		"\u0155\3\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u2118\n\u0155\3\u0155\3"+
		"\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155\3\u0155"+
		"\3\u0155\5\u0155\u2125\n\u0155\3\u0155\5\u0155\u2128\n\u0155\3\u0156\3"+
		"\u0156\5\u0156\u212c\n\u0156\3\u0156\5\u0156\u212f\n\u0156\3\u0156\3\u0156"+
		"\3\u0156\5\u0156\u2134\n\u0156\3\u0156\3\u0156\3\u0156\3\u0156\7\u0156"+
		"\u213a\n\u0156\f\u0156\16\u0156\u213d\13\u0156\5\u0156\u213f\n\u0156\3"+
		"\u0156\3\u0156\5\u0156\u2143\n\u0156\3\u0156\3\u0156\3\u0156\5\u0156\u2148"+
		"\n\u0156\3\u0156\3\u0156\3\u0156\7\u0156\u214d\n\u0156\f\u0156\16\u0156"+
		"\u2150\13\u0156\5\u0156\u2152\n\u0156\3\u0156\3\u0156\5\u0156\u2156\n"+
		"\u0156\3\u0156\5\u0156\u2159\n\u0156\3\u0156\5\u0156\u215c\n\u0156\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u2164\n\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\5\u0157\u2176\n\u0157"+
		"\5\u0157\u2178\n\u0157\3\u0157\5\u0157\u217b\n\u0157\5\u0157\u217d\n\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\3\u0157\3\u0157\7\u0157\u219c\n\u0157\f\u0157\16\u0157\u219f\13\u0157"+
		"\3\u0158\3\u0158\5\u0158\u21a3\n\u0158\3\u0158\5\u0158\u21a6\n\u0158\3"+
		"\u0158\3\u0158\5\u0158\u21aa\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3"+
		"\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u21b4\n\u0158\3\u0158\3\u0158\5"+
		"\u0158\u21b8\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u21be\n\u0158"+
		"\3\u0158\3\u0158\5\u0158\u21c2\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158"+
		"\5\u0158\u21c8\n\u0158\5\u0158\u21ca\n\u0158\3\u0159\3\u0159\3\u0159\3"+
		"\u0159\5\u0159\u21d0\n\u0159\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3"+
		"\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a\u21de\n"+
		"\u015a\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b\7\u015b\u21e5\n\u015b\f"+
		"\u015b\16\u015b\u21e8\13\u015b\3\u015b\3\u015b\3\u015b\3\u015b\3\u015b"+
		"\3\u015b\3\u015b\3\u015b\3\u015b\5\u015b\u21f3\n\u015b\5\u015b\u21f5\n"+
		"\u015b\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\5\u015c\u21ff\n\u015c\3\u015c\5\u015c\u2202\n\u015c\3\u015c\7\u015c\u2205"+
		"\n\u015c\f\u015c\16\u015c\u2208\13\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\5\u015c\u2210\n\u015c\5\u015c\u2212\n\u015c\5\u015c\u2214"+
		"\n\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u2219\n\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\7\u015c\u221f\n\u015c\f\u015c\16\u015c\u2222\13\u015c"+
		"\3\u015c\3\u015c\5\u015c\u2226\n\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\3\u015c\3\u015c\5\u015c\u222e\n\u015c\3\u015c\7\u015c\u2231\n\u015c\f"+
		"\u015c\16\u015c\u2234\13\u015c\3\u015c\3\u015c\3\u015c\5\u015c\u2239\n"+
		"\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c\3\u015c"+
		"\5\u015c\u2243\n\u015c\5\u015c\u2245\n\u015c\3\u015c\3\u015c\3\u015c\3"+
		"\u015c\7\u015c\u224b\n\u015c\f\u015c\16\u015c\u224e\13\u015c\5\u015c\u2250"+
		"\n\u015c\3\u015d\3\u015d\3\u015d\3\u015e\3\u015e\5\u015e\u2257\n\u015e"+
		"\3\u015f\3\u015f\3\u015f\3\u015f\3\u015f\7\u015f\u225e\n\u015f\f\u015f"+
		"\16\u015f\u2261\13\u015f\3\u015f\3\u015f\3\u0160\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\7\u0160\u2280\n\u0160\f\u0160"+
		"\16\u0160\u2283\13\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160"+
		"\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160\3\u0160"+
		"\5\u0160\u2294\n\u0160\3\u0161\3\u0161\3\u0161\3\u0161\3\u0161\5\u0161"+
		"\u229b\n\u0161\5\u0161\u229d\n\u0161\3\u0162\3\u0162\3\u0162\7\u0162\u22a2"+
		"\n\u0162\f\u0162\16\u0162\u22a5\13\u0162\3\u0163\3\u0163\3\u0163\5\u0163"+
		"\u22aa\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5\u0163"+
		"\u22b2\n\u0163\3\u0163\5\u0163\u22b5\n\u0163\3\u0163\5\u0163\u22b8\n\u0163"+
		"\5\u0163\u22ba\n\u0163\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\5\u0164\u22c3\n\u0164\3\u0164\3\u0164\3\u0164\3\u0164\3\u0164"+
		"\3\u0164\5\u0164\u22cb\n\u0164\3\u0165\3\u0165\3\u0165\7\u0165\u22d0\n"+
		"\u0165\f\u0165\16\u0165\u22d3\13\u0165\3\u0166\3\u0166\3\u0166\5\u0166"+
		"\u22d8\n\u0166\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167"+
		"\3\u0167\3\u0167\3\u0167\3\u0167\3\u0167\5\u0167\u22e6\n\u0167\3\u0167"+
		"\3\u0167\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\3\u0169\3\u0169\3\u0169\7\u0169\u22f5\n\u0169\f\u0169\16\u0169\u22f8"+
		"\13\u0169\3\u016a\3\u016a\5\u016a\u22fc\n\u016a\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016b\3\u016b\3\u016b\3\u016b\7\u016b\u230e\n\u016b\f\u016b\16\u016b"+
		"\u2311\13\u016b\3\u016b\5\u016b\u2314\n\u016b\3\u016b\3\u016b\5\u016b"+
		"\u2318\n\u016b\3\u016c\3\u016c\3\u016c\3\u016c\3\u016d\3\u016d\3\u016d"+
		"\3\u016d\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u2327\n\u016e"+
		"\5\u016e\u2329\n\u016e\3\u016e\3\u016e\5\u016e\u232d\n\u016e\3\u016e\3"+
		"\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u233d\n\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u2348"+
		"\n\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u2358\n\u016e"+
		"\3\u016e\3\u016e\5\u016e\u235c\n\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\5\u016e\u237d\n\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\5\u016e\u2385\n\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u238b\n"+
		"\u016e\7\u016e\u238d\n\u016e\f\u016e\16\u016e\u2390\13\u016e\3\u016e\3"+
		"\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u23a3"+
		"\n\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\3\u016e\3\u016e\5\u016e\u23ba\n\u016e\3\u016e\3\u016e"+
		"\3\u016e\3\u016e\5\u016e\u23c0\n\u016e\3\u016f\3\u016f\3\u016f\3\u016f"+
		"\3\u016f\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0171\5\u0171\u23cd"+
		"\n\u0171\3\u0171\3\u0171\5\u0171\u23d1\n\u0171\3\u0172\5\u0172\u23d4\n"+
		"\u0172\3\u0172\3\u0172\3\u0172\5\u0172\u23d9\n\u0172\3\u0172\7\u0172\u23dc"+
		"\n\u0172\f\u0172\16\u0172\u23df\13\u0172\3\u0172\3\u0172\3\u0173\3\u0173"+
		"\3\u0173\3\u0173\5\u0173\u23e7\n\u0173\3\u0173\7\u0173\u23ea\n\u0173\f"+
		"\u0173\16\u0173\u23ed\13\u0173\3\u0173\3\u0173\3\u0174\5\u0174\u23f2\n"+
		"\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\7\u0174\u23f9\n\u0174\f"+
		"\u0174\16\u0174\u23fc\13\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174"+
		"\7\u0174\u2403\n\u0174\f\u0174\16\u0174\u2406\13\u0174\5\u0174\u2408\n"+
		"\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174\3\u0174"+
		"\3\u0174\3\u0174\7\u0174\u2414\n\u0174\f\u0174\16\u0174\u2417\13\u0174"+
		"\3\u0174\3\u0174\3\u0174\5\u0174\u241c\n\u0174\3\u0174\3\u0174\3\u0174"+
		"\3\u0174\3\u0174\3\u0174\5\u0174\u2424\n\u0174\3\u0175\3\u0175\5\u0175"+
		"\u2428\n\u0175\3\u0176\3\u0176\3\u0176\3\u0176\7\u0176\u242e\n\u0176\f"+
		"\u0176\16\u0176\u2431\13\u0176\3\u0176\3\u0176\3\u0177\3\u0177\5\u0177"+
		"\u2437\n\u0177\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3\u0178"+
		"\3\u0178\3\u0178\7\u0178\u2442\n\u0178\f\u0178\16\u0178\u2445\13\u0178"+
		"\3\u0179\3\u0179\3\u0179\7\u0179\u244a\n\u0179\f\u0179\16\u0179\u244d"+
		"\13\u0179\3\u017a\3\u017a\3\u017a\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\5\u017b\u2457\n\u017b\3\u017b\5\u017b\u245a\n\u017b\3\u017b\5\u017b\u245d"+
		"\n\u017b\3\u017b\3\u017b\3\u017c\3\u017c\3\u017c\3\u017d\3\u017d\3\u017d"+
		"\3\u017d\3\u017d\3\u017d\5\u017d\u246a\n\u017d\3\u017e\3\u017e\5\u017e"+
		"\u246e\n\u017e\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\3\u017f\5\u017f"+
		"\u2476\n\u017f\3\u0180\3\u0180\3\u0180\3\u0180\5\u0180\u247c\n\u0180\3"+
		"\u0181\3\u0181\3\u0181\3\u0181\7\u0181\u2482\n\u0181\f\u0181\16\u0181"+
		"\u2485\13\u0181\3\u0181\3\u0181\3\u0181\3\u0181\5\u0181\u248b\n\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\5\u0181\u2491\n\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181\3\u0181"+
		"\3\u0181\5\u0181\u24a8\n\u0181\3\u0182\3\u0182\3\u0182\3\u0182\3\u0182"+
		"\3\u0182\3\u0182\5\u0182\u24b1\n\u0182\3\u0182\3\u0182\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\7\u0183\u24ba\n\u0183\f\u0183\16\u0183\u24bd"+
		"\13\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u24c2\n\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\7\u0183\u24ca\n\u0183\f\u0183\16\u0183"+
		"\u24cd\13\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u24d3\n\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u24dc"+
		"\n\u0183\3\u0183\5\u0183\u24df\n\u0183\3\u0183\3\u0183\3\u0183\3\u0183"+
		"\3\u0183\3\u0183\3\u0183\3\u0183\5\u0183\u24e9\n\u0183\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\3\u0184\5\u0184\u24f0\n\u0184\3\u0184\3\u0184\3\u0184"+
		"\3\u0184\3\u0184\5\u0184\u24f7\n\u0184\5\u0184\u24f9\n\u0184\3\u0184\3"+
		"\u0184\3\u0184\3\u0184\5\u0184\u24ff\n\u0184\3\u0184\3\u0184\3\u0184\3"+
		"\u0184\5\u0184\u2505\n\u0184\3\u0184\3\u0184\3\u0184\3\u0184\3\u0184\5"+
		"\u0184\u250c\n\u0184\5\u0184\u250e\n\u0184\3\u0184\3\u0184\3\u0184\3\u0184"+
		"\5\u0184\u2514\n\u0184\3\u0184\3\u0184\5\u0184\u2518\n\u0184\3\u0184\3"+
		"\u0184\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185\3\u0185"+
		"\3\u0185\3\u0185\5\u0185\u2526\n\u0185\3\u0186\3\u0186\5\u0186\u252a\n"+
		"\u0186\3\u0187\3\u0187\3\u0187\3\u0187\5\u0187\u2530\n\u0187\3\u0187\5"+
		"\u0187\u2533\n\u0187\3\u0187\3\u0187\5\u0187\u2537\n\u0187\3\u0187\3\u0187"+
		"\3\u0187\7\u0187\u253c\n\u0187\f\u0187\16\u0187\u253f\13\u0187\3\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u2546\n\u0188\3\u0188\5\u0188"+
		"\u2549\n\u0188\3\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u254f\n\u0188\3"+
		"\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u2555\n\u0188\5\u0188\u2557\n\u0188"+
		"\3\u0188\3\u0188\3\u0188\3\u0188\5\u0188\u255d\n\u0188\3\u0188\5\u0188"+
		"\u2560\n\u0188\5\u0188\u2562\n\u0188\3\u0188\3\u0188\3\u0188\3\u0188\5"+
		"\u0188\u2568\n\u0188\5\u0188\u256a\n\u0188\3\u0188\3\u0188\3\u0189\3\u0189"+
		"\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189"+
		"\u2578\n\u0189\3\u0189\3\u0189\3\u0189\3\u0189\3\u0189\5\u0189\u257f\n"+
		"\u0189\3\u0189\3\u0189\3\u018a\3\u018a\3\u018a\5\u018a\u2586\n\u018a\3"+
		"\u018a\3\u018a\3\u018b\3\u018b\3\u018b\7\u018b\u258d\n\u018b\f\u018b\16"+
		"\u018b\u2590\13\u018b\3\u018c\3\u018c\5\u018c\u2594\n\u018c\3\u018d\3"+
		"\u018d\3\u018e\3\u018e\3\u018e\7\u018e\u259b\n\u018e\f\u018e\16\u018e"+
		"\u259e\13\u018e\3\u018f\3\u018f\5\u018f\u25a2\n\u018f\3\u0190\3\u0190"+
		"\3\u0191\3\u0191\3\u0192\5\u0192\u25a9\n\u0192\3\u0192\3\u0192\3\u0193"+
		"\3\u0193\3\u0193\5\u0193\u25b0\n\u0193\3\u0194\3\u0194\3\u0194\3\u0194"+
		"\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0194\3\u0195\3\u0195\3\u0195"+
		"\5\u0195\u25bf\n\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\5\u0195\u25ca\n\u0195\3\u0195\3\u0195\3\u0195"+
		"\3\u0195\3\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u25d4\n\u0195\5\u0195"+
		"\u25d6\n\u0195\3\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u25dc\n\u0195\5"+
		"\u0195\u25de\n\u0195\3\u0195\3\u0195\3\u0195\5\u0195\u25e3\n\u0195\5\u0195"+
		"\u25e5\n\u0195\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0196\3\u0197"+
		"\3\u0197\5\u0197\u25ef\n\u0197\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198"+
		"\3\u0198\3\u0198\3\u0198\3\u0198\3\u0198\5\u0198\u25fb\n\u0198\3\u0198"+
		"\5\u0198\u25fe\n\u0198\5\u0198\u2600\n\u0198\3\u0199\5\u0199\u2603\n\u0199"+
		"\3\u0199\3\u0199\3\u0199\3\u0199\5\u0199\u2609\n\u0199\3\u0199\3\u0199"+
		"\5\u0199\u260d\n\u0199\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a\3\u019a"+
		"\3\u019a\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b\3\u019b"+
		"\3\u019b\3\u019b\3\u019b\5\u019b\u2621\n\u019b\3\u019c\3\u019c\5\u019c"+
		"\u2625\n\u019c\3\u019c\3\u019c\3\u019c\3\u019c\3\u019c\5\u019c\u262c\n"+
		"\u019c\3\u019c\3\u019c\3\u019c\5\u019c\u2631\n\u019c\3\u019c\5\u019c\u2634"+
		"\n\u019c\3\u019c\3\u019c\5\u019c\u2638\n\u019c\5\u019c\u263a\n\u019c\3"+
		"\u019d\3\u019d\3\u019d\5\u019d\u263f\n\u019d\3\u019d\3\u019d\5\u019d\u2643"+
		"\n\u019d\3\u019d\3\u019d\3\u019e\3\u019e\3\u019e\5\u019e\u264a\n\u019e"+
		"\3\u019f\3\u019f\3\u019f\3\u019f\5\u019f\u2650\n\u019f\3\u019f\3\u019f"+
		"\3\u019f\3\u019f\3\u019f\5\u019f\u2657\n\u019f\3\u01a0\5\u01a0\u265a\n"+
		"\u01a0\3\u01a0\3\u01a0\3\u01a1\3\u01a1\3\u01a2\3\u01a2\3\u01a2\5\u01a2"+
		"\u2663\n\u01a2\3\u01a3\3\u01a3\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4\3\u01a4"+
		"\3\u01a4\5\u01a4\u2676\n\u01a4\3\u01a5\3\u01a5\3\u01a6\3\u01a6\5\u01a6"+
		"\u267c\n\u01a6\3\u01a6\3\u08ac\6\u0146\u0290\u0292\u02ac\u01a7\2\4\6\b"+
		"\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVX"+
		"Z\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090"+
		"\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8"+
		"\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0"+
		"\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8"+
		"\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0"+
		"\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108"+
		"\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120"+
		"\u0122\u0124\u0126\u0128\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138"+
		"\u013a\u013c\u013e\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150"+
		"\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168"+
		"\u016a\u016c\u016e\u0170\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180"+
		"\u0182\u0184\u0186\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198"+
		"\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0"+
		"\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8"+
		"\u01ca\u01cc\u01ce\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0"+
		"\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8"+
		"\u01fa\u01fc\u01fe\u0200\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210"+
		"\u0212\u0214\u0216\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228"+
		"\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240"+
		"\u0242\u0244\u0246\u0248\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258"+
		"\u025a\u025c\u025e\u0260\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270"+
		"\u0272\u0274\u0276\u0278\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288"+
		"\u028a\u028c\u028e\u0290\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0"+
		"\u02a2\u02a4\u02a6\u02a8\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8"+
		"\u02ba\u02bc\u02be\u02c0\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0"+
		"\u02d2\u02d4\u02d6\u02d8\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8"+
		"\u02ea\u02ec\u02ee\u02f0\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300"+
		"\u0302\u0304\u0306\u0308\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318"+
		"\u031a\u031c\u031e\u0320\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330"+
		"\u0332\u0334\u0336\u0338\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348"+
		"\u034a\2\u008a\3\2\u0319\u031a\4\2\u0319\u0319\u031c\u031c\4\2\u0141\u0141"+
		"\u02df\u02df\4\2\u0319\u031a\u031c\u031c\5\2\u01c0\u01c0\u0211\u0211\u02aa"+
		"\u02aa\5\2\u0316\u0316\u0319\u0319\u031c\u031c\4\2jjll\5\2\u0168\u0168"+
		"\u028b\u028b\u02f8\u02f8\4\2\u013c\u013c\u0159\u0159\3\2\u0286\u028a\4"+
		"\2\u012d\u012d\u021d\u021d\6\2{{\u020a\u020a\u0295\u0295\u0297\u0297\4"+
		"\2\u00e5\u00e5\u02d3\u02d3\4\2\u00f3\u00f3\u01c4\u01c4\4\2\4\4\u025b\u025b"+
		"\5\2\4\4\u0204\u0204\u0259\u0259\4\2\u031c\u031c\u0320\u0320\4\2\7\7\u031c"+
		"\u031c\4\2..\u031a\u031a\4\2\3\3\66\66\4\2\u0159\u0159\u01c6\u01c6\4\2"+
		"\u020f\u020f\u02a9\u02a9\4\2\u014d\u014d\u0156\u0156\4\2\u0160\u0160\u02ac"+
		"\u02ac\4\2\u02c2\u02c2\u02cb\u02cb\4\2\u01a6\u01a6";
	private static final String _serializedATNSegment1 =
		"\u01dc\u01dc\4\2\u00d5\u00d6\u0201\u0201\5\2\u020a\u020a\u022e\u022e\u0230"+
		"\u0230\4\2\6\6ss\4\2\u031a\u031a\u031c\u031c\4\2\3\3\u0099\u0099\4\2\u01b4"+
		"\u01b4\u0306\u0306\4\2\u0080\u0080\u0251\u0251\4\2\u031a\u031a\u031c\u031d"+
		"\4\2\u01f5\u01f5\u02f7\u02f7\4\2^^\u008c\u008c\4\2bb\u02bb\u02bb\4\2\u0084"+
		"\u0084\u014d\u014d\4\2\u00fc\u00fc\u0179\u0179\4\2WW\u00ad\u00ad\4\2/"+
		"/\u00ad\u00ad\4\2\3\3\5\5\5\2\u0185\u0185\u01dc\u01dc\u02da\u02da\4\2"+
		"\u02f6\u02f6\u031a\u031a\5\2  \u009b\u009b\u0169\u0169\4\2..\u031c\u031c"+
		"\4\2\u01bc\u01bc\u031c\u031c\5\2\u0185\u0185\u01a6\u01a6\u01dc\u01dc\4"+
		"\2\u01fa\u01fa\u0218\u0218\4\2\u01fc\u01fc\u0219\u0219\7\2\u00cb\u00cd"+
		"\u0144\u0144\u0146\u0146\u0254\u0256\u02e8\u02e9\4\2DDHH\5\2\u018f\u018f"+
		"\u01c3\u01c3\u01df\u01df\5\2\7\7\u019e\u019e\u02d9\u02d9\5\2<<XX\u00aa"+
		"\u00aa\4\2\4\4\63\63\4\2\u020a\u020a\u0227\u0227\4\2\u00cb\u00cd\u02e8"+
		"\u02e8\5\2jj\u00ef\u00ef\u01c4\u01c4\5\2II\u00ad\u00ad\u019b\u019b\5\2"+
		"\u022d\u022d\u027a\u027a\u02cb\u02cb\3\2}~\3\2\u0221\u0222\4\2ww\u0285"+
		"\u0285\5\2\u0159\u0159\u028f\u028f\u0301\u0301\5\2\u009f\u009f\u00ef\u00ef"+
		"\u014d\u014d\5\2\u0139\u0139\u0191\u0191\u01ec\u01ec\4\2\u0187\u0187\u01bc"+
		"\u01bc\5\2\4\4\u031c\u031c\u0320\u0321\5\2\u01a9\u01a9\u01f8\u01f8\u0212"+
		"\u0212\5\2\u014e\u014e\u0271\u0271\u02d0\u02d0\4\2\u014e\u014e\u0157\u0157"+
		"\5\2\4\4\u022a\u022a\u0309\u0309\4\2IIjj\5\2\u0153\u0153\u0216\u0216\u021b"+
		"\u021b\4\2\u0259\u0259\u025b\u025b\5\2\u01f4\u01f4\u0278\u0278\u02b1\u02b1"+
		"\5\2\u00d8\u00d8\u014e\u014e\u017f\u017f\4\2\u017f\u017f\u02b0\u02b0\5"+
		"\2II\u0103\u0103\u02b0\u02b0\5\2\u0114\u0114\u020a\u020a\u02e2\u02e2\4"+
		"\2\u01ec\u01ec\u0298\u0298\5\2\26\26,,mm\4\2\u01a0\u01a0\u029f\u029f\4"+
		"\2\u00c5\u00c5\u0266\u0266\4\2BB\u0173\u0173\5\2\62\62\u02d7\u02d7\u02f9"+
		"\u02f9\4\2\u011c\u011c\u0200\u0200\4\2\u019d\u019d\u0208\u0208\4\2\u020e"+
		"\u020e\u02b4\u02b4\4\2\u0181\u0181\u0207\u0207\4\2\u0114\u0114\u01ff\u01ff"+
		"\4\2\u0124\u0124\u02ca\u02ca\4\2\u020d\u020d\u027e\u027e\4\2aa\u0210\u0210"+
		"\4\2\u00b0\u00b0\u01c1\u01c1\4\2\u0215\u0215\u02f0\u02f0\4\2HH\u00a3\u00a3"+
		"\4\2\u009f\u009f\u00b3\u00b3\4\2BB\u031d\u031d\4\2\u0165\u0165\u02c1\u02c1"+
		"\3\2\u00a5\u00a6\6\2\u0106\u0106\u0223\u0223\u029e\u029e\u031c\u031c\4"+
		"\2\u0122\u0122\u014f\u014f\r\2\u0151\u0151\u0170\u0170\u0182\u0182\u0187"+
		"\u0187\u01ae\u01ae\u01bc\u01bc\u021f\u021f\u0259\u0259\u0292\u0293\u02c6"+
		"\u02c6\u02ef\u02ef\6\2\u01a2\u01a2\u0246\u0246\u02df\u02df\u030c\u030c"+
		"\3\2\u033b\u033d\3\2\u0338\u033a\4\2\u033b\u033c\u033e\u0340\4\2\u031a"+
		"\u031a\u031e\u031e\5\2\4\4\7\7\u009c\u009c\5\2II^^\u008c\u008c\6\2bb\u018b"+
		"\u018b\u01c2\u01c2\u0268\u0268\3\2\u031e\u031f\4\2\u0283\u0283\u0285\u0285"+
		"\4\2\u017a\u017a\u01fe\u01fe\4\2\u00c4\u00c4\u0311\u0311\4\2\u00ef\u00ef"+
		"\u022c\u022c\5\2\u00f9\u00f9\u0281\u0281\u02f0\u02f0\4\2tt\u018b\u018b"+
		"\5\2bb\u011e\u011e\u018b\u018b\5\2bb\u018b\u018b\u01c2\u01c2\4\2gg\u0319"+
		"\u031a\4\2\u0252\u0252\u0285\u0285\5\2IIjj\u0259\u0259\4\2\u0178\u0178"+
		"\u01e1\u01e1\4\2\t\t\61\61\4\2\27\27ee\3\2\u0264\u0265\4\2\u0110\u0111"+
		"\u01f7\u01f7\3\2\u0110\u0111\4\2\u031a\u031a\u031e\u031f\3\2\u033b\u033c"+
		"\6\2CCzz\u00c4\u0311\u031b\u031b\3\2\u0328\u032f\7\2\u0185\u0185\u01a6"+
		"\u01a6\u01dc\u01dc\u02da\u02da\u033a\u033a\2\u2d03\2\u034d\3\2\2\2\4\u035d"+
		"\3\2\2\2\6\u0369\3\2\2\2\b\u0384\3\2\2\2\n\u0396\3\2\2\2\f\u039b\3\2\2"+
		"\2\16\u03af\3\2\2\2\20\u03b6\3\2\2\2\22\u03bf\3\2\2\2\24\u03c1\3\2\2\2"+
		"\26\u03f5\3\2\2\2\30\u042d\3\2\2\2\32\u0440\3\2\2\2\34\u044d\3\2\2\2\36"+
		"\u044f\3\2\2\2 \u0453\3\2\2\2\"\u0455\3\2\2\2$\u045c\3\2\2\2&\u045e\3"+
		"\2\2\2(\u0462\3\2\2\2*\u046c\3\2\2\2,\u0475\3\2\2\2.\u0477\3\2\2\2\60"+
		"\u0479\3\2\2\2\62\u048b\3\2\2\2\64\u0491\3\2\2\2\66\u0495\3\2\2\28\u04be"+
		"\3\2\2\2:\u04ca\3\2\2\2<\u04cc\3\2\2\2>\u04e4\3\2\2\2@\u04f0\3\2\2\2B"+
		"\u0500\3\2\2\2D\u0508\3\2\2\2F\u050a\3\2\2\2H\u0548\3\2\2\2J\u054a\3\2"+
		"\2\2L\u055f\3\2\2\2N\u0561\3\2\2\2P\u0573\3\2\2\2R\u057c\3\2\2\2T\u0587"+
		"\3\2\2\2V\u058d\3\2\2\2X\u05b8\3\2\2\2Z\u05c0\3\2\2\2\\\u05cf\3\2\2\2"+
		"^\u05f4\3\2\2\2`\u05f6\3\2\2\2b\u0751\3\2\2\2d\u075c\3\2\2\2f\u075e\3"+
		"\2\2\2h\u078d\3\2\2\2j\u07b8\3\2\2\2l\u07ce\3\2\2\2n\u0843\3\2\2\2p\u0851"+
		"\3\2\2\2r\u0862\3\2\2\2t\u0869\3\2\2\2v\u086c\3\2\2\2x\u0871\3\2\2\2z"+
		"\u0886\3\2\2\2|\u088e\3\2\2\2~\u089b\3\2\2\2\u0080\u08a3\3\2\2\2\u0082"+
		"\u08ae\3\2\2\2\u0084\u08c6\3\2\2\2\u0086\u08d5\3\2\2\2\u0088\u08e1\3\2"+
		"\2\2\u008a\u08f3\3\2\2\2\u008c\u08ff\3\2\2\2\u008e\u0907\3\2\2\2\u0090"+
		"\u0924\3\2\2\2\u0092\u0976\3\2\2\2\u0094\u097b\3\2\2\2\u0096\u09a6\3\2"+
		"\2\2\u0098\u09a8\3\2\2\2\u009a\u09b4\3\2\2\2\u009c\u0a06\3\2\2\2\u009e"+
		"\u0a0f\3\2\2\2\u00a0\u0a47\3\2\2\2\u00a2\u0a76\3\2\2\2\u00a4\u0a78\3\2"+
		"\2\2\u00a6\u0aa0\3\2\2\2\u00a8\u0ad1\3\2\2\2\u00aa\u0b13\3\2\2\2\u00ac"+
		"\u0b55\3\2\2\2\u00ae\u0b67\3\2\2\2\u00b0\u0b6b\3\2\2\2\u00b2\u0b7a\3\2"+
		"\2\2\u00b4\u0b95\3\2\2\2\u00b6\u0ba7\3\2\2\2\u00b8\u0bbb\3\2\2\2\u00ba"+
		"\u0c02\3\2\2\2\u00bc\u0c60\3\2\2\2\u00be\u0c79\3\2\2\2\u00c0\u0c92\3\2"+
		"\2\2\u00c2\u0c9a\3\2\2\2\u00c4\u0ca9\3\2\2\2\u00c6\u0cc3\3\2\2\2\u00c8"+
		"\u0cce\3\2\2\2\u00ca\u0ce3\3\2\2\2\u00cc\u0ceb\3\2\2\2\u00ce\u0cfb\3\2"+
		"\2\2\u00d0\u0d10\3\2\2\2\u00d2\u0d7b\3\2\2\2\u00d4\u0d91\3\2\2\2\u00d6"+
		"\u0db9\3\2\2\2\u00d8\u0dc4\3\2\2\2\u00da\u0dca\3\2\2\2\u00dc\u0df5\3\2"+
		"\2\2\u00de\u0dfa\3\2\2\2\u00e0\u0e0f\3\2\2\2\u00e2\u0e15\3\2\2\2\u00e4"+
		"\u0e26\3\2\2\2\u00e6\u0e41\3\2\2\2\u00e8\u0e43\3\2\2\2\u00ea\u0e7d\3\2"+
		"\2\2\u00ec\u0eb2\3\2\2\2\u00ee\u0eb8\3\2\2\2\u00f0\u0eba\3\2\2\2\u00f2"+
		"\u0ec7\3\2\2\2\u00f4\u0eef\3\2\2\2\u00f6\u0ef1\3\2\2\2\u00f8\u0f79\3\2"+
		"\2\2\u00fa\u1007\3\2\2\2\u00fc\u1023\3\2\2\2\u00fe\u103f\3\2\2\2\u0100"+
		"\u10ad\3\2\2\2\u0102\u10b9\3\2\2\2\u0104\u10c0\3\2\2\2\u0106\u10c7\3\2"+
		"\2\2\u0108\u10d8\3\2\2\2\u010a\u10ee\3\2\2\2\u010c\u10ff\3\2\2\2\u010e"+
		"\u1112\3\2\2\2\u0110\u1141\3\2\2\2\u0112\u1146\3\2\2\2\u0114\u117f\3\2"+
		"\2\2\u0116\u11a2\3\2\2\2\u0118\u11b7\3\2\2\2\u011a\u11b9\3\2\2\2\u011c"+
		"\u11e1\3\2\2\2\u011e\u1212\3\2\2\2\u0120\u121e\3\2\2\2\u0122\u122a\3\2"+
		"\2\2\u0124\u1237\3\2\2\2\u0126\u127a\3\2\2\2\u0128\u1295\3\2\2\2\u012a"+
		"\u1297\3\2\2\2\u012c\u129b\3\2\2\2\u012e\u12b9\3\2\2\2\u0130\u12bb\3\2"+
		"\2\2\u0132\u12cf\3\2\2\2\u0134\u1332\3\2\2\2\u0136\u1334\3\2\2\2\u0138"+
		"\u1341\3\2\2\2\u013a\u1377\3\2\2\2\u013c\u13a3\3\2\2\2\u013e\u13ab\3\2"+
		"\2\2\u0140\u13d3\3\2\2\2\u0142\u13d6\3\2\2\2\u0144\u13e0\3\2\2\2\u0146"+
		"\u13ef\3\2\2\2\u0148\u1404\3\2\2\2\u014a\u1406\3\2\2\2\u014c\u140a\3\2"+
		"\2\2\u014e\u140d\3\2\2\2\u0150\u144d\3\2\2\2\u0152\u1463\3\2\2\2\u0154"+
		"\u1471\3\2\2\2\u0156\u1473\3\2\2\2\u0158\u14a3\3\2\2\2\u015a\u14b4\3\2"+
		"\2\2\u015c\u14c2\3\2\2\2\u015e\u14c7\3\2\2\2\u0160\u1510\3\2\2\2\u0162"+
		"\u1512\3\2\2\2\u0164\u1516\3\2\2\2\u0166\u1527\3\2\2\2\u0168\u1532\3\2"+
		"\2\2\u016a\u153f\3\2\2\2\u016c\u1562\3\2\2\2\u016e\u1582\3\2\2\2\u0170"+
		"\u1584\3\2\2\2\u0172\u159c\3\2\2\2\u0174\u15a1\3\2\2\2\u0176\u15a5\3\2"+
		"\2\2\u0178\u15ad\3\2\2\2\u017a\u15c1\3\2\2\2\u017c\u15c4\3\2\2\2\u017e"+
		"\u15d4\3\2\2\2\u0180\u15e5\3\2\2\2\u0182\u15f0\3\2\2\2\u0184\u15fe\3\2"+
		"\2\2\u0186\u1602\3\2\2\2\u0188\u1607\3\2\2\2\u018a\u160a\3\2\2\2\u018c"+
		"\u1636\3\2\2\2\u018e\u1638\3\2\2\2\u0190\u1663\3\2\2\2\u0192\u1667\3\2"+
		"\2\2\u0194\u166c\3\2\2\2\u0196\u1672\3\2\2\2\u0198\u1674\3\2\2\2\u019a"+
		"\u16a2\3\2\2\2\u019c\u16b5\3\2\2\2\u019e\u16b7\3\2\2\2\u01a0\u16bd\3\2"+
		"\2\2\u01a2\u16cc\3\2\2\2\u01a4\u16d1\3\2\2\2\u01a6\u16df\3\2\2\2\u01a8"+
		"\u16e1\3\2\2\2\u01aa\u16f3\3\2\2\2\u01ac\u1731\3\2\2\2\u01ae\u1733\3\2"+
		"\2\2\u01b0\u1755\3\2\2\2\u01b2\u1759\3\2\2\2\u01b4\u175b\3\2\2\2\u01b6"+
		"\u1771\3\2\2\2\u01b8\u1789\3\2\2\2\u01ba\u178d\3\2\2\2\u01bc\u178f\3\2"+
		"\2\2\u01be\u17dc\3\2\2\2\u01c0\u17ea\3\2\2\2\u01c2\u17fe\3\2\2\2\u01c4"+
		"\u1813\3\2\2\2\u01c6\u1839\3\2\2\2\u01c8\u1849\3\2\2\2\u01ca\u184b\3\2"+
		"\2\2\u01cc\u1864\3\2\2\2\u01ce\u1866\3\2\2\2\u01d0\u186e\3\2\2\2\u01d2"+
		"\u1870\3\2\2\2\u01d4\u18ff\3\2\2\2\u01d6\u190c\3\2\2\2\u01d8\u1911\3\2"+
		"\2\2\u01da\u1913\3\2\2\2\u01dc\u1916\3\2\2\2\u01de\u1919\3\2\2\2\u01e0"+
		"\u191b\3\2\2\2\u01e2\u191d\3\2\2\2\u01e4\u191f\3\2\2\2\u01e6\u193c\3\2"+
		"\2\2\u01e8\u1945\3\2\2\2\u01ea\u1947\3\2\2\2\u01ec\u194a\3\2\2\2\u01ee"+
		"\u1953\3\2\2\2\u01f0\u195b\3\2\2\2\u01f2\u1964\3\2\2\2\u01f4\u197b\3\2"+
		"\2\2\u01f6\u197d\3\2\2\2\u01f8\u1988\3\2\2\2\u01fa\u198a\3\2\2\2\u01fc"+
		"\u19a1\3\2\2\2\u01fe\u19a8\3\2\2\2\u0200\u19ae\3\2\2\2\u0202\u19c1\3\2"+
		"\2\2\u0204\u19df\3\2\2\2\u0206\u19e3\3\2\2\2\u0208\u19e5\3\2\2\2\u020a"+
		"\u19ec\3\2\2\2\u020c\u1a21\3\2\2\2\u020e\u1a4d\3\2\2\2\u0210\u1a4f\3\2"+
		"\2\2\u0212\u1b49\3\2\2\2\u0214\u1c37\3\2\2\2\u0216\u1c5f\3\2\2\2\u0218"+
		"\u1c6c\3\2\2\2\u021a\u1c7a\3\2\2\2\u021c\u1c7f\3\2\2\2\u021e\u1ca1\3\2"+
		"\2\2\u0220\u1ca5\3\2\2\2\u0222\u1cc6\3\2\2\2\u0224\u1cd4\3\2\2\2\u0226"+
		"\u1ce3\3\2\2\2\u0228\u1cf2\3\2\2\2\u022a\u1d02\3\2\2\2\u022c\u1d0c\3\2"+
		"\2\2\u022e\u1d21\3\2\2\2\u0230\u1d29\3\2\2\2\u0232\u1d31\3\2\2\2\u0234"+
		"\u1d34\3\2\2\2\u0236\u1d5f\3\2\2\2\u0238\u1d61\3\2\2\2\u023a\u1d6c\3\2"+
		"\2\2\u023c\u1d74\3\2\2\2\u023e\u1d98\3\2\2\2\u0240\u1d9a\3\2\2\2\u0242"+
		"\u1daa\3\2\2\2\u0244\u1db7\3\2\2\2\u0246\u1dcb\3\2\2\2\u0248\u1dd8\3\2"+
		"\2\2\u024a\u1dda\3\2\2\2\u024c\u1df3\3\2\2\2\u024e\u1e22\3\2\2\2\u0250"+
		"\u1e33\3\2\2\2\u0252\u1e35\3\2\2\2\u0254\u1e42\3\2\2\2\u0256\u1e5b\3\2"+
		"\2\2\u0258\u1e6f\3\2\2\2\u025a\u1ead\3\2\2\2\u025c\u1eaf\3\2\2\2\u025e"+
		"\u1eb1\3\2\2\2\u0260\u1eb4\3\2\2\2\u0262\u1eb8\3\2\2\2\u0264\u1ec4\3\2"+
		"\2\2\u0266\u1ec8\3\2\2\2\u0268\u1ed1\3\2\2\2\u026a\u1ed9\3\2\2\2\u026c"+
		"\u1edd\3\2\2\2\u026e\u1ef8\3\2\2\2\u0270\u1efa\3\2\2\2\u0272\u1f04\3\2"+
		"\2\2\u0274\u1f2f\3\2\2\2\u0276\u1f31\3\2\2\2\u0278\u1f62\3\2\2\2\u027a"+
		"\u1f66\3\2\2\2\u027c\u1fa2\3\2\2\2\u027e\u1fa4\3\2\2\2\u0280\u1faf\3\2"+
		"\2\2\u0282\u1fba\3\2\2\2\u0284\u1fc6\3\2\2\2\u0286\u1fcd\3\2\2\2\u0288"+
		"\u1fcf\3\2\2\2\u028a\u1fe4\3\2\2\2\u028c\u2014\3\2\2\2\u028e\u2018\3\2"+
		"\2\2\u0290\u2039\3\2\2\2\u0292\u2067\3\2\2\2\u0294\u2071\3\2\2\2\u0296"+
		"\u2083\3\2\2\2\u0298\u209e\3\2\2\2\u029a\u20a8\3\2\2\2\u029c\u20aa\3\2"+
		"\2\2\u029e\u20b7\3\2\2\2\u02a0\u20d3\3\2\2\2\u02a2\u20d5\3\2\2\2\u02a4"+
		"\u20dd\3\2\2\2\u02a6\u20e6\3\2\2\2\u02a8\u2127\3\2\2\2\u02aa\u215b\3\2"+
		"\2\2\u02ac\u2163\3\2\2\2\u02ae\u21c9\3\2\2\2\u02b0\u21cb\3\2\2\2\u02b2"+
		"\u21dd\3\2\2\2\u02b4\u21df\3\2\2\2\u02b6\u224f\3\2\2\2\u02b8\u2251\3\2"+
		"\2\2\u02ba\u2254\3\2\2\2\u02bc\u2258\3\2\2\2\u02be\u2293\3\2\2\2\u02c0"+
		"\u2295\3\2\2\2\u02c2\u229e\3\2\2\2\u02c4\u22b9\3\2\2\2\u02c6\u22bb\3\2"+
		"\2\2\u02c8\u22cc\3\2\2\2\u02ca\u22d4\3\2\2\2\u02cc\u22d9\3\2\2\2\u02ce"+
		"\u22e9\3\2\2\2\u02d0\u22f1\3\2\2\2\u02d2\u22f9\3\2\2\2\u02d4\u2317\3\2"+
		"\2\2\u02d6\u2319\3\2\2\2\u02d8\u231d\3\2\2\2\u02da\u23bf\3\2\2\2\u02dc"+
		"\u23c1\3\2\2\2\u02de\u23c6\3\2\2\2\u02e0\u23cc\3\2\2\2\u02e2\u23d3\3\2"+
		"\2\2\u02e4\u23e2\3\2\2\2\u02e6\u23f1\3\2\2\2\u02e8\u2427\3\2\2\2\u02ea"+
		"\u2429\3\2\2\2\u02ec\u2436\3\2\2\2\u02ee\u2438\3\2\2\2\u02f0\u2446\3\2"+
		"\2\2\u02f2\u244e\3\2\2\2\u02f4\u2451\3\2\2\2\u02f6\u2460\3\2\2\2\u02f8"+
		"\u2469\3\2\2\2\u02fa\u246d\3\2\2\2\u02fc\u2475\3\2\2\2\u02fe\u247b\3\2"+
		"\2\2\u0300\u24a7\3\2\2\2\u0302\u24a9\3\2\2\2\u0304\u24e8\3\2\2\2\u0306"+
		"\u24ea\3\2\2\2\u0308\u2525\3\2\2\2\u030a\u2529\3\2\2\2\u030c\u252b\3\2"+
		"\2\2\u030e\u2540\3\2\2\2\u0310\u257e\3\2\2\2\u0312\u2585\3\2\2\2\u0314"+
		"\u2589\3\2\2\2\u0316\u2591\3\2\2\2\u0318\u2595\3\2\2\2\u031a\u2597\3\2"+
		"\2\2\u031c\u25a1\3\2\2\2\u031e\u25a3\3\2\2\2\u0320\u25a5\3\2\2\2\u0322"+
		"\u25a8\3\2\2\2\u0324\u25af\3\2\2\2\u0326\u25b1\3\2\2\2\u0328\u25bb\3\2"+
		"\2\2\u032a\u25e6\3\2\2\2\u032c\u25ee\3\2\2\2\u032e\u25f0\3\2\2\2\u0330"+
		"\u2602\3\2\2\2\u0332\u260e\3\2\2\2\u0334\u2615\3\2\2\2\u0336\u2639\3\2"+
		"\2\2\u0338\u263b\3\2\2\2\u033a\u2649\3\2\2\2\u033c\u2656\3\2\2\2\u033e"+
		"\u2659\3\2\2\2\u0340\u265d\3\2\2\2\u0342\u2662\3\2\2\2\u0344\u2664\3\2"+
		"\2\2\u0346\u2675\3\2\2\2\u0348\u2677\3\2\2\2\u034a\u2679\3\2\2\2\u034c"+
		"\u034e\7\u0341\2\2\u034d\u034c\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u0352"+
		"\3\2\2\2\u034f\u0351\5\u025c\u012f\2\u0350\u034f\3\2\2\2\u0351\u0354\3"+
		"\2\2\2\u0352\u0350\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0358\3\2\2\2\u0354"+
		"\u0352\3\2\2\2\u0355\u0357\5\6\4\2\u0356\u0355\3\2\2\2\u0357\u035a\3\2"+
		"\2\2\u0358\u0356\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035b\3\2\2\2\u035a"+
		"\u0358\3\2\2\2\u035b\u035c\7\2\2\3\u035c\3\3\2\2\2\u035d\u0362\5\u0290"+
		"\u0149\2\u035e\u035f\7\u0335\2\2\u035f\u0361\5\u0290\u0149\2\u0360\u035e"+
		"\3\2\2\2\u0361\u0364\3\2\2\2\u0362\u0360\3\2\2\2\u0362\u0363\3\2\2\2\u0363"+
		"\u0365\3\2\2\2\u0364\u0362\3\2\2\2\u0365\u0366\7\2\2\3\u0366\5\3\2\2\2"+
		"\u0367\u036a\5\f\7\2\u0368\u036a\5\b\5\2\u0369\u0367\3\2\2\2\u0369\u0368"+
		"\3\2\2\2\u036a\u0371\3\2\2\2\u036b\u036d\5\u025c\u012f\2\u036c\u036b\3"+
		"\2\2\2\u036d\u036e\3\2\2\2\u036e\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036f"+
		"\u0372\3\2\2\2\u0370\u0372\7\2\2\3\u0371\u036c\3\2\2\2\u0371\u0370\3\2"+
		"\2\2\u0372\7\3\2\2\2\u0373\u0376\7\"\2\2\u0374\u0375\7s\2\2\u0375\u0377"+
		"\7\5\2\2\u0376\u0374\3\2\2\2\u0376\u0377\3\2\2\2\u0377\u037a\3\2\2\2\u0378"+
		"\u037a\7\5\2\2\u0379\u0373\3\2\2\2\u0379\u0378\3\2\2\2\u037a\u037b\3\2"+
		"\2\2\u037b\u0385\5\n\6\2\u037c\u037d\7\"\2\2\u037d\u0381\5\u00e0q\2\u037e"+
		"\u0380\7\u0336\2\2\u037f\u037e\3\2\2\2\u0380\u0383\3\2\2\2\u0381\u037f"+
		"\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0385\3\2\2\2\u0383\u0381\3\2\2\2\u0384"+
		"\u0379\3\2\2\2\u0384\u037c\3\2\2\2\u0385\t\3\2\2\2\u0386\u0397\5\u018a"+
		"\u00c6\2\u0387\u038b\5\u0198\u00cd\2\u0388\u038a\7\u0336\2\2\u0389\u0388"+
		"\3\2\2\2\u038a\u038d\3\2\2\2\u038b\u0389\3\2\2\2\u038b\u038c\3\2\2\2\u038c"+
		"\u0397\3\2\2\2\u038d\u038b\3\2\2\2\u038e\u0392\5\u01b6\u00dc\2\u038f\u0391"+
		"\7\u0336\2\2\u0390\u038f\3\2\2\2\u0391\u0394\3\2\2\2\u0392\u0390\3\2\2"+
		"\2\u0392\u0393\3\2\2\2\u0393\u0397\3\2\2\2\u0394\u0392\3\2\2\2\u0395\u0397"+
		"\5\u018e\u00c8\2\u0396\u0386\3\2\2\2\u0396\u0387\3\2\2\2\u0396\u038e\3"+
		"\2\2\2\u0396\u0395\3\2\2\2\u0397\13\3\2\2\2\u0398\u039a\7\u0336\2\2\u0399"+
		"\u0398\3\2\2\2\u039a\u039d\3\2\2\2\u039b\u0399\3\2\2\2\u039b\u039c\3\2"+
		"\2\2\u039c\u03a5\3\2\2\2\u039d\u039b\3\2\2\2\u039e\u03a2\5\16\b\2\u039f"+
		"\u03a1\7\u0336\2\2\u03a0\u039f\3\2\2\2\u03a1\u03a4\3\2\2\2\u03a2\u03a0"+
		"\3\2\2\2\u03a2\u03a3\3\2\2\2\u03a3\u03a6\3\2\2\2\u03a4\u03a2\3\2\2\2\u03a5"+
		"\u039e\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3\2"+
		"\2\2\u03a8\r\3\2\2\2\u03a9\u03b0\5\20\t\2\u03aa\u03b0\5\22\n\2\u03ab\u03b0"+
		"\5\34\17\2\u03ac\u03b0\5\u0262\u0132\2\u03ad\u03b0\5:\36\2\u03ae\u03b0"+
		"\5\32\16\2\u03af\u03a9\3\2\2\2\u03af\u03aa\3\2\2\2\u03af\u03ab\3\2\2\2"+
		"\u03af\u03ac\3\2\2\2\u03af\u03ad\3\2\2\2\u03af\u03ae\3\2\2\2\u03b0\17"+
		"\3\2\2\2\u03b1\u03b7\5\u0132\u009a\2\u03b2\u03b7\5\u0138\u009d\2\u03b3"+
		"\u03b7\5\u013a\u009e\2\u03b4\u03b7\5\u0142\u00a2\2\u03b5\u03b7\5\u014e"+
		"\u00a8\2\u03b6\u03b1\3\2\2\2\u03b6\u03b2\3\2\2\2\u03b6\u03b3\3\2\2\2\u03b6"+
		"\u03b4\3\2\2\2\u03b6\u03b5\3\2\2\2\u03b7\21\3\2\2\2\u03b8\u03c0\5\26\f"+
		"\2\u03b9\u03c0\5\24\13\2\u03ba\u03c0\5\30\r\2\u03bb\u03c0\5\u0080A\2\u03bc"+
		"\u03c0\5\u0082B\2\u03bd\u03c0\5|?\2\u03be\u03c0\5\u01aa\u00d6\2\u03bf"+
		"\u03b8\3\2\2\2\u03bf\u03b9\3\2\2\2\u03bf\u03ba\3\2\2\2\u03bf\u03bb\3\2"+
		"\2\2\u03bf\u03bc\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf\u03be\3\2\2\2\u03c0"+
		"\23\3\2\2\2\u03c1\u03f3\7\5\2\2\u03c2\u03f4\5> \2\u03c3\u03f4\5F$\2\u03c4"+
		"\u03f4\5P)\2\u03c5\u03f4\5Z.\2\u03c6\u03f4\5`\61\2\u03c7\u03f4\5h\65\2"+
		"\u03c8\u03f4\5j\66\2\u03c9\u03f4\5\u0086D\2\u03ca\u03f4\5\u008aF\2\u03cb"+
		"\u03f4\5\u01c0\u00e1\2\u03cc\u03f4\5\u01c2\u00e2\2\u03cd\u03f4\5\u01c4"+
		"\u00e3\2\u03ce\u03f4\5\u00d6l\2\u03cf\u03f4\5\u01d2\u00ea\2\u03d0\u03f4"+
		"\5\u00a2R\2\u03d1\u03f4\5\u00a4S\2\u03d2\u03f4\5\u00a8U\2\u03d3\u03f4"+
		"\5\u00b0Y\2\u03d4\u03f4\5\u015e\u00b0\2\u03d5\u03f4\5\u00b4[\2\u03d6\u03f4"+
		"\5\u00b8]\2\u03d7\u03f4\5\u00be`\2\u03d8\u03f4\5\u00c2b\2\u03d9\u03f4"+
		"\5\u00c6d\2\u03da\u03f4\5\u00caf\2\u03db\u03f4\5\u0126\u0094\2\u03dc\u03f4"+
		"\5\u00ccg\2\u03dd\u03f4\5\u00d2j\2\u03de\u03f4\5\u00d4k\2\u03df\u03f4"+
		"\5\u00dep\2\u03e0\u03f4\5\u00e4s\2\u03e1\u03f4\5\u00eav\2\u03e2\u03f4"+
		"\5\u00f0y\2\u03e3\u03f4\5\u00f6|\2\u03e4\u03f4\5\u00fa~\2\u03e5\u03f4"+
		"\5\u00fe\u0080\2\u03e6\u03f4\5\u0100\u0081\2\u03e7\u03f4\5\u0104\u0083"+
		"\2\u03e8\u03f4\5\u0106\u0084\2\u03e9\u03f4\5\u010a\u0086\2\u03ea\u03f4"+
		"\5\u010c\u0087\2\u03eb\u03f4\5\u01bc\u00df\2\u03ec\u03f4\5\u0112\u008a"+
		"\2\u03ed\u03f4\5\u011a\u008e\2\u03ee\u03f4\5\u0120\u0091\2\u03ef\u03f4"+
		"\5f\64\2\u03f0\u03f4\5\u0090I\2\u03f1\u03f4\5\u00d0i\2\u03f2\u03f4\5\u010e"+
		"\u0088\2\u03f3\u03c2\3\2\2\2\u03f3\u03c3\3\2\2\2\u03f3\u03c4\3\2\2\2\u03f3"+
		"\u03c5\3\2\2\2\u03f3\u03c6\3\2\2\2\u03f3\u03c7\3\2\2\2\u03f3\u03c8\3\2"+
		"\2\2\u03f3\u03c9\3\2\2\2\u03f3\u03ca\3\2\2\2\u03f3\u03cb\3\2\2\2\u03f3"+
		"\u03cc\3\2\2\2\u03f3\u03cd\3\2\2\2\u03f3\u03ce\3\2\2\2\u03f3\u03cf\3\2"+
		"\2\2\u03f3\u03d0\3\2\2\2\u03f3\u03d1\3\2\2\2\u03f3\u03d2\3\2\2\2\u03f3"+
		"\u03d3\3\2\2\2\u03f3\u03d4\3\2\2\2\u03f3\u03d5\3\2\2\2\u03f3\u03d6\3\2"+
		"\2\2\u03f3\u03d7\3\2\2\2\u03f3\u03d8\3\2\2\2\u03f3\u03d9\3\2\2\2\u03f3"+
		"\u03da\3\2\2\2\u03f3\u03db\3\2\2\2\u03f3\u03dc\3\2\2\2\u03f3\u03dd\3\2"+
		"\2\2\u03f3\u03de\3\2\2\2\u03f3\u03df\3\2\2\2\u03f3\u03e0\3\2\2\2\u03f3"+
		"\u03e1\3\2\2\2\u03f3\u03e2\3\2\2\2\u03f3\u03e3\3\2\2\2\u03f3\u03e4\3\2"+
		"\2\2\u03f3\u03e5\3\2\2\2\u03f3\u03e6\3\2\2\2\u03f3\u03e7\3\2\2\2\u03f3"+
		"\u03e8\3\2\2\2\u03f3\u03e9\3\2\2\2\u03f3\u03ea\3\2\2\2\u03f3\u03eb\3\2"+
		"\2\2\u03f3\u03ec\3\2\2\2\u03f3\u03ed\3\2\2\2\u03f3\u03ee\3\2\2\2\u03f3"+
		"\u03ef\3\2\2\2\u03f3\u03f0\3\2\2\2\u03f3\u03f1\3\2\2\2\u03f3\u03f2\3\2"+
		"\2\2\u03f4\25\3\2\2\2\u03f5\u042b\7\"\2\2\u03f6\u042c\5<\37\2\u03f7\u042c"+
		"\5@!\2\u03f8\u042c\5J&\2\u03f9\u042c\5V,\2\u03fa\u042c\5\u023c\u011f\2"+
		"\u03fb\u042c\5l\67\2\u03fc\u042c\5\u0084C\2\u03fd\u042c\5\u012c\u0097"+
		"\2\u03fe\u042c\5\u0088E\2\u03ff\u042c\5\u008cG\2\u0400\u042c\5\u0156\u00ac"+
		"\2\u0401\u042c\5\u0158\u00ad\2\u0402\u042c\5\u015a\u00ae\2\u0403\u042c"+
		"\5\u015c\u00af\2\u0404\u042c\5\u00d8m\2\u0405\u042c\5\u008eH\2\u0406\u042c"+
		"\5\u00a6T\2\u0407\u042c\5\u00aaV\2\u0408\u042c\5\u00acW\2\u0409\u042c"+
		"\5\u00b2Z\2\u040a\u042c\5\u0164\u00b3\2\u040b\u042c\5\u00b6\\\2\u040c"+
		"\u042c\5\u0180\u00c1\2\u040d\u042c\5\u024e\u0128\2\u040e\u042c\5\u00bc"+
		"_\2\u040f\u042c\5\u00ba^\2\u0410\u042c\5\u00c0a\2\u0411\u042c\5\u0130"+
		"\u0099\2\u0412\u042c\5f\64\2\u0413\u042c\5\u0090I\2\u0414\u042c\5\u00d0"+
		"i\2\u0415\u042c\5\u00c4c\2\u0416\u042c\5\u00c8e\2\u0417\u042c\5\u0122"+
		"\u0092\2\u0418\u042c\5\u00ceh\2\u0419\u042c\5\u00dan\2\u041a\u042c\5\u00dc"+
		"o\2\u041b\u042c\5\u00e2r\2\u041c\u042c\5\u00e8u\2\u041d\u042c\5\u0170"+
		"\u00b9\2\u041e\u042c\5\u00f2z\2\u041f\u042c\5\u00f8}\2\u0420\u042c\5\u00fc"+
		"\177\2\u0421\u042c\5\u0102\u0082\2\u0422\u042c\5\u0108\u0085\2\u0423\u042c"+
		"\5\u01a8\u00d5\2\u0424\u042c\5\u0110\u0089\2\u0425\u042c\5\u01ae\u00d8"+
		"\2\u0426\u042c\5\u0202\u0102\2\u0427\u042c\5\u0114\u008b\2\u0428\u042c"+
		"\5\u011c\u008f\2\u0429\u042c\5\u017c\u00bf\2\u042a\u042c\5\u011e\u0090"+
		"\2\u042b\u03f6\3\2\2\2\u042b\u03f7\3\2\2\2\u042b\u03f8\3\2\2\2\u042b\u03f9"+
		"\3\2\2\2\u042b\u03fa\3\2\2\2\u042b\u03fb\3\2\2\2\u042b\u03fc\3\2\2\2\u042b"+
		"\u03fd\3\2\2\2\u042b\u03fe\3\2\2\2\u042b\u03ff\3\2\2\2\u042b\u0400\3\2"+
		"\2\2\u042b\u0401\3\2\2\2\u042b\u0402\3\2\2\2\u042b\u0403\3\2\2\2\u042b"+
		"\u0404\3\2\2\2\u042b\u0405\3\2\2\2\u042b\u0406\3\2\2\2\u042b\u0407\3\2"+
		"\2\2\u042b\u0408\3\2\2\2\u042b\u0409\3\2\2\2\u042b\u040a\3\2\2\2\u042b"+
		"\u040b\3\2\2\2\u042b\u040c\3\2\2\2\u042b\u040d\3\2\2\2\u042b\u040e\3\2"+
		"\2\2\u042b\u040f\3\2\2\2\u042b\u0410\3\2\2\2\u042b\u0411\3\2\2\2\u042b"+
		"\u0412\3\2\2\2\u042b\u0413\3\2\2\2\u042b\u0414\3\2\2\2\u042b\u0415\3\2"+
		"\2\2\u042b\u0416\3\2\2\2\u042b\u0417\3\2\2\2\u042b\u0418\3\2\2\2\u042b"+
		"\u0419\3\2\2\2\u042b\u041a\3\2\2\2\u042b\u041b\3\2\2\2\u042b\u041c\3\2"+
		"\2\2\u042b\u041d\3\2\2\2\u042b\u041e\3\2\2\2\u042b\u041f\3\2\2\2\u042b"+
		"\u0420\3\2\2\2\u042b\u0421\3\2\2\2\u042b\u0422\3\2\2\2\u042b\u0423\3\2"+
		"\2\2\u042b\u0424\3\2\2\2\u042b\u0425\3\2\2\2\u042b\u0426\3\2\2\2\u042b"+
		"\u0427\3\2\2\2\u042b\u0428\3\2\2\2\u042b\u0429\3\2\2\2\u042b\u042a\3\2"+
		"\2\2\u042c\27\3\2\2\2\u042d\u0439\7\66\2\2\u042e\u043a\5N(\2\u042f\u043a"+
		"\5X-\2\u0430\u043a\5v<\2\u0431\u043a\5p9\2\u0432\u043a\5r:\2\u0433\u043a"+
		"\5\u01fa\u00fe\2\u0434\u043a\5t;\2\u0435\u043a\5x=\2\u0436\u043a\5n8\2"+
		"\u0437\u043a\5z>\2\u0438\u043a\5\u0200\u0101\2\u0439\u042e\3\2\2\2\u0439"+
		"\u042f\3\2\2\2\u0439\u0430\3\2\2\2\u0439\u0431\3\2\2\2\u0439\u0432\3\2"+
		"\2\2\u0439\u0433\3\2\2\2\u0439\u0434\3\2\2\2\u0439\u0435\3\2\2\2\u0439"+
		"\u0436\3\2\2\2\u0439\u0437\3\2\2\2\u0439\u0438\3\2\2\2\u043a\31\3\2\2"+
		"\2\u043b\u0441\5\u0210\u0109\2\u043c\u0441\5\u0212\u010a\2\u043d\u0441"+
		"\5\u0214\u010b\2\u043e\u0441\5\u0216\u010c\2\u043f\u0441\5\u0218\u010d"+
		"\2\u0440\u043b\3\2\2\2\u0440\u043c\3\2\2\2\u0440\u043d\3\2\2\2\u0440\u043e"+
		"\3\2\2\2\u0440\u043f\3\2\2\2\u0441\33\3\2\2\2\u0442\u044e\5\36\20\2\u0443"+
		"\u044e\5 \21\2\u0444\u044e\5\"\22\2\u0445\u044e\5(\25\2\u0446\u044e\5"+
		"&\24\2\u0447\u044e\5*\26\2\u0448\u044e\5\60\31\2\u0449\u044e\5\62\32\2"+
		"\u044a\u044e\5\64\33\2\u044b\u044e\5\66\34\2\u044c\u044e\58\35\2\u044d"+
		"\u0442\3\2\2\2\u044d\u0443\3\2\2\2\u044d\u0444\3\2\2\2\u044d\u0445\3\2"+
		"\2\2\u044d\u0446\3\2\2\2\u044d\u0447\3\2\2\2\u044d\u0448\3\2\2\2\u044d"+
		"\u0449\3\2\2\2\u044d\u044a\3\2\2\2\u044d\u044b\3\2\2\2\u044d\u044c\3\2"+
		"\2\2\u044e\35\3\2\2\2\u044f\u0450\7\f\2\2\u0450\u0451\5\f\7\2\u0451\u0452"+
		"\79\2\2\u0452\37\3\2\2\2\u0453\u0454\7\16\2\2\u0454!\3\2\2\2\u0455\u0456"+
		"\7 \2\2\u0456#\3\2\2\2\u0457\u0458\7L\2\2\u0458\u045d\5\u0342\u01a2\2"+
		"\u0459\u045a\5\u0342\u01a2\2\u045a\u045b\7\u0337\2\2\u045b\u045d\3\2\2"+
		"\2\u045c\u0457\3\2\2\2\u045c\u0459\3\2\2\2\u045d%\3\2\2\2\u045e\u0460"+
		"\7\u0089\2\2\u045f\u0461\5\u0290\u0149\2\u0460\u045f\3\2\2\2\u0460\u0461"+
		"\3\2\2\2\u0461\'\3\2\2\2\u0462\u0463\7S\2\2\u0463\u0464\5\u02a2\u0152"+
		"\2\u0464\u046a\5\16\b\2\u0465\u0467\7\u0336\2\2\u0466\u0465\3\2\2\2\u0466"+
		"\u0467\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\78\2\2\u0469\u046b\5\16"+
		"\b\2\u046a\u0466\3\2\2\2\u046a\u046b\3\2\2\2\u046b)\3\2\2\2\u046c\u0473"+
		"\7\u02dd\2\2\u046d\u046e\5,\27\2\u046e\u046f\7\u0335\2\2\u046f\u0470\5"+
		".\30\2\u0470\u0471\7\u0335\2\2\u0471\u0472\5,\27\2\u0472\u0474\3\2\2\2"+
		"\u0473\u046d\3\2\2\2\u0473\u0474\3\2\2\2\u0474+\3\2\2\2\u0475\u0476\t"+
		"\2\2\2\u0476-\3\2\2\2\u0477\u0478\t\3\2\2\u0478/\3\2\2\2\u0479\u047a\7"+
		"\f\2\2\u047a\u047c\7\u02ec\2\2\u047b\u047d\5\f\7\2\u047c\u047b\3\2\2\2"+
		"\u047c\u047d\3\2\2\2\u047d\u047e\3\2\2\2\u047e\u047f\79\2\2\u047f\u0481"+
		"\7\u02ec\2\2\u0480\u0482\7\u0336\2\2\u0481\u0480\3\2\2\2\u0481\u0482\3"+
		"\2\2\2\u0482\u0483\3\2\2\2\u0483\u0484\7\f\2\2\u0484\u0486\7\u010a\2\2"+
		"\u0485\u0487\5\f\7\2\u0486\u0485\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0488"+
		"\3\2\2\2\u0488\u0489\79\2\2\u0489\u048a\7\u010a\2\2\u048a\61\3\2\2\2\u048b"+
		"\u048f\7\u00b4\2\2\u048c\u0490\5\u013c\u009f\2\u048d\u048e\t\4\2\2\u048e"+
		"\u0490\5\u014c\u00a7\2\u048f\u048c\3\2\2\2\u048f\u048d\3\2\2\2\u0490\63"+
		"\3\2\2\2\u0491\u0492\7\u00b7\2\2\u0492\u0493\5\u02a2\u0152\2\u0493\u0494"+
		"\5\16\b\2\u0494\65\3\2\2\2\u0495\u0498\7|\2\2\u0496\u0499\5\u0290\u0149"+
		"\2\u0497\u0499\7\u0316\2\2\u0498\u0496\3\2\2\2\u0498\u0497\3\2\2\2\u0499"+
		"\u049e\3\2\2\2\u049a\u049b\7\u0335\2\2\u049b\u049d\7\u0319\2\2\u049c\u049a"+
		"\3\2\2\2\u049d\u04a0\3\2\2\2\u049e\u049c\3\2\2\2\u049e\u049f\3\2\2\2\u049f"+
		"\67\3\2\2\2\u04a0\u049e\3\2\2\2\u04a1\u04a2\7\u0081\2\2\u04a2\u04a3\7"+
		"\u0333\2\2\u04a3\u04a4\t\5\2\2\u04a4\u04a5\7\u0335\2\2\u04a5\u04a6\5\u028e"+
		"\u0148\2\u04a6\u04a7\7\u0335\2\2\u04a7\u04ac\5\u028e\u0148\2\u04a8\u04a9"+
		"\7\u0335\2\2\u04a9\u04ab\5\u028e\u0148\2\u04aa\u04a8\3\2\2\2\u04ab\u04ae"+
		"\3\2\2\2\u04ac\u04aa\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad\u04af\3\2\2\2\u04ae"+
		"\u04ac\3\2\2\2\u04af\u04b2\7\u0334\2\2\u04b0\u04b1\7\u00b8\2\2\u04b1\u04b3"+
		"\t\6\2\2\u04b2\u04b0\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3\u04bf\3\2\2\2\u04b4"+
		"\u04b5\7\u0081\2\2\u04b5\u04b6\7\u031a\2\2\u04b6\u04bb\t\7\2\2\u04b7\u04b8"+
		"\7\u0335\2\2\u04b8\u04ba\t\5\2\2\u04b9\u04b7\3\2\2\2\u04ba\u04bd\3\2\2"+
		"\2\u04bb\u04b9\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04bf\3\2\2\2\u04bd\u04bb"+
		"\3\2\2\2\u04be\u04a1\3\2\2\2\u04be\u04b4\3\2\2\2\u04bf9\3\2\2\2\u04c0"+
		"\u04cb\5\u020c\u0107\2\u04c1\u04cb\5\u020e\u0108\2\u04c2\u04cb\5\u012e"+
		"\u0098\2\u04c3\u04cb\5\u013e\u00a0\2\u04c4\u04cb\5\u021a\u010e\2\u04c5"+
		"\u04cb\5\u022a\u0116\2\u04c6\u04cb\5\u0258\u012d\2\u04c7\u04cb\5\u025a"+
		"\u012e\2\u04c8\u04cb\5\u025e\u0130\2\u04c9\u04cb\5\u0260\u0131\2\u04ca"+
		"\u04c0\3\2\2\2\u04ca\u04c1\3\2\2\2\u04ca\u04c2\3\2\2\2\u04ca\u04c3\3\2"+
		"\2\2\u04ca\u04c4\3\2\2\2\u04ca\u04c5\3\2\2\2\u04ca\u04c6\3\2\2\2\u04ca"+
		"\u04c7\3\2\2\2\u04ca\u04c8\3\2\2\2\u04ca\u04c9\3\2\2\2\u04cb;\3\2\2\2"+
		"\u04cc\u04cd\7\u00d1\2\2\u04cd\u04dc\5\u0310\u0189\2\u04ce\u04d0\7\u0333"+
		"\2\2\u04cf\u04ce\3\2\2\2\u04cf\u04d0\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1"+
		"\u04d6\5\u01a0\u00d1\2\u04d2\u04d3\7\u0335\2\2\u04d3\u04d5\5\u01a0\u00d1"+
		"\2\u04d4\u04d2\3\2\2\2\u04d5\u04d8\3\2\2\2\u04d6\u04d4\3\2\2\2\u04d6\u04d7"+
		"\3\2\2\2\u04d7\u04da\3\2\2\2\u04d8\u04d6\3\2\2\2\u04d9\u04db\7\u0334\2"+
		"\2\u04da\u04d9\3\2\2\2\u04da\u04db\3\2\2\2\u04db\u04dd\3\2\2\2\u04dc\u04cf"+
		"\3\2\2\2\u04dc\u04dd\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04df\7\u027d\2"+
		"\2\u04df\u04e0\5\u0336\u019c\2\u04e0\u04e1\7@\2\2\u04e1\u04e2\7\u01f6"+
		"\2\2\u04e2\u04e3\5\u0310\u0189\2\u04e3=\3\2\2\2\u04e4\u04e5\7\u00e0\2"+
		"\2\u04e5\u04e6\7\u0280\2\2\u04e6\u04e7\5\u0342\u01a2\2\u04e7\u04e8\7\u00b8"+
		"\2\2\u04e8\u04ed\5B\"\2\u04e9\u04ea\7\u0335\2\2\u04ea\u04ec\5B\"\2\u04eb"+
		"\u04e9\3\2\2\2\u04ec\u04ef\3\2\2\2\u04ed\u04eb\3\2\2\2\u04ed\u04ee\3\2"+
		"\2\2\u04ee?\3\2\2\2\u04ef\u04ed\3\2\2\2\u04f0\u04f1\7\u00e0\2\2\u04f1"+
		"\u04f2\7\u0280\2\2\u04f2\u04f3\5\u0342\u01a2\2\u04f3\u04f4\7\u00b8\2\2"+
		"\u04f4\u04f9\5D#\2\u04f5\u04f6\7\u0335\2\2\u04f6\u04f8\5D#\2\u04f7\u04f5"+
		"\3\2\2\2\u04f8\u04fb\3\2\2\2\u04f9\u04f7\3\2\2\2\u04f9\u04fa\3\2\2\2\u04fa"+
		"A\3\2\2\2\u04fb\u04f9\3\2\2\2\u04fc\u04fd\7\u01f6\2\2\u04fd\u04fe\7\u0324"+
		"\2\2\u04fe\u0501\5\u0342\u01a2\2\u04ff\u0501\5D#\2\u0500\u04fc\3\2\2\2"+
		"\u0500\u04ff\3\2\2\2\u0501C\3\2\2\2\u0502\u0503\7\u022b\2\2\u0503\u0504"+
		"\7\u0324\2\2\u0504\u0509\7\u031c\2\2\u0505\u0506\7\u0140\2\2\u0506\u0507"+
		"\7\u0324\2\2\u0507\u0509\5\u0342\u01a2\2\u0508\u0502\3\2\2\2\u0508\u0505"+
		"\3\2\2\2\u0509E\3\2\2\2\u050a\u050b\7\u00e3\2\2\u050b\u0515\5\u0342\u01a2"+
		"\2\u050c\u050d\7H\2\2\u050d\u0512\5\u0290\u0149\2\u050e\u050f\7\u0335"+
		"\2\2\u050f\u0511\5\u0290\u0149\2\u0510\u050e\3\2\2\2\u0511\u0514\3\2\2"+
		"\2\u0512\u0510\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0516\3\2\2\2\u0514\u0512"+
		"\3\2\2\2\u0515\u050c\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u0520\3\2\2\2\u0517"+
		"\u0518\7\u00b8\2\2\u0518\u051d\5H%\2\u0519\u051a\7\u0335\2\2\u051a\u051c"+
		"\5H%\2\u051b\u0519\3\2\2\2\u051c\u051f\3\2\2\2\u051d\u051b\3\2\2\2\u051d"+
		"\u051e\3\2\2\2\u051e\u0521\3\2\2\2\u051f\u051d\3\2\2\2\u0520\u0517\3\2"+
		"\2\2\u0520\u0521\3\2\2\2\u0521\u052a\3\2\2\2\u0522\u0523\7\66\2\2\u0523"+
		"\u0528\7B\2\2\u0524\u0529\7\4\2\2\u0525\u0526\7\u031c\2\2\u0526\u0527"+
		"\7\u0335\2\2\u0527\u0529\7\u031c\2\2\u0528\u0524\3\2\2\2\u0528\u0525\3"+
		"\2\2\2\u0529\u052b\3\2\2\2\u052a\u0522\3\2\2\2\u052a\u052b\3\2\2\2\u052b"+
		"\u053e\3\2\2\2\u052c\u052d\7\3\2\2\u052d\u052e\7B\2\2\u052e\u052f\7H\2"+
		"\2\u052f\u0532\5\u0290\u0149\2\u0530\u0531\7\b\2\2\u0531\u0533\5\u0342"+
		"\u01a2\2\u0532\u0530\3\2\2\2\u0532\u0533\3\2\2\2\u0533\u053b\3\2\2\2\u0534"+
		"\u0535\7\u0335\2\2\u0535\u0536\5\u0290\u0149\2\u0536\u0537\7\b\2\2\u0537"+
		"\u0538\5\u0342\u01a2\2\u0538\u053a\3\2\2\2\u0539\u0534\3\2\2\2\u053a\u053d"+
		"\3\2\2\2\u053b\u0539\3\2\2\2\u053b\u053c\3\2\2\2\u053c\u053f\3\2\2\2\u053d"+
		"\u053b\3\2\2\2\u053e\u052c\3\2\2\2\u053e\u053f\3\2\2\2\u053fG\3\2\2\2"+
		"\u0540\u0541\7\u0231\2\2\u0541\u0542\7\u0324\2\2\u0542\u0549\5L\'\2\u0543"+
		"\u0544\7\u0303\2\2\u0544\u0545\7\u0324\2\2\u0545\u0549\t\b\2\2\u0546\u0547"+
		"\7\u02f2\2\2\u0547\u0549\7\u0136\2\2\u0548\u0540\3\2\2\2\u0548\u0543\3"+
		"\2\2\2\u0548\u0546\3\2\2\2\u0549I\3\2\2\2\u054a\u054b\7\u00e3\2\2\u054b"+
		"\u054e\5\u0342\u01a2\2\u054c\u054d\7\n\2\2\u054d\u054f\5\u0342\u01a2\2"+
		"\u054e\u054c\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550\3\2\2\2\u0550\u0551"+
		"\7H\2\2\u0551\u0556\5\u0290\u0149\2\u0552\u0553\7\u0335\2\2\u0553\u0555"+
		"\5\u0290\u0149\2\u0554\u0552\3\2\2\2\u0555\u0558\3\2\2\2\u0556\u0554\3"+
		"\2\2\2\u0556\u0557\3\2\2\2\u0557\u055d\3\2\2\2\u0558\u0556\3\2\2\2\u0559"+
		"\u055a\7\u00b8\2\2\u055a\u055b\7\u0231\2\2\u055b\u055c\7\u0324\2\2\u055c"+
		"\u055e\5L\'\2\u055d\u0559\3\2\2\2\u055d\u055e\3\2\2\2\u055eK\3\2\2\2\u055f"+
		"\u0560\t\t\2\2\u0560M\3\2\2\2\u0561\u0564\7\u00e3\2\2\u0562\u0563\7S\2"+
		"\2\u0563\u0565\7>\2\2\u0564\u0562\3\2\2\2\u0564\u0565\3\2\2\2\u0565\u056a"+
		"\3\2\2\2\u0566\u0568\7\u0335\2\2\u0567\u0566\3\2\2\2\u0567\u0568\3\2\2"+
		"\2\u0568\u0569\3\2\2\2\u0569\u056b\5\u0342\u01a2\2\u056a\u0567\3\2\2\2"+
		"\u056b\u056c\3\2\2\2\u056c\u056a\3\2\2\2\u056c\u056d\3\2\2\2\u056d\u0571"+
		"\3\2\2\2\u056e\u056f\7\u00b8\2\2\u056f\u0570\7\u0204\2\2\u0570\u0572\7"+
		"\u0143\2\2\u0571\u056e\3\2\2\2\u0571\u0572\3\2\2\2\u0572O\3\2\2\2\u0573"+
		"\u0574\7\u00e4\2\2\u0574\u0575\7\\\2\2\u0575\u057a\5\u0342\u01a2\2\u0576"+
		"\u057b\5R*\2\u0577\u0578\7\u0269\2\2\u0578\u0579\7\u0242\2\2\u0579\u057b"+
		"\7\\\2\2\u057a\u0576\3\2\2\2\u057a\u0577\3\2\2\2\u057bQ\3\2\2\2\u057c"+
		"\u057d\7\u00b8\2\2\u057d\u057e\7\u0242\2\2\u057e\u057f\7\\\2\2\u057f\u0580"+
		"\7\u0333\2\2\u0580\u0583\5T+\2\u0581\u0582\7\u0335\2\2\u0582\u0584\5T"+
		"+\2\u0583\u0581\3\2\2\2\u0583\u0584\3\2\2\2\u0584\u0585\3\2\2\2\u0585"+
		"\u0586\7\u0334\2\2\u0586S\3\2\2\2\u0587\u0588\t\n\2\2\u0588\u0589\7\21"+
		"\2\2\u0589\u058a\7\u022b\2\2\u058a\u058b\7\u0324\2\2\u058b\u058c\7\u031c"+
		"\2\2\u058cU\3\2\2\2\u058d\u058e\7\u00e4\2\2\u058e\u058f\7\\\2\2\u058f"+
		"\u0592\5\u0342\u01a2\2\u0590\u0591\7\n\2\2\u0591\u0593\5\u0342\u01a2\2"+
		"\u0592\u0590\3\2\2\2\u0592\u0593\3\2\2\2\u0593\u05a1\3\2\2\2\u0594\u059f"+
		"\7H\2\2\u0595\u0596\7B\2\2\u0596\u0597\7\u0324\2\2\u0597\u05a0\7\u031c"+
		"\2\2\u0598\u0599\7\u0161\2\2\u0599\u059a\7\u0324\2\2\u059a\u05a0\7\u031c"+
		"\2\2\u059b\u059c\7\u00e3\2\2\u059c\u05a0\5\u0342\u01a2\2\u059d\u059e\7"+
		"\u024c\2\2\u059e\u05a0\5\u0342\u01a2\2\u059f\u0595\3\2\2\2\u059f\u0598"+
		"\3\2\2\2\u059f\u059b\3\2\2\2\u059f\u059d\3\2\2\2\u05a0\u05a2\3\2\2\2\u05a1"+
		"\u0594\3\2\2\2\u05a1\u05a2\3\2\2\2\u05a2\u05af\3\2\2\2\u05a3\u05ad\7\u00b8"+
		"\2\2\u05a4\u05a5\7\u00d2\2\2\u05a5\u05a6\7\u0324\2\2\u05a6\u05ae\t\13"+
		"\2\2\u05a7\u05a8\7\u024b\2\2\u05a8\u05a9\7\u0324\2\2\u05a9\u05ae\7\u031c"+
		"\2\2\u05aa\u05ab\7\u012e\2\2\u05ab\u05ac\7\u0324\2\2\u05ac\u05ae\t\f\2"+
		"\2\u05ad\u05a4\3\2\2\2\u05ad\u05a7\3\2\2\2\u05ad\u05aa\3\2\2\2\u05ae\u05b0"+
		"\3\2\2\2\u05af\u05a3\3\2\2\2\u05af\u05b0\3\2\2\2\u05b0\u05b6\3\2\2\2\u05b1"+
		"\u05b2\7\u0159\2\2\u05b2\u05b3\7\21\2\2\u05b3\u05b4\7\u022b\2\2\u05b4"+
		"\u05b5\7\u0324\2\2\u05b5\u05b7\7\u031c\2\2\u05b6\u05b1\3\2\2\2\u05b6\u05b7"+
		"\3\2\2\2\u05b7W\3\2\2\2\u05b8\u05b9\7\u00e4\2\2\u05b9\u05ba\7\\\2\2\u05ba"+
		"\u05be\5\u0342\u01a2\2\u05bb\u05bc\7\u0269\2\2\u05bc\u05bd\7\u024c\2\2"+
		"\u05bd\u05bf\7\\\2\2\u05be\u05bb\3\2\2\2\u05be\u05bf\3\2\2\2\u05bfY\3"+
		"\2\2\2\u05c0\u05c1\7\n\2\2\u05c1\u05c6\7l\2\2\u05c2\u05c3\5^\60\2\u05c3"+
		"\u05c4\7\u0337\2\2\u05c4\u05c5\7\u0337\2\2\u05c5\u05c7\3\2\2\2\u05c6\u05c2"+
		"\3\2\2\2\u05c6\u05c7\3\2\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05c9\5\u0310\u0189"+
		"\2\u05c9\u05ca\7\u00a3\2\2\u05ca\u05cb\5\\/\2\u05cb[\3\2\2\2\u05cc\u05d0"+
		"\5\u0342\u01a2\2\u05cd\u05ce\7\u0092\2\2\u05ce\u05d0\7\u0223\2\2\u05cf"+
		"\u05cc\3\2\2\2\u05cf\u05cd\3\2\2\2\u05d0]\3\2\2\2\u05d1\u05f5\7\u0215"+
		"\2\2\u05d2\u05f5\7\u00e3\2\2\u05d3\u05d4\7\u00e4\2\2\u05d4\u05f5\7\\\2"+
		"\2\u05d5\u05d6\7\u00f5\2\2\u05d6\u05f5\7N\2\2\u05d7\u05f5\7\u010b\2\2"+
		"\u05d8\u05f5\7\u0126\2\2\u05d9\u05f5\7\u02f0\2\2\u05da\u05f5\7*\2\2\u05db"+
		"\u05f5\7\u015b\2\2\u05dc\u05dd\7\u0184\2\2\u05dd\u05f5\7\u0109\2\2\u05de"+
		"\u05df\7\u0184\2\2\u05df\u05f5\7\u02cc\2\2\u05e0\u05e1\7\u01e7\2\2\u05e1"+
		"\u05f5\7\u02f0\2\2\u05e2\u05e3\7\u0268\2\2\u05e3\u05e4\7\u02a7\2\2\u05e4"+
		"\u05f5\7\u00fa\2\2\u05e5\u05f5\7\u0280\2\2\u05e6\u05f5\7\u0282\2\2\u05e7"+
		"\u05f5\7\u0092\2\2\u05e8\u05e9\7\u0294\2\2\u05e9\u05ea\7\u024a\2\2\u05ea"+
		"\u05f5\7\u01b5\2\2\u05eb\u05ec\7\u02a4\2\2\u05ec\u05f5\7\u0280\2\2\u05ed"+
		"\u05f5\7\u02a7\2\2\u05ee\u05ef\7\u02d2\2\2\u05ef\u05f5\7\\\2\2\u05f0\u05f5"+
		"\7\u00b0\2\2\u05f1\u05f2\7\u030c\2\2\u05f2\u05f3\7\u0092\2\2\u05f3\u05f5"+
		"\7\u0118\2\2\u05f4\u05d1\3\2\2\2\u05f4\u05d2\3\2\2\2\u05f4\u05d3\3\2\2"+
		"\2\u05f4\u05d5\3\2\2\2\u05f4\u05d7\3\2\2\2\u05f4\u05d8\3\2\2\2\u05f4\u05d9"+
		"\3\2\2\2\u05f4\u05da\3\2\2\2\u05f4\u05db\3\2\2\2\u05f4\u05dc\3\2\2\2\u05f4"+
		"\u05de\3\2\2\2\u05f4\u05e0\3\2\2\2\u05f4\u05e2\3\2\2\2\u05f4\u05e5\3\2"+
		"\2\2\u05f4\u05e6\3\2\2\2\u05f4\u05e7\3\2\2\2\u05f4\u05e8\3\2\2\2\u05f4"+
		"\u05eb\3\2\2\2\u05f4\u05ed\3\2\2\2\u05f4\u05ee\3\2\2\2\u05f4\u05f0\3\2"+
		"\2\2\u05f4\u05f1\3\2\2\2\u05f5_\3\2\2\2\u05f6\u05f7\7\u00f5\2\2\u05f7"+
		"\u05f8\7N\2\2\u05f8\u05f9\5\u0342\u01a2\2\u05f9\u05fa\5b\62\2\u05faa\3"+
		"\2\2\2\u05fb\u05fc\7\u0099\2\2\u05fc\u060c\7\u0333\2\2\u05fd\u05fe\7\u00f2"+
		"\2\2\u05fe\u05ff\7\u0324\2\2\u05ff\u060d\t\r\2\2\u0600\u0601\7\u016c\2"+
		"\2\u0601\u0602\7\u0324\2\2\u0602\u060d\7\u031a\2\2\u0603\u0604\7\u018d"+
		"\2\2\u0604\u0605\7\u0324\2\2\u0605\u060d\7\u031a\2\2\u0606\u0607\7\u013b"+
		"\2\2\u0607\u0608\7\u0324\2\2\u0608\u060d\t\b\2\2\u0609\u060a\7\u0270\2"+
		"\2\u060a\u060b\7\u0324\2\2\u060b\u060d\7\u031a\2\2\u060c\u05fd\3\2\2\2"+
		"\u060c\u0600\3\2\2\2\u060c\u0603\3\2\2\2\u060c\u0606\3\2\2\2\u060c\u0609"+
		"\3\2\2\2\u060d\u060e\3\2\2\2\u060e\u0752\7\u0334\2\2\u060f\u0610\7\3\2"+
		"\2\u0610\u0611\7*\2\2\u0611\u0752\5\u0342\u01a2\2\u0612\u0613\7\u0269"+
		"\2\2\u0613\u0614\7*\2\2\u0614\u0752\5\u0342\u01a2\2\u0615\u0616\7\3\2"+
		"\2\u0616\u0617\7\u026c\2\2\u0617\u0618\7l\2\2\u0618\u0619\7\u031c\2\2"+
		"\u0619\u061a\7\u00b8\2\2\u061a\u061e\7\u0333\2\2\u061b\u061c\7\u015a\2"+
		"\2\u061c\u061d\7\u0324\2\2\u061d\u061f\7\u031c\2\2\u061e\u061b\3\2\2\2"+
		"\u061e\u061f\3\2\2\2\u061f\u0626\3\2\2\2\u0620\u0622\7\u0335\2\2\u0621"+
		"\u0620\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0624\7\u00f4"+
		"\2\2\u0624\u0625\7\u0324\2\2\u0625\u0627\t\16\2\2\u0626\u0621\3\2\2\2"+
		"\u0626\u0627\3\2\2\2\u0627\u062e\3\2\2\2\u0628\u062a\7\u0335\2\2\u0629"+
		"\u0628\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u062b\3\2\2\2\u062b\u062c\7\u016a"+
		"\2\2\u062c\u062d\7\u0324\2\2\u062d\u062f\t\17\2\2\u062e\u0629\3\2\2\2"+
		"\u062e\u062f\3\2\2\2\u062f\u0636\3\2\2\2\u0630\u0632\7\u0335\2\2\u0631"+
		"\u0630\3\2\2\2\u0631\u0632\3\2\2\2\u0632\u0633\3\2\2\2\u0633\u0634\7\u029c"+
		"\2\2\u0634\u0635\7\u0324\2\2\u0635\u0637\t\17\2\2\u0636\u0631\3\2\2\2"+
		"\u0636\u0637\3\2\2\2\u0637\u063e\3\2\2\2\u0638\u063a\7\u0335\2\2\u0639"+
		"\u0638\3\2\2\2\u0639\u063a\3\2\2\2\u063a\u063b\3\2\2\2\u063b\u063c\7\u00f6"+
		"\2\2\u063c\u063d\7\u0324\2\2\u063d\u063f\7\u031a\2\2\u063e\u0639\3\2\2"+
		"\2\u063e\u063f\3\2\2\2\u063f\u0649\3\2\2\2\u0640\u0642\7\u0335\2\2\u0641"+
		"\u0640\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0643\3\2\2\2\u0643\u0644\7\u023d"+
		"\2\2\u0644\u0645\7\u0333\2\2\u0645\u0646\7\u00d3\2\2\u0646\u0647\7\u0324"+
		"\2\2\u0647\u0648\t\20\2\2\u0648\u064a\7\u0334\2\2\u0649\u0641\3\2\2\2"+
		"\u0649\u064a\3\2\2\2\u064a\u0654\3\2\2\2\u064b\u064d\7\u0335\2\2\u064c"+
		"\u064b\3\2\2\2\u064c\u064d\3\2\2\2\u064d\u064e\3\2\2\2\u064e\u064f\7\u0296"+
		"\2\2\u064f\u0650\7\u0333\2\2\u0650\u0651\7\u00d3\2\2\u0651\u0652\7\u0324"+
		"\2\2\u0652\u0653\7\u0259\2\2\u0653\u0655\7\u0334\2\2\u0654\u064c\3\2\2"+
		"\2\u0654\u0655\3\2\2\2\u0655\u0656\3\2\2\2\u0656\u0752\7\u0334\2\2\u0657"+
		"\u0658\7\u0296\2\2\u0658\u0661\7\u0333\2\2\u0659\u065a\7\u00d3\2\2\u065a"+
		"\u065b\7\u0324\2\2\u065b\u0662\t\21\2\2\u065c\u065d\7\u0258\2\2\u065d"+
		"\u065e\7\u0324\2\2\u065e\u065f\7\u0333\2\2\u065f\u0660\7\u031c\2\2\u0660"+
		"\u0662\7\u0334\2\2\u0661\u0659\3\2\2\2\u0661\u065c\3\2\2\2\u0662\u0752"+
		"\3\2\2\2\u0663\u0664\7\u023d\2\2\u0664\u067b\7\u0333\2\2\u0665\u0666\7"+
		"\u00d3\2\2\u0666\u0667\7\u0324\2\2\u0667\u067c\t\21\2\2\u0668\u0669\7"+
		"\u0258\2\2\u0669\u066a\7\u0324\2\2\u066a\u0675\7\u0333\2\2\u066b\u066d"+
		"\7\u0335\2\2\u066c\u066b\3\2\2\2\u066c\u066d\3\2\2\2\u066d\u066e\3\2\2"+
		"\2\u066e\u0670\7\u031c\2\2\u066f\u066c\3\2\2\2\u0670\u0673\3\2\2\2\u0671"+
		"\u066f\3\2\2\2\u0671\u0672\3\2\2\2\u0672\u0676\3\2\2\2\u0673\u0671\3\2"+
		"\2\2\u0674\u0676\7\u020a\2\2\u0675\u0671\3\2\2\2\u0675\u0674\3\2\2\2\u0676"+
		"\u0677\3\2\2\2\u0677\u067c\7\u0334\2\2\u0678\u0679\7\u02a8\2\2\u0679\u067a"+
		"\7\u0324\2\2\u067a\u067c\7\u031a\2\2\u067b\u0665\3\2\2\2\u067b\u0668\3"+
		"\2\2\2\u067b\u0678\3\2\2\2\u067c\u0752\3\2\2\2\u067d\u067e\7\u01f2\2\2"+
		"\u067e\u067f\7\u026c\2\2\u067f\u0680\7l\2\2\u0680\u06ba\7\u031c\2\2\u0681"+
		"\u0682\7\u00b8\2\2\u0682\u0692\7\u0333\2\2\u0683\u0684\7\u015a\2\2\u0684"+
		"\u0685\7\u0324\2\2\u0685\u0693\7\u031c\2\2\u0686\u0687\7\u00f4\2\2\u0687"+
		"\u0688\7\u0324\2\2\u0688\u0693\t\16\2\2\u0689\u068a\7\u016a\2\2\u068a"+
		"\u068b\7\u0324\2\2\u068b\u0693\t\17\2\2\u068c\u068d\7\u029c\2\2\u068d"+
		"\u068e\7\u0324\2\2\u068e\u0693\t\17\2\2\u068f\u0690\7\u00f6\2\2\u0690"+
		"\u0691\7\u0324\2\2\u0691\u0693\7\u031a\2\2\u0692\u0683\3\2\2\2\u0692\u0686"+
		"\3\2\2\2\u0692\u0689\3\2\2\2\u0692\u068c\3\2\2\2\u0692\u068f\3\2\2\2\u0693"+
		"\u06bb\3\2\2\2\u0694\u0695\7\u0296\2\2\u0695\u069e\7\u0333\2\2\u0696\u0697"+
		"\7\u00d3\2\2\u0697\u0698\7\u0324\2\2\u0698\u069f\t\21\2\2\u0699\u069a"+
		"\7\u0258\2\2\u069a\u069b\7\u0324\2\2\u069b\u069c\7\u0333\2\2\u069c\u069d"+
		"\7\u031c\2\2\u069d\u069f\7\u0334\2\2\u069e\u0696\3\2\2\2\u069e\u0699\3"+
		"\2\2\2\u069f\u06bb\3\2\2\2\u06a0\u06a1\7\u023d\2\2\u06a1\u06b8\7\u0333"+
		"\2\2\u06a2\u06a3\7\u00d3\2\2\u06a3\u06a4\7\u0324\2\2\u06a4\u06b9\t\21"+
		"\2\2\u06a5\u06a6\7\u0258\2\2\u06a6\u06a7\7\u0324\2\2\u06a7\u06b2\7\u0333"+
		"\2\2\u06a8\u06aa\7\u0335\2\2\u06a9\u06a8\3\2\2\2\u06a9\u06aa\3\2\2\2\u06aa"+
		"\u06ab\3\2\2\2\u06ab\u06ad\7\u031c\2\2\u06ac\u06a9\3\2\2\2\u06ad\u06b0"+
		"\3\2\2\2\u06ae\u06ac\3\2\2\2\u06ae\u06af\3\2\2\2\u06af\u06b3\3\2\2\2\u06b0"+
		"\u06ae\3\2\2\2\u06b1\u06b3\7\u020a\2\2\u06b2\u06ae\3\2\2\2\u06b2\u06b1"+
		"\3\2\2\2\u06b3\u06b4\3\2\2\2\u06b4\u06b9\7\u0334\2\2\u06b5\u06b6\7\u02a8"+
		"\2\2\u06b6\u06b7\7\u0324\2\2\u06b7\u06b9\7\u031a\2\2\u06b8\u06a2\3\2\2"+
		"\2\u06b8\u06a5\3\2\2\2\u06b8\u06b5\3\2\2\2\u06b9\u06bb\3\2\2\2\u06ba\u0681"+
		"\3\2\2\2\u06ba\u0694\3\2\2\2\u06ba\u06a0\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc"+
		"\u0752\7\u0334\2\2\u06bd\u06be\7\u0269\2\2\u06be\u06bf\7\u026c\2\2\u06bf"+
		"\u06c0\7l\2\2\u06c0\u0752\7\u031c\2\2\u06c1\u0752\7[\2\2\u06c2\u06c3\7"+
		"[\2\2\u06c3\u06c4\7\u00f5\2\2\u06c4\u06c5\7N\2\2\u06c5\u06dc\7l\2\2\u06c6"+
		"\u06c8\7\u0335\2\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8\3\2\2\2\u06c8\u06c9"+
		"\3\2\2\2\u06c9\u06ca\7\u031c\2\2\u06ca\u06cb\7\u00b8\2\2\u06cb\u06cc\7"+
		"\u0333\2\2\u06cc\u06cd\7\u01b8\2\2\u06cd\u06ce\7\u0324\2\2\u06ce\u06cf"+
		"\7\u031c\2\2\u06cf\u06d0\7\u0335\2\2\u06d0\u06d1\7\u00f4\2\2\u06d1\u06d2"+
		"\7\u0324\2\2\u06d2\u06d3\t\16\2\2\u06d3\u06d4\7\u0335\2\2\u06d4\u06d5"+
		"\7\u016a\2\2\u06d5\u06d6\7\u0324\2\2\u06d6\u06d7\7\u01c4\2\2\u06d7\u06d8"+
		"\7\u0335\2\2\u06d8\u06d9\7\u029c\2\2\u06d9\u06da\7\u0324\2\2\u06da\u06db"+
		"\t\17\2\2\u06db\u06dd\7\u0334\2\2\u06dc\u06c7\3\2\2\2\u06dd\u06de\3\2"+
		"\2\2\u06de\u06dc\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u0752\3\2\2\2\u06e0"+
		"\u06e1\7\u01f2\2\2\u06e1\u06e2\7\u00f5\2\2\u06e2\u06e3\7N\2\2\u06e3\u0706"+
		"\7l\2\2\u06e4\u06e6\7\u0335\2\2\u06e5\u06e4\3\2\2\2\u06e5\u06e6\3\2\2"+
		"\2\u06e6\u06e7\3\2\2\2\u06e7\u06e8\7\u031c\2\2\u06e8\u06e9\7\u00b8\2\2"+
		"\u06e9\u06ea\7\u0333\2\2\u06ea\u06eb\7\u01b8\2\2\u06eb\u06ec\7\u0324\2"+
		"\2\u06ec\u06f3\7\u031c\2\2\u06ed\u06ef\7\u0335\2\2\u06ee\u06ed\3\2\2\2"+
		"\u06ee\u06ef\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1\7\u00f4\2\2\u06f1"+
		"\u06f2\7\u0324\2\2\u06f2\u06f4\t\16\2\2\u06f3\u06ee\3\2\2\2\u06f3\u06f4"+
		"\3\2\2\2\u06f4\u06fb\3\2\2\2\u06f5\u06f7\7\u0335\2\2\u06f6\u06f5\3\2\2"+
		"\2\u06f6\u06f7\3\2\2\2\u06f7\u06f8\3\2\2\2\u06f8\u06f9\7\u016a\2\2\u06f9"+
		"\u06fa\7\u0324\2\2\u06fa\u06fc\7\u01c4\2\2\u06fb\u06f6\3\2\2\2\u06fb\u06fc"+
		"\3\2\2\2\u06fc\u0703\3\2\2\2\u06fd\u06ff\7\u0335\2\2\u06fe\u06fd\3\2\2"+
		"\2\u06fe\u06ff\3\2\2\2\u06ff\u0700\3\2\2\2\u0700\u0701\7\u029c\2\2\u0701"+
		"\u0702\7\u0324\2\2\u0702\u0704\t\17\2\2\u0703\u06fe\3\2\2\2\u0703\u0704"+
		"\3\2\2\2\u0704\u0705\3\2\2\2\u0705\u0707\7\u0334\2\2\u0706\u06e5\3\2\2"+
		"\2\u0707\u0708\3\2\2\2\u0708\u0706\3\2\2\2\u0708\u0709\3\2\2\2\u0709\u0752"+
		"\3\2\2\2\u070a\u070b\7M\2\2\u070b\u070c\7\"\2\2\u070c\u070d\7\7\2\2\u070d"+
		"\u0752\7*\2\2\u070e\u070f\7\60\2\2\u070f\u0710\7\"\2\2\u0710\u0711\7\7"+
		"\2\2\u0711\u0752\7*\2\2\u0712\u0752\7\u016b\2\2\u0713\u0752\7\u017c\2"+
		"\2\u0714\u0715\7\3\2\2\u0715\u0716\7\u01b9\2\2\u0716\u0717\7\u031c\2\2"+
		"\u0717\u0734\7\u0333\2\2\u0718\u0719\7\u00b8\2\2\u0719\u071a\7\u0147\2"+
		"\2\u071a\u071b\7l\2\2\u071b\u071c\7\u0333\2\2\u071c\u071d\7\u0320\2\2"+
		"\u071d\u071e\7\u0320\2\2\u071e\u0735\7\u0334\2\2\u071f\u0720\7\u00b8\2"+
		"\2\u0720\u0721\7\u01a3\2\2\u0721\u0729\7\u0333\2\2\u0722\u0724\7\u0335"+
		"\2\2\u0723\u0722\3\2\2\2\u0723\u0724\3\2\2\2\u0724\u0725\3\2\2\2\u0725"+
		"\u0726\7\u0333\2\2\u0726\u0727\5d\63\2\u0727\u0728\7\u0334\2\2\u0728\u072a"+
		"\3\2\2\2\u0729\u0723\3\2\2\2\u072a\u072b\3\2\2\2\u072b\u0729\3\2\2\2\u072b"+
		"\u072c\3\2\2\2\u072c\u072d\3\2\2\2\u072d\u0732\7\u0334\2\2\u072e\u072f"+
		"\7\u0335\2\2\u072f\u0730\7\u023a\2\2\u0730\u0731\7\u0324\2\2\u0731\u0733"+
		"\7\u031a\2\2\u0732\u072e\3\2\2\2\u0732\u0733\3\2\2\2\u0733\u0735\3\2\2"+
		"\2\u0734\u0718\3\2\2\2\u0734\u071f\3\2\2\2\u0735\u0736\3\2\2\2\u0736\u0752"+
		"\7\u0334\2\2\u0737\u0738\7\u01f2\2\2\u0738\u0742\7\u01b9\2\2\u0739\u073a"+
		"\7\3\2\2\u073a\u073b\7\u01a3\2\2\u073b\u073c\7\u0333\2\2\u073c\u073d\5"+
		"d\63\2\u073d\u073e\7\u0334\2\2\u073e\u0743\3\2\2\2\u073f\u0740\7\u023a"+
		"\2\2\u0740\u0741\7\u0324\2\2\u0741\u0743\7\u031a\2\2\u0742\u0739\3\2\2"+
		"\2\u0742\u073f\3\2\2\2\u0743\u0752\3\2\2\2\u0744\u0745\7\u0277\2\2\u0745"+
		"\u0746\7\u01b9\2\2\u0746\u0752\7\u031c\2\2\u0747\u0748\7\u0269\2\2\u0748"+
		"\u0749\7\u01b9\2\2\u0749\u0752\7\u031c\2\2\u074a\u0752\7\u0216\2\2\u074b"+
		"\u074c\7\u00b8\2\2\u074c\u074d\7\u0333\2\2\u074d\u074e\7\u0150\2\2\u074e"+
		"\u074f\7\u0324\2\2\u074f\u0750\7\u022f\2\2\u0750\u0752\7\u0334\2\2\u0751"+
		"\u05fb\3\2\2\2\u0751\u060f\3\2\2\2\u0751\u0612\3\2\2\2\u0751\u0615\3\2"+
		"\2\2\u0751\u0657\3\2\2\2\u0751\u0663\3\2\2\2\u0751\u067d\3\2\2\2\u0751"+
		"\u06bd\3\2\2\2\u0751\u06c1\3\2\2\2\u0751\u06c2\3\2\2\2\u0751\u06e0\3\2"+
		"\2\2\u0751\u070a\3\2\2\2\u0751\u070e\3\2\2\2\u0751\u0712\3\2\2\2\u0751"+
		"\u0713\3\2\2\2\u0751\u0714\3\2\2\2\u0751\u0737\3\2\2\2\u0751\u0744\3\2"+
		"\2\2\u0751\u0747\3\2\2\2\u0751\u074a\3\2\2\2\u0751\u074b\3\2\2\2\u0752"+
		"c\3\2\2\2\u0753\u0754\7\u0320\2\2\u0754\u0755\7\u0335\2\2\u0755\u075d"+
		"\t\22\2\2\u0756\u075d\7\u0321\2\2\u0757\u075a\7\u031c\2\2\u0758\u0759"+
		"\7\u0335\2\2\u0759\u075b\t\22\2\2\u075a\u0758\3\2\2\2\u075a\u075b\3\2"+
		"\2\2\u075b\u075d\3\2\2\2\u075c\u0753\3\2\2\2\u075c\u0756\3\2\2\2\u075c"+
		"\u0757\3\2\2\2\u075de\3\2\2\2\u075e\u075f\7\u0100\2\2\u075f\u0760\7\u0240"+
		"\2\2\u0760\u0761\5\u0342\u01a2\2\u0761\u0762\7D\2\2\u0762\u0763\7\u0128"+
		"\2\2\u0763\u0764\7\u0099\2\2\u0764\u076e\7\u0333\2\2\u0765\u0766\7\u0125"+
		"\2\2\u0766\u0769\7\u0324\2\2\u0767\u076a\5\u0342\u01a2\2\u0768\u076a\7"+
		"\7\2\2\u0769\u0767\3\2\2\2\u0769\u0768\3\2\2\2\u076a\u076c\3\2\2\2\u076b"+
		"\u076d\7\u0335\2\2\u076c\u076b\3\2\2\2\u076c\u076d\3\2\2\2\u076d\u076f"+
		"\3\2\2\2\u076e\u0765\3\2\2\2\u076e\u076f\3\2\2\2\u076f\u077c\3\2\2\2\u0770"+
		"\u0771\7\u01bb\2\2\u0771\u0777\7\u0324\2\2\u0772\u0774\7\u0323\2\2\u0773"+
		"\u0772\3\2\2\2\u0773\u0774\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0778\5\u0342"+
		"\u01a2\2\u0776\u0778\7\7\2\2\u0777\u0773\3\2\2\2\u0777\u0776\3\2\2\2\u0778"+
		"\u077a\3\2\2\2\u0779\u077b\7\u0335\2\2\u077a\u0779\3\2\2\2\u077a\u077b"+
		"\3\2\2\2\u077b\u077d\3\2\2\2\u077c\u0770\3\2\2\2\u077c\u077d\3\2\2\2\u077d"+
		"\u0784\3\2\2\2\u077e\u077f\7\u0267\2\2\u077f\u0780\7\u0324\2\2\u0780\u0782"+
		"\t\23\2\2\u0781\u0783\7\u0335\2\2\u0782\u0781\3\2\2\2\u0782\u0783\3\2"+
		"\2\2\u0783\u0785\3\2\2\2\u0784\u077e\3\2\2\2\u0784\u0785\3\2\2\2\u0785"+
		"\u0789\3\2\2\2\u0786\u0787\7\u023f\2\2\u0787\u0788\7\u0324\2\2\u0788\u078a"+
		"\t\24\2\2\u0789\u0786\3\2\2\2\u0789\u078a\3\2\2\2\u078a\u078b\3\2\2\2"+
		"\u078b\u078c\7\u0334\2\2\u078cg\3\2\2\2\u078d\u078e\7\u010b\2\2\u078e"+
		"\u07b6\5\u0342\u01a2\2\u078f\u0790\7\u0269\2\2\u0790\u07b7\7\u0241\2\2"+
		"\u0791\u0792\7\u00b8\2\2\u0792\u0793\7\u0242\2\2\u0793\u0794\7\\\2\2\u0794"+
		"\u07ab\7\u0333\2\2\u0795\u0796\7B\2\2\u0796\u0797\7\u0324\2\2\u0797\u0799"+
		"\7\u031c\2\2\u0798\u079a\7\u0335\2\2\u0799\u0798\3\2\2\2\u0799\u079a\3"+
		"\2\2\2\u079a\u07ac\3\2\2\2\u079b\u079c\7\u013c\2\2\u079c\u079d\7\21\2"+
		"\2\u079d\u079e\7\u022b\2\2\u079e\u079f\7\u0324\2\2\u079f\u07a1\7\u031c"+
		"\2\2\u07a0\u07a2\7\u0335\2\2\u07a1\u07a0\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2"+
		"\u07ac\3\2\2\2\u07a3\u07a4\7\u0159\2\2\u07a4\u07a5\7\21\2\2\u07a5\u07a6"+
		"\7\u022b\2\2\u07a6\u07a7\7\u0324\2\2\u07a7\u07a9\7\u031c\2\2\u07a8\u07aa"+
		"\7\u0335\2\2\u07a9\u07a8\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07ac\3\2\2"+
		"\2\u07ab\u0795\3\2\2\2\u07ab\u079b\3\2\2\2\u07ab\u07a3\3\2\2\2\u07ac\u07ad"+
		"\3\2\2\2\u07ad\u07ab\3\2\2\2\u07ad\u07ae\3\2\2\2\u07ae\u07af\3\2\2\2\u07af"+
		"\u07b7\7\u0334\2\2\u07b0\u07b1\7\u00b8\2\2\u07b1\u07b2\7\u00c9\2\2\u07b2"+
		"\u07b3\7D\2\2\u07b3\u07b4\7\u00f8\2\2\u07b4\u07b5\7\u0324\2\2\u07b5\u07b7"+
		"\t\b\2\2\u07b6\u078f\3\2\2\2\u07b6\u0791\3\2\2\2\u07b6\u07b0\3\2\2\2\u07b7"+
		"i\3\2\2\2\u07b8\u07b9\7\32\2\2\u07b9\u07ba\7\u0159\2\2\u07ba\u07bb\7\\"+
		"\2\2\u07bb\u07bc\5\u0342\u01a2\2\u07bc\u07bd\t\25\2\2\u07bd\u07be\7\u02fe"+
		"\2\2\u07be\u07bf\7\u0333\2\2\u07bf\u07c0\7\u0119\2\2\u07c0\u07c1\7\u0324"+
		"\2\2\u07c1\u07ca\5\u0342\u01a2\2\u07c2\u07c3\7\u0335\2\2\u07c3\u07c4\7"+
		"\u00d2\2\2\u07c4\u07c5\7\u0324\2\2\u07c5\u07c6\7\u031c\2\2\u07c6\u07c7"+
		"\7\u0335\2\2\u07c7\u07c8\7\u0158\2\2\u07c8\u07c9\7\u0324\2\2\u07c9\u07cb"+
		"\7\u031d\2\2\u07ca\u07c2\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb\u07cc\3\2\2"+
		"\2\u07cc\u07cd\7\u0334\2\2\u07cdk\3\2\2\2\u07ce\u07cf\7\32\2\2\u07cf\u07d0"+
		"\7\u0159\2\2\u07d0\u07d1\7\\\2\2\u07d1\u07d2\5\u0342\u01a2\2\u07d2\u07d3"+
		"\7\u00b8\2\2\u07d3\u07e7\7\u00b1\2\2\u07d4\u07d6\7\u0333\2\2\u07d5\u07d7"+
		"\7\u0335\2\2\u07d6\u07d5\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d8\3\2\2"+
		"\2\u07d8\u07d9\7\u0119\2\2\u07d9\u07da\7\u0324\2\2\u07da\u07db\5\u0342"+
		"\u01a2\2\u07db\u07dc\7\u0335\2\2\u07dc\u07dd\7\u00d2\2\2\u07dd\u07de\7"+
		"\u0324\2\2\u07de\u07df\7\u031c\2\2\u07df\u07e0\7\u0335\2\2\u07e0\u07e1"+
		"\7\u0158\2\2\u07e1\u07e2\7\u0324\2\2\u07e2\u07e3\7\u031d\2\2\u07e3\u07e5"+
		"\7\u0334\2\2\u07e4\u07e6\7\u0335\2\2\u07e5\u07e4\3\2\2\2\u07e5\u07e6\3"+
		"\2\2\2\u07e6\u07e8\3\2\2\2\u07e7\u07d4\3\2\2\2\u07e8\u07e9\3\2\2\2\u07e9"+
		"\u07e7\3\2\2\2\u07e9\u07ea\3\2\2\2\u07eam\3\2\2\2\u07eb\u0844\7\u00d1"+
		"\2\2\u07ec\u07ed\7\u00e0\2\2\u07ed\u0844\7\u0280\2\2\u07ee\u07ef\7\u00f5"+
		"\2\2\u07ef\u0844\7N\2\2\u07f0\u07f1\7\u0100\2\2\u07f1\u0844\7\u0240\2"+
		"\2\u07f2\u0844\7\u010b\2\2\u07f3\u07f4\7\32\2\2\u07f4\u07f5\t\26\2\2\u07f5"+
		"\u0844\7\\\2\2\u07f6\u0844\7\u0126\2\2\u07f7\u0844\7\u012f\2\2\u07f8\u07f9"+
		"\7\u0130\2\2\u07f9\u0844\7\u024c\2\2\u07fa\u07ff\7*\2\2\u07fb\u07fc\7"+
		"\u00e7\2\2\u07fc\u0800\7\u02ba\2\2\u07fd\u07fe\7\u0291\2\2\u07fe\u0800"+
		"\7\u012f\2\2\u07ff\u07fb\3\2\2\2\u07ff\u07fd\3\2\2\2\u07ff\u0800\3\2\2"+
		"\2\u0800\u0844\3\2\2\2\u0801\u0844\7.\2\2\u0802\u0844\7\u015b\2\2\u0803"+
		"\u080b\7@\2\2\u0804\u0805\7\u0136\2\2\u0805\u080c\7\u02b7\2\2\u0806\u0807"+
		"\7B\2\2\u0807\u080c\7\u0181\2\2\u0808\u0809\7\u0276\2\2\u0809\u080c\7"+
		"\u0238\2\2\u080a\u080c\7\u009f\2\2\u080b\u0804\3\2\2\2\u080b\u0806\3\2"+
		"\2\2\u080b\u0808\3\2\2\2\u080b\u080a\3\2\2\2\u080c\u0844\3\2\2\2\u080d"+
		"\u0812\7\u0184\2\2\u080e\u0813\7\u0109\2\2\u080f\u0810\7U\2\2\u0810\u0813"+
		"\7l\2\2\u0811\u0813\7\u02cc\2\2\u0812\u080e\3\2\2\2\u0812\u080f\3\2\2"+
		"\2\u0812\u0811\3\2\2\2\u0813\u0844\3\2\2\2\u0814\u0844\7\u01c1\2\2\u0815"+
		"\u0816\7\u01e7\2\2\u0816\u0844\7\u02f0\2\2\u0817\u0819\7\u0228\2\2\u0818"+
		"\u0817\3\2\2\2\u0818\u0819\3\2\2\2\u0819\u081a\3\2\2\2\u081a\u0844\7J"+
		"\2\2\u081b\u081c\7\u0228\2\2\u081c\u0844\7\u0290\2\2\u081d\u0844\7}\2"+
		"\2\u081e\u0844\7~\2\2\u081f\u0844\7\u024f\2\2\u0820\u0821\7\u0268\2\2"+
		"\u0821\u0822\7\u02a7\2\2\u0822\u0844\7\u00fa\2\2\u0823\u0824\7\u0276\2"+
		"\2\u0824\u0844\7\u0238\2\2\u0825\u0844\7\u0280\2\2\u0826\u0844\7\u0282"+
		"\2\2\u0827\u0844\7\u0090\2\2\u0828\u0844\7\u0092\2\2\u0829\u082a\7\u0294"+
		"\2\2\u082a\u082b\7\u024a\2\2\u082b\u0844\7\u01b5\2\2\u082c\u082d\7\u029b"+
		"\2\2\u082d\u0844\7\u0237\2\2\u082e\u0844\7\u02a2\2\2\u082f\u0830\7\u02a4"+
		"\2\2\u0830\u0832\7\u00e7\2\2\u0831\u0833\7\u02ba\2\2\u0832\u0831\3\2\2"+
		"\2\u0832\u0833\3\2\2\2\u0833\u0844\3\2\2\2\u0834\u0835\7\u02a4\2\2\u0835"+
		"\u0844\7\u0280\2\2\u0836\u0844\7\u02a7\2\2\u0837\u0844\7\u009d\2\2\u0838"+
		"\u0844\7\u02d4\2\2\u0839\u0844\7\u009f\2\2\u083a\u0844\7\u02f0\2\2\u083b"+
		"\u0844\7\u00a7\2\2\u083c\u0844\7\u00b0\2\2\u083d\u0844\7\u00b3\2\2\u083e"+
		"\u083f\7\u030b\2\2\u083f\u0844\7N\2\2\u0840\u0841\7\u030c\2\2\u0841\u0842"+
		"\7\u0092\2\2\u0842\u0844\7\u0118\2\2\u0843\u07eb\3\2\2\2\u0843\u07ec\3"+
		"\2\2\2\u0843\u07ee\3\2\2\2\u0843\u07f0\3\2\2\2\u0843\u07f2\3\2\2\2\u0843"+
		"\u07f3\3\2\2\2\u0843\u07f6\3\2\2\2\u0843\u07f7\3\2\2\2\u0843\u07f8\3\2"+
		"\2\2\u0843\u07fa\3\2\2\2\u0843\u0801\3\2\2\2\u0843\u0802\3\2\2\2\u0843"+
		"\u0803\3\2\2\2\u0843\u080d\3\2\2\2\u0843\u0814\3\2\2\2\u0843\u0815\3\2"+
		"\2\2\u0843\u0818\3\2\2\2\u0843\u081b\3\2\2\2\u0843\u081d\3\2\2\2\u0843"+
		"\u081e\3\2\2\2\u0843\u081f\3\2\2\2\u0843\u0820\3\2\2\2\u0843\u0823\3\2"+
		"\2\2\u0843\u0825\3\2\2\2\u0843\u0826\3\2\2\2\u0843\u0827\3\2\2\2\u0843"+
		"\u0828\3\2\2\2\u0843\u0829\3\2\2\2\u0843\u082c\3\2\2\2\u0843\u082e\3\2"+
		"\2\2\u0843\u082f\3\2\2\2\u0843\u0834\3\2\2\2\u0843\u0836\3\2\2\2\u0843"+
		"\u0837\3\2\2\2\u0843\u0838\3\2\2\2\u0843\u0839\3\2\2\2\u0843\u083a\3\2"+
		"\2\2\u0843\u083b\3\2\2\2\u0843\u083c\3\2\2\2\u0843\u083d\3\2\2\2\u0843"+
		"\u083e\3\2\2\2\u0843\u0840\3\2\2\2\u0844\u0847\3\2\2\2\u0845\u0846\7S"+
		"\2\2\u0846\u0848\7>\2\2\u0847\u0845\3\2\2\2\u0847\u0848\3\2\2\2\u0848"+
		"\u0849\3\2\2\2\u0849\u084e\5\u0310\u0189\2\u084a\u084b\7\u0335\2\2\u084b"+
		"\u084d\5\u0310\u0189\2\u084c\u084a\3\2\2\2\u084d\u0850\3\2\2\2\u084e\u084c"+
		"\3\2\2\2\u084e\u084f\3\2\2\2\u084fo\3\2\2\2\u0850\u084e\3\2\2\2\u0851"+
		"\u0852\7\u015f\2\2\u0852\u0857\t\27\2\2\u0853\u0855\7\u0335\2\2\u0854"+
		"\u0853\3\2\2\2\u0854\u0855\3\2\2\2\u0855\u0856\3\2\2\2\u0856\u0858\5\u0342"+
		"\u01a2\2\u0857\u0854\3\2\2\2\u0858\u0859\3\2\2\2\u0859\u0857\3\2\2\2\u0859"+
		"\u085a\3\2\2\2\u085a\u085b\3\2\2\2\u085b\u0860\7l\2\2\u085c\u0861\7\u02a4"+
		"\2\2\u085d\u0861\7*\2\2\u085e\u085f\7\u024f\2\2\u085f\u0861\5\u0342\u01a2"+
		"\2\u0860\u085c\3\2\2\2\u0860\u085d\3\2\2\2\u0860\u085e\3\2\2\2\u0861q"+
		"\3\2\2\2\u0862\u0863\7@\2\2\u0863\u0864\7\u01b2\2\2\u0864\u0867\5\u0342"+
		"\u01a2\2\u0865\u0866\7\n\2\2\u0866\u0868\5\u0342\u01a2\2\u0867\u0865\3"+
		"\2\2\2\u0867\u0868\3\2\2\2\u0868s\3\2\2\2\u0869\u086a\7\u01c6\2\2\u086a"+
		"\u086b\7\\\2\2\u086bu\3\2\2\2\u086c\u086d\7*\2\2\u086d\u086e\7\u0159\2"+
		"\2\u086e\u086f\7\\\2\2\u086fw\3\2\2\2\u0870\u0872\7\u012b\2\2\u0871\u0870"+
		"\3\2\2\2\u0871\u0872\3\2\2\2\u0872\u0873\3\2\2\2\u0873\u0874\7\u02af\2"+
		"\2\u0874\u0875\7H\2\2\u0875\u0876\5\u0310\u0189\2\u0876\u0882\7\21\2\2"+
		"\u0877\u0879\7\u0335\2\2\u0878\u0877\3\2\2\2\u0878\u0879\3\2\2\2\u0879"+
		"\u087a\3\2\2\2\u087a\u087b\7\u010b\2\2\u087b\u0883\5\u0342\u01a2\2\u087c"+
		"\u087e\7\u0335\2\2\u087d\u087c\3\2\2\2\u087d\u087e\3\2\2\2\u087e\u087f"+
		"\3\2\2\2\u087f\u0880\7\u00e4\2\2\u0880\u0881\7\\\2\2\u0881\u0883\5\u0342"+
		"\u01a2\2\u0882\u0878\3\2\2\2\u0882\u087d\3\2\2\2\u0883\u0884\3\2\2\2\u0884"+
		"\u0882\3\2\2\2\u0884\u0885\3\2\2\2\u0885y\3\2\2\2\u0886\u0887\7\u02d2"+
		"\2\2\u0887\u0888\7\\\2\2\u0888\u088c\5\u0342\u01a2\2\u0889\u088a\7\u0269"+
		"\2\2\u088a\u088b\7\u024c\2\2\u088b\u088d\7\\\2\2\u088c\u0889\3\2\2\2\u088c"+
		"\u088d\3\2\2\2\u088d{\3\2\2\2\u088e\u088f\t\30\2\2\u088f\u0892\7\u00a7"+
		"\2\2\u0890\u0893\5~@\2\u0891\u0893\7\4\2\2\u0892\u0890\3\2\2\2\u0892\u0891"+
		"\3\2\2\2\u0893\u0894\3\2\2\2\u0894\u0899\7l\2\2\u0895\u089a\5\u0310\u0189"+
		"\2\u0896\u089a\7*\2\2\u0897\u0898\7\4\2\2\u0898\u089a\7\u02a4\2\2\u0899"+
		"\u0895\3\2\2\2\u0899\u0896\3\2\2\2\u0899\u0897\3\2\2\2\u089a}\3\2\2\2"+
		"\u089b\u08a0\5\u0310\u0189\2\u089c\u089d\7\u0335\2\2\u089d\u089f\5\u0310"+
		"\u0189\2\u089e\u089c\3\2\2\2\u089f\u08a2\3\2\2\2\u08a0\u089e\3\2\2\2\u08a0"+
		"\u08a1\3\2\2\2\u08a1\177\3\2\2\2\u08a2\u08a0\3\2\2\2\u08a3\u08a4\7\u01bf"+
		"\2\2\u08a4\u08a5\7\u009f\2\2\u08a5\u08a6\5\u0310\u0189\2\u08a6\u08a7\7"+
		"T\2\2\u08a7\u08a8\t\31\2\2\u08a8\u08ac\7\u01f1\2\2\u08a9\u08aa\7\u0304"+
		"\2\2\u08aa\u08ad\7\u031a\2\2\u08ab\u08ad\7\u0211\2\2\u08ac\u08ad\3\2\2"+
		"\2\u08ac\u08a9\3\2\2\2\u08ac\u08ab\3\2\2\2\u08ad\u0081\3\2\2\2\u08ae\u08af"+
		"\7\u00a8\2\2\u08af\u08b0\7\u009f\2\2\u08b0\u08c4\5\u0310\u0189\2\u08b1"+
		"\u08b2\7\u00b8\2\2\u08b2\u08b3\7\u0333\2\2\u08b3\u08b4\7\u0229\2\2\u08b4"+
		"\u08be\7\u0333\2\2\u08b5\u08b7\7\u0335\2\2\u08b6\u08b5\3\2\2\2\u08b6\u08b7"+
		"\3\2\2\2\u08b7\u08bc\3\2\2\2\u08b8\u08bd\7\u031a\2\2\u08b9\u08ba\7\u031a"+
		"\2\2\u08ba\u08bb\7\u00a3\2\2\u08bb\u08bd\7\u031a\2\2\u08bc\u08b8\3\2\2"+
		"\2\u08bc\u08b9\3\2\2\2\u08bd\u08bf\3\2\2\2\u08be\u08b6\3\2\2\2\u08bf\u08c0"+
		"\3\2\2\2\u08c0\u08be\3\2\2\2\u08c0\u08c1\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2"+
		"\u08c3\7\u0334\2\2\u08c3\u08c5\7\u0334\2\2\u08c4\u08b1\3\2\2\2\u08c4\u08c5"+
		"\3\2\2\2\u08c5\u0083\3\2\2\2\u08c6\u08c7\7\32\2\2\u08c7\u08c8\7\u01c6"+
		"\2\2\u08c8\u08c9\7\\\2\2\u08c9\u08ca\5\u0342\u01a2\2\u08ca\u08cb\7\u00b8"+
		"\2\2\u08cb\u08cc\7\u0333\2\2\u08cc\u08cd\7\u01ac\2\2\u08cd\u08ce\7\u0324"+
		"\2\2\u08ce\u08cf\7\u031c\2\2\u08cf\u08d0\7\u0335\2\2\u08d0\u08d1\7\u01aa"+
		"\2\2\u08d1\u08d2\7\u0324\2\2\u08d2\u08d3\7\u031c\2\2\u08d3\u08d4\7\u0334"+
		"\2\2\u08d4\u0085\3\2\2\2\u08d5\u08d6\7\u012f\2\2\u08d6\u08d7\5\u0342\u01a2"+
		"\2\u08d7\u08d8\7\u00b8\2\2\u08d8\u08d9\7P\2\2\u08d9\u08da\7\u0324\2\2"+
		"\u08da\u08df\7\u031c\2\2\u08db\u08dc\7\u0335\2\2\u08dc\u08dd\7\u0299\2"+
		"\2\u08dd\u08de\7\u0324\2\2\u08de\u08e0\7\u031c\2\2\u08df\u08db\3\2\2\2"+
		"\u08df\u08e0\3\2\2\2\u08e0\u0087\3\2\2\2\u08e1\u08e2\7\u012f\2\2\u08e2"+
		"\u08e3\5\u0342\u01a2\2\u08e3\u08e4\7\u00b8\2\2\u08e4\u08e5\7P\2\2\u08e5"+
		"\u08e6\7\u0324\2\2\u08e6\u08eb\7\u031c\2\2\u08e7\u08e8\7\u0335\2\2\u08e8"+
		"\u08e9\7\u0299\2\2\u08e9\u08ea\7\u0324\2\2\u08ea\u08ec\7\u031c\2\2\u08eb"+
		"\u08e7\3\2\2\2\u08eb\u08ec\3\2\2\2\u08ec\u08f1\3\2\2\2\u08ed\u08ee\7D"+
		"\2\2\u08ee\u08ef\7\u0130\2\2\u08ef\u08f0\7\u024c\2\2\u08f0\u08f2\5\u0342"+
		"\u01a2\2\u08f1\u08ed\3\2\2\2\u08f1\u08f2\3\2\2\2\u08f2\u0089\3\2\2\2\u08f3"+
		"\u08f4\7\u0130\2\2\u08f4\u08f5\7\u024c\2\2\u08f5\u08fa\5\u0342\u01a2\2"+
		"\u08f6\u08f7\7H\2\2\u08f7\u08f8\7B\2\2\u08f8\u08f9\7\u0324\2\2\u08f9\u08fb"+
		"\7\u031c\2\2\u08fa\u08f6\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u08fd\3\2\2"+
		"\2\u08fc\u08fe\t\30\2\2\u08fd\u08fc\3\2\2\2\u08fd\u08fe\3\2\2\2\u08fe"+
		"\u008b\3\2\2\2\u08ff\u0900\7\u0130\2\2\u0900\u0901\7\u024c\2\2\u0901\u0902"+
		"\5\u0342\u01a2\2\u0902\u0903\7H\2\2\u0903\u0904\7B\2\2\u0904\u0905\7\u0324"+
		"\2\2\u0905\u0906\7\u031c\2\2\u0906\u008d\3\2\2\2\u0907\u0908\7\u015f\2"+
		"\2\u0908\u0909\7\u020f\2\2\u0909\u090a\5\u0342\u01a2\2\u090a\u090f\7l"+
		"\2\2\u090b\u0910\7\u02a4\2\2\u090c\u0910\7*\2\2\u090d\u090e\7\u024f\2"+
		"\2\u090e\u0910\5\u0342\u01a2\2\u090f\u090b\3\2\2\2\u090f\u090c\3\2\2\2"+
		"\u090f\u090d\3\2\2\2\u0910\u0913\3\2\2\2\u0911\u0912\7\u00b8\2\2\u0912"+
		"\u0914\7\u016f\2\2\u0913\u0911\3\2\2\2\u0913\u0914\3\2\2\2\u0914\u0915"+
		"\3\2\2\2\u0915\u091a\7D\2\2\u0916\u0918\7\u0335\2\2\u0917\u0916\3\2\2"+
		"\2\u0917\u0918\3\2\2\2\u0918\u0919\3\2\2\2\u0919\u091b\5\u0342\u01a2\2"+
		"\u091a\u0917\3\2\2\2\u091b\u091c\3\2\2\2\u091c\u091a\3\2\2\2\u091c\u091d"+
		"\3\2\2\2\u091d\u091e\3\2\2\2\u091e\u091f\7\u00a3\2\2\u091f\u0920\7\u02a7"+
		"\2\2\u0920\u0921\7\u031c\2\2\u0921\u0922\7\u0335\2\2\u0922\u0923\7\u031c"+
		"\2\2\u0923\u008f\3\2\2\2\u0924\u0925\7\u015f\2\2\u0925\u0926\7\u02a9\2"+
		"\2\u0926\u0927\5\u0342\u01a2\2\u0927\u0928\7l\2\2\u0928\u0932\7\u02a4"+
		"\2\2\u0929\u092b\7\u0335\2\2\u092a\u0929\3\2\2\2\u092a\u092b\3\2\2\2\u092b"+
		"\u092e\3\2\2\2\u092c\u092f\5\u0092J\2\u092d\u092f\5\u0096L\2\u092e\u092c"+
		"\3\2\2\2\u092e\u092d\3\2\2\2\u092f\u0931\3\2\2\2\u0930\u092a\3\2\2\2\u0931"+
		"\u0934\3\2\2\2\u0932\u0930\3\2\2\2\u0932\u0933\3\2\2\2\u0933\u0936\3\2"+
		"\2\2\u0934\u0932\3\2\2\2\u0935\u0937\5\u009aN\2\u0936\u0935\3\2\2\2\u0936"+
		"\u0937\3\2\2\2\u0937\u093b\3\2\2\2\u0938\u0939\7\u02c5\2\2\u0939\u093a"+
		"\7\u0324\2\2\u093a\u093c\t\32\2\2\u093b\u0938\3\2\2\2\u093b\u093c\3\2"+
		"\2\2\u093c\u0091\3\2\2\2\u093d\u093e\7\3\2\2\u093e\u0942\7\u015f\2\2\u093f"+
		"\u0940\5\u0342\u01a2\2\u0940\u0941\7\u0330\2\2\u0941\u0943\3\2\2\2\u0942"+
		"\u093f\3\2\2\2\u0942\u0943\3\2\2\2\u0943\u0944\3\2\2\2\u0944\u0945\5\u0342"+
		"\u01a2\2\u0945\u0946\7\u0330\2\2\u0946\u0947\5\u0342\u01a2\2\u0947\u0969"+
		"\3\2\2\2\u0948\u0954\7\u0333\2\2\u0949\u094a\7\u0099\2\2\u094a\u0951\5"+
		"\u0098M\2\u094b\u094d\7\u0335\2\2\u094c\u094b\3\2\2\2\u094c\u094d\3\2"+
		"\2\2\u094d\u094e\3\2\2\2\u094e\u0950\5\u0098M\2\u094f\u094c\3\2\2\2\u0950"+
		"\u0953\3\2\2\2\u0951\u094f\3\2\2\2\u0951\u0952\3\2\2\2\u0952\u0955\3\2"+
		"\2\2\u0953\u0951\3\2\2\2\u0954\u0949\3\2\2\2\u0954\u0955\3\2\2\2\u0955"+
		"\u0962\3\2\2\2\u0956\u0957\7\u00c7\2\2\u0957\u0958\7\u0333\2\2\u0958\u095d"+
		"\5\u0094K\2\u0959\u095a\7\u0335\2\2\u095a\u095c\5\u0094K\2\u095b\u0959"+
		"\3\2\2\2\u095c\u095f\3\2\2\2\u095d\u095b\3\2\2\2\u095d\u095e\3\2\2\2\u095e"+
		"\u0960\3\2\2\2\u095f\u095d\3\2\2\2\u0960\u0961\7\u0334\2\2\u0961\u0963"+
		"\3\2\2\2\u0962\u0956\3\2\2\2\u0962\u0963\3\2\2\2\u0963\u0966\3\2\2\2\u0964"+
		"\u0965\7\u00b6\2\2\u0965\u0967\5\u009cO\2\u0966\u0964\3\2\2\2\u0966\u0967"+
		"\3\2\2\2\u0967\u0968\3\2\2\2\u0968\u096a\7\u0334\2\2\u0969\u0948\3\2\2"+
		"\2\u0969\u096a\3\2\2\2\u096a\u0977\3\2\2\2\u096b\u096c\7\66\2\2\u096c"+
		"\u0970\7\u015f\2\2\u096d\u096e\5\u0342\u01a2\2\u096e\u096f\7\u0330\2\2"+
		"\u096f\u0971\3\2\2\2\u0970\u096d\3\2\2\2\u0970\u0971\3\2\2\2\u0971\u0972"+
		"\3\2\2\2\u0972\u0973\5\u0342\u01a2\2\u0973\u0974\7\u0330\2\2\u0974\u0975"+
		"\5\u0342\u01a2\2\u0975\u0977\3\2\2\2\u0976\u093d\3\2\2\2\u0976\u096b\3"+
		"\2\2\2\u0977\u0093\3\2\2\2\u0978\u0979\5\u0342\u01a2\2\u0979\u097a\7\u0330"+
		"\2\2\u097a\u097c\3\2\2\2\u097b\u0978\3\2\2\2\u097b\u097c\3\2\2\2\u097c"+
		"\u097d\3\2\2\2\u097d\u097e\5\u0342\u01a2\2\u097e\u097f\7\u0330\2\2\u097f"+
		"\u0980\5\u0342\u01a2\2\u0980\u0095\3\2\2\2\u0981\u0982\7\3\2\2\u0982\u0986"+
		"\7\u02d9\2\2\u0983\u0984\5\u0342\u01a2\2\u0984\u0985\7\u0330\2\2\u0985"+
		"\u0987\3\2\2\2\u0986\u0983\3\2\2\2\u0986\u0987\3\2\2\2\u0987\u0988\3\2"+
		"\2\2\u0988\u0989\5\u0342\u01a2\2\u0989\u098a\7\u0330\2\2\u098a\u0999\5"+
		"\u0342\u01a2\2\u098b\u098c\7\u0333\2\2\u098c\u098d\7\u0099\2\2\u098d\u0994"+
		"\5\u0098M\2\u098e\u0990\7\u0335\2\2\u098f\u098e\3\2\2\2\u098f\u0990\3"+
		"\2\2\2\u0990\u0991\3\2\2\2\u0991\u0993\5\u0098M\2\u0992\u098f\3\2\2\2"+
		"\u0993\u0996\3\2\2\2\u0994\u0992\3\2\2\2\u0994\u0995\3\2\2\2\u0995\u0997"+
		"\3\2\2\2\u0996\u0994\3\2\2\2\u0997\u0998\7\u0334\2\2\u0998\u099a\3\2\2"+
		"\2\u0999\u098b\3\2\2\2\u0999\u099a\3\2\2\2\u099a\u09a7\3\2\2\2\u099b\u099c"+
		"\7\66\2\2\u099c\u09a0\7\u02d9\2\2\u099d\u099e\5\u0342\u01a2\2\u099e\u099f"+
		"\7\u0330\2\2\u099f\u09a1\3\2\2\2\u09a0\u099d\3\2\2\2\u09a0\u09a1\3\2\2"+
		"\2\u09a1\u09a2\3\2\2\2\u09a2\u09a3\5\u0342\u01a2\2\u09a3\u09a4\7\u0330"+
		"\2\2\u09a4\u09a5\5\u0342\u01a2\2\u09a5\u09a7\3\2\2\2\u09a6\u0981\3\2\2"+
		"\2\u09a6\u099b\3\2\2\2\u09a7\u0097\3\2\2\2\u09a8\u09a9\5\u0342\u01a2\2"+
		"\u09a9\u09b2\7\u0324\2\2\u09aa\u09ac\7\u0333\2\2\u09ab\u09aa\3\2\2\2\u09ab"+
		"\u09ac\3\2\2\2\u09ac\u09ad\3\2\2\2\u09ad\u09af\7\u031a\2\2\u09ae\u09b0"+
		"\7\u0334\2\2\u09af\u09ae\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09b3\3\2\2"+
		"\2\u09b1\u09b3\7\u031c\2\2\u09b2\u09ab\3\2\2\2\u09b2\u09b1\3\2\2\2\u09b3"+
		"\u0099\3\2\2\2\u09b4\u09b5\7\u00b8\2\2\u09b5\u09bd\7\u0333\2\2\u09b6\u09b8"+
		"\7\u0335\2\2\u09b7\u09b6\3\2\2\2\u09b7\u09b8\3\2\2\2\u09b8\u09b9\3\2\2"+
		"\2\u09b9\u09ba\7\u01d0\2\2\u09ba\u09bb\7\u0324\2\2\u09bb\u09bc\7\u031a"+
		"\2\2\u09bc\u09be\t\33\2\2\u09bd\u09b7\3\2\2\2\u09bd\u09be\3\2\2\2\u09be"+
		"\u09c5\3\2\2\2\u09bf\u09c1\7\u0335\2\2\u09c0\u09bf\3\2\2\2\u09c0\u09c1"+
		"\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c3\7\u015e\2\2\u09c3\u09c4\7\u0324"+
		"\2\2\u09c4\u09c6\t\34\2\2\u09c5\u09c0\3\2\2\2\u09c5\u09c6\3\2\2\2\u09c6"+
		"\u09d1\3\2\2\2\u09c7\u09c9\7\u0335\2\2\u09c8\u09c7\3\2\2\2\u09c8\u09c9"+
		"\3\2\2\2\u09c9\u09ca\3\2\2\2\u09ca\u09cb\7\u01ca\2\2\u09cb\u09cf\7\u0324"+
		"\2\2\u09cc\u09cd\7\u031a\2\2\u09cd\u09d0\7\u0298\2\2\u09ce\u09d0\7\u019c"+
		"\2\2\u09cf\u09cc\3\2\2\2\u09cf\u09ce\3\2\2\2\u09d0\u09d2\3\2\2\2\u09d1"+
		"\u09c8\3\2\2\2\u09d1\u09d2\3\2\2\2\u09d2\u09da\3\2\2\2\u09d3\u09d5\7\u0335"+
		"\2\2\u09d4\u09d3\3\2\2\2\u09d4\u09d5\3\2\2\2\u09d5\u09d6\3\2\2\2\u09d6"+
		"\u09d7\7\u01cc\2\2\u09d7\u09d8\7\u0324\2\2\u09d8\u09d9\7\u031a\2\2\u09d9"+
		"\u09db\t\33\2\2\u09da\u09d4\3\2\2\2\u09da\u09db\3\2\2\2\u09db\u09e2\3"+
		"\2\2\2\u09dc\u09de\7\u0335\2\2\u09dd\u09dc\3\2\2\2\u09dd\u09de\3\2\2\2"+
		"\u09de\u09df\3\2\2\2\u09df\u09e0\7\u01e4\2\2\u09e0\u09e1\7\u0324\2\2\u09e1"+
		"\u09e3\t\35\2\2\u09e2\u09dd\3\2\2\2\u09e2\u09e3\3\2\2\2\u09e3\u09ea\3"+
		"\2\2\2\u09e4\u09e6\7\u0335\2\2\u09e5\u09e4\3\2\2\2\u09e5\u09e6\3\2\2\2"+
		"\u09e6\u09e7\3\2\2\2\u09e7\u09e8\7\u02e3\2\2\u09e8\u09e9\7\u0324\2\2\u09e9"+
		"\u09eb\5\u031e\u0190\2\u09ea\u09e5\3\2\2\2\u09ea\u09eb\3\2\2\2\u09eb\u09f2"+
		"\3\2\2\2\u09ec\u09ee\7\u0335\2\2\u09ed\u09ec\3\2\2\2\u09ed\u09ee\3\2\2"+
		"\2\u09ee\u09ef\3\2\2\2\u09ef\u09f0\7\u02c4\2\2\u09f0\u09f1\7\u0324\2\2"+
		"\u09f1\u09f3\5\u031e\u0190\2\u09f2\u09ed\3\2\2\2\u09f2\u09f3\3\2\2\2\u09f3"+
		"\u09f4\3\2\2\2\u09f4\u09f5\7\u0334\2\2\u09f5\u009b\3\2\2\2\u09f6\u09f8"+
		"\7\u0335\2\2\u09f7\u09f6\3\2\2\2\u09f7\u09f8\3\2\2\2\u09f8\u09fa\3\2\2"+
		"\2\u09f9\u09fb\t\36\2\2\u09fa\u09f9\3\2\2\2\u09fa\u09fb\3\2\2\2\u09fb"+
		"\u09fd\3\2\2\2\u09fc\u09fe\7f\2\2\u09fd\u09fc\3\2\2\2\u09fd\u09fe\3\2"+
		"\2\2\u09fe\u0a04\3\2\2\2\u09ff\u0a05\5\u009eP\2\u0a00\u0a01\7\u0333\2"+
		"\2\u0a01\u0a02\5\u009cO\2\u0a02\u0a03\7\u0334\2\2\u0a03\u0a05\3\2\2\2"+
		"\u0a04\u09ff\3\2\2\2\u0a04\u0a00\3\2\2\2\u0a05\u0a07\3\2\2\2\u0a06\u09f7"+
		"\3\2\2\2\u0a07\u0a08\3\2\2\2\u0a08\u0a06\3\2\2\2\u0a08\u0a09\3\2\2\2\u0a09"+
		"\u009d\3\2\2\2\u0a0a\u0a10\5\u00a0Q\2\u0a0b\u0a0c\7\u0333\2\2\u0a0c\u0a0d"+
		"\5\u009cO\2\u0a0d\u0a0e\7\u0334\2\2\u0a0e\u0a10\3\2\2\2\u0a0f\u0a0a\3"+
		"\2\2\2\u0a0f\u0a0b\3\2\2\2\u0a10\u009f\3\2\2\2\u0a11\u0a48\5\u0342\u01a2"+
		"\2\u0a12\u0a1d\5\u0342\u01a2\2\u0a13\u0a14\5\u0342\u01a2\2\u0a14\u0a15"+
		"\7\u0330\2\2\u0a15\u0a17\3\2\2\2\u0a16\u0a13\3\2\2\2\u0a16\u0a17\3\2\2"+
		"\2\u0a17\u0a18\3\2\2\2\u0a18\u0a19\5\u0342\u01a2\2\u0a19\u0a1a\7\u0330"+
		"\2\2\u0a1a\u0a1b\5\u0342\u01a2\2\u0a1b\u0a1d\3\2\2\2\u0a1c\u0a12\3\2\2"+
		"\2\u0a1c\u0a16\3\2\2\2\u0a1d\u0a29\3\2\2\2\u0a1e\u0a2a\7\u0324\2\2\u0a1f"+
		"\u0a20\7\u0326\2\2\u0a20\u0a2a\7\u0325\2\2\u0a21\u0a22\7\u0327\2\2\u0a22"+
		"\u0a2a\7\u0324\2\2\u0a23\u0a2a\7\u0325\2\2\u0a24\u0a25\7\u0325\2\2\u0a25"+
		"\u0a2a\7\u0324\2\2\u0a26\u0a2a\7\u0326\2\2\u0a27\u0a28\7\u0326\2\2\u0a28"+
		"\u0a2a\7\u0324\2\2\u0a29\u0a1e\3\2\2\2\u0a29\u0a1f\3\2\2\2\u0a29\u0a21"+
		"\3\2\2\2\u0a29\u0a23\3\2\2\2\u0a29\u0a24\3\2\2\2\u0a29\u0a26\3\2\2\2\u0a29"+
		"\u0a27\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u0a2c\t\37\2\2\u0a2c\u0a48\3"+
		"\2\2\2\u0a2d\u0a2e\5\u0342\u01a2\2\u0a2e\u0a2f\7\u0330\2\2\u0a2f\u0a31"+
		"\3\2\2\2\u0a30\u0a2d\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31\u0a32\3\2\2\2\u0a32"+
		"\u0a33\5\u0342\u01a2\2\u0a33\u0a34\7\u0330\2\2\u0a34\u0a35\5\u0342\u01a2"+
		"\2\u0a35\u0a43\7\u0333\2\2\u0a36\u0a44\5\u0342\u01a2\2\u0a37\u0a38\5\u0342"+
		"\u01a2\2\u0a38\u0a39\7\u0330\2\2\u0a39\u0a3b\3\2\2\2\u0a3a\u0a37\3\2\2"+
		"\2\u0a3a\u0a3b\3\2\2\2\u0a3b\u0a3c\3\2\2\2\u0a3c\u0a3d\5\u0342\u01a2\2"+
		"\u0a3d\u0a3e\7\u0330\2\2\u0a3e\u0a3f\5\u0342\u01a2\2\u0a3f\u0a40\3\2\2"+
		"\2\u0a40\u0a41\7\u0335\2\2\u0a41\u0a42\t\37\2\2\u0a42\u0a44\3\2\2\2\u0a43"+
		"\u0a36\3\2\2\2\u0a43\u0a3a\3\2\2\2\u0a44\u0a45\3\2\2\2\u0a45\u0a46\7\u0334"+
		"\2\2\u0a46\u0a48\3\2\2\2\u0a47\u0a11\3\2\2\2\u0a47\u0a1c\3\2\2\2\u0a47"+
		"\u0a30\3\2\2\2\u0a48\u00a1\3\2\2\2\u0a49\u0a4a\7@\2\2\u0a4a\u0a4b\7\u0136"+
		"\2\2\u0a4b\u0a4c\7\u02b7\2\2\u0a4c\u0a4d\5\u0342\u01a2\2\u0a4d\u0a5d\7"+
		"\u0099\2\2\u0a4e\u0a4f\7\u01bd\2\2\u0a4f\u0a50\7\u0324\2\2\u0a50\u0a52"+
		"\7\u031c\2\2\u0a51\u0a53\7\u0335\2\2\u0a52\u0a51\3\2\2\2\u0a52\u0a53\3"+
		"\2\2\2\u0a53\u0a5e\3\2\2\2\u0a54\u0a55\7\u0275\2\2\u0a55\u0a56\7\u0324"+
		"\2\2\u0a56\u0a58\7\u031c\2\2\u0a57\u0a59\7\u0335\2\2\u0a58\u0a57\3\2\2"+
		"\2\u0a58\u0a59\3\2\2\2\u0a59\u0a5e\3\2\2\2\u0a5a\u0a5b\7\u012f\2\2\u0a5b"+
		"\u0a5c\7\u0324\2\2\u0a5c\u0a5e\5\u0342\u01a2\2\u0a5d\u0a4e\3\2\2\2\u0a5d"+
		"\u0a54\3\2\2\2\u0a5d\u0a5a\3\2\2\2\u0a5e\u0a5f\3\2\2\2\u0a5f\u0a5d\3\2"+
		"\2\2\u0a5f\u0a60\3\2\2\2\u0a60\u0a77\3\2\2\2\u0a61\u0a62\7@\2\2\u0a62"+
		"\u0a63\7\u0136\2\2\u0a63\u0a64\7\u02b7\2\2\u0a64\u0a65\5\u0342\u01a2\2"+
		"\u0a65\u0a66\7\u00b8\2\2\u0a66\u0a67\7\u0333\2\2\u0a67\u0a68\7\u02f0\2"+
		"\2\u0a68\u0a69\7\u0324\2\2\u0a69\u0a6a\7\u00fb\2\2\u0a6a\u0a6b\7\u0335"+
		"\2\2\u0a6b\u0a6c\7\u01bd\2\2\u0a6c\u0a6d\7\u0324\2\2\u0a6d\u0a72\7\u031c"+
		"\2\2\u0a6e\u0a6f\7\u0335\2\2\u0a6f\u0a70\7\u012f\2\2\u0a70\u0a71\7\u0324"+
		"\2\2\u0a71\u0a73\5\u0342\u01a2\2\u0a72\u0a6e\3\2\2\2\u0a72\u0a73\3\2\2"+
		"\2\u0a73\u0a74\3\2\2\2\u0a74\u0a75\7\u0334\2\2\u0a75\u0a77\3\2\2\2\u0a76"+
		"\u0a49\3\2\2\2\u0a76\u0a61\3\2\2\2\u0a77\u00a3\3\2\2\2\u0a78\u0a79\7@"+
		"\2\2\u0a79\u0a7a\7\u01b2\2\2\u0a7a\u0a7d\5\u0342\u01a2\2\u0a7b\u0a7c\7"+
		"\n\2\2\u0a7c\u0a7e\5\u0342\u01a2\2\u0a7d\u0a7b\3\2\2\2\u0a7d\u0a7e\3\2"+
		"\2\2\u0a7e\u0a7f\3\2\2\2\u0a7f\u0a80\t \2\2\u0a80\u0a81\7\u0333\2\2\u0a81"+
		"\u0a82\7\u0122\2\2\u0a82\u0a86\7\u0324\2\2\u0a83\u0a87\7\u031c\2\2\u0a84"+
		"\u0a87\7\u031d\2\2\u0a85\u0a87\7\u020a\2\2\u0a86\u0a83\3\2\2\2\u0a86\u0a84"+
		"\3\2\2\2\u0a86\u0a85\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u0a89\7\u0335\2"+
		"\2\u0a89\u0a8a\7\u0235\2\2\u0a8a\u0a8c\7\u0324\2\2\u0a8b\u0a8d\t!\2\2"+
		"\u0a8c\u0a8b\3\2\2\2\u0a8c\u0a8d\3\2\2\2\u0a8d\u0a8e\3\2\2\2\u0a8e\u0a8f"+
		"\7\u0334\2\2\u0a8f\u0a90\3\2\2\2\u0a90\u0a9a\7\u00b8\2\2\u0a91\u0a93\7"+
		"\u0335\2\2\u0a92\u0a91\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93\u0a94\3\2\2\2"+
		"\u0a94\u0a95\7\u01af\2\2\u0a95\u0a96\7\u0324\2\2\u0a96\u0a9b\t\"\2\2\u0a97"+
		"\u0a98\7\u0135\2\2\u0a98\u0a99\7\u0324\2\2\u0a99\u0a9b\5\u0342\u01a2\2"+
		"\u0a9a\u0a92\3\2\2\2\u0a9a\u0a97\3\2\2\2\u0a9b\u0a9c\3\2\2\2\u0a9c\u0a9a"+
		"\3\2\2\2\u0a9c\u0a9d\3\2\2\2\u0a9d\u0a9e\3\2\2\2\u0a9e\u0a9f\7\u0334\2"+
		"\2\u0a9f\u00a5\3\2\2\2\u0aa0\u0aa1\7@\2\2\u0aa1\u0aa2\7\u01b2\2\2\u0aa2"+
		"\u0aa5\5\u0342\u01a2\2\u0aa3\u0aa4\7\n\2\2\u0aa4\u0aa6\5\u0342\u01a2\2"+
		"\u0aa5\u0aa3\3\2\2\2\u0aa5\u0aa6\3\2\2\2\u0aa6\u0aa7\3\2\2\2\u0aa7\u0aa9"+
		"\7H\2\2\u0aa8\u0aaa\7\u0335\2\2\u0aa9\u0aa8\3\2\2\2\u0aa9\u0aaa\3\2\2"+
		"\2\u0aaa\u0aac\3\2\2\2\u0aab\u0aad\7\u0333\2\2\u0aac\u0aab\3\2\2\2\u0aac"+
		"\u0aad\3\2\2\2\u0aad\u0ab0\3\2\2\2\u0aae\u0aaf\7\u0122\2\2\u0aaf\u0ab1"+
		"\7\u0324\2\2\u0ab0\u0aae\3\2\2\2\u0ab0\u0ab1\3\2\2\2\u0ab1\u0ab5\3\2\2"+
		"\2\u0ab2\u0ab6\7\u031c\2\2\u0ab3\u0ab6\7\u031d\2\2\u0ab4\u0ab6\7\u020a"+
		"\2\2\u0ab5\u0ab2\3\2\2\2\u0ab5\u0ab3\3\2\2\2\u0ab5\u0ab4\3\2\2\2\u0ab6"+
		"\u0abe\3\2\2\2\u0ab7\u0ab8\7\u0335\2\2\u0ab8\u0ab9\7\u0235\2\2\u0ab9\u0abb"+
		"\7\u0324\2\2\u0aba\u0abc\t!\2\2\u0abb\u0aba\3\2\2\2\u0abb\u0abc\3\2\2"+
		"\2\u0abc\u0abd\3\2\2\2\u0abd\u0abf\7\u0334\2\2\u0abe\u0ab7\3\2\2\2\u0abe"+
		"\u0abf\3\2\2\2\u0abf\u0acf\3\2\2\2\u0ac0\u0aca\7\u00b8\2\2\u0ac1\u0ac3"+
		"\7\u0335\2\2\u0ac2\u0ac1\3\2\2\2\u0ac2\u0ac3\3\2\2\2\u0ac3\u0ac4\3\2\2"+
		"\2\u0ac4\u0ac5\7\u01af\2\2\u0ac5\u0ac6\7\u0324\2\2\u0ac6\u0acb\t\"\2\2"+
		"\u0ac7\u0ac8\7\u0135\2\2\u0ac8\u0ac9\7\u0324\2\2\u0ac9\u0acb\5\u0342\u01a2"+
		"\2\u0aca\u0ac2\3\2\2\2\u0aca\u0ac7\3\2\2\2\u0acb\u0acc\3\2\2\2\u0acc\u0aca"+
		"\3\2\2\2\u0acc\u0acd\3\2\2\2\u0acd\u0ace\3\2\2\2\u0ace\u0ad0\7\u0334\2"+
		"\2\u0acf\u0ac0\3\2\2\2\u0acf\u0ad0\3\2\2\2\u0ad0\u00a7\3\2\2\2\u0ad1\u0ad2"+
		"\7@\2\2\u0ad2\u0ad3\7\u0276\2\2\u0ad3\u0ad4\7\u0238\2\2\u0ad4\u0ad5\5"+
		"\u0342\u01a2\2\u0ad5\u0ad6\7\u00b8\2\2\u0ad6\u0ad7\7\u0333\2\2\u0ad7\u0ad8"+
		"\7\u01c9\2\2\u0ad8\u0ad9\7\u0324\2\2\u0ad9\u0aff\7\u031a\2\2\u0ada\u0adc"+
		"\7\u0335\2\2\u0adb\u0ada\3\2\2\2\u0adb\u0adc\3\2\2\2\u0adc\u0add\3\2\2"+
		"\2\u0add\u0ade\7\u00cf\2\2\u0ade\u0adf\7\u012c\2\2\u0adf\u0aed\7\u0324"+
		"\2\2\u0ae0\u0aee\7\u00ef\2\2\u0ae1\u0ae3\7\u0335\2\2\u0ae2\u0ae1\3\2\2"+
		"\2\u0ae2\u0ae3\3\2\2\2\u0ae3\u0ae4\3\2\2\2\u0ae4\u0ae5\7\u031a\2\2\u0ae5"+
		"\u0ae6\7\u00a3\2\2\u0ae6\u0aea\7\u031a\2\2\u0ae7\u0ae8\7\u0335\2\2\u0ae8"+
		"\u0aea\7\u031a\2\2\u0ae9\u0ae2\3\2\2\2\u0ae9\u0ae7\3\2\2\2\u0aea\u0aeb"+
		"\3\2\2\2\u0aeb\u0ae9\3\2\2\2\u0aeb\u0aec\3\2\2\2\u0aec\u0aee\3\2\2\2\u0aed"+
		"\u0ae0\3\2\2\2\u0aed\u0ae9\3\2\2\2\u0aee\u0b00\3\2\2\2\u0aef\u0af0\7\u0213"+
		"\2\2\u0af0\u0afb\7\u0324\2\2\u0af1\u0af3\7\u0335\2\2\u0af2\u0af1\3\2\2"+
		"\2\u0af2\u0af3\3\2\2\2\u0af3\u0af4\3\2\2\2\u0af4\u0af5\7\u031a\2\2\u0af5"+
		"\u0af6\7\u00a3\2\2\u0af6\u0afc\7\u031a\2\2\u0af7\u0af9\7\u0335\2\2\u0af8"+
		"\u0af7\3\2\2\2\u0af8\u0af9\3\2\2\2\u0af9\u0afa\3\2\2\2\u0afa\u0afc\7\u031a"+
		"\2\2\u0afb\u0af2\3\2\2\2\u0afb\u0af8\3\2\2\2\u0afc\u0afd\3\2\2\2\u0afd"+
		"\u0afb\3\2\2\2\u0afd\u0afe\3\2\2\2\u0afe\u0b00\3\2\2\2\u0aff\u0adb\3\2"+
		"\2\2\u0aff\u0aef\3\2\2\2\u0b00\u0b07\3\2\2\2\u0b01\u0b03\7\u0335\2\2\u0b02"+
		"\u0b01\3\2\2\2\u0b02\u0b03\3\2\2\2\u0b03\u0b04\3\2\2\2\u0b04\u0b05\7\u01cf"+
		"\2\2\u0b05\u0b06\7\u0324\2\2\u0b06\u0b08\7\u031a\2\2\u0b07\u0b02\3\2\2"+
		"\2\u0b07\u0b08\3\2\2\2\u0b08\u0b0f\3\2\2\2\u0b09\u0b0b\7\u0335\2\2\u0b0a"+
		"\u0b09\3\2\2\2\u0b0a\u0b0b\3\2\2\2\u0b0b\u0b0c\3\2\2\2\u0b0c\u0b0d\7\u01d2"+
		"\2\2\u0b0d\u0b0e\7\u0324\2\2\u0b0e\u0b10\7\u031a\2\2\u0b0f\u0b0a\3\2\2"+
		"\2\u0b0f\u0b10\3\2\2\2\u0b10\u0b11\3\2\2\2\u0b11\u0b12\7\u0334\2\2\u0b12"+
		"\u00a9\3\2\2\2\u0b13\u0b14\7@\2\2\u0b14\u0b15\7\u0276\2\2\u0b15\u0b16"+
		"\7\u0238\2\2\u0b16\u0b17\5\u0342\u01a2\2\u0b17\u0b18\7\u00b8\2\2\u0b18"+
		"\u0b19\7\u0333\2\2\u0b19\u0b1a\7\u01c9\2\2\u0b1a\u0b1b\7\u0324\2\2\u0b1b"+
		"\u0b41\7\u031a\2\2\u0b1c\u0b1e\7\u0335\2\2\u0b1d\u0b1c\3\2\2\2\u0b1d\u0b1e"+
		"\3\2\2\2\u0b1e\u0b1f\3\2\2\2\u0b1f\u0b20\7\u00cf\2\2\u0b20\u0b21\7\u012c"+
		"\2\2\u0b21\u0b2f\7\u0324\2\2\u0b22\u0b30\7\u00ef\2\2\u0b23\u0b25\7\u0335"+
		"\2\2\u0b24\u0b23\3\2\2\2\u0b24\u0b25\3\2\2\2\u0b25\u0b26\3\2\2\2\u0b26"+
		"\u0b27\7\u031a\2\2\u0b27\u0b28\7\u00a3\2\2\u0b28\u0b2c\7\u031a\2\2\u0b29"+
		"\u0b2a\7\u0335\2\2\u0b2a\u0b2c\7\u031a\2\2\u0b2b\u0b24\3\2\2\2\u0b2b\u0b29"+
		"\3\2\2\2\u0b2c\u0b2d\3\2\2\2\u0b2d\u0b2b\3\2\2\2\u0b2d\u0b2e\3\2\2\2\u0b2e"+
		"\u0b30\3\2\2\2\u0b2f\u0b22\3\2\2\2\u0b2f\u0b2b\3\2\2\2\u0b30\u0b42\3\2"+
		"\2\2\u0b31\u0b32\7\u0213\2\2\u0b32\u0b3d\7\u0324\2\2\u0b33\u0b35\7\u0335"+
		"\2\2\u0b34\u0b33\3\2\2\2\u0b34\u0b35\3\2\2\2\u0b35\u0b36\3\2\2\2\u0b36"+
		"\u0b37\7\u031a\2\2\u0b37\u0b38\7\u00a3\2\2\u0b38\u0b3e\7\u031a\2\2\u0b39"+
		"\u0b3b\7\u0335\2\2\u0b3a\u0b39\3\2\2\2\u0b3a\u0b3b\3\2\2\2\u0b3b\u0b3c"+
		"\3\2\2\2\u0b3c\u0b3e\7\u031a\2\2\u0b3d\u0b34\3\2\2\2\u0b3d\u0b3a\3\2\2"+
		"\2\u0b3e\u0b3f\3\2\2\2\u0b3f\u0b3d\3\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b42"+
		"\3\2\2\2\u0b41\u0b1d\3\2\2\2\u0b41\u0b31\3\2\2\2\u0b42\u0b49\3\2\2\2\u0b43"+
		"\u0b45\7\u0335\2\2\u0b44\u0b43\3\2\2\2\u0b44\u0b45\3\2\2\2\u0b45\u0b46"+
		"\3\2\2\2\u0b46\u0b47\7\u01cf\2\2\u0b47\u0b48\7\u0324\2\2\u0b48\u0b4a\7"+
		"\u031a\2\2\u0b49\u0b44\3\2\2\2\u0b49\u0b4a\3\2\2\2\u0b4a\u0b51\3\2\2\2"+
		"\u0b4b\u0b4d\7\u0335\2\2\u0b4c\u0b4b\3\2\2\2\u0b4c\u0b4d\3\2\2\2\u0b4d"+
		"\u0b4e\3\2\2\2\u0b4e\u0b4f\7\u01d2\2\2\u0b4f\u0b50\7\u0324\2\2\u0b50\u0b52"+
		"\7\u031a\2\2\u0b51\u0b4c\3\2\2\2\u0b51\u0b52\3\2\2\2\u0b52\u0b53\3\2\2"+
		"\2\u0b53\u0b54\7\u0334\2\2\u0b54\u00ab\3\2\2\2\u0b55\u0b56\7@\2\2\u0b56"+
		"\u0b57\7\u009f\2\2\u0b57\u0b58\5\u0310\u0189\2\u0b58\u0b59\7\u0333\2\2"+
		"\u0b59\u0b5a\5\u026c\u0137\2\u0b5a\u0b5b\7\u0334\2\2\u0b5b\u0b5c\7\u00b8"+
		"\2\2\u0b5c\u0b5d\7\u0333\2\2\u0b5d\u0b62\5\u00aeX\2\u0b5e\u0b5f\7\u0335"+
		"\2\2\u0b5f\u0b61\5\u00aeX\2\u0b60\u0b5e\3\2\2\2\u0b61\u0b64\3\2\2\2\u0b62"+
		"\u0b60\3\2\2\2\u0b62\u0b63\3\2\2\2\u0b63\u0b65\3\2\2\2\u0b64\u0b62\3\2"+
		"\2\2\u0b65\u0b66\7\u0334\2\2\u0b66\u00ad\3\2\2\2\u0b67\u0b68\5\u0342\u01a2"+
		"\2\u0b68\u0b69\7\u0324\2\2\u0b69\u0b6a\5\u0290\u0149\2\u0b6a\u00af\3\2"+
		"\2\2\u0b6b\u0b6c\7\u0184\2\2\u0b6c\u0b6d\7\u0109\2\2\u0b6d\u0b78\5\u0342"+
		"\u01a2\2\u0b6e\u0b73\7\u025e\2\2\u0b6f\u0b70\7\u00b8\2\2\u0b70\u0b71\7"+
		"\u00c6\2\2\u0b71\u0b72\7\u0324\2\2\u0b72\u0b74\t\b\2\2\u0b73\u0b6f\3\2"+
		"\2\2\u0b73\u0b74\3\2\2\2\u0b74\u0b79\3\2\2\2\u0b75\u0b79\7\u026a\2\2\u0b76"+
		"\u0b77\7\b\2\2\u0b77\u0b79\7.\2\2\u0b78\u0b6e\3\2\2\2\u0b78\u0b75\3\2"+
		"\2\2\u0b78\u0b76\3\2\2\2\u0b79\u00b1\3\2\2\2\u0b7a\u0b7b\7\u0184\2\2\u0b7b"+
		"\u0b7c\7\u0109\2\2\u0b7c\u0b80\5\u0342\u01a2\2\u0b7d\u0b7e\7l\2\2\u0b7e"+
		"\u0b7f\7\u0173\2\2\u0b7f\u0b81\5\u0342\u01a2\2\u0b80\u0b7d\3\2\2\2\u0b80"+
		"\u0b81\3\2\2\2\u0b81\u0b85\3\2\2\2\u0b82\u0b83\7T\2\2\u0b83\u0b84\7\u022c"+
		"\2\2\u0b84\u0b86\7\u031c\2\2\u0b85\u0b82\3\2\2\2\u0b85\u0b86\3\2\2\2\u0b86"+
		"\u0b8b\3\2\2\2\u0b87\u0b88\7\u00b8\2\2\u0b88\u0b89\7\u00c6\2\2\u0b89\u0b8a"+
		"\7\u0324\2\2\u0b8a\u0b8c\t\b\2\2\u0b8b\u0b87\3\2\2\2\u0b8b\u0b8c\3\2\2"+
		"\2\u0b8c\u0b8f\3\2\2\2\u0b8d\u0b8e\7\b\2\2\u0b8e\u0b90\7.\2\2\u0b8f\u0b8d"+
		"\3\2\2\2\u0b8f\u0b90\3\2\2\2\u0b90\u0b93\3\2\2\2\u0b91\u0b92\7\n\2\2\u0b92"+
		"\u0b94\5\u0342\u01a2\2\u0b93\u0b91\3\2\2\2\u0b93\u0b94\3\2\2\2\u0b94\u00b3"+
		"\3\2\2\2\u0b95\u0b96\7\u0184\2\2\u0b96\u0b97\7\u02cc\2\2\u0b97\u0ba5\5"+
		"\u0342\u01a2\2\u0b98\u0b99\7\3\2\2\u0b99\u0b9a\7\u031c\2\2\u0b9a\u0b9b"+
		"\7\u01af\2\2\u0b9b\u0ba6\t#\2\2\u0b9c\u0ba3\7\66\2\2\u0b9d\u0b9e\7\u031c"+
		"\2\2\u0b9e\u0b9f\7\u01af\2\2\u0b9f\u0ba4\t#\2\2\u0ba0\u0ba1\7\4\2\2\u0ba1"+
		"\u0ba4\t#\2\2\u0ba2\u0ba4\7\4\2\2\u0ba3\u0b9d\3\2\2\2\u0ba3\u0ba0\3\2"+
		"\2\2\u0ba3\u0ba2\3\2\2\2\u0ba4\u0ba6\3\2\2\2\u0ba5\u0b98\3\2\2\2\u0ba5"+
		"\u0b9c\3\2\2\2\u0ba6\u00b5\3\2\2\2\u0ba7\u0ba8\7\u0184\2\2\u0ba8\u0ba9"+
		"\7\u02cc\2\2\u0ba9\u0bb5\5\u0342\u01a2\2\u0baa\u0bb3\7H\2\2\u0bab\u0bac"+
		"\5\u0342\u01a2\2\u0bac\u0bad\7\u0330\2\2\u0bad\u0baf\3\2\2\2\u0bae\u0bab"+
		"\3\2\2\2\u0bae\u0baf\3\2\2\2\u0baf\u0bb0\3\2\2\2\u0bb0\u0bb4\5\u0342\u01a2"+
		"\2\u0bb1\u0bb2\7\u02d5\2\2\u0bb2\u0bb4\7\u02cc\2\2\u0bb3\u0bae\3\2\2\2"+
		"\u0bb3\u0bb1\3\2\2\2\u0bb4\u0bb6\3\2\2\2\u0bb5\u0baa\3\2\2\2\u0bb5\u0bb6"+
		"\3\2\2\2\u0bb6\u0bb9\3\2\2\2\u0bb7\u0bb8\7\n\2\2\u0bb8\u0bba\5\u0342\u01a2"+
		"\2\u0bb9\u0bb7\3\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u00b7\3\2\2\2\u0bbb\u0bbc"+
		"\7\u01c1\2\2\u0bbc\u0c00\5\u0342\u01a2\2\u0bbd\u0bbf\t\30\2\2\u0bbe\u0bbd"+
		"\3\2\2\2\u0bbe\u0bbf\3\2\2\2\u0bbf\u0c01\3\2\2\2\u0bc0\u0bce\7\u00b8\2"+
		"\2\u0bc1\u0bc2\7\u022b\2\2\u0bc2\u0bc6\7\u0324\2\2\u0bc3\u0bc7\7\u031c"+
		"\2\2\u0bc4\u0bc5\7\u031d\2\2\u0bc5\u0bc7\7\u018c\2\2\u0bc6\u0bc3\3\2\2"+
		"\2\u0bc6\u0bc4\3\2\2\2\u0bc7\u0bcb\3\2\2\2\u0bc8\u0bca\t$\2\2\u0bc9\u0bc8"+
		"\3\2\2\2\u0bca\u0bcd\3\2\2\2\u0bcb\u0bc9\3\2\2\2\u0bcb\u0bcc\3\2\2\2\u0bcc"+
		"\u0bcf\3\2\2\2\u0bcd\u0bcb\3\2\2\2\u0bce\u0bc1\3\2\2\2\u0bce\u0bcf\3\2"+
		"\2\2\u0bcf\u0bd9\3\2\2\2\u0bd0\u0bd1\7\u0219\2\2\u0bd1\u0bd2\7\u0324\2"+
		"\2\u0bd2\u0bd6\7\u031c\2\2\u0bd3\u0bd5\t$\2\2\u0bd4\u0bd3\3\2\2\2\u0bd5"+
		"\u0bd8\3\2\2\2\u0bd6\u0bd4\3\2\2\2\u0bd6\u0bd7\3\2\2\2\u0bd7\u0bda\3\2"+
		"\2\2\u0bd8\u0bd6\3\2\2\2\u0bd9\u0bd0\3\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda"+
		"\u0bde\3\2\2\2\u0bdb\u0bdc\7\u013d\2\2\u0bdc\u0bdd\7\u0324\2\2\u0bdd\u0bdf"+
		"\5\u0342\u01a2\2\u0bde\u0bdb\3\2\2\2\u0bde\u0bdf\3\2\2\2\u0bdf\u0be3\3"+
		"\2\2\2\u0be0\u0be1\7\u013f\2\2\u0be1\u0be2\7\u0324\2\2\u0be2\u0be4\5\u0342"+
		"\u01a2\2\u0be3\u0be0\3\2\2\2\u0be3\u0be4\3\2\2\2\u0be4\u0be8\3\2\2\2\u0be5"+
		"\u0be6\7\u01f6\2\2\u0be6\u0be7\7\u0324\2\2\u0be7\u0be9\5\u0342\u01a2\2"+
		"\u0be8\u0be5\3\2\2\2\u0be8\u0be9\3\2\2\2\u0be9\u0bed\3\2\2\2\u0bea\u0beb"+
		"\7\u0113\2\2\u0beb\u0bec\7\u0324\2\2\u0bec\u0bee\t\b\2\2\u0bed\u0bea\3"+
		"\2\2\2\u0bed\u0bee\3\2\2\2\u0bee\u0bf2\3\2\2\2\u0bef\u0bf0\7\u0112\2\2"+
		"\u0bf0\u0bf1\7\u0324\2\2\u0bf1\u0bf3\t\b\2\2\u0bf2\u0bef\3\2\2\2\u0bf2"+
		"\u0bf3\3\2\2\2\u0bf3\u0bf7\3\2\2\2\u0bf4\u0bf5\7\u012f\2\2\u0bf5\u0bf6"+
		"\7\u0324\2\2\u0bf6\u0bf8\5\u0342\u01a2\2\u0bf7\u0bf4\3\2\2\2\u0bf7\u0bf8"+
		"\3\2\2\2\u0bf8\u0bfb\3\2\2\2\u0bf9\u0bfa\7\u0204\2\2\u0bfa\u0bfc\7\u012f"+
		"\2\2\u0bfb\u0bf9\3\2\2\2\u0bfb\u0bfc\3\2\2\2\u0bfc\u0c01\3\2\2\2\u0bfd"+
		"\u0bfe\t\25\2\2\u0bfe\u0bff\7\u012f\2\2\u0bff\u0c01\5\u0342\u01a2\2\u0c00"+
		"\u0bbe\3\2\2\2\u0c00\u0bc0\3\2\2\2\u0c00\u0bfd\3\2\2\2\u0c01\u00b9\3\2"+
		"\2\2\u0c02\u0c03\7\u01c1\2\2\u0c03\u0c5e\5\u0342\u01a2\2\u0c04\u0c12\7"+
		"\u00b8\2\2\u0c05\u0c06\7\u022b\2\2\u0c06\u0c0a\7\u0324\2\2\u0c07\u0c0b"+
		"\7\u031c\2\2\u0c08\u0c09\7\u031d\2\2\u0c09\u0c0b\7\u018c\2\2\u0c0a\u0c07"+
		"\3\2\2\2\u0c0a\u0c08\3\2\2\2\u0c0b\u0c0f\3\2\2\2\u0c0c\u0c0e\t$\2\2\u0c0d"+
		"\u0c0c\3\2\2\2\u0c0e\u0c11\3\2\2\2\u0c0f\u0c0d\3\2\2\2\u0c0f\u0c10\3\2"+
		"\2\2\u0c10\u0c13\3\2\2\2\u0c11\u0c0f\3\2\2\2\u0c12\u0c05\3\2\2\2\u0c12"+
		"\u0c13\3\2\2\2\u0c13\u0c1a\3\2\2\2\u0c14\u0c16\7\u0335\2\2\u0c15\u0c14"+
		"\3\2\2\2\u0c15\u0c16\3\2\2\2\u0c16\u0c17\3\2\2\2\u0c17\u0c18\7\u02ae\2"+
		"\2\u0c18\u0c19\7\u0324\2\2\u0c19\u0c1b\7\u031d\2\2\u0c1a\u0c15\3\2\2\2"+
		"\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c22\3\2\2\2\u0c1c\u0c1e\7\u0335\2\2\u0c1d"+
		"\u0c1c\3\2\2\2\u0c1d\u0c1e\3\2\2\2\u0c1e\u0c1f\3\2\2\2\u0c1f\u0c20\7\u013d"+
		"\2\2\u0c20\u0c21\7\u0324\2\2\u0c21\u0c23\5\u0342\u01a2\2\u0c22\u0c1d\3"+
		"\2\2\2\u0c22\u0c23\3\2\2\2\u0c23\u0c2a\3\2\2\2\u0c24\u0c26\7\u0335\2\2"+
		"\u0c25\u0c24\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c27\3\2\2\2\u0c27\u0c28"+
		"\7\u013f\2\2\u0c28\u0c29\7\u0324\2\2\u0c29\u0c2b\5\u0342\u01a2\2\u0c2a"+
		"\u0c25\3\2\2\2\u0c2a\u0c2b\3\2\2\2\u0c2b\u0c32\3\2\2\2\u0c2c\u0c2e\7\u0335"+
		"\2\2\u0c2d\u0c2c\3\2\2\2\u0c2d\u0c2e\3\2\2\2\u0c2e\u0c2f\3\2\2\2\u0c2f"+
		"\u0c30\7\u0112\2\2\u0c30\u0c31\7\u0324\2\2\u0c31\u0c33\t\b\2\2\u0c32\u0c2d"+
		"\3\2\2\2\u0c32\u0c33\3\2\2\2\u0c33\u0c3a\3\2\2\2\u0c34\u0c36\7\u0335\2"+
		"\2\u0c35\u0c34\3\2\2\2\u0c35\u0c36\3\2\2\2\u0c36\u0c37\3\2\2\2\u0c37\u0c38"+
		"\7\u0113\2\2\u0c38\u0c39\7\u0324\2\2\u0c39\u0c3b\t\b\2\2\u0c3a\u0c35\3"+
		"\2\2\2\u0c3a\u0c3b\3\2\2\2\u0c3b\u0c42\3\2\2\2\u0c3c\u0c3e\7\u0335\2\2"+
		"\u0c3d\u0c3c\3\2\2\2\u0c3d\u0c3e\3\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f\u0c40"+
		"\7\u012f\2\2\u0c40\u0c41\7\u0324\2\2\u0c41\u0c43\5\u0342\u01a2\2\u0c42"+
		"\u0c3d\3\2\2\2\u0c42\u0c43\3\2\2\2\u0c43\u0c5f\3\2\2\2\u0c44\u0c5c\7H"+
		"\2\2\u0c45\u0c46\7\u0306\2\2\u0c46\u0c4d\7\u00b8\2\2\u0c47\u0c49\7\u0335"+
		"\2\2\u0c48\u0c47\3\2\2\2\u0c48\u0c49\3\2\2\2\u0c49\u0c4a\3\2\2\2\u0c4a"+
		"\u0c4b\7\u013d\2\2\u0c4b\u0c4c\7\u0324\2\2\u0c4c\u0c4e\5\u0342\u01a2\2"+
		"\u0c4d\u0c48\3\2\2\2\u0c4d\u0c4e\3\2\2\2\u0c4e\u0c55\3\2\2\2\u0c4f\u0c51"+
		"\7\u0335\2\2\u0c50\u0c4f\3\2\2\2\u0c50\u0c51\3\2\2\2\u0c51\u0c52\3\2\2"+
		"\2\u0c52\u0c53\7\u013f\2\2\u0c53\u0c54\7\u0324\2\2\u0c54\u0c56\7\u031c"+
		"\2\2\u0c55\u0c50\3\2\2\2\u0c55\u0c56\3\2\2\2\u0c56\u0c5d\3\2\2\2\u0c57"+
		"\u0c58\7\u010b\2\2\u0c58\u0c5d\5\u0342\u01a2\2\u0c59\u0c5a\7\u00e4\2\2"+
		"\u0c5a\u0c5b\7\\\2\2\u0c5b\u0c5d\5\u0342\u01a2\2\u0c5c\u0c45\3\2\2\2\u0c5c"+
		"\u0c57\3\2\2\2\u0c5c\u0c59\3\2\2\2\u0c5d\u0c5f\3\2\2\2\u0c5e\u0c04\3\2"+
		"\2\2\u0c5e\u0c44\3\2\2\2\u0c5f\u00bb\3\2\2\2\u0c60\u0c61\7\u01c1\2\2\u0c61"+
		"\u0c77\5\u0342\u01a2\2\u0c62\u0c63\7H\2\2\u0c63\u0c78\7\u0306\2\2\u0c64"+
		"\u0c65\7\u00b8\2\2\u0c65\u0c66\7\u022b\2\2\u0c66\u0c67\7\u0324\2\2\u0c67"+
		"\u0c69\7\u031c\2\2\u0c68\u0c6a\7\u01f5\2\2\u0c69\u0c68\3\2\2\2\u0c69\u0c6a"+
		"\3\2\2\2\u0c6a\u0c6e\3\2\2\2\u0c6b\u0c6c\7\u02ae\2\2\u0c6c\u0c6d\7\u0324"+
		"\2\2\u0c6d\u0c6f\7\u031d\2\2\u0c6e\u0c6b\3\2\2\2\u0c6e\u0c6f\3\2\2\2\u0c6f"+
		"\u0c75\3\2\2\2\u0c70\u0c71\7\u0113\2\2\u0c71\u0c73\7\u0324\2\2\u0c72\u0c74"+
		"\t\b\2\2\u0c73\u0c72\3\2\2\2\u0c73\u0c74\3\2\2\2\u0c74\u0c76\3\2\2\2\u0c75"+
		"\u0c70\3\2\2\2\u0c75\u0c76\3\2\2\2\u0c76\u0c78\3\2\2\2\u0c77\u0c62\3\2"+
		"\2\2\u0c77\u0c64\3\2\2\2\u0c78\u00bd\3\2\2\2\u0c79\u0c7a\7\u01c6\2\2\u0c7a"+
		"\u0c90\7\\\2\2\u0c7b\u0c7d\7\u017e\2\2\u0c7c\u0c7b\3\2\2\2\u0c7c\u0c7d"+
		"\3\2\2\2\u0c7d\u0c7e\3\2\2\2\u0c7e\u0c7f\7\u0263\2\2\u0c7f\u0c80\7\u00b8"+
		"\2\2\u0c80\u0c81\7\u0159\2\2\u0c81\u0c82\7\21\2\2\u0c82\u0c83\7\u022b"+
		"\2\2\u0c83\u0c84\7\u0324\2\2\u0c84\u0c91\7\u031c\2\2\u0c85\u0c86\t\25"+
		"\2\2\u0c86\u0c87\7\u0159\2\2\u0c87\u0c8e\7\21\2\2\u0c88\u0c89\7\u02a7"+
		"\2\2\u0c89\u0c8a\7\u01c6\2\2\u0c8a\u0c8f\7\\\2\2\u0c8b\u0c8c\7\u022b\2"+
		"\2\u0c8c\u0c8d\7\u0324\2\2\u0c8d\u0c8f\7\u031c\2\2\u0c8e\u0c88\3\2\2\2"+
		"\u0c8e\u0c8b\3\2\2\2\u0c8f\u0c91\3\2\2\2\u0c90\u0c7c\3\2\2\2\u0c90\u0c85"+
		"\3\2\2\2\u0c91\u00bf\3\2\2\2\u0c92\u0c93\7\u01c6\2\2\u0c93\u0c94\7\\\2"+
		"\2\u0c94\u0c95\7\u0159\2\2\u0c95\u0c96\7\21\2\2\u0c96\u0c97\7\u022b\2"+
		"\2\u0c97\u0c98\7\u0324\2\2\u0c98\u0c99\7\u031c\2\2\u0c99\u00c1\3\2\2\2"+
		"\u0c9a\u0c9b\7\u01e7\2\2\u0c9b\u0c9c\7\u02f0\2\2\u0c9c\u0c9d\5\u0342\u01a2"+
		"\2\u0c9d\u0c9e\7\u02fd\2\2\u0c9e\u0ca7\7\u0324\2\2\u0c9f\u0ca8\7\u020a"+
		"\2\2\u0ca0\u0ca8\7\u0154\2\2\u0ca1\u0ca8\7\u0305\2\2\u0ca2\u0ca3\7\u02fc"+
		"\2\2\u0ca3\u0ca4\7\u00b8\2\2\u0ca4\u0ca5\7\u0092\2\2\u0ca5\u0ca6\7\u0118"+
		"\2\2\u0ca6\u0ca8\5\u0342\u01a2\2\u0ca7\u0c9f\3\2\2\2\u0ca7\u0ca0\3\2\2"+
		"\2\u0ca7\u0ca1\3\2\2\2\u0ca7\u0ca2\3\2\2\2\u0ca8\u00c3\3\2\2\2\u0ca9\u0caa"+
		"\7\u0228\2\2\u0caa\u0cab\7J\2\2\u0cab\u0cac\5\u0342\u01a2\2\u0cac\u0cad"+
		"\7\u0333\2\2\u0cad\u0cae\5\u0336\u019c\2\u0cae\u0caf\7\u0334\2\2\u0caf"+
		"\u0cb0\7\b\2\2\u0cb0\u0cb2\7\u0252\2\2\u0cb1\u0cb3\t%\2\2\u0cb2\u0cb1"+
		"\3\2\2\2\u0cb2\u0cb3\3\2\2\2\u0cb3\u0cb4\3\2\2\2\u0cb4\u0cb5\7D\2\2\u0cb5"+
		"\u0cb6\7\u00b1\2\2\u0cb6\u0cbf\7\u0333\2\2\u0cb7\u0cbc\5\u0290\u0149\2"+
		"\u0cb8\u0cb9\7\u0335\2\2\u0cb9\u0cbb\5\u0290\u0149\2\u0cba\u0cb8\3\2\2"+
		"\2\u0cbb\u0cbe\3\2\2\2\u0cbc\u0cba\3\2\2\2\u0cbc\u0cbd\3\2\2\2\u0cbd\u0cc0"+
		"\3\2\2\2\u0cbe\u0cbc\3\2\2\2\u0cbf\u0cb7\3\2\2\2\u0cbf\u0cc0\3\2\2\2\u0cc0"+
		"\u0cc1\3\2\2\2\u0cc1\u0cc2\7\u0334\2\2\u0cc2\u00c5\3\2\2\2\u0cc3\u0cc4"+
		"\7\u0228\2\2\u0cc4\u0cc5\7J\2\2\u0cc5\u0cc6\5\u0342\u01a2\2\u0cc6\u0cc7"+
		"\7\u0333\2\2\u0cc7\u0cc8\7\u0334\2\2\u0cc8\u0cc9\t&\2\2\u0cc9\u0cca\7"+
		"\u0252\2\2\u0cca\u0ccb\7\u0333\2\2\u0ccb\u0ccc\7\u031a\2\2\u0ccc\u0ccd"+
		"\7\u0334\2\2\u0ccd\u00c7\3\2\2\2\u0cce\u0ccf\7\u0228\2\2\u0ccf\u0cd0\7"+
		"\u0290\2\2\u0cd0\u0cd1\5\u0342\u01a2\2\u0cd1\u0cd2\7\b\2\2\u0cd2\u0cd3"+
		"\7\u0228\2\2\u0cd3\u0cd5\5\u0342\u01a2\2\u0cd4\u0cd6\7\4\2\2\u0cd5\u0cd4"+
		"\3\2\2\2\u0cd5\u0cd6\3\2\2\2\u0cd6\u0cd7\3\2\2\2\u0cd7\u0cd8\7\u00a3\2"+
		"\2\u0cd8\u0cd9\7\u0333\2\2\u0cd9\u0cde\5\u01b2\u00da\2\u0cda\u0cdb\7\u0335"+
		"\2\2\u0cdb\u0cdd\5\u01b2\u00da\2\u0cdc\u0cda\3\2\2\2\u0cdd\u0ce0\3\2\2"+
		"\2\u0cde\u0cdc\3\2\2\2\u0cde\u0cdf\3\2\2\2\u0cdf\u0ce1\3\2\2\2\u0ce0\u0cde"+
		"\3\2\2\2\u0ce1\u0ce2\7\u0334\2\2\u0ce2\u00c9\3\2\2\2\u0ce3\u0ce4\7\u0228"+
		"\2\2\u0ce4\u0ce5\7\u0290\2\2\u0ce5\u0ce6\5\u0342\u01a2\2\u0ce6\u0ce7\7"+
		"\u01fe\2\2\u0ce7\u0ce9\7\u02fa\2\2\u0ce8\u0cea\5\u0342\u01a2\2\u0ce9\u0ce8"+
		"\3\2\2\2\u0ce9\u0cea\3\2\2\2\u0cea\u00cb\3\2\2\2\u0ceb\u0cec\7\u0268\2"+
		"\2\u0cec\u0ced\7\u02a7\2\2\u0ced\u0cee\7\u00fa\2\2\u0cee\u0cef\5\u0342"+
		"\u01a2\2\u0cef\u0cf3\7\u00b8\2\2\u0cf0\u0cf1\7\u00b0\2\2\u0cf1\u0cf2\7"+
		"\u0324\2\2\u0cf2\u0cf4\5\u0342\u01a2\2\u0cf3\u0cf0\3\2\2\2\u0cf3\u0cf4"+
		"\3\2\2\2\u0cf4\u0cf9\3\2\2\2\u0cf5\u0cf6\7\u0335\2\2\u0cf6\u0cf7\7\u00d9"+
		"\2\2\u0cf7\u0cf8\7\u0324\2\2\u0cf8\u0cfa\t\b\2\2\u0cf9\u0cf5\3\2\2\2\u0cf9"+
		"\u0cfa\3\2\2\2\u0cfa\u00cd\3\2\2\2\u0cfb\u0cfc\7\u0268\2\2\u0cfc\u0cfd"+
		"\7\u02a7\2\2\u0cfd\u0cfe\7\u00fa\2\2\u0cfe\u0d01\5\u0342\u01a2\2\u0cff"+
		"\u0d00\7\n\2\2\u0d00\u0d02\5\u0342\u01a2\2\u0d01\u0cff\3\2\2\2\u0d01\u0d02"+
		"\3\2\2\2\u0d02\u0d03\3\2\2\2\u0d03\u0d04\7\u00a3\2";
	private static final String _serializedATNSegment2 =
		"\2\u0d04\u0d05\7\u02a7\2\2\u0d05\u0d06\7\u031c\2\2\u0d06\u0d07\7\u00b8"+
		"\2\2\u0d07\u0d08\7\u00b0\2\2\u0d08\u0d09\7\u0324\2\2\u0d09\u0d0e\5\u0342"+
		"\u01a2\2\u0d0a\u0d0b\7\u0335\2\2\u0d0b\u0d0c\7\u00d9\2\2\u0d0c\u0d0d\7"+
		"\u0324\2\2\u0d0d\u0d0f\t\b\2\2\u0d0e\u0d0a\3\2\2\2\u0d0e\u0d0f\3\2\2\2"+
		"\u0d0f\u00cf\3\2\2\2\u0d10\u0d11\7\u0276\2\2\u0d11\u0d12\7\u0238\2\2\u0d12"+
		"\u0d79\5\u0342\u01a2\2\u0d13\u0d14\7\u00b8\2\2\u0d14\u0d1b\7\u0333\2\2"+
		"\u0d15\u0d17\7\u0335\2\2\u0d16\u0d15\3\2\2\2\u0d16\u0d17\3\2\2\2\u0d17"+
		"\u0d18\3\2\2\2\u0d18\u0d19\7\u01e9\2\2\u0d19\u0d1a\7\u0324\2\2\u0d1a\u0d1c"+
		"\7\u031a\2\2\u0d1b\u0d16\3\2\2\2\u0d1b\u0d1c\3\2\2\2\u0d1c\u0d23\3\2\2"+
		"\2\u0d1d\u0d1f\7\u0335\2\2\u0d1e\u0d1d\3\2\2\2\u0d1e\u0d1f\3\2\2\2\u0d1f"+
		"\u0d20\3\2\2\2\u0d20\u0d21\7\u01c9\2\2\u0d21\u0d22\7\u0324\2\2\u0d22\u0d24"+
		"\7\u031a\2\2\u0d23\u0d1e\3\2\2\2\u0d23\u0d24\3\2\2\2\u0d24\u0d2b\3\2\2"+
		"\2\u0d25\u0d27\7\u0335\2\2\u0d26\u0d25\3\2\2\2\u0d26\u0d27\3\2\2\2\u0d27"+
		"\u0d28\3\2\2\2\u0d28\u0d29\7\u0107\2\2\u0d29\u0d2a\7\u0324\2\2\u0d2a\u0d2c"+
		"\7\u031a\2\2\u0d2b\u0d26\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c\u0d56\3\2\2"+
		"\2\u0d2d\u0d2f\7\u0335\2\2\u0d2e\u0d2d\3\2\2\2\u0d2e\u0d2f\3\2\2\2\u0d2f"+
		"\u0d30\3\2\2\2\u0d30\u0d31\7\u00cf\2\2\u0d31\u0d32\7\u028e\2\2\u0d32\u0d54"+
		"\7\u0324\2\2\u0d33\u0d55\7\u00ef\2\2\u0d34\u0d3e\7\u0333\2\2\u0d35\u0d37"+
		"\7\u0335\2\2\u0d36\u0d35\3\2\2\2\u0d36\u0d37\3\2\2\2\u0d37\u0d3c\3\2\2"+
		"\2\u0d38\u0d3d\7\u031a\2\2\u0d39\u0d3a\7\u031a\2\2\u0d3a\u0d3b\7\u00a3"+
		"\2\2\u0d3b\u0d3d\7\u031a\2\2\u0d3c\u0d38\3\2\2\2\u0d3c\u0d39\3\2\2\2\u0d3d"+
		"\u0d3f\3\2\2\2\u0d3e\u0d36\3\2\2\2\u0d3f\u0d40\3\2\2\2\u0d40\u0d3e\3\2"+
		"\2\2\u0d40\u0d41\3\2\2\2\u0d41\u0d42\3\2\2\2\u0d42\u0d55\7\u0334\2\2\u0d43"+
		"\u0d44\7\u0213\2\2\u0d44\u0d45\7\u0324\2\2\u0d45\u0d4f\7\u0333\2\2\u0d46"+
		"\u0d48\7\u0335\2\2\u0d47\u0d46\3\2\2\2\u0d47\u0d48\3\2\2\2\u0d48\u0d4d"+
		"\3\2\2\2\u0d49\u0d4e\7\u031a\2\2\u0d4a\u0d4b\7\u031a\2\2\u0d4b\u0d4c\7"+
		"\u00a3\2\2\u0d4c\u0d4e\7\u031a\2\2\u0d4d\u0d49\3\2\2\2\u0d4d\u0d4a\3\2"+
		"\2\2\u0d4e\u0d50\3\2\2\2\u0d4f\u0d47\3\2\2\2\u0d50\u0d51\3\2\2\2\u0d51"+
		"\u0d4f\3\2\2\2\u0d51\u0d52\3\2\2\2\u0d52\u0d53\3\2\2\2\u0d53\u0d55\7\u0334"+
		"\2\2\u0d54\u0d33\3\2\2\2\u0d54\u0d34\3\2\2\2\u0d54\u0d43\3\2\2\2\u0d55"+
		"\u0d57\3\2\2\2\u0d56\u0d2e\3\2\2\2\u0d56\u0d57\3\2\2\2\u0d57\u0d5e\3\2"+
		"\2\2\u0d58\u0d5a\7\u0335\2\2\u0d59\u0d58\3\2\2\2\u0d59\u0d5a\3\2\2\2\u0d5a"+
		"\u0d5b\3\2\2\2\u0d5b\u0d5c\7\u01eb\2\2\u0d5c\u0d5d\7\u0324\2\2\u0d5d\u0d5f"+
		"\7\u031a\2\2\u0d5e\u0d59\3\2\2\2\u0d5e\u0d5f\3\2\2\2\u0d5f\u0d66\3\2\2"+
		"\2\u0d60\u0d62\7\u0335\2\2\u0d61\u0d60\3\2\2\2\u0d61\u0d62\3\2\2\2\u0d62"+
		"\u0d63\3\2\2\2\u0d63\u0d64\7\u01cf\2\2\u0d64\u0d65\7\u0324\2\2\u0d65\u0d67"+
		"\7\u031a\2\2\u0d66\u0d61\3\2\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d6e\3\2\2"+
		"\2\u0d68\u0d6a\7\u0335\2\2\u0d69\u0d68\3\2\2\2\u0d69\u0d6a\3\2\2\2\u0d6a"+
		"\u0d6b\3\2\2\2\u0d6b\u0d6c\7\u01ea\2\2\u0d6c\u0d6d\7\u0324\2\2\u0d6d\u0d6f"+
		"\7\u031a\2\2\u0d6e\u0d69\3\2\2\2\u0d6e\u0d6f\3\2\2\2\u0d6f\u0d76\3\2\2"+
		"\2\u0d70\u0d72\7\u0335\2\2\u0d71\u0d70\3\2\2\2\u0d71\u0d72\3\2\2\2\u0d72"+
		"\u0d73\3\2\2\2\u0d73\u0d74\7\u01ce\2\2\u0d74\u0d75\7\u0324\2\2\u0d75\u0d77"+
		"\7\u031a\2\2\u0d76\u0d71\3\2\2\2\u0d76\u0d77\3\2\2\2\u0d77\u0d78\3\2\2"+
		"\2\u0d78\u0d7a\7\u0334\2\2\u0d79\u0d13\3\2\2\2\u0d79\u0d7a\3\2\2\2\u0d7a"+
		"\u00d1\3\2\2\2\u0d7b\u0d7c\7\u0276\2\2\u0d7c\u0d8f\7\u0188\2\2\u0d7d\u0d90"+
		"\t\'\2\2\u0d7e\u0d7f\7\u00b8\2\2\u0d7f\u0d80\7\u0333\2\2\u0d80\u0d81\7"+
		"\u0115\2\2\u0d81\u0d84\7\u0324\2\2\u0d82\u0d85\5\u0310\u0189\2\u0d83\u0d85"+
		"\7g\2\2\u0d84\u0d82\3\2\2\2\u0d84\u0d83\3\2\2\2\u0d85\u0d86\3\2\2\2\u0d86"+
		"\u0d90\7\u0334\2\2\u0d87\u0d88\7\u0274\2\2\u0d88\u0d90\7\u009d\2\2\u0d89"+
		"\u0d8a\7\u00b8\2\2\u0d8a\u0d8b\7\u0333\2\2\u0d8b\u0d8c\7\u01d1\2\2\u0d8c"+
		"\u0d8d\7\u0324\2\2\u0d8d\u0d8e\7\u031a\2\2\u0d8e\u0d90\7\u0334\2\2\u0d8f"+
		"\u0d7d\3\2\2\2\u0d8f\u0d7e\3\2\2\2\u0d8f\u0d87\3\2\2\2\u0d8f\u0d89\3\2"+
		"\2\2\u0d90\u00d3\3\2\2\2\u0d91\u0d92\7\u0282\2\2\u0d92\u0d93\5\u0342\u01a2"+
		"\2\u0d93\u0d9a\7\u00b8\2\2\u0d94\u0d95\7\u02a6\2\2\u0d95\u0d96\7\u0324"+
		"\2\2\u0d96\u0d98\7\u031c\2\2\u0d97\u0d99\7\u0335\2\2\u0d98\u0d97\3\2\2"+
		"\2\u0d98\u0d99\3\2\2\2\u0d99\u0d9b\3\2\2\2\u0d9a\u0d94\3\2\2\2\u0d9a\u0d9b"+
		"\3\2\2\2\u0d9b\u0da2\3\2\2\2\u0d9c\u0d9d\7\u00ff\2\2\u0d9d\u0d9e\7\u0324"+
		"\2\2\u0d9e\u0da0\7\u031c\2\2\u0d9f\u0da1\7\u0335\2\2\u0da0\u0d9f\3\2\2"+
		"\2\u0da0\u0da1\3\2\2\2\u0da1\u0da3\3\2\2\2\u0da2\u0d9c\3\2\2\2\u0da2\u0da3"+
		"\3\2\2\2\u0da3\u0daa\3\2\2\2\u0da4\u0da5\7\u01b3\2\2\u0da5\u0da6\7\u0324"+
		"\2\2\u0da6\u0da8\7\u031a\2\2\u0da7\u0da9\7\u0335\2\2\u0da8\u0da7\3\2\2"+
		"\2\u0da8\u0da9\3\2\2\2\u0da9\u0dab\3\2\2\2\u0daa\u0da4\3\2\2\2\u0daa\u0dab"+
		"\3\2\2\2\u0dab\u0db2\3\2\2\2\u0dac\u0dad\7\u00ca\2\2\u0dad\u0dae\7\u0324"+
		"\2\2\u0dae\u0db0\7\u031c\2\2\u0daf\u0db1\7\u0335\2\2\u0db0\u0daf\3\2\2"+
		"\2\u0db0\u0db1\3\2\2\2\u0db1\u0db3\3\2\2\2\u0db2\u0dac\3\2\2\2\u0db2\u0db3"+
		"\3\2\2\2\u0db3\u0db7\3\2\2\2\u0db4\u0db5\7\u01ee\2\2\u0db5\u0db6\7\u0324"+
		"\2\2\u0db6\u0db8\7\u031c\2\2\u0db7\u0db4\3\2\2\2\u0db7\u0db8\3\2\2\2\u0db8"+
		"\u00d5\3\2\2\2\u0db9\u0dba\7\u0280\2\2\u0dba\u0dc2\5\u0342\u01a2\2\u0dbb"+
		"\u0dbc\t\25\2\2\u0dbc\u0dbd\7\u01e0\2\2\u0dbd\u0dc3\5\u0342\u01a2\2\u0dbe"+
		"\u0dbf\7\u00b8\2\2\u0dbf\u0dc0\7\u01f6\2\2\u0dc0\u0dc1\7\u0324\2\2\u0dc1"+
		"\u0dc3\5\u0342\u01a2\2\u0dc2\u0dbb\3\2\2\2\u0dc2\u0dbe\3\2\2\2\u0dc3\u00d7"+
		"\3\2\2\2\u0dc4\u0dc5\7\u0280\2\2\u0dc5\u0dc8\5\u0342\u01a2\2\u0dc6\u0dc7"+
		"\7\n\2\2\u0dc7\u0dc9\5\u0342\u01a2\2\u0dc8\u0dc6\3\2\2\2\u0dc8\u0dc9\3"+
		"\2\2\2\u0dc9\u00d9\3\2\2\2\u0dca\u0dcb\7\u0282\2\2\u0dcb\u0dce\5\u0342"+
		"\u01a2\2\u0dcc\u0dcd\7\n\2\2\u0dcd\u0dcf\5\u0342\u01a2\2\u0dce\u0dcc\3"+
		"\2\2\2\u0dce\u0dcf\3\2\2\2\u0dcf\u0dd0\3\2\2\2\u0dd0\u0dd7\7\u00b8\2\2"+
		"\u0dd1\u0dd3\7\u0335\2\2\u0dd2\u0dd1\3\2\2\2\u0dd2\u0dd3\3\2\2\2\u0dd3"+
		"\u0dd4\3\2\2\2\u0dd4\u0dd5\7\u02a6\2\2\u0dd5\u0dd6\7\u0324\2\2\u0dd6\u0dd8"+
		"\7\u031c\2\2\u0dd7\u0dd2\3\2\2\2\u0dd7\u0dd8\3\2\2\2\u0dd8\u0ddf\3\2\2"+
		"\2\u0dd9\u0ddb\7\u0335\2\2\u0dda\u0dd9\3\2\2\2\u0dda\u0ddb\3\2\2\2\u0ddb"+
		"\u0ddc\3\2\2\2\u0ddc\u0ddd\7\u00ff\2\2\u0ddd\u0dde\7\u0324\2\2\u0dde\u0de0"+
		"\7\u031c\2\2\u0ddf\u0dda\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0\u0de7\3\2\2"+
		"\2\u0de1\u0de3\7\u0335\2\2\u0de2\u0de1\3\2\2\2\u0de2\u0de3\3\2\2\2\u0de3"+
		"\u0de4\3\2\2\2\u0de4\u0de5\7\u01b3\2\2\u0de5\u0de6\7\u0324\2\2\u0de6\u0de8"+
		"\7\u031a\2\2\u0de7\u0de2\3\2\2\2\u0de7\u0de8\3\2\2\2\u0de8\u0dea\3\2\2"+
		"\2\u0de9\u0deb\7\u0335\2\2\u0dea\u0de9\3\2\2\2\u0dea\u0deb\3\2\2\2\u0deb"+
		"\u0dec\3\2\2\2\u0dec\u0ded\7\u00ca\2\2\u0ded\u0dee\7\u0324\2\2\u0dee\u0df3"+
		"\7\u031c\2\2\u0def\u0df0\7\u0335\2\2\u0df0\u0df1\7\u01ee\2\2\u0df1\u0df2"+
		"\7\u0324\2\2\u0df2\u0df4\7\u031c\2\2\u0df3\u0def\3\2\2\2\u0df3\u0df4\3"+
		"\2\2\2\u0df4\u00db\3\2\2\2\u0df5\u0df6\7\u0090\2\2\u0df6\u0df7\5\u0310"+
		"\u0189\2\u0df7\u0df8\7\b\2\2\u0df8\u0df9\5\u02a2\u0152\2\u0df9\u00dd\3"+
		"\2\2\2\u0dfa\u0dfb\7\u0092\2\2\u0dfb\u0dfc\5\u0342\u01a2\2\u0dfc\u0e06"+
		"\7\u02e5\2\2\u0dfd\u0e03\7\u0215\2\2\u0dfe\u0e03\7\u02f0\2\2\u0dff\u0e00"+
		"\7\u030c\2\2\u0e00\u0e01\7\u0092\2\2\u0e01\u0e03\7\u0118\2\2\u0e02\u0dfd"+
		"\3\2\2\2\u0e02\u0dfe\3\2\2\2\u0e02\u0dff\3\2\2\2\u0e03\u0e04\3\2\2\2\u0e04"+
		"\u0e05\7\u0337\2\2\u0e05\u0e07\7\u0337\2\2\u0e06\u0e02\3\2\2\2\u0e06\u0e07"+
		"\3\2\2\2\u0e07\u0e0b\3\2\2\2\u0e08\u0e09\5\u0342\u01a2\2\u0e09\u0e0a\7"+
		"\u0330\2\2\u0e0a\u0e0c\3\2\2\2\u0e0b\u0e08\3\2\2\2\u0e0b\u0e0c\3\2\2\2"+
		"\u0e0c\u0e0d\3\2\2\2\u0e0d\u0e0e\5\u0342\u01a2\2\u0e0e\u00df\3\2\2\2\u0e0f"+
		"\u0e10\7\u0092\2\2\u0e10\u0e13\5\u0342\u01a2\2\u0e11\u0e12\7\n\2\2\u0e12"+
		"\u0e14\5\u0342\u01a2\2\u0e13\u0e11\3\2\2\2\u0e13\u0e14\3\2\2\2\u0e14\u00e1"+
		"\3\2\2\2\u0e15\u0e16\7\u0294\2\2\u0e16\u0e17\7\u024a\2\2\u0e17\u0e18\7"+
		"\u01b5\2\2\u0e18\u0e20\5\u0342\u01a2\2\u0e19\u0e1d\7H\2\2\u0e1a\u0e1b"+
		"\5\u0342\u01a2\2\u0e1b\u0e1c\7\u0330\2\2\u0e1c\u0e1e\3\2\2\2\u0e1d\u0e1a"+
		"\3\2\2\2\u0e1d\u0e1e\3\2\2\2\u0e1e\u0e1f\3\2\2\2\u0e1f\u0e21\5\u0342\u01a2"+
		"\2\u0e20\u0e19\3\2\2\2\u0e20\u0e21\3\2\2\2\u0e21\u0e24\3\2\2\2\u0e22\u0e23"+
		"\7\n\2\2\u0e23\u0e25\5\u0342\u01a2\2\u0e24\u0e22\3\2\2\2\u0e24\u0e25\3"+
		"\2\2\2\u0e25\u00e3\3\2\2\2\u0e26\u0e27\7\u0294\2\2\u0e27\u0e28\7\u024a"+
		"\2\2\u0e28\u0e29\7\u01b5\2\2\u0e29\u0e2a\5\u0342\u01a2\2\u0e2a\u0e2b\5"+
		"\u00e6t\2\u0e2b\u00e5\3\2\2\2\u0e2c\u0e2d\7\3\2\2\u0e2d\u0e2e\5\u0342"+
		"\u01a2\2\u0e2e\u0e2f\7\u00b8\2\2\u0e2f\u0e30\7\u0333\2\2\u0e30\u0e31\7"+
		"\u0249\2\2\u0e31\u0e32\7\u0324\2\2\u0e32\u0e33\5\u0342\u01a2\2\u0e33\u0e34"+
		"\7\u0335\2\2\u0e34\u0e35\7\u0248\2\2\u0e35\u0e36\7\u0324\2\2\u0e36\u0e3b"+
		"\7\u031a\2\2\u0e37\u0e38\7\u0335\2\2\u0e38\u0e39\7\u0247\2\2\u0e39\u0e3a"+
		"\7\u0324\2\2\u0e3a\u0e3c\7\u031c\2\2\u0e3b\u0e37\3\2\2\2\u0e3b\u0e3c\3"+
		"\2\2\2\u0e3c\u0e3d\3\2\2\2\u0e3d\u0e3e\7\u0334\2\2\u0e3e\u0e42\3\2\2\2"+
		"\u0e3f\u0e40\7\66\2\2\u0e40\u0e42\5\u0342\u01a2\2\u0e41\u0e2c\3\2\2\2"+
		"\u0e41\u0e3f\3\2\2\2\u0e42\u00e7\3\2\2\2\u0e43\u0e44\7\u029b\2\2\u0e44"+
		"\u0e45\7\u0237\2\2\u0e45\u0e6a\5\u0310\u0189\2\u0e46\u0e48\7\u0335\2\2"+
		"\u0e47\u0e46\3\2\2\2\u0e47\u0e48\3\2\2\2\u0e48\u0e49\3\2\2\2\u0e49\u0e4b"+
		"\7\3\2\2\u0e4a\u0e4c\t(\2\2\u0e4b\u0e4a\3\2\2\2\u0e4b\u0e4c\3\2\2\2\u0e4c"+
		"\u0e4d\3\2\2\2\u0e4d\u0e4e\7\u023c\2\2\u0e4e\u0e4f\5\u0310\u0189\2\u0e4f"+
		"\u0e54\7\u0333\2\2\u0e50\u0e52\7\u0335\2\2\u0e51\u0e50\3\2\2\2\u0e51\u0e52"+
		"\3\2\2\2\u0e52\u0e53\3\2\2\2\u0e53\u0e55\5\u0290\u0149\2\u0e54\u0e51\3"+
		"\2\2\2\u0e55\u0e56\3\2\2\2\u0e56\u0e54\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57"+
		"\u0e58\3\2\2\2\u0e58\u0e59\7\u0334\2\2\u0e59\u0e5a\7l\2\2\u0e5a\u0e67"+
		"\5\u0310\u0189\2\u0e5b\u0e5d\7\u0335\2\2\u0e5c\u0e5b\3\2\2\2\u0e5c\u0e5d"+
		"\3\2\2\2\u0e5d\u0e5e\3\2\2\2\u0e5e\u0e5f\7\u00d0\2\2\u0e5f\u0e66\t)\2"+
		"\2\u0e60\u0e62\7\u0335\2\2\u0e61\u0e60\3\2\2\2\u0e61\u0e62\3\2\2\2\u0e62"+
		"\u0e63\3\2\2\2\u0e63\u0e64\7\u00f7\2\2\u0e64\u0e66\t*\2\2\u0e65\u0e5c"+
		"\3\2\2\2\u0e65\u0e61\3\2\2\2\u0e66\u0e69\3\2\2\2\u0e67\u0e65\3\2\2\2\u0e67"+
		"\u0e68\3\2\2\2\u0e68\u0e6b\3\2\2\2\u0e69\u0e67\3\2\2\2\u0e6a\u0e47\3\2"+
		"\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c\u0e6a\3\2\2\2\u0e6c\u0e6d\3\2\2\2\u0e6d"+
		"\u0e78\3\2\2\2\u0e6e\u0e6f\7\u00b8\2\2\u0e6f\u0e70\7\u0333\2\2\u0e70\u0e71"+
		"\7\u02c5\2\2\u0e71\u0e72\7\u0324\2\2\u0e72\u0e75\t\b\2\2\u0e73\u0e74\7"+
		"\u028f\2\2\u0e74\u0e76\t\b\2\2\u0e75\u0e73\3\2\2\2\u0e75\u0e76\3\2\2\2"+
		"\u0e76\u0e77\3\2\2\2\u0e77\u0e79\7\u0334\2\2\u0e78\u0e6e\3\2\2\2\u0e78"+
		"\u0e79\3\2\2\2\u0e79\u0e7b\3\2\2\2\u0e7a\u0e7c\5\u0190\u00c9\2\u0e7b\u0e7a"+
		"\3\2\2\2\u0e7b\u0e7c\3\2\2\2\u0e7c\u00e9\3\2\2\2\u0e7d\u0e7e\7\u029b\2"+
		"\2\u0e7e\u0e7f\7\u0237\2\2\u0e7f\u0e81\5\u0310\u0189\2\u0e80\u0e82\7\u0333"+
		"\2\2\u0e81\u0e80\3\2\2\2\u0e81\u0e82\3\2\2\2\u0e82\u0e83\3\2\2\2\u0e83"+
		"\u0e88\5\u00ecw\2\u0e84\u0e85\7\u0335\2\2\u0e85\u0e87\5\u00ecw\2\u0e86"+
		"\u0e84\3\2\2\2\u0e87\u0e8a\3\2\2\2\u0e88\u0e86\3\2\2\2\u0e88\u0e89\3\2"+
		"\2\2\u0e89\u0e8c\3\2\2\2\u0e8a\u0e88\3\2\2\2\u0e8b\u0e8d\7\u0334\2\2\u0e8c"+
		"\u0e8b\3\2\2\2\u0e8c\u0e8d\3\2\2\2\u0e8d\u0e95\3\2\2\2\u0e8e\u0e8f\7\u00b8"+
		"\2\2\u0e8f\u0e90\7\u0333\2\2\u0e90\u0e91\7\u02c5\2\2\u0e91\u0e92\7\u0324"+
		"\2\2\u0e92\u0e93\5\u031e\u0190\2\u0e93\u0e94\7\u0334\2\2\u0e94\u0e96\3"+
		"\2\2\2\u0e95\u0e8e\3\2\2\2\u0e95\u0e96\3\2\2\2\u0e96\u0e98\3\2\2\2\u0e97"+
		"\u0e99\5\u0190\u00c9\2\u0e98\u0e97\3\2\2\2\u0e98\u0e99\3\2\2\2\u0e99\u00eb"+
		"\3\2\2\2\u0e9a\u0e9b\t+\2\2\u0e9b\u0e9c\t(\2\2\u0e9c\u0e9d\7\u023c\2\2"+
		"\u0e9d\u0e9e\5\u0310\u0189\2\u0e9e\u0e9f\7\u0333\2\2\u0e9f\u0ea4\5\u0290"+
		"\u0149\2\u0ea0\u0ea1\7\u0335\2\2\u0ea1\u0ea3\5\u0290\u0149\2\u0ea2\u0ea0"+
		"\3\2\2\2\u0ea3\u0ea6\3\2\2\2\u0ea4\u0ea2\3\2\2\2\u0ea4\u0ea5\3\2\2\2\u0ea5"+
		"\u0ea7\3\2\2\2\u0ea6\u0ea4\3\2\2\2\u0ea7\u0ea8\7\u0334\2\2\u0ea8\u0ea9"+
		"\7l\2\2\u0ea9\u0eab\5\u0310\u0189\2\u0eaa\u0eac\5\u00eex\2\u0eab\u0eaa"+
		"\3\2\2\2\u0eab\u0eac\3\2\2\2\u0eac\u0eb3\3\2\2\2\u0ead\u0eae\7\66\2\2"+
		"\u0eae\u0eaf\t(\2\2\u0eaf\u0eb0\7\u023c\2\2\u0eb0\u0eb1\7l\2\2\u0eb1\u0eb3"+
		"\5\u0310\u0189\2\u0eb2\u0e9a\3\2\2\2\u0eb2\u0ead\3\2\2\2\u0eb3\u00ed\3"+
		"\2\2\2\u0eb4\u0eb5\7\u00d0\2\2\u0eb5\u0eb9\t)\2\2\u0eb6\u0eb7\7\u00f7"+
		"\2\2\u0eb7\u0eb9\t*\2\2\u0eb8\u0eb4\3\2\2\2\u0eb8\u0eb6\3\2\2\2\u0eb9"+
		"\u00ef\3\2\2\2\u0eba\u0ebb\7\u02a2\2\2\u0ebb\u0ec4\5\u0310\u0189\2\u0ebc"+
		"\u0ec3\5\u00f4{\2\u0ebd\u0ec0\7\u0277\2\2\u0ebe\u0ebf\7\u00b8\2\2\u0ebf"+
		"\u0ec1\5\u033e\u01a0\2\u0ec0\u0ebe\3\2\2\2\u0ec0\u0ec1\3\2\2\2\u0ec1\u0ec3"+
		"\3\2\2\2\u0ec2\u0ebc\3\2\2\2\u0ec2\u0ebd\3\2\2\2\u0ec3\u0ec6\3\2\2\2\u0ec4"+
		"\u0ec2\3\2\2\2\u0ec4\u0ec5\3\2\2\2\u0ec5\u00f1\3\2\2\2\u0ec6\u0ec4\3\2"+
		"\2\2\u0ec7\u0ec8\7\u02a2\2\2\u0ec8\u0ecc\5\u0310\u0189\2\u0ec9\u0ecb\5"+
		"\u00f4{\2\u0eca\u0ec9\3\2\2\2\u0ecb\u0ece\3\2\2\2\u0ecc\u0eca\3\2\2\2"+
		"\u0ecc\u0ecd\3\2\2\2\u0ecd\u00f3\3\2\2\2\u0ece\u0ecc\3\2\2\2\u0ecf\u0ed0"+
		"\7\b\2\2\u0ed0\u0ef0\5\u0336\u019c\2\u0ed1\u0ed2\7\u02c2\2\2\u0ed2\u0ed3"+
		"\7\u00b8\2\2\u0ed3\u0ef0\5\u033e\u01a0\2\u0ed4\u0ed5\7\u019a\2\2\u0ed5"+
		"\u0ed6\7\21\2\2\u0ed6\u0ef0\5\u033e\u01a0\2\u0ed7\u0ed8\7\u01ed\2\2\u0ed8"+
		"\u0edc\5\u033e\u01a0\2\u0ed9\u0eda\7\u0204\2\2\u0eda\u0edc\7\u01ed\2\2"+
		"\u0edb\u0ed7\3\2\2\2\u0edb\u0ed9\3\2\2\2\u0edc\u0ef0\3\2\2\2\u0edd\u0ede"+
		"\7\u01db\2\2\u0ede\u0ee2\5\u033e\u01a0\2\u0edf\u0ee0\7\u0204\2\2\u0ee0"+
		"\u0ee2\7\u01db\2\2\u0ee1\u0edd\3\2\2\2\u0ee1\u0edf\3\2\2\2\u0ee2\u0ef0"+
		"\3\2\2\2\u0ee3\u0ee5\7\u0204\2\2\u0ee4\u0ee3\3\2\2\2\u0ee4\u0ee5\3\2\2"+
		"\2\u0ee5\u0ee6\3\2\2\2\u0ee6\u0ef0\7\u0133\2\2\u0ee7\u0ee9\7\u0104\2\2"+
		"\u0ee8\u0eea\5\u033e\u01a0\2\u0ee9\u0ee8\3\2\2\2\u0ee9\u0eea\3\2\2\2\u0eea"+
		"\u0eee\3\2\2\2\u0eeb\u0eec\7\u0204\2\2\u0eec\u0eee\7\u0104\2\2\u0eed\u0ee7"+
		"\3\2\2\2\u0eed\u0eeb\3\2\2\2\u0eee\u0ef0\3\2\2\2\u0eef\u0ecf\3\2\2\2\u0eef"+
		"\u0ed1\3\2\2\2\u0eef\u0ed4\3\2\2\2\u0eef\u0edb\3\2\2\2\u0eef\u0ee1\3\2"+
		"\2\2\u0eef\u0ee4\3\2\2\2\u0eef\u0eed\3\2\2\2\u0ef0\u00f5\3\2\2\2\u0ef1"+
		"\u0ef2\7\u02a4\2\2\u0ef2\u0ef3\7\u00e7\2\2\u0ef3\u0f77\5\u0342\u01a2\2"+
		"\u0ef4\u0f21\7\u00a3\2\2\u0ef5\u0ef6\7B\2\2\u0ef6\u0f1b\7\u0333\2\2\u0ef7"+
		"\u0ef9\7\u0335\2\2\u0ef8\u0ef7\3\2\2\2\u0ef8\u0ef9\3\2\2\2\u0ef9\u0efa"+
		"\3\2\2\2\u0efa\u0efb\7\u0176\2\2\u0efb\u0efc\7\u0324\2\2\u0efc\u0f1a\7"+
		"\u031c\2\2\u0efd\u0eff\7\u0335\2\2\u0efe\u0efd\3\2\2\2\u0efe\u0eff\3\2"+
		"\2\2\u0eff\u0f00\3\2\2\2\u0f00\u0f01\7\u01d9\2\2\u0f01\u0f05\7\u0324\2"+
		"\2\u0f02\u0f03\7\u031a\2\2\u0f03\u0f06\t,\2\2\u0f04\u0f06\7\u02f6\2\2"+
		"\u0f05\u0f02\3\2\2\2\u0f05\u0f04\3\2\2\2\u0f06\u0f1a\3\2\2\2\u0f07\u0f09"+
		"\7\u0335\2\2\u0f08\u0f07\3\2\2\2\u0f08\u0f09\3\2\2\2\u0f09\u0f0a\3\2\2"+
		"\2\u0f0a\u0f0b\7\u01d4\2\2\u0f0b\u0f0c\7\u0324\2\2\u0f0c\u0f1a\t-\2\2"+
		"\u0f0d\u0f0f\7\u0335\2\2\u0f0e\u0f0d\3\2\2\2\u0f0e\u0f0f\3\2\2\2\u0f0f"+
		"\u0f10\3\2\2\2\u0f10\u0f11\7\u01cd\2\2\u0f11\u0f12\7\u0324\2\2\u0f12\u0f1a"+
		"\7\u031a\2\2\u0f13\u0f15\7\u0335\2\2\u0f14\u0f13\3\2\2\2\u0f14\u0f15\3"+
		"\2\2\2\u0f15\u0f16\3\2\2\2\u0f16\u0f17\7\u0273\2\2\u0f17\u0f18\7\u0324"+
		"\2\2\u0f18\u0f1a\t\b\2\2\u0f19\u0ef8\3\2\2\2\u0f19\u0efe\3\2\2\2\u0f19"+
		"\u0f08\3\2\2\2\u0f19\u0f0e\3\2\2\2\u0f19\u0f14\3\2\2\2\u0f1a\u0f1d\3\2"+
		"\2\2\u0f1b\u0f19\3\2\2\2\u0f1b\u0f1c\3\2\2\2\u0f1c\u0f1e\3\2\2\2\u0f1d"+
		"\u0f1b\3\2\2\2\u0f1e\u0f22\7\u0334\2\2\u0f1f\u0f22\7\u00df\2\2\u0f20\u0f22"+
		"\7\u029a\2\2\u0f21\u0ef5\3\2\2\2\u0f21\u0f1f\3\2\2\2\u0f21\u0f20\3\2\2"+
		"\2\u0f22\u0f24\3\2\2\2\u0f23\u0ef4\3\2\2\2\u0f23\u0f24\3\2\2\2\u0f24\u0f3f"+
		"\3\2\2\2\u0f25\u0f26\7\u00b8\2\2\u0f26\u0f3b\7\u0333\2\2\u0f27\u0f29\7"+
		"\u0335\2\2\u0f28\u0f27\3\2\2\2\u0f28\u0f29\3\2\2\2\u0f29\u0f2a\3\2\2\2"+
		"\u0f2a\u0f2b\7\u024e\2\2\u0f2b\u0f2c\7\u0324\2\2\u0f2c\u0f3a\7\u031a\2"+
		"\2\u0f2d\u0f2f\7\u0335\2\2\u0f2e\u0f2d\3\2\2\2\u0f2e\u0f2f\3\2\2\2\u0f2f"+
		"\u0f30\3\2\2\2\u0f30\u0f31\7\u021a\2\2\u0f31\u0f32\7\u0324\2\2\u0f32\u0f3a"+
		"\t.\2\2\u0f33\u0f35\7\u0335\2\2\u0f34\u0f33\3\2\2\2\u0f34\u0f35\3\2\2"+
		"\2\u0f35\u0f36\3\2\2\2\u0f36\u0f37\7\u02c5\2\2\u0f37\u0f38\7\u0324\2\2"+
		"\u0f38\u0f3a\t\b\2\2\u0f39\u0f28\3\2\2\2\u0f39\u0f2e\3\2\2\2\u0f39\u0f34"+
		"\3\2\2\2\u0f3a\u0f3d\3\2\2\2\u0f3b\u0f39\3\2\2\2\u0f3b\u0f3c\3\2\2\2\u0f3c"+
		"\u0f3e\3\2\2\2\u0f3d\u0f3b\3\2\2\2\u0f3e\u0f40\7\u0334\2\2\u0f3f\u0f25"+
		"\3\2\2\2\u0f3f\u0f40\3\2\2\2\u0f40\u0f6f\3\2\2\2\u0f41\u0f6d\7\u00b6\2"+
		"\2\u0f42\u0f44\7\u0335\2\2\u0f43\u0f42\3\2\2\2\u0f43\u0f44\3\2\2\2\u0f44"+
		"\u0f46\3\2\2\2\u0f45\u0f47\7f\2\2\u0f46\u0f45\3\2\2\2\u0f46\u0f47\3\2"+
		"\2\2\u0f47\u0f48\3\2\2\2\u0f48\u0f54\5\u0342\u01a2\2\u0f49\u0f55\7\u0324"+
		"\2\2\u0f4a\u0f4b\7\u0326\2\2\u0f4b\u0f55\7\u0325\2\2\u0f4c\u0f4d\7\u0327"+
		"\2\2\u0f4d\u0f55\7\u0324\2\2\u0f4e\u0f55\7\u0325\2\2\u0f4f\u0f50\7\u0325"+
		"\2\2\u0f50\u0f55\7\u0324\2\2\u0f51\u0f55\7\u0326\2\2\u0f52\u0f53\7\u0326"+
		"\2\2\u0f53\u0f55\7\u0324\2\2\u0f54\u0f49\3\2\2\2\u0f54\u0f4a\3\2\2\2\u0f54"+
		"\u0f4c\3\2\2\2\u0f54\u0f4e\3\2\2\2\u0f54\u0f4f\3\2\2\2\u0f54\u0f51\3\2"+
		"\2\2\u0f54\u0f52\3\2\2\2\u0f55\u0f56\3\2\2\2\u0f56\u0f57\t\37\2\2\u0f57"+
		"\u0f6e\3\2\2\2\u0f58\u0f5a\7\u0335\2\2\u0f59\u0f58\3\2\2\2\u0f59\u0f5a"+
		"\3\2\2\2\u0f5a\u0f5b\3\2\2\2\u0f5b\u0f5d\t\36\2\2\u0f5c\u0f5e\7f\2\2\u0f5d"+
		"\u0f5c\3\2\2\2\u0f5d\u0f5e\3\2\2\2\u0f5e\u0f6a\3\2\2\2\u0f5f\u0f6b\7\u0324"+
		"\2\2\u0f60\u0f61\7\u0326\2\2\u0f61\u0f6b\7\u0325\2\2\u0f62\u0f63\7\u0327"+
		"\2\2\u0f63\u0f6b\7\u0324\2\2\u0f64\u0f6b\7\u0325\2\2\u0f65\u0f66\7\u0325"+
		"\2\2\u0f66\u0f6b\7\u0324\2\2\u0f67\u0f6b\7\u0326\2\2\u0f68\u0f69\7\u0326"+
		"\2\2\u0f69\u0f6b\7\u0324\2\2\u0f6a\u0f5f\3\2\2\2\u0f6a\u0f60\3\2\2\2\u0f6a"+
		"\u0f62\3\2\2\2\u0f6a\u0f64\3\2\2\2\u0f6a\u0f65\3\2\2\2\u0f6a\u0f67\3\2"+
		"\2\2\u0f6a\u0f68\3\2\2\2\u0f6b\u0f6c\3\2\2\2\u0f6c\u0f6e\t\37\2\2\u0f6d"+
		"\u0f43\3\2\2\2\u0f6d\u0f59\3\2\2\2\u0f6e\u0f70\3\2\2\2\u0f6f\u0f41\3\2"+
		"\2\2\u0f6f\u0f70\3\2\2\2\u0f70\u0f78\3\2\2\2\u0f71\u0f72\7\u0269\2\2\u0f72"+
		"\u0f78\7\u00b6\2\2\u0f73\u0f74\7\u01f2\2\2\u0f74\u0f75\7\u01f6\2\2\u0f75"+
		"\u0f76\7\u0324\2\2\u0f76\u0f78\5\u0342\u01a2\2\u0f77\u0f23\3\2\2\2\u0f77"+
		"\u0f71\3\2\2\2\u0f77\u0f73\3\2\2\2\u0f78\u00f7\3\2\2\2\u0f79\u0f7a\7\u02a4"+
		"\2\2\u0f7a\u0f7b\7\u00e7\2\2\u0f7b\u1005\5\u0342\u01a2\2\u0f7c\u0fa9\7"+
		"\u00a3\2\2\u0f7d\u0f7e\7B\2\2\u0f7e\u0fa3\7\u0333\2\2\u0f7f\u0f81\7\u0335"+
		"\2\2\u0f80\u0f7f\3\2\2\2\u0f80\u0f81\3\2\2\2\u0f81\u0f82\3\2\2\2\u0f82"+
		"\u0f83\7\u0176\2\2\u0f83\u0f84\7\u0324\2\2\u0f84\u0fa2\7\u031c\2\2\u0f85"+
		"\u0f87\7\u0335\2\2\u0f86\u0f85\3\2\2\2\u0f86\u0f87\3\2\2\2\u0f87\u0f88"+
		"\3\2\2\2\u0f88\u0f89\7\u01d9\2\2\u0f89\u0f8d\7\u0324\2\2\u0f8a\u0f8b\7"+
		"\u031a\2\2\u0f8b\u0f8e\t,\2\2\u0f8c\u0f8e\7\u02f6\2\2\u0f8d\u0f8a\3\2"+
		"\2\2\u0f8d\u0f8c\3\2\2\2\u0f8e\u0fa2\3\2\2\2\u0f8f\u0f91\7\u0335\2\2\u0f90"+
		"\u0f8f\3\2\2\2\u0f90\u0f91\3\2\2\2\u0f91\u0f92\3\2\2\2\u0f92\u0f93\7\u01d4"+
		"\2\2\u0f93\u0f94\7\u0324\2\2\u0f94\u0fa2\t-\2\2\u0f95\u0f97\7\u0335\2"+
		"\2\u0f96\u0f95\3\2\2\2\u0f96\u0f97\3\2\2\2\u0f97\u0f98\3\2\2\2\u0f98\u0f99"+
		"\7\u01cd\2\2\u0f99\u0f9a\7\u0324\2\2\u0f9a\u0fa2\7\u031a\2\2\u0f9b\u0f9d"+
		"\7\u0335\2\2\u0f9c\u0f9b\3\2\2\2\u0f9c\u0f9d\3\2\2\2\u0f9d\u0f9e\3\2\2"+
		"\2\u0f9e\u0f9f\7\u0273\2\2\u0f9f\u0fa0\7\u0324\2\2\u0fa0\u0fa2\t\b\2\2"+
		"\u0fa1\u0f80\3\2\2\2\u0fa1\u0f86\3\2\2\2\u0fa1\u0f90\3\2\2\2\u0fa1\u0f96"+
		"\3\2\2\2\u0fa1\u0f9c\3\2\2\2\u0fa2\u0fa5\3\2\2\2\u0fa3\u0fa1\3\2\2\2\u0fa3"+
		"\u0fa4\3\2\2\2\u0fa4\u0fa6\3\2\2\2\u0fa5\u0fa3\3\2\2\2\u0fa6\u0faa\7\u0334"+
		"\2\2\u0fa7\u0faa\7\u00df\2\2\u0fa8\u0faa\7\u029a\2\2\u0fa9\u0f7d\3\2\2"+
		"\2\u0fa9\u0fa7\3\2\2\2\u0fa9\u0fa8\3\2\2\2\u0faa\u0fac\3\2\2\2\u0fab\u0f7c"+
		"\3\2\2\2\u0fab\u0fac\3\2\2\2\u0fac\u0fcd\3\2\2\2\u0fad\u0fae\7\u00b8\2"+
		"\2\u0fae\u0fc9\7\u0333\2\2\u0faf\u0fb1\7\u0335\2\2\u0fb0\u0faf\3\2\2\2"+
		"\u0fb0\u0fb1\3\2\2\2\u0fb1\u0fb2\3\2\2\2\u0fb2\u0fb3\7\u024e\2\2\u0fb3"+
		"\u0fb4\7\u0324\2\2\u0fb4\u0fc8\7\u031a\2\2\u0fb5\u0fb7\7\u0335\2\2\u0fb6"+
		"\u0fb5\3\2\2\2\u0fb6\u0fb7\3\2\2\2\u0fb7\u0fb8\3\2\2\2\u0fb8\u0fb9\7\u021a"+
		"\2\2\u0fb9\u0fba\7\u0324\2\2\u0fba\u0fc8\t.\2\2\u0fbb\u0fbd\7\u0335\2"+
		"\2\u0fbc\u0fbb\3\2\2\2\u0fbc\u0fbd\3\2\2\2\u0fbd\u0fbe\3\2\2\2\u0fbe\u0fbf"+
		"\7\u02c5\2\2\u0fbf\u0fc0\7\u0324\2\2\u0fc0\u0fc8\t\b\2\2\u0fc1\u0fc3\7"+
		"\u0335\2\2\u0fc2\u0fc1\3\2\2\2\u0fc2\u0fc3\3\2\2\2\u0fc3\u0fc4\3\2\2\2"+
		"\u0fc4\u0fc5\7\u00e6\2\2\u0fc5\u0fc6\7\u0324\2\2\u0fc6\u0fc8\5\u0342\u01a2"+
		"\2\u0fc7\u0fb0\3\2\2\2\u0fc7\u0fb6\3\2\2\2\u0fc7\u0fbc\3\2\2\2\u0fc7\u0fc2"+
		"\3\2\2\2\u0fc8\u0fcb\3\2\2\2\u0fc9\u0fc7\3\2\2\2\u0fc9\u0fca\3\2\2\2\u0fca"+
		"\u0fcc\3\2\2\2\u0fcb\u0fc9\3\2\2\2\u0fcc\u0fce\7\u0334\2\2\u0fcd\u0fad"+
		"\3\2\2\2\u0fcd\u0fce\3\2\2\2\u0fce\u0ffd\3\2\2\2\u0fcf\u0ffb\7\u00b6\2"+
		"\2\u0fd0\u0fd2\7\u0335\2\2\u0fd1\u0fd0\3\2\2\2\u0fd1\u0fd2\3\2\2\2\u0fd2"+
		"\u0fd4\3\2\2\2\u0fd3\u0fd5\7f\2\2\u0fd4\u0fd3\3\2\2\2\u0fd4\u0fd5\3\2"+
		"\2\2\u0fd5\u0fd6\3\2\2\2\u0fd6\u0fe2\5\u0342\u01a2\2\u0fd7\u0fe3\7\u0324"+
		"\2\2\u0fd8\u0fd9\7\u0326\2\2\u0fd9\u0fe3\7\u0325\2\2\u0fda\u0fdb\7\u0327"+
		"\2\2\u0fdb\u0fe3\7\u0324\2\2\u0fdc\u0fe3\7\u0325\2\2\u0fdd\u0fde\7\u0325"+
		"\2\2\u0fde\u0fe3\7\u0324\2\2\u0fdf\u0fe3\7\u0326\2\2\u0fe0\u0fe1\7\u0326"+
		"\2\2\u0fe1\u0fe3\7\u0324\2\2\u0fe2\u0fd7\3\2\2\2\u0fe2\u0fd8\3\2\2\2\u0fe2"+
		"\u0fda\3\2\2\2\u0fe2\u0fdc\3\2\2\2\u0fe2\u0fdd\3\2\2\2\u0fe2\u0fdf\3\2"+
		"\2\2\u0fe2\u0fe0\3\2\2\2\u0fe3\u0fe4\3\2\2\2\u0fe4\u0fe5\t\37\2\2\u0fe5"+
		"\u0ffc\3\2\2\2\u0fe6\u0fe8\7\u0335\2\2\u0fe7\u0fe6\3\2\2\2\u0fe7\u0fe8"+
		"\3\2\2\2\u0fe8\u0fe9\3\2\2\2\u0fe9\u0feb\t\36\2\2\u0fea\u0fec\7f\2\2\u0feb"+
		"\u0fea\3\2\2\2\u0feb\u0fec\3\2\2\2\u0fec\u0ff8\3\2\2\2\u0fed\u0ff9\7\u0324"+
		"\2\2\u0fee\u0fef\7\u0326\2\2\u0fef\u0ff9\7\u0325\2\2\u0ff0\u0ff1\7\u0327"+
		"\2\2\u0ff1\u0ff9\7\u0324\2\2\u0ff2\u0ff9\7\u0325\2\2\u0ff3\u0ff4\7\u0325"+
		"\2\2\u0ff4\u0ff9\7\u0324\2\2\u0ff5\u0ff9\7\u0326\2\2\u0ff6\u0ff7\7\u0326"+
		"\2\2\u0ff7\u0ff9\7\u0324\2\2\u0ff8\u0fed\3\2\2\2\u0ff8\u0fee\3\2\2\2\u0ff8"+
		"\u0ff0\3\2\2\2\u0ff8\u0ff2\3\2\2\2\u0ff8\u0ff3\3\2\2\2\u0ff8\u0ff5\3\2"+
		"\2\2\u0ff8\u0ff6\3\2\2\2\u0ff9\u0ffa\3\2\2\2\u0ffa\u0ffc\t\37\2\2\u0ffb"+
		"\u0fd1\3\2\2\2\u0ffb\u0fe7\3\2\2\2\u0ffc\u0ffe\3\2\2\2\u0ffd\u0fcf\3\2"+
		"\2\2\u0ffd\u0ffe\3\2\2\2\u0ffe\u1006\3\2\2\2\u0fff\u1000\7\u0269\2\2\u1000"+
		"\u1006\7\u00b6\2\2\u1001\u1002\7\u01f2\2\2\u1002\u1003\7\u01f6\2\2\u1003"+
		"\u1004\7\u0324\2\2\u1004\u1006\5\u0342\u01a2\2\u1005\u0fab\3\2\2\2\u1005"+
		"\u0fff\3\2\2\2\u1005\u1001\3\2\2\2\u1006\u00f9\3\2\2\2\u1007\u1008\7\u02a4"+
		"\2\2\u1008\u1009\7\u00e7\2\2\u1009\u100a\7\u02ba\2\2\u100a\u100f\5\u0342"+
		"\u01a2\2\u100b\u100c\7D\2\2\u100c\u100d\7\u02a4\2\2\u100d\u100e\7\u00e7"+
		"\2\2\u100e\u1010\5\u0342\u01a2\2\u100f\u100b\3\2\2\2\u100f\u1010\3\2\2"+
		"\2\u1010\u1018\3\2\2\2\u1011\u1012\t\25\2\2\u1012\u1013\7\u0333\2\2\u1013"+
		"\u1014\5\u0342\u01a2\2\u1014\u1015\7\u0334\2\2\u1015\u1017\3\2\2\2\u1016"+
		"\u1011\3\2\2\2\u1017\u101a\3\2\2\2\u1018\u1016\3\2\2\2\u1018\u1019\3\2"+
		"\2\2\u1019\u1021\3\2\2\2\u101a\u1018\3\2\2\2\u101b\u101c\7\u00b8\2\2\u101c"+
		"\u101d\7\u0333\2\2\u101d\u101e\7\u02c5\2\2\u101e\u101f\7\u0324\2\2\u101f"+
		"\u1020\t\b\2\2\u1020\u1022\7\u0334\2\2\u1021\u101b\3\2\2\2\u1021\u1022"+
		"\3\2\2\2\u1022\u00fb\3\2\2\2\u1023\u1024\7\u02a4\2\2\u1024\u1025\7\u00e7"+
		"\2\2\u1025\u1026\7\u02ba\2\2\u1026\u102b\5\u0342\u01a2\2\u1027\u1028\7"+
		"D\2\2\u1028\u1029\7\u02a4\2\2\u1029\u102a\7\u00e7\2\2\u102a\u102c\5\u0342"+
		"\u01a2\2\u102b\u1027\3\2\2\2\u102b\u102c\3\2\2\2\u102c\u1034\3\2\2\2\u102d"+
		"\u102e\7\3\2\2\u102e\u102f\7\u0333\2\2\u102f\u1030\5\u0342\u01a2\2\u1030"+
		"\u1031\7\u0334\2\2\u1031\u1033\3\2\2\2\u1032\u102d\3\2\2\2\u1033\u1036"+
		"\3\2\2\2\u1034\u1032\3\2\2\2\u1034\u1035\3\2\2\2\u1035\u103d\3\2\2\2\u1036"+
		"\u1034\3\2\2\2\u1037\u1038\7\u00b8\2\2\u1038\u1039\7\u0333\2\2\u1039\u103a"+
		"\7\u02c5\2\2\u103a\u103b\7\u0324\2\2\u103b\u103c\t\b\2\2\u103c\u103e\7"+
		"\u0334\2\2\u103d\u1037\3\2\2\2\u103d\u103e\3\2\2\2\u103e\u00fd\3\2\2\2"+
		"\u103f\u1040\7\u02a4\2\2\u1040\u1041\7\u011f\2\2\u1041\u10ab\7\u0099\2"+
		"\2\u1042\u1043\7\u0245\2\2\u1043\u1067\7\u00cf\2\2\u1044\u1045\7\u012c"+
		"\2\2\u1045\u1055\7\u0324\2\2\u1046\u1056\7\u00ef\2\2\u1047\u1049\7\u0335"+
		"\2\2\u1048\u1047\3\2\2\2\u1048\u1049\3\2\2\2\u1049\u104a\3\2\2\2\u104a"+
		"\u1052\7\u031a\2\2\u104b\u104d\7\u0335\2\2\u104c\u104b\3\2\2\2\u104c\u104d"+
		"\3\2\2\2\u104d\u104e\3\2\2\2\u104e\u104f\7\u031a\2\2\u104f\u1050\7\u00a3"+
		"\2\2\u1050\u1052\7\u031a\2\2\u1051\u1048\3\2\2\2\u1051\u104c\3\2\2\2\u1052"+
		"\u1053\3\2\2\2\u1053\u1051\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u1056\3\2"+
		"\2\2\u1055\u1046\3\2\2\2\u1055\u1051\3\2\2\2\u1056\u1068\3\2\2\2\u1057"+
		"\u1058\7\u0213\2\2\u1058\u1063\7\u0324\2\2\u1059\u105b\7\u0335\2\2\u105a"+
		"\u1059\3\2\2\2\u105a\u105b\3\2\2\2\u105b\u105c\3\2\2\2\u105c\u1064\7\u031a"+
		"\2\2\u105d\u105f\7\u0335\2\2\u105e\u105d\3\2\2\2\u105e\u105f\3\2\2\2\u105f"+
		"\u1060\3\2\2\2\u1060\u1061\7\u031a\2\2\u1061\u1062\7\u00a3\2\2\u1062\u1064"+
		"\7\u031a\2\2\u1063\u105a\3\2\2\2\u1063\u105e\3\2\2\2\u1064\u1065\3\2\2"+
		"\2\u1065\u1063\3\2\2\2\u1065\u1066\3\2\2\2\u1066\u1068\3\2\2\2\u1067\u1044"+
		"\3\2\2\2\u1067\u1057\3\2\2\2\u1068\u10ac\3\2\2\2\u1069\u106a\7\u0148\2"+
		"\2\u106a\u107a\7\u01c0\2\2\u106b\u107b\7l\2\2\u106c\u107b\7j\2\2\u106d"+
		"\u106e\7\u022c\2\2\u106e\u106f\7\u0324\2\2\u106f\u107b\t/\2\2\u1070\u1071"+
		"\7\u01d5\2\2\u1071\u1075\7\u0324\2\2\u1072\u1073\7\u031a\2\2\u1073\u1076"+
		"\7\u01dc\2\2\u1074\u1076\7.\2\2\u1075\u1072\3\2\2\2\u1075\u1074\3\2\2"+
		"\2\u1076\u107b\3\2\2\2\u1077\u1078\7\u01cd\2\2\u1078\u1079\7\u0324\2\2"+
		"\u1079\u107b\t\24\2\2\u107a\u106b\3\2\2\2\u107a\u106c\3\2\2\2\u107a\u106d"+
		"\3\2\2\2\u107a\u1070\3\2\2\2\u107a\u1077\3\2\2\2\u107b\u10ac\3\2\2\2\u107c"+
		"\u107d\7\u016b\2\2\u107d\u107e\7\u0117\2\2\u107e\u1090\7\u024a\2\2\u107f"+
		"\u1080\7\u02ff\2\2\u1080\u1081\7\u0324\2\2\u1081\u1091\t/\2\2\u1082\u1083"+
		"\7\u02bd\2\2\u1083\u1084\7\u0324\2\2\u1084\u1091\t/\2\2\u1085\u1086\7"+
		"\u02be\2\2\u1086\u1087\7\u0324\2\2\u1087\u1091\t/\2\2\u1088\u1089\7\u02bf"+
		"\2\2\u1089\u1091\t/\2\2\u108a\u108b\7\u016d\2\2\u108b\u108c\7\u0324\2"+
		"\2\u108c\u1091\t/\2\2\u108d\u108e\7\u018e\2\2\u108e\u108f\7\u0324\2\2"+
		"\u108f\u1091\t\24\2\2\u1090\u107f\3\2\2\2\u1090\u1082\3\2\2\2\u1090\u1085"+
		"\3\2\2\2\u1090\u1088\3\2\2\2\u1090\u108a\3\2\2\2\u1090\u108d\3\2\2\2\u1091"+
		"\u10ac\3\2\2\2\u1092\u1093\7\u018a\2\2\u1093\u1094\7\u0117\2\2\u1094\u1095"+
		"\7\u0123\2\2\u1095\u1096\7\u0324\2\2\u1096\u10ac\t\60\2\2\u1097\u1098"+
		"\7\u0101\2\2\u1098\u1099\7\u0238\2\2\u1099\u10a6\7\u0167\2\2\u109a\u109b"+
		"\7l\2\2\u109b\u109c\7\u0333\2\2\u109c\u109d\7\u0175\2\2\u109d\u109e\7"+
		"\u0324\2\2\u109e\u109f\7\u031c\2\2\u109f\u10a0\7\u0335\2\2\u10a0\u10a1"+
		"\7\u02b3\2\2\u10a1\u10a2\7\u0324\2\2\u10a2\u10a3\7\u031a\2\2\u10a3\u10a4"+
		"\t\61\2\2\u10a4\u10a7\7\u0334\2\2\u10a5\u10a7\7j\2\2\u10a6\u109a\3\2\2"+
		"\2\u10a6\u10a5\3\2\2\2\u10a7\u10ac\3\2\2\2\u10a8\u10a9\7\u0099\2\2\u10a9"+
		"\u10aa\7\u02b6\2\2\u10aa\u10ac\t\b\2\2\u10ab\u1042\3\2\2\2\u10ab\u1069"+
		"\3\2\2\2\u10ab\u107c\3\2\2\2\u10ab\u1092\3\2\2\2\u10ab\u1097\3\2\2\2\u10ab"+
		"\u10a8\3\2\2\2\u10ac\u00ff\3\2\2\2\u10ad\u10ae\7\u02a4\2\2\u10ae\u10af"+
		"\7\u0280\2\2\u10af\u10b7\5\u0342\u01a2\2\u10b0\u10b1\t\25\2\2\u10b1\u10b2"+
		"\7\u01e0\2\2\u10b2\u10b8\5\u0342\u01a2\2\u10b3\u10b4\7\u00b8\2\2\u10b4"+
		"\u10b5\7\u01f6\2\2\u10b5\u10b6\7\u0324\2\2\u10b6\u10b8\5\u0342\u01a2\2"+
		"\u10b7\u10b0\3\2\2\2\u10b7\u10b3\3\2\2\2\u10b8\u0101\3\2\2\2\u10b9\u10ba"+
		"\7\u02a4\2\2\u10ba\u10bb\7\u0280\2\2\u10bb\u10be\5\u0342\u01a2\2\u10bc"+
		"\u10bd\7\n\2\2\u10bd\u10bf\5\u0342\u01a2\2\u10be\u10bc\3\2\2\2\u10be\u10bf"+
		"\3\2\2\2\u10bf\u0103\3\2\2\2\u10c0\u10c1\7\u02a4\2\2\u10c1\u10c2\7\u0280"+
		"\2\2\u10c2\u10c3\5\u0342\u01a2\2\u10c3\u10c4\t\25\2\2\u10c4\u10c5\7\u01e0"+
		"\2\2\u10c5\u10c6\5\u0342\u01a2\2\u10c6\u0105\3\2\2\2\u10c7\u10c8\7\u02a7"+
		"\2\2\u10c8\u10cc\5\u0342\u01a2\2\u10c9\u10ca\7l\2\2\u10ca\u10cb\7\u024f"+
		"\2\2\u10cb\u10cd\5\u0310\u0189\2\u10cc\u10c9\3\2\2\2\u10cc\u10cd\3\2\2"+
		"\2\u10cd\u10d5\3\2\2\2\u10ce\u10d0\7\u0335\2\2\u10cf\u10ce\3\2\2\2\u10cf"+
		"\u10d0\3\2\2\2\u10d0\u10d1\3\2\2\2\u10d1\u10d2\t\25\2\2\u10d2\u10d4\5"+
		"\u0342\u01a2\2\u10d3\u10cf\3\2\2\2\u10d4\u10d7\3\2\2\2\u10d5\u10d3\3\2"+
		"\2\2\u10d5\u10d6\3\2\2\2\u10d6\u0107\3\2\2\2\u10d7\u10d5\3\2\2\2\u10d8"+
		"\u10d9\7\u02a7\2\2\u10d9\u10dc\5\u0342\u01a2\2\u10da\u10db\7\n\2\2\u10db"+
		"\u10dd\5\u0342\u01a2\2\u10dc\u10da\3\2\2\2\u10dc\u10dd\3\2\2\2\u10dd\u10de"+
		"\3\2\2\2\u10de\u10df\7l\2\2\u10df\u10e0\7\u024f\2\2\u10e0\u10ec\5\u0310"+
		"\u0189\2\u10e1\u10e6\7\u0333\2\2\u10e2\u10e4\7\u0335\2\2\u10e3\u10e2\3"+
		"\2\2\2\u10e3\u10e4\3\2\2\2\u10e4\u10e5\3\2\2\2\u10e5\u10e7\5\u01b0\u00d9"+
		"\2\u10e6\u10e3\3\2\2\2\u10e7\u10e8\3\2\2\2\u10e8\u10e6\3\2\2\2\u10e8\u10e9"+
		"\3\2\2\2\u10e9\u10ea\3\2\2\2\u10ea\u10eb\7\u0334\2\2\u10eb\u10ed\3\2\2"+
		"\2\u10ec\u10e1\3\2\2\2\u10ec\u10ed\3\2\2\2\u10ed\u0109\3\2\2\2\u10ee\u10ef"+
		"\7\u02a7\2\2\u10ef\u10f0\7\u01c6\2\2\u10f0\u10fd\7\\\2\2\u10f1\u10f3\7"+
		"\u017e\2\2\u10f2\u10f1\3\2\2\2\u10f2\u10f3\3\2\2\2\u10f3\u10f4\3\2\2\2"+
		"\u10f4\u10fe\7\u0263\2\2\u10f5\u10f6\7\u00b8\2\2\u10f6\u10f7\t\62\2\2"+
		"\u10f7\u10f8\7\u0324\2\2\u10f8\u10f9\7\u031c\2\2\u10f9\u10fa\7\u0335\2"+
		"\2\u10fa\u10fb\t\63\2\2\u10fb\u10fc\7\u0324\2\2\u10fc\u10fe\7\u031c\2"+
		"\2\u10fd\u10f2\3\2\2\2\u10fd\u10f5\3\2\2\2\u10fe\u010b\3\2\2\2\u10ff\u1100"+
		"\7\u02d2\2\2\u1100\u1101\7\\\2\2\u1101\u1102\5\u0342\u01a2\2\u1102\u1103"+
		"\t\25\2\2\u1103\u1104\7\u0159\2\2\u1104\u1110\7\21\2\2\u1105\u1106\7\u010b"+
		"\2\2\u1106\u1111\5\u0342\u01a2\2\u1107\u1108\7\u022b\2\2\u1108\u1109\7"+
		"\u0324\2\2\u1109\u1111\7\u031c\2\2\u110a\u110b\7\u02d2\2\2\u110b\u110c"+
		"\7\\\2\2\u110c\u1111\5\u0342\u01a2\2\u110d\u110e\7\u00e4\2\2\u110e\u110f"+
		"\7\\\2\2\u110f\u1111\5\u0342\u01a2\2\u1110\u1105\3\2\2\2\u1110\u1107\3"+
		"\2\2\2\u1110\u110a\3\2\2\2\u1110\u110d\3\2\2\2\u1111\u010d\3\2\2\2\u1112"+
		"\u1113\7\u02d2\2\2\u1113\u1114\7\\\2\2\u1114\u1117\5\u0342\u01a2\2\u1115"+
		"\u1116\7\n\2\2\u1116\u1118\5\u0342\u01a2\2\u1117\u1115\3\2\2\2\u1117\u1118"+
		"\3\2\2\2\u1118\u111c\3\2\2\2\u1119\u111a\7H\2\2\u111a\u111b\7\u024c\2"+
		"\2\u111b\u111d\5\u0342\u01a2\2\u111c\u1119\3\2\2\2\u111c\u111d\3\2\2\2"+
		"\u111d\u111e\3\2\2\2\u111e\u113f\7\u00b8\2\2\u111f\u1120\7\u01ab\2\2\u1120"+
		"\u1121\7\u0324\2\2\u1121\u112f\7\u031c\2\2\u1122\u1123\7\u00d2\2\2\u1123"+
		"\u1124\7\u0324\2\2\u1124\u112f\t\64\2\2\u1125\u1126\7\u0192\2\2\u1126"+
		"\u1127\7\u0324\2\2\u1127\u112f\7\u031c\2\2\u1128\u1129\7\u024b\2\2\u1129"+
		"\u112a\7\u0324\2\2\u112a\u112f\7\u031c\2\2\u112b\u112c\7\u012e\2\2\u112c"+
		"\u112d\7\u0324\2\2\u112d\u112f\t\f\2\2\u112e\u111f\3\2\2\2\u112e\u1122"+
		"\3\2\2\2\u112e\u1125\3\2\2\2\u112e\u1128\3\2\2\2\u112e\u112b\3\2\2\2\u112f"+
		"\u1140\3\2\2\2\u1130\u1131\7\u0159\2\2\u1131\u113d\7\21\2\2\u1132\u1133"+
		"\7\u010b\2\2\u1133\u113e\5\u0342\u01a2\2\u1134\u1135\7\u022b\2\2\u1135"+
		"\u1136\7\u0324\2\2\u1136\u113e\7\u031c\2\2\u1137\u1138\7\u02d2\2\2\u1138"+
		"\u1139\7\\\2\2\u1139\u113e\5\u0342\u01a2\2\u113a\u113b\7\u00e4\2\2\u113b"+
		"\u113c\7\\\2\2\u113c\u113e\5\u0342\u01a2\2\u113d\u1132\3\2\2\2\u113d\u1134"+
		"\3\2\2\2\u113d\u1137\3\2\2\2\u113d\u113a\3\2\2\2\u113e\u1140\3\2\2\2\u113f"+
		"\u112e\3\2\2\2\u113f\u1130\3\2\2\2\u1140\u010f\3\2\2\2\u1141\u1142\7\u02d4"+
		"\2\2\u1142\u1143\5\u0310\u0189\2\u1143\u1144\7D\2\2\u1144\u1145\5\u0310"+
		"\u0189\2\u1145\u0111\3\2\2\2\u1146\u1147\7\u00b0\2\2\u1147\u1148\5\u0342"+
		"\u01a2\2\u1148\u117b\7\u00b8\2\2\u1149\u114b\7\u0335\2\2\u114a\u1149\3"+
		"\2\2\2\u114a\u114b\3\2\2\2\u114b\u114c\3\2\2\2\u114c\u114d\7\u01f6\2\2"+
		"\u114d\u114e\7\u0324\2\2\u114e\u117c\5\u0342\u01a2\2\u114f\u1151\7\u0335"+
		"\2\2\u1150\u114f\3\2\2\2\u1150\u1151\3\2\2\2\u1151\u1152\3\2\2\2\u1152"+
		"\u1153\7\u0140\2\2\u1153\u1156\7\u0324\2\2\u1154\u1157\5\u0342\u01a2\2"+
		"\u1155\u1157\7g\2\2\u1156\u1154\3\2\2\2\u1156\u1155\3\2\2\2\u1157\u117c"+
		"\3\2\2\2\u1158\u115a\7\u0335\2\2\u1159\u1158\3\2\2\2\u1159\u115a\3\2\2"+
		"\2\u115a\u115b\3\2\2\2\u115b\u115c\7\u01c1\2\2\u115c\u115d\7\u0324\2\2"+
		"\u115d\u117c\5\u0342\u01a2\2\u115e\u1160\7\u0335\2\2\u115f\u115e\3\2\2"+
		"\2\u115f\u1160\3\2\2\2\u1160\u1161\3\2\2\2\u1161\u1162\7\u022b\2\2\u1162"+
		"\u1163\7\u0324\2\2\u1163\u1167\7\u031c\2\2\u1164\u1165\7\u0219\2\2\u1165"+
		"\u1166\7\u0324\2\2\u1166\u1168\7\u031c\2\2\u1167\u1164\3\2\2\2\u1168\u1169"+
		"\3\2\2\2\u1169\u1167\3\2\2\2\u1169\u116a\3\2\2\2\u116a\u117c\3\2\2\2\u116b"+
		"\u116d\7\u0335\2\2\u116c\u116b\3\2\2\2\u116c\u116d\3\2\2\2\u116d\u116e"+
		"\3\2\2\2\u116e\u116f\7\u013f\2\2\u116f\u1173\7\u0324\2\2\u1170\u1174\7"+
		"\u020a\2\2\u1171\u1174\7\u031a\2\2\u1172\u1174\5\u0342\u01a2\2\u1173\u1170"+
		"\3\2\2\2\u1173\u1171\3\2\2\2\u1173\u1172\3\2\2\2\u1174\u117c\3\2\2\2\u1175"+
		"\u1177\7\u0335\2\2\u1176\u1175\3\2\2\2\u1176\u1177\3\2\2\2\u1177\u1178"+
		"\3\2\2\2\u1178\u1179\7\u00d4\2\2\u1179\u117a\7\u0324\2\2\u117a\u117c\t"+
		"\b\2\2\u117b\u114a\3\2\2\2\u117b\u1150\3\2\2\2\u117b\u1159\3\2\2\2\u117b"+
		"\u115f\3\2\2\2\u117b\u116c\3\2\2\2\u117b\u1176\3\2\2\2\u117c\u117d\3\2"+
		"\2\2\u117d\u117b\3\2\2\2\u117d\u117e\3\2\2\2\u117e\u0113\3\2\2\2\u117f"+
		"\u1180\7\u00b0\2\2\u1180\u1182\5\u0342\u01a2\2\u1181\u1183\5\u0116\u008c"+
		"\2\u1182\u1181\3\2\2\2\u1182\u1183\3\2\2\2\u1183\u1187\3\2\2\2\u1184\u1185"+
		"\7H\2\2\u1185\u1186\7@\2\2\u1186\u1188\7\u024c\2\2\u1187\u1184\3\2\2\2"+
		"\u1187\u1188\3\2\2\2\u1188\u1192\3\2\2\2\u1189\u118a\7\u00b8\2\2\u118a"+
		"\u118f\5\u0118\u008d\2\u118b\u118c\7\u0335\2\2\u118c\u118e\5\u0118\u008d"+
		"\2\u118d\u118b\3\2\2\2\u118e\u1191\3\2\2\2\u118f\u118d\3\2\2\2\u118f\u1190"+
		"\3\2\2\2\u1190\u1193\3\2\2\2\u1191\u118f\3\2\2\2\u1192\u1189\3\2\2\2\u1192"+
		"\u1193\3\2\2\2\u1193\u119b\3\2\2\2\u1194\u1198\t\65\2\2\u1195\u1199\7"+
		"\u010b\2\2\u1196\u1197\7\u00e4\2\2\u1197\u1199\7\\\2\2\u1198\u1195\3\2"+
		"\2\2\u1198\u1196\3\2\2\2\u1199\u119a\3\2\2\2\u119a\u119c\5\u0342\u01a2"+
		"\2\u119b\u1194\3\2\2\2\u119b\u119c\3\2\2\2\u119c\u0115\3\2\2\2\u119d\u119e"+
		"\t\65\2\2\u119e\u119f\7\u01c1\2\2\u119f\u11a3\5\u0342\u01a2\2\u11a0\u11a1"+
		"\7\u0308\2\2\u11a1\u11a3\7\u01c1\2\2\u11a2\u119d\3\2\2\2\u11a2\u11a0\3"+
		"\2\2\2\u11a3\u0117\3\2\2\2\u11a4\u11a5\7\u0140\2\2\u11a5\u11a6\7\u0324"+
		"\2\2\u11a6\u11b8\5\u0342\u01a2\2\u11a7\u11a8\7\u013f\2\2\u11a8\u11ac\7"+
		"\u0324\2\2\u11a9\u11ad\7\u020a\2\2\u11aa\u11ad\7\u031a\2\2\u11ab\u11ad"+
		"\5\u0342\u01a2\2\u11ac\u11a9\3\2\2\2\u11ac\u11aa\3\2\2\2\u11ac\u11ab\3"+
		"\2\2\2\u11ad\u11b8\3\2\2\2\u11ae\u11af\7\u02ae\2\2\u11af\u11b0\7\u0324"+
		"\2\2\u11b0\u11b8\7\u031d\2\2\u11b1\u11b2\7\u00d4\2\2\u11b2\u11b3\7\u0324"+
		"\2\2\u11b3\u11b8\t\b\2\2\u11b4\u11b5\7\u022b\2\2\u11b5\u11b6\7\u0324\2"+
		"\2\u11b6\u11b8\7\u031c\2\2\u11b7\u11a4\3\2\2\2\u11b7\u11a7\3\2\2\2\u11b7"+
		"\u11ae\3\2\2\2\u11b7\u11b1\3\2\2\2\u11b7\u11b4\3\2\2\2\u11b8\u0119\3\2"+
		"\2\2\u11b9\u11ba\7\u030b\2\2\u11ba\u11bb\7N\2\2\u11bb\u11db\5\u0342\u01a2"+
		"\2\u11bc\u11bd\7\u00b8\2\2\u11bd\u11d6\7\u0333\2\2\u11be\u11bf\7\u0197"+
		"\2\2\u11bf\u11c0\7\u0324\2\2\u11c0\u11d7\t\66\2\2\u11c1\u11c3\7\u0335"+
		"\2\2\u11c2\u11c1\3\2\2\2\u11c2\u11c3\3\2\2\2\u11c3\u11c4\3\2\2\2\u11c4"+
		"\u11c5\7\u026e\2\2\u11c5\u11c6\7\u0324\2\2\u11c6\u11d7\7\u031a\2\2\u11c7"+
		"\u11c9\7\u0335\2\2\u11c8\u11c7\3\2\2\2\u11c8\u11c9\3\2\2\2\u11c9\u11ca"+
		"\3\2\2\2\u11ca\u11cb\7\u026d\2\2\u11cb\u11cc\7\u0324\2\2\u11cc\u11d7\7"+
		"\u031a\2\2\u11cd\u11ce\7\u026f\2\2\u11ce\u11cf\7\u0324\2\2\u11cf\u11d7"+
		"\7\u031a\2\2\u11d0\u11d1\7\u01cb\2\2\u11d1\u11d2\7\u0324\2\2\u11d2\u11d7"+
		"\7\u031a\2\2\u11d3\u11d4\7\u0189\2\2\u11d4\u11d5\7\u0324\2\2\u11d5\u11d7"+
		"\7\u031a\2\2\u11d6\u11be\3\2\2\2\u11d6\u11c2\3\2\2\2\u11d6\u11c8\3\2\2"+
		"\2\u11d6\u11cd\3\2\2\2\u11d6\u11d0\3\2\2\2\u11d6\u11d3\3\2\2\2\u11d7\u11d8"+
		"\3\2\2\2\u11d8\u11d6\3\2\2\2\u11d8\u11d9\3\2\2\2\u11d9\u11da\3\2\2\2\u11da"+
		"\u11dc\7\u0334\2\2\u11db\u11bc\3\2\2\2\u11db\u11dc\3\2\2\2\u11dc\u11df"+
		"\3\2\2\2\u11dd\u11de\7\u02fb\2\2\u11de\u11e0\5\u0342\u01a2\2\u11df\u11dd"+
		"\3\2\2\2\u11df\u11e0\3\2\2\2\u11e0\u011b\3\2\2\2\u11e1\u11e2\7\u030b\2"+
		"\2\u11e2\u11e3\7N\2\2\u11e3\u1203\5\u0342\u01a2\2\u11e4\u11e5\7\u00b8"+
		"\2\2\u11e5\u11fe\7\u0333\2\2\u11e6\u11e7\7\u0197\2\2\u11e7\u11e8\7\u0324"+
		"\2\2\u11e8\u11ff\t\66\2\2\u11e9\u11eb\7\u0335\2\2\u11ea\u11e9\3\2\2\2"+
		"\u11ea\u11eb\3\2\2\2\u11eb\u11ec\3\2\2\2\u11ec\u11ed\7\u026e\2\2\u11ed"+
		"\u11ee\7\u0324\2\2\u11ee\u11ff\7\u031a\2\2\u11ef\u11f1\7\u0335\2\2\u11f0"+
		"\u11ef\3\2\2\2\u11f0\u11f1\3\2\2\2\u11f1\u11f2\3\2\2\2\u11f2\u11f3\7\u026d"+
		"\2\2\u11f3\u11f4\7\u0324\2\2\u11f4\u11ff\7\u031a\2\2\u11f5\u11f6\7\u026f"+
		"\2\2\u11f6\u11f7\7\u0324\2\2\u11f7\u11ff\7\u031a\2\2\u11f8\u11f9\7\u01cb"+
		"\2\2\u11f9\u11fa\7\u0324\2\2\u11fa\u11ff\7\u031a\2\2\u11fb\u11fc\7\u0189"+
		"\2\2\u11fc\u11fd\7\u0324\2\2\u11fd\u11ff\7\u031a\2\2\u11fe\u11e6\3\2\2"+
		"\2\u11fe\u11ea\3\2\2\2\u11fe\u11f0\3\2\2\2\u11fe\u11f5\3\2\2\2\u11fe\u11f8"+
		"\3\2\2\2\u11fe\u11fb\3\2\2\2\u11ff\u1200\3\2\2\2\u1200\u11fe\3\2\2\2\u1200"+
		"\u1201\3\2\2\2\u1201\u1202\3\2\2\2\u1202\u1204\7\u0334\2\2\u1203\u11e4"+
		"\3\2\2\2\u1203\u1204\3\2\2\2\u1204\u1210\3\2\2\2\u1205\u1207\7\u02fb\2"+
		"\2\u1206\u1208\5\u0342\u01a2\2\u1207\u1206\3\2\2\2\u1207\u1208\3\2\2\2"+
		"\u1208\u120e\3\2\2\2\u1209\u120b\7\u0335\2\2\u120a\u1209\3\2\2\2\u120a"+
		"\u120b\3\2\2\2\u120b\u120c\3\2\2\2\u120c\u120d\7@\2\2\u120d\u120f\5\u0342"+
		"\u01a2\2\u120e\u120a\3\2\2\2\u120e\u120f\3\2\2\2\u120f\u1211\3\2\2\2\u1210"+
		"\u1205\3\2\2\2\u1210\u1211\3\2\2\2\u1211\u011d\3\2\2\2\u1212\u1213\7\u030c"+
		"\2\2\u1213\u1214\7\u0092\2\2\u1214\u1218\7\u0118\2\2\u1215\u1216\5\u0342"+
		"\u01a2\2\u1216\u1217\7\u0330\2\2\u1217\u1219\3\2\2\2\u1218\u1215\3\2\2"+
		"\2\u1218\u1219\3\2\2\2\u1219\u121a\3\2\2\2\u121a\u121b\5\u0342\u01a2\2"+
		"\u121b\u121c\7\b\2\2\u121c\u121d\5\u017a\u00be\2\u121d\u011f\3\2\2\2\u121e"+
		"\u121f\7\u030c\2\2\u121f\u1220\7\u0092\2\2\u1220\u1224\7\u0118\2\2\u1221"+
		"\u1222\5\u0342\u01a2\2\u1222\u1223\7\u0330\2\2\u1223\u1225\3\2\2\2\u1224"+
		"\u1221\3\2\2\2\u1224\u1225\3\2\2\2\u1225\u1226\3\2\2\2\u1226\u1227\5\u0342"+
		"\u01a2\2\u1227\u1228\7\3\2\2\u1228\u1229\5\u017a\u00be\2\u1229\u0121\3"+
		"\2\2\2\u122a\u122d\7\u024f\2\2\u122b\u122e\5\u0310\u0189\2\u122c\u122e"+
		"\5\u0342\u01a2\2\u122d\u122b\3\2\2\2\u122d\u122c\3\2\2\2\u122e\u1230\3"+
		"\2\2\2\u122f\u1231\5\u0124\u0093\2\u1230\u122f\3\2\2\2\u1230\u1231\3\2"+
		"\2\2\u1231\u1235\3\2\2\2\u1232\u1233\7l\2\2\u1233\u1236\5\u0342\u01a2"+
		"\2\u1234\u1236\7.\2\2\u1235\u1232\3\2\2\2\u1235\u1234\3\2\2\2\u1235\u1236"+
		"\3\2\2\2\u1236\u0123\3\2\2\2\u1237\u123e\7\u00b8\2\2\u1238\u1239\7\u02c9"+
		"\2\2\u1239\u123a\7\u0324\2\2\u123a\u123c\t\b\2\2\u123b\u123d\7\u0335\2"+
		"\2\u123c\u123b\3\2\2\2\u123c\u123d\3\2\2\2\u123d\u123f\3\2\2\2\u123e\u1238"+
		"\3\2\2\2\u123e\u123f\3\2\2\2\u123f\u1246\3\2\2\2\u1240\u1241\7\u027c\2"+
		"\2\u1241\u1242\7\u0324\2\2\u1242\u1244\t\b\2\2\u1243\u1245\7\u0335\2\2"+
		"\u1244\u1243\3\2\2\2\u1244\u1245\3\2\2\2\u1245\u1247\3\2\2\2\u1246\u1240"+
		"\3\2\2\2\u1246\u1247\3\2\2\2\u1247\u126f\3\2\2\2\u1248\u1249\7\u00c8\2"+
		"\2\u1249\u1269\7\u0333\2\2\u124a\u124b\7\u02c9\2\2\u124b\u124c\7\u0324"+
		"\2\2\u124c\u124e\t\b\2\2\u124d\u124f\7\u0335\2\2\u124e\u124d\3\2\2\2\u124e"+
		"\u124f\3\2\2\2\u124f\u1251\3\2\2\2\u1250\u124a\3\2\2\2\u1250\u1251\3\2"+
		"\2\2\u1251\u1258\3\2\2\2\u1252\u1253\7\u0244\2\2\u1253\u1254\7\u0324\2"+
		"\2\u1254\u1256\5\u0310\u0189\2\u1255\u1257\7\u0335\2\2\u1256\u1255\3\2"+
		"\2\2\u1256\u1257\3\2\2\2\u1257\u1259\3\2\2\2\u1258\u1252\3\2\2\2\u1258"+
		"\u1259\3\2\2\2\u1259\u1260\3\2\2\2\u125a\u125b\7\u01d3\2\2\u125b\u125c"+
		"\7\u0324\2\2\u125c\u125e\7\u031a\2\2\u125d\u125f\7\u0335\2\2\u125e\u125d"+
		"\3\2\2\2\u125e\u125f\3\2\2\2\u125f\u1261\3\2\2\2\u1260\u125a\3\2\2\2\u1260"+
		"\u1261\3\2\2\2\u1261\u1266\3\2\2\2\u1262\u1264\5\u0264\u0133\2\u1263\u1265"+
		"\7\u0335\2\2\u1264\u1263\3\2\2\2\u1264\u1265\3\2\2\2\u1265\u1267\3\2\2"+
		"\2\u1266\u1262\3\2\2\2\u1266\u1267\3\2\2\2\u1267\u126a\3\2\2\2\u1268\u126a"+
		"\7\66\2\2\u1269\u1250\3\2\2\2\u1269\u1268\3\2\2\2\u126a\u126b\3\2\2\2"+
		"\u126b\u126d\7\u0334\2\2\u126c\u126e\7\u0335\2\2\u126d\u126c\3\2\2\2\u126d"+
		"\u126e\3\2\2\2\u126e\u1270\3\2\2\2\u126f\u1248\3\2\2\2\u126f\u1270\3\2"+
		"\2\2\u1270\u1278\3\2\2\2\u1271\u1272\7\u0236\2\2\u1272\u1273\7\u0333\2"+
		"\2\u1273\u1274\7\u02c9\2\2\u1274\u1275\7\u0324\2\2\u1275\u1276\t\b\2\2"+
		"\u1276\u1277\3\2\2\2\u1277\u1279\7\u0334\2\2\u1278\u1271\3\2\2\2\u1278"+
		"\u1279\3\2\2\2\u1279\u0125\3\2\2\2\u127a\u127d\7\u024f\2\2\u127b\u127e"+
		"\5\u0310\u0189\2\u127c\u127e\5\u0342\u01a2\2\u127d\u127b\3\2\2\2\u127d"+
		"\u127c\3\2\2\2\u127e\u1281\3\2\2\2\u127f\u1282\5\u0124\u0093\2\u1280\u1282"+
		"\5\u0128\u0095\2\u1281\u127f\3\2\2\2\u1281\u1280\3\2\2\2\u1282\u0127\3"+
		"\2\2\2\u1283\u1289\7\u025e\2\2\u1284\u1285\7\u00b8\2\2\u1285\u1286\7\u0333"+
		"\2\2\u1286\u1287\5\u012a\u0096\2\u1287\u1288\7\u0334\2\2\u1288\u128a\3"+
		"\2\2\2\u1289\u1284\3\2\2\2\u1289\u128a\3\2\2\2\u128a\u1296\3\2\2\2\u128b"+
		"\u1290\7\u026a\2\2\u128c\u128d\7\u00b8\2\2\u128d\u128e\7\u01ba\2\2\u128e"+
		"\u128f\7\u0324\2\2\u128f\u1291\t\b\2\2\u1290\u128c\3\2\2\2\u1290\u1291"+
		"\3\2\2\2\u1291\u1296\3\2\2\2\u1292\u1293\7\u01f3\2\2\u1293\u1294\7\u00a3"+
		"\2\2\u1294\u1296\5\u01b0\u00d9\2\u1295\u1283\3\2\2\2\u1295\u128b\3\2\2"+
		"\2\u1295\u1292\3\2\2\2\u1296\u0129\3\2\2\2\u1297\u1298\7\u01d7\2\2\u1298"+
		"\u1299\7\u0324\2\2\u1299\u129a\7\u031a\2\2\u129a\u012b\3\2\2\2\u129b\u129c"+
		"\7\u0126\2\2\u129c\u129f\5\u032c\u0197\2\u129d\u129e\7\n\2\2\u129e\u12a0"+
		"\5\u0342\u01a2\2\u129f\u129d\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0\u12a1\3"+
		"\2\2\2\u12a1\u12ac\7\u0333\2\2\u12a2\u12a5\5\u0342\u01a2\2\u12a3\u12a5"+
		"\7.\2\2\u12a4\u12a2\3\2\2\2\u12a4\u12a3\3\2\2\2\u12a5\u12a6\3\2\2\2\u12a6"+
		"\u12a7\7\u02a1\2\2\u12a7\u12a8\7\21\2\2\u12a8\u12aa\t\67\2\2\u12a9\u12ab"+
		"\7\u0335\2\2\u12aa\u12a9\3\2\2\2\u12aa\u12ab\3\2\2\2\u12ab\u12ad\3\2\2"+
		"\2\u12ac\u12a4\3\2\2\2\u12ad\u12ae\3\2\2\2\u12ae\u12ac\3\2\2\2\u12ae\u12af"+
		"\3\2\2\2\u12af\u12b0\3\2\2\2\u12b0\u12b1\7\u0334\2\2\u12b1\u012d\3\2\2"+
		"\2\u12b2\u12ba\5\u0326\u0194\2\u12b3\u12ba\5\u0328\u0195\2\u12b4\u12ba"+
		"\5\u032e\u0198\2\u12b5\u12ba\5\u0332\u019a\2\u12b6\u12ba\5\u0334\u019b"+
		"\2\u12b7\u12ba\5\u0330\u0199\2\u12b8\u12ba\5\u032a\u0196\2\u12b9\u12b2"+
		"\3\2\2\2\u12b9\u12b3\3\2\2\2\u12b9\u12b4\3\2\2\2\u12b9\u12b5\3\2\2\2\u12b9"+
		"\u12b6\3\2\2\2\u12b9\u12b7\3\2\2\2\u12b9\u12b8\3\2\2\2\u12ba\u012f\3\2"+
		"\2\2\u12bb\u12bc\7\u01e7\2\2\u12bc\u12bd\7\u02f0\2\2\u12bd\u12c0\5\u0342"+
		"\u01a2\2\u12be\u12bf\7\n\2\2\u12bf\u12c1\5\u0342\u01a2\2\u12c0\u12be\3"+
		"\2\2\2\u12c0\u12c1\3\2\2\2\u12c1\u12c2\3\2\2\2\u12c2\u12c3\7\u02fd\2\2"+
		"\u12c3\u12cc\7\u0324\2\2\u12c4\u12cd\7\u020a\2\2\u12c5\u12cd\7\u0154\2"+
		"\2\u12c6\u12cd\7\u0305\2\2\u12c7\u12c8\7\u02fc\2\2\u12c8\u12c9\7\u00b8"+
		"\2\2\u12c9\u12ca\7\u0092\2\2\u12ca\u12cb\7\u0118\2\2\u12cb\u12cd\5\u0342"+
		"\u01a2\2\u12cc\u12c4\3\2\2\2\u12cc\u12c5\3\2\2\2\u12cc\u12c6\3\2\2\2\u12cc"+
		"\u12c7\3\2\2\2\u12cd\u0131\3\2\2\2\u12ce\u12d0\5\u029c\u014f\2\u12cf\u12ce"+
		"\3\2\2\2\u12cf\u12d0\3\2\2\2\u12d0\u12d1\3\2\2\2\u12d1\u12d9\7b\2\2\u12d2"+
		"\u12d3\7\u00a4\2\2\u12d3\u12d4\7\u0333\2\2\u12d4\u12d5\5\u0290\u0149\2"+
		"\u12d5\u12d7\7\u0334\2\2\u12d6\u12d8\7w\2\2\u12d7\u12d6\3\2\2\2\u12d7"+
		"\u12d8\3\2\2\2\u12d8\u12da\3\2\2\2\u12d9\u12d2\3\2\2\2\u12d9\u12da\3\2"+
		"\2\2\u12da\u12dc\3\2\2\2\u12db\u12dd\7Y\2\2\u12dc\u12db\3\2\2\2\u12dc"+
		"\u12dd\3\2\2\2\u12dd\u12e0\3\2\2\2\u12de\u12e1\5\u0310\u0189\2\u12df\u12e1"+
		"\7\u0319\2\2\u12e0\u12de\3\2\2\2\u12e0\u12df\3\2\2\2\u12e1\u12e3\3\2\2"+
		"\2\u12e2\u12e4\5\u02e4\u0173\2\u12e3\u12e2\3\2\2\2\u12e3\u12e4\3\2\2\2"+
		"\u12e4\u12e6\3\2\2\2\u12e5\u12e7\5\u02e0\u0171\2\u12e6\u12e5\3\2\2\2\u12e6"+
		"\u12e7\3\2\2\2\u12e7\u12e8\3\2\2\2\u12e8\u12e9\7\u02fb\2\2\u12e9\u12ee"+
		"\5\u02ac\u0157\2\u12ea\u12eb\7\u0335\2\2\u12eb\u12ed\5\u02ac\u0157\2\u12ec"+
		"\u12ea\3\2\2\2\u12ed\u12f0\3\2\2\2\u12ee\u12ec\3\2\2\2\u12ee\u12ef\3\2"+
		"\2\2\u12ef\u12f1\3\2\2\2\u12f0\u12ee\3\2\2\2\u12f1\u12f2\7l\2\2\u12f2"+
		"\u12fd\5\u02a2\u0152\2\u12f3\u12f4\7\u00b5\2\2\u12f4\u12f7\7\u01c7\2\2"+
		"\u12f5\u12f6\7\6\2\2\u12f6\u12f8\5\u02a2\u0152\2\u12f7\u12f5\3\2\2\2\u12f7"+
		"\u12f8\3\2\2\2\u12f8\u12f9\3\2\2\2\u12f9\u12fa\7\u00a2\2\2\u12fa\u12fc"+
		"\5\u0134\u009b\2\u12fb\u12f3\3\2\2\2\u12fc\u12ff\3\2\2\2\u12fd\u12fb\3"+
		"\2\2\2\u12fd\u12fe\3\2\2\2\u12fe\u130d\3\2\2\2\u12ff\u12fd\3\2\2\2\u1300"+
		"\u1301\7\u00b5\2\2\u1301\u1302\7f\2\2\u1302\u1305\7\u01c7\2\2\u1303\u1304"+
		"\7\21\2\2\u1304\u1306\7\u02d9\2\2\u1305\u1303\3\2\2\2\u1305\u1306\3\2"+
		"\2\2\u1306\u1309\3\2\2\2\u1307\u1308\7\6\2\2\u1308\u130a\5\u02a2\u0152"+
		"\2\u1309\u1307\3\2\2\2\u1309\u130a\3\2\2\2\u130a\u130b\3\2\2\2\u130b\u130c"+
		"\7\u00a2\2\2\u130c\u130e\5\u0136\u009c\2\u130d\u1300\3\2\2\2\u130d\u130e"+
		"\3\2\2\2\u130e\u131c\3\2\2\2\u130f\u1310\7\u00b5\2\2\u1310\u1311\7f\2"+
		"\2\u1311\u1312\7\u01c7\2\2\u1312\u1313\7\21\2\2\u1313\u1316\7\u02b7\2"+
		"\2\u1314\u1315\7\6\2\2\u1315\u1317\5\u02a2\u0152\2\u1316\u1314\3\2\2\2"+
		"\u1316\u1317\3\2\2\2\u1317\u1318\3\2\2\2\u1318\u1319\7\u00a2\2\2\u1319"+
		"\u131b\5\u0134\u009b\2\u131a\u130f\3\2\2\2\u131b\u131e\3\2\2\2\u131c\u131a"+
		"\3\2\2\2\u131c\u131d\3\2\2\2\u131d\u1320\3\2\2\2\u131e\u131c\3\2\2\2\u131f"+
		"\u1321\5\u0150\u00a9\2\u1320\u131f\3\2\2\2\u1320\u1321\3\2\2\2\u1321\u1323"+
		"\3\2\2\2\u1322\u1324\5\u02bc\u015f\2\u1323\u1322\3\2\2\2\u1323\u1324\3"+
		"\2\2\2\u1324\u1325\3\2\2\2\u1325\u1326\7\u0336\2\2\u1326\u0133\3\2\2\2"+
		"\u1327\u1328\7\u00ad\2\2\u1328\u1329\7\u0099\2\2\u1329\u132e\5\u02a0\u0151"+
		"\2\u132a\u132b\7\u0335\2\2\u132b\u132d\5\u02a0\u0151\2\u132c\u132a\3\2"+
		"\2\2\u132d\u1330\3\2\2\2\u132e\u132c\3\2\2\2\u132e\u132f\3\2\2\2\u132f"+
		"\u1333\3\2\2\2\u1330\u132e\3\2\2\2\u1331\u1333\7/\2\2\u1332\u1327\3\2"+
		"\2\2\u1332\u1331\3\2\2\2\u1333\u0135\3\2\2\2\u1334\u1339\7W\2\2\u1335"+
		"\u1336\7\u0333\2\2\u1336\u1337\5\u031a\u018e\2\u1337\u1338\7\u0334\2\2"+
		"\u1338\u133a\3\2\2\2\u1339\u1335\3\2\2\2\u1339\u133a\3\2\2\2\u133a\u133e"+
		"\3\2\2\2\u133b\u133f\5\u02ee\u0178\2\u133c\u133d\7.\2\2\u133d\u133f\7"+
		"\u00b1\2\2\u133e\u133b\3\2\2\2\u133e\u133c\3\2\2\2\u133f\u0137\3\2\2\2"+
		"\u1340\u1342\5\u029c\u014f\2\u1341\u1340\3\2\2\2\u1341\u1342\3\2\2\2\u1342"+
		"\u1343\3\2\2\2\u1343\u1346\7/\2\2\u1344\u1345\7\u00a4\2\2\u1345\u1347"+
		"\5\u02b2\u015a\2\u1346\u1344\3\2\2\2\u1346\u1347\3\2\2\2\u1347\u1349\3"+
		"\2\2\2\u1348\u134a\7H\2\2\u1349\u1348\3\2\2\2\u1349\u134a\3\2\2\2\u134a"+
		"\u134e\3\2\2\2\u134b\u134f\5\u0310\u0189\2\u134c\u134f\5\u0206\u0104\2"+
		"\u134d\u134f\7\u0319\2\2\u134e\u134b\3\2\2\2\u134e\u134c\3\2\2\2\u134e"+
		"\u134d\3\2\2\2\u134f\u1351\3\2\2\2\u1350\u1352\5\u02e4\u0173\2\u1351\u1350"+
		"\3\2\2\2\u1351\u1352\3\2\2\2\u1352\u1354\3\2\2\2\u1353\u1355\5\u0150\u00a9"+
		"\2\u1354\u1353\3\2\2\2\u1354\u1355\3\2\2\2\u1355\u135f\3\2\2\2\u1356\u1357"+
		"\7H\2\2\u1357\u135c\5\u02ac\u0157\2\u1358\u1359\7\u0335\2\2\u1359\u135b"+
		"\5\u02ac\u0157\2\u135a\u1358\3\2\2\2\u135b\u135e\3\2\2\2\u135c\u135a\3"+
		"\2\2\2\u135c\u135d\3\2\2\2\u135d\u1360\3\2\2\2\u135e\u135c\3\2\2\2\u135f"+
		"\u1356\3\2\2\2\u135f\u1360\3\2\2\2\u1360\u136e\3\2\2\2\u1361\u136c\7\u00b6"+
		"\2\2\u1362\u136d\5\u02a2\u0152\2\u1363\u1364\7$\2\2\u1364\u136a\7i\2\2"+
		"\u1365\u1367\7\u0187\2\2\u1366\u1365\3\2\2\2\u1366\u1367\3\2\2\2\u1367"+
		"\u1368\3\2\2\2\u1368\u136b\5\u031c\u018f\2\u1369\u136b\7\u0319\2\2\u136a"+
		"\u1366\3\2\2\2\u136a\u1369\3\2\2\2\u136b\u136d\3\2\2\2\u136c\u1362\3\2"+
		"\2\2\u136c\u1363\3\2\2\2\u136d\u136f\3\2\2\2\u136e\u1361\3\2\2\2\u136e"+
		"\u136f\3\2\2\2\u136f\u1371\3\2\2\2\u1370\u1372\5\u02b6\u015c\2\u1371\u1370"+
		"\3\2\2\2\u1371\u1372\3\2\2\2\u1372\u1374\3\2\2\2\u1373\u1375\5\u02bc\u015f"+
		"\2\u1374\u1373\3\2\2\2\u1374\u1375\3\2\2\2\u1375\u0139\3\2\2\2\u1376\u1378"+
		"\5\u029c\u014f\2\u1377\u1376\3\2\2\2\u1377\u1378\3\2\2\2\u1378\u1379\3"+
		"\2\2\2\u1379\u1381\7W\2\2\u137a\u137b\7\u00a4\2\2\u137b\u137c\7\u0333"+
		"\2\2\u137c\u137d\5\u0290\u0149\2\u137d\u137f\7\u0334\2\2\u137e\u1380\7"+
		"w\2\2\u137f\u137e\3\2\2\2\u137f\u1380\3\2\2\2\u1380\u1382\3\2\2\2\u1381"+
		"\u137a\3\2\2\2\u1381\u1382\3\2\2\2\u1382\u1384\3\2\2\2\u1383\u1385\7Y"+
		"\2\2\u1384\u1383\3\2\2\2\u1384\u1385\3\2\2\2\u1385\u1389\3\2\2\2\u1386"+
		"\u138a\5\u0310\u0189\2\u1387\u138a\5\u0206\u0104\2\u1388\u138a\7\u0319"+
		"\2\2\u1389\u1386\3\2\2\2\u1389\u1387\3\2\2\2\u1389\u1388\3\2\2\2\u138a"+
		"\u138c\3\2\2\2\u138b\u138d\5\u02e4\u0173\2\u138c\u138b\3\2\2\2\u138c\u138d"+
		"\3\2\2\2\u138d\u1392\3\2\2\2\u138e\u138f\7\u0333\2\2\u138f\u1390\5\u031a"+
		"\u018e\2\u1390\u1391\7\u0334\2\2\u1391\u1393\3\2\2\2\u1392\u138e\3\2\2"+
		"\2\u1392\u1393\3\2\2\2\u1393\u1395\3\2\2\2\u1394\u1396\5\u0150\u00a9\2"+
		"\u1395\u1394\3\2\2\2\u1395\u1396\3\2\2\2\u1396\u139b\3\2\2\2\u1397\u139c"+
		"\5\u0142\u00a2\2\u1398\u139c\5\u021a\u010e\2\u1399\u139a\7.\2\2\u139a"+
		"\u139c\7\u00b1\2\2\u139b\u1397\3\2\2\2\u139b\u1398\3\2\2\2\u139b\u1399"+
		"\3\2\2\2\u139c\u139e\3\2\2\2\u139d\u139f\5\u02b6\u015c\2\u139e\u139d\3"+
		"\2\2\2\u139e\u139f\3\2\2\2\u139f\u13a1\3\2\2\2\u13a0\u13a2\5\u02bc\u015f"+
		"\2\u13a1\u13a0\3\2\2\2\u13a1\u13a2\3\2\2\2\u13a2\u013b\3\2\2\2\u13a3\u13a4"+
		"\7\u0333\2\2\u13a4\u13a5\5\u013e\u00a0\2\u13a5\u13a9\7\u0334\2\2\u13a6"+
		"\u13a7\7\u0335\2\2\u13a7\u13a8\7\u02e0\2\2\u13a8\u13aa\5\u014c\u00a7\2"+
		"\u13a9\u13a6\3\2\2\2\u13a9\u13aa\3\2\2\2\u13aa\u013d\3\2\2\2\u13ab\u13ad"+
		"\7\u025f\2\2\u13ac\u13ae\5\u02b0\u0159\2\u13ad\u13ac\3\2\2\2\u13ad\u13ae"+
		"\3\2\2\2\u13ae\u13af\3\2\2\2\u13af\u13b4\5\u0140\u00a1\2\u13b0\u13b1\7"+
		"\u0335\2\2\u13b1\u13b3\5\u0140\u00a1\2\u13b2\u13b0\3\2\2\2\u13b3\u13b6"+
		"\3\2\2\2\u13b4\u13b2\3\2\2\2\u13b4\u13b5\3\2\2\2\u13b5\u13b7\3\2\2\2\u13b6"+
		"\u13b4\3\2\2\2\u13b7\u13b8\7H\2\2\u13b8\u13bb\5\u0310\u0189\2\u13b9\u13ba"+
		"\7Y\2\2\u13ba\u13bc\7\u0319\2\2\u13bb\u13b9\3\2\2\2\u13bb\u13bc\3\2\2"+
		"\2\u13bc\u13bf\3\2\2\2\u13bd\u13be\7\u00b6\2\2\u13be\u13c0\5\u02a2\u0152"+
		"\2\u13bf\u13bd\3\2\2\2\u13bf\u13c0\3\2\2\2\u13c0\u013f\3\2\2\2\u13c1\u13d4"+
		"\7\u0338\2\2\u13c2\u13c4\5\u0342\u01a2\2\u13c3\u13c5\7\b\2\2\u13c4\u13c3"+
		"\3\2\2\2\u13c4\u13c5\3\2\2\2\u13c5\u13c7\3\2\2\2\u13c6\u13c8\5\u02ec\u0177"+
		"\2\u13c7\u13c6\3\2\2\2\u13c7\u13c8\3\2\2\2\u13c8\u13d4\3\2\2\2\u13c9\u13cb"+
		"\5\u0290\u0149\2\u13ca\u13cc\7\b\2\2\u13cb\u13ca\3\2\2\2\u13cb\u13cc\3"+
		"\2\2\2\u13cc\u13ce\3\2\2\2\u13cd\u13cf\5\u02ec\u0177\2\u13ce\u13cd\3\2"+
		"\2\2\u13ce\u13cf\3\2\2\2\u13cf\u13d4\3\2\2\2\u13d0\u13d1\7\u0319\2\2\u13d1"+
		"\u13d2\7\u0324\2\2\u13d2\u13d4\5\u0290\u0149\2\u13d3\u13c1\3\2\2\2\u13d3"+
		"\u13c2\3\2\2\2\u13d3\u13c9\3\2\2\2\u13d3\u13d0\3\2\2\2\u13d4\u0141\3\2"+
		"\2\2\u13d5\u13d7\5\u029c\u014f\2\u13d6\u13d5\3\2\2\2\u13d6\u13d7\3\2\2"+
		"\2\u13d7\u13d8\3\2\2\2\u13d8\u13da\5\u0146\u00a4\2\u13d9\u13db\5\u02b6"+
		"\u015c\2\u13da\u13d9\3\2\2\2\u13da\u13db\3\2\2\2\u13db\u13dd\3\2\2\2\u13dc"+
		"\u13de\5\u02bc\u015f\2\u13dd\u13dc\3\2\2\2\u13dd\u13de\3\2\2\2\u13de\u0143"+
		"\3\2\2\2\u13df\u13e1\5\u029c\u014f\2\u13e0\u13df\3\2\2\2\u13e0\u13e1\3"+
		"\2\2\2\u13e1\u13e2\3\2\2\2\u13e2\u13e4\5\u0148\u00a5\2\u13e3\u13e5\5\u02b6"+
		"\u015c\2\u13e4\u13e3\3\2\2\2\u13e4\u13e5\3\2\2\2\u13e5\u13e7\3\2\2\2\u13e6"+
		"\u13e8\5\u02bc\u015f\2\u13e7\u13e6\3\2\2\2\u13e7\u13e8\3\2\2\2\u13e8\u0145"+
		"\3\2\2\2\u13e9\u13ea\b\u00a4\1\2\u13ea\u13eb\7\u0333\2\2\u13eb\u13ec\5"+
		"\u0142\u00a2\2\u13ec\u13ed\7\u0334\2\2\u13ed\u13f0\3\2\2\2\u13ee\u13f0"+
		"\5\u02aa\u0156\2\u13ef\u13e9\3\2\2\2\u13ef\u13ee\3\2\2\2\u13f0\u13f9\3"+
		"\2\2\2\u13f1\u13f2\f\4\2\2\u13f2\u13f4\t8\2\2\u13f3\u13f5\5\u014a\u00a6"+
		"\2\u13f4\u13f3\3\2\2\2\u13f4\u13f5\3\2\2\2\u13f5\u13f6\3\2\2\2\u13f6\u13f8"+
		"\5\u0146\u00a4\5\u13f7\u13f1\3\2\2\2\u13f8\u13fb\3\2\2\2\u13f9\u13f7\3"+
		"\2\2\2\u13f9\u13fa\3\2\2\2\u13fa\u0147\3\2\2\2\u13fb\u13f9\3\2\2\2\u13fc"+
		"\u13fd\5\u0146\u00a4\2\u13fd\u13ff\t8\2\2\u13fe\u1400\5\u014a\u00a6\2"+
		"\u13ff\u13fe\3\2\2\2\u13ff\u1400\3\2\2\2\u1400\u1401\3\2\2\2\u1401\u1402"+
		"\5\u0146\u00a4\2\u1402\u1405\3\2\2\2\u1403\u1405\5\u02aa\u0156\2\u1404"+
		"\u13fc\3\2\2\2\u1404\u1403\3\2\2\2\u1405\u0149\3\2\2\2\u1406\u1407\t9"+
		"\2\2\u1407\u014b\3\2\2\2\u1408\u140b\7\u0319\2\2\u1409\u140b\5\u033c\u019f"+
		"\2\u140a\u1408\3\2\2\2\u140a\u1409\3\2\2\2\u140b\u014d\3\2\2\2\u140c\u140e"+
		"\5\u029c\u014f\2\u140d\u140c\3\2\2\2\u140d\u140e\3\2\2\2\u140e\u140f\3"+
		"\2\2\2\u140f\u1417\7\u00ad\2\2\u1410\u1411\7\u00a4\2\2\u1411\u1412\7\u0333"+
		"\2\2\u1412\u1413\5\u0290\u0149\2\u1413\u1415\7\u0334\2\2\u1414\u1416\7"+
		"w\2\2\u1415\u1414\3\2\2\2\u1415\u1416\3\2\2\2\u1416\u1418\3\2\2\2\u1417"+
		"\u1410\3\2\2\2\u1417\u1418\3\2\2\2\u1418\u141c\3\2\2\2\u1419\u141d\5\u0310"+
		"\u0189\2\u141a\u141d\5\u0206\u0104\2\u141b\u141d\7\u0319\2\2\u141c\u1419"+
		"\3\2\2\2\u141c\u141a\3\2\2\2\u141c\u141b\3\2\2\2\u141d\u141f\3\2\2\2\u141e"+
		"\u1420\5\u02e2\u0172\2\u141f\u141e\3\2\2\2\u141f\u1420\3\2\2\2\u1420\u1421"+
		"\3\2\2\2\u1421\u1422\7\u0099\2\2\u1422\u1427\5\u02a0\u0151\2\u1423\u1424"+
		"\7\u0335\2\2\u1424\u1426\5\u02a0\u0151\2\u1425\u1423\3\2\2\2\u1426\u1429"+
		"\3\2\2\2\u1427\u1425\3\2\2\2\u1427\u1428\3\2\2\2\u1428\u142b\3\2\2\2\u1429"+
		"\u1427\3\2\2\2\u142a\u142c\5\u0150\u00a9\2\u142b\u142a\3\2\2\2\u142b\u142c"+
		"\3\2\2\2\u142c\u1436\3\2\2\2\u142d\u142e\7H\2\2\u142e\u1433\5\u02ac\u0157"+
		"\2\u142f\u1430\7\u0335\2\2\u1430\u1432\5\u02ac\u0157\2\u1431\u142f\3\2"+
		"\2\2\u1432\u1435\3\2\2\2\u1433\u1431\3\2\2\2\u1433\u1434\3\2\2\2\u1434"+
		"\u1437\3\2\2\2\u1435\u1433\3\2\2\2\u1436\u142d\3\2\2\2\u1436\u1437\3\2"+
		"\2\2\u1437\u1445\3\2\2\2\u1438\u1443\7\u00b6\2\2\u1439\u1444\5\u02a2\u0152"+
		"\2\u143a\u143b\7$\2\2\u143b\u1441\7i\2\2\u143c\u143e\7\u0187\2\2\u143d"+
		"\u143c\3\2\2\2\u143d\u143e\3\2\2\2\u143e\u143f\3\2\2\2\u143f\u1442\5\u031c"+
		"\u018f\2\u1440\u1442\7\u0319\2\2\u1441\u143d\3\2\2\2\u1441\u1440\3\2\2"+
		"\2\u1442\u1444\3\2\2\2\u1443\u1439\3\2\2\2\u1443\u143a\3\2\2\2\u1444\u1446"+
		"\3\2\2\2\u1445\u1438\3\2\2\2\u1445\u1446\3\2\2\2\u1446\u1448\3\2\2\2\u1447"+
		"\u1449\5\u02b6\u015c\2\u1448\u1447\3\2\2\2\u1448\u1449\3\2\2\2\u1449\u144b"+
		"\3\2\2\2\u144a\u144c\5\u02bc\u015f\2\u144b\u144a\3\2\2\2\u144b\u144c\3"+
		"\2\2\2\u144c\u014f\3\2\2\2\u144d\u144e\7\u0222\2\2\u144e\u1453\5\u0152"+
		"\u00aa\2\u144f\u1450\7\u0335\2\2\u1450\u1452\5\u0152\u00aa\2\u1451\u144f"+
		"\3\2\2\2\u1452\u1455\3\2\2\2\u1453\u1451\3\2\2\2\u1453\u1454\3\2\2\2\u1454"+
		"\u1461\3\2\2\2\u1455\u1453\3\2\2\2\u1456\u1459\7Y\2\2\u1457\u145a\7\u0319"+
		"\2\2\u1458\u145a\5\u0310\u0189\2\u1459\u1457\3\2\2\2\u1459\u1458\3\2\2"+
		"\2\u145a\u145f\3\2\2\2\u145b\u145c\7\u0333\2\2\u145c\u145d\5\u031a\u018e"+
		"\2\u145d\u145e\7\u0334\2\2\u145e\u1460\3\2\2\2\u145f\u145b\3\2\2\2\u145f"+
		"\u1460\3\2\2\2\u1460\u1462\3\2\2\2\u1461\u1456\3\2\2\2\u1461\u1462\3\2"+
		"\2\2\u1462\u0151\3\2\2\2\u1463\u1468\5\u0154\u00ab\2\u1464\u1466\7\b\2"+
		"\2\u1465\u1464\3\2\2\2\u1465\u1466\3\2\2\2\u1466\u1467\3\2\2\2\u1467\u1469"+
		"\5\u02ec\u0177\2\u1468\u1465\3\2\2\2\u1468\u1469\3\2\2\2\u1469\u0153\3"+
		"\2\2\2\u146a\u146d\5\u0290\u0149\2\u146b\u146c\7\u0330\2\2\u146c\u146e"+
		"\7\u0338\2\2\u146d\u146b\3\2\2\2\u146d\u146e\3\2\2\2\u146e\u1472\3\2\2"+
		"\2\u146f\u1470\7\u0332\2\2\u1470\u1472\7\u00c7\2\2\u1471\u146a\3\2\2\2"+
		"\u1471\u146f\3\2\2\2\u1472\u0155\3\2\2\2\u1473\u1474\7*\2\2\u1474\u1478"+
		"\5\u0342\u01a2\2\u1475\u1476\7\u0121\2\2\u1476\u1477\7\u0324\2\2\u1477"+
		"\u1479\t:\2\2\u1478\u1475\3\2\2\2\u1478\u1479\3\2\2\2\u1479\u1492\3\2"+
		"\2\2\u147a\u147c\7l\2\2\u147b\u147d\7{\2\2\u147c\u147b\3\2\2\2\u147c\u147d"+
		"\3\2\2\2\u147d\u147e\3\2\2\2\u147e\u1483\5\u030a\u0186\2\u147f\u1480\7"+
		"\u0335\2\2\u1480\u1482\5\u030a\u0186\2\u1481\u147f\3\2\2\2\u1482\u1485"+
		"\3\2\2\2\u1483\u1481\3\2\2\2\u1483\u1484\3\2\2\2\u1484\u1490\3\2\2\2\u1485"+
		"\u1483\3\2\2\2\u1486\u1487\7\u01c0\2\2\u1487\u1488\7l\2\2\u1488\u148d"+
		"\5\u030a\u0186\2\u1489\u148a\7\u0335\2\2\u148a\u148c\5\u030a\u0186\2\u148b"+
		"\u1489\3\2\2\2\u148c\u148f\3\2\2\2\u148d\u148b\3\2\2\2\u148d\u148e\3\2"+
		"\2\2\u148e\u1491\3\2\2\2\u148f\u148d\3\2\2\2\u1490\u1486\3\2\2\2\u1490"+
		"\u1491\3\2\2\2\u1491\u1493\3\2\2\2\u1492\u147a\3\2\2\2\u1492\u1493\3\2"+
		"\2\2\u1493\u1496\3\2\2\2\u1494\u1495\7\31\2\2\u1495\u1497\5\u0342\u01a2"+
		"\2\u1496\u1494\3\2\2\2\u1496\u1497\3\2\2\2\u1497\u14a1\3\2\2\2\u1498\u1499"+
		"\7\u00b8\2\2\u1499\u149e\5\u0300\u0181\2\u149a\u149b\7\u0335\2\2\u149b"+
		"\u149d\5\u0300\u0181\2\u149c\u149a\3\2\2\2\u149d\u14a0\3\2\2\2\u149e\u149c"+
		"\3\2\2\2\u149e\u149f\3\2\2\2\u149f\u14a2\3\2\2\2\u14a0\u149e\3\2\2\2\u14a1"+
		"\u1498\3\2\2\2\u14a1\u14a2\3\2\2\2\u14a2\u0157\3\2\2\2\u14a3\u14a4\7*"+
		"\2\2\u14a4\u14a5\7\u0159\2\2\u14a5\u14a6\7\\\2\2\u14a6\u14a7\7\u00b8\2"+
		"\2\u14a7\u14a8\7\u00d2\2\2\u14a8\u14a9\7\u0324\2\2\u14a9\u14aa\t;\2\2"+
		"\u14aa\u14ab\7\u0159\2\2\u14ab\u14ac\7\21\2\2\u14ac\u14b0\7\u02a4\2\2"+
		"\u14ad\u14b1\7\u010b\2\2\u14ae\u14af\7\u00e4\2\2\u14af\u14b1\7\\\2\2\u14b0"+
		"\u14ad\3\2\2\2\u14b0\u14ae\3\2\2\2\u14b1\u14b2\3\2\2\2\u14b2\u14b3\5\u0342"+
		"\u01a2\2\u14b3\u0159\3\2\2\2\u14b4\u14b5\7*\2\2\u14b5\u14b6\7\u0291\2"+
		"\2\u14b6\u14b7\7\u012f\2\2\u14b7\u14b8\5\u0342\u01a2\2\u14b8\u14b9\7\u00b8"+
		"\2\2\u14b9\u14ba\7P\2\2\u14ba\u14bb\7\u0324\2\2\u14bb\u14c0\7\u031c\2"+
		"\2\u14bc\u14bd\7\u0335\2\2\u14bd\u14be\7\u0299\2\2\u14be\u14bf\7\u0324"+
		"\2\2\u14bf\u14c1\7\u031c\2\2\u14c0\u14bc\3\2\2\2\u14c0\u14c1\3\2\2\2\u14c1"+
		"\u015b\3\2\2\2\u14c2\u14c3\7.\2\2\u14c3\u14c4\5\u0310\u0189\2\u14c4\u14c5"+
		"\7\b\2\2\u14c5\u14c6\5\u0290\u0149\2\u14c6\u015d\3\2\2\2\u14c7\u14c8\7"+
		"\u0184\2\2\u14c8\u14c9\7U\2\2\u14c9\u14ca\7l\2\2\u14ca\u14cb\5\u0310\u0189"+
		"\2\u14cb\u14cc\5\u0160\u00b1\2\u14cc\u015f\3\2\2\2\u14cd\u1511\7\u0156"+
		"\2\2\u14ce\u1511\7\u014d\2\2\u14cf\u14d0\7\u0099\2\2\u14d0\u14d2\7\u010d"+
		"\2\2\u14d1\u14d3\7\u0324\2\2\u14d2\u14d1\3\2\2\2\u14d2\u14d3\3\2\2\2\u14d3"+
		"\u14d4\3\2\2\2\u14d4\u1511\t<\2\2\u14d5\u14d6\7\3\2\2\u14d6\u14d8\5\u0166"+
		"\u00b4\2\u14d7\u14d9\5\u0162\u00b2\2\u14d8\u14d7\3\2\2\2\u14d8\u14d9\3"+
		"\2\2\2\u14d9\u1511\3\2\2\2\u14da\u14db\7\5\2\2\u14db\u14dc\7\32\2\2\u14dc"+
		"\u14dd\5\u0342\u01a2\2\u14dd\u14de\t\25\2\2\u14de\u14e0\7\u02c7\2\2\u14df"+
		"\u14e1\5\u0162\u00b2\2\u14e0\u14df\3\2\2\2\u14e0\u14e1\3\2\2\2\u14e1\u1511"+
		"\3\2\2\2\u14e2\u14e3\7\66\2\2\u14e3\u14e4\7\u0333\2\2\u14e4\u14e9\5\u0342"+
		"\u01a2\2\u14e5\u14e6\7\u0335\2\2\u14e6\u14e8\5\u0342\u01a2\2\u14e7\u14e5"+
		"\3\2\2\2\u14e8\u14eb\3\2\2\2\u14e9\u14e7\3\2\2\2\u14e9\u14ea\3\2\2\2\u14ea"+
		"\u14ec\3\2\2\2\u14eb\u14e9\3\2\2\2\u14ec\u14ee\7\u0334\2\2\u14ed\u14ef"+
		"\5\u0162\u00b2\2\u14ee\u14ed\3\2\2\2\u14ee\u14ef\3\2\2\2\u14ef\u1511\3"+
		"\2\2\2\u14f0\u14f1\7\u02c2\2\2\u14f1\u14f2\t=\2\2\u14f2\u1511\7\u0239"+
		"\2\2\u14f3\u14f4\t>\2\2\u14f4\u1511\7\u0239\2\2\u14f5\u14f6\7\u0099\2"+
		"\2\u14f6\u14f8\7\u02cc\2\2\u14f7\u14f9\7\u0324\2\2\u14f8\u14f7\3\2\2\2"+
		"\u14f8\u14f9\3\2\2\2\u14f9\u14fd\3\2\2\2\u14fa\u14fe\7j\2\2\u14fb\u14fe"+
		"\7\u02d5\2\2\u14fc\u14fe\5\u0342\u01a2\2\u14fd\u14fa\3\2\2\2\u14fd\u14fb"+
		"\3\2\2\2\u14fd\u14fc\3\2\2\2\u14fe\u1500\3\2\2\2\u14ff\u1501\5\u0162\u00b2"+
		"\2\u1500\u14ff\3\2\2\2\u1500\u1501\3\2\2\2\u1501\u1511\3\2\2\2\u1502\u1503"+
		"\7\u0099\2\2\u1503\u1504\7\u0294\2\2\u1504\u1505\7\u024a\2\2\u1505\u1507"+
		"\7\u01b5\2\2\u1506\u1508\7\u0324\2\2\u1507\u1506\3\2\2\2\u1507\u1508\3"+
		"\2\2\2\u1508\u150b\3\2\2\2\u1509\u150c\7j\2\2\u150a\u150c\5\u0342\u01a2"+
		"\2\u150b\u1509\3\2\2\2\u150b\u150a\3\2\2\2\u150c\u150e\3\2\2\2\u150d\u150f"+
		"\5\u0162\u00b2\2\u150e\u150d\3\2\2\2\u150e\u150f\3\2\2\2\u150f\u1511\3"+
		"\2\2\2\u1510\u14cd\3\2\2\2\u1510\u14ce\3\2\2\2\u1510\u14cf\3\2\2\2\u1510"+
		"\u14d5\3\2\2\2\u1510\u14da\3\2\2\2\u1510\u14e2\3\2\2\2\u1510\u14f0\3\2"+
		"\2\2\u1510\u14f3\3\2\2\2\u1510\u14f5\3\2\2\2\u1510\u1502\3\2\2\2\u1511"+
		"\u0161\3\2\2\2\u1512\u1513\7\u00b8\2\2\u1513\u1514\7\u0204\2\2\u1514\u1515"+
		"\7\u0239\2\2\u1515\u0163\3\2\2\2\u1516\u1517\7\u0184\2\2\u1517\u1518\7"+
		"U\2\2\u1518\u1519\7l\2\2\u1519\u151b\5\u0310\u0189\2\u151a\u151c\5\u0166"+
		"\u00b4\2\u151b\u151a\3\2\2\2\u151b\u151c\3\2\2\2\u151c\u151d\3\2\2\2\u151d"+
		"\u151e\7\\\2\2\u151e\u151f\7U\2\2\u151f\u1522\5\u0342\u01a2\2\u1520\u1521"+
		"\7l\2\2\u1521\u1523\5\u016c\u00b7\2\u1522\u1520\3\2\2\2\u1522\u1523\3"+
		"\2\2\2\u1523\u1525\3\2\2\2\u1524\u1526\5\u016a\u00b6\2\u1525\u1524\3\2"+
		"\2\2\u1525\u1526\3\2\2\2\u1526\u0165\3\2\2\2\u1527\u1528\7\u0333\2\2\u1528"+
		"\u152d\5\u0168\u00b5\2\u1529\u152a\7\u0335\2\2\u152a\u152c\5\u0168\u00b5"+
		"\2\u152b\u1529\3\2\2\2\u152c\u152f\3\2\2\2\u152d\u152b\3\2\2\2\u152d\u152e"+
		"\3\2\2\2\u152e\u1530\3\2\2\2\u152f\u152d\3\2\2\2\u1530\u1531\7\u0334\2"+
		"\2\u1531\u0167\3\2\2\2\u1532\u1536\5\u0342\u01a2\2\u1533\u1534\7\u02f0"+
		"\2\2\u1534\u1535\7\32\2\2\u1535\u1537\5\u0336\u019c\2\u1536\u1533\3\2"+
		"\2\2\u1536\u1537\3\2\2\2\u1537\u153a\3\2\2\2\u1538\u1539\7\u01af\2\2\u1539"+
		"\u153b\t#\2\2\u153a\u1538\3\2\2\2\u153a\u153b\3\2\2\2\u153b\u153d\3\2"+
		"\2\2\u153c\u153e\7\u02c7\2\2\u153d\u153c\3\2\2\2\u153d\u153e\3\2\2\2\u153e"+
		"\u0169\3\2\2\2\u153f\u1541\7\u00b8\2\2\u1540\u1542\7\u0333\2\2\u1541\u1540"+
		"\3\2\2\2\u1541\u1542\3\2\2\2\u1542\u1543\3\2\2\2\u1543\u1548\5\u016e\u00b8"+
		"\2\u1544\u1545\7\u0335\2\2\u1545\u1547\5\u016e\u00b8\2\u1546\u1544\3\2"+
		"\2\2\u1547\u154a\3\2\2\2\u1548\u1546\3\2\2\2\u1548\u1549\3\2\2\2\u1549"+
		"\u154c\3\2\2\2\u154a\u1548\3\2\2\2\u154b\u154d\7\u0334\2\2\u154c\u154b"+
		"\3\2\2\2\u154c\u154d\3\2\2\2\u154d\u016b\3\2\2\2\u154e\u1563\5\u0342\u01a2"+
		"\2\u154f\u1550\7\u0333\2\2\u1550\u1551\5\u0342\u01a2\2\u1551\u1552\7\u0335"+
		"\2\2\u1552\u1553\7\u0173\2\2\u1553\u1554\5\u0342\u01a2\2\u1554\u1555\7"+
		"\u0334\2\2\u1555\u1563\3\2\2\2\u1556\u1557\7\u0333\2\2\u1557\u1558\7\u0173"+
		"\2\2\u1558\u1559\5\u0342\u01a2\2\u1559\u155a\7\u0335\2\2\u155a\u155b\5"+
		"\u0342\u01a2\2\u155b\u155c\7\u0334\2\2\u155c\u1563\3\2\2\2\u155d\u155e"+
		"\7\u0333\2\2\u155e\u155f\7\u0173\2\2\u155f\u1560\5\u0342\u01a2\2\u1560"+
		"\u1561\7\u0334\2\2\u1561\u1563\3\2\2\2\u1562\u154e\3\2\2\2\u1562\u154f"+
		"\3\2\2\2\u1562\u1556\3\2\2\2\u1562\u155d\3\2\2\2\u1563\u016d\3\2\2\2\u1564"+
		"\u1566\7\u010d\2\2\u1565\u1567\7\u0324\2\2\u1566\u1565\3\2\2\2\u1566\u1567"+
		"\3\2\2\2\u1567\u1570\3\2\2\2\u1568\u1571\7\u01c4\2\2\u1569\u1571\7\u00ef"+
		"\2\2\u156a\u156e\7j\2\2\u156b\u156c\7\u0335\2\2\u156c\u156d\7\u0204\2"+
		"\2\u156d\u156f\7\u0239\2\2\u156e\u156b\3\2\2\2\u156e\u156f\3\2\2\2\u156f"+
		"\u1571\3\2\2\2\u1570\u1568\3\2\2\2\u1570\u1569\3\2\2\2\u1570\u156a\3\2"+
		"\2\2\u1571\u1583\3\2\2\2\u1572\u1574\7\u02cc\2\2\u1573\u1575\7\u0324\2"+
		"\2\u1574\u1573\3\2\2\2\u1574\u1575\3\2\2\2\u1575\u1579\3\2\2\2\u1576\u157a"+
		"\7j\2\2\u1577\u157a\7\u02d5\2\2\u1578\u157a\5\u0342\u01a2\2\u1579\u1576"+
		"\3\2\2\2\u1579\u1577\3\2\2\2\u1579\u1578\3\2\2\2\u157a\u1583\3\2\2\2\u157b"+
		"\u157c\7\u0294\2\2\u157c\u157d\7\u024a\2\2\u157d\u157f\7\u01b5\2\2\u157e"+
		"\u1580\7\u0324\2\2\u157f\u157e\3\2\2\2\u157f\u1580\3\2\2\2\u1580\u1581"+
		"\3\2\2\2\u1581\u1583\5\u0342\u01a2\2\u1582\u1564\3\2\2\2\u1582\u1572\3"+
		"\2\2\2\u1582\u157b\3\2\2\2\u1583\u016f\3\2\2\2\u1584\u1585\7\u029d\2\2"+
		"\u1585\u1586\7\u030c\2\2\u1586\u1587\7U\2\2\u1587\u1588\5\u0342\u01a2"+
		"\2\u1588\u1589\7l\2\2\u1589\u158a\5\u0310\u0189\2\u158a\u158b\7\u0333"+
		"\2\2\u158b\u158c\5\u0342\u01a2\2\u158c\u1593\7\u0334\2\2\u158d\u158e\7"+
		"\u00b8\2\2\u158e\u158f\7\u030e\2\2\u158f\u1590\7\u0333\2\2\u1590\u1591"+
		"\5\u0172\u00ba\2\u1591\u1592\7\u0334\2\2\u1592\u1594\3\2\2\2\u1593\u158d"+
		"\3\2\2\2\u1593\u1594\3\2\2\2\u1594\u1595\3\2\2\2\u1595\u1596\7D\2\2\u1596"+
		"\u1597\7\u0333\2\2\u1597\u1598\5\u0176\u00bc\2\u1598\u159a\7\u0334\2\2"+
		"\u1599\u159b\5\u0282\u0142\2\u159a\u1599\3\2\2\2\u159a\u159b\3\2\2\2\u159b"+
		"\u0171\3\2\2\2\u159c\u159f\5\u0174\u00bb\2\u159d\u159e\7\u0335\2\2\u159e"+
		"\u15a0\5\u0172\u00ba\2\u159f\u159d\3\2\2\2\u159f\u15a0\3\2\2\2\u15a0\u0173"+
		"\3\2\2\2\u15a1\u15a2\5\u017a\u00be\2\u15a2\u15a3\7\b\2\2\u15a3\u15a4\5"+
		"\u017a\u00be\2\u15a4\u0175\3\2\2\2\u15a5\u15aa\5\u0178\u00bd\2\u15a6\u15a7"+
		"\7\u0335\2\2\u15a7\u15a9\5\u0178\u00bd\2\u15a8\u15a6\3\2\2\2\u15a9\u15ac"+
		"\3\2\2\2\u15aa\u15a8\3\2\2\2\u15aa\u15ab\3\2\2\2\u15ab\u0177\3\2\2\2\u15ac"+
		"\u15aa\3\2\2\2\u15ad\u15ae\5\u017a\u00be\2\u15ae\u15af\7\u0324\2\2\u15af"+
		"\u15ba\5\u017a\u00be\2\u15b0\u15b8\7\b\2\2\u15b1\u15b2\7\u0310\2\2\u15b2"+
		"\u15b4\5\u0290\u0149\2\u15b3\u15b5\5\u02da\u016e\2\u15b4\u15b3\3\2\2\2"+
		"\u15b4\u15b5\3\2\2\2\u15b5\u15b9\3\2\2\2\u15b6\u15b7\7\u02bc\2\2\u15b7"+
		"\u15b9\5\u0336\u019c\2\u15b8\u15b1\3\2\2\2\u15b8\u15b6\3\2\2\2\u15b9\u15bb"+
		"\3\2\2\2\u15ba\u15b0\3\2\2\2\u15ba\u15bb\3\2\2\2\u15bb\u15bd\3\2\2\2\u15bc"+
		"\u15be\7\u02b2\2\2\u15bd\u15bc\3\2\2\2\u15bd\u15be\3\2\2\2\u15be\u0179"+
		"\3\2\2\2\u15bf\u15c2\5\u0342\u01a2\2\u15c0\u15c2\5.\30\2\u15c1\u15bf\3"+
		"\2\2\2\u15c1\u15c0\3\2\2\2\u15c2\u017b\3\2\2\2\u15c3\u15c5\7{\2\2\u15c4"+
		"\u15c3\3\2\2\2\u15c4\u15c5\3\2\2\2\u15c5\u15c6\3\2\2\2\u15c6\u15c7\7\u030c"+
		"\2\2\u15c7\u15c8\7U\2\2\u15c8\u15c9\5\u0342\u01a2\2\u15c9\u15ca\7l\2\2"+
		"\u15ca\u15cb\5\u0310\u0189\2\u15cb\u15cc\7\u0333\2\2\u15cc\u15cd\5\u0342"+
		"\u01a2\2\u15cd\u15cf\7\u0334\2\2\u15ce\u15d0\5\u017e\u00c0\2\u15cf\u15ce"+
		"\3\2\2\2\u15cf\u15d0\3\2\2\2\u15d0\u15d2\3\2\2\2\u15d1\u15d3\5\u0282\u0142"+
		"\2\u15d2\u15d1\3\2\2\2\u15d2\u15d3\3\2\2\2\u15d3\u017d\3\2\2\2\u15d4\u15d5"+
		"\7\u02fb\2\2\u15d5\u15d6\7\u030c\2\2\u15d6\u15d7\7U\2\2\u15d7\u15e2\5"+
		"\u0342\u01a2\2\u15d8\u15e0\7D\2\2\u15d9\u15e1\7\u02fe\2\2\u15da\u15e1"+
		"\7\u022c\2\2\u15db\u15e1\7\u024a\2\2\u15dc\u15dd\7\u0333\2\2\u15dd\u15de"+
		"\5\u0342\u01a2\2\u15de\u15df\7\u0334\2\2\u15df\u15e1\3\2\2\2\u15e0\u15d9"+
		"\3\2\2\2\u15e0\u15da\3\2\2\2\u15e0\u15db\3\2\2\2\u15e0\u15dc\3\2\2\2\u15e1"+
		"\u15e3\3\2\2\2\u15e2\u15d8\3\2\2\2\u15e2\u15e3\3\2\2\2\u15e3\u017f\3\2"+
		"\2\2\u15e4\u15e6\7\u00ab\2\2\u15e5\u15e4\3\2\2\2\u15e5\u15e6\3\2\2\2\u15e6"+
		"\u15e8\3\2\2\2\u15e7\u15e9\5\u0320\u0191\2\u15e8\u15e7\3\2\2\2\u15e8\u15e9"+
		"\3\2\2\2\u15e9\u15ea\3\2\2\2\u15ea\u15eb\7U\2\2\u15eb\u15ec\5\u0342\u01a2"+
		"\2\u15ec\u15ed\7l\2\2\u15ed\u15ee\5\u0310\u0189\2\u15ee\u15ef\5\u0182"+
		"\u00c2\2\u15ef\u0181\3\2\2\2\u15f0\u15f2\5\u0184\u00c3\2\u15f1\u15f3\5"+
		"\u0186\u00c4\2\u15f2\u15f1\3\2\2\2\u15f2\u15f3\3\2\2\2\u15f3\u15f5\3\2"+
		"\2\2\u15f4\u15f6\5\u0188\u00c5\2\u15f5\u15f4\3\2\2\2\u15f5\u15f6\3\2\2"+
		"\2\u15f6\u15f8\3\2\2\2\u15f7\u15f9\5\u0282\u0142\2\u15f8\u15f7\3\2\2\2"+
		"\u15f8\u15f9\3\2\2\2\u15f9\u15fc\3\2\2\2\u15fa\u15fb\7l\2\2\u15fb\u15fd"+
		"\5\u0342\u01a2\2\u15fc\u15fa\3\2\2\2\u15fc\u15fd\3\2\2\2\u15fd\u0183\3"+
		"\2\2\2\u15fe\u15ff\7\u0333\2\2\u15ff\u1600\5\u0314\u018b\2\u1600\u1601"+
		"\7\u0334\2\2\u1601\u0185\3\2\2\2\u1602\u1603\7\u0199\2\2\u1603\u1604\7"+
		"\u0333\2\2\u1604\u1605\5\u031a\u018e\2\u1605\u1606\7\u0334\2\2\u1606\u0187"+
		"\3\2\2\2\u1607\u1608\7\u00b6\2\2\u1608\u1609\5\u02a2\u0152\2\u1609\u0189"+
		"\3\2\2\2\u160a\u160b\t?\2\2\u160b\u160e\5\u0310\u0189\2\u160c\u160d\7"+
		"\u0336\2\2\u160d\u160f\7\u031a\2\2\u160e\u160c\3\2\2\2\u160e\u160f\3\2"+
		"\2\2\u160f\u161e\3\2\2\2\u1610\u1612\7\u0333\2\2\u1611\u1610\3\2\2\2\u1611"+
		"\u1612\3\2\2\2\u1612\u1613\3\2\2\2\u1613\u1618\5\u01a0\u00d1\2\u1614\u1615"+
		"\7\u0335\2\2\u1615\u1617\5\u01a0\u00d1\2\u1616\u1614\3\2\2\2\u1617\u161a"+
		"\3\2\2\2\u1618\u1616\3\2\2\2\u1618\u1619\3\2\2\2\u1619\u161c\3\2\2\2\u161a"+
		"\u1618\3\2\2\2\u161b\u161d\7\u0334\2\2\u161c\u161b\3\2\2\2\u161c\u161d"+
		"\3\2\2\2\u161d\u161f\3\2\2\2\u161e\u1611\3\2\2\2\u161e\u161f\3\2\2\2\u161f"+
		"\u1629\3\2\2\2\u1620\u1621\7\u00b8\2\2\u1621\u1626\5\u01a4\u00d3\2\u1622"+
		"\u1623\7\u0335\2\2\u1623\u1625\5\u01a4\u00d3\2\u1624\u1622\3\2\2\2\u1625"+
		"\u1628\3\2\2\2\u1626\u1624\3\2\2\2\u1626\u1627\3\2\2\2\u1627\u162a\3\2"+
		"\2\2\u1628\u1626\3\2\2\2\u1629\u1620\3\2\2\2\u1629\u162a\3\2\2\2\u162a"+
		"\u162d\3\2\2\2\u162b\u162c\7D\2\2\u162c\u162e\7\u0086\2\2\u162d\u162b"+
		"\3\2\2\2\u162d\u162e\3\2\2\2\u162e\u162f\3\2\2\2\u162f\u1630\7\b\2\2\u1630"+
		"\u1631\5\u018c\u00c7\2\u1631\u018b\3\2\2\2\u1632\u1637\5\f\7\2\u1633\u1634"+
		"\7@\2\2\u1634\u1635\7\u01f6\2\2\u1635\u1637\5\u019e\u00d0\2\u1636\u1632"+
		"\3\2\2\2\u1636\u1633\3\2\2\2\u1637\u018d\3\2\2\2\u1638\u1639\7\u00a7\2"+
		"\2\u1639\u163a\5\u0310\u0189\2\u163a\u163f\7l\2\2\u163b\u1640\5\u0310"+
		"\u0189\2\u163c\u163d\7\4\2\2\u163d\u1640\7\u02a4\2\2\u163e\u1640\7*\2"+
		"\2\u163f\u163b\3\2\2\2\u163f\u163c\3\2\2\2\u163f\u163e\3\2\2\2\u1640\u164a"+
		"\3\2\2\2\u1641\u1642\7\u00b8\2\2\u1642\u1647\5\u0194\u00cb\2\u1643\u1644"+
		"\7\u0335\2\2\u1644\u1646\5\u0194\u00cb\2\u1645\u1643\3\2\2\2\u1646\u1649"+
		"\3\2\2\2\u1647\u1645\3\2\2\2\u1647\u1648\3\2\2\2\u1648\u164b\3\2\2\2\u1649"+
		"\u1647\3\2\2\2\u164a\u1641\3\2\2\2\u164a\u164b\3\2\2\2\u164b\u1650\3\2"+
		"\2\2\u164c\u1651\7D\2\2\u164d\u1651\7\u00d0\2\2\u164e\u164f\7\u01a1\2"+
		"\2\u164f\u1651\7i\2\2\u1650\u164c\3\2\2\2\u1650\u164d\3\2\2\2\u1650\u164e"+
		"\3\2\2\2\u1651\u1652\3\2\2\2\u1652\u1657\5\u0196\u00cc\2\u1653\u1654\7"+
		"\u0335\2\2\u1654\u1656\5\u0196\u00cc\2\u1655\u1653\3\2\2\2\u1656\u1659"+
		"\3\2\2\2\u1657\u1655\3\2\2\2\u1657\u1658\3\2\2\2\u1658\u165b\3\2\2\2\u1659"+
		"\u1657\3\2\2\2\u165a\u165c\5\u0192\u00ca\2\u165b\u165a\3\2\2\2\u165b\u165c"+
		"\3\2\2\2\u165c\u165e\3\2\2\2\u165d\u165f\5\u0190\u00c9\2\u165e\u165d\3"+
		"\2\2\2\u165e\u165f\3\2\2\2\u165f\u1660\3\2\2\2\u1660\u1661\7\b\2\2\u1661"+
		"\u1662\5\f\7\2\u1662\u018f\3\2\2\2\u1663\u1664\7f\2\2\u1664\u1665\7D\2"+
		"\2\u1665\u1666\7\u0086\2\2\u1666\u0191\3\2\2\2\u1667\u1668\7\u00b8\2\2"+
		"\u1668\u1669\7\u00de\2\2\u1669\u0193\3\2\2\2\u166a\u166d\7\u0159\2\2\u166b"+
		"\u166d\5\u0264\u0133\2\u166c\u166a\3\2\2\2\u166c\u166b\3\2\2\2\u166d\u0195"+
		"\3\2\2\2\u166e\u1673\7W\2\2\u166f\u1673\7\u00ad\2\2\u1670\u1673\7/\2\2"+
		"\u1671\u1673\5\u0344\u01a3\2\u1672\u166e\3\2\2\2\u1672\u166f\3\2\2\2\u1672"+
		"\u1670\3\2\2\2\u1672\u1671\3\2\2\2\u1673\u0197\3\2\2\2\u1674\u1675\7J"+
		"\2\2\u1675\u1676\5\u0310\u0189\2\u1676\u167f\7\u0333\2\2\u1677\u167c\5"+
		"\u01a0\u00d1\2\u1678\u1679\7\u0335\2\2\u1679\u167b\5\u01a0\u00d1\2\u167a"+
		"\u1678\3\2\2\2\u167b\u167e\3\2\2\2\u167c\u167a\3\2\2\2\u167c\u167d\3\2"+
		"\2\2\u167d\u1680\3\2\2\2\u167e\u167c\3\2\2\2\u167f\u1677\3\2\2\2\u167f"+
		"\u1680\3\2\2\2\u1680\u1681\3\2\2\2\u1681\u1682\7\u0334\2\2\u1682\u1683"+
		"\7\u027d\2\2\u1683\u168d\5\u019a\u00ce\2\u1684\u1685\7\u00b8\2\2\u1685"+
		"\u168a\5\u01a6\u00d4\2\u1686\u1687\7\u0335\2\2\u1687\u1689\5\u01a6\u00d4"+
		"\2\u1688\u1686\3\2\2\2\u1689\u168c\3\2\2\2\u168a\u1688\3\2\2\2\u168a\u168b"+
		"\3\2\2\2\u168b\u168e\3\2\2\2\u168c\u168a\3\2\2\2\u168d\u1684\3\2\2\2\u168d"+
		"\u168e\3\2\2\2\u168e\u1690\3\2\2\2\u168f\u1691\7\b\2\2\u1690\u168f\3\2"+
		"\2\2\u1690\u1691\3\2\2\2\u1691\u1692\3\2\2\2\u1692\u1693\5\u019c\u00cf"+
		"\2\u1693\u0199\3\2\2\2\u1694\u1699\7\u009f\2\2\u1695\u1696\7\u0333\2\2"+
		"\u1696\u1697\5\u026c\u0137\2\u1697\u1698\7\u0334\2\2\u1698\u169a\3\2\2"+
		"\2\u1699\u1695\3\2\2\2\u1699\u169a\3\2\2\2\u169a\u16a3\3\2\2\2\u169b\u169c"+
		"\7\u0319\2\2\u169c\u169d\7\u009f\2\2\u169d\u169e\7\u0333\2\2\u169e\u169f"+
		"\5\u026c\u0137\2\u169f\u16a0\7\u0334\2\2\u16a0\u16a3\3\2\2\2\u16a1\u16a3"+
		"\5\u0336\u019c\2\u16a2\u1694\3\2\2\2\u16a2\u169b\3\2\2\2\u16a2\u16a1\3"+
		"\2\2\2\u16a3\u019b\3\2\2\2\u16a4\u16a5\7\u0089\2\2\u16a5\u16b6\5\u0142"+
		"\u00a2\2\u16a6\u16a8\7\f\2\2\u16a7\u16a9\5\f\7\2\u16a8\u16a7\3\2\2\2\u16a8"+
		"\u16a9\3\2\2\2\u16a9\u16aa\3\2\2\2\u16aa\u16ac\7\u0089\2\2\u16ab\u16ad"+
		"\5\u0290\u0149\2\u16ac\u16ab\3\2\2\2\u16ac\u16ad\3\2\2\2\u16ad\u16af\3"+
		"\2\2\2\u16ae\u16b0\7\u0336\2\2\u16af\u16ae\3\2\2\2\u16af\u16b0\3\2\2\2"+
		"\u16b0\u16b1\3\2\2\2\u16b1\u16b6\79\2\2\u16b2\u16b3\7@\2\2\u16b3\u16b4"+
		"\7\u01f6\2\2\u16b4\u16b6\5\u019e\u00d0\2\u16b5\u16a4\3\2\2\2\u16b5\u16a6"+
		"\3\2\2\2\u16b5\u16b2\3\2\2\2\u16b6\u019d\3\2\2\2\u16b7\u16b8\5\u0342\u01a2"+
		"\2\u16b8\u16b9\7\u0330\2\2\u16b9\u16ba\5\u0342\u01a2\2\u16ba\u16bb\7\u0330"+
		"\2\2\u16bb\u16bc\5\u0342\u01a2\2\u16bc\u019f\3\2\2\2\u16bd\u16bf\7\u0319"+
		"\2\2\u16be\u16c0\7\b\2\2\u16bf\u16be\3\2\2\2\u16bf\u16c0\3\2\2\2\u16c0"+
		"\u16c1\3\2\2\2\u16c1\u16c4\5\u0336\u019c\2\u16c2\u16c3\7\u0324\2\2\u16c3"+
		"\u16c5\5\u033a\u019e\2\u16c4\u16c2\3\2\2\2\u16c4\u16c5\3\2\2\2\u16c5\u16c7"+
		"\3\2\2\2\u16c6\u16c8\5\u01a2\u00d2\2\u16c7\u16c6\3\2\2\2\u16c7\u16c8\3"+
		"\2\2\2\u16c8\u16ca\3\2\2\2\u16c9\u16cb\7\u025d\2\2\u16ca\u16c9\3\2\2\2"+
		"\u16ca\u16cb\3\2\2\2\u16cb\u01a1\3\2\2\2\u16cc\u16cd\t@\2\2\u16cd\u01a3"+
		"\3\2\2\2\u16ce\u16d2\7\u0159\2\2\u16cf\u16d2\7\u0260\2\2\u16d0\u16d2\5"+
		"\u0264\u0133\2\u16d1\u16ce\3\2\2\2\u16d1\u16cf\3\2\2\2\u16d1\u16d0\3\2"+
		"\2\2\u16d2\u01a5\3\2\2\2\u16d3\u16e0\7\u0159\2\2\u16d4\u16e0\7\u028f\2"+
		"\2\u16d5\u16d6\7\u027d\2\2\u16d6\u16d7\7g\2\2\u16d7\u16d8\7l\2\2\u16d8"+
		"\u16d9\7g\2\2\u16d9\u16e0\7\u019f\2\2\u16da\u16db\7\u0105\2\2\u16db\u16dc"+
		"\7l\2\2\u16dc\u16dd\7g\2\2\u16dd\u16e0\7\u019f\2\2\u16de\u16e0\5\u0264"+
		"\u0133\2\u16df\u16d3\3\2\2\2\u16df\u16d4\3\2\2\2\u16df\u16d5\3\2\2\2\u16df"+
		"\u16da\3\2\2\2\u16df\u16de\3\2\2\2\u16e0\u01a7\3\2\2\2\u16e1\u16e2\7\u009d"+
		"\2\2\u16e2\u16e3\5\u0342\u01a2\2\u16e3\u16e4\7l\2\2\u16e4\u16e5\5\u02d2"+
		"\u016a\2\u16e5\u16e6\7\u0333\2\2\u16e6\u16e7\5\u031a\u018e\2\u16e7\u16f1"+
		"\7\u0334\2\2\u16e8\u16e9\7\u00b8\2\2\u16e9\u16ee\5\u01ac\u00d7\2\u16ea"+
		"\u16eb\7\u0335\2\2\u16eb\u16ed\5\u01ac\u00d7\2\u16ec\u16ea\3\2\2\2\u16ed"+
		"\u16f0\3\2\2\2\u16ee\u16ec\3\2\2\2\u16ee\u16ef\3\2\2\2\u16ef\u16f2\3\2"+
		"\2\2\u16f0\u16ee\3\2\2\2\u16f1\u16e8\3\2\2\2\u16f1\u16f2\3\2\2\2\u16f2"+
		"\u01a9\3\2\2\2\u16f3\u16f4\7\u00ad\2\2\u16f4\u16f5\7\u009d\2\2\u16f5\u16fb"+
		"\5\u0310\u0189\2\u16f6\u16fc\5\u0310\u0189\2\u16f7\u16f8\7\u0333\2\2\u16f8"+
		"\u16f9\5~@\2\u16f9\u16fa\7\u0334\2\2\u16fa\u16fc\3\2\2\2\u16fb\u16f6\3"+
		"\2\2\2\u16fb\u16f7\3\2\2\2\u16fb\u16fc\3\2\2\2\u16fc\u1706\3\2\2\2\u16fd"+
		"\u16fe\7\u00b8\2\2\u16fe\u1703\5\u01ac\u00d7\2\u16ff\u1700\7\u0335\2\2"+
		"\u1700\u1702\5\u01ac\u00d7\2\u1701\u16ff\3\2\2\2\u1702\u1705\3\2\2\2\u1703"+
		"\u1701\3\2\2\2\u1703\u1704\3\2\2\2\u1704\u1707\3\2\2\2\u1705\u1703\3\2"+
		"\2\2\u1706\u16fd\3\2\2\2\u1706\u1707\3\2\2\2\u1707\u01ab\3\2\2\2\u1708"+
		"\u170d\7\u0183\2\2\u1709\u170a\7\u0335\2\2\u170a\u170b\7\u0232\2\2\u170b"+
		"\u170c\7\u0324\2\2\u170c\u170e\5\u031e\u0190\2\u170d\u1709\3\2\2\2\u170d"+
		"\u170e\3\2\2\2\u170e\u1732\3\2\2\2\u170f\u1710\7\u028d\2\2\u1710\u1711"+
		"\7\u031a\2\2\u1711\u1716\tA\2\2\u1712\u1713\7\u0335\2\2\u1713\u1714\7"+
		"\u0232\2\2\u1714\u1715\7\u0324\2\2\u1715\u1717\5\u031e\u0190\2\u1716\u1712"+
		"\3\2\2\2\u1716\u1717\3\2\2\2\u1717\u1732\3\2\2\2\u1718\u1719\7\u0272\2"+
		"\2\u1719\u171a\7l\2\2\u171a\u171b\7\u0229\2\2\u171b\u1725\7\u0333\2\2"+
		"\u171c\u171e\7\u0335\2\2\u171d\u171c\3\2\2\2\u171d\u171e\3\2\2\2\u171e"+
		"\u1723\3\2\2\2\u171f\u1724\7\u031a\2\2\u1720\u1721\7\u031a\2\2\u1721\u1722"+
		"\7\u00a3\2\2\u1722\u1724\7\u031a\2\2\u1723\u171f\3\2\2\2\u1723\u1720\3"+
		"\2\2\2\u1724\u1726\3\2\2\2\u1725\u171d\3\2\2\2\u1726\u1727\3\2\2\2\u1727"+
		"\u1725\3\2\2\2\u1727\u1728\3\2\2\2\u1728\u1729\3\2\2\2\u1729\u1732\7\u0334"+
		"\2\2\u172a\u1732\7\u020b\2\2\u172b\u172c\7\u019b\2\2\u172c\u172d\7\u0324"+
		"\2\2\u172d\u1732\5\u031e\u0190\2\u172e\u172f\7\u01d7\2\2\u172f\u1730\7"+
		"\u0324\2\2\u1730\u1732\7\u031a\2\2\u1731\u1708\3\2\2\2\u1731\u170f\3\2"+
		"\2\2\u1731\u1718\3\2\2\2\u1731\u172a\3\2\2\2\u1731\u172b\3\2\2\2\u1731"+
		"\u172e\3\2\2\2\u1732\u01ad\3\2\2\2\u1733\u1734\7\u009f\2\2\u1734\u1735"+
		"\5\u0310\u0189\2\u1735\u1736\7\u0333\2\2\u1736\u1738\5\u026c\u0137\2\u1737"+
		"\u1739\7\u0335\2\2\u1738\u1737\3\2\2\2\u1738\u1739\3\2\2\2\u1739\u173a"+
		"\3\2\2\2\u173a\u1743\7\u0334\2\2\u173b\u173c\7l\2\2\u173c\u1741\5\u01b0"+
		"\u00d9\2\u173d\u173e\7\u0333\2\2\u173e\u173f\5\u0342\u01a2\2\u173f\u1740"+
		"\7\u0334\2\2\u1740\u1742\3\2\2\2\u1741\u173d\3\2\2\2\u1741\u1742\3\2\2"+
		"\2\u1742\u1744\3\2\2\2\u1743\u173b\3\2\2\2\u1743\u1744\3\2\2\2\u1744\u1747"+
		"\3\2\2\2\u1745\u1746\7\u02dc\2\2\u1746\u1748\5\u01b0\u00d9\2\u1747\u1745"+
		"\3\2\2\2\u1747\u1748\3\2\2\2\u1748\u174b\3\2\2\2\u1749\u174a\7\u0177\2"+
		"\2\u174a\u174c\5\u01b0\u00d9\2\u174b\u1749\3\2\2\2\u174b\u174c\3\2\2\2"+
		"\u174c\u1750\3\2\2\2\u174d\u174f\5\u01b4\u00db\2\u174e\u174d\3\2\2\2\u174f"+
		"\u1752\3\2\2\2\u1750\u174e\3\2\2\2\u1750\u1751\3\2\2\2\u1751\u01af\3\2"+
		"\2\2\u1752\u1750\3\2\2\2\u1753\u1756\5\u0342\u01a2\2\u1754\u1756\7.\2"+
		"\2\u1755\u1753\3\2\2\2\u1755\u1754\3\2\2\2\u1756\u01b1\3\2\2\2\u1757\u175a"+
		"\5\u0342\u01a2\2\u1758\u175a\7{\2\2\u1759\u1757\3\2\2\2\u1759\u1758\3"+
		"\2\2\2\u175a\u01b3\3\2\2\2\u175b\u176f\7\u00b8\2\2\u175c\u175d\7\u0333"+
		"\2\2\u175d\u1762\5\u0284\u0143\2\u175e\u175f\7\u0335\2\2\u175f\u1761\5"+
		"\u0284\u0143\2\u1760\u175e\3\2\2\2\u1761\u1764\3\2\2\2\u1762\u1760\3\2"+
		"\2\2\u1762\u1763\3\2\2\2\u1763\u1765\3\2\2\2\u1764\u1762\3\2\2\2\u1765"+
		"\u1766\7\u0334\2\2\u1766\u1770\3\2\2\2\u1767\u176c\5\u0284\u0143\2\u1768"+
		"\u1769\7\u0335\2\2\u1769\u176b\5\u0284\u0143\2\u176a\u1768\3\2\2\2\u176b"+
		"\u176e\3\2\2\2\u176c\u176a\3\2\2\2\u176c\u176d\3\2\2\2\u176d\u1770\3\2"+
		"\2\2\u176e\u176c\3\2\2\2\u176f\u175c\3\2\2\2\u176f\u1767\3\2\2\2\u1770"+
		"\u01b5\3\2\2\2\u1771\u1772\7\u00b3\2\2\u1772\u1777\5\u0310\u0189\2\u1773"+
		"\u1774\7\u0333\2\2\u1774\u1775\5\u031a\u018e\2\u1775\u1776\7\u0334\2\2"+
		"\u1776\u1778\3\2\2\2\u1777\u1773\3\2\2\2\u1777\u1778\3\2\2\2\u1778\u1782"+
		"\3\2\2\2\u1779\u177a\7\u00b8\2\2\u177a\u177f\5\u01ba\u00de\2\u177b\u177c"+
		"\7\u0335\2\2\u177c\u177e\5\u01ba\u00de\2\u177d\u177b\3\2\2\2\u177e\u1781"+
		"\3\2\2\2\u177f\u177d\3\2\2\2\u177f\u1780\3\2\2\2\u1780\u1783\3\2\2\2\u1781"+
		"\u177f\3\2\2\2\u1782\u1779\3\2\2\2\u1782\u1783\3\2\2\2\u1783\u1784\3\2"+
		"\2\2\u1784\u1785\7\b\2\2\u1785\u1787\5\u0142\u00a2\2\u1786\u1788\5\u01b8"+
		"\u00dd\2\u1787\u1786\3\2\2\2\u1787\u1788\3\2\2\2\u1788\u01b7\3\2\2\2\u1789"+
		"\u178a\7\u00b8\2\2\u178a\u178b\7\24\2\2\u178b\u178c\7r\2\2\u178c\u01b9"+
		"\3\2\2\2\u178d\u178e\tB\2\2\u178e\u01bb\3\2\2\2\u178f\u1790\7\u009f\2"+
		"\2\u1790\u17d6\5\u0310\u0189\2\u1791\u1792\7\u0099\2\2\u1792\u1793\7\u0333"+
		"\2\2\u1793\u1794\7\u01be\2\2\u1794\u1795\7\u0324\2\2\u1795\u1796\tC\2"+
		"\2\u1796\u17d7\7\u0334\2\2\u1797\u179a\7\u00b8\2\2\u1798\u179b\7\24\2"+
		"\2\u1799\u179b\7d\2\2\u179a\u1798\3\2\2\2\u179a\u1799\3\2\2\2\u179b\u179d"+
		"\3\2\2\2\u179c\u1797\3\2\2\2\u179c\u179d\3\2\2\2\u179d\u179e\3\2\2\2\u179e"+
		"\u179f\7\3\2\2\u179f\u17d7\5\u026c\u0137\2\u17a0\u17a1\7\5\2\2\u17a1\u17a2"+
		"\7\32\2\2\u17a2\u17d7\5\u0272\u013a\2\u17a3\u17a4\7\66\2\2\u17a4\u17a9"+
		"\5\u01be\u00e0\2\u17a5\u17a6\7\u0335\2\2\u17a6\u17a8\5\u01be\u00e0\2\u17a7"+
		"\u17a5\3\2\2\2\u17a8\u17ab\3\2\2\2\u17a9\u17a7\3\2\2\2\u17a9\u17aa\3\2"+
		"\2\2\u17aa\u17d7\3\2\2\2\u17ab\u17a9\3\2\2\2\u17ac\u17af\7\u00b8\2\2\u17ad"+
		"\u17b0\7\24\2\2\u17ae\u17b0\7d\2\2\u17af\u17ad\3\2\2\2\u17af\u17ae\3\2"+
		"\2\2\u17b0\u17b2\3\2\2\2\u17b1\u17ac\3\2\2\2\u17b1\u17b2\3\2\2\2\u17b2"+
		"\u17b5\3\2\2\2\u17b3\u17b6\7\24\2\2\u17b4\u17b6\7d\2\2\u17b5\u17b3\3\2"+
		"\2\2\u17b5\u17b4\3\2\2\2\u17b6\u17b7\3\2\2\2\u17b7\u17b8\7\35\2\2\u17b8"+
		"\u17bd\5\u0342\u01a2\2\u17b9\u17ba\7\u0335\2\2\u17ba\u17bc\5\u0342\u01a2"+
		"\2\u17bb\u17b9\3\2\2\2\u17bc\u17bf\3\2\2\2\u17bd\u17bb\3\2\2\2\u17bd\u17be"+
		"\3\2\2\2\u17be\u17d7\3\2\2\2\u17bf\u17bd\3\2\2\2\u17c0\u17c1\t\30\2\2"+
		"\u17c1\u17c2\7\u00a7\2\2\u17c2\u17c7\5\u0342\u01a2\2\u17c3\u17c4\7\u0335"+
		"\2\2\u17c4\u17c6\5\u0342\u01a2\2\u17c5\u17c3\3\2\2\2\u17c6\u17c9\3\2\2"+
		"\2\u17c7\u17c5\3\2\2\2\u17c7\u17c8\3\2\2\2\u17c8\u17d7\3\2\2\2\u17c9\u17c7"+
		"\3\2\2\2\u17ca\u17cb\t\30\2\2\u17cb\u17d2\7\u010d\2\2\u17cc\u17cd\7\u00b8"+
		"\2\2\u17cd\u17ce\7\u0333\2\2\u17ce\u17cf\7\u02e4\2\2\u17cf\u17d0\7\u0324"+
		"\2\2\u17d0\u17d1\t\b\2\2\u17d1\u17d3\7\u0334\2\2\u17d2\u17cc\3\2\2\2\u17d2"+
		"\u17d3\3\2\2\2\u17d3\u17d7\3\2\2\2\u17d4\u17d5\7\u025e\2\2\u17d5\u17d7"+
		"\5\u01b4\u00db\2\u17d6\u1791\3\2\2\2\u17d6\u179c\3\2\2\2\u17d6\u17a0\3"+
		"\2\2\2\u17d6\u17a3\3\2\2\2\u17d6\u17b1\3\2\2\2\u17d6\u17c0\3\2\2\2\u17d6"+
		"\u17ca\3\2\2\2\u17d6\u17d4\3\2\2\2\u17d7\u01bd\3\2\2\2\u17d8\u17dd\7\32"+
		"\2\2\u17d9\u17db\7\35\2\2\u17da\u17d9\3\2\2\2\u17da\u17db\3\2\2\2\u17db"+
		"\u17dd\3\2\2\2\u17dc\u17d8\3\2\2\2\u17dc\u17da\3\2\2\2\u17dd\u17e0\3\2"+
		"\2\2\u17de\u17df\7S\2\2\u17df\u17e1\7>\2\2\u17e0\u17de\3\2\2\2\u17e0\u17e1"+
		"\3\2\2\2\u17e1\u17e2\3\2\2\2\u17e2\u17e7\5\u0342\u01a2\2\u17e3\u17e4\7"+
		"\u0335\2\2\u17e4\u17e6\5\u0342\u01a2\2\u17e5\u17e3\3\2\2\2\u17e6\u17e9"+
		"\3\2\2\2\u17e7\u17e5\3\2\2\2\u17e7\u17e8\3\2\2\2\u17e8\u01bf\3\2\2\2\u17e9"+
		"\u17e7\3\2\2\2\u17ea\u17ed\7*\2\2\u17eb\u17ee\5\u0342\u01a2\2\u17ec\u17ee"+
		"\7$\2\2\u17ed\u17eb\3\2\2\2\u17ed\u17ec\3\2\2\2\u17ee\u17fc\3\2\2\2\u17ef"+
		"\u17f0\7\u01f2\2\2\u17f0\u17f1\7\u01f6\2\2\u17f1\u17f2\7\u0324\2\2\u17f2"+
		"\u17fd\5\u0342\u01a2\2\u17f3\u17f4\7\31\2\2\u17f4\u17fd\5\u0342\u01a2"+
		"\2\u17f5\u17fd\5\u0304\u0183\2\u17f6\u17f7\7\u0099\2\2\u17f7\u17fa\5\u01c6"+
		"\u00e4\2\u17f8\u17f9\7\u00b8\2\2\u17f9\u17fb\5\u01f8\u00fd\2\u17fa\u17f8"+
		"\3\2\2\2\u17fa\u17fb\3\2\2\2\u17fb\u17fd\3\2\2\2\u17fc\u17ef\3\2\2\2\u17fc"+
		"\u17f3\3\2\2\2\u17fc\u17f5\3\2\2\2\u17fc\u17f6\3\2\2\2\u17fd\u01c1\3\2"+
		"\2\2\u17fe\u17ff\7*\2\2\u17ff\u1800\7\u0159\2\2\u1800\u1806\7\\\2\2\u1801"+
		"\u1802\7\u0263\2\2\u1802\u1803\7\u00b8\2\2\u1803\u1804\7\u00d2\2\2\u1804"+
		"\u1805\7\u0324\2\2\u1805\u1807\t;\2\2\u1806\u1801\3\2\2\2\u1806\u1807"+
		"\3\2\2\2\u1807\u1811\3\2\2\2\u1808\u1809\7\u0159\2\2\u1809\u180a\7\21"+
		"\2\2\u180a\u180e\7\u02a4\2\2\u180b\u180f\7\u010b\2\2\u180c\u180d\7\u00e4"+
		"\2\2\u180d\u180f\7\\\2\2\u180e\u180b\3\2\2\2\u180e\u180c\3\2\2\2\u180f"+
		"\u1810\3\2\2\2\u1810\u1812\5\u0342\u01a2\2\u1811\u1808\3\2\2\2\u1811\u1812"+
		"\3\2\2\2\u1812\u01c3\3\2\2\2\u1813\u1814\7*\2\2\u1814\u1815\7\u0291\2"+
		"\2\u1815\u1816\7\u012f\2\2\u1816\u1817\5\u0342\u01a2\2\u1817\u1818\7\u00b8"+
		"\2\2\u1818\u1819\7P\2\2\u1819\u181a\7\u0324\2\2\u181a\u181f\7\u031c\2"+
		"\2\u181b\u181c\7\u0335\2\2\u181c\u181d\7\u0299\2\2\u181d\u181e\7\u0324"+
		"\2\2\u181e\u1820\7\u031c\2\2\u181f\u181b\3\2\2\2\u181f\u1820\3\2\2\2\u1820"+
		"\u01c5\3\2\2\2\u1821\u183a\5\u01c8\u00e5\2\u1822\u183a\5\u01ca\u00e6\2"+
		"\u1823\u183a\5\u01ce\u00e8\2\u1824\u183a\5\u01d0\u00e9\2\u1825\u183a\5"+
		"\u01d4\u00eb\2\u1826\u183a\5\u01da\u00ee\2\u1827\u183a\5\u01dc\u00ef\2"+
		"\u1828\u183a\5\u01de\u00f0\2\u1829\u183a\5\u01e0\u00f1\2\u182a\u183a\5"+
		"\u01e2\u00f2\2\u182b\u183a\5\u01e4\u00f3\2\u182c\u183a\5\u01e6\u00f4\2"+
		"\u182d\u182e\7\u0178\2\2\u182e\u183a\5\u0302\u0182\2\u182f\u1830\7\u018a"+
		"\2\2\u1830\u183a\5\u01e8\u00f5\2\u1831\u183a\5\u01ea\u00f6\2\u1832\u183a"+
		"\5\u01ec\u00f7\2\u1833\u183a\5\u01ee\u00f8\2\u1834\u183a\5\u01f0\u00f9"+
		"\2\u1835\u183a\5\u01f2\u00fa\2\u1836\u183a\5\u01f4\u00fb\2\u1837\u183a"+
		"\5\u01f6\u00fc\2\u1838\u183a\5\u01f8\u00fd\2\u1839\u1821\3\2\2\2\u1839"+
		"\u1822\3\2\2\2\u1839\u1823\3\2\2\2\u1839\u1824\3\2\2\2\u1839\u1825\3\2"+
		"\2\2\u1839\u1826\3\2\2\2\u1839\u1827\3\2\2\2\u1839\u1828\3\2\2\2\u1839"+
		"\u1829\3\2\2\2\u1839\u182a\3\2\2\2\u1839\u182b\3\2\2\2\u1839\u182c\3\2"+
		"\2\2\u1839\u182d\3\2\2\2\u1839\u182f\3\2\2\2\u1839\u1831\3\2\2\2\u1839"+
		"\u1832\3\2\2\2\u1839\u1833\3\2\2\2\u1839\u1834\3\2\2\2\u1839\u1835\3\2"+
		"\2\2\u1839\u1836\3\2\2\2\u1839\u1837\3\2\2\2\u1839\u1838\3\2\2\2\u183a"+
		"\u01c7\3\2\2\2\u183b\u183c\7\u00ea\2\2\u183c\u184a\5\u031e\u0190\2\u183d"+
		"\u183e\7\u00eb\2\2\u183e\u184a\7j\2\2\u183f\u1840\7l\2\2\u1840\u1841\7"+
		"\u019b\2\2\u1841\u1842\7\u0324\2\2\u1842\u184a\5\u031e\u0190\2\u1843\u1844"+
		"\7\u00ec\2\2\u1844\u184a\5\u031e\u0190\2\u1845\u1846\7\u00ee\2\2\u1846"+
		"\u184a\5\u031e\u0190\2\u1847\u1848\7\u00ed\2\2\u1848\u184a\5\u031e\u0190"+
		"\2\u1849\u183b\3\2\2\2\u1849\u183d\3\2\2\2\u1849\u183f\3\2\2\2\u1849\u1843"+
		"\3\2\2\2\u1849\u1845\3\2\2\2\u1849\u1847\3\2\2\2\u184a\u01c9\3\2\2\2\u184b"+
		"\u184c\7\u010d\2\2\u184c\u185c\7\u0324\2\2\u184d\u185d\7j\2\2\u184e\u1859"+
		"\7l\2\2\u184f\u1854\5\u01cc\u00e7\2\u1850\u1851\7\u0335\2\2\u1851\u1853"+
		"\5\u01cc\u00e7\2\u1852\u1850\3\2\2\2\u1853\u1856\3\2\2\2\u1854\u1852\3"+
		"\2\2\2\u1854\u1855\3\2\2\2\u1855\u1858\3\2\2\2\u1856\u1854\3\2\2\2\u1857"+
		"\u184f\3\2\2\2\u1858\u185b\3\2\2\2\u1859\u1857\3\2\2\2\u1859\u185a\3\2"+
		"\2\2\u185a\u185d\3\2\2\2\u185b\u1859\3\2\2\2\u185c\u184d\3\2\2\2\u185c"+
		"\u184e\3\2\2\2\u185d\u01cb\3\2\2\2\u185e\u185f\7\u00e9\2\2\u185f\u1860"+
		"\7\u0324\2\2\u1860\u1865\5\u031e\u0190\2\u1861\u1862\7\u010c\2\2\u1862"+
		"\u1863\7\u0324\2\2\u1863\u1865\tD\2\2\u1864\u185e\3\2\2\2\u1864\u1861"+
		"\3\2\2\2\u1865\u01cd\3\2\2\2\u1866\u1867\7\u0121\2\2\u1867\u1868\7\u0324"+
		"\2\2\u1868\u1869\t:\2\2\u1869\u01cf\3\2\2\2\u186a\u186b\7\u0131\2\2\u186b"+
		"\u186f\5\u031e\u0190\2\u186c\u186d\7\u0132\2\2\u186d\u186f\tE\2\2\u186e"+
		"\u186a\3\2\2\2\u186e\u186c\3\2\2\2\u186f\u01d1\3\2\2\2\u1870\u1871\7\u015b"+
		"\2\2\u1871\u1874\5\u0342\u01a2\2\u1872\u1873\7\n\2\2\u1873\u1875\5\u0342"+
		"\u01a2\2\u1874\u1872\3\2\2\2\u1874\u1875\3\2\2\2\u1875\u187d\3\2\2\2\u1876"+
		"\u1877\7\u02c5\2\2\u1877\u187b\7\u0324\2\2\u1878\u187c\7\u02c3\2\2\u1879"+
		"\u187c\7\u02cd\2\2\u187a\u187c\7\u014e\2\2\u187b\u1878\3\2\2\2\u187b\u1879"+
		"\3\2\2\2\u187b\u187a\3\2\2\2\u187c\u187e\3\2\2\2\u187d\u1876\3\2\2\2\u187d"+
		"\u187e\3\2\2\2\u187e\u187f\3\2\2\2\u187f\u1880\7\b\2\2\u1880\u1881\7\u02db"+
		"\2\2\u1881\u1882\7\u0333\2\2\u1882\u1883\7\u01b7\2\2\u1883\u1884\7\u0324"+
		"\2\2\u1884\u1889\7\u031a\2\2\u1885\u1886\7\u0335\2\2\u1886\u1887\7\u01b6"+
		"\2\2\u1887\u1888\7\u0324\2\2\u1888\u188a\tF\2\2\u1889\u1885\3\2\2\2\u1889"+
		"\u188a\3\2\2\2\u188a\u188b\3\2\2\2\u188b\u18f9\7\u0334\2\2\u188c\u18fa"+
		"\7\u02ed\2\2\u188d\u188e\7D\2\2\u188e\u188f\7\u02a5\2\2\u188f\u1890\7"+
		"\u0333\2\2\u1890\u1891\7\u00e8\2\2\u1891\u18a2\7\u0324\2\2\u1892\u1894"+
		"\7\u0306\2\2\u1893\u1895\tG\2\2\u1894\u1893\3\2\2\2\u1894\u1895\3\2\2"+
		"\2\u1895\u1898\3\2\2\2\u1896\u1897\7\u010b\2\2\u1897\u1899\5\u0342\u01a2"+
		"\2\u1898\u1896\3\2\2\2\u1898\u1899\3\2\2\2\u1899\u18a3\3\2\2\2\u189a\u189b"+
		"\7\u010b\2\2\u189b\u189d\5\u0342\u01a2\2\u189c\u189e\7\u0306\2\2\u189d"+
		"\u189c\3\2\2\2\u189d\u189e\3\2\2\2\u189e\u18a0\3\2\2\2\u189f\u18a1\tG"+
		"\2\2\u18a0\u189f\3\2\2\2\u18a0\u18a1\3\2\2\2\u18a1\u18a3\3\2\2\2\u18a2"+
		"\u1892\3\2\2\2\u18a2\u189a\3\2\2\2\u18a3\u18b5\3\2\2\2\u18a4\u18a6\7\u0335"+
		"\2\2\u18a5\u18a4\3\2\2\2\u18a5\u18a6\3\2\2\2\u18a6\u18a7\3\2\2\2\u18a7"+
		"\u18a8\7\u0159\2\2\u18a8\u18a9\7\u0324\2\2\u18a9\u18b3\tH\2\2\u18aa\u18b1"+
		"\7\u00d2\2\2\u18ab\u18b2\7\u00ce\2\2\u18ac\u18b2\7\u0256\2\2\u18ad\u18ae"+
		"\7\u00ce\2\2\u18ae\u18b2\7\u0256\2\2\u18af\u18b0\7\u0256\2\2\u18b0\u18b2"+
		"\7\u00ce\2\2\u18b1\u18ab\3\2";
	private static final String _serializedATNSegment3 =
		"\2\2\u18b1\u18ac\3\2\2\2\u18b1\u18ad\3\2\2\2\u18b1\u18af\3\2\2\2\u18b2"+
		"\u18b4\3\2\2\2\u18b3\u18aa\3\2\2\2\u18b3\u18b4\3\2\2\2\u18b4\u18b6\3\2"+
		"\2\2\u18b5\u18a5\3\2\2\2\u18b5\u18b6\3\2\2\2\u18b6\u18bd\3\2\2\2\u18b7"+
		"\u18b9\7\u0335\2\2\u18b8\u18b7\3\2\2\2\u18b8\u18b9\3\2\2\2\u18b9\u18ba"+
		"\3\2\2\2\u18ba\u18bb\7\u01e6\2\2\u18bb\u18bc\7\u0324\2\2\u18bc\u18be\t"+
		"I\2\2\u18bd\u18b8\3\2\2\2\u18bd\u18be\3\2\2\2\u18be\u18c5\3\2\2\2\u18bf"+
		"\u18c1\7\u0335\2\2\u18c0\u18bf\3\2\2\2\u18c0\u18c1\3\2\2\2\u18c1\u18c2"+
		"\3\2\2\2\u18c2\u18c3\7\u01e5\2\2\u18c3\u18c4\7\u0324\2\2\u18c4\u18c6\7"+
		"\u031a\2\2\u18c5\u18c0\3\2\2\2\u18c5\u18c6\3\2\2\2\u18c6\u18c7\3\2\2\2"+
		"\u18c7\u18fa\7\u0334\2\2\u18c8\u18c9\7D\2\2\u18c9\u18ca\7\u0137\2\2\u18ca"+
		"\u18cb\7\u0333\2\2\u18cb\u18cc\7\u00e8\2\2\u18cc\u18dd\7\u0324\2\2\u18cd"+
		"\u18cf\7\u0306\2\2\u18ce\u18d0\tG\2\2\u18cf\u18ce\3\2\2\2\u18cf\u18d0"+
		"\3\2\2\2\u18d0\u18d3\3\2\2\2\u18d1\u18d2\7\u010b\2\2\u18d2\u18d4\5\u0342"+
		"\u01a2\2\u18d3\u18d1\3\2\2\2\u18d3\u18d4\3\2\2\2\u18d4\u18de\3\2\2\2\u18d5"+
		"\u18d6\7\u010b\2\2\u18d6\u18d8\5\u0342\u01a2\2\u18d7\u18d9\7\u0306\2\2"+
		"\u18d8\u18d7\3\2\2\2\u18d8\u18d9\3\2\2\2\u18d9\u18db\3\2\2\2\u18da\u18dc"+
		"\tG\2\2\u18db\u18da\3\2\2\2\u18db\u18dc\3\2\2\2\u18dc\u18de\3\2\2\2\u18dd"+
		"\u18cd\3\2\2\2\u18dd\u18d5\3\2\2\2\u18de\u18f0\3\2\2\2\u18df\u18e1\7\u0335"+
		"\2\2\u18e0\u18df\3\2\2\2\u18e0\u18e1\3\2\2\2\u18e1\u18e2\3\2\2\2\u18e2"+
		"\u18e3\7\u0159\2\2\u18e3\u18e4\7\u0324\2\2\u18e4\u18ee\tH\2\2\u18e5\u18ec"+
		"\7\u00d2\2\2\u18e6\u18ed\7\u00ce\2\2\u18e7\u18ed\7\u0256\2\2\u18e8\u18e9"+
		"\7\u00ce\2\2\u18e9\u18ed\7\u0256\2\2\u18ea\u18eb\7\u0256\2\2\u18eb\u18ed"+
		"\7\u00ce\2\2\u18ec\u18e6\3\2\2\2\u18ec\u18e7\3\2\2\2\u18ec\u18e8\3\2\2"+
		"\2\u18ec\u18ea\3\2\2\2\u18ed\u18ef\3\2\2\2\u18ee\u18e5\3\2\2\2\u18ee\u18ef"+
		"\3\2\2\2\u18ef\u18f1\3\2\2\2\u18f0\u18e0\3\2\2\2\u18f0\u18f1\3\2\2\2\u18f1"+
		"\u18f3\3\2\2\2\u18f2\u18f4\7\u0335\2\2\u18f3\u18f2\3\2\2\2\u18f3\u18f4"+
		"\3\2\2\2\u18f4\u18f5\3\2\2\2\u18f5\u18f6\7\u0280\2\2\u18f6\u18f7\7\u0324"+
		"\2\2\u18f7\u18f8\tJ\2\2\u18f8\u18fa\7\u0334\2\2\u18f9\u188c\3\2\2\2\u18f9"+
		"\u188d\3\2\2\2\u18f9\u18c8\3\2\2\2\u18fa\u01d3\3\2\2\2\u18fb\u18fc\7\u022a"+
		"\2\2\u18fc\u1900\5\u01d6\u00ec\2\u18fd\u18fe\7\u0309\2\2\u18fe\u1900\5"+
		"\u01d8\u00ed\2\u18ff\u18fb\3\2\2\2\u18ff\u18fd\3\2\2\2\u1900\u01d5\3\2"+
		"\2\2\u1901\u1902\7\u0324\2\2\u1902\u190d\7\u031c\2\2\u1903\u190d\7\u016b"+
		"\2\2\u1904\u190d\7\u017d\2\2\u1905\u190d\7j\2\2\u1906\u190d\7\u027a\2"+
		"\2\u1907\u1908\7\u028c\2\2\u1908\u190d\tK\2\2\u1909\u190d\7\u02d1\2\2"+
		"\u190a\u190b\7\u02e0\2\2\u190b\u190d\7\u031a\2\2\u190c\u1901\3\2\2\2\u190c"+
		"\u1903\3\2\2\2\u190c\u1904\3\2\2\2\u190c\u1905\3\2\2\2\u190c\u1906\3\2"+
		"\2\2\u190c\u1907\3\2\2\2\u190c\u1909\3\2\2\2\u190c\u190a\3\2\2\2\u190d"+
		"\u01d7\3\2\2\2\u190e\u190f\7\u0324\2\2\u190f\u1912\7\u031c\2\2\u1910\u1912"+
		"\7j\2\2\u1911\u190e\3\2\2\2\u1911\u1910\3\2\2\2\u1912\u01d9\3\2\2\2\u1913"+
		"\u1914\7\u0138\2\2\u1914\u1915\5\u031e\u0190\2\u1915\u01db\3\2\2\2\u1916"+
		"\u1917\7\u0159\2\2\u1917\u1918\5\u031e\u0190\2\u1918\u01dd\3\2\2\2\u1919"+
		"\u191a\tL\2\2\u191a\u01df\3\2\2\2\u191b\u191c\tM\2\2\u191c\u01e1\3\2\2"+
		"\2\u191d\u191e\tN\2\2\u191e\u01e3\3\2\2\2\u191f\u1920\7\u0142\2\2\u1920"+
		"\u1921\7\u0324\2\2\u1921\u1922\tO\2\2\u1922\u01e5\3\2\2\2\u1923\u1924"+
		"\7\u013a\2\2\u1924\u193d\5\u031e\u0190\2\u1925\u1926\7\u02eb\2\2\u1926"+
		"\u193d\5\u031e\u0190\2\u1927\u1928\7\u013f\2\2\u1928\u192b\7\u0324\2\2"+
		"\u1929\u192c\5\u0342\u01a2\2\u192a\u192c\7\u031c\2\2\u192b\u1929\3\2\2"+
		"\2\u192b\u192a\3\2\2\2\u192c\u193d\3\2\2\2\u192d\u192e\7\u013e\2\2\u192e"+
		"\u1931\7\u0324\2\2\u192f\u1932\5\u0342\u01a2\2\u1930\u1932\7\u031c\2\2"+
		"\u1931\u192f\3\2\2\2\u1931\u1930\3\2\2\2\u1932\u193d\3\2\2\2\u1933\u1934"+
		"\7\u01f9\2\2\u1934\u1935\7\u0324\2\2\u1935\u193d\5\u031e\u0190\2\u1936"+
		"\u1937\7\u02e6\2\2\u1937\u1938\7\u0324\2\2\u1938\u193d\5\u031e\u0190\2"+
		"\u1939\u193a\7\u02ee\2\2\u193a\u193b\7\u0324\2\2\u193b\u193d\7\u031a\2"+
		"\2\u193c\u1923\3\2\2\2\u193c\u1925\3\2\2\2\u193c\u1927\3\2\2\2\u193c\u192d"+
		"\3\2\2\2\u193c\u1933\3\2\2\2\u193c\u1936\3\2\2\2\u193c\u1939\3\2\2\2\u193d"+
		"\u01e7\3\2\2\2\u193e\u193f\7\u00f5\2\2\u193f\u1940\7N\2\2\u1940\u1941"+
		"\7\u0324\2\2\u1941\u1946\5\u0342\u01a2\2\u1942\u1946\7j\2\2\u1943\u1946"+
		"\7\u02d1\2\2\u1944\u1946\7\u027a\2\2\u1945\u193e\3\2\2\2\u1945\u1942\3"+
		"\2\2\2\u1945\u1943\3\2\2\2\u1945\u1944\3\2\2\2\u1946\u01e9\3\2\2\2\u1947"+
		"\u1948\7\u01f0\2\2\u1948\u1949\5\u031e\u0190\2\u1949\u01eb\3\2\2\2\u194a"+
		"\u194b\7\u0225\2\2\u194b\u194c\tP\2\2\u194c\u01ed\3\2\2\2\u194d\u194e"+
		"\7\u0261\2\2\u194e\u1954\tQ\2\2\u194f\u1950\7\u02e2\2\2\u1950\u1954\5"+
		"\u031e\u0190\2\u1951\u1952\7\u0224\2\2\u1952\u1954\tR\2\2\u1953\u194d"+
		"\3\2\2\2\u1953\u194f\3\2\2\2\u1953\u1951\3\2\2\2\u1954\u01ef\3\2\2\2\u1955"+
		"\u195c\7\u0155\2\2\u1956\u195c\7\u014c\2\2\u1957\u195c\7\u01fb\2\2\u1958"+
		"\u195c\7\u015c\2\2\u1959\u195a\7\u0190\2\2\u195a\u195c\5\u031e\u0190\2"+
		"\u195b\u1955\3\2\2\2\u195b\u1956\3\2\2\2\u195b\u1957\3\2\2\2\u195b\u1958"+
		"\3\2\2\2\u195b\u1959\3\2\2\2\u195c\u01f1\3\2\2\2\u195d\u195e\7\u00d7\2"+
		"\2\u195e\u1965\5\u031e\u0190\2\u195f\u1960\7\u0257\2\2\u1960\u1965\5\u031e"+
		"\u0190\2\u1961\u1962\7\u01e2\2\2\u1962\u1963\7\u0324\2\2\u1963\u1965\5"+
		"\u031e\u0190\2\u1964\u195d\3\2\2\2\u1964\u195f\3\2\2\2\u1964\u1961\3\2"+
		"\2\2\u1965\u01f3\3\2\2\2\u1966\u1967\7\u00da\2\2\u1967\u197c\5\u031e\u0190"+
		"\2\u1968\u1969\7\u00db\2\2\u1969\u197c\5\u031e\u0190\2\u196a\u196b\7\u00dc"+
		"\2\2\u196b\u197c\5\u031e\u0190\2\u196c\u196d\7\u00dd\2\2\u196d\u197c\5"+
		"\u031e\u0190\2\u196e\u196f\7\u00e2\2\2\u196f\u197c\5\u031e\u0190\2\u1970"+
		"\u1971\7\u011b\2\2\u1971\u1972\7\u0324\2\2\u1972\u197c\7\u031a\2\2\u1973"+
		"\u1974\7\u011d\2\2\u1974\u197c\5\u031e\u0190\2\u1975\u1976\7\u0214\2\2"+
		"\u1976\u197c\5\u031e\u0190\2\u1977\u1978\7\u0250\2\2\u1978\u197c\5\u031e"+
		"\u0190\2\u1979\u197a\7\u0262\2\2\u197a\u197c\5\u031e\u0190\2\u197b\u1966"+
		"\3\2\2\2\u197b\u1968\3\2\2\2\u197b\u196a\3\2\2\2\u197b\u196c\3\2\2\2\u197b"+
		"\u196e\3\2\2\2\u197b\u1970\3\2\2\2\u197b\u1973\3\2\2\2\u197b\u1975\3\2"+
		"\2\2\u197b\u1977\3\2\2\2\u197b\u1979\3\2\2\2\u197c\u01f5\3\2\2\2\u197d"+
		"\u197e\7\u02d8\2\2\u197e\u197f\7\u0324\2\2\u197f\u1980\7\u031a\2\2\u1980"+
		"\u1981\tS\2\2\u1981\u01f7\3\2\2\2\u1982\u1983\7\u008d\2\2\u1983\u1984"+
		"\7\u00d0\2\2\u1984\u1989\7\u031a\2\2\u1985\u1986\7\u008d\2\2\u1986\u1989"+
		"\7\u0195\2\2\u1987\u1989\7\u0203\2\2\u1988\u1982\3\2\2\2\u1988\u1985\3"+
		"\2\2\2\u1988\u1987\3\2\2\2\u1989\u01f9\3\2\2\2\u198a\u198d\7U\2\2\u198b"+
		"\u198c\7S\2\2\u198c\u198e\7>\2\2\u198d\u198b\3\2\2\2\u198d\u198e\3\2\2"+
		"\2\u198e\u199f\3\2\2\2\u198f\u1994\5\u01fc\u00ff\2\u1990\u1991\7\u0335"+
		"\2\2\u1991\u1993\5\u01fc\u00ff\2\u1992\u1990\3\2\2\2\u1993\u1996\3\2\2"+
		"\2\u1994\u1992\3\2\2\2\u1994\u1995\3\2\2\2\u1995\u19a0\3\2\2\2\u1996\u1994"+
		"\3\2\2\2\u1997\u199c\5\u01fe\u0100\2\u1998\u1999\7\u0335\2\2\u1999\u199b"+
		"\5\u01fe\u0100\2\u199a\u1998\3\2\2\2\u199b\u199e\3\2\2\2\u199c\u199a\3"+
		"\2\2\2\u199c\u199d\3\2\2\2\u199d\u19a0\3\2\2\2\u199e\u199c\3\2\2\2\u199f"+
		"\u198f\3\2\2\2\u199f\u1997\3\2\2\2\u19a0\u01fb\3\2\2\2\u19a1\u19a2\5\u0342"+
		"\u01a2\2\u19a2\u19a3\7l\2\2\u19a3\u19a4\5\u0310\u0189\2\u19a4\u01fd\3"+
		"\2\2\2\u19a5\u19a6\5\u0342\u01a2\2\u19a6\u19a7\7\u0330\2\2\u19a7\u19a9"+
		"\3\2\2\2\u19a8\u19a5\3\2\2\2\u19a8\u19a9\3\2\2\2\u19a9\u19aa\3\2\2\2\u19aa"+
		"\u19ab\5\u0342\u01a2\2\u19ab\u19ac\7\u0330\2\2\u19ac\u19ad\5\u0342\u01a2"+
		"\2\u19ad\u01ff\3\2\2\2\u19ae\u19b1\7\u00a7\2\2\u19af\u19b0\7S\2\2\u19b0"+
		"\u19b2\7>\2\2\u19b1\u19af\3\2\2\2\u19b1\u19b2\3\2\2\2\u19b2\u19b3\3\2"+
		"\2\2\u19b3\u19b8\5\u0310\u0189\2\u19b4\u19b5\7\u0335\2\2\u19b5\u19b7\5"+
		"\u0310\u0189\2\u19b6\u19b4\3\2\2\2\u19b7\u19ba\3\2\2\2\u19b8\u19b6\3\2"+
		"\2\2\u19b8\u19b9\3\2\2\2\u19b9\u19bb\3\2\2\2\u19ba\u19b8\3\2\2\2\u19bb"+
		"\u19bf\7l\2\2\u19bc\u19c0\7*\2\2\u19bd\u19be\7\4\2\2\u19be\u19c0\7\u02a4"+
		"\2\2\u19bf\u19bc\3\2\2\2\u19bf\u19bd\3\2\2\2\u19c0\u0201\3\2\2\2\u19c1"+
		"\u19c2\7\u02f0\2\2\u19c2\u19c3\5\u0310\u0189\2\u19c3\u19c4\5\u0204\u0103"+
		"\2\u19c4\u0203\3\2\2\2\u19c5\u19c6\7H\2\2\u19c6\u19c8\5\u0336\u019c\2"+
		"\u19c7\u19c9\5\u0322\u0192\2\u19c8\u19c7\3\2\2\2\u19c8\u19c9\3\2\2\2\u19c9"+
		"\u19e0\3\2\2\2\u19ca\u19cb\7@\2\2\u19cb\u19cc\7\u01f6\2\2\u19cc\u19cf"+
		"\5\u0342\u01a2\2\u19cd\u19ce\7\u0330\2\2\u19ce\u19d0\5\u0342\u01a2\2\u19cf"+
		"\u19cd\3\2\2\2\u19cf\u19d0\3\2\2\2\u19d0\u19e0\3\2\2\2\u19d1\u19d2\7\b"+
		"\2\2\u19d2\u19d3\7\u009f\2\2\u19d3\u19d4\7\u0333\2\2\u19d4\u19d5\5\u026c"+
		"\u0137\2\u19d5\u19dd\7\u0334\2\2\u19d6\u19d7\7\u00b8\2\2\u19d7\u19d8\7"+
		"\u0333\2\2\u19d8\u19d9\7\u01e3\2\2\u19d9\u19da\7\u0324\2\2\u19da\u19db"+
		"\5\u031e\u0190\2\u19db\u19dc\7\u0334\2\2\u19dc\u19de\3\2\2\2\u19dd\u19d6"+
		"\3\2\2\2\u19dd\u19de\3\2\2\2\u19de\u19e0\3\2\2\2\u19df\u19c5\3\2\2\2\u19df"+
		"\u19ca\3\2\2\2\u19df\u19d1\3\2\2\2\u19e0\u0205\3\2\2\2\u19e1\u19e4\5\u0208"+
		"\u0105\2\u19e2\u19e4\5\u020a\u0106\2\u19e3\u19e1\3\2\2\2\u19e3\u19e2\3"+
		"\2\2\2\u19e4\u0207\3\2\2\2\u19e5\u19e6\7o\2\2\u19e6\u19e7\7\u0333\2\2"+
		"\u19e7\u19e8\5\u0342\u01a2\2\u19e8\u19e9\7\u0335\2\2\u19e9\u19ea\7\u031c"+
		"\2\2\u19ea\u19eb\7\u0334\2\2\u19eb\u0209\3\2\2\2\u19ec\u19ed\7n\2\2\u19ed"+
		"\u19ee\7\u0333\2\2\u19ee\u19ef\7\u031c\2\2\u19ef\u19f0\7\u0335\2\2\u19f0"+
		"\u19f1\7\u031c\2\2\u19f1\u19f2\7\u0334\2\2\u19f2\u19f4\7\u0330\2\2\u19f3"+
		"\u19f5\5\u0342\u01a2\2\u19f4\u19f3\3\2\2\2\u19f4\u19f5\3\2\2\2\u19f5\u19f6"+
		"\3\2\2\2\u19f6\u19f8\7\u0330\2\2\u19f7\u19f9\5\u0342\u01a2\2\u19f8\u19f7"+
		"\3\2\2\2\u19f8\u19f9\3\2\2\2\u19f9\u19fa\3\2\2\2\u19fa\u19fb\7\u0330\2"+
		"\2\u19fb\u19fc\5\u0342\u01a2\2\u19fc\u020b\3\2\2\2\u19fd\u19fe\7-\2\2"+
		"\u19fe\u1a00\7\u0319\2\2\u19ff\u1a01\7\b\2\2\u1a00\u19ff\3\2\2\2\u1a00"+
		"\u1a01\3\2\2\2\u1a01\u1a02\3\2\2\2\u1a02\u1a03\7\u009f\2\2\u1a03\u1a04"+
		"\7\u0333\2\2\u1a04\u1a05\5\u026c\u0137\2\u1a05\u1a06\7\u0334\2\2\u1a06"+
		"\u1a22\3\2\2\2\u1a07\u1a08\7-\2\2\u1a08\u1a0d\5\u0266\u0134\2\u1a09\u1a0a"+
		"\7\u0335\2\2\u1a0a\u1a0c\5\u0266\u0134\2\u1a0b\u1a09\3\2\2\2\u1a0c\u1a0f"+
		"\3\2\2\2\u1a0d\u1a0b\3\2\2\2\u1a0d\u1a0e\3\2\2\2\u1a0e\u1a22\3\2\2\2\u1a0f"+
		"\u1a0d\3\2\2\2\u1a10\u1a11\7-\2\2\u1a11\u1a13\7\u0319\2\2\u1a12\u1a14"+
		"\7\b\2\2\u1a13\u1a12\3\2\2\2\u1a13\u1a14\3\2\2\2\u1a14\u1a15\3\2\2\2\u1a15"+
		"\u1a22\5\u0268\u0135\2\u1a16\u1a17\7\u00b8\2\2\u1a17\u1a18\7\u030e\2\2"+
		"\u1a18\u1a19\7\u0333\2\2\u1a19\u1a1b\7\u031c\2\2\u1a1a\u1a1c\7\u0335\2"+
		"\2\u1a1b\u1a1a\3\2\2\2\u1a1b\u1a1c\3\2\2\2\u1a1c\u1a1d\3\2\2\2\u1a1d\u1a1e"+
		"\7\b\2\2\u1a1e\u1a1f\5\u0342\u01a2\2\u1a1f\u1a20\7\u0334\2\2\u1a20\u1a22"+
		"\3\2\2\2\u1a21\u19fd\3\2\2\2\u1a21\u1a07\3\2\2\2\u1a21\u1a10\3\2\2\2\u1a21"+
		"\u1a16\3\2\2\2\u1a22\u020d\3\2\2\2\u1a23\u1a25\tT\2\2\u1a24\u1a26\7\u0187"+
		"\2\2\u1a25\u1a24\3\2\2\2\u1a25\u1a26\3\2\2\2\u1a26\u1a27\3\2\2\2\u1a27"+
		"\u1a4e\5\u031c\u018f\2\u1a28\u1a29\7-\2\2\u1a29\u1a2b\5\u031c\u018f\2"+
		"\u1a2a\u1a2c\tU\2\2\u1a2b\u1a2a\3\2\2\2\u1a2b\u1a2c\3\2\2\2\u1a2c\u1a2e"+
		"\3\2\2\2\u1a2d\u1a2f\7\u0293\2\2\u1a2e\u1a2d\3\2\2\2\u1a2e\u1a2f\3\2\2"+
		"\2\u1a2f\u1a30\3\2\2\2\u1a30\u1a31\5\u0288\u0145\2\u1a31\u1a4e\3\2\2\2"+
		"\u1a32\u1a3c\7A\2\2\u1a33\u1a3a\7\u01fe\2\2\u1a34\u1a3a\7\u023e\2\2\u1a35"+
		"\u1a3a\7\u017a\2\2\u1a36\u1a3a\7\u01b0\2\2\u1a37\u1a38\tV\2\2\u1a38\u1a3a"+
		"\5\u0290\u0149\2\u1a39\u1a33\3\2\2\2\u1a39\u1a34\3\2\2\2\u1a39\u1a35\3"+
		"\2\2\2\u1a39\u1a36\3\2\2\2\u1a39\u1a37\3\2\2\2\u1a39\u1a3a\3\2\2\2\u1a3a"+
		"\u1a3b\3\2\2\2\u1a3b\u1a3d\7H\2\2\u1a3c\u1a39\3\2\2\2\u1a3c\u1a3d\3\2"+
		"\2\2\u1a3d\u1a3f\3\2\2\2\u1a3e\u1a40\7\u0187\2\2\u1a3f\u1a3e\3\2\2\2\u1a3f"+
		"\u1a40\3\2\2\2\u1a40\u1a41\3\2\2\2\u1a41\u1a4b\5\u031c\u018f\2\u1a42\u1a43"+
		"\7Y\2\2\u1a43\u1a48\7\u0319\2\2\u1a44\u1a45\7\u0335\2\2\u1a45\u1a47\7"+
		"\u0319\2\2\u1a46\u1a44\3\2\2\2\u1a47\u1a4a\3\2\2\2\u1a48\u1a46\3\2\2\2"+
		"\u1a48\u1a49\3\2\2\2\u1a49\u1a4c\3\2\2\2\u1a4a\u1a48\3\2\2\2\u1a4b\u1a42"+
		"\3\2\2\2\u1a4b\u1a4c\3\2\2\2\u1a4c\u1a4e\3\2\2\2\u1a4d\u1a23\3\2\2\2\u1a4d"+
		"\u1a28\3\2\2\2\u1a4d\u1a32\3\2\2\2\u1a4e\u020f\3\2\2\2\u1a4f\u1a50\7\13"+
		"\2\2\u1a50\u1a51\7*\2\2\u1a51\u1a5e\5\u0342\u01a2\2\u1a52\u1a5b\7\u025a"+
		"\2\2\u1a53\u1a55\7\u0335\2\2\u1a54\u1a53\3\2\2\2\u1a54\u1a55\3\2\2\2\u1a55"+
		"\u1a56\3\2\2\2\u1a56\u1a57\tW\2\2\u1a57\u1a58\7\u0324\2\2\u1a58\u1a5a"+
		"\7\u031c\2\2\u1a59\u1a54\3\2\2\2\u1a5a\u1a5d\3\2\2\2\u1a5b\u1a59\3\2\2"+
		"\2\u1a5b\u1a5c\3\2\2\2\u1a5c\u1a5f\3\2\2\2\u1a5d\u1a5b\3\2\2\2\u1a5e\u1a52"+
		"\3\2\2\2\u1a5e\u1a5f\3\2\2\2\u1a5f\u1a68\3\2\2\2\u1a60\u1a62\7\u0335\2"+
		"\2\u1a61\u1a60\3\2\2\2\u1a61\u1a62\3\2\2\2\u1a62\u1a63\3\2\2\2\u1a63\u1a64"+
		"\tW\2\2\u1a64\u1a65\7\u0324\2\2\u1a65\u1a67\7\u031c\2\2\u1a66\u1a61\3"+
		"\2\2\2\u1a67\u1a6a\3\2\2\2\u1a68\u1a66\3\2\2\2\u1a68\u1a69\3\2\2\2\u1a69"+
		"\u1a82\3\2\2\2\u1a6a\u1a68\3\2\2\2\u1a6b\u1a70\7\u00a3\2\2\u1a6c\u1a6e"+
		"\7\u0335\2\2\u1a6d\u1a6c\3\2\2\2\u1a6d\u1a6e\3\2\2\2\u1a6e\u1a6f\3\2\2"+
		"\2\u1a6f\u1a71\5\u0342\u01a2\2\u1a70\u1a6d\3\2\2\2\u1a71\u1a72\3\2\2\2"+
		"\u1a72\u1a70\3\2\2\2\u1a72\u1a73\3\2\2\2\u1a73\u1a83\3\2\2\2\u1a74\u1a7e"+
		"\7\u00a3\2\2\u1a75\u1a77\7\u0335\2\2\u1a76\u1a75\3\2\2\2\u1a76\u1a77\3"+
		"\2\2\2\u1a77\u1a78\3\2\2\2\u1a78\u1a79\tX\2\2\u1a79\u1a7c\7\u0324\2\2"+
		"\u1a7a\u1a7d\7\u031c\2\2\u1a7b\u1a7d\5\u0342\u01a2\2\u1a7c\u1a7a\3\2\2"+
		"\2\u1a7c\u1a7b\3\2\2\2\u1a7d\u1a7f\3\2\2\2\u1a7e\u1a76\3\2\2\2\u1a7f\u1a80"+
		"\3\2\2\2\u1a80\u1a7e\3\2\2\2\u1a80\u1a81\3\2\2\2\u1a81\u1a83\3\2\2\2\u1a82"+
		"\u1a6b\3\2\2\2\u1a82\u1a74\3\2\2\2\u1a83\u1aa5\3\2\2\2\u1a84\u1a85\7\u01ef"+
		"\2\2\u1a85\u1a8a\7\u00a3\2\2\u1a86\u1a88\7\u0335\2\2\u1a87\u1a86\3\2\2"+
		"\2\u1a87\u1a88\3\2\2\2\u1a88\u1a89\3\2\2\2\u1a89\u1a8b\5\u0342\u01a2\2"+
		"\u1a8a\u1a87\3\2\2\2\u1a8b\u1a8c\3\2\2\2\u1a8c\u1a8a\3\2\2\2\u1a8c\u1a8d"+
		"\3\2\2\2\u1a8d\u1a8f\3\2\2\2\u1a8e\u1a84\3\2\2\2\u1a8f\u1a90\3\2\2\2\u1a90"+
		"\u1a8e\3\2\2\2\u1a90\u1a91\3\2\2\2\u1a91\u1aa6\3\2\2\2\u1a92\u1a93\7\u01ef"+
		"\2\2\u1a93\u1a9d\7\u00a3\2\2\u1a94\u1a96\7\u0335\2\2\u1a95\u1a94\3\2\2"+
		"\2\u1a95\u1a96\3\2\2\2\u1a96\u1a97\3\2\2\2\u1a97\u1a98\tX\2\2\u1a98\u1a9b"+
		"\7\u0324\2\2\u1a99\u1a9c\7\u031c\2\2\u1a9a\u1a9c\5\u0342\u01a2\2\u1a9b"+
		"\u1a99\3\2\2\2\u1a9b\u1a9a\3\2\2\2\u1a9c\u1a9e\3\2\2\2\u1a9d\u1a95\3\2"+
		"\2\2\u1a9e\u1a9f\3\2\2\2\u1a9f\u1a9d\3\2\2\2\u1a9f\u1aa0\3\2\2\2\u1aa0"+
		"\u1aa2\3\2\2\2\u1aa1\u1a92\3\2\2\2\u1aa2\u1aa3\3\2\2\2\u1aa3\u1aa1\3\2"+
		"\2\2\u1aa3\u1aa4\3\2\2\2\u1aa4\u1aa6\3\2\2\2\u1aa5\u1a8e\3\2\2\2\u1aa5"+
		"\u1aa1\3\2\2\2\u1aa5\u1aa6\3\2\2\2\u1aa6\u1b47\3\2\2\2\u1aa7\u1b44\7\u00b8"+
		"\2\2\u1aa8\u1aaa\7\u0335\2\2\u1aa9\u1aa8\3\2\2\2\u1aa9\u1aaa\3\2\2\2\u1aaa"+
		"\u1aab\3\2\2\2\u1aab\u1b43\7\u014a\2\2\u1aac\u1aae\7\u0335\2\2\u1aad\u1aac"+
		"\3\2\2\2\u1aad\u1aae\3\2\2\2\u1aae\u1aaf\3\2\2\2\u1aaf\u1b43\7\u012a\2"+
		"\2\u1ab0\u1ab2\7\u0335\2\2\u1ab1\u1ab0\3\2\2\2\u1ab1\u1ab2\3\2\2\2\u1ab2"+
		"\u1ab3\3\2\2\2\u1ab3\u1b43\tY\2\2\u1ab4\u1ab6\7\u0335\2\2\u1ab5\u1ab4"+
		"\3\2\2\2\u1ab5\u1ab6\3\2\2\2\u1ab6\u1ab7\3\2\2\2\u1ab7\u1ab8\7\u0145\2"+
		"\2\u1ab8\u1abb\7\u0324\2\2\u1ab9\u1abc\7\u031c\2\2\u1aba\u1abc\5\u0342"+
		"\u01a2\2\u1abb\u1ab9\3\2\2\2\u1abb\u1aba\3\2\2\2\u1abc\u1b43\3\2\2\2\u1abd"+
		"\u1abf\7\u0335\2\2\u1abe\u1abd\3\2\2\2\u1abe\u1abf\3\2\2\2\u1abf\u1ac0"+
		"\3\2\2\2\u1ac0\u1ac1\7\u01f6\2\2\u1ac1\u1ac2\7\u0324\2\2\u1ac2\u1b43\5"+
		"\u0342\u01a2\2\u1ac3\u1ac5\7\u0335\2\2\u1ac4\u1ac3\3\2\2\2\u1ac4\u1ac5"+
		"\3\2\2\2\u1ac5\u1ac6\3\2\2\2\u1ac6\u1b43\7\u012f\2\2\u1ac7\u1ac9\7\u0335"+
		"\2\2\u1ac8\u1ac7\3\2\2\2\u1ac8\u1ac9\3\2\2\2\u1ac9\u1aca\3\2\2\2\u1aca"+
		"\u1b43\7\u0172\2\2\u1acb\u1acd\7\u0335\2\2\u1acc\u1acb\3\2\2\2\u1acc\u1acd"+
		"\3\2\2\2\u1acd\u1ada\3\2\2\2\u1ace\u1acf\7\u0164\2\2\u1acf\u1ad2\7\u0324"+
		"\2\2\u1ad0\u1ad3\7\u031c\2\2\u1ad1\u1ad3\5\u0342\u01a2\2\u1ad2\u1ad0\3"+
		"\2\2\2\u1ad2\u1ad1\3\2\2\2\u1ad3\u1adb\3\2\2\2\u1ad4\u1ad5\7\u027b\2\2"+
		"\u1ad5\u1ad8\7\u0324\2\2\u1ad6\u1ad9\7\u031a\2\2\u1ad7\u1ad9\5\u0342\u01a2"+
		"\2\u1ad8\u1ad6\3\2\2\2\u1ad8\u1ad7\3\2\2\2\u1ad9\u1adb\3\2\2\2\u1ada\u1ace"+
		"\3\2\2\2\u1ada\u1ad4\3\2\2\2\u1adb\u1b43\3\2\2\2\u1adc\u1ade\7\u0335\2"+
		"\2\u1add\u1adc\3\2\2\2\u1add\u1ade\3\2\2\2\u1ade\u1adf\3\2\2\2\u1adf\u1b43"+
		"\tZ\2\2\u1ae0\u1ae2\7\u0335\2\2\u1ae1\u1ae0\3\2\2\2\u1ae1\u1ae2\3\2\2"+
		"\2\u1ae2\u1ae3\3\2\2\2\u1ae3\u1b43\t[\2\2\u1ae4\u1ae6\7\u0335\2\2\u1ae5"+
		"\u1ae4\3\2\2\2\u1ae5\u1ae6\3\2\2\2\u1ae6\u1ae7\3\2\2\2\u1ae7\u1b43\t\\"+
		"\2\2\u1ae8\u1aea\7\u0335\2\2\u1ae9\u1ae8\3\2\2\2\u1ae9\u1aea\3\2\2\2\u1aea"+
		"\u1aeb\3\2\2\2\u1aeb\u1aec\7\u01dd\2\2\u1aec\u1aef\7\u0324\2\2\u1aed\u1af0"+
		"\7\u031c\2\2\u1aee\u1af0\5\u0342\u01a2\2\u1aef\u1aed\3\2\2\2\u1aef\u1aee"+
		"\3\2\2\2\u1af0\u1b43\3\2\2\2\u1af1\u1af3\7\u0335\2\2\u1af2\u1af1\3\2\2"+
		"\2\u1af2\u1af3\3\2\2\2\u1af3\u1af4\3\2\2\2\u1af4\u1af5\7\u01de\2\2\u1af5"+
		"\u1af6\7\u0324\2\2\u1af6\u1b43\7\u031c\2\2\u1af7\u1af9\7\u0335\2\2\u1af8"+
		"\u1af7\3\2\2\2\u1af8\u1af9\3\2\2\2\u1af9\u1afa\3\2\2\2\u1afa\u1afb\7\u00fe"+
		"\2\2\u1afb\u1afe\7\u0324\2\2\u1afc\u1aff\7\u031a\2\2\u1afd\u1aff\5\u0342"+
		"\u01a2\2\u1afe\u1afc\3\2\2\2\u1afe\u1afd\3\2\2\2\u1aff\u1b43\3\2\2\2\u1b00"+
		"\u1b02\7\u0335\2\2\u1b01\u1b00\3\2\2\2\u1b01\u1b02\3\2\2\2\u1b02\u1b03"+
		"\3\2\2\2\u1b03\u1b04\7\u0102\2\2\u1b04\u1b07\7\u0324\2\2\u1b05\u1b08\7"+
		"\u031a\2\2\u1b06\u1b08\5\u0342\u01a2\2\u1b07\u1b05\3\2\2\2\u1b07\u1b06"+
		"\3\2\2\2\u1b08\u1b43\3\2\2\2\u1b09\u1b0b\7\u0335\2\2\u1b0a\u1b09\3\2\2"+
		"\2\u1b0a\u1b0b\3\2\2\2\u1b0b\u1b0c\3\2\2\2\u1b0c\u1b0d\7\u01da\2\2\u1b0d"+
		"\u1b10\7\u0324\2\2\u1b0e\u1b11\7\u031a\2\2\u1b0f\u1b11\5\u0342\u01a2\2"+
		"\u1b10\u1b0e\3\2\2\2\u1b10\u1b0f\3\2\2\2\u1b11\u1b43\3\2\2\2\u1b12\u1b14"+
		"\7\u0335\2\2\u1b13\u1b12\3\2\2\2\u1b13\u1b14\3\2\2\2\u1b14\u1b15\3\2\2"+
		"\2\u1b15\u1b43\t]\2\2\u1b16\u1b18\7\u0335\2\2\u1b17\u1b16\3\2\2\2\u1b17"+
		"\u1b18\3\2\2\2\u1b18\u1b19\3\2\2\2\u1b19\u1b43\t^\2\2\u1b1a\u1b1c\7\u0335"+
		"\2\2\u1b1b\u1b1a\3\2\2\2\u1b1b\u1b1c\3\2\2\2\u1b1c\u1b1d\3\2\2\2\u1b1d"+
		"\u1b43\7\u0277\2\2\u1b1e\u1b20\7\u0335\2\2\u1b1f\u1b1e\3\2\2\2\u1b1f\u1b20"+
		"\3\2\2\2\u1b20\u1b21\3\2\2\2\u1b21\u1b24\7\u02c8\2\2\u1b22\u1b23\7\u0324"+
		"\2\2\u1b23\u1b25\7\u031a\2\2\u1b24\u1b22\3\2\2\2\u1b24\u1b25\3\2\2\2\u1b25"+
		"\u1b43\3\2\2\2\u1b26\u1b28\7\u0335\2\2\u1b27\u1b26\3\2\2\2\u1b27\u1b28"+
		"\3\2\2\2\u1b28\u1b29\3\2\2\2\u1b29\u1b43\t_\2\2\u1b2a\u1b2c\7\u0335\2"+
		"\2\u1b2b\u1b2a\3\2\2\2\u1b2b\u1b2c\3\2\2\2\u1b2c\u1b2d\3\2\2\2\u1b2d\u1b43"+
		"\t`\2\2\u1b2e\u1b30\7\u0335\2\2\u1b2f\u1b2e\3\2\2\2\u1b2f\u1b30\3\2\2"+
		"\2\u1b30\u1b31\3\2\2\2\u1b31\u1b32\7\u0159\2\2\u1b32\u1b33\7\u0333\2\2"+
		"\u1b33\u1b34\7\u00d2\2\2\u1b34\u1b35\7\u0324\2\2\u1b35\u1b36\t;\2\2\u1b36"+
		"\u1b37\7\u0335\2\2\u1b37\u1b38\7\u02a4\2\2\u1b38\u1b39\7\u010b\2\2\u1b39"+
		"\u1b40\7\u0324\2\2\u1b3a\u1b41\5\u0342\u01a2\2\u1b3b\u1b3c\7\u02a4\2\2"+
		"\u1b3c\u1b3d\7\u00e4\2\2\u1b3d\u1b3e\7\\\2\2\u1b3e\u1b3f\7\u0324\2\2\u1b3f"+
		"\u1b41\5\u0342\u01a2\2\u1b40\u1b3a\3\2\2\2\u1b40\u1b3b\3\2\2\2\u1b41\u1b43"+
		"\3\2\2\2\u1b42\u1aa9\3\2\2\2\u1b42\u1aad\3\2\2\2\u1b42\u1ab1\3\2\2\2\u1b42"+
		"\u1ab5\3\2\2\2\u1b42\u1abe\3\2\2\2\u1b42\u1ac4\3\2\2\2\u1b42\u1ac8\3\2"+
		"\2\2\u1b42\u1acc\3\2\2\2\u1b42\u1add\3\2\2\2\u1b42\u1ae1\3\2\2\2\u1b42"+
		"\u1ae5\3\2\2\2\u1b42\u1ae9\3\2\2\2\u1b42\u1af2\3\2\2\2\u1b42\u1af8\3\2"+
		"\2\2\u1b42\u1b01\3\2\2\2\u1b42\u1b0a\3\2\2\2\u1b42\u1b13\3\2\2\2\u1b42"+
		"\u1b17\3\2\2\2\u1b42\u1b1b\3\2\2\2\u1b42\u1b1f\3\2\2\2\u1b42\u1b27\3\2"+
		"\2\2\u1b42\u1b2b\3\2\2\2\u1b42\u1b2f\3\2\2\2\u1b43\u1b46\3\2\2\2\u1b44"+
		"\u1b42\3\2\2\2\u1b44\u1b45\3\2\2\2\u1b45\u1b48\3\2\2\2\u1b46\u1b44\3\2"+
		"\2\2\u1b47\u1aa7\3\2\2\2\u1b47\u1b48\3\2\2\2\u1b48\u0211\3\2\2\2\u1b49"+
		"\u1b4a\7\13\2\2\u1b4a\u1b4b\7\u01c0\2\2\u1b4b\u1b63\5\u0342\u01a2\2\u1b4c"+
		"\u1b51\7\u00a3\2\2\u1b4d\u1b4f\7\u0335\2\2\u1b4e\u1b4d\3\2\2\2\u1b4e\u1b4f"+
		"\3\2\2\2\u1b4f\u1b50\3\2\2\2\u1b50\u1b52\5\u0342\u01a2\2\u1b51\u1b4e\3"+
		"\2\2\2\u1b52\u1b53\3\2\2\2\u1b53\u1b51\3\2\2\2\u1b53\u1b54\3\2\2\2\u1b54"+
		"\u1b64\3\2\2\2\u1b55\u1b5f\7\u00a3\2\2\u1b56\u1b58\7\u0335\2\2\u1b57\u1b56"+
		"\3\2\2\2\u1b57\u1b58\3\2\2\2\u1b58\u1b59\3\2\2\2\u1b59\u1b5a\tX\2\2\u1b5a"+
		"\u1b5d\7\u0324\2\2\u1b5b\u1b5e\7\u031c\2\2\u1b5c\u1b5e\5\u0342\u01a2\2"+
		"\u1b5d\u1b5b\3\2\2\2\u1b5d\u1b5c\3\2\2\2\u1b5e\u1b60\3\2\2\2\u1b5f\u1b57"+
		"\3\2\2\2\u1b60\u1b61\3\2\2\2\u1b61\u1b5f\3\2\2\2\u1b61\u1b62\3\2\2\2\u1b62"+
		"\u1b64\3\2\2\2\u1b63\u1b4c\3\2\2\2\u1b63\u1b55\3\2\2\2\u1b64\u1b86\3\2"+
		"\2\2\u1b65\u1b66\7\u01ef\2\2\u1b66\u1b6b\7\u00a3\2\2\u1b67\u1b69\7\u0335"+
		"\2\2\u1b68\u1b67\3\2\2\2\u1b68\u1b69\3\2\2\2\u1b69\u1b6a\3\2\2\2\u1b6a"+
		"\u1b6c\5\u0342\u01a2\2\u1b6b\u1b68\3\2\2\2\u1b6c\u1b6d\3\2\2\2\u1b6d\u1b6b"+
		"\3\2\2\2\u1b6d\u1b6e\3\2\2\2\u1b6e\u1b70\3\2\2\2\u1b6f\u1b65\3\2\2\2\u1b70"+
		"\u1b71\3\2\2\2\u1b71\u1b6f\3\2\2\2\u1b71\u1b72\3\2\2\2\u1b72\u1b87\3\2"+
		"\2\2\u1b73\u1b74\7\u01ef\2\2\u1b74\u1b7e\7\u00a3\2\2\u1b75\u1b77\7\u0335"+
		"\2\2\u1b76\u1b75\3\2\2\2\u1b76\u1b77\3\2\2\2\u1b77\u1b78\3\2\2\2\u1b78"+
		"\u1b79\tX\2\2\u1b79\u1b7c\7\u0324\2\2\u1b7a\u1b7d\7\u031c\2\2\u1b7b\u1b7d"+
		"\5\u0342\u01a2\2\u1b7c\u1b7a\3\2\2\2\u1b7c\u1b7b\3\2\2\2\u1b7d\u1b7f\3"+
		"\2\2\2\u1b7e\u1b76\3\2\2\2\u1b7f\u1b80\3\2\2\2\u1b80\u1b7e\3\2\2\2\u1b80"+
		"\u1b81\3\2\2\2\u1b81\u1b83\3\2\2\2\u1b82\u1b73\3\2\2\2\u1b83\u1b84\3\2"+
		"\2\2\u1b84\u1b82\3\2\2\2\u1b84\u1b85\3\2\2\2\u1b85\u1b87\3\2\2\2\u1b86"+
		"\u1b6f\3\2\2\2\u1b86\u1b82\3\2\2\2\u1b86\u1b87\3\2\2\2\u1b87\u1c35\3\2"+
		"\2\2\u1b88\u1c32\7\u00b8\2\2\u1b89\u1b8b\7\u0335\2\2\u1b8a\u1b89\3\2\2"+
		"\2\u1b8a\u1b8b\3\2\2\2\u1b8b\u1b8c\3\2\2\2\u1b8c\u1c31\7\u014a\2\2\u1b8d"+
		"\u1b8f\7\u0335\2\2\u1b8e\u1b8d\3\2\2\2\u1b8e\u1b8f\3\2\2\2\u1b8f\u1b90"+
		"\3\2\2\2\u1b90\u1c31\7\u012a\2\2\u1b91\u1b93\7\u0335\2\2\u1b92\u1b91\3"+
		"\2\2\2\u1b92\u1b93\3\2\2\2\u1b93\u1b94\3\2\2\2\u1b94\u1c31\tY\2\2\u1b95"+
		"\u1b97\7\u0335\2\2\u1b96\u1b95\3\2\2\2\u1b96\u1b97\3\2\2\2\u1b97\u1b98"+
		"\3\2\2\2\u1b98\u1b99\7\u0145\2\2\u1b99\u1b9c\7\u0324\2\2\u1b9a\u1b9d\7"+
		"\u031c\2\2\u1b9b\u1b9d\5\u0342\u01a2\2\u1b9c\u1b9a\3\2\2\2\u1b9c\u1b9b"+
		"\3\2\2\2\u1b9d\u1c31\3\2\2\2\u1b9e\u1ba0\7\u0335\2\2\u1b9f\u1b9e\3\2\2"+
		"\2\u1b9f\u1ba0\3\2\2\2\u1ba0\u1ba1\3\2\2\2\u1ba1\u1ba2\7\u01f6\2\2\u1ba2"+
		"\u1ba3\7\u0324\2\2\u1ba3\u1c31\5\u0342\u01a2\2\u1ba4\u1ba6\7\u0335\2\2"+
		"\u1ba5\u1ba4\3\2\2\2\u1ba5\u1ba6\3\2\2\2\u1ba6\u1ba7\3\2\2\2\u1ba7\u1c31"+
		"\7\u012f\2\2\u1ba8\u1baa\7\u0335\2\2\u1ba9\u1ba8\3\2\2\2\u1ba9\u1baa\3"+
		"\2\2\2\u1baa\u1bab\3\2\2\2\u1bab\u1c31\7\u0172\2\2\u1bac\u1bae\7\u0335"+
		"\2\2\u1bad\u1bac\3\2\2\2\u1bad\u1bae\3\2\2\2\u1bae\u1bbb\3\2\2\2\u1baf"+
		"\u1bb0\7\u0164\2\2\u1bb0\u1bb3\7\u0324\2\2\u1bb1\u1bb4\7\u031c\2\2\u1bb2"+
		"\u1bb4\5\u0342\u01a2\2\u1bb3\u1bb1\3\2\2\2\u1bb3\u1bb2\3\2\2\2\u1bb4\u1bbc"+
		"\3\2\2\2\u1bb5\u1bb6\7\u027b\2\2\u1bb6\u1bb9\7\u0324\2\2\u1bb7\u1bba\7"+
		"\u031a\2\2\u1bb8\u1bba\5\u0342\u01a2\2\u1bb9\u1bb7\3\2\2\2\u1bb9\u1bb8"+
		"\3\2\2\2\u1bba\u1bbc\3\2\2\2\u1bbb\u1baf\3\2\2\2\u1bbb\u1bb5\3\2\2\2\u1bbc"+
		"\u1c31\3\2\2\2\u1bbd\u1bbf\7\u0335\2\2\u1bbe\u1bbd\3\2\2\2\u1bbe\u1bbf"+
		"\3\2\2\2\u1bbf\u1bc0\3\2\2\2\u1bc0\u1c31\tZ\2\2\u1bc1\u1bc3\7\u0335\2"+
		"\2\u1bc2\u1bc1\3\2\2\2\u1bc2\u1bc3\3\2\2\2\u1bc3\u1bc4\3\2\2\2\u1bc4\u1c31"+
		"\t[\2\2\u1bc5\u1bc7\7\u0335\2\2\u1bc6\u1bc5\3\2\2\2\u1bc6\u1bc7\3\2\2"+
		"\2\u1bc7\u1bc8\3\2\2\2\u1bc8\u1c31\t\\\2\2\u1bc9\u1bcb\7\u0335\2\2\u1bca"+
		"\u1bc9\3\2\2\2\u1bca\u1bcb\3\2\2\2\u1bcb\u1bcc\3\2\2\2\u1bcc\u1bcd\7\u01dd"+
		"\2\2\u1bcd\u1bd0\7\u0324\2\2\u1bce\u1bd1\7\u031c\2\2\u1bcf\u1bd1\5\u0342"+
		"\u01a2\2\u1bd0\u1bce\3\2\2\2\u1bd0\u1bcf\3\2\2\2\u1bd1\u1c31\3\2\2\2\u1bd2"+
		"\u1bd4\7\u0335\2\2\u1bd3\u1bd2\3\2\2\2\u1bd3\u1bd4\3\2\2\2\u1bd4\u1bd5"+
		"\3\2\2\2\u1bd5\u1bd6\7\u01de\2\2\u1bd6\u1bd7\7\u0324\2\2\u1bd7\u1c31\7"+
		"\u031c\2\2\u1bd8\u1bda\7\u0335\2\2\u1bd9\u1bd8\3\2\2\2\u1bd9\u1bda\3\2"+
		"\2\2\u1bda\u1bdb\3\2\2\2\u1bdb\u1bdc\7\u00fe\2\2\u1bdc\u1bdf\7\u0324\2"+
		"\2\u1bdd\u1be0\7\u031a\2\2\u1bde\u1be0\5\u0342\u01a2\2\u1bdf\u1bdd\3\2"+
		"\2\2\u1bdf\u1bde\3\2\2\2\u1be0\u1c31\3\2\2\2\u1be1\u1be3\7\u0335\2\2\u1be2"+
		"\u1be1\3\2\2\2\u1be2\u1be3\3\2\2\2\u1be3\u1be4\3\2\2\2\u1be4\u1be5\7\u0102"+
		"\2\2\u1be5\u1be8\7\u0324\2\2\u1be6\u1be9\7\u031a\2\2\u1be7\u1be9\5\u0342"+
		"\u01a2\2\u1be8\u1be6\3\2\2\2\u1be8\u1be7\3\2\2\2\u1be9\u1c31\3\2\2\2\u1bea"+
		"\u1bec\7\u0335\2\2\u1beb\u1bea\3\2\2\2\u1beb\u1bec\3\2\2\2\u1bec\u1bed"+
		"\3\2\2\2\u1bed\u1bee\7\u01da\2\2\u1bee\u1bf1\7\u0324\2\2\u1bef\u1bf2\7"+
		"\u031a\2\2\u1bf0\u1bf2\5\u0342\u01a2\2\u1bf1\u1bef\3\2\2\2\u1bf1\u1bf0"+
		"\3\2\2\2\u1bf2\u1c31\3\2\2\2\u1bf3\u1bf5\7\u0335\2\2\u1bf4\u1bf3\3\2\2"+
		"\2\u1bf4\u1bf5\3\2\2\2\u1bf5\u1bf6\3\2\2\2\u1bf6\u1c31\t]\2\2\u1bf7\u1bf9"+
		"\7\u0335\2\2\u1bf8\u1bf7\3\2\2\2\u1bf8\u1bf9\3\2\2\2\u1bf9\u1bfa\3\2\2"+
		"\2\u1bfa\u1c31\t^\2\2\u1bfb\u1bfd\7\u0335\2\2\u1bfc\u1bfb\3\2\2\2\u1bfc"+
		"\u1bfd\3\2\2\2\u1bfd\u1bfe\3\2\2\2\u1bfe\u1c31\7\u0277\2\2\u1bff\u1c01"+
		"\7\u0335\2\2\u1c00\u1bff\3\2\2\2\u1c00\u1c01\3\2\2\2\u1c01\u1c02\3\2\2"+
		"\2\u1c02\u1c05\7\u02c8\2\2\u1c03\u1c04\7\u0324\2\2\u1c04\u1c06\7\u031a"+
		"\2\2\u1c05\u1c03\3\2\2\2\u1c05\u1c06\3\2\2\2\u1c06\u1c31\3\2\2\2\u1c07"+
		"\u1c09\7\u0335\2\2\u1c08\u1c07\3\2\2\2\u1c08\u1c09\3\2\2\2\u1c09\u1c0a"+
		"\3\2\2\2\u1c0a\u1c31\t_\2\2\u1c0b\u1c0d\7\u0335\2\2\u1c0c\u1c0b\3\2\2"+
		"\2\u1c0c\u1c0d\3\2\2\2\u1c0d\u1c0e\3\2\2\2\u1c0e\u1c31\t`\2\2\u1c0f\u1c11"+
		"\7\u0335\2\2\u1c10\u1c0f\3\2\2\2\u1c10\u1c11\3\2\2\2\u1c11\u1c16\3\2\2"+
		"\2\u1c12\u1c17\7\u020c\2\2\u1c13\u1c14\7\u02c0\2\2\u1c14\u1c15\7\u0324"+
		"\2\2\u1c15\u1c17\7\u031c\2\2\u1c16\u1c12\3\2\2\2\u1c16\u1c13\3\2\2\2\u1c17"+
		"\u1c31\3\2\2\2\u1c18\u1c1a\7\u0335\2\2\u1c19\u1c18\3\2\2\2\u1c19\u1c1a"+
		"\3\2\2\2\u1c1a\u1c1b\3\2\2\2\u1c1b\u1c31\7\u0202\2\2\u1c1c\u1c1e\7\u0335"+
		"\2\2\u1c1d\u1c1c\3\2\2\2\u1c1d\u1c1e\3\2\2\2\u1c1e\u1c1f\3\2\2\2\u1c1f"+
		"\u1c20\7\u0159\2\2\u1c20\u1c21\7\u0333\2\2\u1c21\u1c22\7\u00d2\2\2\u1c22"+
		"\u1c23\7\u0324\2\2\u1c23\u1c24\t;\2\2\u1c24\u1c25\7\u0335\2\2\u1c25\u1c26"+
		"\7\u02a4\2\2\u1c26\u1c27\7\u010b\2\2\u1c27\u1c2e\7\u0324\2\2\u1c28\u1c2f"+
		"\5\u0342\u01a2\2\u1c29\u1c2a\7\u02a4\2\2\u1c2a\u1c2b\7\u00e4\2\2\u1c2b"+
		"\u1c2c\7\\\2\2\u1c2c\u1c2d\7\u0324\2\2\u1c2d\u1c2f\5\u0342\u01a2\2\u1c2e"+
		"\u1c28\3\2\2\2\u1c2e\u1c29\3\2\2\2\u1c2f\u1c31\3\2\2\2\u1c30\u1b8a\3\2"+
		"\2\2\u1c30\u1b8e\3\2\2\2\u1c30\u1b92\3\2\2\2\u1c30\u1b96\3\2\2\2\u1c30"+
		"\u1b9f\3\2\2\2\u1c30\u1ba5\3\2\2\2\u1c30\u1ba9\3\2\2\2\u1c30\u1bad\3\2"+
		"\2\2\u1c30\u1bbe\3\2\2\2\u1c30\u1bc2\3\2\2\2\u1c30\u1bc6\3\2\2\2\u1c30"+
		"\u1bca\3\2\2\2\u1c30\u1bd3\3\2\2\2\u1c30\u1bd9\3\2\2\2\u1c30\u1be2\3\2"+
		"\2\2\u1c30\u1beb\3\2\2\2\u1c30\u1bf4\3\2\2\2\u1c30\u1bf8\3\2\2\2\u1c30"+
		"\u1bfc\3\2\2\2\u1c30\u1c00\3\2\2\2\u1c30\u1c08\3\2\2\2\u1c30\u1c0c\3\2"+
		"\2\2\u1c30\u1c10\3\2\2\2\u1c30\u1c19\3\2\2\2\u1c30\u1c1d\3\2\2\2\u1c31"+
		"\u1c34\3\2\2\2\u1c32\u1c30\3\2\2\2\u1c32\u1c33\3\2\2\2\u1c33\u1c36\3\2"+
		"\2\2\u1c34\u1c32\3\2\2\2\u1c35\u1b88\3\2\2\2\u1c35\u1c36\3\2\2\2\u1c36"+
		"\u0213\3\2\2\2\u1c37\u1c38\7\13\2\2\u1c38\u1c39\7\u010b\2\2\u1c39\u1c3a"+
		"\5\u0342\u01a2\2\u1c3a\u1c3b\7\u00a3\2\2\u1c3b\u1c3c\7B\2\2\u1c3c\u1c3d"+
		"\7\u0324\2\2\u1c3d\u1c5d\7\u031c\2\2\u1c3e\u1c3f\7\u00b8\2\2\u1c3f\u1c40"+
		"\7\u0242\2\2\u1c40\u1c41\7\\\2\2\u1c41\u1c58\7\u0333\2\2\u1c42\u1c44\7"+
		"\u0335\2\2\u1c43\u1c42\3\2\2\2\u1c43\u1c44\3\2\2\2\u1c44\u1c45\3\2\2\2"+
		"\u1c45\u1c46\7B\2\2\u1c46\u1c47\7\u0324\2\2\u1c47\u1c59\7\u031c\2\2\u1c48"+
		"\u1c4a\7\u0335\2\2\u1c49\u1c48\3\2\2\2\u1c49\u1c4a\3\2\2\2\u1c4a\u1c4b"+
		"\3\2\2\2\u1c4b\u1c4c\7\u0159\2\2\u1c4c\u1c4d\7\21\2\2\u1c4d\u1c4e\7\u022b"+
		"\2\2\u1c4e\u1c4f\7\u0324\2\2\u1c4f\u1c59\7\u031c\2\2\u1c50\u1c52\7\u0335"+
		"\2\2\u1c51\u1c50\3\2\2\2\u1c51\u1c52\3\2\2\2\u1c52\u1c53\3\2\2\2\u1c53"+
		"\u1c54\7\u013c\2\2\u1c54\u1c55\7\21\2\2\u1c55\u1c56\7\u022b\2\2\u1c56"+
		"\u1c57\7\u0324\2\2\u1c57\u1c59\7\u031c\2\2\u1c58\u1c43\3\2\2\2\u1c58\u1c49"+
		"\3\2\2\2\u1c58\u1c51\3\2\2\2\u1c59\u1c5a\3\2\2\2\u1c5a\u1c58\3\2\2\2\u1c5a"+
		"\u1c5b\3\2\2\2\u1c5b\u1c5c\3\2\2\2\u1c5c\u1c5e\7\u0334\2\2\u1c5d\u1c3e"+
		"\3\2\2\2\u1c5d\u1c5e\3\2\2\2\u1c5e\u0215\3\2\2\2\u1c5f\u1c60\7\13\2\2"+
		"\u1c60\u1c61\7\u01c6\2\2\u1c61\u1c62\7\\\2\2\u1c62\u1c63\7\u00a3\2\2\u1c63"+
		"\u1c64\7B\2\2\u1c64\u1c65\7\u0324\2\2\u1c65\u1c66\7\u031c\2\2\u1c66\u1c67"+
		"\7\u0159\2\2\u1c67\u1c68\7\21\2\2\u1c68\u1c69\7\u022b\2\2\u1c69\u1c6a"+
		"\7\u0324\2\2\u1c6a\u1c6b\7\u031c\2\2\u1c6b\u0217\3\2\2\2\u1c6c\u1c6d\7"+
		"\13\2\2\u1c6d\u1c6e\7\u02a7\2\2\u1c6e\u1c6f\7\u01c6\2\2\u1c6f\u1c70\7"+
		"\\\2\2\u1c70\u1c71\7\u00a3\2\2\u1c71\u1c72\7B\2\2\u1c72\u1c73\7\u0324"+
		"\2\2\u1c73\u1c74\7\u031c\2\2\u1c74\u1c75\7\u0159\2\2\u1c75\u1c76\7\21"+
		"\2\2\u1c76\u1c77\7\u022b\2\2\u1c77\u1c78\7\u0324\2\2\u1c78\u1c79\7\u031c"+
		"\2\2\u1c79\u0219\3\2\2\2\u1c7a\u1c7d\7=\2\2\u1c7b\u1c7e\5\u021c\u010f"+
		"\2\u1c7c\u1c7e\5\u0220\u0111\2\u1c7d\u1c7b\3\2\2\2\u1c7d\u1c7c\3\2\2\2"+
		"\u1c7e\u021b\3\2\2\2\u1c7f\u1c80\7\u0333\2\2\u1c80\u1c85\5\u021e\u0110"+
		"\2\u1c81\u1c82\7\u033b\2\2\u1c82\u1c84\5\u021e\u0110\2\u1c83\u1c81\3\2"+
		"\2\2\u1c84\u1c87\3\2\2\2\u1c85\u1c83\3\2\2\2\u1c85\u1c86\3\2\2\2\u1c86"+
		"\u1c93\3\2\2\2\u1c87\u1c85\3\2\2\2\u1c88\u1c8f\7\u0335\2\2\u1c89\u1c90"+
		"\5\u033a\u019e\2\u1c8a\u1c90\5\u0342\u01a2\2\u1c8b\u1c8d\7\u0319\2\2\u1c8c"+
		"\u1c8e\t@\2\2\u1c8d\u1c8c\3\2\2\2\u1c8d\u1c8e\3\2\2\2\u1c8e\u1c90\3\2"+
		"\2\2\u1c8f\u1c89\3\2\2\2\u1c8f\u1c8a\3\2\2\2\u1c8f\u1c8b\3\2\2\2\u1c90"+
		"\u1c92\3\2\2\2\u1c91\u1c88\3\2\2\2\u1c92\u1c95\3\2\2\2\u1c93\u1c91\3\2"+
		"\2\2\u1c93\u1c94\3\2\2\2\u1c94\u1c96\3\2\2\2\u1c95\u1c93\3\2\2\2\u1c96"+
		"\u1c9b\7\u0334\2\2\u1c97\u1c98\7\b\2\2\u1c98\u1c99\ta\2\2\u1c99\u1c9a"+
		"\7\u0324\2\2\u1c9a\u1c9c\7\u031c\2\2\u1c9b\u1c97\3\2\2\2\u1c9b\u1c9c\3"+
		"\2\2\2\u1c9c\u1c9f\3\2\2\2\u1c9d\u1c9e\7\u0331\2\2\u1c9e\u1ca0\5\u0310"+
		"\u0189\2\u1c9f\u1c9d\3\2\2\2\u1c9f\u1ca0\3\2\2\2\u1ca0\u021d\3\2\2\2\u1ca1"+
		"\u1ca2\t\3\2\2\u1ca2\u021f\3\2\2\2\u1ca3\u1ca4\7\u0319\2\2\u1ca4\u1ca6"+
		"\7\u0324\2\2\u1ca5\u1ca3\3\2\2\2\u1ca5\u1ca6\3\2\2\2\u1ca6\u1cad\3\2\2"+
		"\2\u1ca7\u1caa\5\u0310\u0189\2\u1ca8\u1ca9\7\u0336\2\2\u1ca9\u1cab\7\u031a"+
		"\2\2\u1caa\u1ca8\3\2\2\2\u1caa\u1cab\3\2\2\2\u1cab\u1cae\3\2\2\2\u1cac"+
		"\u1cae\7\u0319\2\2\u1cad\u1ca7\3\2\2\2\u1cad\u1cac\3\2\2\2\u1cae\u1cb7"+
		"\3\2\2\2\u1caf\u1cb4\5\u0222\u0112\2\u1cb0\u1cb1\7\u0335\2\2\u1cb1\u1cb3"+
		"\5\u0222\u0112\2\u1cb2\u1cb0\3\2\2\2\u1cb3\u1cb6\3\2\2\2\u1cb4\u1cb2\3"+
		"\2\2\2\u1cb4\u1cb5\3\2\2\2\u1cb5\u1cb8\3\2\2\2\u1cb6\u1cb4\3\2\2\2\u1cb7"+
		"\u1caf\3\2\2\2\u1cb7\u1cb8\3\2\2\2\u1cb8\u1cc2\3\2\2\2\u1cb9\u1cba\7\u00b8"+
		"\2\2\u1cba\u1cbf\5\u0224\u0113\2\u1cbb\u1cbc\7\u0335\2\2\u1cbc\u1cbe\5"+
		"\u0224\u0113\2\u1cbd\u1cbb\3\2\2\2\u1cbe\u1cc1\3\2\2\2\u1cbf\u1cbd\3\2"+
		"\2\2\u1cbf\u1cc0\3\2\2\2\u1cc0\u1cc3\3\2\2\2\u1cc1\u1cbf\3\2\2\2\u1cc2"+
		"\u1cb9\3\2\2\2\u1cc2\u1cc3\3\2\2\2\u1cc3\u0221\3\2\2\2\u1cc4\u1cc5\7\u0319"+
		"\2\2\u1cc5\u1cc7\7\u0324\2\2\u1cc6\u1cc4\3\2\2\2\u1cc6\u1cc7\3\2\2\2\u1cc7"+
		"\u1cce\3\2\2\2\u1cc8\u1ccf\5\u033a\u019e\2\u1cc9\u1ccf\5\u0342\u01a2\2"+
		"\u1cca\u1ccc\7\u0319\2\2\u1ccb\u1ccd\t@\2\2\u1ccc\u1ccb\3\2\2\2\u1ccc"+
		"\u1ccd\3\2\2\2\u1ccd\u1ccf\3\2\2\2\u1cce\u1cc8\3\2\2\2\u1cce\u1cc9\3\2"+
		"\2\2\u1cce\u1cca\3\2\2\2\u1ccf\u0223\3\2\2\2\u1cd0\u1cd5\7\u0260\2\2\u1cd1"+
		"\u1cd2\7\u0279\2\2\u1cd2\u1cd3\7\u02ab\2\2\u1cd3\u1cd5\5\u0226\u0114\2"+
		"\u1cd4\u1cd0\3\2\2\2\u1cd4\u1cd1\3\2\2\2\u1cd5\u0225\3\2\2\2\u1cd6\u1ce4"+
		"\7\u02f4\2\2\u1cd7\u1ce4\7\u020a\2\2\u1cd8\u1cd9\7\u0333\2\2\u1cd9\u1cde"+
		"\5\u0228\u0115\2\u1cda\u1cdb\7\u0335\2\2\u1cdb\u1cdd\5\u0228\u0115\2\u1cdc"+
		"\u1cda\3\2\2\2\u1cdd\u1ce0\3\2\2\2\u1cde\u1cdc\3\2\2\2\u1cde\u1cdf\3\2"+
		"\2\2\u1cdf\u1ce1\3\2\2\2\u1ce0\u1cde\3\2\2\2\u1ce1\u1ce2\7\u0334\2\2\u1ce2"+
		"\u1ce4\3\2\2\2\u1ce3\u1cd6\3\2\2\2\u1ce3\u1cd7\3\2\2\2\u1ce3\u1cd8\3\2"+
		"\2\2\u1ce4\u0227\3\2\2\2\u1ce5\u1ce6\7\u0333\2\2\u1ce6\u1ce7\5\u0272\u013a"+
		"\2\u1ce7\u1ce8\7\u0335\2\2\u1ce8\u1ce9\5\u0272\u013a\2\u1ce9\u1cea\3\2"+
		"\2\2\u1cea\u1ceb\7\u0334\2\2\u1ceb\u1cf3\3\2\2\2\u1cec\u1ced\7\b\2\2\u1ced"+
		"\u1cee\tb\2\2\u1cee\u1cf3\5\u0310\u0189\2\u1cef\u1cf0\7\b\2\2\u1cf0\u1cf1"+
		"\7D\2\2\u1cf1\u1cf3\7\u030c\2\2\u1cf2\u1ce5\3\2\2\2\u1cf2\u1cec\3\2\2"+
		"\2\u1cf2\u1cef\3\2\2\2\u1cf3\u0229\3\2\2\2\u1cf4\u1d03\5\u0264\u0133\2"+
		"\u1cf5\u1d03\5\u022c\u0117\2\u1cf6\u1cfd\7\u008a\2\2\u1cf7\u1cf8\7\u0333"+
		"\2\2\u1cf8\u1cf9\7\u00b8\2\2\u1cf9\u1cfa\7\u0129\2\2\u1cfa\u1cfb\7\u0324"+
		"\2\2\u1cfb\u1cfc\7\u0319\2\2\u1cfc\u1cfe\7\u0334\2\2\u1cfd\u1cf7\3\2\2"+
		"\2\u1cfd\u1cfe\3\2\2\2\u1cfe\u1d03\3\2\2\2\u1cff\u1d03\5\u0246\u0124\2"+
		"\u1d00\u1d03\5\u0248\u0125\2\u1d01\u1d03\5\u024a\u0126\2\u1d02\u1cf4\3"+
		"\2\2\2\u1d02\u1cf5\3\2\2\2\u1d02\u1cf6\3\2\2\2\u1d02\u1cff\3\2\2\2\u1d02"+
		"\u1d00\3\2\2\2\u1d02\u1d01\3\2\2\2\u1d03\u022b\3\2\2\2\u1d04\u1d0d\7M"+
		"\2\2\u1d05\u1d0d\7\60\2\2\u1d06\u1d0a\7\u008b\2\2\u1d07\u1d08\7M\2\2\u1d08"+
		"\u1d09\7r\2\2\u1d09\u1d0b\7D\2\2\u1d0a\u1d07\3\2\2\2\u1d0a\u1d0b\3\2\2"+
		"\2\u1d0b\u1d0d\3\2\2\2\u1d0c\u1d04\3\2\2\2\u1d0c\u1d05\3\2\2\2\u1d0c\u1d06"+
		"\3\2\2\2\u1d0d\u1d10\3\2\2\2\u1d0e\u1d11\5\u022e\u0118\2\u1d0f\u1d11\5"+
		"\u0230\u0119\2\u1d10\u1d0e\3\2\2\2\u1d10\u1d0f\3\2\2\2\u1d11\u1d13\3\2"+
		"\2\2\u1d12\u1d14\5\u0238\u011d\2\u1d13\u1d12\3\2\2\2\u1d13\u1d14\3\2\2"+
		"\2\u1d14\u1d15\3\2\2\2\u1d15\u1d16\tc\2\2\u1d16\u1d1b\5\u023a\u011e\2"+
		"\u1d17\u1d18\7\u00b8\2\2\u1d18\u1d19\7M\2\2\u1d19\u1d1c\7r\2\2\u1d1a\u1d1c"+
		"\7\22\2\2\u1d1b\u1d17\3\2\2\2\u1d1b\u1d1a\3\2\2\2\u1d1b\u1d1c\3\2\2\2"+
		"\u1d1c\u1d1f\3\2\2\2\u1d1d\u1d1e\7\b\2\2\u1d1e\u1d20\5\u0342\u01a2\2\u1d1f"+
		"\u1d1d\3\2\2\2\u1d1f\u1d20\3\2\2\2\u1d20\u022d\3\2\2\2\u1d21\u1d26\5\u0236"+
		"\u011c\2\u1d22\u1d23\7\u0335\2\2\u1d23\u1d25\5\u0236\u011c\2\u1d24\u1d22"+
		"\3\2\2\2\u1d25\u1d28\3\2\2\2\u1d26\u1d24\3\2\2\2\u1d26\u1d27\3\2\2\2\u1d27"+
		"\u022f\3\2\2\2\u1d28\u1d26\3\2\2\2\u1d29\u1d2e\5\u0232\u011a\2\u1d2a\u1d2b"+
		"\7\u0335\2\2\u1d2b\u1d2d\5\u0232\u011a\2\u1d2c\u1d2a\3\2\2\2\u1d2d\u1d30"+
		"\3\2\2\2\u1d2e\u1d2c\3\2\2\2\u1d2e\u1d2f\3\2\2\2\u1d2f\u0231\3\2\2\2\u1d30"+
		"\u1d2e\3\2\2\2\u1d31\u1d32\5\u0236\u011c\2\u1d32\u1d33\5\u0234\u011b\2"+
		"\u1d33\u0233\3\2\2\2\u1d34\u1d35\7\u0333\2\2\u1d35\u1d3a\5\u0342\u01a2"+
		"\2\u1d36\u1d37\7\u0335\2\2\u1d37\u1d39\5\u0342\u01a2\2\u1d38\u1d36\3\2"+
		"\2\2\u1d39\u1d3c\3\2\2\2\u1d3a\u1d38\3\2\2\2\u1d3a\u1d3b\3\2\2\2\u1d3b"+
		"\u1d3d\3\2\2\2\u1d3c\u1d3a\3\2\2\2\u1d3d\u1d3e\7\u0334\2\2\u1d3e\u0235"+
		"\3\2\2\2\u1d3f\u1d41\7\4\2\2\u1d40\u1d42\7\u0243\2\2\u1d41\u1d40\3\2\2"+
		"\2\u1d41\u1d42\3\2\2\2\u1d42\u1d60\3\2\2\2\u1d43\u1d60\7=\2\2\u1d44\u1d45"+
		"\7\u00b3\2\2\u1d45\u1d60\5\u0342\u01a2\2\u1d46\u1d47\7\u02d6\2\2\u1d47"+
		"\u1d60\5\u0342\u01a2\2\u1d48\u1d60\7\u0127\2\2\u1d49\u1d4a\7\u0127\2\2"+
		"\u1d4a\u1d60\7\u02a4\2\2\u1d4b\u1d4c\7\"\2\2\u1d4c\u1d60\td\2\2\u1d4d"+
		"\u1d60\7\u02ad\2\2\u1d4e\u1d60\7\u0196\2\2\u1d4f\u1d60\7\u0094\2\2\u1d50"+
		"\u1d60\7/\2\2\u1d51\u1d60\7\u00ad\2\2\u1d52\u1d60\7\u0085\2\2\u1d53\u1d60"+
		"\7W\2\2\u1d54\u1d60\7\u0120\2\2\u1d55\u1d5d\7\5\2\2\u1d56\u1d58\7\7\2"+
		"\2\u1d57\u1d56\3\2\2\2\u1d57\u1d58\3\2\2\2\u1d58\u1d5b\3\2\2\2\u1d59\u1d5c"+
		"\5\u0342\u01a2\2\u1d5a\u1d5c\7*\2\2\u1d5b\u1d59\3\2\2\2\u1d5b\u1d5a\3"+
		"\2\2\2\u1d5c\u1d5e\3\2\2\2\u1d5d\u1d57\3\2\2\2\u1d5d\u1d5e\3\2\2\2\u1d5e"+
		"\u1d60\3\2\2\2\u1d5f\u1d3f\3\2\2\2\u1d5f\u1d43\3\2\2\2\u1d5f\u1d44\3\2"+
		"\2\2\u1d5f\u1d46\3\2\2\2\u1d5f\u1d48\3\2\2\2\u1d5f\u1d49\3\2\2\2\u1d5f"+
		"\u1d4b\3\2\2\2\u1d5f\u1d4d\3\2\2\2\u1d5f\u1d4e\3\2\2\2\u1d5f\u1d4f\3\2"+
		"\2\2\u1d5f\u1d50\3\2\2\2\u1d5f\u1d51\3\2\2\2\u1d5f\u1d52\3\2\2\2\u1d5f"+
		"\u1d53\3\2\2\2\u1d5f\u1d54\3\2\2\2\u1d5f\u1d55\3\2\2\2\u1d60\u0237\3\2"+
		"\2\2\u1d61\u1d66\7l\2\2\u1d62\u1d63\5^\60\2\u1d63\u1d64\7\u0337\2\2\u1d64"+
		"\u1d65\7\u0337\2\2\u1d65\u1d67\3\2\2\2\u1d66\u1d62\3\2\2\2\u1d66\u1d67"+
		"\3\2\2\2\u1d67\u1d68\3\2\2\2\u1d68\u1d6a\5\u0310\u0189\2\u1d69\u1d6b\5"+
		"\u0234\u011b\2\u1d6a\u1d69\3\2\2\2\u1d6a\u1d6b\3\2\2\2\u1d6b\u0239\3\2"+
		"\2\2\u1d6c\u1d71\5\u0342\u01a2\2\u1d6d\u1d6e\7\u0335\2\2\u1d6e\u1d70\5"+
		"\u0342\u01a2\2\u1d6f\u1d6d\3\2\2\2\u1d70\u1d73\3\2\2\2\u1d71\u1d6f\3\2"+
		"\2\2\u1d71\u1d72\3\2\2\2\u1d72\u023b\3\2\2\2\u1d73\u1d71\3\2\2\2\u1d74"+
		"\u1d75\7\u010b\2\2\u1d75\u1d78\5\u0342\u01a2\2\u1d76\u1d77\7\n\2\2\u1d77"+
		"\u1d79\5\u0342\u01a2\2\u1d78\u1d76\3\2\2\2\u1d78\u1d79\3\2\2\2\u1d79\u1d7d"+
		"\3\2\2\2\u1d7a\u1d7b\7H\2\2\u1d7b\u1d7e\5\u023e\u0120\2\u1d7c\u1d7e\5"+
		"\u0242\u0122\2\u1d7d\u1d7a\3\2\2\2\u1d7d\u1d7c\3\2\2\2\u1d7e\u1d85\3\2"+
		"\2\2\u1d7f\u1d80\7\u00c9\2\2\u1d80\u1d81\7D\2\2\u1d81\u1d82\7\f\2\2\u1d82"+
		"\u1d83\7\u0149\2\2\u1d83\u1d84\7\u0324\2\2\u1d84\u1d86\t\b\2\2\u1d85\u1d7f"+
		"\3\2\2\2\u1d85\u1d86\3\2\2\2\u1d86\u023d\3\2\2\2\u1d87\u1d88\7\u00e3\2"+
		"\2\u1d88\u1d99\5\u0342\u01a2\2\u1d89\u1d8b\7\u0162\2\2\u1d8a\u1d89\3\2"+
		"\2\2\u1d8a\u1d8b\3\2\2\2\u1d8b\u1d8c\3\2\2\2\u1d8c\u1d8d\7B\2\2\u1d8d"+
		"\u1d8e\7\u0324\2\2\u1d8e\u1d96\7\u031c\2\2\u1d8f\u1d90\7\u00b8\2\2\u1d90"+
		"\u1d91\7\u0242\2\2\u1d91\u1d92\7\\\2\2\u1d92\u1d93\7\u0333\2\2\u1d93\u1d94"+
		"\5\u0240\u0121\2\u1d94\u1d95\7\u0334\2\2\u1d95\u1d97\3\2\2\2\u1d96\u1d8f"+
		"\3\2\2\2\u1d96\u1d97\3\2\2\2\u1d97\u1d99\3\2\2\2\u1d98\u1d87\3\2\2\2\u1d98"+
		"\u1d8a\3\2\2\2\u1d99\u023f\3\2\2\2\u1d9a\u1d9b\te\2\2\u1d9b\u1d9c\7\u0324"+
		"\2\2\u1d9c\u1da3\7\u031c\2\2\u1d9d\u1d9e\7\u0335\2\2\u1d9e\u1d9f\t\n\2"+
		"\2\u1d9f\u1da0\7\21\2\2\u1da0\u1da1\7\u022b\2\2\u1da1\u1da2\7\u0324\2"+
		"\2\u1da2\u1da4\7\u031c\2\2\u1da3\u1d9d\3\2\2\2\u1da3\u1da4\3\2\2\2\u1da4"+
		"\u0241\3\2\2\2\u1da5\u1da6\7\u0159\2\2\u1da6\u1da7\7\21\2\2\u1da7\u1da8"+
		"\7\u022b\2\2\u1da8\u1da9\7\u0324\2\2\u1da9\u1dab\7\u031c\2\2\u1daa\u1da5"+
		"\3\2\2\2\u1daa\u1dab\3\2\2\2\u1dab\u1dac\3\2\2\2\u1dac\u1dad\7\u00b8\2"+
		"\2\u1dad\u1dae\7\u02cf\2\2\u1dae\u1daf\7\u0324\2\2\u1daf\u1db4\7\u031c"+
		"\2\2\u1db0\u1db1\7\u0335\2\2\u1db1\u1db3\5\u0244\u0123\2\u1db2\u1db0\3"+
		"\2\2\2\u1db3\u1db6\3\2\2\2\u1db4\u1db2\3\2\2\2\u1db4\u1db5\3\2\2\2\u1db5"+
		"\u0243\3\2\2\2\u1db6\u1db4\3\2\2\2\u1db7\u1db8\tf\2\2\u1db8\u1db9\7\u0324"+
		"\2\2\u1db9\u1dba\7\u031c\2\2\u1dba\u0245\3\2\2\2\u1dbb\u1dbc\7m\2\2\u1dbc"+
		"\u1dbd\7\u02d2\2\2\u1dbd\u1dbe\7\\\2\2\u1dbe\u1dbf\5\u0342\u01a2\2\u1dbf"+
		"\u1dc0\7\u013c\2\2\u1dc0\u1dc1\7\21\2\2\u1dc1\u1dc2\5\u0256\u012c\2\u1dc2"+
		"\u1dcc\3\2\2\2\u1dc3\u1dc4\7m\2\2\u1dc4\u1dc5\7\u01c6\2\2\u1dc5\u1dc6"+
		"\7\\\2\2\u1dc6\u1dc7\7\u013c\2\2\u1dc7\u1dc8\7\21\2\2\u1dc8\u1dc9\7\u022b"+
		"\2\2\u1dc9\u1dca\7\u0324\2\2\u1dca\u1dcc\7\u031c\2\2\u1dcb\u1dbb\3\2\2"+
		"\2\u1dcb\u1dc3\3\2\2\2\u1dcc\u0247\3\2\2\2\u1dcd\u1dce\7\26\2\2\u1dce"+
		"\u1dcf\7\u02d2\2\2\u1dcf\u1dd0\7\\\2\2\u1dd0\u1dd9\5\u0342\u01a2\2\u1dd1"+
		"\u1dd2\7\26\2\2\u1dd2\u1dd3\7\4\2\2\u1dd3\u1dd4\7\u02d2\2\2\u1dd4\u1dd9"+
		"\7\u01ad\2\2\u1dd5\u1dd6\7\26\2\2\u1dd6\u1dd7\7\u01c6\2\2\u1dd7\u1dd9"+
		"\7\\\2\2\u1dd8\u1dcd\3\2\2\2\u1dd8\u1dd1\3\2\2\2\u1dd8\u1dd5\3\2\2\2\u1dd9"+
		"\u0249\3\2\2\2\u1dda\u1ddc\7\3\2\2\u1ddb\u1ddd\7\u012b\2\2\u1ddc\u1ddb"+
		"\3\2\2\2\u1ddc\u1ddd\3\2\2\2\u1ddd\u1dde\3\2\2\2\u1dde\u1ddf\7\u02af\2"+
		"\2\u1ddf\u1de4\7\u00a3\2\2\u1de0\u1de1\5^\60\2\u1de1\u1de2\7\u0337\2\2"+
		"\u1de2\u1de3\7\u0337\2\2\u1de3\u1de5\3\2\2\2\u1de4\u1de0\3\2\2\2\u1de4"+
		"\u1de5\3\2\2\2\u1de5\u1de6\3\2\2\2\u1de6\u1de7\5\u0310\u0189\2\u1de7\u1de8"+
		"\7\21\2\2\u1de8\u1ded\5\u024c\u0127\2\u1de9\u1dea\7\u0335\2\2\u1dea\u1dec"+
		"\5\u024c\u0127\2\u1deb\u1de9\3\2\2\2\u1dec\u1def\3\2\2\2\u1ded\u1deb\3"+
		"\2\2\2\u1ded\u1dee\3\2\2\2\u1dee\u024b\3\2\2\2\u1def\u1ded\3\2\2\2\u1df0"+
		"\u1df4\7\u010b\2\2\u1df1\u1df2\7\u00e4\2\2\u1df2\u1df4\7\\\2\2\u1df3\u1df0"+
		"\3\2\2\2\u1df3\u1df1\3\2\2\2\u1df4\u1df5\3\2\2\2\u1df5\u1dff\5\u0342\u01a2"+
		"\2\u1df6\u1dfd\7\u00b8\2\2\u1df7\u1df8\7\u022b\2\2\u1df8\u1df9\7\u0324"+
		"\2\2\u1df9\u1dfe\7\u031c\2\2\u1dfa\u1dfb\7\u02af\2\2\u1dfb\u1dfc\7\u0324"+
		"\2\2\u1dfc\u1dfe\7\u031d\2\2\u1dfd\u1df7\3\2\2\2\u1dfd\u1dfa\3\2\2\2\u1dfe"+
		"\u1e00\3\2\2\2\u1dff\u1df6\3\2\2\2\u1dff\u1e00\3\2\2\2\u1e00\u024d\3\2"+
		"\2\2\u1e01\u1e02\7\u01c6\2\2\u1e02\u1e03\7\\\2\2\u1e03\u1e04\7\u0159\2"+
		"\2\u1e04\u1e05\7\21\2\2\u1e05\u1e06\7\u022b\2\2\u1e06\u1e07\7\u0324\2"+
		"\2\u1e07\u1e23\7\u031c\2\2\u1e08\u1e09\7\u02d2\2\2\u1e09\u1e0a\7\\\2\2"+
		"\u1e0a\u1e0d\5\u0342\u01a2\2\u1e0b\u1e0c\7\n\2\2\u1e0c\u1e0e\5\u0342\u01a2"+
		"\2\u1e0d\u1e0b\3\2\2\2\u1e0d\u1e0e\3\2\2\2\u1e0e\u1e12\3\2\2\2\u1e0f\u1e10"+
		"\7H\2\2\u1e10\u1e11\7\u024c\2\2\u1e11\u1e13\5\u0342\u01a2\2\u1e12\u1e0f"+
		"\3\2\2\2\u1e12\u1e13\3\2\2\2\u1e13\u1e14\3\2\2\2\u1e14\u1e1e\7\u00b8\2"+
		"\2\u1e15\u1e1a\5\u0250\u0129\2\u1e16\u1e17\7\u0159\2\2\u1e17\u1e18\7\21"+
		"\2\2\u1e18\u1e1a\5\u0254\u012b\2\u1e19\u1e15\3\2\2\2\u1e19\u1e16\3\2\2"+
		"\2\u1e1a\u1e1c\3\2\2\2\u1e1b\u1e1d\7\u0335\2\2\u1e1c\u1e1b\3\2\2\2\u1e1c"+
		"\u1e1d\3\2\2\2\u1e1d\u1e1f\3\2\2\2\u1e1e\u1e19\3\2\2\2\u1e1f\u1e20\3\2"+
		"\2\2\u1e20\u1e1e\3\2\2\2\u1e20\u1e21\3\2\2\2\u1e21\u1e23\3\2\2\2\u1e22"+
		"\u1e01\3\2\2\2\u1e22\u1e08\3\2\2\2\u1e23\u024f\3\2\2\2\u1e24\u1e25\7\u01ab"+
		"\2\2\u1e25\u1e26\7\u0324\2\2\u1e26\u1e34\7\u031c\2\2\u1e27\u1e28\7\u00d2"+
		"\2\2\u1e28\u1e29\7\u0324\2\2\u1e29\u1e34\5\u0252\u012a\2\u1e2a\u1e2b\7"+
		"\u0192\2\2\u1e2b\u1e2c\7\u0324\2\2\u1e2c\u1e34\7\u031c\2\2\u1e2d\u1e2e"+
		"\7\u024b\2\2\u1e2e\u1e2f\7\u0324\2\2\u1e2f\u1e34\7\u031c\2\2\u1e30\u1e31"+
		"\7\u012e\2\2\u1e31\u1e32\7\u0324\2\2\u1e32\u1e34\t\f\2\2\u1e33\u1e24\3"+
		"\2\2\2\u1e33\u1e27\3\2\2\2\u1e33\u1e2a\3\2\2\2\u1e33\u1e2d\3\2\2\2\u1e33"+
		"\u1e30\3\2\2\2\u1e34\u0251\3\2\2\2\u1e35\u1e36\t\64\2\2\u1e36\u0253\3"+
		"\2\2\2\u1e37\u1e38\7\u010b\2\2\u1e38\u1e43\5\u0342\u01a2\2\u1e39\u1e3a"+
		"\7\u00e4\2\2\u1e3a\u1e3b\7\\\2\2\u1e3b\u1e43\5\u0342\u01a2\2\u1e3c\u1e3d"+
		"\7\u02d2\2\2\u1e3d\u1e3e\7\\\2\2\u1e3e\u1e43\5\u0342\u01a2\2\u1e3f\u1e40"+
		"\7\u022b\2\2\u1e40\u1e41\7\u0324\2\2\u1e41\u1e43\7\u031c\2\2\u1e42\u1e37"+
		"\3\2\2\2\u1e42\u1e39\3\2\2\2\u1e42\u1e3c\3\2\2\2\u1e42\u1e3f\3\2\2\2\u1e43"+
		"\u0255\3\2\2\2\u1e44\u1e45\7\u010b\2\2\u1e45\u1e4a\5\u0342\u01a2\2\u1e46"+
		"\u1e47\7\u00b8\2\2\u1e47\u1e48\7\u022b\2\2\u1e48\u1e49\7\u0324\2\2\u1e49"+
		"\u1e4b\7\u031c\2\2\u1e4a\u1e46\3\2\2\2\u1e4a\u1e4b\3\2\2\2\u1e4b\u1e5c"+
		"\3\2\2\2\u1e4c\u1e4d\7\u00e4\2\2\u1e4d\u1e4e\7\\\2\2\u1e4e\u1e53\5\u0342"+
		"\u01a2\2\u1e4f\u1e50\7\u00b8\2\2\u1e50\u1e51\7\u022b\2\2\u1e51\u1e52\7"+
		"\u0324\2\2\u1e52\u1e54\7\u031c\2\2\u1e53\u1e4f\3\2\2\2\u1e53\u1e54\3\2"+
		"\2\2\u1e54\u1e5c\3\2\2\2\u1e55\u1e56\7\u02d2\2\2\u1e56\u1e57\7\\\2\2\u1e57"+
		"\u1e5c\5\u0342\u01a2\2\u1e58\u1e59\7\u022b\2\2\u1e59\u1e5a\7\u0324\2\2"+
		"\u1e5a\u1e5c\7\u031c\2\2\u1e5b\u1e44\3\2\2\2\u1e5b\u1e4c\3\2\2\2\u1e5b"+
		"\u1e55\3\2\2\2\u1e5b\u1e58\3\2\2\2\u1e5c\u0257\3\2\2\2\u1e5d\u1e5e\7\u0099"+
		"\2\2\u1e5e\u1e61\7\u0319\2\2\u1e5f\u1e60\7\u0330\2\2\u1e60\u1e62\5\u0342"+
		"\u01a2\2\u1e61\u1e5f\3\2\2\2\u1e61\u1e62\3\2\2\2\u1e62\u1e63\3\2\2\2\u1e63"+
		"\u1e64\7\u0324\2\2\u1e64\u1e70\5\u0290\u0149\2\u1e65\u1e66\7\u0099\2\2"+
		"\u1e66\u1e67\7\u0319\2\2\u1e67\u1e68\5\u0348\u01a5\2\u1e68\u1e69\5\u0290"+
		"\u0149\2\u1e69\u1e70\3\2\2\2\u1e6a\u1e6b\7\u0099\2\2\u1e6b\u1e6c\7\u0319"+
		"\2\2\u1e6c\u1e6d\7\u0324\2\2\u1e6d\u1e70\5\u0288\u0145\2\u1e6e\u1e70\5"+
		"\u028c\u0147\2\u1e6f\u1e5d\3\2\2\2\u1e6f\u1e65\3\2\2\2\u1e6f\u1e6a\3\2"+
		"\2\2\u1e6f\u1e6e\3\2\2\2\u1e70\u0259\3\2\2\2\u1e71\u1e72\7\f\2\2\u1e72"+
		"\u1e73\7\64\2\2\u1e73\u1e76\tg\2\2\u1e74\u1e77\5\u0342\u01a2\2\u1e75\u1e77"+
		"\7\u0319\2\2\u1e76\u1e74\3\2\2\2\u1e76\u1e75\3\2\2\2\u1e76\u1e77\3\2\2"+
		"\2\u1e77\u1eae\3\2\2\2\u1e78\u1e79\7\f\2\2\u1e79\u1e83\tg\2\2\u1e7a\u1e7d"+
		"\5\u0342\u01a2\2\u1e7b\u1e7d\7\u0319\2\2\u1e7c\u1e7a\3\2\2\2\u1e7c\u1e7b"+
		"\3\2\2\2\u1e7d\u1e81\3\2\2\2\u1e7e\u1e7f\7\u00b8\2\2\u1e7f\u1e80\7\u01c5"+
		"\2\2\u1e80\u1e82\7\u031c\2\2\u1e81\u1e7e\3\2\2\2\u1e81\u1e82\3\2\2\2\u1e82"+
		"\u1e84\3\2\2\2\u1e83\u1e7c\3\2\2\2\u1e83\u1e84\3\2\2\2\u1e84\u1eae\3\2"+
		"\2\2\u1e85\u1e86\7\33\2\2\u1e86\u1e93\tg\2\2\u1e87\u1e8a\5\u0342\u01a2"+
		"\2\u1e88\u1e8a\7\u0319\2\2\u1e89\u1e87\3\2\2\2\u1e89\u1e88\3\2\2\2\u1e8a"+
		"\u1e91\3\2\2\2\u1e8b\u1e8c\7\u00b8\2\2\u1e8c\u1e8d\7\u0333\2\2\u1e8d\u1e8e"+
		"\7\u0142\2\2\u1e8e\u1e8f\7\u0324\2\2\u1e8f\u1e90\t\b\2\2\u1e90\u1e92\7"+
		"\u0334\2\2\u1e91\u1e8b\3\2\2\2\u1e91\u1e92\3\2\2\2\u1e92\u1e94\3\2\2\2"+
		"\u1e93\u1e89\3\2\2\2\u1e93\u1e94\3\2\2\2\u1e94\u1eae\3\2\2\2\u1e95\u1e97"+
		"\7\33\2\2\u1e96\u1e98\7\u030a\2\2\u1e97\u1e96\3\2\2\2\u1e97\u1e98\3\2"+
		"\2\2\u1e98\u1eae\3\2\2\2\u1e99\u1e9a\7\33\2\2\u1e9a\u1eae\5\u0342\u01a2"+
		"\2\u1e9b\u1e9c\7\u008d\2\2\u1e9c\u1eae\5\u0342\u01a2\2\u1e9d\u1e9e\7\u008d"+
		"\2\2\u1e9e\u1ea1\tg\2\2\u1e9f\u1ea2\5\u0342\u01a2\2\u1ea0\u1ea2\7\u0319"+
		"\2\2\u1ea1\u1e9f\3\2\2\2\u1ea1\u1ea0\3\2\2\2\u1ea1\u1ea2\3\2\2\2\u1ea2"+
		"\u1eae\3\2\2\2\u1ea3\u1ea5\7\u008d\2\2\u1ea4\u1ea6\7\u030a\2\2\u1ea5\u1ea4"+
		"\3\2\2\2\u1ea5\u1ea6\3\2\2\2\u1ea6\u1eae\3\2\2\2\u1ea7\u1ea8\7\u0091\2"+
		"\2\u1ea8\u1eab\tg\2\2\u1ea9\u1eac\5\u0342\u01a2\2\u1eaa\u1eac\7\u0319"+
		"\2\2\u1eab\u1ea9\3\2\2\2\u1eab\u1eaa\3\2\2\2\u1eab\u1eac\3\2\2\2\u1eac"+
		"\u1eae\3\2\2\2\u1ead\u1e71\3\2\2\2\u1ead\u1e78\3\2\2\2\u1ead\u1e85\3\2"+
		"\2\2\u1ead\u1e95\3\2\2\2\u1ead\u1e99\3\2\2\2\u1ead\u1e9b\3\2\2\2\u1ead"+
		"\u1e9d\3\2\2\2\u1ead\u1ea3\3\2\2\2\u1ead\u1ea7\3\2\2\2\u1eae\u025b\3\2"+
		"\2\2\u1eaf\u1eb0\7K\2\2\u1eb0\u025d\3\2\2\2\u1eb1\u1eb2\7\u00af\2\2\u1eb2"+
		"\u1eb3\5\u0342\u01a2\2\u1eb3\u025f\3\2\2\2\u1eb4\u1eb6\7\u009a\2\2\u1eb5"+
		"\u1eb7\7\u031c\2\2\u1eb6\u1eb5\3\2\2\2\u1eb6\u1eb7\3\2\2\2\u1eb7\u0261"+
		"\3\2\2\2\u1eb8\u1eb9\7+\2\2\u1eb9\u1ebe\5\u0344\u01a3\2\u1eba\u1ebb\7"+
		"\u0333\2\2\u1ebb\u1ebc\5\u02f0\u0179\2\u1ebc\u1ebd\7\u0334\2\2\u1ebd\u1ebf"+
		"\3\2\2\2\u1ebe\u1eba\3\2\2\2\u1ebe\u1ebf\3\2\2\2\u1ebf\u1ec2\3\2\2\2\u1ec0"+
		"\u1ec1\7\u00b8\2\2\u1ec1\u1ec3\5~@\2\u1ec2\u1ec0\3\2\2\2\u1ec2\u1ec3\3"+
		"\2\2\2\u1ec3\u0263\3\2\2\2\u1ec4\u1ec5\7=\2\2\u1ec5\u1ec6\7\b\2\2\u1ec6"+
		"\u1ec7\th\2\2\u1ec7\u0265\3\2\2\2\u1ec8\u1eca\7\u0319\2\2\u1ec9\u1ecb"+
		"\7\b\2\2\u1eca\u1ec9\3\2\2\2\u1eca\u1ecb\3\2\2\2\u1ecb\u1ecc\3\2\2\2\u1ecc"+
		"\u1ecf\5\u0336\u019c\2\u1ecd\u1ece\7\u0324\2\2\u1ece\u1ed0\5\u0290\u0149"+
		"\2\u1ecf\u1ecd\3\2\2\2\u1ecf\u1ed0\3\2\2\2\u1ed0\u0267\3\2\2\2\u1ed1\u1ed2"+
		"\7\u030c\2\2\u1ed2\u1ed4\7\u0333\2\2\u1ed3\u1ed5\ti\2\2\u1ed4\u1ed3\3"+
		"\2\2\2\u1ed4\u1ed5\3\2\2\2\u1ed5\u1ed6\3\2\2\2\u1ed6\u1ed7\5\u026a\u0136"+
		"\2\u1ed7\u1ed8\7\u0334\2\2\u1ed8\u0269\3\2\2\2\u1ed9\u1eda\7\u031b\2\2"+
		"\u1eda\u1edb\7\u0330\2\2\u1edb\u1edc\7\u031b\2\2\u1edc\u026b\3\2\2\2\u1edd"+
		"\u1ee2\5\u026e\u0138\2\u1ede\u1edf\7\u0335\2\2\u1edf\u1ee1\5\u026e\u0138"+
		"\2\u1ee0\u1ede\3\2\2\2\u1ee1\u1ee4\3\2\2\2\u1ee2\u1ee0\3\2\2\2\u1ee2\u1ee3"+
		"\3\2\2\2\u1ee3\u026d\3\2\2\2\u1ee4\u1ee2\3\2\2\2\u1ee5\u1ee9\5\u0342\u01a2"+
		"\2\u1ee6\u1eea\5\u0336\u019c\2\u1ee7\u1ee8\7\b\2\2\u1ee8\u1eea\5\u0290"+
		"\u0149\2\u1ee9\u1ee6\3\2\2\2\u1ee9\u1ee7\3\2\2\2\u1eea\u1eee\3\2\2\2\u1eeb"+
		"\u1eed\5\u0274\u013b\2\u1eec\u1eeb\3\2\2\2\u1eed\u1ef0\3\2\2\2\u1eee\u1eec"+
		"\3\2\2\2\u1eee\u1eef\3\2\2\2\u1eef\u1ef4\3\2\2\2\u1ef0\u1eee\3\2\2\2\u1ef1"+
		"\u1ef5\7\u01c8\2\2\u1ef2\u1ef3\7f\2\2\u1ef3\u1ef5\7\u01c8\2\2\u1ef4\u1ef1"+
		"\3\2\2\2\u1ef4\u1ef2\3\2\2\2\u1ef4\u1ef5\3\2\2\2\u1ef5\u1ef9\3\2\2\2\u1ef6"+
		"\u1ef9\5\u027a\u013e\2\u1ef7\u1ef9\5\u0270\u0139\2\u1ef8\u1ee5\3\2\2\2"+
		"\u1ef8\u1ef6\3\2\2\2\u1ef8\u1ef7\3\2\2\2\u1ef9\u026f\3\2\2\2\u1efa\u1efb"+
		"\7U\2\2\u1efb\u1efd\5\u0342\u01a2\2\u1efc\u1efe\5\u0320\u0191\2\u1efd"+
		"\u1efc\3\2\2\2\u1efd\u1efe\3\2\2\2\u1efe\u1f00\3\2\2\2\u1eff\u1f01\7\u018b"+
		"\2\2\u1f00\u1eff\3\2\2\2\u1f00\u1f01\3\2\2\2\u1f01\u1f02\3\2\2\2\u1f02"+
		"\u1f03\5\u0182\u00c2\2\u1f03\u0271\3\2\2\2\u1f04\u1f08\5\u0342\u01a2\2"+
		"\u1f05\u1f09\5\u0336\u019c\2\u1f06\u1f07\7\b\2\2\u1f07\u1f09\5\u0290\u0149"+
		"\2\u1f08\u1f05\3\2\2\2\u1f08\u1f06\3\2\2\2\u1f09\u1f0d\3\2\2\2\u1f0a\u1f0c"+
		"\5\u0274\u013b\2\u1f0b\u1f0a\3\2\2\2\u1f0c\u1f0f\3\2\2\2\u1f0d\u1f0b\3"+
		"\2\2\2\u1f0d\u1f0e\3\2\2\2\u1f0e\u0273\3\2\2\2\u1f0f\u1f0d\3\2\2\2\u1f10"+
		"\u1f30\7\u0233\2\2\u1f11\u1f30\7\u02b8\2\2\u1f12\u1f13\7\31\2\2\u1f13"+
		"\u1f30\5\u0342\u01a2\2\u1f14\u1f30\7\u008f\2\2\u1f15\u1f17\7f\2\2\u1f16"+
		"\u1f15\3\2\2\2\u1f16\u1f17\3\2\2\2\u1f17\u1f18\3\2\2\2\u1f18\u1f30\7g"+
		"\2\2\u1f19\u1f1b\7P\2\2\u1f1a\u1f1c\5\u0276\u013c\2\u1f1b\u1f1a\3\2\2"+
		"\2\u1f1b\u1f1c\3\2\2\2\u1f1c\u1f1e\3\2\2\2\u1f1d\u1f1f\5\u0190\u00c9\2"+
		"\u1f1e\u1f1d\3\2\2\2\u1f1e\u1f1f\3\2\2\2\u1f1f\u1f30\3\2\2\2\u1f20\u1f21"+
		"\7\35\2\2\u1f21\u1f23\5\u0342\u01a2\2\u1f22\u1f20\3\2\2\2\u1f22\u1f23"+
		"\3\2\2\2\u1f23\u1f24\3\2\2\2\u1f24\u1f30\5\u0278\u013d\2\u1f25\u1f26\7"+
		"\35\2\2\u1f26\u1f28\5\u0342\u01a2\2\u1f27\u1f25\3\2\2\2\u1f27\u1f28\3"+
		"\2\2\2\u1f28\u1f29\3\2\2\2\u1f29\u1f2a\7.\2\2\u1f2a\u1f2d\5\u0290\u0149"+
		"\2\u1f2b\u1f2c\7\u00b8\2\2\u1f2c\u1f2e\7\u00b1\2\2\u1f2d\u1f2b\3\2\2\2"+
		"\u1f2d\u1f2e\3\2\2\2\u1f2e\u1f30\3\2\2\2\u1f2f\u1f10\3\2\2\2\u1f2f\u1f11"+
		"\3\2\2\2\u1f2f\u1f12\3\2\2\2\u1f2f\u1f14\3\2\2\2\u1f2f\u1f16\3\2\2\2\u1f2f"+
		"\u1f19\3\2\2\2\u1f2f\u1f22\3\2\2\2\u1f2f\u1f27\3\2\2\2\u1f30\u0275\3\2"+
		"\2\2\u1f31\u1f32\7\u0333\2\2\u1f32\u1f33\7\u031a\2\2\u1f33\u1f34\7\u0335"+
		"\2\2\u1f34\u1f35\7\u031a\2\2\u1f35\u1f36\7\u0334\2\2\u1f36\u0277\3\2\2"+
		"\2\u1f37\u1f38\7{\2\2\u1f38\u1f3b\7\\\2\2\u1f39\u1f3b\7\u00ab\2\2\u1f3a"+
		"\u1f37\3\2\2\2\u1f3a\u1f39\3\2\2\2\u1f3b\u1f3d\3\2\2\2\u1f3c\u1f3e\5\u0320"+
		"\u0191\2\u1f3d\u1f3c\3\2\2\2\u1f3d\u1f3e\3\2\2\2\u1f3e\u1f40\3\2\2\2\u1f3f"+
		"\u1f41\7\u018b\2\2\u1f40\u1f3f\3\2\2\2\u1f40\u1f41\3\2\2\2\u1f41\u1f43"+
		"\3\2\2\2\u1f42\u1f44\5\u0282\u0142\2\u1f43\u1f42\3\2\2\2\u1f43\u1f44\3"+
		"\2\2\2\u1f44\u1f63\3\2\2\2\u1f45\u1f47\7\24\2\2\u1f46\u1f48\5\u0190\u00c9"+
		"\2\u1f47\u1f46\3\2\2\2\u1f47\u1f48\3\2\2\2\u1f48\u1f49\3\2\2\2\u1f49\u1f4a"+
		"\7\u0333\2\2\u1f4a\u1f4b\5\u02a2\u0152\2\u1f4b\u1f4c\7\u0334\2\2\u1f4c"+
		"\u1f63\3\2\2\2\u1f4d\u1f4e\7E\2\2\u1f4e\u1f50\7\\\2\2\u1f4f\u1f4d\3\2"+
		"\2\2\u1f4f\u1f50\3\2\2\2\u1f50\u1f51\3\2\2\2\u1f51\u1f52\7\u0085\2\2\u1f52"+
		"\u1f57\5\u0310\u0189\2\u1f53\u1f54\7\u0333\2\2\u1f54\u1f55\5\u0342\u01a2"+
		"\2\u1f55\u1f56\7\u0334\2\2\u1f56\u1f58\3\2\2\2\u1f57\u1f53\3\2\2\2\u1f57"+
		"\u1f58\3\2\2\2\u1f58\u1f5a\3\2\2\2\u1f59\u1f5b\5\u027e\u0140\2\u1f5a\u1f59"+
		"\3\2\2\2\u1f5a\u1f5b\3\2\2\2\u1f5b\u1f5d\3\2\2\2\u1f5c\u1f5e\5\u0280\u0141"+
		"\2\u1f5d\u1f5c\3\2\2\2\u1f5d\u1f5e\3\2\2\2\u1f5e\u1f60\3\2\2\2\u1f5f\u1f61"+
		"\5\u0190\u00c9\2\u1f60\u1f5f\3\2\2\2\u1f60\u1f61\3\2\2\2\u1f61\u1f63\3"+
		"\2\2\2\u1f62\u1f3a\3\2\2\2\u1f62\u1f45\3\2\2\2\u1f62\u1f4f\3\2\2\2\u1f63"+
		"\u0279\3\2\2\2\u1f64\u1f65\7\35\2\2\u1f65\u1f67\5\u0342\u01a2\2\u1f66"+
		"\u1f64\3\2\2\2\u1f66\u1f67\3\2\2\2\u1f67\u1f68\3\2\2\2\u1f68\u1f69\5\u027c"+
		"\u013f\2\u1f69\u027b\3\2\2\2\u1f6a\u1f6b\7{\2\2\u1f6b\u1f6e\7\\\2\2\u1f6c"+
		"\u1f6e\7\u00ab\2\2\u1f6d\u1f6a\3\2\2\2\u1f6d\u1f6c\3\2\2\2\u1f6e\u1f70"+
		"\3\2\2\2\u1f6f\u1f71\5\u0320\u0191\2\u1f70\u1f6f\3\2\2\2\u1f70\u1f71\3"+
		"\2\2\2\u1f71\u1f73\3\2\2\2\u1f72\u1f74\7\u018b\2\2\u1f73\u1f72\3\2\2\2"+
		"\u1f73\u1f74\3\2\2\2\u1f74\u1f75\3\2\2\2\u1f75\u1f76\7\u0333\2\2\u1f76"+
		"\u1f77\5\u0314\u018b\2\u1f77\u1f79\7\u0334\2\2\u1f78\u1f7a\5\u0282\u0142"+
		"\2\u1f79\u1f78\3\2\2\2\u1f79\u1f7a\3\2\2\2\u1f7a\u1f7d\3\2\2\2\u1f7b\u1f7c"+
		"\7l\2\2\u1f7c\u1f7e\5\u0342\u01a2\2\u1f7d\u1f7b\3\2\2\2\u1f7d\u1f7e\3"+
		"\2\2\2\u1f7e\u1fa3\3\2\2\2\u1f7f\u1f81\7\24\2\2\u1f80\u1f82\5\u0190\u00c9"+
		"\2\u1f81\u1f80\3\2\2\2\u1f81\u1f82\3\2\2\2\u1f82\u1f83\3\2\2\2\u1f83\u1f84"+
		"\7\u0333\2\2\u1f84\u1f85\5\u02a2\u0152\2\u1f85\u1f86\7\u0334\2\2\u1f86"+
		"\u1fa3\3\2\2\2\u1f87\u1f88\7.\2\2\u1f88\u1f89\5\u0290\u0149\2\u1f89\u1f8a"+
		"\7D\2\2\u1f8a\u1f8b\5\u0342\u01a2\2\u1f8b\u1fa3\3\2\2\2\u1f8c\u1f8d\7"+
		"E\2\2\u1f8d\u1f8e\7\\\2\2\u1f8e\u1f8f\7\u0333\2\2\u1f8f\u1f90\5\u031a"+
		"\u018e\2\u1f90\u1f91\7\u0334\2\2\u1f91\u1f92\7\u0085\2\2\u1f92\u1f97\5"+
		"\u0310\u0189\2\u1f93\u1f94\7\u0333\2\2\u1f94\u1f95\5\u031a\u018e\2\u1f95"+
		"\u1f96\7\u0334\2\2\u1f96\u1f98\3\2\2\2\u1f97\u1f93\3\2\2\2\u1f97\u1f98"+
		"\3\2\2\2\u1f98\u1f9a\3\2\2\2\u1f99\u1f9b\5\u027e\u0140\2\u1f9a\u1f99\3"+
		"\2\2\2\u1f9a\u1f9b\3\2\2\2\u1f9b\u1f9d\3\2\2\2\u1f9c\u1f9e\5\u0280\u0141"+
		"\2\u1f9d\u1f9c\3\2\2\2\u1f9d\u1f9e\3\2\2\2\u1f9e\u1fa0\3\2\2\2\u1f9f\u1fa1"+
		"\5\u0190\u00c9\2\u1fa0\u1f9f\3\2\2\2\u1fa0\u1fa1\3\2\2\2\u1fa1\u1fa3\3"+
		"\2\2\2\u1fa2\u1f6d\3\2\2\2\u1fa2\u1f7f\3\2\2\2\u1fa2\u1f87\3\2\2\2\u1fa2"+
		"\u1f8c\3\2\2\2\u1fa3\u027d\3\2\2\2\u1fa4\u1fa5\7l\2\2\u1fa5\u1fad\7/\2"+
		"\2\u1fa6\u1fa7\7\u0204\2\2\u1fa7\u1fae\7\u00c7\2\2\u1fa8\u1fae\7\22\2"+
		"\2\u1fa9\u1faa\7\u0099\2\2\u1faa\u1fae\7g\2\2\u1fab\u1fac\7\u0099\2\2"+
		"\u1fac\u1fae\7.\2\2\u1fad\u1fa6\3\2\2\2\u1fad\u1fa8\3\2\2\2\u1fad\u1fa9"+
		"\3\2\2\2\u1fad\u1fab\3\2\2\2\u1fae\u027f\3\2\2\2\u1faf\u1fb0\7l\2\2\u1fb0"+
		"\u1fb8\7\u00ad\2\2\u1fb1\u1fb2\7\u0204\2\2\u1fb2\u1fb9\7\u00c7\2\2\u1fb3"+
		"\u1fb9\7\22\2\2\u1fb4\u1fb5\7\u0099\2\2\u1fb5\u1fb9\7g\2\2\u1fb6\u1fb7"+
		"\7\u0099\2\2\u1fb7\u1fb9\7.\2\2\u1fb8\u1fb1\3\2\2\2\u1fb8\u1fb3\3\2\2"+
		"\2\u1fb8\u1fb4\3\2\2\2\u1fb8\u1fb6\3\2\2\2\u1fb9\u0281\3\2\2\2\u1fba\u1fbb"+
		"\7\u00b8\2\2\u1fbb\u1fbc\7\u0333\2\2\u1fbc\u1fc1\5\u0284\u0143\2\u1fbd"+
		"\u1fbe\7\u0335\2\2\u1fbe\u1fc0\5\u0284\u0143\2\u1fbf\u1fbd\3\2\2\2\u1fc0"+
		"\u1fc3\3\2\2\2\u1fc1\u1fbf\3\2\2\2\u1fc1\u1fc2\3\2\2\2\u1fc2\u1fc4\3\2"+
		"\2\2\u1fc3\u1fc1\3\2\2\2\u1fc4\u1fc5\7\u0334\2\2\u1fc5\u0283\3\2\2\2\u1fc6"+
		"\u1fc7\5\u0344\u01a3\2\u1fc7\u1fc8\7\u0324\2\2\u1fc8\u1fc9\5\u0286\u0144"+
		"\2\u1fc9\u0285\3\2\2\2\u1fca\u1fce\5\u0344\u01a3\2\u1fcb\u1fce\5\u031e"+
		"\u0190\2\u1fcc\u1fce\7\u031a\2\2\u1fcd\u1fca\3\2\2\2\u1fcd\u1fcb\3\2\2"+
		"\2\u1fcd\u1fcc\3\2\2\2\u1fce\u0287\3\2\2\2\u1fcf\u1fd3\7)\2\2\u1fd0\u1fd2"+
		"\5\u028a\u0146\2\u1fd1\u1fd0\3\2\2\2\u1fd2\u1fd5\3\2\2\2\u1fd3\u1fd1\3"+
		"\2\2\2\u1fd3\u1fd4\3\2\2\2\u1fd4\u1fd6\3\2\2\2\u1fd5\u1fd3\3\2\2\2\u1fd6"+
		"\u1fd7\7D\2\2\u1fd7\u1fe2\5\u0142\u00a2\2\u1fd8\u1fe0\7D\2\2\u1fd9\u1fda"+
		"\7\u0082\2\2\u1fda\u1fe1\7\u021c\2\2\u1fdb\u1fde\7\u00ad\2\2\u1fdc\u1fdd"+
		"\7i\2\2\u1fdd\u1fdf\5\u031a\u018e\2\u1fde\u1fdc\3\2\2\2\u1fde\u1fdf\3"+
		"\2\2\2\u1fdf\u1fe1\3\2\2\2\u1fe0\u1fd9\3\2\2\2\u1fe0\u1fdb\3\2\2\2\u1fe1"+
		"\u1fe3\3\2\2\2\u1fe2\u1fd8\3\2\2\2\u1fe2\u1fe3\3\2\2\2\u1fe3\u0289\3\2"+
		"\2\2\u1fe4\u1fe5\tj\2\2\u1fe5\u028b\3\2\2\2\u1fe6\u1fe7\7\u0099\2\2\u1fe7"+
		"\u1fec\5\u0342\u01a2\2\u1fe8\u1fed\5\u0342\u01a2\2\u1fe9\u1fed\5\u028e"+
		"\u0148\2\u1fea\u1fed\7l\2\2\u1feb\u1fed\7j\2\2\u1fec\u1fe8\3\2\2\2\u1fec"+
		"\u1fe9\3\2\2\2\u1fec\u1fea\3\2\2\2\u1fec\u1feb\3\2\2\2\u1fed\u2015\3\2"+
		"\2\2\u1fee\u1fef\7\u0099\2\2\u1fef\u1ff0\7\u00a6\2\2\u1ff0\u1ff1\7\u01a4"+
		"\2\2\u1ff1\u1ffb\7\u01b1\2\2\u1ff2\u1ff3\7\u0082\2\2\u1ff3\u1ffc\7\u02f3"+
		"\2\2\u1ff4\u1ff5\7\u0082\2\2\u1ff5\u1ffc\7\u011a\2\2\u1ff6\u1ff7\7\u026b"+
		"\2\2\u1ff7\u1ffc\7\u0082\2\2\u1ff8\u1ffc\7\u02b5\2\2\u1ff9\u1ffc\7\u02a3"+
		"\2\2\u1ffa\u1ffc\7\u031a\2\2\u1ffb\u1ff2\3\2\2\2\u1ffb\u1ff4\3\2\2\2\u1ffb"+
		"\u1ff6\3\2\2\2\u1ffb\u1ff8\3\2\2\2\u1ffb\u1ff9\3\2\2\2\u1ffb\u1ffa\3\2"+
		"\2\2\u1ffc\u2015\3\2\2\2\u1ffd\u1ffe\7\u0099\2\2\u1ffe\u1fff\7Q\2\2\u1fff"+
		"\u2000\5\u0310\u0189\2\u2000\u2001\5\u031e\u0190\2\u2001\u2015\3\2\2\2"+
		"\u2002\u2003\7\u0099\2\2\u2003\u2004\7\u00a1\2\2\u2004\u2015\7\u031a\2"+
		"\2\u2005\u2006\7\u0099\2\2\u2006\u2009\7\u01af\2\2\u2007\u200a\5\u0342"+
		"\u01a2\2\u2008\u200a\5\u028e\u0148\2\u2009\u2007\3\2\2\2\u2009\u2008\3"+
		"\2\2\2\u200a\u2015\3\2\2\2\u200b\u200c\7\u0099\2\2\u200c\u200d\7\u009d"+
		"\2\2\u200d\u200e\tk\2\2\u200e\u2015\5\u031e\u0190\2\u200f\u2010\7\u0099"+
		"\2\2\u2010\u2015\5\u0292\u014a\2\u2011\u2012\7\u0099\2\2\u2012\u2013\7"+
		"\u008e\2\2\u2013\u2015\5,\27\2\u2014\u1fe6\3\2\2\2\u2014\u1fee\3\2\2\2"+
		"\u2014\u1ffd\3\2\2\2\u2014\u2002\3\2\2\2\u2014\u2005\3\2\2\2\u2014\u200b"+
		"\3\2\2\2\u2014\u200f\3\2\2\2\u2014\u2011\3\2\2\2\u2015\u028d\3\2\2\2\u2016"+
		"\u2019\5\u033c\u019f\2\u2017\u2019\7\u0319\2\2\u2018\u2016\3\2\2\2\u2018"+
		"\u2017\3\2\2\2\u2019\u028f\3\2\2\2\u201a\u201b\b\u0149\1\2\u201b\u201c"+
		"\7\u0333\2\2\u201c\u201d\5\u0290\u0149\2\u201d\u201e\7\u0334\2\2\u201e"+
		"\u203a\3\2\2\2\u201f\u2020\tl\2\2\u2020\u203a\5\u0290\u0149\21\u2021\u203a"+
		"\5\u02da\u016e\2\u2022\u2023\5\u0292\u014a\2\u2023\u2024\7\u0330\2\2\u2024"+
		"\u2025\5\u02da\u016e\2\u2025\u203a\3\2\2\2\u2026\u202a\5\u0312\u018a\2"+
		"\u2027\u2028\7\u0337\2\2\u2028\u2029\7\u0337\2\2\u2029\u202b\5\u02da\u016e"+
		"\2\u202a\u2027\3\2\2\2\u202a\u202b\3\2\2\2\u202b\u203a\3\2\2\2\u202c\u202d"+
		"\5\u0342\u01a2\2\u202d\u202e\7\u0337\2\2\u202e\u202f\7\u0337\2\2\u202f"+
		"\u2030\5\u0342\u01a2\2\u2030\u203a\3\2\2\2\u2031\u203a\5\u0298\u014d\2"+
		"\u2032\u203a\5\u02f4\u017b\2\u2033\u203a\5\u0294\u014b\2\u2034\u2035\7"+
		"\u0333\2\2\u2035\u2036\5\u0144\u00a3\2\u2036\u2037\7\u0334\2\2\u2037\u203a"+
		"\3\2\2\2\u2038\u203a\5\u0296\u014c\2\u2039\u201a\3\2\2\2\u2039\u201f\3"+
		"\2\2\2\u2039\u2021\3\2\2\2\u2039\u2022\3\2\2\2\u2039\u2026\3\2\2\2\u2039"+
		"\u202c\3\2\2\2\u2039\u2031\3\2\2\2\u2039\u2032\3\2\2\2\u2039\u2033\3\2"+
		"\2\2\u2039\u2034\3\2\2\2\u2039\u2038\3\2\2\2\u203a\u204d\3\2\2\2\u203b"+
		"\u203c\f\20\2\2\u203c\u203d\tm\2\2\u203d\u204c\5\u0290\u0149\21\u203e"+
		"\u203f\f\17\2\2\u203f\u2040\tn\2\2\u2040\u204c\5\u0290\u0149\20\u2041"+
		"\u2042\f\16\2\2\u2042\u2043\7\u0324\2\2\u2043\u204c\5\u0290\u0149\17\u2044"+
		"\u2045\f\r\2\2\u2045\u2046\5\u0348\u01a5\2\u2046\u2047\5\u0290\u0149\16"+
		"\u2047\u204c\3\2\2\2\u2048\u2049\f\13\2\2\u2049\u204a\7\31\2\2\u204a\u204c"+
		"\5\u0342\u01a2\2\u204b\u203b\3\2\2\2\u204b\u203e\3\2\2\2\u204b\u2041\3"+
		"\2\2\2\u204b\u2044\3\2\2\2\u204b\u2048\3\2\2\2\u204c\u204f\3\2\2\2\u204d"+
		"\u204b\3\2\2\2\u204d\u204e\3\2\2\2\u204e\u0291\3\2\2\2\u204f\u204d\3\2"+
		"\2\2\u2050\u2051\b\u014a\1\2\u2051\u2068\5\u02da\u016e\2\u2052\u2053\5"+
		"\u0312\u018a\2\u2053\u2054\7\u0337\2\2\u2054\u2055\7\u0337\2\2\u2055\u2056"+
		"\5\u02da\u016e\2\u2056\u2068\3\2\2\2\u2057\u2058\5\u0342\u01a2\2\u2058"+
		"\u2059\7\u0337\2\2\u2059\u205a\7\u0337\2\2\u205a\u205b\5\u0342\u01a2\2"+
		"\u205b\u2068\3\2\2\2\u205c\u2068\5\u0298\u014d\2\u205d\u2068\5\u02f4\u017b"+
		"\2\u205e\u205f\7\u0333\2\2\u205f\u2060\5\u0290\u0149\2\u2060\u2061\7\u0334"+
		"\2\2\u2061\u2068\3\2\2\2\u2062\u2063\7\u0333\2\2\u2063\u2064\5\u0144\u00a3"+
		"\2\u2064\u2065\7\u0334\2\2\u2065\u2068\3\2\2\2\u2066\u2068\7\u0319\2\2"+
		"\u2067\u2050\3\2\2\2\u2067\u2052\3\2\2\2\u2067\u2057\3\2\2\2\u2067\u205c"+
		"\3\2\2\2\u2067\u205d\3\2\2\2\u2067\u205e\3\2\2\2\u2067\u2062\3\2\2\2\u2067"+
		"\u2066\3\2\2\2\u2068\u206e\3\2\2\2\u2069\u206a\f\13\2\2\u206a\u206b\7"+
		"\u0330\2\2\u206b\u206d\5\u02da\u016e\2\u206c\u2069\3\2\2\2\u206d\u2070"+
		"\3\2\2\2\u206e\u206c\3\2\2\2\u206e\u206f\3\2\2\2\u206f\u0293\3\2\2\2\u2070"+
		"\u206e\3\2\2\2\u2071\u2072\7\u0314\2\2\u2072\u2073\5\u0342\u01a2\2\u2073"+
		"\u2074\5\u0290\u0149\2\u2074\u2075\7\u0315\2\2\u2075\u0295\3\2\2\2\u2076"+
		"\u2084\7.\2\2\u2077\u2084\7g\2\2\u2078\u2084\7\u0319\2\2\u2079\u2084\7"+
		"\u031c\2\2\u207a\u2084\7\u031d\2\2\u207b\u2084\7\u031a\2\2\u207c\u2084"+
		"\7\u031f\2\2\u207d\u2084\7\u031e\2\2\u207e\u207f\7\u0332\2\2\u207f\u2084"+
		"\to\2\2\u2080\u2084\7\u02ea\2\2\u2081\u2084\7\u016e\2\2\u2082\u2084\7"+
		"\u0320\2\2\u2083\u2076\3\2\2\2\u2083\u2077\3\2\2\2\u2083\u2078\3\2\2\2"+
		"\u2083\u2079\3\2\2\2\u2083\u207a\3\2\2\2\u2083\u207b\3\2\2\2\u2083\u207c"+
		"\3\2\2\2\u2083\u207d\3\2\2\2\u2083\u207e\3\2\2\2\u2083\u2080\3\2\2\2\u2083"+
		"\u2081\3\2\2\2\u2083\u2082\3\2\2\2\u2084\u0297\3\2\2\2\u2085\u2086\7\23"+
		"\2\2\u2086\u2088\5\u0290\u0149\2\u2087\u2089\5\u02dc\u016f\2\u2088\u2087"+
		"\3\2\2\2\u2089\u208a\3\2\2\2\u208a\u2088\3\2\2\2\u208a\u208b\3\2\2\2\u208b"+
		"\u208e\3\2\2\2\u208c\u208d\78\2\2\u208d\u208f\5\u0290\u0149\2\u208e\u208c"+
		"\3\2\2\2\u208e\u208f\3\2\2\2\u208f\u2090\3\2\2\2\u2090\u2091\79\2\2\u2091"+
		"\u209f\3\2\2\2\u2092\u2094\7\23\2\2\u2093\u2095\5\u02de\u0170\2\u2094"+
		"\u2093\3\2\2\2\u2095\u2096\3\2\2\2\u2096\u2094\3\2\2\2\u2096\u2097\3\2"+
		"\2\2\u2097\u209a\3\2\2\2\u2098\u2099\78\2\2\u2099\u209b\5\u0290\u0149"+
		"\2\u209a\u2098\3\2\2\2\u209a\u209b\3\2\2\2\u209b\u209c\3\2\2\2\u209c\u209d"+
		"\79\2\2\u209d\u209f\3\2\2\2\u209e\u2085\3\2\2\2\u209e\u2092\3\2\2\2\u209f"+
		"\u0299\3\2\2\2\u20a0\u20a9\7g\2\2\u20a1\u20a9\5\u033c\u019f\2\u20a2\u20a9"+
		"\5\u02da\u016e\2\u20a3\u20a9\7\u0319\2\2\u20a4\u20a5\7\u0333\2\2\u20a5"+
		"\u20a6\5\u029a\u014e\2\u20a6\u20a7\7\u0334\2\2\u20a7\u20a9\3\2\2\2\u20a8"+
		"\u20a0\3\2\2\2\u20a8\u20a1\3\2\2\2\u20a8\u20a2\3\2\2\2\u20a8\u20a3\3\2"+
		"\2\2\u20a8\u20a4\3\2\2\2\u20a9\u029b\3\2\2\2\u20aa\u20ad\7\u00b8\2\2\u20ab"+
		"\u20ac\7\u030e\2\2\u20ac\u20ae\7\u0335\2\2\u20ad\u20ab\3\2\2\2\u20ad\u20ae"+
		"\3\2\2\2\u20ae\u20af\3\2\2\2\u20af\u20b4\5\u029e\u0150\2\u20b0\u20b1\7"+
		"\u0335\2\2\u20b1\u20b3\5\u029e\u0150\2\u20b2\u20b0\3\2\2\2\u20b3\u20b6"+
		"\3\2\2\2\u20b4\u20b2\3\2\2\2\u20b4\u20b5\3\2\2\2\u20b5\u029d\3\2\2\2\u20b6"+
		"\u20b4\3\2\2\2\u20b7\u20bc\5\u0342\u01a2\2\u20b8\u20b9\7\u0333\2\2\u20b9"+
		"\u20ba\5\u031a\u018e\2\u20ba\u20bb\7\u0334\2\2\u20bb\u20bd\3\2\2\2\u20bc"+
		"\u20b8\3\2\2\2\u20bc\u20bd\3\2\2\2\u20bd\u20be\3\2\2\2\u20be\u20bf\7\b"+
		"\2\2\u20bf\u20c0\7\u0333\2\2\u20c0\u20c1\5\u0142\u00a2\2\u20c1\u20c2\7"+
		"\u0334\2\2\u20c2\u029f\3\2\2\2\u20c3\u20c6\5\u0312\u018a\2\u20c4\u20c6"+
		"\7\u0319\2\2\u20c5\u20c3\3\2\2\2\u20c5\u20c4\3\2\2\2\u20c6\u20c9\3\2\2"+
		"\2\u20c7\u20ca\7\u0324\2\2\u20c8\u20ca\5\u0348\u01a5\2\u20c9\u20c7\3\2"+
		"\2\2\u20c9\u20c8\3\2\2\2\u20ca\u20cb\3\2\2\2\u20cb\u20d4\5\u0290\u0149"+
		"\2\u20cc\u20cd\5\u0342\u01a2\2\u20cd\u20ce\7\u0330\2\2\u20ce\u20cf\5\u0342"+
		"\u01a2\2\u20cf\u20d0\7\u0333\2\2\u20d0\u20d1\5\u02f0\u0179\2\u20d1\u20d2"+
		"\7\u0334\2\2\u20d2\u20d4\3\2\2\2\u20d3\u20c5\3\2\2\2\u20d3\u20cc\3\2\2"+
		"\2\u20d4\u02a1\3\2\2\2\u20d5\u20da\5\u02a4\u0153\2\u20d6\u20d7\7s\2\2"+
		"\u20d7\u20d9\5\u02a4\u0153\2\u20d8\u20d6\3\2\2\2\u20d9\u20dc\3\2\2\2\u20da"+
		"\u20d8\3\2\2\2\u20da\u20db\3\2\2\2\u20db\u02a3\3\2\2\2\u20dc\u20da\3\2"+
		"\2\2\u20dd\u20e2\5\u02a6\u0154\2\u20de\u20df\7\6\2\2\u20df\u20e1\5\u02a6"+
		"\u0154\2\u20e0\u20de\3\2\2\2\u20e1\u20e4\3\2\2\2\u20e2\u20e0\3\2\2\2\u20e2"+
		"\u20e3\3\2\2\2\u20e3\u02a5\3\2\2\2\u20e4\u20e2\3\2\2\2\u20e5\u20e7\7f"+
		"\2\2\u20e6\u20e5\3\2\2\2\u20e6\u20e7\3\2\2\2\u20e7\u20e8\3\2\2\2\u20e8"+
		"\u20e9\5\u02a8\u0155\2\u20e9\u02a7\3\2\2\2\u20ea\u20eb\7>\2\2\u20eb\u20ec"+
		"\7\u0333\2\2\u20ec\u20ed\5\u0142\u00a2\2\u20ed\u20ee\7\u0334\2\2\u20ee"+
		"\u2128\3\2\2\2\u20ef\u20f0\5\u0290\u0149\2\u20f0\u20f1\5\u0346\u01a4\2"+
		"\u20f1\u20f2\5\u0290\u0149\2\u20f2\u2128\3\2\2\2\u20f3\u20f4\5\u0290\u0149"+
		"\2\u20f4\u20f5\5\u0346\u01a4\2\u20f5\u20f6\tp\2\2\u20f6\u20f7\7\u0333"+
		"\2\2\u20f7\u20f8\5\u0142\u00a2\2\u20f8\u20f9\7\u0334\2\2\u20f9\u2128\3"+
		"\2\2\2\u20fa\u20fc\5\u0290\u0149\2\u20fb\u20fd\7f\2\2\u20fc\u20fb\3\2"+
		"\2\2\u20fc\u20fd\3\2\2\2\u20fd\u20fe\3\2\2\2\u20fe\u20ff\7\r\2\2\u20ff"+
		"\u2100\5\u0290\u0149\2\u2100\u2101\7\6\2\2\u2101\u2102\5\u0290\u0149\2"+
		"\u2102\u2128\3\2\2\2\u2103\u2105\5\u0290\u0149\2\u2104\u2106\7f\2\2\u2105"+
		"\u2104\3\2\2\2\u2105\u2106\3\2\2\2\u2106\u2107\3\2\2\2\u2107\u2108\7T"+
		"\2\2\u2108\u210b\7\u0333\2\2\u2109\u210c\5\u0142\u00a2\2\u210a\u210c\5"+
		"\u02f0\u0179\2\u210b\u2109\3\2\2\2\u210b\u210a\3\2\2\2\u210c\u210d\3\2"+
		"\2\2\u210d\u210e\7\u0334\2\2\u210e\u2128\3\2\2\2\u210f\u2111\5\u0290\u0149"+
		"\2\u2110\u2112\7f\2\2\u2111\u2110\3\2\2\2\u2111\u2112\3\2\2\2\u2112\u2113"+
		"\3\2\2\2\u2113\u2114\7_\2\2\u2114\u2117\5\u0290\u0149\2\u2115\u2116\7"+
		";\2\2\u2116\u2118\5\u0290\u0149\2\u2117\u2115\3\2\2\2\u2117\u2118\3\2"+
		"\2\2\u2118\u2128\3\2\2\2\u2119\u211a\5\u0290\u0149\2\u211a\u211b\7Z\2"+
		"\2\u211b\u211c\5\u0322\u0192\2\u211c\u2128\3\2\2\2\u211d\u211e\7\u0333"+
		"\2\2\u211e\u211f\5\u02a2\u0152\2\u211f\u2120\7\u0334\2\2\u2120\u2128\3"+
		"\2\2\2\u2121\u2122\7\u00ad\2\2\u2122\u2124\7\u0333\2\2\u2123\u2125\5\u02f0"+
		"\u0179\2\u2124\u2123\3\2\2\2\u2124\u2125\3\2\2\2\u2125\u2126\3\2\2\2\u2126"+
		"\u2128\7\u0334\2\2\u2127\u20ea\3\2\2\2\u2127\u20ef\3\2\2\2\u2127\u20f3"+
		"\3\2\2\2\u2127\u20fa\3\2\2\2\u2127\u2103\3\2\2\2\u2127\u210f\3\2\2\2\u2127"+
		"\u2119\3\2\2\2\u2127\u211d\3\2\2\2\u2127\u2121\3\2\2\2\u2128\u02a9\3\2"+
		"\2\2\u2129\u212b\7\u0094\2\2\u212a\u212c\5\u014a\u00a6\2\u212b\u212a\3"+
		"\2\2\2\u212b\u212c\3\2\2\2\u212c\u212e\3\2\2\2\u212d\u212f\5\u02b0\u0159"+
		"\2\u212e\u212d\3\2\2\2\u212e\u212f\3\2\2\2\u212f\u2130\3\2\2\2\u2130\u2133"+
		"\5\u02c2\u0162\2\u2131\u2132\7Y\2\2\u2132\u2134\5\u0310\u0189\2\u2133"+
		"\u2131\3\2\2\2\u2133\u2134\3\2\2\2\u2134\u213e\3\2\2\2\u2135\u2136\7H"+
		"\2\2\u2136\u213b\5\u02ac\u0157\2\u2137\u2138\7\u0335\2\2\u2138\u213a\5"+
		"\u02ac\u0157\2\u2139\u2137\3\2\2\2\u213a\u213d\3\2\2\2\u213b\u2139\3\2"+
		"\2\2\u213b\u213c\3\2\2\2\u213c\u213f\3\2\2\2\u213d\u213b\3\2\2\2\u213e"+
		"\u2135\3\2\2\2\u213e\u213f\3\2\2\2\u213f\u2142\3\2\2\2\u2140\u2141\7\u00b6"+
		"\2\2\u2141\u2143\5\u02a2\u0152\2\u2142\u2140\3\2\2\2\u2142\u2143\3\2\2"+
		"\2\u2143\u2151\3\2\2\2\u2144\u2145\7N\2\2\u2145\u2147\7\21\2\2\u2146\u2148"+
		"\7\4\2\2\u2147\u2146\3\2\2\2\u2147\u2148\3\2\2\2\u2148\u2149\3\2\2\2\u2149"+
		"\u214e\5\u0290\u0149\2\u214a\u214b\7\u0335\2\2\u214b\u214d\5\u0290\u0149"+
		"\2\u214c\u214a\3\2\2\2\u214d\u2150\3\2\2\2\u214e\u214c\3\2\2\2\u214e\u214f"+
		"\3\2\2\2\u214f\u2152\3\2\2\2\u2150\u214e\3\2\2\2\u2151\u2144\3\2\2\2\u2151"+
		"\u2152\3\2\2\2\u2152\u2155\3\2\2\2\u2153\u2154\7O\2\2\u2154\u2156\5\u02a2"+
		"\u0152\2\u2155\u2153\3\2\2\2\u2155\u2156\3\2\2\2\u2156\u2158\3\2\2\2\u2157"+
		"\u2159\5\u02b4\u015b\2\u2158\u2157\3\2\2\2\u2158\u2159\3\2\2\2\u2159\u215c"+
		"\3\2\2\2\u215a\u215c\5\u02ee\u0178\2\u215b\u2129\3\2\2\2\u215b\u215a\3"+
		"\2\2\2\u215c\u02ab\3\2\2\2\u215d\u215e\b\u0157\1\2\u215e\u215f\7\u0333"+
		"\2\2\u215f\u2160\5\u02ac\u0157\2\u2160\u2161\7\u0334\2\2\u2161\u2164\3"+
		"\2\2\2\u2162\u2164\5\u02ae\u0158\2\u2163\u215d\3\2\2\2\u2163\u2162\3\2"+
		"\2\2\u2164\u219d\3\2\2\2\u2165\u2166\f\b\2\2\u2166\u2167\7#\2\2\u2167"+
		"\u2168\7[\2\2\u2168\u219c\5\u02ac\u0157\t\u2169\u216a\f\7\2\2\u216a\u216b"+
		"\7#\2\2\u216b\u216c\7\u00e1\2\2\u216c\u219c\5\u02ac\u0157\b\u216d\u216e"+
		"\f\6\2\2\u216e\u216f\7u\2\2\u216f\u2170\7\u00e1\2\2\u2170\u219c\5\u02ac"+
		"\u0157\7\u2171\u217c\f\t\2\2\u2172\u2178\7V\2\2\u2173\u2175\tq\2\2\u2174"+
		"\u2176\7u\2\2\u2175\u2174\3\2\2\2\u2175\u2176\3\2\2\2\u2176\u2178\3\2"+
		"\2\2\u2177\u2172\3\2\2\2\u2177\u2173\3\2\2\2\u2178\u217a\3\2\2\2\u2179"+
		"\u217b\tr\2\2\u217a\u2179\3\2\2\2\u217a\u217b\3\2\2\2\u217b\u217d\3\2"+
		"\2\2\u217c\u2177\3\2\2\2\u217c\u217d\3\2\2\2\u217d\u217e\3\2\2\2\u217e"+
		"\u217f\7[\2\2\u217f\u2180\5\u02ac\u0157\2\u2180\u2181\7l\2\2\u2181\u2182"+
		"\5\u02a2\u0152\2\u2182\u219c\3\2\2\2\u2183\u2184\f\5\2\2\u2184\u2185\7"+
		"x\2\2\u2185\u2186\7\u0333\2\2\u2186\u2187\5\u02da\u016e\2\u2187\u2188"+
		"\7D\2\2\u2188\u2189\5\u0312\u018a\2\u2189\u218a\7T\2\2\u218a\u218b\5\u02ea"+
		"\u0176\2\u218b\u218c\7\u0334\2\2\u218c\u218d\5\u02e0\u0171\2\u218d\u219c"+
		"\3\2\2\2\u218e\u218f\f\4\2\2\u218f\u2190\7\u00ac\2\2\u2190\u2191\7\u0333"+
		"\2\2\u2191\u2192\5\u0290\u0149\2\u2192\u2193\7D\2\2\u2193\u2194\5\u0312"+
		"\u018a\2\u2194\u2195\7T\2\2\u2195\u2196\7\u0333\2\2\u2196\u2197\5\u02d0"+
		"\u0169\2\u2197\u2198\7\u0334\2\2\u2198\u2199\7\u0334\2\2\u2199\u219a\5"+
		"\u02e0\u0171\2\u219a\u219c\3\2\2\2\u219b\u2165\3\2\2\2\u219b\u2169\3\2"+
		"\2\2\u219b\u216d\3\2\2\2\u219b\u2171\3\2\2\2\u219b\u2183\3\2\2\2\u219b"+
		"\u218e\3\2\2\2\u219c\u219f\3\2\2\2\u219d\u219b\3\2\2\2\u219d\u219e\3\2"+
		"\2\2\u219e\u02ad\3\2\2\2\u219f\u219d\3\2\2\2\u21a0\u21a2\5\u0310\u0189"+
		"\2\u21a1\u21a3\5\u02e0\u0171\2\u21a2\u21a1\3\2\2\2\u21a2\u21a3\3\2\2\2"+
		"\u21a3\u21a5\3\2\2\2\u21a4\u21a6\5\u02e4\u0173\2\u21a5\u21a4\3\2\2\2\u21a5"+
		"\u21a6\3\2\2\2\u21a6\u21ca\3\2\2\2\u21a7\u21a9\5\u02d4\u016b\2\u21a8\u21aa"+
		"\5\u02e0\u0171\2\u21a9\u21a8\3\2\2\2\u21a9\u21aa\3\2\2\2\u21aa\u21ca\3"+
		"\2\2\2\u21ab\u21ac\5\u02d8\u016d\2\u21ac\u21ad\5\u02e0\u0171\2\u21ad\u21ca"+
		"\3\2\2\2\u21ae\u21af\5\u02cc\u0167\2\u21af\u21b0\5\u02e0\u0171\2\u21b0"+
		"\u21ca\3\2\2\2\u21b1\u21b3\5\u02da\u016e\2\u21b2\u21b4\5\u02e0\u0171\2"+
		"\u21b3\u21b2\3\2\2\2\u21b3\u21b4\3\2\2\2\u21b4\u21ca\3\2\2\2\u21b5\u21b7"+
		"\7\u0319\2\2\u21b6\u21b8\5\u02e0\u0171\2\u21b7\u21b6\3\2\2\2\u21b7\u21b8"+
		"\3\2\2\2\u21b8\u21ca\3\2\2\2\u21b9\u21ba\7\u0319\2\2\u21ba\u21bb\7\u0330"+
		"\2\2\u21bb\u21bd\5\u02da\u016e\2\u21bc\u21be\5\u02e0\u0171\2\u21bd\u21bc"+
		"\3\2\2\2\u21bd\u21be\3\2\2\2\u21be\u21ca\3\2\2\2\u21bf\u21c1\5\u02c6\u0164"+
		"\2\u21c0\u21c2\5\u02e0\u0171\2\u21c1\u21c0\3\2\2\2\u21c1\u21c2\3\2\2\2"+
		"\u21c2\u21ca\3\2\2\2\u21c3\u21c4\7\u0337\2\2\u21c4\u21c5\7\u0337\2\2\u21c5"+
		"\u21c7\5\u02da\u016e\2\u21c6\u21c8\5\u02e0\u0171\2\u21c7\u21c6\3\2\2\2"+
		"\u21c7\u21c8\3\2\2\2\u21c8\u21ca\3\2\2\2\u21c9\u21a0\3\2\2\2\u21c9\u21a7"+
		"\3\2\2\2\u21c9\u21ab\3\2\2\2\u21c9\u21ae\3\2\2\2\u21c9\u21b1\3\2\2\2\u21c9"+
		"\u21b5\3\2\2\2\u21c9\u21b9\3\2\2\2\u21c9\u21bf\3\2\2\2\u21c9\u21c3\3\2"+
		"\2\2\u21ca\u02af\3\2\2\2\u21cb\u21cc\7\u00a4\2\2\u21cc\u21cf\5\u02b2\u015a"+
		"\2\u21cd\u21ce\7\u00b8\2\2\u21ce\u21d0\7\u02de\2\2\u21cf\u21cd\3\2\2\2"+
		"\u21cf\u21d0\3\2\2\2\u21d0\u02b1\3\2\2\2\u21d1\u21d2\ts\2\2\u21d2\u21de"+
		"\7w\2\2\u21d3\u21de\7\u031a\2\2\u21d4\u21d5\7\u0333\2\2\u21d5\u21d6\5"+
		"\u0290\u0149\2\u21d6\u21d7\7\u0334\2\2\u21d7\u21de\3\2\2\2\u21d8\u21d9"+
		"\7\u0333\2\2\u21d9\u21da\5\u0290\u0149\2\u21da\u21db\7\u0334\2\2\u21db"+
		"\u21dc\7w\2\2\u21dc\u21de\3\2\2\2\u21dd\u21d1\3\2\2\2\u21dd\u21d3\3\2"+
		"\2\2\u21dd\u21d4\3\2\2\2\u21dd\u21d8\3\2\2\2\u21de\u02b3\3\2\2\2\u21df"+
		"\u21e0\7t\2\2\u21e0\u21e1\7\21\2\2\u21e1\u21e6\5\u02ba\u015e\2\u21e2\u21e3"+
		"\7\u0335\2\2\u21e3\u21e5\5\u02ba\u015e\2\u21e4\u21e2\3\2\2\2\u21e5\u21e8"+
		"\3\2\2\2\u21e6\u21e4\3\2\2\2\u21e6\u21e7\3\2\2\2\u21e7\u21f4\3\2\2\2\u21e8"+
		"\u21e6\3\2\2\2\u21e9\u21ea\7\u0217\2\2\u21ea\u21eb\5\u0290\u0149\2\u21eb"+
		"\u21f2\tt\2\2\u21ec\u21ed\7A\2\2\u21ed\u21ee\tu\2\2\u21ee\u21ef\5\u0290"+
		"\u0149\2\u21ef\u21f0\tt\2\2\u21f0\u21f1\7\u021c\2\2\u21f1\u21f3\3\2\2"+
		"\2\u21f2\u21ec\3\2\2\2\u21f2\u21f3\3\2\2\2\u21f3\u21f5\3\2\2\2\u21f4\u21e9"+
		"\3\2\2\2\u21f4\u21f5\3\2\2\2\u21f5\u02b5\3\2\2\2\u21f6\u21f7\7D\2\2\u21f7"+
		"\u2250\7\17\2\2\u21f8\u21f9\7D\2\2\u21f9\u2201\7\u030c\2\2\u21fa\u21fe"+
		"\7\u0253\2\2\u21fb\u21fc\7\u0333\2\2\u21fc\u21fd\7\u031c\2\2\u21fd\u21ff"+
		"\7\u0334\2\2\u21fe\u21fb\3\2\2\2\u21fe\u21ff\3\2\2\2\u21ff\u2202\3\2\2"+
		"\2\u2200\u2202\7\u00ef\2\2\u2201\u21fa\3\2\2\2\u2201\u2200\3\2\2\2\u2202"+
		"\u2206\3\2\2\2\u2203\u2205\5\u02b8\u015d\2\u2204\u2203\3\2\2\2\u2205\u2208"+
		"\3\2\2\2\u2206\u2204\3\2\2\2\u2206\u2207\3\2\2\2\u2207\u2213\3\2\2\2\u2208"+
		"\u2206\3\2\2\2\u2209\u2211\7\u0335\2\2\u220a\u2212\7\u030d\2\2\u220b\u220f"+
		"\7\u030f\2\2\u220c\u220d\7\u0333\2\2\u220d\u220e\7\u031c\2\2\u220e\u2210"+
		"\7\u0334\2\2\u220f\u220c\3\2\2\2\u220f\u2210\3\2\2\2\u2210\u2212\3\2\2"+
		"\2\u2211\u220a\3\2\2\2\u2211\u220b\3\2\2\2\u2212\u2214\3\2\2\2\u2213\u2209"+
		"\3\2\2\2\u2213\u2214\3\2\2\2\u2214\u2218\3\2\2\2\u2215\u2216\7\u0335\2"+
		"\2\u2216\u2217\7\u0152\2\2\u2217\u2219\tv\2\2\u2218\u2215\3\2\2\2\u2218"+
		"\u2219\3\2\2\2\u2219\u2250\3\2\2\2\u221a\u221b\7D\2\2\u221b\u221c\7\u030c"+
		"\2\2\u221c\u2220\7\u0166\2\2\u221d\u221f\5\u02b8\u015d\2\u221e\u221d\3"+
		"\2\2\2\u221f\u2222\3\2\2\2\u2220\u221e\3\2\2\2\u2220\u2221\3\2\2\2\u2221"+
		"\u2225\3\2\2\2\u2222\u2220\3\2\2\2\u2223\u2224\7\u0335\2\2\u2224\u2226"+
		"\7\u030d\2\2\u2225\u2223\3\2\2\2\u2225\u2226\3\2\2\2\u2226\u2250\3\2\2"+
		"\2\u2227\u2228\7D\2\2\u2228\u2229\7\u030c\2\2\u2229\u222d\7\u022c\2\2"+
		"\u222a\u222b\7\u0333\2\2\u222b\u222c\7\u031c\2\2\u222c\u222e\7\u0334\2"+
		"\2\u222d\u222a\3\2\2\2\u222d\u222e\3\2\2\2\u222e\u2232\3\2\2\2\u222f\u2231"+
		"\5\u02b8\u015d\2\u2230\u222f\3\2\2\2\u2231\u2234\3\2\2\2\u2232\u2230\3"+
		"\2\2\2\u2232\u2233\3\2\2\2\u2233\u2238\3\2\2\2\u2234\u2232\3\2\2\2\u2235"+
		"\u2236\7\u0335\2\2\u2236\u2237\7\u0152\2\2\u2237\u2239\tv\2\2\u2238\u2235"+
		"\3\2\2\2\u2238\u2239\3\2\2\2\u2239\u2250\3\2\2\2\u223a\u223b\7D\2\2\u223b"+
		"\u223c\7\u01a5\2\2\u223c\u2244\tw\2\2\u223d\u223e\7\u0335\2\2\u223e\u2242"+
		"\7\u0281\2\2\u223f\u2240\7\u0333\2\2\u2240\u2241\7\u031c\2\2\u2241\u2243"+
		"\7\u0334\2\2\u2242\u223f\3\2\2\2\u2242\u2243\3\2\2\2\u2243\u2245\3\2\2"+
		"\2\u2244\u223d\3\2\2\2\u2244\u2245\3\2\2\2\u2245\u224c\3\2\2\2\u2246\u2247"+
		"\7\u0335\2\2\u2247\u224b\7\u0198\2\2\u2248\u2249\7\u0335\2\2\u2249\u224b"+
		"\7\u0307\2\2\u224a\u2246\3\2\2\2\u224a\u2248\3\2\2\2\u224b\u224e\3\2\2"+
		"\2\u224c\u224a\3\2\2\2\u224c\u224d\3\2\2\2\u224d\u2250\3\2\2\2\u224e\u224c"+
		"\3\2\2\2\u224f\u21f6\3\2\2\2\u224f\u21f8\3\2\2\2\u224f\u221a\3\2\2\2\u224f"+
		"\u2227\3\2\2\2\u224f\u223a\3\2\2\2\u2250\u02b7\3\2\2\2\u2251\u2252\7\u0335"+
		"\2\2\u2252\u2253\tx\2\2\u2253\u02b9\3\2\2\2\u2254\u2256\5\u0290\u0149"+
		"\2\u2255\u2257\5\u0318\u018d\2\u2256\u2255\3\2\2\2\u2256\u2257\3\2\2\2"+
		"\u2257\u02bb\3\2\2\2\u2258\u2259\7r\2\2\u2259\u225a\7\u0333\2\2\u225a"+
		"\u225f\5\u02be\u0160\2\u225b\u225c\7\u0335\2\2\u225c\u225e\5\u02be\u0160"+
		"\2\u225d\u225b\3\2\2\2\u225e\u2261\3\2\2\2\u225f\u225d\3\2\2\2\u225f\u2260"+
		"\3\2\2\2\u2260\u2262\3\2\2\2\u2261\u225f\3\2\2\2\u2262\u2263\7\u0334\2"+
		"\2\u2263\u02bd\3\2\2\2\u2264\u2265\7\u0171\2\2\u2265\u2294\7\u031a\2\2"+
		"\u2266\u2267\ty\2\2\u2267\u2294\7N\2\2\u2268\u2269\tz\2\2\u2269\u2294"+
		"\7\u00aa\2\2\u226a\u226b\t{\2\2\u226b\u2294\7[\2\2\u226c\u226d\7\u0163"+
		"\2\2\u226d\u2294\7\u0302\2\2\u226e\u226f\7\u017e\2\2\u226f\u2294\7t\2"+
		"\2\u2270\u2294\7\u0194\2\2\u2271\u2272\7\u01a7\2\2\u2272\u2294\7y\2\2"+
		"\u2273\u2274\7\u01a8\2\2\u2274\u2294\7y\2\2\u2275\u2276\7\u01d7\2\2\u2276"+
		"\u2294\7\u031a\2\2\u2277\u2278\7\u01d8\2\2\u2278\u2294\7\u031a\2\2\u2279"+
		"\u227a\7\u0220\2\2\u227a\u227b\7D\2\2\u227b\u227c\7\u0333\2\2\u227c\u2281"+
		"\5\u02c0\u0161\2\u227d\u227e\7\u0335\2\2\u227e\u2280\5\u02c0\u0161\2\u227f"+
		"\u227d\3\2\2\2\u2280\u2283\3\2\2\2\u2281\u227f\3\2\2\2\u2281\u2282\3\2"+
		"\2\2\u2282\u2284\3\2\2\2\u2283\u2281\3\2\2\2\u2284\u2285\7\u0334\2\2\u2285"+
		"\u2294\3\2\2\2\u2286\u2287\7\u0220\2\2\u2287\u2288\7D\2\2\u2288\u2294"+
		"\7\u02f5\2\2\u2289\u228a\7\u0225\2\2\u228a\u2294\tP\2\2\u228b\u2294\7"+
		"\u0260\2\2\u228c\u228d\7\u027f\2\2\u228d\u2294\7y\2\2\u228e\u228f\7\u00af"+
		"\2\2\u228f\u2290\7y\2\2\u2290\u2294\7\u031c\2\2\u2291\u2292\7\u024d\2"+
		"\2\u2292\u2294\7\u031a\2\2\u2293\u2264\3\2\2\2\u2293\u2266\3\2\2\2\u2293"+
		"\u2268\3\2\2\2\u2293\u226a\3\2\2\2\u2293\u226c\3\2\2\2\u2293\u226e\3\2"+
		"\2\2\u2293\u2270\3\2\2\2\u2293\u2271\3\2\2\2\u2293\u2273\3\2\2\2\u2293"+
		"\u2275\3\2\2\2\u2293\u2277\3\2\2\2\u2293\u2279\3\2\2\2\u2293\u2286\3\2"+
		"\2\2\u2293\u2289\3\2\2\2\u2293\u228b\3\2\2\2\u2293\u228c\3\2\2\2\u2293"+
		"\u228e\3\2\2\2\u2293\u2291\3\2\2\2\u2294\u02bf\3\2\2\2\u2295\u229c\7\u0319"+
		"\2\2\u2296\u229d\7\u02f5\2\2\u2297\u229a\7\u0324\2\2\u2298\u229b\5\u033c"+
		"\u019f\2\u2299\u229b\7g\2\2\u229a\u2298\3\2\2\2\u229a\u2299\3\2\2\2\u229b"+
		"\u229d\3\2\2\2\u229c\u2296\3\2\2\2\u229c\u2297\3\2\2\2\u229d\u02c1\3\2"+
		"\2\2\u229e\u22a3\5\u02c4\u0163\2\u229f\u22a0\7\u0335\2\2\u22a0\u22a2\5"+
		"\u02c4\u0163\2\u22a1\u229f\3\2\2\2\u22a2\u22a5\3\2\2\2\u22a3\u22a1\3\2"+
		"\2\2\u22a3\u22a4\3\2\2\2\u22a4\u02c3\3\2\2\2\u22a5\u22a3\3\2\2\2\u22a6"+
		"\u22a7\5\u0310\u0189\2\u22a7\u22a8\7\u0330\2\2\u22a8\u22aa\3\2\2\2\u22a9"+
		"\u22a6\3\2\2\2\u22a9\u22aa\3\2\2\2\u22aa\u22ab\3\2\2\2\u22ab\u22ba\7\u0338"+
		"\2\2\u22ac\u22ad\7\u0332\2\2\u22ad\u22b2\7P\2\2\u22ae\u22af\7\u0332\2"+
		"\2\u22af\u22b2\7\u0284\2\2\u22b0\u22b2\5\u0290\u0149\2\u22b1\u22ac\3\2"+
		"\2\2\u22b1\u22ae\3\2\2\2\u22b1\u22b0\3\2\2\2\u22b2\u22b7\3\2\2\2\u22b3"+
		"\u22b5\7\b\2\2\u22b4\u22b3\3\2\2\2\u22b4\u22b5\3\2\2\2\u22b5\u22b6\3\2"+
		"\2\2\u22b6\u22b8\5\u02ec\u0177\2\u22b7\u22b4\3\2\2\2\u22b7\u22b8\3\2\2"+
		"\2\u22b8\u22ba\3\2\2\2\u22b9\u22a9\3\2\2\2\u22b9\u22b1\3\2\2\2\u22ba\u02c5"+
		"\3\2\2\2\u22bb\u22bc\7q\2\2\u22bc\u22bd\7\u0333\2\2\u22bd\u22be\5\u0290"+
		"\u0149\2\u22be\u22bf\7\u0335\2\2\u22bf\u22c2\5\u0290\u0149\2\u22c0\u22c1"+
		"\7\u0335\2\2\u22c1\u22c3\5\u0290\u0149\2\u22c2\u22c0\3\2\2\2\u22c2\u22c3"+
		"\3\2\2\2\u22c3\u22c4\3\2\2\2\u22c4\u22ca\7\u0334\2\2\u22c5\u22c6\7\u00b8"+
		"\2\2\u22c6\u22c7\7\u0333\2\2\u22c7\u22c8\5\u02c8\u0165\2\u22c8\u22c9\7"+
		"\u0334\2\2\u22c9\u22cb\3\2\2\2\u22ca\u22c5\3\2\2\2\u22ca\u22cb\3\2\2\2"+
		"\u22cb\u02c7\3\2\2\2\u22cc\u22d1\5\u02ca\u0166\2\u22cd\u22ce\7\u0335\2"+
		"\2\u22ce\u22d0\5\u02ca\u0166\2\u22cf\u22cd\3\2\2\2\u22d0\u22d3\3\2\2\2"+
		"\u22d1\u22cf\3\2\2\2\u22d1\u22d2\3\2\2\2\u22d2\u02c9\3\2\2\2\u22d3\u22d1"+
		"\3\2\2\2\u22d4\u22d5\5\u0342\u01a2\2\u22d5\u22d7\5\u0336\u019c\2\u22d6"+
		"\u22d8\7\u031c\2\2\u22d7\u22d6\3\2\2\2\u22d7\u22d8\3\2\2\2\u22d8\u02cb"+
		"\3\2\2\2\u22d9\u22da\7\u010f\2\2\u22da\u22e5\7\u0333\2\2\u22db\u22dc\7"+
		"\u010e\2\2\u22dc\u22dd\5\u0310\u0189\2\u22dd\u22de\7\u0335\2\2\u22de\u22df"+
		"\t|\2\2\u22df\u22e6\3\2\2\2\u22e0\u22e1\7\u0300\2\2\u22e1\u22e2\5\u0310"+
		"\u0189\2\u22e2\u22e3\7\u0335\2\2\u22e3\u22e4\5\u02ce\u0168\2\u22e4\u22e6"+
		"\3\2\2\2\u22e5\u22db\3\2\2\2\u22e5\u22e0\3\2\2\2\u22e6\u22e7\3\2\2\2\u22e7"+
		"\u22e8\7\u0334\2\2\u22e8\u02cd\3\2\2\2\u22e9\u22ea\7\u0333\2\2\u22ea\u22eb"+
		"\5\u02d0\u0169\2\u22eb\u22ec\7\u0334\2\2\u22ec\u22ed\7\u0335\2\2\u22ed"+
		"\u22ee\7\u0333\2\2\u22ee\u22ef\5\u02f0\u0179\2\u22ef\u22f0\7\u0334\2\2"+
		"\u22f0\u02cf\3\2\2\2\u22f1\u22f6\5\u0312\u018a\2\u22f2\u22f3\7\u0335\2"+
		"\2\u22f3\u22f5\5\u0312\u018a\2\u22f4\u22f2\3\2\2\2\u22f5\u22f8\3\2\2\2"+
		"\u22f6\u22f4\3\2\2\2\u22f6\u22f7\3\2\2\2\u22f7\u02d1\3\2\2\2\u22f8\u22f6"+
		"\3\2\2\2\u22f9\u22fb\5\u0310\u0189\2\u22fa\u22fc\5\u02e2\u0172\2\u22fb"+
		"\u22fa\3\2\2\2\u22fb\u22fc\3\2\2\2\u22fc\u02d3\3\2\2\2\u22fd\u22fe\7p"+
		"\2\2\u22fe\u22ff\7\u0333\2\2\u22ff\u2300\7\u031c\2\2\u2300\u2301\7\u0335"+
		"\2\2\u2301\u2302\7\u031c\2\2\u2302\u2303\7\u0335\2\2\u2303\u2304\7\u031c"+
		"\2\2\u2304\u2318\7\u0334\2\2\u2305\u2306\7p\2\2\u2306\u2307\7\u0333\2"+
		"\2\u2307\u2308\7\20\2\2\u2308\u2309\7\u031c\2\2\u2309\u2313\7\u0335\2"+
		"\2\u230a\u230f\5\u02d6\u016c\2\u230b\u230c\7\u0335\2\2\u230c\u230e\5\u02d6"+
		"\u016c\2\u230d\u230b\3\2\2\2\u230e\u2311\3\2\2\2\u230f\u230d\3\2\2\2\u230f"+
		"\u2310\3\2\2\2\u2310\u2314\3\2\2\2\u2311\u230f\3\2\2\2\u2312\u2314\5\u0342"+
		"\u01a2\2\u2313\u230a\3\2\2\2\u2313\u2312\3\2\2\2\u2314\u2315\3\2\2\2\u2315"+
		"\u2316\7\u0334\2\2\u2316\u2318\3\2\2\2\u2317\u22fd\3\2\2\2\u2317\u2305"+
		"\3\2\2\2\u2318\u02d5\3\2\2\2\u2319\u231a\5\u0342\u01a2\2\u231a\u231b\7"+
		"\u0324\2\2\u231b\u231c\t\37\2\2\u231c\u02d7\3\2\2\2\u231d\u231e\7\u0333"+
		"\2\2\u231e\u231f\5\u0142\u00a2\2\u231f\u2320\7\u0334\2\2\u2320\u02d9\3"+
		"\2\2\2\u2321\u2322\5\u0324\u0193\2\u2322\u2328\7\u0333\2\2\u2323\u2329"+
		"\7\u0338\2\2\u2324\u2329\5\u02f2\u017a\2\u2325\u2327\5\u02f0\u0179\2\u2326"+
		"\u2325\3\2\2\2\u2326\u2327\3\2\2\2\u2327\u2329\3\2\2\2\u2328\u2323\3\2"+
		"\2\2\u2328\u2324\3\2\2\2\u2328\u2326\3\2\2\2\u2329\u232a\3\2\2\2\u232a"+
		"\u232c\7\u0334\2\2\u232b\u232d\5\u02f4\u017b\2\u232c\u232b\3\2\2\2\u232c"+
		"\u232d\3\2\2\2\u232d\u23c0\3\2\2\2\u232e\u232f\7\u0108\2\2\u232f\u2330"+
		"\7\u0333\2\2\u2330\u2331\5\u0290\u0149\2\u2331\u2332\7\b\2\2\u2332\u2333"+
		"\5\u0336\u019c\2\u2333\u2334\7\u0334\2\2\u2334\u23c0\3\2\2\2\u2335\u2336"+
		"\7!\2\2\u2336\u2337\7\u0333\2\2\u2337\u2338\5\u0336\u019c\2\u2338\u2339"+
		"\7\u0335\2\2\u2339\u233c\5\u0290\u0149\2\u233a\u233b\7\u0335\2\2\u233b"+
		"\u233d\5\u0290\u0149\2\u233c\u233a\3\2\2\2\u233c\u233d\3\2\2\2\u233d\u233e"+
		"\3\2\2\2\u233e\u233f\7\u0334\2\2\u233f\u23c0\3\2\2\2\u2340\u2341\7\u0226"+
		"\2\2\u2341\u2342\7\u0333\2\2\u2342\u2343\5\u0290\u0149\2\u2343\u2344\7"+
		"\b\2\2\u2344\u2347\5\u0336\u019c\2\u2345\u2346\7\u02fb\2\2\u2346\u2348"+
		"\5\u0290\u0149\2\u2347\u2345\3\2\2\2\u2347\u2348\3\2\2\2\u2348\u2349\3"+
		"\2\2\2\u2349\u234a\7\u0334\2\2\u234a\u23c0\3\2\2\2\u234b\u234c\7\30\2"+
		"\2\u234c\u234d\7\u0333\2\2\u234d\u234e\5\u02f0\u0179\2\u234e\u234f\7\u0334"+
		"\2\2\u234f\u23c0\3\2\2\2\u2350\u23c0\7\'\2\2\u2351\u23c0\7(\2\2\u2352"+
		"\u2353\7P\2\2\u2353\u2354\7\u0333\2\2\u2354\u2357\5\u0336\u019c\2\u2355"+
		"\u2356\7\u0335\2\2\u2356\u2358\7\u031a\2\2\u2357\u2355\3\2\2\2\u2357\u2358"+
		"\3\2\2\2\u2358\u235b\3\2\2\2\u2359\u235a\7\u0335\2\2\u235a\u235c\7\u031a"+
		"\2\2\u235b\u2359\3\2\2\2\u235b\u235c\3\2\2\2\u235c\u235d\3\2\2\2\u235d"+
		"\u235e\7\u0334\2\2\u235e\u23c0\3\2\2\2\u235f\u2360\7\u0193\2\2\u2360\u2361"+
		"\7\u0333\2\2\u2361\u2362\5\u02a2\u0152\2\u2362\u2363\7\u0335\2\2\u2363"+
		"\u2364\5\u0290\u0149\2\u2364\u2365\7\u0335\2\2\u2365\u2366\5\u0290\u0149"+
		"\2\u2366\u2367\7\u0334\2\2\u2367\u23c0\3\2\2\2\u2368\u23c0\7\u01e8\2\2"+
		"\u2369\u236a\7\u0205\2\2\u236a\u236b\7\u0333\2\2\u236b\u236c\7\u031c\2"+
		"\2\u236c\u236d\7\u0334\2\2\u236d\u23c0\5\u02e0\u0171\2\u236e\u236f\7h"+
		"\2\2\u236f\u2370\7\u0333\2\2\u2370\u2371\5\u0290\u0149\2\u2371\u2372\7"+
		"\u0335\2\2\u2372\u2373\5\u0290\u0149\2\u2373\u2374\7\u0334\2\2\u2374\u23c0"+
		"\3\2\2\2\u2375\u23c0\7\u0098\2\2\u2376\u23c0\7\u009e\2\2\u2377\u2378\7"+
		"\u021e\2\2\u2378\u2379\7\u0333\2\2\u2379\u237c\5\u0290\u0149\2\u237a\u237b"+
		"\7\u0335\2\2\u237b\u237d\5\u0290\u0149\2\u237c\u237a\3\2\2\2\u237c\u237d"+
		"\3\2\2\2\u237d\u237e\3\2\2\2\u237e\u237f\7\u0334\2\2\u237f\u2380\7\u00b8"+
		"\2\2\u2380\u2381\7\u0333\2\2\u2381\u2384\5\u02ca\u0166\2\u2382\u2383\7"+
		"\b\2\2\u2383\u2385\7\u01a5\2\2\u2384\u2382\3\2\2\2\u2384\u2385\3\2\2\2"+
		"\u2385\u238e\3\2\2\2\u2386\u2387\7\u0335\2\2\u2387\u238a\5\u02ca\u0166"+
		"\2\u2388\u2389\7\b\2\2\u2389\u238b\7\u01a5\2\2\u238a\u2388\3\2\2\2\u238a"+
		"\u238b\3\2\2\2\u238b\u238d\3\2\2\2\u238c\u2386\3\2\2\2\u238d\u2390\3\2"+
		"\2\2\u238e\u238c\3\2\2\2\u238e\u238f\3\2\2\2\u238f\u2391\3\2\2\2\u2390"+
		"\u238e\3\2\2\2\u2391\u2392\7\u0334\2\2\u2392\u23c0\3\2\2\2\u2393\u23c0"+
		"\7\u00b0\2\2\u2394\u23c0\7\u00bc\2\2\u2395\u23c0\7\u00bf\2\2\u2396\u23c0"+
		"\7\u00bd\2\2\u2397\u23c0\7\u00c1\2\2\u2398\u23c0\7\u00be\2\2\u2399\u23c0"+
		"\7\u00bb\2\2\u239a\u23c0\7\u00c0\2\2\u239b\u23c0\7\u00c2\2\2\u239c\u23c0"+
		"\7\u00c3\2\2\u239d\u239e\7\u01fe\2\2\u239e\u239f\7\u02fe\2\2\u239f\u23a0"+
		"\7D\2\2\u23a0\u23a2\5\u0310\u0189\2\u23a1\u23a3\5\u02f4\u017b\2\u23a2"+
		"\u23a1\3\2\2\2\u23a2\u23a3\3\2\2\2\u23a3\u23c0\3\2\2\2\u23a4\u23a5\7\u02ce"+
		"\2\2\u23a5\u23a6\7\u0333\2\2\u23a6\u23a7\5\u0290\u0149\2\u23a7\u23a8\7"+
		"\u0335\2\2\u23a8\u23a9\5\u0290\u0149\2\u23a9\u23aa\7\u0334\2\2\u23aa\u23ab"+
		"\7\u00b9\2\2\u23ab\u23ac\7\u0333\2\2\u23ac\u23ad\5\u02b4\u015b\2\u23ad"+
		"\u23ae\7\u0334\2\2\u23ae\u23c0\3\2\2\2\u23af\u23b0\7\u02e7\2\2\u23b0\u23b1"+
		"\7\u0333\2\2\u23b1\u23b2\5\u0290\u0149\2\u23b2\u23b3\7H\2\2\u23b3\u23b4"+
		"\5\u0290\u0149\2\u23b4\u23b5\7\u0334\2\2\u23b5\u23c0\3\2\2\2\u23b6\u23b7"+
		"\5\u0342\u01a2\2\u23b7\u23b8\7\u0330\2\2\u23b8\u23ba\3\2\2\2\u23b9\u23b6"+
		"\3\2\2\2\u23b9\u23ba\3\2\2\2\u23ba\u23bb\3\2\2\2\u23bb\u23bc\7\u0332\2"+
		"\2\u23bc\u23bd\7\u0228\2\2\u23bd\u23be\7\u0330\2\2\u23be\u23c0\5\u02da"+
		"\u016e\2\u23bf\u2321\3\2\2\2\u23bf\u232e\3\2\2\2\u23bf\u2335\3\2\2\2\u23bf"+
		"\u2340\3\2\2\2\u23bf\u234b\3\2\2\2\u23bf\u2350\3\2\2\2\u23bf\u2351\3\2"+
		"\2\2\u23bf\u2352\3\2\2\2\u23bf\u235f\3\2\2\2\u23bf\u2368\3\2\2\2\u23bf"+
		"\u2369\3\2\2\2\u23bf\u236e\3\2\2\2\u23bf\u2375\3\2\2\2\u23bf\u2376\3\2"+
		"\2\2\u23bf\u2377\3\2\2\2\u23bf\u2393\3\2\2\2\u23bf\u2394\3\2\2\2\u23bf"+
		"\u2395\3\2\2\2\u23bf\u2396\3\2\2\2\u23bf\u2397\3\2\2\2\u23bf\u2398\3\2"+
		"\2\2\u23bf\u2399\3\2\2\2\u23bf\u239a\3\2\2\2\u23bf\u239b\3\2\2\2\u23bf"+
		"\u239c\3\2\2\2\u23bf\u239d\3\2\2\2\u23bf\u23a4\3\2\2\2\u23bf\u23af\3\2"+
		"\2\2\u23bf\u23b9\3\2\2\2\u23c0\u02db\3\2\2\2\u23c1\u23c2\7\u00b5\2\2\u23c2"+
		"\u23c3\5\u0290\u0149\2\u23c3\u23c4\7\u00a2\2\2\u23c4\u23c5\5\u0290\u0149"+
		"\2\u23c5\u02dd\3\2\2\2\u23c6\u23c7\7\u00b5\2\2\u23c7\u23c8\5\u02a2\u0152"+
		"\2\u23c8\u23c9\7\u00a2\2\2\u23c9\u23ca\5\u0290\u0149\2\u23ca\u02df\3\2"+
		"\2\2\u23cb\u23cd\7\b\2\2\u23cc\u23cb\3\2\2\2\u23cc\u23cd\3\2\2\2\u23cd"+
		"\u23ce\3\2\2\2\u23ce\u23d0\5\u0342\u01a2\2\u23cf\u23d1\5\u02ea\u0176\2"+
		"\u23d0\u23cf\3\2\2\2\u23d0\u23d1\3\2\2\2\u23d1\u02e1\3\2\2\2\u23d2\u23d4"+
		"\7\u00b8\2\2\u23d3\u23d2\3\2\2\2\u23d3\u23d4\3\2\2\2\u23d4\u23d5\3\2\2"+
		"\2\u23d5\u23d6\7\u0333\2\2\u23d6\u23dd\5\u02e6\u0174\2\u23d7\u23d9\7\u0335"+
		"\2\2\u23d8\u23d7\3\2\2\2\u23d8\u23d9\3\2\2\2\u23d9\u23da\3\2\2\2\u23da"+
		"\u23dc\5\u02e6\u0174\2\u23db\u23d8\3\2\2\2\u23dc\u23df\3\2\2\2\u23dd\u23db"+
		"\3\2\2\2\u23dd\u23de\3\2\2\2\u23de\u23e0\3\2\2\2\u23df\u23dd\3\2\2\2\u23e0"+
		"\u23e1\7\u0334\2\2\u23e1\u02e3\3\2\2\2\u23e2\u23e3\7\u00b8\2\2\u23e3\u23e4"+
		"\7\u0333\2\2\u23e4\u23eb\5\u02e6\u0174\2\u23e5\u23e7\7\u0335\2\2\u23e6"+
		"\u23e5\3\2\2\2\u23e6\u23e7\3\2\2\2\u23e7\u23e8\3\2\2\2\u23e8\u23ea\5\u02e6"+
		"\u0174\2\u23e9\u23e6\3\2\2\2\u23ea\u23ed\3\2\2\2\u23eb\u23e9\3\2\2\2\u23eb"+
		"\u23ec\3\2\2\2\u23ec\u23ee\3\2\2\2\u23ed\u23eb\3\2\2\2\u23ee\u23ef\7\u0334"+
		"\2\2\u23ef\u02e5\3\2\2\2\u23f0\u23f2\7\u0206\2\2\u23f1\u23f0\3\2\2\2\u23f1"+
		"\u23f2\3\2\2\2\u23f2\u2423\3\2\2\2\u23f3\u2407\7U\2\2\u23f4\u23f5\7\u0333"+
		"\2\2\u23f5\u23fa\5\u02e8\u0175\2\u23f6\u23f7\7\u0335\2\2\u23f7\u23f9\5"+
		"\u02e8\u0175\2\u23f8\u23f6\3\2\2\2\u23f9\u23fc\3\2\2\2\u23fa\u23f8\3\2"+
		"\2\2\u23fa\u23fb\3\2\2\2\u23fb\u23fd\3\2\2\2\u23fc\u23fa\3\2\2\2\u23fd"+
		"\u23fe\7\u0334\2\2\u23fe\u2408\3\2\2\2\u23ff\u2404\5\u02e8\u0175\2\u2400"+
		"\u2401\7\u0335\2\2\u2401\u2403\5\u02e8\u0175\2\u2402\u2400\3\2\2\2\u2403"+
		"\u2406\3\2\2\2\u2404\u2402\3\2\2\2\u2404\u2405\3\2\2\2\u2405\u2408\3\2"+
		"\2\2\u2406\u2404\3\2\2\2\u2407\u23f4\3\2\2\2\u2407\u23ff\3\2\2\2\u2408"+
		"\u2424\3\2\2\2\u2409\u240a\7U\2\2\u240a\u240b\7\u0324\2\2\u240b\u2424"+
		"\5\u02e8\u0175\2\u240c\u241b\7\u0180\2\2\u240d\u240e\7\u0333\2\2\u240e"+
		"\u240f\5\u02e8\u0175\2\u240f\u2410\7\u0333\2\2\u2410\u2415\7\u031b\2\2"+
		"\u2411\u2412\7\u0335\2\2\u2412\u2414\7\u031b\2\2\u2413\u2411\3\2\2\2\u2414"+
		"\u2417\3\2\2\2\u2415\u2413\3\2\2\2\u2415\u2416\3\2\2\2\u2416\u2418\3\2"+
		"\2\2\u2417\u2415\3\2\2\2\u2418\u2419\7\u0334\2\2\u2419\u241a\7\u0334\2"+
		"\2\u241a\u241c\3\2\2\2\u241b\u240d\3\2\2\2\u241b\u241c\3\2\2\2\u241c\u2424"+
		"\3\2\2\2\u241d\u2424\7\u02a3\2\2\u241e\u2424\7\u02b5\2\2\u241f\u2420\7"+
		"\u02b9\2\2\u2420\u2421\7\u0324\2\2\u2421\u2424\7\u031a\2\2\u2422\u2424"+
		"\7\u031b\2\2\u2423\u23f3\3\2\2\2\u2423\u2409\3\2\2\2\u2423\u240c\3\2\2"+
		"\2\u2423\u241d\3\2\2\2\u2423\u241e\3\2\2\2\u2423\u241f\3\2\2\2\u2423\u2422"+
		"\3\2\2\2\u2424\u02e7\3\2\2\2\u2425\u2428\5\u0342\u01a2\2\u2426\u2428\7"+
		"\u031a\2\2\u2427\u2425\3\2\2\2\u2427\u2426\3\2\2\2\u2428\u02e9\3";
	private static final String _serializedATNSegment4 =
		"\2\2\2\u2429\u242a\7\u0333\2\2\u242a\u242f\5\u02ec\u0177\2\u242b\u242c"+
		"\7\u0335\2\2\u242c\u242e\5\u02ec\u0177\2\u242d\u242b\3\2\2\2\u242e\u2431"+
		"\3\2\2\2\u242f\u242d\3\2\2\2\u242f\u2430\3\2\2\2\u2430\u2432\3\2\2\2\u2431"+
		"\u242f\3\2\2\2\u2432\u2433\7\u0334\2\2\u2433\u02eb\3\2\2\2\u2434\u2437"+
		"\5\u0342\u01a2\2\u2435\u2437\7\u031c\2\2\u2436\u2434\3\2\2\2\u2436\u2435"+
		"\3\2\2\2\u2437\u02ed\3\2\2\2\u2438\u2439\7\u00b1\2\2\u2439\u243a\7\u0333"+
		"\2\2\u243a\u243b\5\u02f0\u0179\2\u243b\u2443\7\u0334\2\2\u243c\u243d\7"+
		"\u0335\2\2\u243d\u243e\7\u0333\2\2\u243e\u243f\5\u02f0\u0179\2\u243f\u2440"+
		"\7\u0334\2\2\u2440\u2442\3\2\2\2\u2441\u243c\3\2\2\2\u2442\u2445\3\2\2"+
		"\2\u2443\u2441\3\2\2\2\u2443\u2444\3\2\2\2\u2444\u02ef\3\2\2\2\u2445\u2443"+
		"\3\2\2\2\u2446\u244b\5\u0290\u0149\2\u2447\u2448\7\u0335\2\2\u2448\u244a"+
		"\5\u0290\u0149\2\u2449\u2447\3\2\2\2\u244a\u244d\3\2\2\2\u244b\u2449\3"+
		"\2\2\2\u244b\u244c\3\2\2\2\u244c\u02f1\3\2\2\2\u244d\u244b\3\2\2\2\u244e"+
		"\u244f\t9\2\2\u244f\u2450\5\u0290\u0149\2\u2450\u02f3\3\2\2\2\u2451\u2452"+
		"\7v\2\2\u2452\u2456\7\u0333\2\2\u2453\u2454\7\u0228\2\2\u2454\u2455\7"+
		"\21\2\2\u2455\u2457\5\u02f0\u0179\2\u2456\u2453\3\2\2\2\u2456\u2457\3"+
		"\2\2\2\u2457\u2459\3\2\2\2\u2458\u245a\5\u02b4\u015b\2\u2459\u2458\3\2"+
		"\2\2\u2459\u245a\3\2\2\2\u245a\u245c\3\2\2\2\u245b\u245d\5\u02f6\u017c"+
		"\2\u245c\u245b\3\2\2\2\u245c\u245d\3\2\2\2\u245d\u245e\3\2\2\2\u245e\u245f"+
		"\7\u0334\2\2\u245f\u02f5\3\2\2\2\u2460\u2461\t}\2\2\u2461\u2462\5\u02f8"+
		"\u017d\2\u2462\u02f7\3\2\2\2\u2463\u246a\5\u02fc\u017f\2\u2464\u2465\7"+
		"\r\2\2\u2465\u2466\5\u02fa\u017e\2\u2466\u2467\7\6\2\2\u2467\u2468\5\u02fa"+
		"\u017e\2\u2468\u246a\3\2\2\2\u2469\u2463\3\2\2\2\u2469\u2464\3\2\2\2\u246a"+
		"\u02f9\3\2\2\2\u246b\u246e\5\u02fc\u017f\2\u246c\u246e\5\u02fe\u0180\2"+
		"\u246d\u246b\3\2\2\2\u246d\u246c\3\2\2\2\u246e\u02fb\3\2\2\2\u246f\u2470"+
		"\7\u02f1\2\2\u2470\u2476\7\u023b\2\2\u2471\u2472\7\u031a\2\2\u2472\u2476"+
		"\7\u023b\2\2\u2473\u2474\7$\2\2\u2474\u2476\7\u0283\2\2\u2475\u246f\3"+
		"\2\2\2\u2475\u2471\3\2\2\2\u2475\u2473\3\2\2\2\u2476\u02fd\3\2\2\2\u2477"+
		"\u2478\7\u02f1\2\2\u2478\u247c\7\u017b\2\2\u2479\u247a\7\u031a\2\2\u247a"+
		"\u247c\7\u017b\2\2\u247b\u2477\3\2\2\2\u247b\u2479\3\2\2\2\u247c\u02ff"+
		"\3\2\2\2\u247d\u247e\7\u0178\2\2\u247e\u2483\5\u0302\u0182\2\u247f\u2480"+
		"\7\u0335\2\2\u2480\u2482\5\u0302\u0182\2\u2481\u247f\3\2\2\2\u2482\u2485"+
		"\3\2\2\2\u2483\u2481\3\2\2\2\u2483\u2484\3\2\2\2\u2484\u24a8\3\2\2\2\u2485"+
		"\u2483\3\2\2\2\u2486\u2487\7\u013f\2\2\u2487\u248a\7\u0324\2\2\u2488\u248b"+
		"\5\u0342\u01a2\2\u2489\u248b\7\u031c\2\2\u248a\u2488\3\2\2\2\u248a\u2489"+
		"\3\2\2\2\u248b\u24a8\3\2\2\2\u248c\u248d\7\u013e\2\2\u248d\u2490\7\u0324"+
		"\2\2\u248e\u2491\5\u0342\u01a2\2\u248f\u2491\7\u031c\2\2\u2490\u248e\3"+
		"\2\2\2\u2490\u248f\3\2\2\2\u2491\u24a8\3\2\2\2\u2492\u2493\7\u01f9\2\2"+
		"\u2493\u2494\7\u0324\2\2\u2494\u24a8\5\u031e\u0190\2\u2495\u2496\7\u02e6"+
		"\2\2\u2496\u2497\7\u0324\2\2\u2497\u24a8\5\u031e\u0190\2\u2498\u2499\7"+
		"\u02ee\2\2\u2499\u249a\7\u0324\2\2\u249a\u24a8\7\u031a\2\2\u249b\u249c"+
		"\7\u013a\2\2\u249c\u24a8\5\u031e\u0190\2\u249d\u249e\7\u02eb\2\2\u249e"+
		"\u24a8\5\u031e\u0190\2\u249f\u24a0\7\u0234\2\2\u24a0\u24a1\7\u0324\2\2"+
		"\u24a1\u24a2\7l\2\2\u24a2\u24a3\7\u0333\2\2\u24a3\u24a4\7\u014b\2\2\u24a4"+
		"\u24a5\7\u0324\2\2\u24a5\u24a6\7\u031c\2\2\u24a6\u24a8\7\u0334\2\2\u24a7"+
		"\u247d\3\2\2\2\u24a7\u2486\3\2\2\2\u24a7\u248c\3\2\2\2\u24a7\u2492\3\2"+
		"\2\2\u24a7\u2495\3\2\2\2\u24a7\u2498\3\2\2\2\u24a7\u249b\3\2\2\2\u24a7"+
		"\u249d\3\2\2\2\u24a7\u249f\3\2\2\2\u24a8\u0301\3\2\2\2\u24a9\u24b0\7\u0333"+
		"\2\2\u24aa\u24ab\7\u0209\2\2\u24ab\u24ac\7\u0324\2\2\u24ac\u24b1\t~\2"+
		"\2\u24ad\u24ae\7\u014b\2\2\u24ae\u24af\7\u0324\2\2\u24af\u24b1\7\u031c"+
		"\2\2\u24b0\u24aa\3\2\2\2\u24b0\u24ad\3\2\2\2\u24b1\u24b2\3\2\2\2\u24b2"+
		"\u24b3\7\u0334\2\2\u24b3\u0303\3\2\2\2\u24b4\u24b5\7\3\2\2\u24b5\u24b6"+
		"\7B\2\2\u24b6\u24bb\5\u0306\u0184\2\u24b7\u24b8\7\u0335\2\2\u24b8\u24ba"+
		"\5\u0306\u0184\2\u24b9\u24b7\3\2\2\2\u24ba\u24bd\3\2\2\2\u24bb\u24b9\3"+
		"\2\2\2\u24bb\u24bc\3\2\2\2\u24bc\u24c1\3\2\2\2\u24bd\u24bb\3\2\2\2\u24be"+
		"\u24bf\7\u00a3\2\2\u24bf\u24c0\7\u0173\2\2\u24c0\u24c2\5\u0342\u01a2\2"+
		"\u24c1\u24be\3\2\2\2\u24c1\u24c2\3\2\2\2\u24c2\u24e9\3\2\2\2\u24c3\u24c4"+
		"\7\3\2\2\u24c4\u24c5\7\u01c0\2\2\u24c5\u24c6\7B\2\2\u24c6\u24cb\5\u0306"+
		"\u0184\2\u24c7\u24c8\7\u0335\2\2\u24c8\u24ca\5\u0306\u0184\2\u24c9\u24c7"+
		"\3\2\2\2\u24ca\u24cd\3\2\2\2\u24cb\u24c9\3\2\2\2\u24cb\u24cc\3\2\2\2\u24cc"+
		"\u24e9\3\2\2\2\u24cd\u24cb\3\2\2\2\u24ce\u24cf\7\u0269\2\2\u24cf\u24d2"+
		"\7B\2\2\u24d0\u24d3\5\u0342\u01a2\2\u24d1\u24d3\7\u031c\2\2\u24d2\u24d0"+
		"\3\2\2\2\u24d2\u24d1\3\2\2\2\u24d3\u24e9\3\2\2\2\u24d4\u24d5\7\u01f2\2"+
		"\2\u24d5\u24d6\7B\2\2\u24d6\u24e9\5\u0306\u0184\2\u24d7\u24d8\7\3\2\2"+
		"\u24d8\u24d9\7\u0173\2\2\u24d9\u24db\5\u0342\u01a2\2\u24da\u24dc\7\36"+
		"\2\2\u24db\u24da\3\2\2\2\u24db\u24dc\3\2\2\2\u24dc\u24de\3\2\2\2\u24dd"+
		"\u24df\t\177\2\2\u24de\u24dd\3\2\2\2\u24de\u24df\3\2\2\2\u24df\u24e9\3"+
		"\2\2\2\u24e0\u24e1\7\u0269\2\2\u24e1\u24e2\7\u0173\2\2\u24e2\u24e9\5\u0342"+
		"\u01a2\2\u24e3\u24e4\7\u01f2\2\2\u24e4\u24e5\7\u0173\2\2\u24e5\u24e6\5"+
		"\u0342\u01a2\2\u24e6\u24e7\5\u0308\u0185\2\u24e7\u24e9\3\2\2\2\u24e8\u24b4"+
		"\3\2\2\2\u24e8\u24c3\3\2\2\2\u24e8\u24ce\3\2\2\2\u24e8\u24d4\3\2\2\2\u24e8"+
		"\u24d7\3\2\2\2\u24e8\u24e0\3\2\2\2\u24e8\u24e3\3\2\2\2\u24e9\u0305\3\2"+
		"\2\2\u24ea\u24eb\7\u0333\2\2\u24eb\u24ec\7\u01f6\2\2\u24ec\u24ef\7\u0324"+
		"\2\2\u24ed\u24f0\5\u0342\u01a2\2\u24ee\u24f0\7\u031c\2\2\u24ef\u24ed\3"+
		"\2\2\2\u24ef\u24ee\3\2\2\2\u24f0\u24f8\3\2\2\2\u24f1\u24f2\7\u0335\2\2"+
		"\u24f2\u24f3\7\u01fd\2\2\u24f3\u24f6\7\u0324\2\2\u24f4\u24f7\5\u0342\u01a2"+
		"\2\u24f5\u24f7\7\u031c\2\2\u24f6\u24f4\3\2\2\2\u24f6\u24f5\3\2\2\2\u24f7"+
		"\u24f9\3\2\2\2\u24f8\u24f1\3\2\2\2\u24f8\u24f9\3\2\2\2\u24f9\u24fe\3\2"+
		"\2\2\u24fa\u24fb\7\u0335\2\2\u24fb\u24fc\7\u0175\2\2\u24fc\u24fd\7\u0324"+
		"\2\2\u24fd\u24ff\7\u031c\2\2\u24fe\u24fa\3\2\2\2\u24fe\u24ff\3\2\2\2\u24ff"+
		"\u2504\3\2\2\2\u2500\u2501\7\u0335\2\2\u2501\u2502\7\u02b3\2\2\u2502\u2503"+
		"\7\u0324\2\2\u2503\u2505\5\u034a\u01a6\2\u2504\u2500\3\2\2\2\u2504\u2505"+
		"\3\2\2\2\u2505\u250d\3\2\2\2\u2506\u2507\7\u0335\2\2\u2507\u2508\7\u01d9"+
		"\2\2\u2508\u250b\7\u0324\2\2\u2509\u250c\5\u034a\u01a6\2\u250a\u250c\7"+
		"\u02f6\2\2\u250b\u2509\3\2\2\2\u250b\u250a\3\2\2\2\u250c\u250e\3\2\2\2"+
		"\u250d\u2506\3\2\2\2\u250d\u250e\3\2\2\2\u250e\u2513\3\2\2\2\u250f\u2510"+
		"\7\u0335\2\2\u2510\u2511\7\u0174\2\2\u2511\u2512\7\u0324\2\2\u2512\u2514"+
		"\5\u034a\u01a6\2\u2513\u250f\3\2\2\2\u2513\u2514\3\2\2\2\u2514\u2517\3"+
		"\2\2\2\u2515\u2516\7\u0335\2\2\u2516\u2518\7\u0216\2\2\u2517\u2515\3\2"+
		"\2\2\u2517\u2518\3\2\2\2\u2518\u2519\3\2\2\2\u2519\u251a\7\u0334\2\2\u251a"+
		"\u0307\3\2\2\2\u251b\u2526\7\u025d\2\2\u251c\u2526\7\u025c\2\2\u251d\u2526"+
		"\7\u0259\2\2\u251e\u2526\7\u025b\2\2\u251f\u2526\7.\2\2\u2520\u2521\7"+
		"\u01f6\2\2\u2521\u2522\7\u0324\2\2\u2522\u2526\5\u0342\u01a2\2\u2523\u2526"+
		"\7\u00f1\2\2\u2524\u2526\7\u00f0\2\2\u2525\u251b\3\2\2\2\u2525\u251c\3"+
		"\2\2\2\u2525\u251d\3\2\2\2\u2525\u251e\3\2\2\2\u2525\u251f\3\2\2\2\u2525"+
		"\u2520\3\2\2\2\u2525\u2523\3\2\2\2\u2525\u2524\3\2\2\2\u2526\u0309\3\2"+
		"\2\2\u2527\u252a\5\u030c\u0187\2\u2528\u252a\5\u030e\u0188\2\u2529\u2527"+
		"\3\2\2\2\u2529\u2528\3\2\2\2\u252a\u030b\3\2\2\2\u252b\u252c\7\u0173\2"+
		"\2\u252c\u252f\5\u0342\u01a2\2\u252d\u252e\7\36\2\2\u252e\u2530\7\u0178"+
		"\2\2\u252f\u252d\3\2\2\2\u252f\u2530\3\2\2\2\u2530\u2532\3\2\2\2\u2531"+
		"\u2533\7.\2\2\u2532\u2531\3\2\2\2\u2532\u2533\3\2\2\2\u2533\u2536\3\2"+
		"\2\2\u2534\u2535\7\36\2\2\u2535\u2537\7\u01e1\2\2\u2536\u2534\3\2\2\2"+
		"\u2536\u2537\3\2\2\2\u2537\u2538\3\2\2\2\u2538\u253d\5\u030e\u0188\2\u2539"+
		"\u253a\7\u0335\2\2\u253a\u253c\5\u030e\u0188\2\u253b\u2539\3\2\2\2\u253c"+
		"\u253f\3\2\2\2\u253d\u253b\3\2\2\2\u253d\u253e\3\2\2\2\u253e\u030d\3\2"+
		"\2\2\u253f\u253d\3\2\2\2\u2540\u2541\7\u0333\2\2\u2541\u2542\7\u01f6\2"+
		"\2\u2542\u2545\7\u0324\2\2\u2543\u2546\5\u0342\u01a2\2\u2544\u2546\7\u031c"+
		"\2\2\u2545\u2543\3\2\2\2\u2545\u2544\3\2\2\2\u2546\u2548\3\2\2\2\u2547"+
		"\u2549\7\u0335\2\2\u2548\u2547\3\2\2\2\u2548\u2549\3\2\2\2\u2549\u254a"+
		"\3\2\2\2\u254a\u254b\7\u0175\2\2\u254b\u254c\7\u0324\2\2\u254c\u254e\7"+
		"\u031c\2\2\u254d\u254f\7\u0335\2\2\u254e\u254d\3\2\2\2\u254e\u254f\3\2"+
		"\2\2\u254f\u2556\3\2\2\2\u2550\u2551\7\u02b3\2\2\u2551\u2552\7\u0324\2"+
		"\2\u2552\u2554\5\u034a\u01a6\2\u2553\u2555\7\u0335\2\2\u2554\u2553\3\2"+
		"\2\2\u2554\u2555\3\2\2\2\u2555\u2557\3\2\2\2\u2556\u2550\3\2\2\2\u2556"+
		"\u2557\3\2\2\2\u2557\u2561\3\2\2\2\u2558\u2559\7\u01d9\2\2\u2559\u255c"+
		"\7\u0324\2\2\u255a\u255d\5\u034a\u01a6\2\u255b\u255d\7\u02f6\2\2\u255c"+
		"\u255a\3\2\2\2\u255c\u255b\3\2\2\2\u255d\u255f\3\2\2\2\u255e\u2560\7\u0335"+
		"\2\2\u255f\u255e\3\2\2\2\u255f\u2560\3\2\2\2\u2560\u2562\3\2\2\2\u2561"+
		"\u2558\3\2\2\2\u2561\u2562\3\2\2\2\u2562\u2569\3\2\2\2\u2563\u2564\7\u0174"+
		"\2\2\u2564\u2565\7\u0324\2\2\u2565\u2567\5\u034a\u01a6\2\u2566\u2568\7"+
		"\u0335\2\2\u2567\u2566\3\2\2\2\u2567\u2568\3\2\2\2\u2568\u256a\3\2\2\2"+
		"\u2569\u2563\3\2\2\2\u2569\u256a\3\2\2\2\u256a\u256b\3\2\2\2\u256b\u256c"+
		"\7\u0334\2\2\u256c\u030f\3\2\2\2\u256d\u256e\5\u0342\u01a2\2\u256e\u256f"+
		"\7\u0330\2\2\u256f\u2570\5\u0342\u01a2\2\u2570\u2571\7\u0330\2\2\u2571"+
		"\u2572\5\u0342\u01a2\2\u2572\u2573\7\u0330\2\2\u2573\u257f\3\2\2\2\u2574"+
		"\u2575\5\u0342\u01a2\2\u2575\u2577\7\u0330\2\2\u2576\u2578\5\u0342\u01a2"+
		"\2\u2577\u2576\3\2\2\2\u2577\u2578\3\2\2\2\u2578\u2579\3\2\2\2\u2579\u257a"+
		"\7\u0330\2\2\u257a\u257f\3\2\2\2\u257b\u257c\5\u0342\u01a2\2\u257c\u257d"+
		"\7\u0330\2\2\u257d\u257f\3\2\2\2\u257e\u256d\3\2\2\2\u257e\u2574\3\2\2"+
		"\2\u257e\u257b\3\2\2\2\u257e\u257f\3\2\2\2\u257f\u2580\3\2\2\2\u2580\u2581"+
		"\5\u0342\u01a2\2\u2581\u0311\3\2\2\2\u2582\u2583\5\u0310\u0189\2\u2583"+
		"\u2584\7\u0330\2\2\u2584\u2586\3\2\2\2\u2585\u2582\3\2\2\2\u2585\u2586"+
		"\3\2\2\2\u2586\u2587\3\2\2\2\u2587\u2588\5\u0342\u01a2\2\u2588\u0313\3"+
		"\2\2\2\u2589\u258e\5\u0316\u018c\2\u258a\u258b\7\u0335\2\2\u258b\u258d"+
		"\5\u0316\u018c\2\u258c\u258a\3\2\2\2\u258d\u2590\3\2\2\2\u258e\u258c\3"+
		"\2\2\2\u258e\u258f\3\2\2\2\u258f\u0315\3\2\2\2\u2590\u258e\3\2\2\2\u2591"+
		"\u2593\5\u0342\u01a2\2\u2592\u2594\5\u0318\u018d\2\u2593\u2592\3\2\2\2"+
		"\u2593\u2594\3\2\2\2\u2594\u0317\3\2\2\2\u2595\u2596\t\u0080\2\2\u2596"+
		"\u0319\3\2\2\2\u2597\u259c\5\u0342\u01a2\2\u2598\u2599\7\u0335\2\2\u2599"+
		"\u259b\5\u0342\u01a2\2\u259a\u2598\3\2\2\2\u259b\u259e\3\2\2\2\u259c\u259a"+
		"\3\2\2\2\u259c\u259d\3\2\2\2\u259d\u031b\3\2\2\2\u259e\u259c\3\2\2\2\u259f"+
		"\u25a2\5\u0342\u01a2\2\u25a0\u25a2\7\u0319\2\2\u25a1\u259f\3\2\2\2\u25a1"+
		"\u25a0\3\2\2\2\u25a2\u031d\3\2\2\2\u25a3\u25a4\t\b\2\2\u25a4\u031f\3\2"+
		"\2\2\u25a5\u25a6\t\u0081\2\2\u25a6\u0321\3\2\2\2\u25a7\u25a9\7f\2\2\u25a8"+
		"\u25a7\3\2\2\2\u25a8\u25a9\3\2\2\2\u25a9\u25aa\3\2\2\2\u25aa\u25ab\7g"+
		"\2\2\u25ab\u0323\3\2\2\2\u25ac\u25b0\5\u0310\u0189\2\u25ad\u25b0\7\u008c"+
		"\2\2\u25ae\u25b0\7^\2\2\u25af\u25ac\3\2\2\2\u25af\u25ad\3\2\2\2\u25af"+
		"\u25ae\3\2\2\2\u25b0\u0325\3\2\2\2\u25b1\u25b2\7\f\2\2\u25b2\u25b3\7\u0128"+
		"\2\2\u25b3\u25b4\7\u02e1\2\2\u25b4\u25b5\7\u0333\2\2\u25b5\u25b6\7\u0319"+
		"\2\2\u25b6\u25b7\7\u0334\2\2\u25b7\u25b8\7\u02e0\2\2\u25b8\u25b9\7\u0324"+
		"\2\2\u25b9\u25ba\5\u014c\u00a7\2\u25ba\u0327\3\2\2\2\u25bb\u25bc\7\f\2"+
		"\2\u25bc\u25be\7\u0149\2\2\u25bd\u25bf\7\u0128\2\2\u25be\u25bd\3\2\2\2"+
		"\u25be\u25bf\3\2\2\2\u25bf\u25c0\3\2\2\2\u25c0\u25c1\7\u0319\2\2\u25c1"+
		"\u25c2\7H\2\2\u25c2\u25c3\7\u02a7\2\2\u25c3\u25c4\5\u032c\u0197\2\u25c4"+
		"\u25c5\7\u00a3\2\2\u25c5\u25c6\7\u02a7\2\2\u25c6\u25c9\5\u032c\u0197\2"+
		"\u25c7\u25c8\7\u0335\2\2\u25c8\u25ca\7\u031c\2\2\u25c9\u25c7\3\2\2\2\u25c9"+
		"\u25ca\3\2\2\2\u25ca\u25cb\3\2\2\2\u25cb\u25cc\7l\2\2\u25cc\u25cd\7\u0126"+
		"\2\2\u25cd\u25e4\5\u032c\u0197\2\u25ce\u25d5\7\u00b8\2\2\u25cf\u25d0\t"+
		"\u0082\2\2\u25d0\u25d1\7\u0324\2\2\u25d1\u25d3\7\u0319\2\2\u25d2\u25d4"+
		"\7\u0335\2\2\u25d3\u25d2\3\2\2\2\u25d3\u25d4\3\2\2\2\u25d4\u25d6\3\2\2"+
		"\2\u25d5\u25cf\3\2\2\2\u25d5\u25d6\3\2\2\2\u25d6\u25dd\3\2\2\2\u25d7\u25d8"+
		"\7\u01b3\2\2\u25d8\u25d9\7\u0324\2\2\u25d9\u25db\t\2\2\2\u25da\u25dc\7"+
		"\u0335\2\2\u25db\u25da\3\2\2\2\u25db\u25dc\3\2\2\2\u25dc\u25de\3\2\2\2"+
		"\u25dd\u25d7\3\2\2\2\u25dd\u25de\3\2\2\2\u25de\u25e2\3\2\2\2\u25df\u25e0"+
		"\7\u0159\2\2\u25e0\u25e1\7\u0324\2\2\u25e1\u25e3\t\b\2\2\u25e2\u25df\3"+
		"\2\2\2\u25e2\u25e3\3\2\2\2\u25e3\u25e5\3\2\2\2\u25e4\u25ce\3\2\2\2\u25e4"+
		"\u25e5\3\2\2\2\u25e5\u0329\3\2\2\2\u25e6\u25e7\7\u01f3\2\2\u25e7\u25e8"+
		"\7\u0128\2\2\u25e8\u25e9\5\u028e\u0148\2\u25e9\u25ea\7\u00a3\2\2\u25ea"+
		"\u25eb\5\u028e\u0148\2\u25eb\u032b\3\2\2\2\u25ec\u25ef\5\u0342\u01a2\2"+
		"\u25ed\u25ef\5\u0290\u0149\2\u25ee\u25ec\3\2\2\2\u25ee\u25ed\3\2\2\2\u25ef"+
		"\u032d\3\2\2\2\u25f0\u25f1\79\2\2\u25f1\u25f2\7\u0128\2\2\u25f2\u25ff"+
		"\7\u0319\2\2\u25f3\u25fa\7\u00b8\2\2\u25f4\u25f5\7\u015d\2\2\u25f5\u25f6"+
		"\7\u0324\2\2\u25f6\u25f7\t\3\2\2\u25f7\u25f8\7\u0145\2\2\u25f8\u25f9\7"+
		"\u0324\2\2\u25f9\u25fb\t\3\2\2\u25fa\u25f4\3\2\2\2\u25fa\u25fb\3\2\2\2"+
		"\u25fb\u25fd\3\2\2\2\u25fc\u25fe\7\u0116\2\2\u25fd\u25fc\3\2\2\2\u25fd"+
		"\u25fe\3\2\2\2\u25fe\u2600\3\2\2\2\u25ff\u25f3\3\2\2\2\u25ff\u2600\3\2"+
		"\2\2\u2600\u032f\3\2\2\2\u2601\u2603\7\u00b4\2\2\u2602\u2601\3\2\2\2\u2602"+
		"\u2603\3\2\2\2\u2603\u2604\3\2\2\2\u2604\u2605\7\u0333\2\2\u2605\u2606"+
		"\5\u0332\u019a\2\u2606\u260c\7\u0334\2\2\u2607\u2609\7\u0335\2\2\u2608"+
		"\u2607\3\2\2\2\u2608\u2609\3\2\2\2\u2609\u260a\3\2\2\2\u260a\u260b\7\u02e0"+
		"\2\2\u260b\u260d\5\u014c\u00a7\2\u260c\u2608\3\2\2\2\u260c\u260d\3\2\2"+
		"\2\u260d\u0331\3\2\2\2\u260e\u260f\7\u0186\2\2\u260f\u2610\7\u0128\2\2"+
		"\u2610\u2611\7N\2\2\u2611\u2612\5.\30\2\u2612\u2613\7H\2\2\u2613\u2614"+
		"\5\u0310\u0189\2\u2614\u0333\3\2\2\2\u2615\u2616\7\u02a0\2\2\u2616\u2617"+
		"\7l\2\2\u2617\u2618\7\u0128\2\2\u2618\u2619\5.\30\2\u2619\u261a\7\u01e7"+
		"\2\2\u261a\u261b\7\u02f0\2\2\u261b\u2620\5\u0290\u0149\2\u261c\u261d\7"+
		"\u0333\2\2\u261d\u261e\5.\30\2\u261e\u261f\7\u0334\2\2\u261f\u2621\3\2"+
		"\2\2\u2620\u261c\3\2\2\2\u2620\u2621\3\2\2\2\u2621\u0335\3\2\2\2\u2622"+
		"\u2624\5\u0310\u0189\2\u2623\u2625\5\u0338\u019d\2\u2624\u2623\3\2\2\2"+
		"\u2624\u2625\3\2\2\2\u2625\u263a\3\2\2\2\u2626\u2627\7\65\2\2\u2627\u263a"+
		"\7z\2\2\u2628\u2629\t\u0083\2\2\u2629\u262b\7\u00b2\2\2\u262a\u262c\5"+
		"\u0338\u019d\2\u262b\u262a\3\2\2\2\u262b\u262c\3\2\2\2\u262c\u263a\3\2"+
		"\2\2\u262d\u262e\7c\2\2\u262e\u2630\t\u0084\2\2\u262f\u2631\7\u00b2\2"+
		"\2\u2630\u262f\3\2\2\2\u2630\u2631\3\2\2\2\u2631\u2633\3\2\2\2\u2632\u2634"+
		"\5\u0338\u019d\2\u2633\u2632\3\2\2\2\u2633\u2634\3\2\2\2\u2634\u263a\3"+
		"\2\2\2\u2635\u2637\7)\2\2\u2636\u2638\7\u00b2\2\2\u2637\u2636\3\2\2\2"+
		"\u2637\u2638\3\2\2\2\u2638\u263a\3\2\2\2\u2639\u2622\3\2\2\2\u2639\u2626"+
		"\3\2\2\2\u2639\u2628\3\2\2\2\u2639\u262d\3\2\2\2\u2639\u2635\3\2\2\2\u263a"+
		"\u0337\3\2\2\2\u263b\u263e\7\u0333\2\2\u263c\u263f\7\u031a\2\2\u263d\u263f"+
		"\7\u01d6\2\2\u263e\u263c\3\2\2\2\u263e\u263d\3\2\2\2\u263f\u2642\3\2\2"+
		"\2\u2640\u2641\7\u0335\2\2\u2641\u2643\7\u031a\2\2\u2642\u2640\3\2\2\2"+
		"\u2642\u2643\3\2\2\2\u2643\u2644\3\2\2\2\u2644\u2645\7\u0334\2\2\u2645"+
		"\u0339\3\2\2\2\u2646\u264a\7g\2\2\u2647\u264a\7.\2\2\u2648\u264a\5\u033c"+
		"\u019f\2\u2649\u2646\3\2\2\2\u2649\u2647\3\2\2\2\u2649\u2648\3\2\2\2\u264a"+
		"\u033b\3\2\2\2\u264b\u2657\7\u031c\2\2\u264c\u2657\7\u031d\2\2\u264d\u2657"+
		"\5\u033e\u01a0\2\u264e\u2650\5\u0340\u01a1\2\u264f\u264e\3\2\2\2\u264f"+
		"\u2650\3\2\2\2\u2650\u2651\3\2\2\2\u2651\u2652\7\u0332\2\2\u2652\u2657"+
		"\to\2\2\u2653\u2657\7\u02ea\2\2\u2654\u2657\7\u016e\2\2\u2655\u2657\7"+
		"\u0320\2\2\u2656\u264b\3\2\2\2\u2656\u264c\3\2\2\2\u2656\u264d\3\2\2\2"+
		"\u2656\u264f\3\2\2\2\u2656\u2653\3\2\2\2\u2656\u2654\3\2\2\2\u2656\u2655"+
		"\3\2\2\2\u2657\u033d\3\2\2\2\u2658\u265a\5\u0340\u01a1\2\u2659\u2658\3"+
		"\2\2\2\u2659\u265a\3\2\2\2\u265a\u265b\3\2\2\2\u265b\u265c\t\u0085\2\2"+
		"\u265c\u033f\3\2\2\2\u265d\u265e\t\u0086\2\2\u265e\u0341\3\2\2\2\u265f"+
		"\u2663\5\u0344\u01a3\2\u2660\u2663\7\u0316\2\2\u2661\u2663\7\u0318\2\2"+
		"\u2662\u265f\3\2\2\2\u2662\u2660\3\2\2\2\u2662\u2661\3\2\2\2\u2663\u0343"+
		"\3\2\2\2\u2664\u2665\t\u0087\2\2\u2665\u0345\3\2\2\2\u2666\u2676\7\u0324"+
		"\2\2\u2667\u2676\7\u0325\2\2\u2668\u2676\7\u0326\2\2\u2669\u266a\7\u0326"+
		"\2\2\u266a\u2676\7\u0324\2\2\u266b\u266c\7\u0325\2\2\u266c\u2676\7\u0324"+
		"\2\2\u266d\u266e\7\u0326\2\2\u266e\u2676\7\u0325\2\2\u266f\u2670\7\u0327"+
		"\2\2\u2670\u2676\7\u0324\2\2\u2671\u2672\7\u0327\2\2\u2672\u2676\7\u0325"+
		"\2\2\u2673\u2674\7\u0327\2\2\u2674\u2676\7\u0326\2\2\u2675\u2666\3\2\2"+
		"\2\u2675\u2667\3\2\2\2\u2675\u2668\3\2\2\2\u2675\u2669\3\2\2\2\u2675\u266b"+
		"\3\2\2\2\u2675\u266d\3\2\2\2\u2675\u266f\3\2\2\2\u2675\u2671\3\2\2\2\u2675"+
		"\u2673\3\2\2\2\u2676\u0347\3\2\2\2\u2677\u2678\t\u0088\2\2\u2678\u0349"+
		"\3\2\2\2\u2679\u267b\7\u031a\2\2\u267a\u267c\t\u0089\2\2\u267b\u267a\3"+
		"\2\2\2\u267b\u267c\3\2\2\2\u267c\u034b\3\2\2\2\u0560\u034d\u0352\u0358"+
		"\u0362\u0369\u036e\u0371\u0376\u0379\u0381\u0384\u038b\u0392\u0396\u039b"+
		"\u03a2\u03a7\u03af\u03b6\u03bf\u03f3\u042b\u0439\u0440\u044d\u045c\u0460"+
		"\u0466\u046a\u0473\u047c\u0481\u0486\u048f\u0498\u049e\u04ac\u04b2\u04bb"+
		"\u04be\u04ca\u04cf\u04d6\u04da\u04dc\u04ed\u04f9\u0500\u0508\u0512\u0515"+
		"\u051d\u0520\u0528\u052a\u0532\u053b\u053e\u0548\u054e\u0556\u055d\u0564"+
		"\u0567\u056c\u0571\u057a\u0583\u0592\u059f\u05a1\u05ad\u05af\u05b6\u05be"+
		"\u05c6\u05cf\u05f4\u060c\u061e\u0621\u0626\u0629\u062e\u0631\u0636\u0639"+
		"\u063e\u0641\u0649\u064c\u0654\u0661\u066c\u0671\u0675\u067b\u0692\u069e"+
		"\u06a9\u06ae\u06b2\u06b8\u06ba\u06c7\u06de\u06e5\u06ee\u06f3\u06f6\u06fb"+
		"\u06fe\u0703\u0708\u0723\u072b\u0732\u0734\u0742\u0751\u075a\u075c\u0769"+
		"\u076c\u076e\u0773\u0777\u077a\u077c\u0782\u0784\u0789\u0799\u07a1\u07a9"+
		"\u07ab\u07ad\u07b6\u07ca\u07d6\u07e5\u07e9\u07ff\u080b\u0812\u0818\u0832"+
		"\u0843\u0847\u084e\u0854\u0859\u0860\u0867\u0871\u0878\u087d\u0882\u0884"+
		"\u088c\u0892\u0899\u08a0\u08ac\u08b6\u08bc\u08c0\u08c4\u08df\u08eb\u08f1"+
		"\u08fa\u08fd\u090f\u0913\u0917\u091c\u092a\u092e\u0932\u0936\u093b\u0942"+
		"\u094c\u0951\u0954\u095d\u0962\u0966\u0969\u0970\u0976\u097b\u0986\u098f"+
		"\u0994\u0999\u09a0\u09a6\u09ab\u09af\u09b2\u09b7\u09bd\u09c0\u09c5\u09c8"+
		"\u09cf\u09d1\u09d4\u09da\u09dd\u09e2\u09e5\u09ea\u09ed\u09f2\u09f7\u09fa"+
		"\u09fd\u0a04\u0a08\u0a0f\u0a16\u0a1c\u0a29\u0a30\u0a3a\u0a43\u0a47\u0a52"+
		"\u0a58\u0a5d\u0a5f\u0a72\u0a76\u0a7d\u0a86\u0a8c\u0a92\u0a9a\u0a9c\u0aa5"+
		"\u0aa9\u0aac\u0ab0\u0ab5\u0abb\u0abe\u0ac2\u0aca\u0acc\u0acf\u0adb\u0ae2"+
		"\u0ae9\u0aeb\u0aed\u0af2\u0af8\u0afb\u0afd\u0aff\u0b02\u0b07\u0b0a\u0b0f"+
		"\u0b1d\u0b24\u0b2b\u0b2d\u0b2f\u0b34\u0b3a\u0b3d\u0b3f\u0b41\u0b44\u0b49"+
		"\u0b4c\u0b51\u0b62\u0b73\u0b78\u0b80\u0b85\u0b8b\u0b8f\u0b93\u0ba3\u0ba5"+
		"\u0bae\u0bb3\u0bb5\u0bb9\u0bbe\u0bc6\u0bcb\u0bce\u0bd6\u0bd9\u0bde\u0be3"+
		"\u0be8\u0bed\u0bf2\u0bf7\u0bfb\u0c00\u0c0a\u0c0f\u0c12\u0c15\u0c1a\u0c1d"+
		"\u0c22\u0c25\u0c2a\u0c2d\u0c32\u0c35\u0c3a\u0c3d\u0c42\u0c48\u0c4d\u0c50"+
		"\u0c55\u0c5c\u0c5e\u0c69\u0c6e\u0c73\u0c75\u0c77\u0c7c\u0c8e\u0c90\u0ca7"+
		"\u0cb2\u0cbc\u0cbf\u0cd5\u0cde\u0ce9\u0cf3\u0cf9\u0d01\u0d0e\u0d16\u0d1b"+
		"\u0d1e\u0d23\u0d26\u0d2b\u0d2e\u0d36\u0d3c\u0d40\u0d47\u0d4d\u0d51\u0d54"+
		"\u0d56\u0d59\u0d5e\u0d61\u0d66\u0d69\u0d6e\u0d71\u0d76\u0d79\u0d84\u0d8f"+
		"\u0d98\u0d9a\u0da0\u0da2\u0da8\u0daa\u0db0\u0db2\u0db7\u0dc2\u0dc8\u0dce"+
		"\u0dd2\u0dd7\u0dda\u0ddf\u0de2\u0de7\u0dea\u0df3\u0e02\u0e06\u0e0b\u0e13"+
		"\u0e1d\u0e20\u0e24\u0e3b\u0e41\u0e47\u0e4b\u0e51\u0e56\u0e5c\u0e61\u0e65"+
		"\u0e67\u0e6c\u0e75\u0e78\u0e7b\u0e81\u0e88\u0e8c\u0e95\u0e98\u0ea4\u0eab"+
		"\u0eb2\u0eb8\u0ec0\u0ec2\u0ec4\u0ecc\u0edb\u0ee1\u0ee4\u0ee9\u0eed\u0eef"+
		"\u0ef8\u0efe\u0f05\u0f08\u0f0e\u0f14\u0f19\u0f1b\u0f21\u0f23\u0f28\u0f2e"+
		"\u0f34\u0f39\u0f3b\u0f3f\u0f43\u0f46\u0f54\u0f59\u0f5d\u0f6a\u0f6d\u0f6f"+
		"\u0f77\u0f80\u0f86\u0f8d\u0f90\u0f96\u0f9c\u0fa1\u0fa3\u0fa9\u0fab\u0fb0"+
		"\u0fb6\u0fbc\u0fc2\u0fc7\u0fc9\u0fcd\u0fd1\u0fd4\u0fe2\u0fe7\u0feb\u0ff8"+
		"\u0ffb\u0ffd\u1005\u100f\u1018\u1021\u102b\u1034\u103d\u1048\u104c\u1051"+
		"\u1053\u1055\u105a\u105e\u1063\u1065\u1067\u1075\u107a\u1090\u10a6\u10ab"+
		"\u10b7\u10be\u10cc\u10cf\u10d5\u10dc\u10e3\u10e8\u10ec\u10f2\u10fd\u1110"+
		"\u1117\u111c\u112e\u113d\u113f\u114a\u1150\u1156\u1159\u115f\u1169\u116c"+
		"\u1173\u1176\u117b\u117d\u1182\u1187\u118f\u1192\u1198\u119b\u11a2\u11ac"+
		"\u11b7\u11c2\u11c8\u11d6\u11d8\u11db\u11df\u11ea\u11f0\u11fe\u1200\u1203"+
		"\u1207\u120a\u120e\u1210\u1218\u1224\u122d\u1230\u1235\u123c\u123e\u1244"+
		"\u1246\u124e\u1250\u1256\u1258\u125e\u1260\u1264\u1266\u1269\u126d\u126f"+
		"\u1278\u127d\u1281\u1289\u1290\u1295\u129f\u12a4\u12aa\u12ae\u12b9\u12c0"+
		"\u12cc\u12cf\u12d7\u12d9\u12dc\u12e0\u12e3\u12e6\u12ee\u12f7\u12fd\u1305"+
		"\u1309\u130d\u1316\u131c\u1320\u1323\u132e\u1332\u1339\u133e\u1341\u1346"+
		"\u1349\u134e\u1351\u1354\u135c\u135f\u1366\u136a\u136c\u136e\u1371\u1374"+
		"\u1377\u137f\u1381\u1384\u1389\u138c\u1392\u1395\u139b\u139e\u13a1\u13a9"+
		"\u13ad\u13b4\u13bb\u13bf\u13c4\u13c7\u13cb\u13ce\u13d3\u13d6\u13da\u13dd"+
		"\u13e0\u13e4\u13e7\u13ef\u13f4\u13f9\u13ff\u1404\u140a\u140d\u1415\u1417"+
		"\u141c\u141f\u1427\u142b\u1433\u1436\u143d\u1441\u1443\u1445\u1448\u144b"+
		"\u1453\u1459\u145f\u1461\u1465\u1468\u146d\u1471\u1478\u147c\u1483\u148d"+
		"\u1490\u1492\u1496\u149e\u14a1\u14b0\u14c0\u14d2\u14d8\u14e0\u14e9\u14ee"+
		"\u14f8\u14fd\u1500\u1507\u150b\u150e\u1510\u151b\u1522\u1525\u152d\u1536"+
		"\u153a\u153d\u1541\u1548\u154c\u1562\u1566\u156e\u1570\u1574\u1579\u157f"+
		"\u1582\u1593\u159a\u159f\u15aa\u15b4\u15b8\u15ba\u15bd\u15c1\u15c4\u15cf"+
		"\u15d2\u15e0\u15e2\u15e5\u15e8\u15f2\u15f5\u15f8\u15fc\u160e\u1611\u1618"+
		"\u161c\u161e\u1626\u1629\u162d\u1636\u163f\u1647\u164a\u1650\u1657\u165b"+
		"\u165e\u166c\u1672\u167c\u167f\u168a\u168d\u1690\u1699\u16a2\u16a8\u16ac"+
		"\u16af\u16b5\u16bf\u16c4\u16c7\u16ca\u16d1\u16df\u16ee\u16f1\u16fb\u1703"+
		"\u1706\u170d\u1716\u171d\u1723\u1727\u1731\u1738\u1741\u1743\u1747\u174b"+
		"\u1750\u1755\u1759\u1762\u176c\u176f\u1777\u177f\u1782\u1787\u179a\u179c"+
		"\u17a9\u17af\u17b1\u17b5\u17bd\u17c7\u17d2\u17d6\u17da\u17dc\u17e0\u17e7"+
		"\u17ed\u17fa\u17fc\u1806\u180e\u1811\u181f\u1839\u1849\u1854\u1859\u185c"+
		"\u1864\u186e\u1874\u187b\u187d\u1889\u1894\u1898\u189d\u18a0\u18a2\u18a5"+
		"\u18b1\u18b3\u18b5\u18b8\u18bd\u18c0\u18c5\u18cf\u18d3\u18d8\u18db\u18dd"+
		"\u18e0\u18ec\u18ee\u18f0\u18f3\u18f9\u18ff\u190c\u1911\u192b\u1931\u193c"+
		"\u1945\u1953\u195b\u1964\u197b\u1988\u198d\u1994\u199c\u199f\u19a8\u19b1"+
		"\u19b8\u19bf\u19c8\u19cf\u19dd\u19df\u19e3\u19f4\u19f8\u1a00\u1a0d\u1a13"+
		"\u1a1b\u1a21\u1a25\u1a2b\u1a2e\u1a39\u1a3c\u1a3f\u1a48\u1a4b\u1a4d\u1a54"+
		"\u1a5b\u1a5e\u1a61\u1a68\u1a6d\u1a72\u1a76\u1a7c\u1a80\u1a82\u1a87\u1a8c"+
		"\u1a90\u1a95\u1a9b\u1a9f\u1aa3\u1aa5\u1aa9\u1aad\u1ab1\u1ab5\u1abb\u1abe"+
		"\u1ac4\u1ac8\u1acc\u1ad2\u1ad8\u1ada\u1add\u1ae1\u1ae5\u1ae9\u1aef\u1af2"+
		"\u1af8\u1afe\u1b01\u1b07\u1b0a\u1b10\u1b13\u1b17\u1b1b\u1b1f\u1b24\u1b27"+
		"\u1b2b\u1b2f\u1b40\u1b42\u1b44\u1b47\u1b4e\u1b53\u1b57\u1b5d\u1b61\u1b63"+
		"\u1b68\u1b6d\u1b71\u1b76\u1b7c\u1b80\u1b84\u1b86\u1b8a\u1b8e\u1b92\u1b96"+
		"\u1b9c\u1b9f\u1ba5\u1ba9\u1bad\u1bb3\u1bb9\u1bbb\u1bbe\u1bc2\u1bc6\u1bca"+
		"\u1bd0\u1bd3\u1bd9\u1bdf\u1be2\u1be8\u1beb\u1bf1\u1bf4\u1bf8\u1bfc\u1c00"+
		"\u1c05\u1c08\u1c0c\u1c10\u1c16\u1c19\u1c1d\u1c2e\u1c30\u1c32\u1c35\u1c43"+
		"\u1c49\u1c51\u1c58\u1c5a\u1c5d\u1c7d\u1c85\u1c8d\u1c8f\u1c93\u1c9b\u1c9f"+
		"\u1ca5\u1caa\u1cad\u1cb4\u1cb7\u1cbf\u1cc2\u1cc6\u1ccc\u1cce\u1cd4\u1cde"+
		"\u1ce3\u1cf2\u1cfd\u1d02\u1d0a\u1d0c\u1d10\u1d13\u1d1b\u1d1f\u1d26\u1d2e"+
		"\u1d3a\u1d41\u1d57\u1d5b\u1d5d\u1d5f\u1d66\u1d6a\u1d71\u1d78\u1d7d\u1d85"+
		"\u1d8a\u1d96\u1d98\u1da3\u1daa\u1db4\u1dcb\u1dd8\u1ddc\u1de4\u1ded\u1df3"+
		"\u1dfd\u1dff\u1e0d\u1e12\u1e19\u1e1c\u1e20\u1e22\u1e33\u1e42\u1e4a\u1e53"+
		"\u1e5b\u1e61\u1e6f\u1e76\u1e7c\u1e81\u1e83\u1e89\u1e91\u1e93\u1e97\u1ea1"+
		"\u1ea5\u1eab\u1ead\u1eb6\u1ebe\u1ec2\u1eca\u1ecf\u1ed4\u1ee2\u1ee9\u1eee"+
		"\u1ef4\u1ef8\u1efd\u1f00\u1f08\u1f0d\u1f16\u1f1b\u1f1e\u1f22\u1f27\u1f2d"+
		"\u1f2f\u1f3a\u1f3d\u1f40\u1f43\u1f47\u1f4f\u1f57\u1f5a\u1f5d\u1f60\u1f62"+
		"\u1f66\u1f6d\u1f70\u1f73\u1f79\u1f7d\u1f81\u1f97\u1f9a\u1f9d\u1fa0\u1fa2"+
		"\u1fad\u1fb8\u1fc1\u1fcd\u1fd3\u1fde\u1fe0\u1fe2\u1fec\u1ffb\u2009\u2014"+
		"\u2018\u202a\u2039\u204b\u204d\u2067\u206e\u2083\u208a\u208e\u2096\u209a"+
		"\u209e\u20a8\u20ad\u20b4\u20bc\u20c5\u20c9\u20d3\u20da\u20e2\u20e6\u20fc"+
		"\u2105\u210b\u2111\u2117\u2124\u2127\u212b\u212e\u2133\u213b\u213e\u2142"+
		"\u2147\u214e\u2151\u2155\u2158\u215b\u2163\u2175\u2177\u217a\u217c\u219b"+
		"\u219d\u21a2\u21a5\u21a9\u21b3\u21b7\u21bd\u21c1\u21c7\u21c9\u21cf\u21dd"+
		"\u21e6\u21f2\u21f4\u21fe\u2201\u2206\u220f\u2211\u2213\u2218\u2220\u2225"+
		"\u222d\u2232\u2238\u2242\u2244\u224a\u224c\u224f\u2256\u225f\u2281\u2293"+
		"\u229a\u229c\u22a3\u22a9\u22b1\u22b4\u22b7\u22b9\u22c2\u22ca\u22d1\u22d7"+
		"\u22e5\u22f6\u22fb\u230f\u2313\u2317\u2326\u2328\u232c\u233c\u2347\u2357"+
		"\u235b\u237c\u2384\u238a\u238e\u23a2\u23b9\u23bf\u23cc\u23d0\u23d3\u23d8"+
		"\u23dd\u23e6\u23eb\u23f1\u23fa\u2404\u2407\u2415\u241b\u2423\u2427\u242f"+
		"\u2436\u2443\u244b\u2456\u2459\u245c\u2469\u246d\u2475\u247b\u2483\u248a"+
		"\u2490\u24a7\u24b0\u24bb\u24c1\u24cb\u24d2\u24db\u24de\u24e8\u24ef\u24f6"+
		"\u24f8\u24fe\u2504\u250b\u250d\u2513\u2517\u2525\u2529\u252f\u2532\u2536"+
		"\u253d\u2545\u2548\u254e\u2554\u2556\u255c\u255f\u2561\u2567\u2569\u2577"+
		"\u257e\u2585\u258e\u2593\u259c\u25a1\u25a8\u25af\u25be\u25c9\u25d3\u25d5"+
		"\u25db\u25dd\u25e2\u25e4\u25ee\u25fa\u25fd\u25ff\u2602\u2608\u260c\u2620"+
		"\u2624\u262b\u2630\u2633\u2637\u2639\u263e\u2642\u2649\u264f\u2656\u2659"+
		"\u2662\u2675\u267b";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3,
			_serializedATNSegment4
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}
// Generated from /home/vlad/Code/jvaas-platform/jvaas-postgresql/src/main/resources/antlr/SQLParser.g4 by ANTLR 4.8
package io.jvaas.gen;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SQLParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.8", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		ABORT=1, ABSOLUTE=2, ACCESS=3, ACTION=4, ADD=5, ADMIN=6, AFTER=7, AGGREGATE=8, 
		ALSO=9, ALTER=10, ALWAYS=11, ASSERTION=12, ASSIGNMENT=13, AT=14, ATTACH=15, 
		ATTRIBUTE=16, BACKWARD=17, BEFORE=18, BEGIN=19, BY=20, CACHE=21, CALL=22, 
		CALLED=23, CASCADE=24, CASCADED=25, CATALOG=26, CHAIN=27, CHARACTERISTICS=28, 
		CHECKPOINT=29, CLASS=30, CLOSE=31, CLUSTER=32, COLUMNS=33, COMMENT=34, 
		COMMENTS=35, COMMIT=36, COMMITTED=37, CONFIGURATION=38, CONFLICT=39, CONNECTION=40, 
		CONSTRAINTS=41, CONTENT=42, CONTINUE=43, CONVERSION=44, COPY=45, COST=46, 
		CSV=47, CUBE=48, CURRENT=49, CURSOR=50, CYCLE=51, DATA=52, DATABASE=53, 
		DAY=54, DEALLOCATE=55, DECLARE=56, DEFAULTS=57, DEFERRED=58, DEFINER=59, 
		DELETE=60, DELIMITER=61, DELIMITERS=62, DEPENDS=63, DETACH=64, DICTIONARY=65, 
		DISABLE=66, DISCARD=67, DOCUMENT=68, DOMAIN=69, DOUBLE=70, DROP=71, EACH=72, 
		ENABLE=73, ENCODING=74, ENCRYPTED=75, ENUM=76, ESCAPE=77, EVENT=78, EXCLUDE=79, 
		EXCLUDING=80, EXCLUSIVE=81, EXECUTE=82, EXPLAIN=83, EXTENSION=84, EXTERNAL=85, 
		FAMILY=86, FILTER=87, FIRST=88, FOLLOWING=89, FORCE=90, FORWARD=91, FUNCTION=92, 
		FUNCTIONS=93, GENERATED=94, GLOBAL=95, GRANTED=96, GROUPS=97, HANDLER=98, 
		HEADER=99, HOLD=100, HOUR=101, IDENTITY=102, IF=103, IMMEDIATE=104, IMMUTABLE=105, 
		IMPLICIT=106, IMPORT=107, INCLUDE=108, INCLUDING=109, INCREMENT=110, INDEX=111, 
		INDEXES=112, INHERIT=113, INHERITS=114, INLINE=115, INPUT=116, INSENSITIVE=117, 
		INSERT=118, INSTEAD=119, INVOKER=120, ISOLATION=121, KEY=122, LABEL=123, 
		LANGUAGE=124, LARGE=125, LAST=126, LEAKPROOF=127, LEVEL=128, LISTEN=129, 
		LOAD=130, LOCAL=131, LOCATION=132, LOCK=133, LOCKED=134, LOGGED=135, MAPPING=136, 
		MATCH=137, MATERIALIZED=138, MAXVALUE=139, METHOD=140, MINUTE=141, MINVALUE=142, 
		MODE=143, MONTH=144, MOVE=145, NAME=146, NAMES=147, NEW=148, NEXT=149, 
		NO=150, NOTHING=151, NOTIFY=152, NOWAIT=153, NULLS=154, OBJECT=155, OF=156, 
		OFF=157, OIDS=158, OLD=159, OPERATOR=160, OPTION=161, OPTIONS=162, ORDINALITY=163, 
		OTHERS=164, OVER=165, OVERRIDING=166, OWNED=167, OWNER=168, PARALLEL=169, 
		PARSER=170, PARTIAL=171, PARTITION=172, PASSING=173, PASSWORD=174, PLANS=175, 
		POLICY=176, PRECEDING=177, PREPARE=178, PREPARED=179, PRESERVE=180, PRIOR=181, 
		PRIVILEGES=182, PROCEDURAL=183, PROCEDURE=184, PROCEDURES=185, PROGRAM=186, 
		PUBLICATION=187, QUOTE=188, RANGE=189, READ=190, REASSIGN=191, RECHECK=192, 
		RECURSIVE=193, REF=194, REFERENCING=195, REFRESH=196, REINDEX=197, RELATIVE=198, 
		RELEASE=199, RENAME=200, REPEATABLE=201, REPLACE=202, REPLICA=203, RESET=204, 
		RESTART=205, RESTRICT=206, RETURNS=207, REVOKE=208, ROLE=209, ROLLBACK=210, 
		ROLLUP=211, ROUTINE=212, ROUTINES=213, ROWS=214, RULE=215, SAVEPOINT=216, 
		SCHEMA=217, SCHEMAS=218, SCROLL=219, SEARCH=220, SECOND=221, SECURITY=222, 
		SEQUENCE=223, SEQUENCES=224, SERIALIZABLE=225, SERVER=226, SESSION=227, 
		SET=228, SETS=229, SHARE=230, SHOW=231, SIMPLE=232, SKIP_=233, SNAPSHOT=234, 
		SQL=235, STABLE=236, STANDALONE=237, START=238, STATEMENT=239, STATISTICS=240, 
		STDIN=241, STDOUT=242, STORAGE=243, STORED=244, STRICT=245, STRIP=246, 
		SUBSCRIPTION=247, SUPPORT=248, SYSID=249, SYSTEM=250, TABLES=251, TABLESPACE=252, 
		TEMP=253, TEMPLATE=254, TEMPORARY=255, TEXT=256, TIES=257, TRANSACTION=258, 
		TRANSFORM=259, TRIGGER=260, TRUNCATE=261, TRUSTED=262, TYPE=263, TYPES=264, 
		UNBOUNDED=265, UNCOMMITTED=266, UNENCRYPTED=267, UNKNOWN=268, UNLISTEN=269, 
		UNLOGGED=270, UNTIL=271, UPDATE=272, VACUUM=273, VALID=274, VALIDATE=275, 
		VALIDATOR=276, VALUE=277, VARYING=278, VERSION=279, VIEW=280, VIEWS=281, 
		VOLATILE=282, WHITESPACE=283, WITHIN=284, WITHOUT=285, WORK=286, WRAPPER=287, 
		WRITE=288, XML=289, YEAR=290, YES=291, ZONE=292, BETWEEN=293, BIGINT=294, 
		BIT=295, BOOLEAN=296, CHAR=297, CHARACTER=298, COALESCE=299, DEC=300, 
		DECIMAL=301, EXISTS=302, EXTRACT=303, FLOAT=304, GREATEST=305, GROUPING=306, 
		INOUT=307, INT=308, INTEGER=309, INTERVAL=310, LEAST=311, NATIONAL=312, 
		NCHAR=313, NONE=314, NULLIF=315, NUMERIC=316, OUT=317, OVERLAY=318, POSITION=319, 
		PRECISION=320, REAL=321, ROW=322, SETOF=323, SMALLINT=324, SUBSTRING=325, 
		TIME=326, TIMESTAMP=327, TREAT=328, TRIM=329, VALUES=330, VARCHAR=331, 
		XMLATTRIBUTES=332, XMLCONCAT=333, XMLELEMENT=334, XMLEXISTS=335, XMLFOREST=336, 
		XMLNAMESPACES=337, XMLPARSE=338, XMLPI=339, XMLROOT=340, XMLSERIALIZE=341, 
		XMLTABLE=342, AUTHORIZATION=343, BINARY=344, COLLATION=345, CONCURRENTLY=346, 
		CROSS=347, CURRENT_SCHEMA=348, FREEZE=349, FULL=350, ILIKE=351, INNER=352, 
		IS=353, ISNULL=354, JOIN=355, LEFT=356, LIKE=357, NATURAL=358, NOTNULL=359, 
		OUTER=360, OVERLAPS=361, RIGHT=362, SIMILAR=363, TABLESAMPLE=364, VERBOSE=365, 
		ALL=366, ANALYSE=367, ANALYZE=368, AND=369, ANY=370, ARRAY=371, AS=372, 
		ASC=373, ASYMMETRIC=374, BOTH=375, CASE=376, CAST=377, CHECK=378, COLLATE=379, 
		COLUMN=380, CONSTRAINT=381, CREATE=382, CURRENT_CATALOG=383, CURRENT_DATE=384, 
		CURRENT_ROLE=385, CURRENT_TIME=386, CURRENT_TIMESTAMP=387, CURRENT_USER=388, 
		DEFAULT=389, DEFERRABLE=390, DESC=391, DISTINCT=392, DO=393, ELSE=394, 
		END=395, EXCEPT=396, FALSE=397, FETCH=398, FOR=399, FOREIGN=400, FROM=401, 
		GRANT=402, GROUP=403, HAVING=404, IN=405, INITIALLY=406, INTERSECT=407, 
		INTO=408, LATERAL=409, LEADING=410, LIMIT=411, LOCALTIME=412, LOCALTIMESTAMP=413, 
		NOT=414, NULL=415, OFFSET=416, ON=417, ONLY=418, OR=419, ORDER=420, PLACING=421, 
		PRIMARY=422, REFERENCES=423, RETURNING=424, SELECT=425, SESSION_USER=426, 
		SOME=427, SYMMETRIC=428, TABLE=429, THEN=430, TO=431, TRAILING=432, TRUE=433, 
		UNION=434, UNIQUE=435, USER=436, USING=437, VARIADIC=438, WHEN=439, WHERE=440, 
		WINDOW=441, WITH=442, ALIGNMENT=443, BASETYPE=444, BUFFERS=445, BYPASSRLS=446, 
		CANONICAL=447, CATEGORY=448, COLLATABLE=449, COMBINEFUNC=450, COMMUTATOR=451, 
		CONNECT=452, COSTS=453, CREATEDB=454, CREATEROLE=455, DESERIALFUNC=456, 
		DETERMINISTIC=457, DISABLE_PAGE_SKIPPING=458, ELEMENT=459, EXTENDED=460, 
		FINALFUNC=461, FINALFUNC_EXTRA=462, FINALFUNC_MODIFY=463, FORCE_NOT_NULL=464, 
		FORCE_NULL=465, FORCE_QUOTE=466, FORMAT=467, GETTOKEN=468, HASH=469, HASHES=470, 
		HEADLINE=471, HYPOTHETICAL=472, INDEX_CLEANUP=473, INIT=474, INITCOND=475, 
		INTERNALLENGTH=476, JSON=477, LC_COLLATE=478, LC_CTYPE=479, LEFTARG=480, 
		LEXIZE=481, LEXTYPES=482, LIST=483, LOCALE=484, LOGIN=485, MAIN=486, MERGES=487, 
		MFINALFUNC=488, MFINALFUNC_EXTRA=489, MFINALFUNC_MODIFY=490, MINITCOND=491, 
		MINVFUNC=492, MODULUS=493, MSFUNC=494, MSSPACE=495, MSTYPE=496, NEGATOR=497, 
		NOBYPASSRLS=498, NOCREATEDB=499, NOCREATEROLE=500, NOINHERIT=501, NOLOGIN=502, 
		NOREPLICATION=503, NOSUPERUSER=504, OUTPUT=505, PASSEDBYVALUE=506, PATH=507, 
		PERMISSIVE=508, PLAIN=509, PREFERRED=510, PROVIDER=511, READ_ONLY=512, 
		READ_WRITE=513, RECEIVE=514, REMAINDER=515, REPLICATION=516, RESTRICTED=517, 
		RESTRICTIVE=518, RIGHTARG=519, SAFE=520, SEND=521, SERIALFUNC=522, SETTINGS=523, 
		SFUNC=524, SHAREABLE=525, SKIP_LOCKED=526, SORTOP=527, SSPACE=528, STYPE=529, 
		SUBTYPE_DIFF=530, SUBTYPE_OPCLASS=531, SUBTYPE=532, SUMMARY=533, SUPERUSER=534, 
		TIMING=535, TYPMOD_IN=536, TYPMOD_OUT=537, UNSAFE=538, USAGE=539, VARIABLE=540, 
		YAML=541, ALIAS=542, ASSERT=543, CONSTANT=544, DATATYPE=545, DEBUG=546, 
		DETAIL=547, DIAGNOSTICS=548, ELSEIF=549, ELSIF=550, ERRCODE=551, EXIT=552, 
		EXCEPTION=553, FOREACH=554, GET=555, HINT=556, INFO=557, LOG=558, LOOP=559, 
		MESSAGE=560, NOTICE=561, OPEN=562, PERFORM=563, QUERY=564, RAISE=565, 
		RECORD=566, RETURN=567, REVERSE=568, ROWTYPE=569, SLICE=570, SQLSTATE=571, 
		STACKED=572, WARNING=573, WHILE=574, CAST_EXPRESSION=575, EQUAL=576, COLON=577, 
		SEMI_COLON=578, COMMA=579, NOT_EQUAL=580, LTH=581, LEQ=582, GTH=583, GEQ=584, 
		LEFT_PAREN=585, RIGHT_PAREN=586, PLUS=587, MINUS=588, MULTIPLY=589, DIVIDE=590, 
		MODULAR=591, EXP=592, DOT=593, QUOTE_CHAR=594, DOUBLE_QUOTE=595, DOLLAR=596, 
		LEFT_BRACKET=597, RIGHT_BRACKET=598, EQUAL_GTH=599, COLON_EQUAL=600, LESS_LESS=601, 
		GREATER_GREATER=602, DOUBLE_DOT=603, HASH_SIGN=604, PLACEHOLDER=605, BlockComment=606, 
		LINE_COMMENT=607, Name=608, Type=609, Schema=610, Owner=611, Value=612, 
		OP_CHARS=613, NUMBER_LITERAL=614, REAL_NUMBER=615, DOLLAR_NUMBER=616, 
		Identifier=617, QuotedIdentifier=618, Character_String_Literal=619, BeginDollarStringConstant=620, 
		Space=621, White_Space=622, New_Line=623, Tab=624, BOM=625, BAD=626, Text_between_Dollar=627, 
		EndDollarStringConstant=628, TextBetween_Dollar=629;
	public static final int
		RULE_sql = 0, RULE_qnameParser = 1, RULE_functionArgsParser = 2, RULE_vexEof = 3, 
		RULE_plpgsqlFunction = 4, RULE_plpgsqlFunctionTestList = 5, RULE_statement = 6, 
		RULE_dataStatement = 7, RULE_scriptStatement = 8, RULE_scriptTransaction = 9, 
		RULE_transactionMode = 10, RULE_lockTable = 11, RULE_lockMode = 12, RULE_scriptAdditional = 13, 
		RULE_additionalStatement = 14, RULE_explainStatement = 15, RULE_explainQuery = 16, 
		RULE_executeStatement = 17, RULE_declareStatement = 18, RULE_showStatement = 19, 
		RULE_explainOption = 20, RULE_userName = 21, RULE_tableColsList = 22, 
		RULE_tableCols = 23, RULE_vacuumMode = 24, RULE_vacuumOption = 25, RULE_analyzeMode = 26, 
		RULE_booleanValue = 27, RULE_fetchMoveDirection = 28, RULE_schemaStatement = 29, 
		RULE_schemaCreate = 30, RULE_schemaAlter = 31, RULE_schemaDrop = 32, RULE_schemaImport = 33, 
		RULE_alterFunctionStatement = 34, RULE_alterAggregateStatement = 35, RULE_alterExtensionStatement = 36, 
		RULE_alterExtensionAction = 37, RULE_extensionMemberObject = 38, RULE_alterSchemaStatement = 39, 
		RULE_alterLanguageStatement = 40, RULE_alterTableStatement = 41, RULE_tableAction = 42, 
		RULE_columnAction = 43, RULE_identityBody = 44, RULE_alterIdentity = 45, 
		RULE_storageOption = 46, RULE_validateConstraint = 47, RULE_dropConstraint = 48, 
		RULE_tableDeferrable = 49, RULE_tableInitialyImmed = 50, RULE_functionActionsCommon = 51, 
		RULE_functionDef = 52, RULE_alterIndexStatement = 53, RULE_indexDefAction = 54, 
		RULE_alterDefaultPrivileges = 55, RULE_abbreviatedGrantOrRevoke = 56, 
		RULE_grantOptionFor = 57, RULE_alterSequenceStatement = 58, RULE_alterViewStatement = 59, 
		RULE_alterEventTrigger = 60, RULE_alterEventTriggerAction = 61, RULE_alterTypeStatement = 62, 
		RULE_alterDomainStatement = 63, RULE_alterServerStatement = 64, RULE_alterServerAction = 65, 
		RULE_alterFtsStatement = 66, RULE_alterFtsConfiguration = 67, RULE_typeAction = 68, 
		RULE_setDefColumn = 69, RULE_dropDef = 70, RULE_createIndexStatement = 71, 
		RULE_indexRest = 72, RULE_indexSort = 73, RULE_includingIndex = 74, RULE_indexWhere = 75, 
		RULE_createExtensionStatement = 76, RULE_createLanguageStatement = 77, 
		RULE_createEventTrigger = 78, RULE_createTypeStatement = 79, RULE_createDomainStatement = 80, 
		RULE_createServerStatement = 81, RULE_createFtsDictionary = 82, RULE_optionWithValue = 83, 
		RULE_createFtsConfiguration = 84, RULE_createFtsTemplate = 85, RULE_createFtsParser = 86, 
		RULE_createCollation = 87, RULE_alterCollation = 88, RULE_collationOption = 89, 
		RULE_createUserMapping = 90, RULE_alterUserMapping = 91, RULE_alterUserOrRole = 92, 
		RULE_alterUserOrRoleSetReset = 93, RULE_userOrRoleSetReset = 94, RULE_alterGroup = 95, 
		RULE_alterGroupAction = 96, RULE_alterTablespace = 97, RULE_alterOwner = 98, 
		RULE_alterTablespaceAction = 99, RULE_alterStatistics = 100, RULE_alterForeignDataWrapper = 101, 
		RULE_alterForeignDataWrapperAction = 102, RULE_alterOperatorStatement = 103, 
		RULE_alterOperatorAction = 104, RULE_operatorSetRestrictJoin = 105, RULE_dropUserMapping = 106, 
		RULE_dropOwned = 107, RULE_dropOperatorStatement = 108, RULE_targetOperator = 109, 
		RULE_domainConstraint = 110, RULE_createTransformStatement = 111, RULE_createAccessMethod = 112, 
		RULE_createUserOrRole = 113, RULE_userOrRoleOption = 114, RULE_userOrRoleOptionForAlter = 115, 
		RULE_userOrRoleOrGroupCommonOption = 116, RULE_userOrRoleCommonOption = 117, 
		RULE_userOrRoleOrGroupOptionForCreate = 118, RULE_createGroup = 119, RULE_groupOption = 120, 
		RULE_createTablespace = 121, RULE_createStatistics = 122, RULE_createForeignDataWrapper = 123, 
		RULE_optionWithoutEqual = 124, RULE_createOperatorStatement = 125, RULE_operatorName = 126, 
		RULE_operatorOption = 127, RULE_createAggregateStatement = 128, RULE_aggregateParam = 129, 
		RULE_setStatement = 130, RULE_setAction = 131, RULE_sessionLocalOption = 132, 
		RULE_setStatementValue = 133, RULE_createRewriteStatement = 134, RULE_rewriteCommand = 135, 
		RULE_createTriggerStatement = 136, RULE_triggerReferencing = 137, RULE_whenTrigger = 138, 
		RULE_ruleCommon = 139, RULE_ruleMemberObject = 140, RULE_columnsPermissions = 141, 
		RULE_tableColumnPrivileges = 142, RULE_permissions = 143, RULE_permission = 144, 
		RULE_otherRules = 145, RULE_grantToRule = 146, RULE_revokeFromCascadeRestrict = 147, 
		RULE_rolesNames = 148, RULE_roleNameWithGroup = 149, RULE_commentOnStatement = 150, 
		RULE_securityLabel = 151, RULE_commentMemberObject = 152, RULE_labelMemberObject = 153, 
		RULE_createFunctionStatement = 154, RULE_createFunctParams = 155, RULE_transformForType = 156, 
		RULE_functionRetTable = 157, RULE_functionColumnNameType = 158, RULE_functionParameters = 159, 
		RULE_functionArgs = 160, RULE_aggOrder = 161, RULE_characterString = 162, 
		RULE_functionArguments = 163, RULE_argmode = 164, RULE_createSequenceStatement = 165, 
		RULE_sequenceBody = 166, RULE_signedNumberLiteral = 167, RULE_signedNumericalLiteral = 168, 
		RULE_sign = 169, RULE_createSchemaStatement = 170, RULE_createPolicyStatement = 171, 
		RULE_alterPolicyStatement = 172, RULE_dropPolicyStatement = 173, RULE_createSubscriptionStatement = 174, 
		RULE_alterSubscriptionStatement = 175, RULE_alterSubscriptionAction = 176, 
		RULE_createCastStatement = 177, RULE_dropCastStatement = 178, RULE_createOperatorFamilyStatement = 179, 
		RULE_alterOperatorFamilyStatement = 180, RULE_operatorFamilyAction = 181, 
		RULE_addOperatorToFamily = 182, RULE_dropOperatorFromFamily = 183, RULE_dropOperatorFamilyStatement = 184, 
		RULE_createOperatorClassStatement = 185, RULE_createOperatorClassOption = 186, 
		RULE_alterOperatorClassStatement = 187, RULE_dropOperatorClassStatement = 188, 
		RULE_createConversionStatement = 189, RULE_alterConversionStatement = 190, 
		RULE_createPublicationStatement = 191, RULE_alterPublicationStatement = 192, 
		RULE_alterPublicationAction = 193, RULE_onlyTableMultiply = 194, RULE_alterTriggerStatement = 195, 
		RULE_alterRuleStatement = 196, RULE_copyStatement = 197, RULE_copyFromStatement = 198, 
		RULE_copyToStatement = 199, RULE_copyOptionList = 200, RULE_copyOption = 201, 
		RULE_createViewStatement = 202, RULE_ifExists = 203, RULE_ifNotExists = 204, 
		RULE_viewColumns = 205, RULE_withCheckOption = 206, RULE_createTableStatement = 207, 
		RULE_createTableAsStatement = 208, RULE_createForeignTableStatement = 209, 
		RULE_defineTable = 210, RULE_definePartition = 211, RULE_forValuesBound = 212, 
		RULE_partitionBoundSpec = 213, RULE_partitionBoundPart = 214, RULE_defineColumns = 215, 
		RULE_defineType = 216, RULE_partitionBy = 217, RULE_partitionMethod = 218, 
		RULE_partitionColumn = 219, RULE_defineServer = 220, RULE_defineForeignOptions = 221, 
		RULE_foreignOption = 222, RULE_foreignOptionName = 223, RULE_listOfTypeColumnDef = 224, 
		RULE_tableColumnDef = 225, RULE_tableOfTypeColumnDef = 226, RULE_tableColumnDefinition = 227, 
		RULE_likeOption = 228, RULE_constraintCommon = 229, RULE_constrBody = 230, 
		RULE_allOp = 231, RULE_allSimpleOp = 232, RULE_opChars = 233, RULE_indexParameters = 234, 
		RULE_namesInParens = 235, RULE_namesReferences = 236, RULE_storageParameter = 237, 
		RULE_storageParameterOption = 238, RULE_storageParameterName = 239, RULE_withStorageParameter = 240, 
		RULE_storageParameterOid = 241, RULE_onCommit = 242, RULE_tableSpace = 243, 
		RULE_action = 244, RULE_ownerTo = 245, RULE_renameTo = 246, RULE_setSchema = 247, 
		RULE_tableColumnPrivilege = 248, RULE_usageSelectUpdate = 249, RULE_partitionByColumns = 250, 
		RULE_cascadeRestrict = 251, RULE_collateIdentifier = 252, RULE_indirectionVar = 253, 
		RULE_dollarNumber = 254, RULE_indirectionList = 255, RULE_indirection = 256, 
		RULE_dropFunctionStatement = 257, RULE_dropTriggerStatement = 258, RULE_dropRuleStatement = 259, 
		RULE_dropStatements = 260, RULE_ifExistNamesRestrictCascade = 261, RULE_idToken = 262, 
		RULE_identifier = 263, RULE_identifierNontype = 264, RULE_colLabel = 265, 
		RULE_tokensNonreserved = 266, RULE_tokensNonreservedExceptFunctionType = 267, 
		RULE_tokensReservedExceptFunctionType = 268, RULE_tokensReserved = 269, 
		RULE_tokensNonkeyword = 270, RULE_schemaQualifiedNameNontype = 271, RULE_typeList = 272, 
		RULE_dataType = 273, RULE_arrayType = 274, RULE_predefinedType = 275, 
		RULE_intervalField = 276, RULE_typeLength = 277, RULE_precisionParam = 278, 
		RULE_vex = 279, RULE_vexB = 280, RULE_op = 281, RULE_allOpRef = 282, RULE_datetimeOverlaps = 283, 
		RULE_valueExpressionPrimary = 284, RULE_unsignedValueSpecification = 285, 
		RULE_unsignedNumericLiteral = 286, RULE_truthValue = 287, RULE_caseExpression = 288, 
		RULE_castSpecification = 289, RULE_functionCall = 290, RULE_vexOrNamedNotation = 291, 
		RULE_pointer = 292, RULE_functionConstruct = 293, RULE_extractFunction = 294, 
		RULE_systemFunction = 295, RULE_dateTimeFunction = 296, RULE_stringValueFunction = 297, 
		RULE_xmlFunction = 298, RULE_xmlTableColumn = 299, RULE_comparisonMod = 300, 
		RULE_filterClause = 301, RULE_windowDefinition = 302, RULE_frameClause = 303, 
		RULE_frameBound = 304, RULE_arrayExpression = 305, RULE_arrayElements = 306, 
		RULE_typeCoercion = 307, RULE_schemaQualifiedName = 308, RULE_setQualifier = 309, 
		RULE_tableSubquery = 310, RULE_selectStmt = 311, RULE_afterOps = 312, 
		RULE_selectStmtNoParens = 313, RULE_withClause = 314, RULE_withQuery = 315, 
		RULE_selectOps = 316, RULE_selectOpsNoParens = 317, RULE_selectPrimary = 318, 
		RULE_selectList = 319, RULE_selectSublist = 320, RULE_intoTable = 321, 
		RULE_fromItem = 322, RULE_fromPrimary = 323, RULE_aliasClause = 324, RULE_fromFunctionColumnDef = 325, 
		RULE_groupbyClause = 326, RULE_groupingElementList = 327, RULE_groupingElement = 328, 
		RULE_valuesStmt = 329, RULE_valuesValues = 330, RULE_orderbyClause = 331, 
		RULE_sortSpecifierList = 332, RULE_sortSpecifier = 333, RULE_orderSpecification = 334, 
		RULE_nullOrdering = 335, RULE_insertStmtForPsql = 336, RULE_insertColumns = 337, 
		RULE_indirectionIdentifier = 338, RULE_conflictObject = 339, RULE_conflictAction = 340, 
		RULE_deleteStmtForPsql = 341, RULE_updateStmtForPsql = 342, RULE_updateSet = 343, 
		RULE_notifyStmt = 344, RULE_truncateStmt = 345, RULE_identifierList = 346, 
		RULE_anonymousBlock = 347, RULE_compOptions = 348, RULE_functionBlock = 349, 
		RULE_startLabel = 350, RULE_declarations = 351, RULE_declaration = 352, 
		RULE_typeDeclaration = 353, RULE_argumentsList = 354, RULE_dataTypeDec = 355, 
		RULE_exceptionStatement = 356, RULE_functionStatements = 357, RULE_functionStatement = 358, 
		RULE_baseStatement = 359, RULE_var = 360, RULE_diagnosticOption = 361, 
		RULE_performStmt = 362, RULE_assignStmt = 363, RULE_executeStmt = 364, 
		RULE_controlStatement = 365, RULE_cursorStatement = 366, RULE_option = 367, 
		RULE_transactionStatement = 368, RULE_messageStatement = 369, RULE_logLevel = 370, 
		RULE_raiseUsing = 371, RULE_raiseParam = 372, RULE_returnStmt = 373, RULE_loopStatement = 374, 
		RULE_loopStart = 375, RULE_usingVex = 376, RULE_ifStatement = 377, RULE_caseStatement = 378, 
		RULE_plpgsqlQuery = 379, RULE_lineComment = 380;
	private static String[] makeRuleNames() {
		return new String[] {
			"sql", "qnameParser", "functionArgsParser", "vexEof", "plpgsqlFunction", 
			"plpgsqlFunctionTestList", "statement", "dataStatement", "scriptStatement", 
			"scriptTransaction", "transactionMode", "lockTable", "lockMode", "scriptAdditional", 
			"additionalStatement", "explainStatement", "explainQuery", "executeStatement", 
			"declareStatement", "showStatement", "explainOption", "userName", "tableColsList", 
			"tableCols", "vacuumMode", "vacuumOption", "analyzeMode", "booleanValue", 
			"fetchMoveDirection", "schemaStatement", "schemaCreate", "schemaAlter", 
			"schemaDrop", "schemaImport", "alterFunctionStatement", "alterAggregateStatement", 
			"alterExtensionStatement", "alterExtensionAction", "extensionMemberObject", 
			"alterSchemaStatement", "alterLanguageStatement", "alterTableStatement", 
			"tableAction", "columnAction", "identityBody", "alterIdentity", "storageOption", 
			"validateConstraint", "dropConstraint", "tableDeferrable", "tableInitialyImmed", 
			"functionActionsCommon", "functionDef", "alterIndexStatement", "indexDefAction", 
			"alterDefaultPrivileges", "abbreviatedGrantOrRevoke", "grantOptionFor", 
			"alterSequenceStatement", "alterViewStatement", "alterEventTrigger", 
			"alterEventTriggerAction", "alterTypeStatement", "alterDomainStatement", 
			"alterServerStatement", "alterServerAction", "alterFtsStatement", "alterFtsConfiguration", 
			"typeAction", "setDefColumn", "dropDef", "createIndexStatement", "indexRest", 
			"indexSort", "includingIndex", "indexWhere", "createExtensionStatement", 
			"createLanguageStatement", "createEventTrigger", "createTypeStatement", 
			"createDomainStatement", "createServerStatement", "createFtsDictionary", 
			"optionWithValue", "createFtsConfiguration", "createFtsTemplate", "createFtsParser", 
			"createCollation", "alterCollation", "collationOption", "createUserMapping", 
			"alterUserMapping", "alterUserOrRole", "alterUserOrRoleSetReset", "userOrRoleSetReset", 
			"alterGroup", "alterGroupAction", "alterTablespace", "alterOwner", "alterTablespaceAction", 
			"alterStatistics", "alterForeignDataWrapper", "alterForeignDataWrapperAction", 
			"alterOperatorStatement", "alterOperatorAction", "operatorSetRestrictJoin", 
			"dropUserMapping", "dropOwned", "dropOperatorStatement", "targetOperator", 
			"domainConstraint", "createTransformStatement", "createAccessMethod", 
			"createUserOrRole", "userOrRoleOption", "userOrRoleOptionForAlter", "userOrRoleOrGroupCommonOption", 
			"userOrRoleCommonOption", "userOrRoleOrGroupOptionForCreate", "createGroup", 
			"groupOption", "createTablespace", "createStatistics", "createForeignDataWrapper", 
			"optionWithoutEqual", "createOperatorStatement", "operatorName", "operatorOption", 
			"createAggregateStatement", "aggregateParam", "setStatement", "setAction", 
			"sessionLocalOption", "setStatementValue", "createRewriteStatement", 
			"rewriteCommand", "createTriggerStatement", "triggerReferencing", "whenTrigger", 
			"ruleCommon", "ruleMemberObject", "columnsPermissions", "tableColumnPrivileges", 
			"permissions", "permission", "otherRules", "grantToRule", "revokeFromCascadeRestrict", 
			"rolesNames", "roleNameWithGroup", "commentOnStatement", "securityLabel", 
			"commentMemberObject", "labelMemberObject", "createFunctionStatement", 
			"createFunctParams", "transformForType", "functionRetTable", "functionColumnNameType", 
			"functionParameters", "functionArgs", "aggOrder", "characterString", 
			"functionArguments", "argmode", "createSequenceStatement", "sequenceBody", 
			"signedNumberLiteral", "signedNumericalLiteral", "sign", "createSchemaStatement", 
			"createPolicyStatement", "alterPolicyStatement", "dropPolicyStatement", 
			"createSubscriptionStatement", "alterSubscriptionStatement", "alterSubscriptionAction", 
			"createCastStatement", "dropCastStatement", "createOperatorFamilyStatement", 
			"alterOperatorFamilyStatement", "operatorFamilyAction", "addOperatorToFamily", 
			"dropOperatorFromFamily", "dropOperatorFamilyStatement", "createOperatorClassStatement", 
			"createOperatorClassOption", "alterOperatorClassStatement", "dropOperatorClassStatement", 
			"createConversionStatement", "alterConversionStatement", "createPublicationStatement", 
			"alterPublicationStatement", "alterPublicationAction", "onlyTableMultiply", 
			"alterTriggerStatement", "alterRuleStatement", "copyStatement", "copyFromStatement", 
			"copyToStatement", "copyOptionList", "copyOption", "createViewStatement", 
			"ifExists", "ifNotExists", "viewColumns", "withCheckOption", "createTableStatement", 
			"createTableAsStatement", "createForeignTableStatement", "defineTable", 
			"definePartition", "forValuesBound", "partitionBoundSpec", "partitionBoundPart", 
			"defineColumns", "defineType", "partitionBy", "partitionMethod", "partitionColumn", 
			"defineServer", "defineForeignOptions", "foreignOption", "foreignOptionName", 
			"listOfTypeColumnDef", "tableColumnDef", "tableOfTypeColumnDef", "tableColumnDefinition", 
			"likeOption", "constraintCommon", "constrBody", "allOp", "allSimpleOp", 
			"opChars", "indexParameters", "namesInParens", "namesReferences", "storageParameter", 
			"storageParameterOption", "storageParameterName", "withStorageParameter", 
			"storageParameterOid", "onCommit", "tableSpace", "action", "ownerTo", 
			"renameTo", "setSchema", "tableColumnPrivilege", "usageSelectUpdate", 
			"partitionByColumns", "cascadeRestrict", "collateIdentifier", "indirectionVar", 
			"dollarNumber", "indirectionList", "indirection", "dropFunctionStatement", 
			"dropTriggerStatement", "dropRuleStatement", "dropStatements", "ifExistNamesRestrictCascade", 
			"idToken", "identifier", "identifierNontype", "colLabel", "tokensNonreserved", 
			"tokensNonreservedExceptFunctionType", "tokensReservedExceptFunctionType", 
			"tokensReserved", "tokensNonkeyword", "schemaQualifiedNameNontype", "typeList", 
			"dataType", "arrayType", "predefinedType", "intervalField", "typeLength", 
			"precisionParam", "vex", "vexB", "op", "allOpRef", "datetimeOverlaps", 
			"valueExpressionPrimary", "unsignedValueSpecification", "unsignedNumericLiteral", 
			"truthValue", "caseExpression", "castSpecification", "functionCall", 
			"vexOrNamedNotation", "pointer", "functionConstruct", "extractFunction", 
			"systemFunction", "dateTimeFunction", "stringValueFunction", "xmlFunction", 
			"xmlTableColumn", "comparisonMod", "filterClause", "windowDefinition", 
			"frameClause", "frameBound", "arrayExpression", "arrayElements", "typeCoercion", 
			"schemaQualifiedName", "setQualifier", "tableSubquery", "selectStmt", 
			"afterOps", "selectStmtNoParens", "withClause", "withQuery", "selectOps", 
			"selectOpsNoParens", "selectPrimary", "selectList", "selectSublist", 
			"intoTable", "fromItem", "fromPrimary", "aliasClause", "fromFunctionColumnDef", 
			"groupbyClause", "groupingElementList", "groupingElement", "valuesStmt", 
			"valuesValues", "orderbyClause", "sortSpecifierList", "sortSpecifier", 
			"orderSpecification", "nullOrdering", "insertStmtForPsql", "insertColumns", 
			"indirectionIdentifier", "conflictObject", "conflictAction", "deleteStmtForPsql", 
			"updateStmtForPsql", "updateSet", "notifyStmt", "truncateStmt", "identifierList", 
			"anonymousBlock", "compOptions", "functionBlock", "startLabel", "declarations", 
			"declaration", "typeDeclaration", "argumentsList", "dataTypeDec", "exceptionStatement", 
			"functionStatements", "functionStatement", "baseStatement", "var", "diagnosticOption", 
			"performStmt", "assignStmt", "executeStmt", "controlStatement", "cursorStatement", 
			"option", "transactionStatement", "messageStatement", "logLevel", "raiseUsing", 
			"raiseParam", "returnStmt", "loopStatement", "loopStart", "usingVex", 
			"ifStatement", "caseStatement", "plpgsqlQuery", "lineComment"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			"'='", "':'", "';'", "','", null, "'<'", "'<='", "'>'", "'>='", "'('", 
			"')'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'.'", "'''", "'\"'", 
			"'$'", "'['", "']'", "'=>'", "':='", "'<<'", "'>>'", "'..'", "'#'", "'?'", 
			null, "'--'", "'Name:'", "'Type:'", "'Schema:'", "'Owner:'", null, null, 
			null, null, null, null, null, null, null, "' '", null, null, "'\u0009'", 
			"'\uFEFF'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "ABORT", "ABSOLUTE", "ACCESS", "ACTION", "ADD", "ADMIN", "AFTER", 
			"AGGREGATE", "ALSO", "ALTER", "ALWAYS", "ASSERTION", "ASSIGNMENT", "AT", 
			"ATTACH", "ATTRIBUTE", "BACKWARD", "BEFORE", "BEGIN", "BY", "CACHE", 
			"CALL", "CALLED", "CASCADE", "CASCADED", "CATALOG", "CHAIN", "CHARACTERISTICS", 
			"CHECKPOINT", "CLASS", "CLOSE", "CLUSTER", "COLUMNS", "COMMENT", "COMMENTS", 
			"COMMIT", "COMMITTED", "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINTS", 
			"CONTENT", "CONTINUE", "CONVERSION", "COPY", "COST", "CSV", "CUBE", "CURRENT", 
			"CURSOR", "CYCLE", "DATA", "DATABASE", "DAY", "DEALLOCATE", "DECLARE", 
			"DEFAULTS", "DEFERRED", "DEFINER", "DELETE", "DELIMITER", "DELIMITERS", 
			"DEPENDS", "DETACH", "DICTIONARY", "DISABLE", "DISCARD", "DOCUMENT", 
			"DOMAIN", "DOUBLE", "DROP", "EACH", "ENABLE", "ENCODING", "ENCRYPTED", 
			"ENUM", "ESCAPE", "EVENT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE", 
			"EXPLAIN", "EXTENSION", "EXTERNAL", "FAMILY", "FILTER", "FIRST", "FOLLOWING", 
			"FORCE", "FORWARD", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOBAL", "GRANTED", 
			"GROUPS", "HANDLER", "HEADER", "HOLD", "HOUR", "IDENTITY", "IF", "IMMEDIATE", 
			"IMMUTABLE", "IMPLICIT", "IMPORT", "INCLUDE", "INCLUDING", "INCREMENT", 
			"INDEX", "INDEXES", "INHERIT", "INHERITS", "INLINE", "INPUT", "INSENSITIVE", 
			"INSERT", "INSTEAD", "INVOKER", "ISOLATION", "KEY", "LABEL", "LANGUAGE", 
			"LARGE", "LAST", "LEAKPROOF", "LEVEL", "LISTEN", "LOAD", "LOCAL", "LOCATION", 
			"LOCK", "LOCKED", "LOGGED", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", 
			"METHOD", "MINUTE", "MINVALUE", "MODE", "MONTH", "MOVE", "NAME", "NAMES", 
			"NEW", "NEXT", "NO", "NOTHING", "NOTIFY", "NOWAIT", "NULLS", "OBJECT", 
			"OF", "OFF", "OIDS", "OLD", "OPERATOR", "OPTION", "OPTIONS", "ORDINALITY", 
			"OTHERS", "OVER", "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", 
			"PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PLANS", "POLICY", "PRECEDING", 
			"PREPARE", "PREPARED", "PRESERVE", "PRIOR", "PRIVILEGES", "PROCEDURAL", 
			"PROCEDURE", "PROCEDURES", "PROGRAM", "PUBLICATION", "QUOTE", "RANGE", 
			"READ", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCING", "REFRESH", 
			"REINDEX", "RELATIVE", "RELEASE", "RENAME", "REPEATABLE", "REPLACE", 
			"REPLICA", "RESET", "RESTART", "RESTRICT", "RETURNS", "REVOKE", "ROLE", 
			"ROLLBACK", "ROLLUP", "ROUTINE", "ROUTINES", "ROWS", "RULE", "SAVEPOINT", 
			"SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND", "SECURITY", "SEQUENCE", 
			"SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION", "SET", "SETS", "SHARE", 
			"SHOW", "SIMPLE", "SKIP_", "SNAPSHOT", "SQL", "STABLE", "STANDALONE", 
			"START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STORED", 
			"STRICT", "STRIP", "SUBSCRIPTION", "SUPPORT", "SYSID", "SYSTEM", "TABLES", 
			"TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT", "TIES", "TRANSACTION", 
			"TRANSFORM", "TRIGGER", "TRUNCATE", "TRUSTED", "TYPE", "TYPES", "UNBOUNDED", 
			"UNCOMMITTED", "UNENCRYPTED", "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", 
			"UPDATE", "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE", "VARYING", 
			"VERSION", "VIEW", "VIEWS", "VOLATILE", "WHITESPACE", "WITHIN", "WITHOUT", 
			"WORK", "WRAPPER", "WRITE", "XML", "YEAR", "YES", "ZONE", "BETWEEN", 
			"BIGINT", "BIT", "BOOLEAN", "CHAR", "CHARACTER", "COALESCE", "DEC", "DECIMAL", 
			"EXISTS", "EXTRACT", "FLOAT", "GREATEST", "GROUPING", "INOUT", "INT", 
			"INTEGER", "INTERVAL", "LEAST", "NATIONAL", "NCHAR", "NONE", "NULLIF", 
			"NUMERIC", "OUT", "OVERLAY", "POSITION", "PRECISION", "REAL", "ROW", 
			"SETOF", "SMALLINT", "SUBSTRING", "TIME", "TIMESTAMP", "TREAT", "TRIM", 
			"VALUES", "VARCHAR", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", 
			"XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE", 
			"XMLTABLE", "AUTHORIZATION", "BINARY", "COLLATION", "CONCURRENTLY", "CROSS", 
			"CURRENT_SCHEMA", "FREEZE", "FULL", "ILIKE", "INNER", "IS", "ISNULL", 
			"JOIN", "LEFT", "LIKE", "NATURAL", "NOTNULL", "OUTER", "OVERLAPS", "RIGHT", 
			"SIMILAR", "TABLESAMPLE", "VERBOSE", "ALL", "ANALYSE", "ANALYZE", "AND", 
			"ANY", "ARRAY", "AS", "ASC", "ASYMMETRIC", "BOTH", "CASE", "CAST", "CHECK", 
			"COLLATE", "COLUMN", "CONSTRAINT", "CREATE", "CURRENT_CATALOG", "CURRENT_DATE", 
			"CURRENT_ROLE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER", 
			"DEFAULT", "DEFERRABLE", "DESC", "DISTINCT", "DO", "ELSE", "END", "EXCEPT", 
			"FALSE", "FETCH", "FOR", "FOREIGN", "FROM", "GRANT", "GROUP", "HAVING", 
			"IN", "INITIALLY", "INTERSECT", "INTO", "LATERAL", "LEADING", "LIMIT", 
			"LOCALTIME", "LOCALTIMESTAMP", "NOT", "NULL", "OFFSET", "ON", "ONLY", 
			"OR", "ORDER", "PLACING", "PRIMARY", "REFERENCES", "RETURNING", "SELECT", 
			"SESSION_USER", "SOME", "SYMMETRIC", "TABLE", "THEN", "TO", "TRAILING", 
			"TRUE", "UNION", "UNIQUE", "USER", "USING", "VARIADIC", "WHEN", "WHERE", 
			"WINDOW", "WITH", "ALIGNMENT", "BASETYPE", "BUFFERS", "BYPASSRLS", "CANONICAL", 
			"CATEGORY", "COLLATABLE", "COMBINEFUNC", "COMMUTATOR", "CONNECT", "COSTS", 
			"CREATEDB", "CREATEROLE", "DESERIALFUNC", "DETERMINISTIC", "DISABLE_PAGE_SKIPPING", 
			"ELEMENT", "EXTENDED", "FINALFUNC", "FINALFUNC_EXTRA", "FINALFUNC_MODIFY", 
			"FORCE_NOT_NULL", "FORCE_NULL", "FORCE_QUOTE", "FORMAT", "GETTOKEN", 
			"HASH", "HASHES", "HEADLINE", "HYPOTHETICAL", "INDEX_CLEANUP", "INIT", 
			"INITCOND", "INTERNALLENGTH", "JSON", "LC_COLLATE", "LC_CTYPE", "LEFTARG", 
			"LEXIZE", "LEXTYPES", "LIST", "LOCALE", "LOGIN", "MAIN", "MERGES", "MFINALFUNC", 
			"MFINALFUNC_EXTRA", "MFINALFUNC_MODIFY", "MINITCOND", "MINVFUNC", "MODULUS", 
			"MSFUNC", "MSSPACE", "MSTYPE", "NEGATOR", "NOBYPASSRLS", "NOCREATEDB", 
			"NOCREATEROLE", "NOINHERIT", "NOLOGIN", "NOREPLICATION", "NOSUPERUSER", 
			"OUTPUT", "PASSEDBYVALUE", "PATH", "PERMISSIVE", "PLAIN", "PREFERRED", 
			"PROVIDER", "READ_ONLY", "READ_WRITE", "RECEIVE", "REMAINDER", "REPLICATION", 
			"RESTRICTED", "RESTRICTIVE", "RIGHTARG", "SAFE", "SEND", "SERIALFUNC", 
			"SETTINGS", "SFUNC", "SHAREABLE", "SKIP_LOCKED", "SORTOP", "SSPACE", 
			"STYPE", "SUBTYPE_DIFF", "SUBTYPE_OPCLASS", "SUBTYPE", "SUMMARY", "SUPERUSER", 
			"TIMING", "TYPMOD_IN", "TYPMOD_OUT", "UNSAFE", "USAGE", "VARIABLE", "YAML", 
			"ALIAS", "ASSERT", "CONSTANT", "DATATYPE", "DEBUG", "DETAIL", "DIAGNOSTICS", 
			"ELSEIF", "ELSIF", "ERRCODE", "EXIT", "EXCEPTION", "FOREACH", "GET", 
			"HINT", "INFO", "LOG", "LOOP", "MESSAGE", "NOTICE", "OPEN", "PERFORM", 
			"QUERY", "RAISE", "RECORD", "RETURN", "REVERSE", "ROWTYPE", "SLICE", 
			"SQLSTATE", "STACKED", "WARNING", "WHILE", "CAST_EXPRESSION", "EQUAL", 
			"COLON", "SEMI_COLON", "COMMA", "NOT_EQUAL", "LTH", "LEQ", "GTH", "GEQ", 
			"LEFT_PAREN", "RIGHT_PAREN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULAR", 
			"EXP", "DOT", "QUOTE_CHAR", "DOUBLE_QUOTE", "DOLLAR", "LEFT_BRACKET", 
			"RIGHT_BRACKET", "EQUAL_GTH", "COLON_EQUAL", "LESS_LESS", "GREATER_GREATER", 
			"DOUBLE_DOT", "HASH_SIGN", "PLACEHOLDER", "BlockComment", "LINE_COMMENT", 
			"Name", "Type", "Schema", "Owner", "Value", "OP_CHARS", "NUMBER_LITERAL", 
			"REAL_NUMBER", "DOLLAR_NUMBER", "Identifier", "QuotedIdentifier", "Character_String_Literal", 
			"BeginDollarStringConstant", "Space", "White_Space", "New_Line", "Tab", 
			"BOM", "BAD", "Text_between_Dollar", "EndDollarStringConstant", "TextBetween_Dollar"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "SQLParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public SQLParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class SqlContext extends ParserRuleContext {
		public List<TerminalNode> EOF() { return getTokens(SQLParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(SQLParser.EOF, i);
		}
		public TerminalNode BOM() { return getToken(SQLParser.BOM, 0); }
		public List<TerminalNode> SEMI_COLON() { return getTokens(SQLParser.SEMI_COLON); }
		public TerminalNode SEMI_COLON(int i) {
			return getToken(SQLParser.SEMI_COLON, i);
		}
		public List<LineCommentContext> lineComment() {
			return getRuleContexts(LineCommentContext.class);
		}
		public LineCommentContext lineComment(int i) {
			return getRuleContext(LineCommentContext.class,i);
		}
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public SqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlContext sql() throws RecognitionException {
		SqlContext _localctx = new SqlContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BOM) {
				{
				setState(762);
				match(BOM);
				}
			}

			setState(768);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==SEMI_COLON) {
				{
				{
				setState(765);
				match(SEMI_COLON);
				}
				}
				setState(770);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ALTER) | (1L << BEGIN) | (1L << CALL) | (1L << CHECKPOINT) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COMMENT) | (1L << COMMIT) | (1L << COPY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DELETE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (DISCARD - 67)) | (1L << (DROP - 67)) | (1L << (EXECUTE - 67)) | (1L << (EXPLAIN - 67)) | (1L << (IMPORT - 67)) | (1L << (INSERT - 67)) | (1L << (LISTEN - 67)) | (1L << (LOAD - 67)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (LOCK - 133)) | (1L << (MOVE - 133)) | (1L << (NOTIFY - 133)) | (1L << (PREPARE - 133)) | (1L << (REASSIGN - 133)) | (1L << (REFRESH - 133)))) != 0) || ((((_la - 197)) & ~0x3f) == 0 && ((1L << (_la - 197)) & ((1L << (REINDEX - 197)) | (1L << (RELEASE - 197)) | (1L << (RESET - 197)) | (1L << (REVOKE - 197)) | (1L << (ROLLBACK - 197)) | (1L << (SAVEPOINT - 197)) | (1L << (SECURITY - 197)) | (1L << (SET - 197)) | (1L << (SHOW - 197)) | (1L << (START - 197)))) != 0) || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (TRUNCATE - 261)) | (1L << (UNLISTEN - 261)) | (1L << (UPDATE - 261)) | (1L << (VACUUM - 261)))) != 0) || ((((_la - 330)) & ~0x3f) == 0 && ((1L << (_la - 330)) & ((1L << (VALUES - 330)) | (1L << (ANALYZE - 330)) | (1L << (CREATE - 330)) | (1L << (DO - 330)))) != 0) || ((((_la - 395)) & ~0x3f) == 0 && ((1L << (_la - 395)) & ((1L << (END - 395)) | (1L << (FETCH - 395)) | (1L << (GRANT - 395)) | (1L << (SELECT - 395)) | (1L << (TABLE - 395)) | (1L << (WITH - 395)))) != 0) || _la==LEFT_PAREN || _la==LINE_COMMENT) {
				{
				setState(781);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LINE_COMMENT:
					{
					setState(771);
					lineComment();
					}
					break;
				case ABORT:
				case ALTER:
				case BEGIN:
				case CALL:
				case CHECKPOINT:
				case CLOSE:
				case CLUSTER:
				case COMMENT:
				case COMMIT:
				case COPY:
				case DEALLOCATE:
				case DECLARE:
				case DELETE:
				case DISCARD:
				case DROP:
				case EXECUTE:
				case EXPLAIN:
				case IMPORT:
				case INSERT:
				case LISTEN:
				case LOAD:
				case LOCK:
				case MOVE:
				case NOTIFY:
				case PREPARE:
				case REASSIGN:
				case REFRESH:
				case REINDEX:
				case RELEASE:
				case RESET:
				case REVOKE:
				case ROLLBACK:
				case SAVEPOINT:
				case SECURITY:
				case SET:
				case SHOW:
				case START:
				case TRUNCATE:
				case UNLISTEN:
				case UPDATE:
				case VACUUM:
				case VALUES:
				case ANALYZE:
				case CREATE:
				case DO:
				case END:
				case FETCH:
				case GRANT:
				case SELECT:
				case TABLE:
				case WITH:
				case LEFT_PAREN:
					{
					setState(772);
					statement();
					setState(779);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SEMI_COLON:
						{
						setState(774); 
						_errHandler.sync(this);
						_la = _input.LA(1);
						do {
							{
							{
							setState(773);
							match(SEMI_COLON);
							}
							}
							setState(776); 
							_errHandler.sync(this);
							_la = _input.LA(1);
						} while ( _la==SEMI_COLON );
						}
						break;
					case EOF:
						{
						setState(778);
						match(EOF);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(785);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(786);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QnameParserContext extends ParserRuleContext {
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SQLParser.EOF, 0); }
		public QnameParserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_qnameParser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterQnameParser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitQnameParser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitQnameParser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QnameParserContext qnameParser() throws RecognitionException {
		QnameParserContext _localctx = new QnameParserContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_qnameParser);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(788);
			schemaQualifiedName();
			setState(789);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsParserContext extends ParserRuleContext {
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SQLParser.EOF, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public FunctionArgsParserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgsParser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionArgsParser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionArgsParser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionArgsParser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsParserContext functionArgsParser() throws RecognitionException {
		FunctionArgsParserContext _localctx = new FunctionArgsParserContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_functionArgsParser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(792);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(791);
				schemaQualifiedName();
				}
			}

			setState(794);
			functionArgs();
			setState(795);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VexEofContext extends ParserRuleContext {
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode EOF() { return getToken(SQLParser.EOF, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public VexEofContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vexEof; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterVexEof(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitVexEof(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitVexEof(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VexEofContext vexEof() throws RecognitionException {
		VexEofContext _localctx = new VexEofContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_vexEof);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(797);
			vex(0);
			setState(802);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(798);
				match(COMMA);
				setState(799);
				vex(0);
				}
				}
				setState(804);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(805);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlpgsqlFunctionContext extends ParserRuleContext {
		public FunctionBlockContext functionBlock() {
			return getRuleContext(FunctionBlockContext.class,0);
		}
		public TerminalNode EOF() { return getToken(SQLParser.EOF, 0); }
		public CompOptionsContext compOptions() {
			return getRuleContext(CompOptionsContext.class,0);
		}
		public TerminalNode SEMI_COLON() { return getToken(SQLParser.SEMI_COLON, 0); }
		public PlpgsqlFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plpgsqlFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPlpgsqlFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPlpgsqlFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPlpgsqlFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlpgsqlFunctionContext plpgsqlFunction() throws RecognitionException {
		PlpgsqlFunctionContext _localctx = new PlpgsqlFunctionContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_plpgsqlFunction);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(808);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HASH_SIGN) {
				{
				setState(807);
				compOptions();
				}
			}

			setState(810);
			functionBlock();
			setState(812);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMI_COLON) {
				{
				setState(811);
				match(SEMI_COLON);
				}
			}

			setState(814);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlpgsqlFunctionTestListContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(SQLParser.EOF, 0); }
		public List<FunctionBlockContext> functionBlock() {
			return getRuleContexts(FunctionBlockContext.class);
		}
		public FunctionBlockContext functionBlock(int i) {
			return getRuleContext(FunctionBlockContext.class,i);
		}
		public List<TerminalNode> SEMI_COLON() { return getTokens(SQLParser.SEMI_COLON); }
		public TerminalNode SEMI_COLON(int i) {
			return getToken(SQLParser.SEMI_COLON, i);
		}
		public List<CompOptionsContext> compOptions() {
			return getRuleContexts(CompOptionsContext.class);
		}
		public CompOptionsContext compOptions(int i) {
			return getRuleContext(CompOptionsContext.class,i);
		}
		public PlpgsqlFunctionTestListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plpgsqlFunctionTestList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPlpgsqlFunctionTestList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPlpgsqlFunctionTestList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPlpgsqlFunctionTestList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlpgsqlFunctionTestListContext plpgsqlFunctionTestList() throws RecognitionException {
		PlpgsqlFunctionTestListContext _localctx = new PlpgsqlFunctionTestListContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_plpgsqlFunctionTestList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(824);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==BEGIN || _la==DECLARE || _la==LESS_LESS || _la==HASH_SIGN) {
				{
				{
				setState(817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HASH_SIGN) {
					{
					setState(816);
					compOptions();
					}
				}

				setState(819);
				functionBlock();
				setState(820);
				match(SEMI_COLON);
				}
				}
				setState(826);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(827);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public DataStatementContext dataStatement() {
			return getRuleContext(DataStatementContext.class,0);
		}
		public SchemaStatementContext schemaStatement() {
			return getRuleContext(SchemaStatementContext.class,0);
		}
		public ScriptStatementContext scriptStatement() {
			return getRuleContext(ScriptStatementContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_statement);
		try {
			setState(832);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case UPDATE:
			case VALUES:
			case SELECT:
			case TABLE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(829);
				dataStatement();
				}
				break;
			case ALTER:
			case COMMENT:
			case DROP:
			case IMPORT:
			case REVOKE:
			case SECURITY:
			case SET:
			case CREATE:
			case GRANT:
				enterOuterAlt(_localctx, 2);
				{
				setState(830);
				schemaStatement();
				}
				break;
			case ABORT:
			case BEGIN:
			case CALL:
			case CHECKPOINT:
			case CLOSE:
			case CLUSTER:
			case COMMIT:
			case COPY:
			case DEALLOCATE:
			case DECLARE:
			case DISCARD:
			case EXECUTE:
			case EXPLAIN:
			case LISTEN:
			case LOAD:
			case LOCK:
			case MOVE:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RELEASE:
			case RESET:
			case ROLLBACK:
			case SAVEPOINT:
			case SHOW:
			case START:
			case TRUNCATE:
			case UNLISTEN:
			case VACUUM:
			case ANALYZE:
			case DO:
			case END:
			case FETCH:
				enterOuterAlt(_localctx, 3);
				{
				setState(831);
				scriptStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataStatementContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public InsertStmtForPsqlContext insertStmtForPsql() {
			return getRuleContext(InsertStmtForPsqlContext.class,0);
		}
		public UpdateStmtForPsqlContext updateStmtForPsql() {
			return getRuleContext(UpdateStmtForPsqlContext.class,0);
		}
		public DeleteStmtForPsqlContext deleteStmtForPsql() {
			return getRuleContext(DeleteStmtForPsqlContext.class,0);
		}
		public DataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDataStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataStatementContext dataStatement() throws RecognitionException {
		DataStatementContext _localctx = new DataStatementContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_dataStatement);
		try {
			setState(838);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(834);
				selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(835);
				insertStmtForPsql();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(836);
				updateStmtForPsql();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(837);
				deleteStmtForPsql();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScriptStatementContext extends ParserRuleContext {
		public ScriptTransactionContext scriptTransaction() {
			return getRuleContext(ScriptTransactionContext.class,0);
		}
		public ScriptAdditionalContext scriptAdditional() {
			return getRuleContext(ScriptAdditionalContext.class,0);
		}
		public ScriptStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scriptStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterScriptStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitScriptStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitScriptStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScriptStatementContext scriptStatement() throws RecognitionException {
		ScriptStatementContext _localctx = new ScriptStatementContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_scriptStatement);
		try {
			setState(842);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(840);
				scriptTransaction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(841);
				scriptAdditional();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScriptTransactionContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(SQLParser.START, 0); }
		public TerminalNode TRANSACTION() { return getToken(SQLParser.TRANSACTION, 0); }
		public TerminalNode BEGIN() { return getToken(SQLParser.BEGIN, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public TerminalNode WORK() { return getToken(SQLParser.WORK, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode COMMIT() { return getToken(SQLParser.COMMIT, 0); }
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public TerminalNode ABORT() { return getToken(SQLParser.ABORT, 0); }
		public TerminalNode ROLLBACK() { return getToken(SQLParser.ROLLBACK, 0); }
		public TerminalNode AND() { return getToken(SQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(SQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public TerminalNode PREPARED() { return getToken(SQLParser.PREPARED, 0); }
		public TerminalNode PREPARE() { return getToken(SQLParser.PREPARE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(SQLParser.SAVEPOINT, 0); }
		public TerminalNode RELEASE() { return getToken(SQLParser.RELEASE, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public LockTableContext lockTable() {
			return getRuleContext(LockTableContext.class,0);
		}
		public ScriptTransactionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scriptTransaction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterScriptTransaction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitScriptTransaction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitScriptTransaction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScriptTransactionContext scriptTransaction() throws RecognitionException {
		ScriptTransactionContext _localctx = new ScriptTransactionContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_scriptTransaction);
		int _la;
		try {
			setState(901);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(850);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(844);
					match(START);
					setState(845);
					match(TRANSACTION);
					}
					break;
				case BEGIN:
					{
					setState(846);
					match(BEGIN);
					setState(848);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==TRANSACTION || _la==WORK) {
						{
						setState(847);
						_la = _input.LA(1);
						if ( !(_la==TRANSACTION || _la==WORK) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ISOLATION || _la==READ || _la==DEFERRABLE || _la==NOT) {
					{
					setState(852);
					transactionMode();
					setState(857);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(853);
						match(COMMA);
						setState(854);
						transactionMode();
						}
						}
						setState(859);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(862);
				_la = _input.LA(1);
				if ( !(_la==ABORT || _la==COMMIT || _la==ROLLBACK || _la==END) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(864);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(863);
					_la = _input.LA(1);
					if ( !(_la==TRANSACTION || _la==WORK) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(871);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(866);
					match(AND);
					setState(868);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(867);
						match(NO);
						}
					}

					setState(870);
					match(CHAIN);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(877);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COMMIT:
					{
					setState(873);
					match(COMMIT);
					setState(874);
					match(PREPARED);
					}
					break;
				case PREPARE:
					{
					setState(875);
					match(PREPARE);
					setState(876);
					match(TRANSACTION);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(879);
				match(Character_String_Literal);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(885);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SAVEPOINT:
					{
					setState(880);
					match(SAVEPOINT);
					}
					break;
				case RELEASE:
					{
					setState(881);
					match(RELEASE);
					setState(883);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
					case 1:
						{
						setState(882);
						match(SAVEPOINT);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(887);
				identifier();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(888);
				match(ROLLBACK);
				setState(889);
				match(PREPARED);
				setState(890);
				match(Character_String_Literal);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(891);
				match(ROLLBACK);
				setState(893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TRANSACTION || _la==WORK) {
					{
					setState(892);
					_la = _input.LA(1);
					if ( !(_la==TRANSACTION || _la==WORK) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(895);
				match(TO);
				setState(897);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
				case 1:
					{
					setState(896);
					match(SAVEPOINT);
					}
					break;
				}
				setState(899);
				identifier();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(900);
				lockTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionModeContext extends ParserRuleContext {
		public TerminalNode ISOLATION() { return getToken(SQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(SQLParser.LEVEL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SQLParser.SERIALIZABLE, 0); }
		public TerminalNode REPEATABLE() { return getToken(SQLParser.REPEATABLE, 0); }
		public TerminalNode READ() { return getToken(SQLParser.READ, 0); }
		public TerminalNode COMMITTED() { return getToken(SQLParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(SQLParser.UNCOMMITTED, 0); }
		public TerminalNode WRITE() { return getToken(SQLParser.WRITE, 0); }
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TransactionModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTransactionMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTransactionMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTransactionMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionModeContext transactionMode() throws RecognitionException {
		TransactionModeContext _localctx = new TransactionModeContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_transactionMode);
		int _la;
		try {
			setState(922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(903);
				match(ISOLATION);
				setState(904);
				match(LEVEL);
				setState(912);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
				case 1:
					{
					setState(905);
					match(SERIALIZABLE);
					}
					break;
				case 2:
					{
					setState(906);
					match(REPEATABLE);
					setState(907);
					match(READ);
					}
					break;
				case 3:
					{
					setState(908);
					match(READ);
					setState(909);
					match(COMMITTED);
					}
					break;
				case 4:
					{
					setState(910);
					match(READ);
					setState(911);
					match(UNCOMMITTED);
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(914);
				match(READ);
				setState(915);
				match(WRITE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(916);
				match(READ);
				setState(917);
				match(ONLY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(919);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(918);
					match(NOT);
					}
				}

				setState(921);
				match(DEFERRABLE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockTableContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(SQLParser.LOCK, 0); }
		public List<OnlyTableMultiplyContext> onlyTableMultiply() {
			return getRuleContexts(OnlyTableMultiplyContext.class);
		}
		public OnlyTableMultiplyContext onlyTableMultiply(int i) {
			return getRuleContext(OnlyTableMultiplyContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public LockModeContext lockMode() {
			return getRuleContext(LockModeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(SQLParser.MODE, 0); }
		public TerminalNode NOWAIT() { return getToken(SQLParser.NOWAIT, 0); }
		public LockTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLockTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLockTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitLockTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockTableContext lockTable() throws RecognitionException {
		LockTableContext _localctx = new LockTableContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_lockTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(924);
			match(LOCK);
			setState(926);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(925);
				match(TABLE);
				}
			}

			setState(928);
			onlyTableMultiply();
			setState(933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(929);
				match(COMMA);
				setState(930);
				onlyTableMultiply();
				}
				}
				setState(935);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(936);
				match(IN);
				setState(937);
				lockMode();
				setState(938);
				match(MODE);
				}
			}

			setState(943);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT) {
				{
				setState(942);
				match(NOWAIT);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LockModeContext extends ParserRuleContext {
		public TerminalNode SHARE() { return getToken(SQLParser.SHARE, 0); }
		public TerminalNode ROW() { return getToken(SQLParser.ROW, 0); }
		public TerminalNode ACCESS() { return getToken(SQLParser.ACCESS, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(SQLParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public LockModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lockMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLockMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLockMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitLockMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LockModeContext lockMode() throws RecognitionException {
		LockModeContext _localctx = new LockModeContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_lockMode);
		int _la;
		try {
			setState(957);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,36,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(945);
				_la = _input.LA(1);
				if ( !(_la==ACCESS || _la==ROW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(946);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(947);
				match(ROW);
				setState(948);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(949);
				match(SHARE);
				setState(950);
				_la = _input.LA(1);
				if ( !(_la==UPDATE || _la==ROW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(951);
				match(EXCLUSIVE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(952);
				match(SHARE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(954);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ACCESS) {
					{
					setState(953);
					match(ACCESS);
					}
				}

				setState(956);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScriptAdditionalContext extends ParserRuleContext {
		public AdditionalStatementContext additionalStatement() {
			return getRuleContext(AdditionalStatementContext.class,0);
		}
		public TerminalNode VACUUM() { return getToken(SQLParser.VACUUM, 0); }
		public VacuumModeContext vacuumMode() {
			return getRuleContext(VacuumModeContext.class,0);
		}
		public TableColsListContext tableColsList() {
			return getRuleContext(TableColsListContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FETCH() { return getToken(SQLParser.FETCH, 0); }
		public TerminalNode MOVE() { return getToken(SQLParser.MOVE, 0); }
		public FetchMoveDirectionContext fetchMoveDirection() {
			return getRuleContext(FetchMoveDirectionContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode CLOSE() { return getToken(SQLParser.CLOSE, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode CALL() { return getToken(SQLParser.CALL, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TerminalNode DISCARD() { return getToken(SQLParser.DISCARD, 0); }
		public TerminalNode PLANS() { return getToken(SQLParser.PLANS, 0); }
		public TerminalNode SEQUENCES() { return getToken(SQLParser.SEQUENCES, 0); }
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public DeclareStatementContext declareStatement() {
			return getRuleContext(DeclareStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public ExplainStatementContext explainStatement() {
			return getRuleContext(ExplainStatementContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public ScriptAdditionalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scriptAdditional; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterScriptAdditional(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitScriptAdditional(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitScriptAdditional(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScriptAdditionalContext scriptAdditional() throws RecognitionException {
		ScriptAdditionalContext _localctx = new ScriptAdditionalContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_scriptAdditional);
		int _la;
		try {
			setState(986);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECKPOINT:
			case CLUSTER:
			case COPY:
			case DEALLOCATE:
			case LISTEN:
			case LOAD:
			case NOTIFY:
			case PREPARE:
			case REASSIGN:
			case REFRESH:
			case REINDEX:
			case RESET:
			case TRUNCATE:
			case UNLISTEN:
			case ANALYZE:
			case DO:
				enterOuterAlt(_localctx, 1);
				{
				setState(959);
				additionalStatement();
				}
				break;
			case VACUUM:
				enterOuterAlt(_localctx, 2);
				{
				setState(960);
				match(VACUUM);
				setState(961);
				vacuumMode();
				setState(963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
					{
					setState(962);
					tableColsList();
					}
				}

				}
				break;
			case MOVE:
			case FETCH:
				enterOuterAlt(_localctx, 3);
				{
				setState(965);
				_la = _input.LA(1);
				if ( !(_la==MOVE || _la==FETCH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(967);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,38,_ctx) ) {
				case 1:
					{
					setState(966);
					fetchMoveDirection();
					}
					break;
				}
				setState(970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(969);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(972);
				identifier();
				}
				break;
			case CLOSE:
				enterOuterAlt(_localctx, 4);
				{
				setState(973);
				match(CLOSE);
				setState(976);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(974);
					identifier();
					}
					break;
				case ALL:
					{
					setState(975);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CALL:
				enterOuterAlt(_localctx, 5);
				{
				setState(978);
				match(CALL);
				setState(979);
				functionCall();
				}
				break;
			case DISCARD:
				enterOuterAlt(_localctx, 6);
				{
				setState(980);
				match(DISCARD);
				setState(981);
				_la = _input.LA(1);
				if ( !(_la==PLANS || _la==SEQUENCES || _la==TEMP || _la==TEMPORARY || _la==ALL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 7);
				{
				setState(982);
				declareStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 8);
				{
				setState(983);
				executeStatement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 9);
				{
				setState(984);
				explainStatement();
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 10);
				{
				setState(985);
				showStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AdditionalStatementContext extends ParserRuleContext {
		public AnonymousBlockContext anonymousBlock() {
			return getRuleContext(AnonymousBlockContext.class,0);
		}
		public TerminalNode LISTEN() { return getToken(SQLParser.LISTEN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode UNLISTEN() { return getToken(SQLParser.UNLISTEN, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public TerminalNode ANALYZE() { return getToken(SQLParser.ANALYZE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<AnalyzeModeContext> analyzeMode() {
			return getRuleContexts(AnalyzeModeContext.class);
		}
		public AnalyzeModeContext analyzeMode(int i) {
			return getRuleContext(AnalyzeModeContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode VERBOSE() { return getToken(SQLParser.VERBOSE, 0); }
		public TableColsListContext tableColsList() {
			return getRuleContext(TableColsListContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode CLUSTER() { return getToken(SQLParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode CHECKPOINT() { return getToken(SQLParser.CHECKPOINT, 0); }
		public TerminalNode LOAD() { return getToken(SQLParser.LOAD, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public TerminalNode DEALLOCATE() { return getToken(SQLParser.DEALLOCATE, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode PREPARE() { return getToken(SQLParser.PREPARE, 0); }
		public TerminalNode REINDEX() { return getToken(SQLParser.REINDEX, 0); }
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public TerminalNode SYSTEM() { return getToken(SQLParser.SYSTEM, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(SQLParser.CONCURRENTLY, 0); }
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public TerminalNode TIME() { return getToken(SQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public TerminalNode SESSION() { return getToken(SQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SQLParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public TerminalNode REFRESH() { return getToken(SQLParser.REFRESH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SQLParser.MATERIALIZED, 0); }
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public DataStatementContext dataStatement() {
			return getRuleContext(DataStatementContext.class,0);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode REASSIGN() { return getToken(SQLParser.REASSIGN, 0); }
		public TerminalNode OWNED() { return getToken(SQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public CopyStatementContext copyStatement() {
			return getRuleContext(CopyStatementContext.class,0);
		}
		public TruncateStmtContext truncateStmt() {
			return getRuleContext(TruncateStmtContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public AdditionalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additionalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAdditionalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAdditionalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAdditionalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AdditionalStatementContext additionalStatement() throws RecognitionException {
		AdditionalStatementContext _localctx = new AdditionalStatementContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_additionalStatement);
		int _la;
		try {
			setState(1114);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DO:
				enterOuterAlt(_localctx, 1);
				{
				setState(988);
				anonymousBlock();
				}
				break;
			case LISTEN:
				enterOuterAlt(_localctx, 2);
				{
				setState(989);
				match(LISTEN);
				setState(990);
				identifier();
				}
				break;
			case UNLISTEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(991);
				match(UNLISTEN);
				setState(994);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(992);
					identifier();
					}
					break;
				case MULTIPLY:
					{
					setState(993);
					match(MULTIPLY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case ANALYZE:
				enterOuterAlt(_localctx, 4);
				{
				setState(996);
				match(ANALYZE);
				setState(1009);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(997);
					match(LEFT_PAREN);
					setState(998);
					analyzeMode();
					setState(1003);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(999);
						match(COMMA);
						setState(1000);
						analyzeMode();
						}
						}
						setState(1005);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1006);
					match(RIGHT_PAREN);
					}
					break;
				case VERBOSE:
					{
					setState(1008);
					match(VERBOSE);
					}
					break;
				case EOF:
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case SEMI_COLON:
				case Identifier:
				case QuotedIdentifier:
					break;
				default:
					break;
				}
				setState(1012);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
					{
					setState(1011);
					tableColsList();
					}
				}

				}
				break;
			case CLUSTER:
				enterOuterAlt(_localctx, 5);
				{
				setState(1014);
				match(CLUSTER);
				setState(1016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(1015);
					match(VERBOSE);
					}
				}

				setState(1027);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					setState(1018);
					identifier();
					setState(1019);
					match(ON);
					setState(1020);
					schemaQualifiedName();
					}
					break;
				case 2:
					{
					setState(1022);
					schemaQualifiedName();
					setState(1025);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==USING) {
						{
						setState(1023);
						match(USING);
						setState(1024);
						identifier();
						}
					}

					}
					break;
				}
				}
				break;
			case CHECKPOINT:
				enterOuterAlt(_localctx, 6);
				{
				setState(1029);
				match(CHECKPOINT);
				}
				break;
			case LOAD:
				enterOuterAlt(_localctx, 7);
				{
				setState(1030);
				match(LOAD);
				setState(1031);
				match(Character_String_Literal);
				}
				break;
			case DEALLOCATE:
				enterOuterAlt(_localctx, 8);
				{
				setState(1032);
				match(DEALLOCATE);
				setState(1034);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					setState(1033);
					match(PREPARE);
					}
					break;
				}
				setState(1038);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(1036);
					identifier();
					}
					break;
				case ALL:
					{
					setState(1037);
					match(ALL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case REINDEX:
				enterOuterAlt(_localctx, 9);
				{
				setState(1040);
				match(REINDEX);
				setState(1044);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1041);
					match(LEFT_PAREN);
					setState(1042);
					match(VERBOSE);
					setState(1043);
					match(RIGHT_PAREN);
					}
				}

				setState(1046);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==INDEX || _la==SCHEMA || _la==SYSTEM || _la==TABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(1047);
					match(CONCURRENTLY);
					}
				}

				setState(1050);
				schemaQualifiedName();
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 10);
				{
				setState(1051);
				match(RESET);
				setState(1063);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,54,_ctx) ) {
				case 1:
					{
					setState(1055);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,53,_ctx) ) {
					case 1:
						{
						setState(1052);
						identifier();
						setState(1053);
						match(DOT);
						}
						break;
					}
					setState(1057);
					identifier();
					}
					break;
				case 2:
					{
					setState(1058);
					match(TIME);
					setState(1059);
					match(ZONE);
					}
					break;
				case 3:
					{
					setState(1060);
					match(SESSION);
					setState(1061);
					match(AUTHORIZATION);
					}
					break;
				case 4:
					{
					setState(1062);
					match(ALL);
					}
					break;
				}
				}
				break;
			case REFRESH:
				enterOuterAlt(_localctx, 11);
				{
				setState(1065);
				match(REFRESH);
				setState(1066);
				match(MATERIALIZED);
				setState(1067);
				match(VIEW);
				setState(1069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(1068);
					match(CONCURRENTLY);
					}
				}

				setState(1071);
				schemaQualifiedName();
				setState(1077);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(1072);
					match(WITH);
					setState(1074);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(1073);
						match(NO);
						}
					}

					setState(1076);
					match(DATA);
					}
				}

				}
				break;
			case PREPARE:
				enterOuterAlt(_localctx, 12);
				{
				setState(1079);
				match(PREPARE);
				setState(1080);
				identifier();
				setState(1092);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1081);
					match(LEFT_PAREN);
					setState(1082);
					dataType();
					setState(1087);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(1083);
						match(COMMA);
						setState(1084);
						dataType();
						}
						}
						setState(1089);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(1090);
					match(RIGHT_PAREN);
					}
				}

				setState(1094);
				match(AS);
				setState(1095);
				dataStatement();
				}
				break;
			case REASSIGN:
				enterOuterAlt(_localctx, 13);
				{
				setState(1097);
				match(REASSIGN);
				setState(1098);
				match(OWNED);
				setState(1099);
				match(BY);
				setState(1100);
				userName();
				setState(1105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1101);
					match(COMMA);
					setState(1102);
					userName();
					}
					}
					setState(1107);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1108);
				match(TO);
				setState(1109);
				userName();
				}
				break;
			case COPY:
				enterOuterAlt(_localctx, 14);
				{
				setState(1111);
				copyStatement();
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 15);
				{
				setState(1112);
				truncateStmt();
				}
				break;
			case NOTIFY:
				enterOuterAlt(_localctx, 16);
				{
				setState(1113);
				notifyStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainStatementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(SQLParser.EXPLAIN, 0); }
		public ExplainQueryContext explainQuery() {
			return getRuleContext(ExplainQueryContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<ExplainOptionContext> explainOption() {
			return getRuleContexts(ExplainOptionContext.class);
		}
		public ExplainOptionContext explainOption(int i) {
			return getRuleContext(ExplainOptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode ANALYZE() { return getToken(SQLParser.ANALYZE, 0); }
		public TerminalNode VERBOSE() { return getToken(SQLParser.VERBOSE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ExplainStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExplainStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExplainStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitExplainStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainStatementContext explainStatement() throws RecognitionException {
		ExplainStatementContext _localctx = new ExplainStatementContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_explainStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1116);
			match(EXPLAIN);
			setState(1134);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,65,_ctx) ) {
			case 1:
				{
				setState(1118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANALYZE) {
					{
					setState(1117);
					match(ANALYZE);
					}
				}

				setState(1121);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(1120);
					match(VERBOSE);
					}
				}

				}
				break;
			case 2:
				{
				setState(1123);
				match(LEFT_PAREN);
				setState(1124);
				explainOption();
				setState(1129);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1125);
					match(COMMA);
					setState(1126);
					explainOption();
					}
					}
					setState(1131);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1132);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(1136);
			explainQuery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainQueryContext extends ParserRuleContext {
		public DataStatementContext dataStatement() {
			return getRuleContext(DataStatementContext.class,0);
		}
		public ExecuteStatementContext executeStatement() {
			return getRuleContext(ExecuteStatementContext.class,0);
		}
		public DeclareStatementContext declareStatement() {
			return getRuleContext(DeclareStatementContext.class,0);
		}
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public CreateTableAsStatementContext createTableAsStatement() {
			return getRuleContext(CreateTableAsStatementContext.class,0);
		}
		public CreateViewStatementContext createViewStatement() {
			return getRuleContext(CreateViewStatementContext.class,0);
		}
		public ExplainQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExplainQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExplainQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitExplainQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainQueryContext explainQuery() throws RecognitionException {
		ExplainQueryContext _localctx = new ExplainQueryContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_explainQuery);
		try {
			setState(1146);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case UPDATE:
			case VALUES:
			case SELECT:
			case TABLE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1138);
				dataStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1139);
				executeStatement();
				}
				break;
			case DECLARE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1140);
				declareStatement();
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1141);
				match(CREATE);
				setState(1144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
				case 1:
					{
					setState(1142);
					createTableAsStatement();
					}
					break;
				case 2:
					{
					setState(1143);
					createViewStatement();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStatementContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExecuteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExecuteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitExecuteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStatementContext executeStatement() throws RecognitionException {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_executeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1148);
			match(EXECUTE);
			setState(1149);
			identifier();
			setState(1161);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1150);
				match(LEFT_PAREN);
				setState(1151);
				vex(0);
				setState(1156);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1152);
					match(COMMA);
					setState(1153);
					vex(0);
					}
					}
					setState(1158);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1159);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclareStatementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(SQLParser.DECLARE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURSOR() { return getToken(SQLParser.CURSOR, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(SQLParser.BINARY, 0); }
		public TerminalNode INSENSITIVE() { return getToken(SQLParser.INSENSITIVE, 0); }
		public TerminalNode SCROLL() { return getToken(SQLParser.SCROLL, 0); }
		public TerminalNode HOLD() { return getToken(SQLParser.HOLD, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public DeclareStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declareStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDeclareStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDeclareStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDeclareStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclareStatementContext declareStatement() throws RecognitionException {
		DeclareStatementContext _localctx = new DeclareStatementContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_declareStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1163);
			match(DECLARE);
			setState(1164);
			identifier();
			setState(1166);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BINARY) {
				{
				setState(1165);
				match(BINARY);
				}
			}

			setState(1169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSENSITIVE) {
				{
				setState(1168);
				match(INSENSITIVE);
				}
			}

			setState(1175);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NO || _la==SCROLL) {
				{
				setState(1172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1171);
					match(NO);
					}
				}

				setState(1174);
				match(SCROLL);
				}
			}

			setState(1177);
			match(CURSOR);
			setState(1180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITHOUT || _la==WITH) {
				{
				setState(1178);
				_la = _input.LA(1);
				if ( !(_la==WITHOUT || _la==WITH) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1179);
				match(HOLD);
				}
			}

			setState(1182);
			match(FOR);
			setState(1183);
			selectStmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public TerminalNode SHOW() { return getToken(SQLParser.SHOW, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode TIME() { return getToken(SQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public TerminalNode TRANSACTION() { return getToken(SQLParser.TRANSACTION, 0); }
		public TerminalNode ISOLATION() { return getToken(SQLParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(SQLParser.LEVEL, 0); }
		public TerminalNode SESSION() { return getToken(SQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SQLParser.AUTHORIZATION, 0); }
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterShowStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitShowStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitShowStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_showStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1185);
			match(SHOW);
			setState(1200);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				setState(1189);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,75,_ctx) ) {
				case 1:
					{
					setState(1186);
					identifier();
					setState(1187);
					match(DOT);
					}
					break;
				}
				setState(1191);
				identifier();
				}
				break;
			case 2:
				{
				setState(1192);
				match(ALL);
				}
				break;
			case 3:
				{
				setState(1193);
				match(TIME);
				setState(1194);
				match(ZONE);
				}
				break;
			case 4:
				{
				setState(1195);
				match(TRANSACTION);
				setState(1196);
				match(ISOLATION);
				setState(1197);
				match(LEVEL);
				}
				break;
			case 5:
				{
				setState(1198);
				match(SESSION);
				setState(1199);
				match(AUTHORIZATION);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExplainOptionContext extends ParserRuleContext {
		public TerminalNode ANALYZE() { return getToken(SQLParser.ANALYZE, 0); }
		public TerminalNode VERBOSE() { return getToken(SQLParser.VERBOSE, 0); }
		public TerminalNode COSTS() { return getToken(SQLParser.COSTS, 0); }
		public TerminalNode SETTINGS() { return getToken(SQLParser.SETTINGS, 0); }
		public TerminalNode BUFFERS() { return getToken(SQLParser.BUFFERS, 0); }
		public TerminalNode TIMING() { return getToken(SQLParser.TIMING, 0); }
		public TerminalNode SUMMARY() { return getToken(SQLParser.SUMMARY, 0); }
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public TerminalNode FORMAT() { return getToken(SQLParser.FORMAT, 0); }
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode XML() { return getToken(SQLParser.XML, 0); }
		public TerminalNode JSON() { return getToken(SQLParser.JSON, 0); }
		public TerminalNode YAML() { return getToken(SQLParser.YAML, 0); }
		public ExplainOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explainOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExplainOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExplainOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitExplainOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExplainOptionContext explainOption() throws RecognitionException {
		ExplainOptionContext _localctx = new ExplainOptionContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_explainOption);
		int _la;
		try {
			setState(1208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERBOSE:
			case ANALYZE:
			case BUFFERS:
			case COSTS:
			case SETTINGS:
			case SUMMARY:
			case TIMING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1202);
				_la = _input.LA(1);
				if ( !(_la==VERBOSE || _la==ANALYZE || _la==BUFFERS || _la==COSTS || ((((_la - 523)) & ~0x3f) == 0 && ((1L << (_la - 523)) & ((1L << (SETTINGS - 523)) | (1L << (SUMMARY - 523)) | (1L << (TIMING - 523)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1204);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OFF || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0) || _la==NUMBER_LITERAL) {
					{
					setState(1203);
					booleanValue();
					}
				}

				}
				break;
			case FORMAT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1206);
				match(FORMAT);
				setState(1207);
				_la = _input.LA(1);
				if ( !(_la==TEXT || _la==XML || _la==JSON || _la==YAML) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CURRENT_USER() { return getToken(SQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(SQLParser.SESSION_USER, 0); }
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_userName);
		try {
			setState(1213);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(1210);
				identifier();
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1211);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1212);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableColsListContext extends ParserRuleContext {
		public List<TableColsContext> tableCols() {
			return getRuleContexts(TableColsContext.class);
		}
		public TableColsContext tableCols(int i) {
			return getRuleContext(TableColsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TableColsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableColsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableColsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableColsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableColsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableColsListContext tableColsList() throws RecognitionException {
		TableColsListContext _localctx = new TableColsListContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_tableColsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1215);
			tableCols();
			setState(1220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1216);
				match(COMMA);
				setState(1217);
				tableCols();
				}
				}
				setState(1222);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableColsContext extends ParserRuleContext {
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TableColsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableCols; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableCols(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableCols(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableCols(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableColsContext tableCols() throws RecognitionException {
		TableColsContext _localctx = new TableColsContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_tableCols);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1223);
			schemaQualifiedName();
			setState(1235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1224);
				match(LEFT_PAREN);
				setState(1225);
				identifier();
				setState(1230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1226);
					match(COMMA);
					setState(1227);
					identifier();
					}
					}
					setState(1232);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1233);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumModeContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<VacuumOptionContext> vacuumOption() {
			return getRuleContexts(VacuumOptionContext.class);
		}
		public VacuumOptionContext vacuumOption(int i) {
			return getRuleContext(VacuumOptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode FULL() { return getToken(SQLParser.FULL, 0); }
		public TerminalNode FREEZE() { return getToken(SQLParser.FREEZE, 0); }
		public TerminalNode VERBOSE() { return getToken(SQLParser.VERBOSE, 0); }
		public TerminalNode ANALYZE() { return getToken(SQLParser.ANALYZE, 0); }
		public VacuumModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterVacuumMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitVacuumMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitVacuumMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumModeContext vacuumMode() throws RecognitionException {
		VacuumModeContext _localctx = new VacuumModeContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_vacuumMode);
		int _la;
		try {
			setState(1260);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1237);
				match(LEFT_PAREN);
				setState(1238);
				vacuumOption();
				setState(1243);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1239);
					match(COMMA);
					setState(1240);
					vacuumOption();
					}
					}
					setState(1245);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1246);
				match(RIGHT_PAREN);
				}
				break;
			case EOF:
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case FREEZE:
			case FULL:
			case VERBOSE:
			case ANALYZE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case SEMI_COLON:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(1249);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(1248);
					match(FULL);
					}
				}

				setState(1252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FREEZE) {
					{
					setState(1251);
					match(FREEZE);
					}
				}

				setState(1255);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERBOSE) {
					{
					setState(1254);
					match(VERBOSE);
					}
				}

				setState(1258);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ANALYZE) {
					{
					setState(1257);
					match(ANALYZE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VacuumOptionContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(SQLParser.FULL, 0); }
		public TerminalNode FREEZE() { return getToken(SQLParser.FREEZE, 0); }
		public TerminalNode VERBOSE() { return getToken(SQLParser.VERBOSE, 0); }
		public TerminalNode ANALYZE() { return getToken(SQLParser.ANALYZE, 0); }
		public TerminalNode DISABLE_PAGE_SKIPPING() { return getToken(SQLParser.DISABLE_PAGE_SKIPPING, 0); }
		public TerminalNode SKIP_LOCKED() { return getToken(SQLParser.SKIP_LOCKED, 0); }
		public TerminalNode INDEX_CLEANUP() { return getToken(SQLParser.INDEX_CLEANUP, 0); }
		public TerminalNode TRUNCATE() { return getToken(SQLParser.TRUNCATE, 0); }
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public VacuumOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vacuumOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterVacuumOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitVacuumOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitVacuumOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VacuumOptionContext vacuumOption() throws RecognitionException {
		VacuumOptionContext _localctx = new VacuumOptionContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_vacuumOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1262);
			_la = _input.LA(1);
			if ( !(_la==TRUNCATE || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & ((1L << (FREEZE - 349)) | (1L << (FULL - 349)) | (1L << (VERBOSE - 349)) | (1L << (ANALYZE - 349)))) != 0) || _la==DISABLE_PAGE_SKIPPING || _la==INDEX_CLEANUP || _la==SKIP_LOCKED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1264);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFF || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0) || _la==NUMBER_LITERAL) {
				{
				setState(1263);
				booleanValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnalyzeModeContext extends ParserRuleContext {
		public TerminalNode VERBOSE() { return getToken(SQLParser.VERBOSE, 0); }
		public TerminalNode SKIP_LOCKED() { return getToken(SQLParser.SKIP_LOCKED, 0); }
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public AnalyzeModeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_analyzeMode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAnalyzeMode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAnalyzeMode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAnalyzeMode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnalyzeModeContext analyzeMode() throws RecognitionException {
		AnalyzeModeContext _localctx = new AnalyzeModeContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_analyzeMode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1266);
			_la = _input.LA(1);
			if ( !(_la==VERBOSE || _la==SKIP_LOCKED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1268);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OFF || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0) || _la==NUMBER_LITERAL) {
				{
				setState(1267);
				booleanValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanValueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SQLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SQLParser.FALSE, 0); }
		public TerminalNode OFF() { return getToken(SQLParser.OFF, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public BooleanValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBooleanValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBooleanValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitBooleanValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanValueContext booleanValue() throws RecognitionException {
		BooleanValueContext _localctx = new BooleanValueContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_booleanValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1270);
			_la = _input.LA(1);
			if ( !(_la==OFF || ((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0) || _la==NUMBER_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FetchMoveDirectionContext extends ParserRuleContext {
		public TerminalNode NEXT() { return getToken(SQLParser.NEXT, 0); }
		public TerminalNode PRIOR() { return getToken(SQLParser.PRIOR, 0); }
		public TerminalNode FIRST() { return getToken(SQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(SQLParser.LAST, 0); }
		public SignedNumberLiteralContext signedNumberLiteral() {
			return getRuleContext(SignedNumberLiteralContext.class,0);
		}
		public TerminalNode ABSOLUTE() { return getToken(SQLParser.ABSOLUTE, 0); }
		public TerminalNode RELATIVE() { return getToken(SQLParser.RELATIVE, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode FORWARD() { return getToken(SQLParser.FORWARD, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode BACKWARD() { return getToken(SQLParser.BACKWARD, 0); }
		public FetchMoveDirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetchMoveDirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFetchMoveDirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFetchMoveDirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFetchMoveDirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FetchMoveDirectionContext fetchMoveDirection() throws RecognitionException {
		FetchMoveDirectionContext _localctx = new FetchMoveDirectionContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_fetchMoveDirection);
		int _la;
		try {
			setState(1289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NEXT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1272);
				match(NEXT);
				}
				break;
			case PRIOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(1273);
				match(PRIOR);
				}
				break;
			case FIRST:
				enterOuterAlt(_localctx, 3);
				{
				setState(1274);
				match(FIRST);
				}
				break;
			case LAST:
				enterOuterAlt(_localctx, 4);
				{
				setState(1275);
				match(LAST);
				}
				break;
			case ABSOLUTE:
			case RELATIVE:
			case PLUS:
			case MINUS:
			case NUMBER_LITERAL:
				enterOuterAlt(_localctx, 5);
				{
				setState(1277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ABSOLUTE || _la==RELATIVE) {
					{
					setState(1276);
					_la = _input.LA(1);
					if ( !(_la==ABSOLUTE || _la==RELATIVE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1279);
				signedNumberLiteral();
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 6);
				{
				setState(1280);
				match(ALL);
				}
				break;
			case FORWARD:
				enterOuterAlt(_localctx, 7);
				{
				setState(1281);
				match(FORWARD);
				setState(1283);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==NUMBER_LITERAL) {
					{
					setState(1282);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NUMBER_LITERAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case BACKWARD:
				enterOuterAlt(_localctx, 8);
				{
				setState(1285);
				match(BACKWARD);
				setState(1287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==NUMBER_LITERAL) {
					{
					setState(1286);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==NUMBER_LITERAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaStatementContext extends ParserRuleContext {
		public SchemaCreateContext schemaCreate() {
			return getRuleContext(SchemaCreateContext.class,0);
		}
		public SchemaAlterContext schemaAlter() {
			return getRuleContext(SchemaAlterContext.class,0);
		}
		public SchemaDropContext schemaDrop() {
			return getRuleContext(SchemaDropContext.class,0);
		}
		public SchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchemaStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchemaStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSchemaStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaStatementContext schemaStatement() throws RecognitionException {
		SchemaStatementContext _localctx = new SchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_schemaStatement);
		try {
			setState(1294);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
			case IMPORT:
			case REVOKE:
			case SECURITY:
			case SET:
			case CREATE:
			case GRANT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1291);
				schemaCreate();
				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1292);
				schemaAlter();
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1293);
				schemaDrop();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaCreateContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public CreateTableStatementContext createTableStatement() {
			return getRuleContext(CreateTableStatementContext.class,0);
		}
		public CreateForeignTableStatementContext createForeignTableStatement() {
			return getRuleContext(CreateForeignTableStatementContext.class,0);
		}
		public CreateIndexStatementContext createIndexStatement() {
			return getRuleContext(CreateIndexStatementContext.class,0);
		}
		public CreateExtensionStatementContext createExtensionStatement() {
			return getRuleContext(CreateExtensionStatementContext.class,0);
		}
		public CreateTriggerStatementContext createTriggerStatement() {
			return getRuleContext(CreateTriggerStatementContext.class,0);
		}
		public CreateRewriteStatementContext createRewriteStatement() {
			return getRuleContext(CreateRewriteStatementContext.class,0);
		}
		public CreateFunctionStatementContext createFunctionStatement() {
			return getRuleContext(CreateFunctionStatementContext.class,0);
		}
		public CreateSequenceStatementContext createSequenceStatement() {
			return getRuleContext(CreateSequenceStatementContext.class,0);
		}
		public CreateSchemaStatementContext createSchemaStatement() {
			return getRuleContext(CreateSchemaStatementContext.class,0);
		}
		public CreateViewStatementContext createViewStatement() {
			return getRuleContext(CreateViewStatementContext.class,0);
		}
		public CreateLanguageStatementContext createLanguageStatement() {
			return getRuleContext(CreateLanguageStatementContext.class,0);
		}
		public CreateEventTriggerContext createEventTrigger() {
			return getRuleContext(CreateEventTriggerContext.class,0);
		}
		public CreateTypeStatementContext createTypeStatement() {
			return getRuleContext(CreateTypeStatementContext.class,0);
		}
		public CreateDomainStatementContext createDomainStatement() {
			return getRuleContext(CreateDomainStatementContext.class,0);
		}
		public CreateServerStatementContext createServerStatement() {
			return getRuleContext(CreateServerStatementContext.class,0);
		}
		public CreateFtsConfigurationContext createFtsConfiguration() {
			return getRuleContext(CreateFtsConfigurationContext.class,0);
		}
		public CreateFtsTemplateContext createFtsTemplate() {
			return getRuleContext(CreateFtsTemplateContext.class,0);
		}
		public CreateFtsParserContext createFtsParser() {
			return getRuleContext(CreateFtsParserContext.class,0);
		}
		public CreateFtsDictionaryContext createFtsDictionary() {
			return getRuleContext(CreateFtsDictionaryContext.class,0);
		}
		public CreateCollationContext createCollation() {
			return getRuleContext(CreateCollationContext.class,0);
		}
		public CreateUserMappingContext createUserMapping() {
			return getRuleContext(CreateUserMappingContext.class,0);
		}
		public CreateTransformStatementContext createTransformStatement() {
			return getRuleContext(CreateTransformStatementContext.class,0);
		}
		public CreateAccessMethodContext createAccessMethod() {
			return getRuleContext(CreateAccessMethodContext.class,0);
		}
		public CreateUserOrRoleContext createUserOrRole() {
			return getRuleContext(CreateUserOrRoleContext.class,0);
		}
		public CreateGroupContext createGroup() {
			return getRuleContext(CreateGroupContext.class,0);
		}
		public CreateTablespaceContext createTablespace() {
			return getRuleContext(CreateTablespaceContext.class,0);
		}
		public CreateStatisticsContext createStatistics() {
			return getRuleContext(CreateStatisticsContext.class,0);
		}
		public CreateForeignDataWrapperContext createForeignDataWrapper() {
			return getRuleContext(CreateForeignDataWrapperContext.class,0);
		}
		public CreateOperatorStatementContext createOperatorStatement() {
			return getRuleContext(CreateOperatorStatementContext.class,0);
		}
		public CreateAggregateStatementContext createAggregateStatement() {
			return getRuleContext(CreateAggregateStatementContext.class,0);
		}
		public CreateTableAsStatementContext createTableAsStatement() {
			return getRuleContext(CreateTableAsStatementContext.class,0);
		}
		public CreatePolicyStatementContext createPolicyStatement() {
			return getRuleContext(CreatePolicyStatementContext.class,0);
		}
		public CreateSubscriptionStatementContext createSubscriptionStatement() {
			return getRuleContext(CreateSubscriptionStatementContext.class,0);
		}
		public CreateCastStatementContext createCastStatement() {
			return getRuleContext(CreateCastStatementContext.class,0);
		}
		public CreateOperatorFamilyStatementContext createOperatorFamilyStatement() {
			return getRuleContext(CreateOperatorFamilyStatementContext.class,0);
		}
		public CreateOperatorClassStatementContext createOperatorClassStatement() {
			return getRuleContext(CreateOperatorClassStatementContext.class,0);
		}
		public CreateConversionStatementContext createConversionStatement() {
			return getRuleContext(CreateConversionStatementContext.class,0);
		}
		public CreatePublicationStatementContext createPublicationStatement() {
			return getRuleContext(CreatePublicationStatementContext.class,0);
		}
		public CommentOnStatementContext commentOnStatement() {
			return getRuleContext(CommentOnStatementContext.class,0);
		}
		public RuleCommonContext ruleCommon() {
			return getRuleContext(RuleCommonContext.class,0);
		}
		public SetStatementContext setStatement() {
			return getRuleContext(SetStatementContext.class,0);
		}
		public SchemaImportContext schemaImport() {
			return getRuleContext(SchemaImportContext.class,0);
		}
		public SecurityLabelContext securityLabel() {
			return getRuleContext(SecurityLabelContext.class,0);
		}
		public SchemaCreateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaCreate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchemaCreate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchemaCreate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSchemaCreate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaCreateContext schemaCreate() throws RecognitionException {
		SchemaCreateContext _localctx = new SchemaCreateContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_schemaCreate);
		try {
			setState(1342);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1296);
				match(CREATE);
				setState(1335);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(1297);
					createTableStatement();
					}
					break;
				case 2:
					{
					setState(1298);
					createForeignTableStatement();
					}
					break;
				case 3:
					{
					setState(1299);
					createIndexStatement();
					}
					break;
				case 4:
					{
					setState(1300);
					createExtensionStatement();
					}
					break;
				case 5:
					{
					setState(1301);
					createTriggerStatement();
					}
					break;
				case 6:
					{
					setState(1302);
					createRewriteStatement();
					}
					break;
				case 7:
					{
					setState(1303);
					createFunctionStatement();
					}
					break;
				case 8:
					{
					setState(1304);
					createSequenceStatement();
					}
					break;
				case 9:
					{
					setState(1305);
					createSchemaStatement();
					}
					break;
				case 10:
					{
					setState(1306);
					createViewStatement();
					}
					break;
				case 11:
					{
					setState(1307);
					createLanguageStatement();
					}
					break;
				case 12:
					{
					setState(1308);
					createEventTrigger();
					}
					break;
				case 13:
					{
					setState(1309);
					createTypeStatement();
					}
					break;
				case 14:
					{
					setState(1310);
					createDomainStatement();
					}
					break;
				case 15:
					{
					setState(1311);
					createServerStatement();
					}
					break;
				case 16:
					{
					setState(1312);
					createFtsConfiguration();
					}
					break;
				case 17:
					{
					setState(1313);
					createFtsTemplate();
					}
					break;
				case 18:
					{
					setState(1314);
					createFtsParser();
					}
					break;
				case 19:
					{
					setState(1315);
					createFtsDictionary();
					}
					break;
				case 20:
					{
					setState(1316);
					createCollation();
					}
					break;
				case 21:
					{
					setState(1317);
					createUserMapping();
					}
					break;
				case 22:
					{
					setState(1318);
					createTransformStatement();
					}
					break;
				case 23:
					{
					setState(1319);
					createAccessMethod();
					}
					break;
				case 24:
					{
					setState(1320);
					createUserOrRole();
					}
					break;
				case 25:
					{
					setState(1321);
					createGroup();
					}
					break;
				case 26:
					{
					setState(1322);
					createTablespace();
					}
					break;
				case 27:
					{
					setState(1323);
					createStatistics();
					}
					break;
				case 28:
					{
					setState(1324);
					createForeignDataWrapper();
					}
					break;
				case 29:
					{
					setState(1325);
					createOperatorStatement();
					}
					break;
				case 30:
					{
					setState(1326);
					createAggregateStatement();
					}
					break;
				case 31:
					{
					setState(1327);
					createTableAsStatement();
					}
					break;
				case 32:
					{
					setState(1328);
					createPolicyStatement();
					}
					break;
				case 33:
					{
					setState(1329);
					createSubscriptionStatement();
					}
					break;
				case 34:
					{
					setState(1330);
					createCastStatement();
					}
					break;
				case 35:
					{
					setState(1331);
					createOperatorFamilyStatement();
					}
					break;
				case 36:
					{
					setState(1332);
					createOperatorClassStatement();
					}
					break;
				case 37:
					{
					setState(1333);
					createConversionStatement();
					}
					break;
				case 38:
					{
					setState(1334);
					createPublicationStatement();
					}
					break;
				}
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1337);
				commentOnStatement();
				}
				break;
			case REVOKE:
			case GRANT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1338);
				ruleCommon();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(1339);
				setStatement();
				}
				break;
			case IMPORT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1340);
				schemaImport();
				}
				break;
			case SECURITY:
				enterOuterAlt(_localctx, 6);
				{
				setState(1341);
				securityLabel();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaAlterContext extends ParserRuleContext {
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public AlterFunctionStatementContext alterFunctionStatement() {
			return getRuleContext(AlterFunctionStatementContext.class,0);
		}
		public AlterSchemaStatementContext alterSchemaStatement() {
			return getRuleContext(AlterSchemaStatementContext.class,0);
		}
		public AlterLanguageStatementContext alterLanguageStatement() {
			return getRuleContext(AlterLanguageStatementContext.class,0);
		}
		public AlterTableStatementContext alterTableStatement() {
			return getRuleContext(AlterTableStatementContext.class,0);
		}
		public AlterIndexStatementContext alterIndexStatement() {
			return getRuleContext(AlterIndexStatementContext.class,0);
		}
		public AlterDefaultPrivilegesContext alterDefaultPrivileges() {
			return getRuleContext(AlterDefaultPrivilegesContext.class,0);
		}
		public AlterSequenceStatementContext alterSequenceStatement() {
			return getRuleContext(AlterSequenceStatementContext.class,0);
		}
		public AlterViewStatementContext alterViewStatement() {
			return getRuleContext(AlterViewStatementContext.class,0);
		}
		public AlterEventTriggerContext alterEventTrigger() {
			return getRuleContext(AlterEventTriggerContext.class,0);
		}
		public AlterTypeStatementContext alterTypeStatement() {
			return getRuleContext(AlterTypeStatementContext.class,0);
		}
		public AlterDomainStatementContext alterDomainStatement() {
			return getRuleContext(AlterDomainStatementContext.class,0);
		}
		public AlterServerStatementContext alterServerStatement() {
			return getRuleContext(AlterServerStatementContext.class,0);
		}
		public AlterFtsStatementContext alterFtsStatement() {
			return getRuleContext(AlterFtsStatementContext.class,0);
		}
		public AlterCollationContext alterCollation() {
			return getRuleContext(AlterCollationContext.class,0);
		}
		public AlterUserMappingContext alterUserMapping() {
			return getRuleContext(AlterUserMappingContext.class,0);
		}
		public AlterUserOrRoleContext alterUserOrRole() {
			return getRuleContext(AlterUserOrRoleContext.class,0);
		}
		public AlterGroupContext alterGroup() {
			return getRuleContext(AlterGroupContext.class,0);
		}
		public AlterTablespaceContext alterTablespace() {
			return getRuleContext(AlterTablespaceContext.class,0);
		}
		public AlterStatisticsContext alterStatistics() {
			return getRuleContext(AlterStatisticsContext.class,0);
		}
		public AlterForeignDataWrapperContext alterForeignDataWrapper() {
			return getRuleContext(AlterForeignDataWrapperContext.class,0);
		}
		public AlterOperatorStatementContext alterOperatorStatement() {
			return getRuleContext(AlterOperatorStatementContext.class,0);
		}
		public AlterAggregateStatementContext alterAggregateStatement() {
			return getRuleContext(AlterAggregateStatementContext.class,0);
		}
		public AlterExtensionStatementContext alterExtensionStatement() {
			return getRuleContext(AlterExtensionStatementContext.class,0);
		}
		public AlterPolicyStatementContext alterPolicyStatement() {
			return getRuleContext(AlterPolicyStatementContext.class,0);
		}
		public AlterSubscriptionStatementContext alterSubscriptionStatement() {
			return getRuleContext(AlterSubscriptionStatementContext.class,0);
		}
		public AlterTriggerStatementContext alterTriggerStatement() {
			return getRuleContext(AlterTriggerStatementContext.class,0);
		}
		public AlterRuleStatementContext alterRuleStatement() {
			return getRuleContext(AlterRuleStatementContext.class,0);
		}
		public AlterOperatorFamilyStatementContext alterOperatorFamilyStatement() {
			return getRuleContext(AlterOperatorFamilyStatementContext.class,0);
		}
		public AlterOperatorClassStatementContext alterOperatorClassStatement() {
			return getRuleContext(AlterOperatorClassStatementContext.class,0);
		}
		public AlterConversionStatementContext alterConversionStatement() {
			return getRuleContext(AlterConversionStatementContext.class,0);
		}
		public AlterPublicationStatementContext alterPublicationStatement() {
			return getRuleContext(AlterPublicationStatementContext.class,0);
		}
		public AlterOwnerContext alterOwner() {
			return getRuleContext(AlterOwnerContext.class,0);
		}
		public SchemaAlterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaAlter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchemaAlter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchemaAlter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSchemaAlter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaAlterContext schemaAlter() throws RecognitionException {
		SchemaAlterContext _localctx = new SchemaAlterContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_schemaAlter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1344);
			match(ALTER);
			setState(1377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				setState(1345);
				alterFunctionStatement();
				}
				break;
			case 2:
				{
				setState(1346);
				alterSchemaStatement();
				}
				break;
			case 3:
				{
				setState(1347);
				alterLanguageStatement();
				}
				break;
			case 4:
				{
				setState(1348);
				alterTableStatement();
				}
				break;
			case 5:
				{
				setState(1349);
				alterIndexStatement();
				}
				break;
			case 6:
				{
				setState(1350);
				alterDefaultPrivileges();
				}
				break;
			case 7:
				{
				setState(1351);
				alterSequenceStatement();
				}
				break;
			case 8:
				{
				setState(1352);
				alterViewStatement();
				}
				break;
			case 9:
				{
				setState(1353);
				alterEventTrigger();
				}
				break;
			case 10:
				{
				setState(1354);
				alterTypeStatement();
				}
				break;
			case 11:
				{
				setState(1355);
				alterDomainStatement();
				}
				break;
			case 12:
				{
				setState(1356);
				alterServerStatement();
				}
				break;
			case 13:
				{
				setState(1357);
				alterFtsStatement();
				}
				break;
			case 14:
				{
				setState(1358);
				alterCollation();
				}
				break;
			case 15:
				{
				setState(1359);
				alterUserMapping();
				}
				break;
			case 16:
				{
				setState(1360);
				alterUserOrRole();
				}
				break;
			case 17:
				{
				setState(1361);
				alterGroup();
				}
				break;
			case 18:
				{
				setState(1362);
				alterTablespace();
				}
				break;
			case 19:
				{
				setState(1363);
				alterStatistics();
				}
				break;
			case 20:
				{
				setState(1364);
				alterForeignDataWrapper();
				}
				break;
			case 21:
				{
				setState(1365);
				alterOperatorStatement();
				}
				break;
			case 22:
				{
				setState(1366);
				alterAggregateStatement();
				}
				break;
			case 23:
				{
				setState(1367);
				alterExtensionStatement();
				}
				break;
			case 24:
				{
				setState(1368);
				alterPolicyStatement();
				}
				break;
			case 25:
				{
				setState(1369);
				alterSubscriptionStatement();
				}
				break;
			case 26:
				{
				setState(1370);
				alterTriggerStatement();
				}
				break;
			case 27:
				{
				setState(1371);
				alterRuleStatement();
				}
				break;
			case 28:
				{
				setState(1372);
				alterOperatorFamilyStatement();
				}
				break;
			case 29:
				{
				setState(1373);
				alterOperatorClassStatement();
				}
				break;
			case 30:
				{
				setState(1374);
				alterConversionStatement();
				}
				break;
			case 31:
				{
				setState(1375);
				alterPublicationStatement();
				}
				break;
			case 32:
				{
				setState(1376);
				alterOwner();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaDropContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public DropFunctionStatementContext dropFunctionStatement() {
			return getRuleContext(DropFunctionStatementContext.class,0);
		}
		public DropTriggerStatementContext dropTriggerStatement() {
			return getRuleContext(DropTriggerStatementContext.class,0);
		}
		public DropRuleStatementContext dropRuleStatement() {
			return getRuleContext(DropRuleStatementContext.class,0);
		}
		public DropPolicyStatementContext dropPolicyStatement() {
			return getRuleContext(DropPolicyStatementContext.class,0);
		}
		public DropCastStatementContext dropCastStatement() {
			return getRuleContext(DropCastStatementContext.class,0);
		}
		public DropOperatorFamilyStatementContext dropOperatorFamilyStatement() {
			return getRuleContext(DropOperatorFamilyStatementContext.class,0);
		}
		public DropOperatorClassStatementContext dropOperatorClassStatement() {
			return getRuleContext(DropOperatorClassStatementContext.class,0);
		}
		public DropStatementsContext dropStatements() {
			return getRuleContext(DropStatementsContext.class,0);
		}
		public DropUserMappingContext dropUserMapping() {
			return getRuleContext(DropUserMappingContext.class,0);
		}
		public DropOwnedContext dropOwned() {
			return getRuleContext(DropOwnedContext.class,0);
		}
		public DropOperatorStatementContext dropOperatorStatement() {
			return getRuleContext(DropOperatorStatementContext.class,0);
		}
		public SchemaDropContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaDrop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchemaDrop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchemaDrop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSchemaDrop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaDropContext schemaDrop() throws RecognitionException {
		SchemaDropContext _localctx = new SchemaDropContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_schemaDrop);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1379);
			match(DROP);
			setState(1391);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				setState(1380);
				dropFunctionStatement();
				}
				break;
			case 2:
				{
				setState(1381);
				dropTriggerStatement();
				}
				break;
			case 3:
				{
				setState(1382);
				dropRuleStatement();
				}
				break;
			case 4:
				{
				setState(1383);
				dropPolicyStatement();
				}
				break;
			case 5:
				{
				setState(1384);
				dropCastStatement();
				}
				break;
			case 6:
				{
				setState(1385);
				dropOperatorFamilyStatement();
				}
				break;
			case 7:
				{
				setState(1386);
				dropOperatorClassStatement();
				}
				break;
			case 8:
				{
				setState(1387);
				dropStatements();
				}
				break;
			case 9:
				{
				setState(1388);
				dropUserMapping();
				}
				break;
			case 10:
				{
				setState(1389);
				dropOwned();
				}
				break;
			case 11:
				{
				setState(1390);
				dropOperatorStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaImportContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode IMPORT() { return getToken(SQLParser.IMPORT, 0); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode INTO() { return getToken(SQLParser.INTO, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public DefineForeignOptionsContext defineForeignOptions() {
			return getRuleContext(DefineForeignOptionsContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(SQLParser.LIMIT, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode EXCEPT() { return getToken(SQLParser.EXCEPT, 0); }
		public SchemaImportContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaImport; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchemaImport(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchemaImport(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSchemaImport(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaImportContext schemaImport() throws RecognitionException {
		SchemaImportContext _localctx = new SchemaImportContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_schemaImport);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1393);
			match(IMPORT);
			setState(1394);
			match(FOREIGN);
			setState(1395);
			match(SCHEMA);
			setState(1396);
			((SchemaImportContext)_localctx).name = identifier();
			setState(1406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPT || _la==LIMIT) {
				{
				setState(1400);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LIMIT:
					{
					setState(1397);
					match(LIMIT);
					setState(1398);
					match(TO);
					}
					break;
				case EXCEPT:
					{
					setState(1399);
					match(EXCEPT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1402);
				match(LEFT_PAREN);
				setState(1403);
				identifierList();
				setState(1404);
				match(RIGHT_PAREN);
				}
			}

			setState(1408);
			match(FROM);
			setState(1409);
			match(SERVER);
			setState(1410);
			identifier();
			setState(1411);
			match(INTO);
			setState(1412);
			identifier();
			setState(1414);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(1413);
				defineForeignOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFunctionStatementContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(SQLParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public FunctionParametersContext functionParameters() {
			return getRuleContext(FunctionParametersContext.class,0);
		}
		public List<FunctionActionsCommonContext> functionActionsCommon() {
			return getRuleContexts(FunctionActionsCommonContext.class);
		}
		public FunctionActionsCommonContext functionActionsCommon(int i) {
			return getRuleContext(FunctionActionsCommonContext.class,i);
		}
		public List<TerminalNode> RESET() { return getTokens(SQLParser.RESET); }
		public TerminalNode RESET(int i) {
			return getToken(SQLParser.RESET, i);
		}
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public List<TerminalNode> ALL() { return getTokens(SQLParser.ALL); }
		public TerminalNode ALL(int i) {
			return getToken(SQLParser.ALL, i);
		}
		public List<TerminalNode> DOT() { return getTokens(SQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SQLParser.DOT, i);
		}
		public AlterFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFunctionStatementContext alterFunctionStatement() throws RecognitionException {
		AlterFunctionStatementContext _localctx = new AlterFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_alterFunctionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1416);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1418);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,103,_ctx) ) {
			case 1:
				{
				setState(1417);
				functionParameters();
				}
				break;
			}
			setState(1444);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				setState(1431); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					setState(1431);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALLED:
					case COST:
					case EXTERNAL:
					case IMMUTABLE:
					case LANGUAGE:
					case LEAKPROOF:
					case PARALLEL:
					case RETURNS:
					case ROWS:
					case SECURITY:
					case SET:
					case STABLE:
					case STRICT:
					case SUPPORT:
					case TRANSFORM:
					case VOLATILE:
					case AS:
					case NOT:
					case WINDOW:
						{
						setState(1420);
						functionActionsCommon();
						}
						break;
					case RESET:
						{
						setState(1421);
						match(RESET);
						setState(1429);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ABORT:
						case ABSOLUTE:
						case ACCESS:
						case ACTION:
						case ADD:
						case ADMIN:
						case AFTER:
						case AGGREGATE:
						case ALSO:
						case ALTER:
						case ALWAYS:
						case ASSERTION:
						case ASSIGNMENT:
						case AT:
						case ATTACH:
						case ATTRIBUTE:
						case BACKWARD:
						case BEFORE:
						case BEGIN:
						case BY:
						case CACHE:
						case CALL:
						case CALLED:
						case CASCADE:
						case CASCADED:
						case CATALOG:
						case CHAIN:
						case CHARACTERISTICS:
						case CHECKPOINT:
						case CLASS:
						case CLOSE:
						case CLUSTER:
						case COLUMNS:
						case COMMENT:
						case COMMENTS:
						case COMMIT:
						case COMMITTED:
						case CONFIGURATION:
						case CONFLICT:
						case CONNECTION:
						case CONSTRAINTS:
						case CONTENT:
						case CONTINUE:
						case CONVERSION:
						case COPY:
						case COST:
						case CSV:
						case CUBE:
						case CURRENT:
						case CURSOR:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DAY:
						case DEALLOCATE:
						case DECLARE:
						case DEFAULTS:
						case DEFERRED:
						case DEFINER:
						case DELETE:
						case DELIMITER:
						case DELIMITERS:
						case DEPENDS:
						case DETACH:
						case DICTIONARY:
						case DISABLE:
						case DISCARD:
						case DOCUMENT:
						case DOMAIN:
						case DOUBLE:
						case DROP:
						case EACH:
						case ENABLE:
						case ENCODING:
						case ENCRYPTED:
						case ENUM:
						case ESCAPE:
						case EVENT:
						case EXCLUDE:
						case EXCLUDING:
						case EXCLUSIVE:
						case EXECUTE:
						case EXPLAIN:
						case EXTENSION:
						case EXTERNAL:
						case FAMILY:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE:
						case FORWARD:
						case FUNCTION:
						case FUNCTIONS:
						case GENERATED:
						case GLOBAL:
						case GRANTED:
						case GROUPS:
						case HANDLER:
						case HEADER:
						case HOLD:
						case HOUR:
						case IDENTITY:
						case IF:
						case IMMEDIATE:
						case IMMUTABLE:
						case IMPLICIT:
						case IMPORT:
						case INCLUDE:
						case INCLUDING:
						case INCREMENT:
						case INDEX:
						case INDEXES:
						case INHERIT:
						case INHERITS:
						case INLINE:
						case INPUT:
						case INSENSITIVE:
						case INSERT:
						case INSTEAD:
						case INVOKER:
						case ISOLATION:
						case KEY:
						case LABEL:
						case LANGUAGE:
						case LARGE:
						case LAST:
						case LEAKPROOF:
						case LEVEL:
						case LISTEN:
						case LOAD:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCKED:
						case LOGGED:
						case MAPPING:
						case MATCH:
						case MATERIALIZED:
						case MAXVALUE:
						case METHOD:
						case MINUTE:
						case MINVALUE:
						case MODE:
						case MONTH:
						case MOVE:
						case NAME:
						case NAMES:
						case NEW:
						case NEXT:
						case NO:
						case NOTHING:
						case NOTIFY:
						case NOWAIT:
						case NULLS:
						case OBJECT:
						case OF:
						case OFF:
						case OIDS:
						case OLD:
						case OPERATOR:
						case OPTION:
						case OPTIONS:
						case ORDINALITY:
						case OTHERS:
						case OVER:
						case OVERRIDING:
						case OWNED:
						case OWNER:
						case PARALLEL:
						case PARSER:
						case PARTIAL:
						case PARTITION:
						case PASSING:
						case PASSWORD:
						case PLANS:
						case POLICY:
						case PRECEDING:
						case PREPARE:
						case PREPARED:
						case PRESERVE:
						case PRIOR:
						case PRIVILEGES:
						case PROCEDURAL:
						case PROCEDURE:
						case PROCEDURES:
						case PROGRAM:
						case PUBLICATION:
						case QUOTE:
						case RANGE:
						case READ:
						case REASSIGN:
						case RECHECK:
						case RECURSIVE:
						case REF:
						case REFERENCING:
						case REFRESH:
						case REINDEX:
						case RELATIVE:
						case RELEASE:
						case RENAME:
						case REPEATABLE:
						case REPLACE:
						case REPLICA:
						case RESET:
						case RESTART:
						case RESTRICT:
						case RETURNS:
						case REVOKE:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROUTINE:
						case ROUTINES:
						case ROWS:
						case RULE:
						case SAVEPOINT:
						case SCHEMA:
						case SCHEMAS:
						case SCROLL:
						case SEARCH:
						case SECOND:
						case SECURITY:
						case SEQUENCE:
						case SEQUENCES:
						case SERIALIZABLE:
						case SERVER:
						case SESSION:
						case SET:
						case SETS:
						case SHARE:
						case SHOW:
						case SIMPLE:
						case SKIP_:
						case SNAPSHOT:
						case SQL:
						case STABLE:
						case STANDALONE:
						case START:
						case STATEMENT:
						case STATISTICS:
						case STDIN:
						case STDOUT:
						case STORAGE:
						case STORED:
						case STRICT:
						case STRIP:
						case SUBSCRIPTION:
						case SUPPORT:
						case SYSID:
						case SYSTEM:
						case TABLES:
						case TABLESPACE:
						case TEMP:
						case TEMPLATE:
						case TEMPORARY:
						case TEXT:
						case TIES:
						case TRANSACTION:
						case TRANSFORM:
						case TRIGGER:
						case TRUNCATE:
						case TRUSTED:
						case TYPE:
						case TYPES:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNENCRYPTED:
						case UNKNOWN:
						case UNLISTEN:
						case UNLOGGED:
						case UNTIL:
						case UPDATE:
						case VACUUM:
						case VALID:
						case VALIDATE:
						case VALIDATOR:
						case VALUE:
						case VARYING:
						case VERSION:
						case VIEW:
						case VIEWS:
						case VOLATILE:
						case WHITESPACE:
						case WITHIN:
						case WITHOUT:
						case WORK:
						case WRAPPER:
						case WRITE:
						case XML:
						case YEAR:
						case YES:
						case ZONE:
						case BETWEEN:
						case BIGINT:
						case BIT:
						case BOOLEAN:
						case CHAR:
						case CHARACTER:
						case COALESCE:
						case DEC:
						case DECIMAL:
						case EXISTS:
						case EXTRACT:
						case FLOAT:
						case GREATEST:
						case GROUPING:
						case INOUT:
						case INT:
						case INTEGER:
						case INTERVAL:
						case LEAST:
						case NATIONAL:
						case NCHAR:
						case NONE:
						case NULLIF:
						case NUMERIC:
						case OUT:
						case OVERLAY:
						case POSITION:
						case PRECISION:
						case REAL:
						case ROW:
						case SETOF:
						case SMALLINT:
						case SUBSTRING:
						case TIME:
						case TIMESTAMP:
						case TREAT:
						case TRIM:
						case VALUES:
						case VARCHAR:
						case XMLATTRIBUTES:
						case XMLCONCAT:
						case XMLELEMENT:
						case XMLEXISTS:
						case XMLFOREST:
						case XMLNAMESPACES:
						case XMLPARSE:
						case XMLPI:
						case XMLROOT:
						case XMLSERIALIZE:
						case XMLTABLE:
						case ALIGNMENT:
						case BASETYPE:
						case BUFFERS:
						case BYPASSRLS:
						case CANONICAL:
						case CATEGORY:
						case COLLATABLE:
						case COMBINEFUNC:
						case COMMUTATOR:
						case CONNECT:
						case COSTS:
						case CREATEDB:
						case CREATEROLE:
						case DESERIALFUNC:
						case DETERMINISTIC:
						case DISABLE_PAGE_SKIPPING:
						case ELEMENT:
						case EXTENDED:
						case FINALFUNC:
						case FINALFUNC_EXTRA:
						case FINALFUNC_MODIFY:
						case FORCE_NOT_NULL:
						case FORCE_NULL:
						case FORCE_QUOTE:
						case FORMAT:
						case GETTOKEN:
						case HASH:
						case HASHES:
						case HEADLINE:
						case HYPOTHETICAL:
						case INDEX_CLEANUP:
						case INIT:
						case INITCOND:
						case INTERNALLENGTH:
						case JSON:
						case LC_COLLATE:
						case LC_CTYPE:
						case LEFTARG:
						case LEXIZE:
						case LEXTYPES:
						case LIST:
						case LOCALE:
						case LOGIN:
						case MAIN:
						case MERGES:
						case MFINALFUNC:
						case MFINALFUNC_EXTRA:
						case MFINALFUNC_MODIFY:
						case MINITCOND:
						case MINVFUNC:
						case MODULUS:
						case MSFUNC:
						case MSSPACE:
						case MSTYPE:
						case NEGATOR:
						case NOBYPASSRLS:
						case NOCREATEDB:
						case NOCREATEROLE:
						case NOINHERIT:
						case NOLOGIN:
						case NOREPLICATION:
						case NOSUPERUSER:
						case OUTPUT:
						case PASSEDBYVALUE:
						case PATH:
						case PERMISSIVE:
						case PLAIN:
						case PREFERRED:
						case PROVIDER:
						case READ_ONLY:
						case READ_WRITE:
						case RECEIVE:
						case REMAINDER:
						case REPLICATION:
						case RESTRICTED:
						case RESTRICTIVE:
						case RIGHTARG:
						case SAFE:
						case SEND:
						case SERIALFUNC:
						case SETTINGS:
						case SFUNC:
						case SHAREABLE:
						case SKIP_LOCKED:
						case SORTOP:
						case SSPACE:
						case STYPE:
						case SUBTYPE_DIFF:
						case SUBTYPE_OPCLASS:
						case SUBTYPE:
						case SUMMARY:
						case SUPERUSER:
						case TIMING:
						case TYPMOD_IN:
						case TYPMOD_OUT:
						case UNSAFE:
						case USAGE:
						case VARIABLE:
						case YAML:
						case ALIAS:
						case ASSERT:
						case CONSTANT:
						case DATATYPE:
						case DEBUG:
						case DETAIL:
						case DIAGNOSTICS:
						case ELSEIF:
						case ELSIF:
						case ERRCODE:
						case EXIT:
						case EXCEPTION:
						case FOREACH:
						case GET:
						case HINT:
						case INFO:
						case LOG:
						case LOOP:
						case MESSAGE:
						case NOTICE:
						case OPEN:
						case PERFORM:
						case QUERY:
						case RAISE:
						case RECORD:
						case RETURN:
						case REVERSE:
						case ROWTYPE:
						case SLICE:
						case SQLSTATE:
						case STACKED:
						case WARNING:
						case WHILE:
						case Identifier:
						case QuotedIdentifier:
							{
							setState(1425);
							_errHandler.sync(this);
							switch ( getInterpreter().adaptivePredict(_input,104,_ctx) ) {
							case 1:
								{
								setState(1422);
								identifier();
								setState(1423);
								match(DOT);
								}
								break;
							}
							setState(1427);
							identifier();
							}
							break;
						case ALL:
							{
							setState(1428);
							match(ALL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(1433); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CALLED || _la==COST || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (EXTERNAL - 85)) | (1L << (IMMUTABLE - 85)) | (1L << (LANGUAGE - 85)) | (1L << (LEAKPROOF - 85)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (PARALLEL - 169)) | (1L << (RESET - 169)) | (1L << (RETURNS - 169)) | (1L << (ROWS - 169)) | (1L << (SECURITY - 169)) | (1L << (SET - 169)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (STABLE - 236)) | (1L << (STRICT - 236)) | (1L << (SUPPORT - 236)) | (1L << (TRANSFORM - 236)) | (1L << (VOLATILE - 236)))) != 0) || _la==AS || _la==NOT || _la==WINDOW );
				setState(1436);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RESTRICT) {
					{
					setState(1435);
					match(RESTRICT);
					}
				}

				}
				break;
			case 2:
				{
				setState(1438);
				renameTo();
				}
				break;
			case 3:
				{
				setState(1439);
				setSchema();
				}
				break;
			case 4:
				{
				setState(1440);
				match(DEPENDS);
				setState(1441);
				match(ON);
				setState(1442);
				match(EXTENSION);
				setState(1443);
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterAggregateStatementContext extends ParserRuleContext {
		public TerminalNode AGGREGATE() { return getToken(SQLParser.AGGREGATE, 0); }
		public FunctionParametersContext functionParameters() {
			return getRuleContext(FunctionParametersContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public AlterAggregateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterAggregateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterAggregateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterAggregateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterAggregateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterAggregateStatementContext alterAggregateStatement() throws RecognitionException {
		AlterAggregateStatementContext _localctx = new AlterAggregateStatementContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_alterAggregateStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1446);
			match(AGGREGATE);
			setState(1447);
			functionParameters();
			setState(1450);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(1448);
				renameTo();
				}
				break;
			case SET:
				{
				setState(1449);
				setSchema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionStatementContext extends ParserRuleContext {
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterExtensionActionContext alterExtensionAction() {
			return getRuleContext(AlterExtensionActionContext.class,0);
		}
		public AlterExtensionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterExtensionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterExtensionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterExtensionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionStatementContext alterExtensionStatement() throws RecognitionException {
		AlterExtensionStatementContext _localctx = new AlterExtensionStatementContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_alterExtensionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1452);
			match(EXTENSION);
			setState(1453);
			identifier();
			setState(1454);
			alterExtensionAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterExtensionActionContext extends ParserRuleContext {
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CharacterStringContext characterString() {
			return getRuleContext(CharacterStringContext.class,0);
		}
		public ExtensionMemberObjectContext extensionMemberObject() {
			return getRuleContext(ExtensionMemberObjectContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public AlterExtensionActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterExtensionAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterExtensionAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterExtensionAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterExtensionAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterExtensionActionContext alterExtensionAction() throws RecognitionException {
		AlterExtensionActionContext _localctx = new AlterExtensionActionContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_alterExtensionAction);
		int _la;
		try {
			setState(1467);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1456);
				setSchema();
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1457);
				match(UPDATE);
				setState(1463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(1458);
					match(TO);
					setState(1461);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ABORT:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATTACH:
					case ATTRIBUTE:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BY:
					case CACHE:
					case CALL:
					case CALLED:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CHAIN:
					case CHARACTERISTICS:
					case CHECKPOINT:
					case CLASS:
					case CLOSE:
					case CLUSTER:
					case COLUMNS:
					case COMMENT:
					case COMMENTS:
					case COMMIT:
					case COMMITTED:
					case CONFIGURATION:
					case CONFLICT:
					case CONNECTION:
					case CONSTRAINTS:
					case CONTENT:
					case CONTINUE:
					case CONVERSION:
					case COPY:
					case COST:
					case CSV:
					case CUBE:
					case CURRENT:
					case CURSOR:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DEALLOCATE:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DEPENDS:
					case DETACH:
					case DICTIONARY:
					case DISABLE:
					case DISCARD:
					case DOCUMENT:
					case DOMAIN:
					case DOUBLE:
					case DROP:
					case EACH:
					case ENABLE:
					case ENCODING:
					case ENCRYPTED:
					case ENUM:
					case ESCAPE:
					case EVENT:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXECUTE:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORWARD:
					case FUNCTION:
					case FUNCTIONS:
					case GENERATED:
					case GLOBAL:
					case GRANTED:
					case GROUPS:
					case HANDLER:
					case HEADER:
					case HOLD:
					case HOUR:
					case IDENTITY:
					case IF:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLICIT:
					case IMPORT:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDEXES:
					case INHERIT:
					case INHERITS:
					case INLINE:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTEAD:
					case INVOKER:
					case ISOLATION:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAKPROOF:
					case LEVEL:
					case LISTEN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCKED:
					case LOGGED:
					case MAPPING:
					case MATCH:
					case MATERIALIZED:
					case MAXVALUE:
					case METHOD:
					case MINUTE:
					case MINVALUE:
					case MODE:
					case MONTH:
					case MOVE:
					case NAME:
					case NAMES:
					case NEW:
					case NEXT:
					case NO:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLS:
					case OBJECT:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDINALITY:
					case OTHERS:
					case OVER:
					case OVERRIDING:
					case OWNED:
					case OWNER:
					case PARALLEL:
					case PARSER:
					case PARTIAL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PLANS:
					case POLICY:
					case PRECEDING:
					case PREPARE:
					case PREPARED:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PROCEDURES:
					case PROGRAM:
					case PUBLICATION:
					case QUOTE:
					case RANGE:
					case READ:
					case REASSIGN:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case REPLICA:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RETURNS:
					case REVOKE:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINES:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMAS:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECURITY:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER:
					case SESSION:
					case SET:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SKIP_:
					case SNAPSHOT:
					case SQL:
					case STABLE:
					case STANDALONE:
					case START:
					case STATEMENT:
					case STATISTICS:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STORED:
					case STRICT:
					case STRIP:
					case SUBSCRIPTION:
					case SUPPORT:
					case SYSID:
					case SYSTEM:
					case TABLES:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TEXT:
					case TIES:
					case TRANSACTION:
					case TRANSFORM:
					case TRIGGER:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case TYPES:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNLOGGED:
					case UNTIL:
					case UPDATE:
					case VACUUM:
					case VALID:
					case VALIDATE:
					case VALIDATOR:
					case VALUE:
					case VARYING:
					case VERSION:
					case VIEW:
					case VIEWS:
					case VOLATILE:
					case WHITESPACE:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRAPPER:
					case WRITE:
					case XML:
					case YEAR:
					case YES:
					case ZONE:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BOOLEAN:
					case CHAR:
					case CHARACTER:
					case COALESCE:
					case DEC:
					case DECIMAL:
					case EXISTS:
					case EXTRACT:
					case FLOAT:
					case GREATEST:
					case GROUPING:
					case INOUT:
					case INT:
					case INTEGER:
					case INTERVAL:
					case LEAST:
					case NATIONAL:
					case NCHAR:
					case NONE:
					case NULLIF:
					case NUMERIC:
					case OUT:
					case OVERLAY:
					case POSITION:
					case PRECISION:
					case REAL:
					case ROW:
					case SETOF:
					case SMALLINT:
					case SUBSTRING:
					case TIME:
					case TIMESTAMP:
					case TREAT:
					case TRIM:
					case VALUES:
					case VARCHAR:
					case XMLATTRIBUTES:
					case XMLCONCAT:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case ALIGNMENT:
					case BASETYPE:
					case BUFFERS:
					case BYPASSRLS:
					case CANONICAL:
					case CATEGORY:
					case COLLATABLE:
					case COMBINEFUNC:
					case COMMUTATOR:
					case CONNECT:
					case COSTS:
					case CREATEDB:
					case CREATEROLE:
					case DESERIALFUNC:
					case DETERMINISTIC:
					case DISABLE_PAGE_SKIPPING:
					case ELEMENT:
					case EXTENDED:
					case FINALFUNC:
					case FINALFUNC_EXTRA:
					case FINALFUNC_MODIFY:
					case FORCE_NOT_NULL:
					case FORCE_NULL:
					case FORCE_QUOTE:
					case FORMAT:
					case GETTOKEN:
					case HASH:
					case HASHES:
					case HEADLINE:
					case HYPOTHETICAL:
					case INDEX_CLEANUP:
					case INIT:
					case INITCOND:
					case INTERNALLENGTH:
					case JSON:
					case LC_COLLATE:
					case LC_CTYPE:
					case LEFTARG:
					case LEXIZE:
					case LEXTYPES:
					case LIST:
					case LOCALE:
					case LOGIN:
					case MAIN:
					case MERGES:
					case MFINALFUNC:
					case MFINALFUNC_EXTRA:
					case MFINALFUNC_MODIFY:
					case MINITCOND:
					case MINVFUNC:
					case MODULUS:
					case MSFUNC:
					case MSSPACE:
					case MSTYPE:
					case NEGATOR:
					case NOBYPASSRLS:
					case NOCREATEDB:
					case NOCREATEROLE:
					case NOINHERIT:
					case NOLOGIN:
					case NOREPLICATION:
					case NOSUPERUSER:
					case OUTPUT:
					case PASSEDBYVALUE:
					case PATH:
					case PERMISSIVE:
					case PLAIN:
					case PREFERRED:
					case PROVIDER:
					case READ_ONLY:
					case READ_WRITE:
					case RECEIVE:
					case REMAINDER:
					case REPLICATION:
					case RESTRICTED:
					case RESTRICTIVE:
					case RIGHTARG:
					case SAFE:
					case SEND:
					case SERIALFUNC:
					case SETTINGS:
					case SFUNC:
					case SHAREABLE:
					case SKIP_LOCKED:
					case SORTOP:
					case SSPACE:
					case STYPE:
					case SUBTYPE_DIFF:
					case SUBTYPE_OPCLASS:
					case SUBTYPE:
					case SUMMARY:
					case SUPERUSER:
					case TIMING:
					case TYPMOD_IN:
					case TYPMOD_OUT:
					case UNSAFE:
					case USAGE:
					case VARIABLE:
					case YAML:
					case ALIAS:
					case ASSERT:
					case CONSTANT:
					case DATATYPE:
					case DEBUG:
					case DETAIL:
					case DIAGNOSTICS:
					case ELSEIF:
					case ELSIF:
					case ERRCODE:
					case EXIT:
					case EXCEPTION:
					case FOREACH:
					case GET:
					case HINT:
					case INFO:
					case LOG:
					case LOOP:
					case MESSAGE:
					case NOTICE:
					case OPEN:
					case PERFORM:
					case QUERY:
					case RAISE:
					case RECORD:
					case RETURN:
					case REVERSE:
					case ROWTYPE:
					case SLICE:
					case SQLSTATE:
					case STACKED:
					case WARNING:
					case WHILE:
					case Identifier:
					case QuotedIdentifier:
						{
						setState(1459);
						identifier();
						}
						break;
					case Character_String_Literal:
					case BeginDollarStringConstant:
						{
						setState(1460);
						characterString();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
				break;
			case ADD:
			case DROP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1465);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1466);
				extensionMemberObject();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtensionMemberObjectContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(SQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(SQLParser.METHOD, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public TerminalNode AGGREGATE() { return getToken(SQLParser.AGGREGATE, 0); }
		public FunctionParametersContext functionParameters() {
			return getRuleContext(FunctionParametersContext.class,0);
		}
		public TerminalNode CAST() { return getToken(SQLParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode COLLATION() { return getToken(SQLParser.COLLATION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode CONVERSION() { return getToken(SQLParser.CONVERSION, 0); }
		public TerminalNode DOMAIN() { return getToken(SQLParser.DOMAIN, 0); }
		public TerminalNode EVENT() { return getToken(SQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SQLParser.MATERIALIZED, 0); }
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public OperatorNameContext operatorName() {
			return getRuleContext(OperatorNameContext.class,0);
		}
		public TerminalNode CLASS() { return getToken(SQLParser.CLASS, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(SQLParser.FAMILY, 0); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(SQLParser.ROUTINE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SQLParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(SQLParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(SQLParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(SQLParser.TEMPLATE, 0); }
		public TerminalNode TRANSFORM() { return getToken(SQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public ExtensionMemberObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extensionMemberObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExtensionMemberObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExtensionMemberObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitExtensionMemberObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtensionMemberObjectContext extensionMemberObject() throws RecognitionException {
		ExtensionMemberObjectContext _localctx = new ExtensionMemberObjectContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_extensionMemberObject);
		int _la;
		try {
			setState(1559);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,116,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1469);
				match(ACCESS);
				setState(1470);
				match(METHOD);
				setState(1471);
				schemaQualifiedName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1472);
				match(AGGREGATE);
				setState(1473);
				functionParameters();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1474);
				match(CAST);
				setState(1475);
				match(LEFT_PAREN);
				setState(1476);
				schemaQualifiedName();
				setState(1477);
				match(AS);
				setState(1478);
				schemaQualifiedName();
				setState(1479);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1481);
				match(COLLATION);
				setState(1482);
				identifier();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1483);
				match(CONVERSION);
				setState(1484);
				identifier();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1485);
				match(DOMAIN);
				setState(1486);
				schemaQualifiedName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1487);
				match(EVENT);
				setState(1488);
				match(TRIGGER);
				setState(1489);
				identifier();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1490);
				match(FOREIGN);
				setState(1491);
				match(DATA);
				setState(1492);
				match(WRAPPER);
				setState(1493);
				identifier();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1494);
				match(FOREIGN);
				setState(1495);
				match(TABLE);
				setState(1496);
				schemaQualifiedName();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1497);
				match(FUNCTION);
				setState(1498);
				functionParameters();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(1499);
					match(MATERIALIZED);
					}
				}

				setState(1502);
				match(VIEW);
				setState(1503);
				schemaQualifiedName();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1504);
				match(OPERATOR);
				setState(1505);
				operatorName();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1506);
				match(OPERATOR);
				setState(1507);
				match(CLASS);
				setState(1508);
				schemaQualifiedName();
				setState(1509);
				match(USING);
				setState(1510);
				identifier();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1512);
				match(OPERATOR);
				setState(1513);
				match(FAMILY);
				setState(1514);
				schemaQualifiedName();
				setState(1515);
				match(USING);
				setState(1516);
				identifier();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1519);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(1518);
					match(PROCEDURAL);
					}
				}

				setState(1521);
				match(LANGUAGE);
				setState(1522);
				identifier();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1523);
				match(PROCEDURE);
				setState(1524);
				functionParameters();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1525);
				match(ROUTINE);
				setState(1526);
				functionParameters();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1527);
				match(SCHEMA);
				setState(1528);
				identifier();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1529);
				match(SEQUENCE);
				setState(1530);
				schemaQualifiedName();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1531);
				match(SERVER);
				setState(1532);
				identifier();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1533);
				match(TABLE);
				setState(1534);
				schemaQualifiedName();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1535);
				match(TEXT);
				setState(1536);
				match(SEARCH);
				setState(1537);
				match(CONFIGURATION);
				setState(1538);
				schemaQualifiedName();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1539);
				match(TEXT);
				setState(1540);
				match(SEARCH);
				setState(1541);
				match(DICTIONARY);
				setState(1542);
				schemaQualifiedName();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1543);
				match(TEXT);
				setState(1544);
				match(SEARCH);
				setState(1545);
				match(PARSER);
				setState(1546);
				schemaQualifiedName();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1547);
				match(TEXT);
				setState(1548);
				match(SEARCH);
				setState(1549);
				match(TEMPLATE);
				setState(1550);
				schemaQualifiedName();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1551);
				match(TRANSFORM);
				setState(1552);
				match(FOR);
				setState(1553);
				identifier();
				setState(1554);
				match(LANGUAGE);
				setState(1555);
				identifier();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1557);
				match(TYPE);
				setState(1558);
				schemaQualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSchemaStatementContext extends ParserRuleContext {
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public AlterSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSchemaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterSchemaStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterSchemaStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterSchemaStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSchemaStatementContext alterSchemaStatement() throws RecognitionException {
		AlterSchemaStatementContext _localctx = new AlterSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_alterSchemaStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1561);
			match(SCHEMA);
			setState(1562);
			identifier();
			setState(1563);
			renameTo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterLanguageStatementContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public AlterLanguageStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterLanguageStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterLanguageStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterLanguageStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterLanguageStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterLanguageStatementContext alterLanguageStatement() throws RecognitionException {
		AlterLanguageStatementContext _localctx = new AlterLanguageStatementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_alterLanguageStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1566);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(1565);
				match(PROCEDURAL);
				}
			}

			setState(1568);
			match(LANGUAGE);
			setState(1569);
			((AlterLanguageStatementContext)_localctx).name = identifier();
			setState(1572);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(1570);
				renameTo();
				}
				break;
			case OWNER:
				{
				setState(1571);
				ownerTo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTableStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public SchemaQualifiedNameContext child;
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public List<TableActionContext> tableAction() {
			return getRuleContexts(TableActionContext.class);
		}
		public TableActionContext tableAction(int i) {
			return getRuleContext(TableActionContext.class,i);
		}
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode ATTACH() { return getToken(SQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public ForValuesBoundContext forValuesBound() {
			return getRuleContext(ForValuesBoundContext.class,0);
		}
		public TerminalNode DETACH() { return getToken(SQLParser.DETACH, 0); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public AlterTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTableStatementContext alterTableStatement() throws RecognitionException {
		AlterTableStatementContext _localctx = new AlterTableStatementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_alterTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1575);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOREIGN) {
				{
				setState(1574);
				match(FOREIGN);
				}
			}

			setState(1577);
			match(TABLE);
			setState(1579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,120,_ctx) ) {
			case 1:
				{
				setState(1578);
				ifExists();
				}
				break;
			}
			setState(1582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(1581);
				match(ONLY);
				}
			}

			setState(1584);
			((AlterTableStatementContext)_localctx).name = schemaQualifiedName();
			setState(1586);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLY) {
				{
				setState(1585);
				match(MULTIPLY);
				}
			}

			setState(1620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,125,_ctx) ) {
			case 1:
				{
				setState(1588);
				tableAction();
				setState(1593);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1589);
					match(COMMA);
					setState(1590);
					tableAction();
					}
					}
					setState(1595);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(1596);
				match(RENAME);
				setState(1598);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1597);
					match(COLUMN);
					}
				}

				setState(1600);
				identifier();
				setState(1601);
				match(TO);
				setState(1602);
				identifier();
				}
				break;
			case 3:
				{
				setState(1604);
				setSchema();
				}
				break;
			case 4:
				{
				setState(1605);
				renameTo();
				}
				break;
			case 5:
				{
				setState(1606);
				match(RENAME);
				setState(1607);
				match(CONSTRAINT);
				setState(1608);
				identifier();
				setState(1609);
				match(TO);
				setState(1610);
				identifier();
				}
				break;
			case 6:
				{
				setState(1612);
				match(ATTACH);
				setState(1613);
				match(PARTITION);
				setState(1614);
				((AlterTableStatementContext)_localctx).child = schemaQualifiedName();
				setState(1615);
				forValuesBound();
				}
				break;
			case 7:
				{
				setState(1617);
				match(DETACH);
				setState(1618);
				match(PARTITION);
				setState(1619);
				((AlterTableStatementContext)_localctx).child = schemaQualifiedName();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableActionContext extends ParserRuleContext {
		public IdentifierContext column;
		public ConstraintCommonContext tablConstraint;
		public Token notValid;
		public SchemaQualifiedNameContext triggerName;
		public SchemaQualifiedNameContext rewriteRuleName;
		public SchemaQualifiedNameContext indexName;
		public SchemaQualifiedNameContext parentTable;
		public SchemaQualifiedNameContext typeName;
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public TableColumnDefinitionContext tableColumnDefinition() {
			return getRuleContext(TableColumnDefinitionContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public ColumnActionContext columnAction() {
			return getRuleContext(ColumnActionContext.class,0);
		}
		public ConstraintCommonContext constraintCommon() {
			return getRuleContext(ConstraintCommonContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode VALID() { return getToken(SQLParser.VALID, 0); }
		public ValidateConstraintContext validateConstraint() {
			return getRuleContext(ValidateConstraintContext.class,0);
		}
		public DropConstraintContext dropConstraint() {
			return getRuleContext(DropConstraintContext.class,0);
		}
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode DISABLE() { return getToken(SQLParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(SQLParser.ENABLE, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode REPLICA() { return getToken(SQLParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(SQLParser.ALWAYS, 0); }
		public TerminalNode RULE() { return getToken(SQLParser.RULE, 0); }
		public TerminalNode ROW() { return getToken(SQLParser.ROW, 0); }
		public TerminalNode LEVEL() { return getToken(SQLParser.LEVEL, 0); }
		public TerminalNode SECURITY() { return getToken(SQLParser.SECURITY, 0); }
		public TerminalNode FORCE() { return getToken(SQLParser.FORCE, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode CLUSTER() { return getToken(SQLParser.CLUSTER, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public TerminalNode OIDS() { return getToken(SQLParser.OIDS, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode LOGGED() { return getToken(SQLParser.LOGGED, 0); }
		public TerminalNode UNLOGGED() { return getToken(SQLParser.UNLOGGED, 0); }
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public NamesInParensContext namesInParens() {
			return getRuleContext(NamesInParensContext.class,0);
		}
		public DefineForeignOptionsContext defineForeignOptions() {
			return getRuleContext(DefineForeignOptionsContext.class,0);
		}
		public TerminalNode INHERIT() { return getToken(SQLParser.INHERIT, 0); }
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public TerminalNode IDENTITY() { return getToken(SQLParser.IDENTITY, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode FULL() { return getToken(SQLParser.FULL, 0); }
		public TerminalNode NOTHING() { return getToken(SQLParser.NOTHING, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TableDeferrableContext tableDeferrable() {
			return getRuleContext(TableDeferrableContext.class,0);
		}
		public TableInitialyImmedContext tableInitialyImmed() {
			return getRuleContext(TableInitialyImmedContext.class,0);
		}
		public TableActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableActionContext tableAction() throws RecognitionException {
		TableActionContext _localctx = new TableActionContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_tableAction);
		int _la;
		try {
			setState(1732);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,138,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1622);
				match(ADD);
				setState(1624);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1623);
					match(COLUMN);
					}
				}

				setState(1627);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,127,_ctx) ) {
				case 1:
					{
					setState(1626);
					ifNotExists();
					}
					break;
				}
				setState(1629);
				tableColumnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1630);
				match(DROP);
				setState(1632);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1631);
					match(COLUMN);
					}
				}

				setState(1635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,129,_ctx) ) {
				case 1:
					{
					setState(1634);
					ifExists();
					}
					break;
				}
				setState(1637);
				((TableActionContext)_localctx).column = identifier();
				setState(1639);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(1638);
					cascadeRestrict();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1641);
				match(ALTER);
				setState(1643);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1642);
					match(COLUMN);
					}
				}

				setState(1645);
				((TableActionContext)_localctx).column = identifier();
				setState(1646);
				columnAction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1648);
				match(ADD);
				setState(1649);
				((TableActionContext)_localctx).tablConstraint = constraintCommon();
				setState(1652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1650);
					match(NOT);
					setState(1651);
					((TableActionContext)_localctx).notValid = match(VALID);
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1654);
				validateConstraint();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1655);
				dropConstraint();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1656);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1657);
				match(TRIGGER);
				setState(1661);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(1658);
					((TableActionContext)_localctx).triggerName = schemaQualifiedName();
					}
					break;
				case ALL:
					{
					setState(1659);
					match(ALL);
					}
					break;
				case USER:
					{
					setState(1660);
					match(USER);
					}
					break;
				case EOF:
				case SEMI_COLON:
				case COMMA:
					break;
				default:
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1663);
				match(ENABLE);
				setState(1664);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1665);
				match(TRIGGER);
				setState(1666);
				((TableActionContext)_localctx).triggerName = schemaQualifiedName();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1667);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1668);
				match(RULE);
				setState(1669);
				((TableActionContext)_localctx).rewriteRuleName = schemaQualifiedName();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1670);
				match(ENABLE);
				setState(1671);
				_la = _input.LA(1);
				if ( !(_la==ALWAYS || _la==REPLICA) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1672);
				match(RULE);
				setState(1673);
				((TableActionContext)_localctx).rewriteRuleName = schemaQualifiedName();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1674);
				_la = _input.LA(1);
				if ( !(_la==DISABLE || _la==ENABLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1675);
				match(ROW);
				setState(1676);
				match(LEVEL);
				setState(1677);
				match(SECURITY);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1679);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(1678);
					match(NO);
					}
				}

				setState(1681);
				match(FORCE);
				setState(1682);
				match(ROW);
				setState(1683);
				match(LEVEL);
				setState(1684);
				match(SECURITY);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(1685);
				match(CLUSTER);
				setState(1686);
				match(ON);
				setState(1687);
				((TableActionContext)_localctx).indexName = schemaQualifiedName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(1688);
				match(SET);
				setState(1689);
				match(WITHOUT);
				setState(1690);
				_la = _input.LA(1);
				if ( !(_la==CLUSTER || _la==OIDS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(1691);
				match(SET);
				setState(1692);
				match(WITH);
				setState(1693);
				match(OIDS);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(1694);
				match(SET);
				setState(1695);
				_la = _input.LA(1);
				if ( !(_la==LOGGED || _la==UNLOGGED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(1696);
				match(SET);
				setState(1697);
				storageParameter();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(1698);
				match(RESET);
				setState(1699);
				namesInParens();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(1700);
				defineForeignOptions();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(1701);
				match(INHERIT);
				setState(1702);
				((TableActionContext)_localctx).parentTable = schemaQualifiedName();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(1703);
				match(NO);
				setState(1704);
				match(INHERIT);
				setState(1705);
				((TableActionContext)_localctx).parentTable = schemaQualifiedName();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(1706);
				match(OF);
				setState(1707);
				((TableActionContext)_localctx).typeName = schemaQualifiedName();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(1708);
				match(NOT);
				setState(1709);
				match(OF);
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(1710);
				ownerTo();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(1711);
				match(SET);
				setState(1712);
				tableSpace();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(1713);
				match(REPLICA);
				setState(1714);
				match(IDENTITY);
				setState(1721);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DEFAULT:
					{
					setState(1715);
					match(DEFAULT);
					}
					break;
				case FULL:
					{
					setState(1716);
					match(FULL);
					}
					break;
				case NOTHING:
					{
					setState(1717);
					match(NOTHING);
					}
					break;
				case USING:
					{
					setState(1718);
					match(USING);
					setState(1719);
					match(INDEX);
					setState(1720);
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(1723);
				match(ALTER);
				setState(1724);
				match(CONSTRAINT);
				setState(1725);
				identifier();
				setState(1727);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFERRABLE || _la==NOT) {
					{
					setState(1726);
					tableDeferrable();
					}
				}

				setState(1730);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INITIALLY) {
					{
					setState(1729);
					tableInitialyImmed();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnActionContext extends ParserRuleContext {
		public Token set;
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public CollateIdentifierContext collateIdentifier() {
			return getRuleContext(CollateIdentifierContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public IdentityBodyContext identityBody() {
			return getRuleContext(IdentityBodyContext.class,0);
		}
		public SetDefColumnContext setDefColumn() {
			return getRuleContext(SetDefColumnContext.class,0);
		}
		public DropDefContext dropDef() {
			return getRuleContext(DropDefContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public TerminalNode IDENTITY() { return getToken(SQLParser.IDENTITY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public TerminalNode STATISTICS() { return getToken(SQLParser.STATISTICS, 0); }
		public SignedNumberLiteralContext signedNumberLiteral() {
			return getRuleContext(SignedNumberLiteralContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(SQLParser.STORAGE, 0); }
		public StorageOptionContext storageOption() {
			return getRuleContext(StorageOptionContext.class,0);
		}
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public NamesInParensContext namesInParens() {
			return getRuleContext(NamesInParensContext.class,0);
		}
		public DefineForeignOptionsContext defineForeignOptions() {
			return getRuleContext(DefineForeignOptionsContext.class,0);
		}
		public List<AlterIdentityContext> alterIdentity() {
			return getRuleContexts(AlterIdentityContext.class);
		}
		public AlterIdentityContext alterIdentity(int i) {
			return getRuleContext(AlterIdentityContext.class,i);
		}
		public ColumnActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumnAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumnAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitColumnAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnActionContext columnAction() throws RecognitionException {
		ColumnActionContext _localctx = new ColumnActionContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_columnAction);
		int _la;
		try {
			setState(1778);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1736);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(1734);
					match(SET);
					setState(1735);
					match(DATA);
					}
				}

				setState(1738);
				match(TYPE);
				setState(1739);
				dataType();
				setState(1741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(1740);
					collateIdentifier();
					}
				}

				setState(1745);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(1743);
					match(USING);
					setState(1744);
					vex(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1747);
				match(ADD);
				setState(1748);
				identityBody();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1749);
				setDefColumn();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1750);
				dropDef();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1753);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(1751);
					((ColumnActionContext)_localctx).set = match(SET);
					}
					break;
				case DROP:
					{
					setState(1752);
					match(DROP);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1755);
				match(NOT);
				setState(1756);
				match(NULL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1757);
				match(DROP);
				setState(1758);
				match(IDENTITY);
				setState(1760);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(1759);
					ifExists();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1762);
				match(SET);
				setState(1763);
				storageParameter();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1764);
				match(SET);
				setState(1765);
				match(STATISTICS);
				setState(1766);
				signedNumberLiteral();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(1767);
				match(SET);
				setState(1768);
				match(STORAGE);
				setState(1769);
				storageOption();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(1770);
				match(RESET);
				setState(1771);
				namesInParens();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(1772);
				defineForeignOptions();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(1774); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1773);
					alterIdentity();
					}
					}
					setState(1776); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==RESTART || _la==SET );
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentityBodyContext extends ParserRuleContext {
		public TerminalNode GENERATED() { return getToken(SQLParser.GENERATED, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode IDENTITY() { return getToken(SQLParser.IDENTITY, 0); }
		public TerminalNode ALWAYS() { return getToken(SQLParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<SequenceBodyContext> sequenceBody() {
			return getRuleContexts(SequenceBodyContext.class);
		}
		public SequenceBodyContext sequenceBody(int i) {
			return getRuleContext(SequenceBodyContext.class,i);
		}
		public IdentityBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identityBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIdentityBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIdentityBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIdentityBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentityBodyContext identityBody() throws RecognitionException {
		IdentityBodyContext _localctx = new IdentityBodyContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_identityBody);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1780);
			match(GENERATED);
			setState(1784);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALWAYS:
				{
				setState(1781);
				match(ALWAYS);
				}
				break;
			case BY:
				{
				setState(1782);
				match(BY);
				setState(1783);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1786);
			match(AS);
			setState(1787);
			match(IDENTITY);
			setState(1796);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1788);
				match(LEFT_PAREN);
				setState(1790); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(1789);
					sequenceBody();
					}
					}
					setState(1792); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CACHE || _la==CYCLE || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (INCREMENT - 110)) | (1L << (MAXVALUE - 110)) | (1L << (MINVALUE - 110)) | (1L << (NO - 110)) | (1L << (OWNED - 110)))) != 0) || _la==SEQUENCE || _la==START || _la==AS );
				setState(1794);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIdentityContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode GENERATED() { return getToken(SQLParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(SQLParser.ALWAYS, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public SequenceBodyContext sequenceBody() {
			return getRuleContext(SequenceBodyContext.class,0);
		}
		public TerminalNode RESTART() { return getToken(SQLParser.RESTART, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public AlterIdentityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIdentity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterIdentity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterIdentity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterIdentity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIdentityContext alterIdentity() throws RecognitionException {
		AlterIdentityContext _localctx = new AlterIdentityContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_alterIdentity);
		int _la;
		try {
			setState(1814);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,152,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1798);
				match(SET);
				setState(1799);
				match(GENERATED);
				setState(1803);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALWAYS:
					{
					setState(1800);
					match(ALWAYS);
					}
					break;
				case BY:
					{
					setState(1801);
					match(BY);
					setState(1802);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1805);
				match(SET);
				setState(1806);
				sequenceBody();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1807);
				match(RESTART);
				setState(1812);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==NUMBER_LITERAL) {
					{
					setState(1809);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==WITH) {
						{
						setState(1808);
						match(WITH);
						}
					}

					setState(1811);
					match(NUMBER_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageOptionContext extends ParserRuleContext {
		public TerminalNode PLAIN() { return getToken(SQLParser.PLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLParser.EXTERNAL, 0); }
		public TerminalNode EXTENDED() { return getToken(SQLParser.EXTENDED, 0); }
		public TerminalNode MAIN() { return getToken(SQLParser.MAIN, 0); }
		public StorageOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStorageOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStorageOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitStorageOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageOptionContext storageOption() throws RecognitionException {
		StorageOptionContext _localctx = new StorageOptionContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_storageOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1816);
			_la = _input.LA(1);
			if ( !(_la==EXTERNAL || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (EXTENDED - 460)) | (1L << (MAIN - 460)) | (1L << (PLAIN - 460)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValidateConstraintContext extends ParserRuleContext {
		public SchemaQualifiedNameContext constraintName;
		public TerminalNode VALIDATE() { return getToken(SQLParser.VALIDATE, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public ValidateConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_validateConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterValidateConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitValidateConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitValidateConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValidateConstraintContext validateConstraint() throws RecognitionException {
		ValidateConstraintContext _localctx = new ValidateConstraintContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_validateConstraint);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1818);
			match(VALIDATE);
			setState(1819);
			match(CONSTRAINT);
			setState(1820);
			((ValidateConstraintContext)_localctx).constraintName = schemaQualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropConstraintContext extends ParserRuleContext {
		public IdentifierContext constraintName;
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public DropConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropConstraintContext dropConstraint() throws RecognitionException {
		DropConstraintContext _localctx = new DropConstraintContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_dropConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1822);
			match(DROP);
			setState(1823);
			match(CONSTRAINT);
			setState(1825);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				setState(1824);
				ifExists();
				}
				break;
			}
			setState(1827);
			((DropConstraintContext)_localctx).constraintName = identifier();
			setState(1829);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(1828);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableDeferrableContext extends ParserRuleContext {
		public TerminalNode DEFERRABLE() { return getToken(SQLParser.DEFERRABLE, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TableDeferrableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableDeferrable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableDeferrable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableDeferrable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableDeferrable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableDeferrableContext tableDeferrable() throws RecognitionException {
		TableDeferrableContext _localctx = new TableDeferrableContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_tableDeferrable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1831);
				match(NOT);
				}
			}

			setState(1834);
			match(DEFERRABLE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableInitialyImmedContext extends ParserRuleContext {
		public TerminalNode INITIALLY() { return getToken(SQLParser.INITIALLY, 0); }
		public TerminalNode DEFERRED() { return getToken(SQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SQLParser.IMMEDIATE, 0); }
		public TableInitialyImmedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableInitialyImmed; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableInitialyImmed(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableInitialyImmed(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableInitialyImmed(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableInitialyImmedContext tableInitialyImmed() throws RecognitionException {
		TableInitialyImmedContext _localctx = new TableInitialyImmedContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_tableInitialyImmed);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1836);
			match(INITIALLY);
			setState(1837);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionActionsCommonContext extends ParserRuleContext {
		public UnsignedNumericLiteralContext executionCost;
		public UnsignedNumericLiteralContext resultRows;
		public IdentifierContext configScope;
		public IdentifierContext configParam;
		public IdentifierContext langName;
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public List<TerminalNode> NULL() { return getTokens(SQLParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(SQLParser.NULL, i);
		}
		public TerminalNode INPUT() { return getToken(SQLParser.INPUT, 0); }
		public TerminalNode CALLED() { return getToken(SQLParser.CALLED, 0); }
		public TerminalNode RETURNS() { return getToken(SQLParser.RETURNS, 0); }
		public TerminalNode TRANSFORM() { return getToken(SQLParser.TRANSFORM, 0); }
		public List<TransformForTypeContext> transformForType() {
			return getRuleContexts(TransformForTypeContext.class);
		}
		public TransformForTypeContext transformForType(int i) {
			return getRuleContext(TransformForTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode STRICT() { return getToken(SQLParser.STRICT, 0); }
		public TerminalNode IMMUTABLE() { return getToken(SQLParser.IMMUTABLE, 0); }
		public TerminalNode VOLATILE() { return getToken(SQLParser.VOLATILE, 0); }
		public TerminalNode STABLE() { return getToken(SQLParser.STABLE, 0); }
		public TerminalNode LEAKPROOF() { return getToken(SQLParser.LEAKPROOF, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode SECURITY() { return getToken(SQLParser.SECURITY, 0); }
		public TerminalNode INVOKER() { return getToken(SQLParser.INVOKER, 0); }
		public TerminalNode DEFINER() { return getToken(SQLParser.DEFINER, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLParser.EXTERNAL, 0); }
		public TerminalNode PARALLEL() { return getToken(SQLParser.PARALLEL, 0); }
		public TerminalNode SAFE() { return getToken(SQLParser.SAFE, 0); }
		public TerminalNode UNSAFE() { return getToken(SQLParser.UNSAFE, 0); }
		public TerminalNode RESTRICTED() { return getToken(SQLParser.RESTRICTED, 0); }
		public TerminalNode COST() { return getToken(SQLParser.COST, 0); }
		public UnsignedNumericLiteralContext unsignedNumericLiteral() {
			return getRuleContext(UnsignedNumericLiteralContext.class,0);
		}
		public TerminalNode ROWS() { return getToken(SQLParser.ROWS, 0); }
		public TerminalNode SUPPORT() { return getToken(SQLParser.SUPPORT, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public SetStatementValueContext setStatementValue() {
			return getRuleContext(SetStatementValueContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public TerminalNode WINDOW() { return getToken(SQLParser.WINDOW, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public FunctionDefContext functionDef() {
			return getRuleContext(FunctionDefContext.class,0);
		}
		public FunctionActionsCommonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionActionsCommon; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionActionsCommon(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionActionsCommon(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionActionsCommon(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionActionsCommonContext functionActionsCommon() throws RecognitionException {
		FunctionActionsCommonContext _localctx = new FunctionActionsCommonContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_functionActionsCommon);
		int _la;
		try {
			setState(1895);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALLED:
			case RETURNS:
				enterOuterAlt(_localctx, 1);
				{
				setState(1842);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CALLED:
					{
					setState(1839);
					match(CALLED);
					}
					break;
				case RETURNS:
					{
					setState(1840);
					match(RETURNS);
					setState(1841);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(1844);
				match(ON);
				setState(1845);
				match(NULL);
				setState(1846);
				match(INPUT);
				}
				break;
			case TRANSFORM:
				enterOuterAlt(_localctx, 2);
				{
				setState(1847);
				match(TRANSFORM);
				setState(1848);
				transformForType();
				setState(1853);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1849);
					match(COMMA);
					setState(1850);
					transformForType();
					}
					}
					setState(1855);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case STRICT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1856);
				match(STRICT);
				}
				break;
			case IMMUTABLE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1857);
				match(IMMUTABLE);
				}
				break;
			case VOLATILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1858);
				match(VOLATILE);
				}
				break;
			case STABLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1859);
				match(STABLE);
				}
				break;
			case LEAKPROOF:
			case NOT:
				enterOuterAlt(_localctx, 7);
				{
				setState(1861);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(1860);
					match(NOT);
					}
				}

				setState(1863);
				match(LEAKPROOF);
				}
				break;
			case EXTERNAL:
			case SECURITY:
				enterOuterAlt(_localctx, 8);
				{
				setState(1865);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1864);
					match(EXTERNAL);
					}
				}

				setState(1867);
				match(SECURITY);
				setState(1868);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case PARALLEL:
				enterOuterAlt(_localctx, 9);
				{
				setState(1869);
				match(PARALLEL);
				setState(1870);
				_la = _input.LA(1);
				if ( !(((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RESTRICTED - 517)) | (1L << (SAFE - 517)) | (1L << (UNSAFE - 517)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case COST:
				enterOuterAlt(_localctx, 10);
				{
				setState(1871);
				match(COST);
				setState(1872);
				((FunctionActionsCommonContext)_localctx).executionCost = unsignedNumericLiteral();
				}
				break;
			case ROWS:
				enterOuterAlt(_localctx, 11);
				{
				setState(1873);
				match(ROWS);
				setState(1874);
				((FunctionActionsCommonContext)_localctx).resultRows = unsignedNumericLiteral();
				}
				break;
			case SUPPORT:
				enterOuterAlt(_localctx, 12);
				{
				setState(1875);
				match(SUPPORT);
				setState(1876);
				schemaQualifiedName();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 13);
				{
				setState(1877);
				match(SET);
				setState(1881);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,160,_ctx) ) {
				case 1:
					{
					setState(1878);
					((FunctionActionsCommonContext)_localctx).configScope = identifier();
					setState(1879);
					match(DOT);
					}
					break;
				}
				setState(1883);
				((FunctionActionsCommonContext)_localctx).configParam = identifier();
				setState(1888);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case TO:
				case EQUAL:
					{
					setState(1884);
					_la = _input.LA(1);
					if ( !(_la==TO || _la==EQUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1885);
					setStatementValue();
					}
					break;
				case FROM:
					{
					setState(1886);
					match(FROM);
					setState(1887);
					match(CURRENT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LANGUAGE:
				enterOuterAlt(_localctx, 14);
				{
				setState(1890);
				match(LANGUAGE);
				setState(1891);
				((FunctionActionsCommonContext)_localctx).langName = identifier();
				}
				break;
			case WINDOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(1892);
				match(WINDOW);
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 16);
				{
				setState(1893);
				match(AS);
				setState(1894);
				functionDef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionDefContext extends ParserRuleContext {
		public CharacterStringContext definition;
		public CharacterStringContext symbol;
		public List<CharacterStringContext> characterString() {
			return getRuleContexts(CharacterStringContext.class);
		}
		public CharacterStringContext characterString(int i) {
			return getRuleContext(CharacterStringContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public FunctionDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionDefContext functionDef() throws RecognitionException {
		FunctionDefContext _localctx = new FunctionDefContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_functionDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1897);
			((FunctionDefContext)_localctx).definition = characterString();
			setState(1900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1898);
				match(COMMA);
				setState(1899);
				((FunctionDefContext)_localctx).symbol = characterString();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterIndexStatementContext extends ParserRuleContext {
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public IndexDefActionContext indexDefAction() {
			return getRuleContext(IndexDefActionContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public List<TerminalNode> TABLESPACE() { return getTokens(SQLParser.TABLESPACE); }
		public TerminalNode TABLESPACE(int i) {
			return getToken(SQLParser.TABLESPACE, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode OWNED() { return getToken(SQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(SQLParser.NOWAIT, 0); }
		public AlterIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterIndexStatementContext alterIndexStatement() throws RecognitionException {
		AlterIndexStatementContext _localctx = new AlterIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_alterIndexStatement);
		int _la;
		try {
			setState(1925);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1902);
				match(INDEX);
				setState(1904);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,164,_ctx) ) {
				case 1:
					{
					setState(1903);
					ifExists();
					}
					break;
				}
				setState(1906);
				schemaQualifiedName();
				setState(1907);
				indexDefAction();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1909);
				match(INDEX);
				setState(1910);
				match(ALL);
				setState(1911);
				match(IN);
				setState(1912);
				match(TABLESPACE);
				setState(1913);
				identifier();
				setState(1917);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OWNED) {
					{
					setState(1914);
					match(OWNED);
					setState(1915);
					match(BY);
					setState(1916);
					identifierList();
					}
				}

				setState(1919);
				match(SET);
				setState(1920);
				match(TABLESPACE);
				setState(1921);
				identifier();
				setState(1923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOWAIT) {
					{
					setState(1922);
					match(NOWAIT);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexDefActionContext extends ParserRuleContext {
		public SchemaQualifiedNameContext index;
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public TerminalNode ATTACH() { return getToken(SQLParser.ATTACH, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(SQLParser.DEPENDS, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode STATISTICS() { return getToken(SQLParser.STATISTICS, 0); }
		public SignedNumberLiteralContext signedNumberLiteral() {
			return getRuleContext(SignedNumberLiteralContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<OptionWithValueContext> optionWithValue() {
			return getRuleContexts(OptionWithValueContext.class);
		}
		public OptionWithValueContext optionWithValue(int i) {
			return getRuleContext(OptionWithValueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public IndexDefActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexDefAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndexDefAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndexDefAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIndexDefAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexDefActionContext indexDefAction() throws RecognitionException {
		IndexDefActionContext _localctx = new IndexDefActionContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_indexDefAction);
		int _la;
		try {
			setState(1966);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,171,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1927);
				renameTo();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1928);
				match(ATTACH);
				setState(1929);
				match(PARTITION);
				setState(1930);
				((IndexDefActionContext)_localctx).index = schemaQualifiedName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1931);
				match(DEPENDS);
				setState(1932);
				match(ON);
				setState(1933);
				match(EXTENSION);
				setState(1934);
				schemaQualifiedName();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1935);
				match(ALTER);
				setState(1937);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(1936);
					match(COLUMN);
					}
				}

				setState(1940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PLUS || _la==MINUS) {
					{
					setState(1939);
					sign();
					}
				}

				setState(1942);
				match(NUMBER_LITERAL);
				setState(1943);
				match(SET);
				setState(1944);
				match(STATISTICS);
				setState(1945);
				signedNumberLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1946);
				match(RESET);
				setState(1947);
				match(LEFT_PAREN);
				setState(1948);
				identifierList();
				setState(1949);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1951);
				match(SET);
				setState(1952);
				match(TABLESPACE);
				setState(1953);
				identifier();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1954);
				match(SET);
				setState(1955);
				match(LEFT_PAREN);
				setState(1956);
				optionWithValue();
				setState(1961);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1957);
					match(COMMA);
					setState(1958);
					optionWithValue();
					}
					}
					setState(1963);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1964);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDefaultPrivilegesContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public AbbreviatedGrantOrRevokeContext abbreviatedGrantOrRevoke() {
			return getRuleContext(AbbreviatedGrantOrRevokeContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public AlterDefaultPrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDefaultPrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterDefaultPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterDefaultPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterDefaultPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDefaultPrivilegesContext alterDefaultPrivileges() throws RecognitionException {
		AlterDefaultPrivilegesContext _localctx = new AlterDefaultPrivilegesContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_alterDefaultPrivileges);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1968);
			match(DEFAULT);
			setState(1969);
			match(PRIVILEGES);
			setState(1973);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1970);
				match(FOR);
				setState(1971);
				_la = _input.LA(1);
				if ( !(_la==ROLE || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1972);
				identifierList();
				}
			}

			setState(1978);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(1975);
				match(IN);
				setState(1976);
				match(SCHEMA);
				setState(1977);
				identifierList();
				}
			}

			setState(1980);
			abbreviatedGrantOrRevoke();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AbbreviatedGrantOrRevokeContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SQLParser.GRANT, 0); }
		public TerminalNode REVOKE() { return getToken(SQLParser.REVOKE, 0); }
		public List<TableColumnPrivilegeContext> tableColumnPrivilege() {
			return getRuleContexts(TableColumnPrivilegeContext.class);
		}
		public TableColumnPrivilegeContext tableColumnPrivilege(int i) {
			return getRuleContext(TableColumnPrivilegeContext.class,i);
		}
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode TABLES() { return getToken(SQLParser.TABLES, 0); }
		public TerminalNode SEQUENCES() { return getToken(SQLParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SQLParser.FUNCTIONS, 0); }
		public TerminalNode SCHEMAS() { return getToken(SQLParser.SCHEMAS, 0); }
		public TerminalNode TYPES() { return getToken(SQLParser.TYPES, 0); }
		public GrantToRuleContext grantToRule() {
			return getRuleContext(GrantToRuleContext.class,0);
		}
		public RevokeFromCascadeRestrictContext revokeFromCascadeRestrict() {
			return getRuleContext(RevokeFromCascadeRestrictContext.class,0);
		}
		public List<UsageSelectUpdateContext> usageSelectUpdate() {
			return getRuleContexts(UsageSelectUpdateContext.class);
		}
		public UsageSelectUpdateContext usageSelectUpdate(int i) {
			return getRuleContext(UsageSelectUpdateContext.class,i);
		}
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public TerminalNode USAGE() { return getToken(SQLParser.USAGE, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public GrantOptionForContext grantOptionFor() {
			return getRuleContext(GrantOptionForContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public AbbreviatedGrantOrRevokeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_abbreviatedGrantOrRevoke; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAbbreviatedGrantOrRevoke(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAbbreviatedGrantOrRevoke(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAbbreviatedGrantOrRevoke(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AbbreviatedGrantOrRevokeContext abbreviatedGrantOrRevoke() throws RecognitionException {
		AbbreviatedGrantOrRevokeContext _localctx = new AbbreviatedGrantOrRevokeContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_abbreviatedGrantOrRevoke);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1987);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANT:
				{
				setState(1982);
				match(GRANT);
				}
				break;
			case REVOKE:
				{
				setState(1983);
				match(REVOKE);
				setState(1985);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GRANT) {
					{
					setState(1984);
					grantOptionFor();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				setState(1989);
				tableColumnPrivilege();
				setState(1994);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1990);
					match(COMMA);
					setState(1991);
					tableColumnPrivilege();
					}
					}
					setState(1996);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1997);
				match(ON);
				setState(1998);
				match(TABLES);
				}
				break;
			case 2:
				{
				setState(2012);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATE:
				case SELECT:
				case USAGE:
					{
					setState(2000);
					usageSelectUpdate();
					setState(2005);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2001);
						match(COMMA);
						setState(2002);
						usageSelectUpdate();
						}
						}
						setState(2007);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
					break;
				case ALL:
					{
					setState(2008);
					match(ALL);
					setState(2010);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2009);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2014);
				match(ON);
				setState(2015);
				match(SEQUENCES);
				}
				break;
			case 3:
				{
				setState(2021);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case EXECUTE:
					{
					setState(2016);
					match(EXECUTE);
					}
					break;
				case ALL:
					{
					setState(2017);
					match(ALL);
					setState(2019);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2018);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2023);
				match(ON);
				setState(2024);
				match(FUNCTIONS);
				}
				break;
			case 4:
				{
				setState(2031);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(2025);
					match(USAGE);
					}
					break;
				case CREATE:
					{
					setState(2026);
					match(CREATE);
					}
					break;
				case ALL:
					{
					setState(2027);
					match(ALL);
					setState(2029);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2028);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2033);
				match(ON);
				setState(2034);
				match(SCHEMAS);
				}
				break;
			case 5:
				{
				setState(2040);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case USAGE:
					{
					setState(2035);
					match(USAGE);
					}
					break;
				case ALL:
					{
					setState(2036);
					match(ALL);
					setState(2038);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==PRIVILEGES) {
						{
						setState(2037);
						match(PRIVILEGES);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2042);
				match(ON);
				setState(2043);
				match(TYPES);
				}
				break;
			}
			setState(2048);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(2046);
				grantToRule();
				}
				break;
			case FROM:
				{
				setState(2047);
				revokeFromCascadeRestrict();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantOptionForContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public GrantOptionForContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantOptionFor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrantOptionFor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrantOptionFor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitGrantOptionFor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantOptionForContext grantOptionFor() throws RecognitionException {
		GrantOptionForContext _localctx = new GrantOptionForContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_grantOptionFor);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2050);
			match(GRANT);
			setState(2051);
			match(OPTION);
			setState(2052);
			match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSequenceStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<SequenceBodyContext> sequenceBody() {
			return getRuleContexts(SequenceBodyContext.class);
		}
		public SequenceBodyContext sequenceBody(int i) {
			return getRuleContext(SequenceBodyContext.class,i);
		}
		public List<TerminalNode> RESTART() { return getTokens(SQLParser.RESTART); }
		public TerminalNode RESTART(int i) {
			return getToken(SQLParser.RESTART, i);
		}
		public List<SignedNumberLiteralContext> signedNumberLiteral() {
			return getRuleContexts(SignedNumberLiteralContext.class);
		}
		public SignedNumberLiteralContext signedNumberLiteral(int i) {
			return getRuleContext(SignedNumberLiteralContext.class,i);
		}
		public List<TerminalNode> WITH() { return getTokens(SQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(SQLParser.WITH, i);
		}
		public AlterSequenceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSequenceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterSequenceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterSequenceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterSequenceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSequenceStatementContext alterSequenceStatement() throws RecognitionException {
		AlterSequenceStatementContext _localctx = new AlterSequenceStatementContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_alterSequenceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2054);
			match(SEQUENCE);
			setState(2056);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				setState(2055);
				ifExists();
				}
				break;
			}
			setState(2058);
			((AlterSequenceStatementContext)_localctx).name = schemaQualifiedName();
			setState(2074);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case CACHE:
			case CYCLE:
			case INCREMENT:
			case MAXVALUE:
			case MINVALUE:
			case NO:
			case OWNED:
			case RESTART:
			case SEQUENCE:
			case START:
			case AS:
			case SEMI_COLON:
				{
				setState(2069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==CACHE || _la==CYCLE || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (INCREMENT - 110)) | (1L << (MAXVALUE - 110)) | (1L << (MINVALUE - 110)) | (1L << (NO - 110)) | (1L << (OWNED - 110)))) != 0) || ((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (RESTART - 205)) | (1L << (SEQUENCE - 205)) | (1L << (START - 205)))) != 0) || _la==AS) {
					{
					setState(2067);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CACHE:
					case CYCLE:
					case INCREMENT:
					case MAXVALUE:
					case MINVALUE:
					case NO:
					case OWNED:
					case SEQUENCE:
					case START:
					case AS:
						{
						setState(2059);
						sequenceBody();
						}
						break;
					case RESTART:
						{
						setState(2060);
						match(RESTART);
						setState(2065);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==WITH || ((((_la - 587)) & ~0x3f) == 0 && ((1L << (_la - 587)) & ((1L << (PLUS - 587)) | (1L << (MINUS - 587)) | (1L << (NUMBER_LITERAL - 587)))) != 0)) {
							{
							setState(2062);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==WITH) {
								{
								setState(2061);
								match(WITH);
								}
							}

							setState(2064);
							signedNumberLiteral();
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(2071);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case SET:
				{
				setState(2072);
				setSchema();
				}
				break;
			case RENAME:
				{
				setState(2073);
				renameTo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterViewStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public SchemaQualifiedNameContext columnName;
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public NamesInParensContext namesInParens() {
			return getRuleContext(NamesInParensContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(SQLParser.MATERIALIZED, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public SetDefColumnContext setDefColumn() {
			return getRuleContext(SetDefColumnContext.class,0);
		}
		public DropDefContext dropDef() {
			return getRuleContext(DropDefContext.class,0);
		}
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public AlterViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterViewStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterViewStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterViewStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterViewStatementContext alterViewStatement() throws RecognitionException {
		AlterViewStatementContext _localctx = new AlterViewStatementContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_alterViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATERIALIZED) {
				{
				setState(2076);
				match(MATERIALIZED);
				}
			}

			setState(2079);
			match(VIEW);
			setState(2081);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				setState(2080);
				ifExists();
				}
				break;
			}
			setState(2083);
			((AlterViewStatementContext)_localctx).name = schemaQualifiedName();
			setState(2099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				setState(2084);
				match(ALTER);
				setState(2086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMN) {
					{
					setState(2085);
					match(COLUMN);
					}
				}

				setState(2088);
				((AlterViewStatementContext)_localctx).columnName = schemaQualifiedName();
				setState(2091);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SET:
					{
					setState(2089);
					setDefColumn();
					}
					break;
				case DROP:
					{
					setState(2090);
					dropDef();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(2093);
				setSchema();
				}
				break;
			case 3:
				{
				setState(2094);
				renameTo();
				}
				break;
			case 4:
				{
				setState(2095);
				match(SET);
				setState(2096);
				storageParameter();
				}
				break;
			case 5:
				{
				setState(2097);
				match(RESET);
				setState(2098);
				namesInParens();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventTriggerContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode EVENT() { return getToken(SQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public AlterEventTriggerActionContext alterEventTriggerAction() {
			return getRuleContext(AlterEventTriggerActionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterEventTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterEventTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventTriggerContext alterEventTrigger() throws RecognitionException {
		AlterEventTriggerContext _localctx = new AlterEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_alterEventTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2101);
			match(EVENT);
			setState(2102);
			match(TRIGGER);
			setState(2103);
			((AlterEventTriggerContext)_localctx).name = identifier();
			setState(2104);
			alterEventTriggerAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterEventTriggerActionContext extends ParserRuleContext {
		public TerminalNode DISABLE() { return getToken(SQLParser.DISABLE, 0); }
		public TerminalNode ENABLE() { return getToken(SQLParser.ENABLE, 0); }
		public TerminalNode REPLICA() { return getToken(SQLParser.REPLICA, 0); }
		public TerminalNode ALWAYS() { return getToken(SQLParser.ALWAYS, 0); }
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public AlterEventTriggerActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterEventTriggerAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterEventTriggerAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterEventTriggerAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterEventTriggerAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterEventTriggerActionContext alterEventTriggerAction() throws RecognitionException {
		AlterEventTriggerActionContext _localctx = new AlterEventTriggerActionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_alterEventTriggerAction);
		int _la;
		try {
			setState(2113);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DISABLE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2106);
				match(DISABLE);
				}
				break;
			case ENABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2107);
				match(ENABLE);
				setState(2109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALWAYS || _la==REPLICA) {
					{
					setState(2108);
					_la = _input.LA(1);
					if ( !(_la==ALWAYS || _la==REPLICA) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2111);
				ownerTo();
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 4);
				{
				setState(2112);
				renameTo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTypeStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public CharacterStringContext newEnumValue;
		public CharacterStringContext existingEnumValue;
		public IdentifierContext attributeName;
		public IdentifierContext newAttributeName;
		public CharacterStringContext existingEnumName;
		public CharacterStringContext newEnumName;
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public TerminalNode VALUE() { return getToken(SQLParser.VALUE, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(SQLParser.ATTRIBUTE, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<TypeActionContext> typeAction() {
			return getRuleContexts(TypeActionContext.class);
		}
		public TypeActionContext typeAction(int i) {
			return getRuleContext(TypeActionContext.class,i);
		}
		public List<CharacterStringContext> characterString() {
			return getRuleContexts(CharacterStringContext.class);
		}
		public CharacterStringContext characterString(int i) {
			return getRuleContext(CharacterStringContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode BEFORE() { return getToken(SQLParser.BEFORE, 0); }
		public TerminalNode AFTER() { return getToken(SQLParser.AFTER, 0); }
		public AlterTypeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTypeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterTypeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterTypeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterTypeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTypeStatementContext alterTypeStatement() throws RecognitionException {
		AlterTypeStatementContext _localctx = new AlterTypeStatementContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_alterTypeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2115);
			match(TYPE);
			setState(2116);
			((AlterTypeStatementContext)_localctx).name = schemaQualifiedName();
			setState(2151);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				setState(2117);
				setSchema();
				}
				break;
			case 2:
				{
				setState(2118);
				renameTo();
				}
				break;
			case 3:
				{
				setState(2119);
				match(ADD);
				setState(2120);
				match(VALUE);
				setState(2122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2121);
					ifNotExists();
					}
				}

				setState(2124);
				((AlterTypeStatementContext)_localctx).newEnumValue = characterString();
				setState(2127);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AFTER || _la==BEFORE) {
					{
					setState(2125);
					_la = _input.LA(1);
					if ( !(_la==AFTER || _la==BEFORE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2126);
					((AlterTypeStatementContext)_localctx).existingEnumValue = characterString();
					}
				}

				}
				break;
			case 4:
				{
				setState(2129);
				match(RENAME);
				setState(2130);
				match(ATTRIBUTE);
				setState(2131);
				((AlterTypeStatementContext)_localctx).attributeName = identifier();
				setState(2132);
				match(TO);
				setState(2133);
				((AlterTypeStatementContext)_localctx).newAttributeName = identifier();
				setState(2135);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2134);
					cascadeRestrict();
					}
				}

				}
				break;
			case 5:
				{
				setState(2137);
				match(RENAME);
				setState(2138);
				match(VALUE);
				setState(2139);
				((AlterTypeStatementContext)_localctx).existingEnumName = characterString();
				setState(2140);
				match(TO);
				setState(2141);
				((AlterTypeStatementContext)_localctx).newEnumName = characterString();
				}
				break;
			case 6:
				{
				setState(2143);
				typeAction();
				setState(2148);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2144);
					match(COMMA);
					setState(2145);
					typeAction();
					}
					}
					setState(2150);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterDomainStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public DomainConstraintContext domConstraint;
		public Token notValid;
		public TerminalNode DOMAIN() { return getToken(SQLParser.DOMAIN, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public SetDefColumnContext setDefColumn() {
			return getRuleContext(SetDefColumnContext.class,0);
		}
		public DropDefContext dropDef() {
			return getRuleContext(DropDefContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public DropConstraintContext dropConstraint() {
			return getRuleContext(DropConstraintContext.class,0);
		}
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public ValidateConstraintContext validateConstraint() {
			return getRuleContext(ValidateConstraintContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public DomainConstraintContext domainConstraint() {
			return getRuleContext(DomainConstraintContext.class,0);
		}
		public TerminalNode VALID() { return getToken(SQLParser.VALID, 0); }
		public AlterDomainStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterDomainStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterDomainStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterDomainStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterDomainStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterDomainStatementContext alterDomainStatement() throws RecognitionException {
		AlterDomainStatementContext _localctx = new AlterDomainStatementContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_alterDomainStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2153);
			match(DOMAIN);
			setState(2154);
			((AlterDomainStatementContext)_localctx).name = schemaQualifiedName();
			setState(2176);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				setState(2155);
				setDefColumn();
				}
				break;
			case 2:
				{
				setState(2156);
				dropDef();
				}
				break;
			case 3:
				{
				setState(2157);
				_la = _input.LA(1);
				if ( !(_la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2158);
				match(NOT);
				setState(2159);
				match(NULL);
				}
				break;
			case 4:
				{
				setState(2160);
				match(ADD);
				setState(2161);
				((AlterDomainStatementContext)_localctx).domConstraint = domainConstraint();
				setState(2164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2162);
					match(NOT);
					setState(2163);
					((AlterDomainStatementContext)_localctx).notValid = match(VALID);
					}
				}

				}
				break;
			case 5:
				{
				setState(2166);
				dropConstraint();
				}
				break;
			case 6:
				{
				setState(2167);
				match(RENAME);
				setState(2168);
				match(CONSTRAINT);
				setState(2169);
				schemaQualifiedName();
				setState(2170);
				match(TO);
				setState(2171);
				schemaQualifiedName();
				}
				break;
			case 7:
				{
				setState(2173);
				validateConstraint();
				}
				break;
			case 8:
				{
				setState(2174);
				renameTo();
				}
				break;
			case 9:
				{
				setState(2175);
				setSchema();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerStatementContext extends ParserRuleContext {
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterServerActionContext alterServerAction() {
			return getRuleContext(AlterServerActionContext.class,0);
		}
		public AlterServerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterServerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterServerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterServerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerStatementContext alterServerStatement() throws RecognitionException {
		AlterServerStatementContext _localctx = new AlterServerStatementContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_alterServerStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2178);
			match(SERVER);
			setState(2179);
			identifier();
			setState(2180);
			alterServerAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterServerActionContext extends ParserRuleContext {
		public DefineForeignOptionsContext defineForeignOptions() {
			return getRuleContext(DefineForeignOptionsContext.class,0);
		}
		public TerminalNode VERSION() { return getToken(SQLParser.VERSION, 0); }
		public CharacterStringContext characterString() {
			return getRuleContext(CharacterStringContext.class,0);
		}
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public AlterServerActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterServerAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterServerAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterServerAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterServerAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterServerActionContext alterServerAction() throws RecognitionException {
		AlterServerActionContext _localctx = new AlterServerActionContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_alterServerAction);
		int _la;
		try {
			setState(2191);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,209,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2184);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(2182);
					match(VERSION);
					setState(2183);
					characterString();
					}
				}

				setState(2186);
				defineForeignOptions();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2187);
				match(VERSION);
				setState(2188);
				characterString();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2189);
				ownerTo();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2190);
				renameTo();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFtsStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(SQLParser.DICTIONARY, 0); }
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public TerminalNode CONFIGURATION() { return getToken(SQLParser.CONFIGURATION, 0); }
		public AlterFtsConfigurationContext alterFtsConfiguration() {
			return getRuleContext(AlterFtsConfigurationContext.class,0);
		}
		public TerminalNode TEMPLATE() { return getToken(SQLParser.TEMPLATE, 0); }
		public TerminalNode PARSER() { return getToken(SQLParser.PARSER, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public AlterFtsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFtsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterFtsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterFtsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterFtsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFtsStatementContext alterFtsStatement() throws RecognitionException {
		AlterFtsStatementContext _localctx = new AlterFtsStatementContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_alterFtsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2193);
			match(TEXT);
			setState(2194);
			match(SEARCH);
			setState(2209);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				{
				setState(2195);
				_la = _input.LA(1);
				if ( !(_la==CONFIGURATION || _la==DICTIONARY || _la==PARSER || _la==TEMPLATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2196);
				((AlterFtsStatementContext)_localctx).name = schemaQualifiedName();
				setState(2199);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case RENAME:
					{
					setState(2197);
					renameTo();
					}
					break;
				case SET:
					{
					setState(2198);
					setSchema();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(2201);
				match(DICTIONARY);
				setState(2202);
				((AlterFtsStatementContext)_localctx).name = schemaQualifiedName();
				setState(2203);
				storageParameter();
				}
				break;
			case 3:
				{
				setState(2205);
				match(CONFIGURATION);
				setState(2206);
				((AlterFtsStatementContext)_localctx).name = schemaQualifiedName();
				setState(2207);
				alterFtsConfiguration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterFtsConfigurationContext extends ParserRuleContext {
		public TerminalNode MAPPING() { return getToken(SQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public AlterFtsConfigurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterFtsConfiguration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterFtsConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterFtsConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterFtsConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterFtsConfigurationContext alterFtsConfiguration() throws RecognitionException {
		AlterFtsConfigurationContext _localctx = new AlterFtsConfigurationContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_alterFtsConfiguration);
		int _la;
		try {
			setState(2243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2211);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==ALTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2212);
				match(MAPPING);
				setState(2213);
				match(FOR);
				setState(2214);
				identifierList();
				setState(2215);
				match(WITH);
				setState(2216);
				schemaQualifiedName();
				setState(2221);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2217);
					match(COMMA);
					setState(2218);
					schemaQualifiedName();
					}
					}
					setState(2223);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2224);
				match(ALTER);
				setState(2225);
				match(MAPPING);
				setState(2228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2226);
					match(FOR);
					setState(2227);
					identifierList();
					}
				}

				setState(2230);
				match(REPLACE);
				setState(2231);
				schemaQualifiedName();
				setState(2232);
				match(WITH);
				setState(2233);
				schemaQualifiedName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2235);
				match(DROP);
				setState(2236);
				match(MAPPING);
				setState(2239);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IF) {
					{
					setState(2237);
					match(IF);
					setState(2238);
					match(EXISTS);
					}
				}

				setState(2241);
				match(FOR);
				setState(2242);
				identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeActionContext extends ParserRuleContext {
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(SQLParser.ATTRIBUTE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateIdentifierContext collateIdentifier() {
			return getRuleContext(CollateIdentifierContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TypeActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTypeAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTypeAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTypeAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeActionContext typeAction() throws RecognitionException {
		TypeActionContext _localctx = new TypeActionContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_typeAction);
		int _la;
		try {
			setState(2279);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ADD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2245);
				match(ADD);
				setState(2246);
				match(ATTRIBUTE);
				setState(2247);
				identifier();
				setState(2248);
				dataType();
				setState(2250);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2249);
					collateIdentifier();
					}
				}

				setState(2253);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2252);
					cascadeRestrict();
					}
				}

				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 2);
				{
				setState(2255);
				match(DROP);
				setState(2256);
				match(ATTRIBUTE);
				setState(2258);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,218,_ctx) ) {
				case 1:
					{
					setState(2257);
					ifExists();
					}
					break;
				}
				setState(2260);
				identifier();
				setState(2262);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2261);
					cascadeRestrict();
					}
				}

				}
				break;
			case ALTER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2264);
				match(ALTER);
				setState(2265);
				match(ATTRIBUTE);
				setState(2266);
				identifier();
				setState(2269);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SET) {
					{
					setState(2267);
					match(SET);
					setState(2268);
					match(DATA);
					}
				}

				setState(2271);
				match(TYPE);
				setState(2272);
				dataType();
				setState(2274);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(2273);
					collateIdentifier();
					}
				}

				setState(2277);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(2276);
					cascadeRestrict();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetDefColumnContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public SetDefColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setDefColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSetDefColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSetDefColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSetDefColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetDefColumnContext setDefColumn() throws RecognitionException {
		SetDefColumnContext _localctx = new SetDefColumnContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_setDefColumn);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2281);
			match(SET);
			setState(2282);
			match(DEFAULT);
			setState(2283);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDefContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public DropDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDefContext dropDef() throws RecognitionException {
		DropDefContext _localctx = new DropDefContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_dropDef);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2285);
			match(DROP);
			setState(2286);
			match(DEFAULT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateIndexStatementContext extends ParserRuleContext {
		public IdentifierContext name;
		public SchemaQualifiedNameContext tableName;
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public IndexRestContext indexRest() {
			return getRuleContext(IndexRestContext.class,0);
		}
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(SQLParser.CONCURRENTLY, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CreateIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateIndexStatementContext createIndexStatement() throws RecognitionException {
		CreateIndexStatementContext _localctx = new CreateIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_createIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2289);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNIQUE) {
				{
				setState(2288);
				match(UNIQUE);
				}
			}

			setState(2291);
			match(INDEX);
			setState(2293);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONCURRENTLY) {
				{
				setState(2292);
				match(CONCURRENTLY);
				}
			}

			setState(2296);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
			case 1:
				{
				setState(2295);
				ifNotExists();
				}
				break;
			}
			setState(2299);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(2298);
				((CreateIndexStatementContext)_localctx).name = identifier();
				}
			}

			setState(2301);
			match(ON);
			setState(2303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(2302);
				match(ONLY);
				}
			}

			setState(2305);
			((CreateIndexStatementContext)_localctx).tableName = schemaQualifiedName();
			setState(2306);
			indexRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexRestContext extends ParserRuleContext {
		public IdentifierContext method;
		public IndexSortContext indexSort() {
			return getRuleContext(IndexSortContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IncludingIndexContext includingIndex() {
			return getRuleContext(IncludingIndexContext.class,0);
		}
		public WithStorageParameterContext withStorageParameter() {
			return getRuleContext(WithStorageParameterContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public IndexWhereContext indexWhere() {
			return getRuleContext(IndexWhereContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndexRestContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexRest; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndexRest(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndexRest(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIndexRest(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexRestContext indexRest() throws RecognitionException {
		IndexRestContext _localctx = new IndexRestContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_indexRest);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2308);
				match(USING);
				setState(2309);
				((IndexRestContext)_localctx).method = identifier();
				}
			}

			setState(2312);
			indexSort();
			setState(2314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(2313);
				includingIndex();
				}
			}

			setState(2317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2316);
				withStorageParameter();
				}
			}

			setState(2320);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(2319);
				tableSpace();
				}
			}

			setState(2323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(2322);
				indexWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexSortContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public SortSpecifierListContext sortSpecifierList() {
			return getRuleContext(SortSpecifierListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public IndexSortContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexSort; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndexSort(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndexSort(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIndexSort(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexSortContext indexSort() throws RecognitionException {
		IndexSortContext _localctx = new IndexSortContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_indexSort);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2325);
			match(LEFT_PAREN);
			setState(2326);
			sortSpecifierList();
			setState(2327);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IncludingIndexContext extends ParserRuleContext {
		public TerminalNode INCLUDE() { return getToken(SQLParser.INCLUDE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public IncludingIndexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_includingIndex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIncludingIndex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIncludingIndex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIncludingIndex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IncludingIndexContext includingIndex() throws RecognitionException {
		IncludingIndexContext _localctx = new IncludingIndexContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_includingIndex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2329);
			match(INCLUDE);
			setState(2330);
			match(LEFT_PAREN);
			setState(2331);
			identifier();
			setState(2336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2332);
				match(COMMA);
				setState(2333);
				identifier();
				}
				}
				setState(2338);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2339);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexWhereContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public IndexWhereContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexWhere; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndexWhere(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndexWhere(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIndexWhere(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexWhereContext indexWhere() throws RecognitionException {
		IndexWhereContext _localctx = new IndexWhereContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_indexWhere);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2341);
			match(WHERE);
			setState(2342);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateExtensionStatementContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext schema;
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode VERSION() { return getToken(SQLParser.VERSION, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode CASCADE() { return getToken(SQLParser.CASCADE, 0); }
		public List<CharacterStringContext> characterString() {
			return getRuleContexts(CharacterStringContext.class);
		}
		public CharacterStringContext characterString(int i) {
			return getRuleContext(CharacterStringContext.class,i);
		}
		public CreateExtensionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createExtensionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateExtensionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateExtensionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateExtensionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateExtensionStatementContext createExtensionStatement() throws RecognitionException {
		CreateExtensionStatementContext _localctx = new CreateExtensionStatementContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_createExtensionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2344);
			match(EXTENSION);
			setState(2346);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(2345);
				ifNotExists();
				}
				break;
			}
			setState(2348);
			((CreateExtensionStatementContext)_localctx).name = identifier();
			setState(2350);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2349);
				match(WITH);
				}
			}

			setState(2354);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SCHEMA) {
				{
				setState(2352);
				match(SCHEMA);
				setState(2353);
				((CreateExtensionStatementContext)_localctx).schema = identifier();
				}
			}

			setState(2361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERSION) {
				{
				setState(2356);
				match(VERSION);
				setState(2359);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(2357);
					identifier();
					}
					break;
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(2358);
					characterString();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(2363);
				match(FROM);
				setState(2366);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(2364);
					identifier();
					}
					break;
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(2365);
					characterString();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(2371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE) {
				{
				setState(2370);
				match(CASCADE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateLanguageStatementContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public TerminalNode TRUSTED() { return getToken(SQLParser.TRUSTED, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public TerminalNode HANDLER() { return getToken(SQLParser.HANDLER, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public TerminalNode INLINE() { return getToken(SQLParser.INLINE, 0); }
		public TerminalNode VALIDATOR() { return getToken(SQLParser.VALIDATOR, 0); }
		public CreateLanguageStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createLanguageStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateLanguageStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateLanguageStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateLanguageStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateLanguageStatementContext createLanguageStatement() throws RecognitionException {
		CreateLanguageStatementContext _localctx = new CreateLanguageStatementContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_createLanguageStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2375);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(2373);
				match(OR);
				setState(2374);
				match(REPLACE);
				}
			}

			setState(2378);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TRUSTED) {
				{
				setState(2377);
				match(TRUSTED);
				}
			}

			setState(2381);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PROCEDURAL) {
				{
				setState(2380);
				match(PROCEDURAL);
				}
			}

			setState(2383);
			match(LANGUAGE);
			setState(2384);
			((CreateLanguageStatementContext)_localctx).name = identifier();
			setState(2395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HANDLER) {
				{
				setState(2385);
				match(HANDLER);
				setState(2386);
				schemaQualifiedName();
				setState(2389);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INLINE) {
					{
					setState(2387);
					match(INLINE);
					setState(2388);
					schemaQualifiedName();
					}
				}

				setState(2393);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALIDATOR) {
					{
					setState(2391);
					match(VALIDATOR);
					setState(2392);
					schemaQualifiedName();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateEventTriggerContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode EVENT() { return getToken(SQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public List<TerminalNode> IN() { return getTokens(SQLParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(SQLParser.IN, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<CharacterStringContext> characterString() {
			return getRuleContexts(CharacterStringContext.class);
		}
		public CharacterStringContext characterString(int i) {
			return getRuleContext(CharacterStringContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<TerminalNode> AND() { return getTokens(SQLParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(SQLParser.AND, i);
		}
		public CreateEventTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createEventTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateEventTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateEventTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateEventTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateEventTriggerContext createEventTrigger() throws RecognitionException {
		CreateEventTriggerContext _localctx = new CreateEventTriggerContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_createEventTrigger);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2397);
			match(EVENT);
			setState(2398);
			match(TRIGGER);
			setState(2399);
			((CreateEventTriggerContext)_localctx).name = identifier();
			setState(2400);
			match(ON);
			setState(2401);
			identifier();
			setState(2422);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2402);
				match(WHEN);
				setState(2418); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2403);
						schemaQualifiedName();
						setState(2404);
						match(IN);
						setState(2405);
						match(LEFT_PAREN);
						setState(2406);
						characterString();
						setState(2411);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(2407);
							match(COMMA);
							setState(2408);
							characterString();
							}
							}
							setState(2413);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(2414);
						match(RIGHT_PAREN);
						setState(2416);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AND) {
							{
							setState(2415);
							match(AND);
							}
						}

						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2420); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,251,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
			}

			setState(2424);
			match(EXECUTE);
			setState(2425);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2426);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTypeStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TableColumnDefinitionContext tableColumnDefinition;
		public List<TableColumnDefinitionContext> attrs = new ArrayList<TableColumnDefinitionContext>();
		public CharacterStringContext characterString;
		public List<CharacterStringContext> enums = new ArrayList<CharacterStringContext>();
		public DataTypeContext subtypeName;
		public IdentifierContext subtypeOperatorClass;
		public SchemaQualifiedNameContext collation;
		public SchemaQualifiedNameContext canonicalFunction;
		public SchemaQualifiedNameContext subtypeDiffFunction;
		public SignedNumericalLiteralContext internallength;
		public SchemaQualifiedNameContext inputFunction;
		public SchemaQualifiedNameContext outputFunction;
		public SchemaQualifiedNameContext receiveFunction;
		public SchemaQualifiedNameContext sendFunction;
		public SchemaQualifiedNameContext typeModifierInputFunction;
		public SchemaQualifiedNameContext typeModifierOutputFunction;
		public SchemaQualifiedNameContext analyzeFunction;
		public DataTypeContext alignment;
		public Token storage;
		public DataTypeContext likeType;
		public CharacterStringContext category;
		public TruthValueContext preferred;
		public VexContext defaultValue;
		public DataTypeContext element;
		public CharacterStringContext delimiter;
		public TruthValueContext collatable;
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode INPUT() { return getToken(SQLParser.INPUT, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode OUTPUT() { return getToken(SQLParser.OUTPUT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode ENUM() { return getToken(SQLParser.ENUM, 0); }
		public TerminalNode RANGE() { return getToken(SQLParser.RANGE, 0); }
		public List<TerminalNode> INTERNALLENGTH() { return getTokens(SQLParser.INTERNALLENGTH); }
		public TerminalNode INTERNALLENGTH(int i) {
			return getToken(SQLParser.INTERNALLENGTH, i);
		}
		public List<TerminalNode> SUBTYPE() { return getTokens(SQLParser.SUBTYPE); }
		public TerminalNode SUBTYPE(int i) {
			return getToken(SQLParser.SUBTYPE, i);
		}
		public List<TerminalNode> SUBTYPE_OPCLASS() { return getTokens(SQLParser.SUBTYPE_OPCLASS); }
		public TerminalNode SUBTYPE_OPCLASS(int i) {
			return getToken(SQLParser.SUBTYPE_OPCLASS, i);
		}
		public List<TerminalNode> COLLATION() { return getTokens(SQLParser.COLLATION); }
		public TerminalNode COLLATION(int i) {
			return getToken(SQLParser.COLLATION, i);
		}
		public List<TerminalNode> CANONICAL() { return getTokens(SQLParser.CANONICAL); }
		public TerminalNode CANONICAL(int i) {
			return getToken(SQLParser.CANONICAL, i);
		}
		public List<TerminalNode> SUBTYPE_DIFF() { return getTokens(SQLParser.SUBTYPE_DIFF); }
		public TerminalNode SUBTYPE_DIFF(int i) {
			return getToken(SQLParser.SUBTYPE_DIFF, i);
		}
		public List<TerminalNode> VARIABLE() { return getTokens(SQLParser.VARIABLE); }
		public TerminalNode VARIABLE(int i) {
			return getToken(SQLParser.VARIABLE, i);
		}
		public List<TerminalNode> RECEIVE() { return getTokens(SQLParser.RECEIVE); }
		public TerminalNode RECEIVE(int i) {
			return getToken(SQLParser.RECEIVE, i);
		}
		public List<TerminalNode> SEND() { return getTokens(SQLParser.SEND); }
		public TerminalNode SEND(int i) {
			return getToken(SQLParser.SEND, i);
		}
		public List<TerminalNode> TYPMOD_IN() { return getTokens(SQLParser.TYPMOD_IN); }
		public TerminalNode TYPMOD_IN(int i) {
			return getToken(SQLParser.TYPMOD_IN, i);
		}
		public List<TerminalNode> TYPMOD_OUT() { return getTokens(SQLParser.TYPMOD_OUT); }
		public TerminalNode TYPMOD_OUT(int i) {
			return getToken(SQLParser.TYPMOD_OUT, i);
		}
		public List<TerminalNode> ANALYZE() { return getTokens(SQLParser.ANALYZE); }
		public TerminalNode ANALYZE(int i) {
			return getToken(SQLParser.ANALYZE, i);
		}
		public List<TerminalNode> PASSEDBYVALUE() { return getTokens(SQLParser.PASSEDBYVALUE); }
		public TerminalNode PASSEDBYVALUE(int i) {
			return getToken(SQLParser.PASSEDBYVALUE, i);
		}
		public List<TerminalNode> ALIGNMENT() { return getTokens(SQLParser.ALIGNMENT); }
		public TerminalNode ALIGNMENT(int i) {
			return getToken(SQLParser.ALIGNMENT, i);
		}
		public List<TerminalNode> STORAGE() { return getTokens(SQLParser.STORAGE); }
		public TerminalNode STORAGE(int i) {
			return getToken(SQLParser.STORAGE, i);
		}
		public List<TerminalNode> LIKE() { return getTokens(SQLParser.LIKE); }
		public TerminalNode LIKE(int i) {
			return getToken(SQLParser.LIKE, i);
		}
		public List<TerminalNode> CATEGORY() { return getTokens(SQLParser.CATEGORY); }
		public TerminalNode CATEGORY(int i) {
			return getToken(SQLParser.CATEGORY, i);
		}
		public List<TerminalNode> PREFERRED() { return getTokens(SQLParser.PREFERRED); }
		public TerminalNode PREFERRED(int i) {
			return getToken(SQLParser.PREFERRED, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(SQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SQLParser.DEFAULT, i);
		}
		public List<TerminalNode> ELEMENT() { return getTokens(SQLParser.ELEMENT); }
		public TerminalNode ELEMENT(int i) {
			return getToken(SQLParser.ELEMENT, i);
		}
		public List<TerminalNode> DELIMITER() { return getTokens(SQLParser.DELIMITER); }
		public TerminalNode DELIMITER(int i) {
			return getToken(SQLParser.DELIMITER, i);
		}
		public List<TerminalNode> COLLATABLE() { return getTokens(SQLParser.COLLATABLE); }
		public TerminalNode COLLATABLE(int i) {
			return getToken(SQLParser.COLLATABLE, i);
		}
		public List<TableColumnDefinitionContext> tableColumnDefinition() {
			return getRuleContexts(TableColumnDefinitionContext.class);
		}
		public TableColumnDefinitionContext tableColumnDefinition(int i) {
			return getRuleContext(TableColumnDefinitionContext.class,i);
		}
		public List<CharacterStringContext> characterString() {
			return getRuleContexts(CharacterStringContext.class);
		}
		public CharacterStringContext characterString(int i) {
			return getRuleContext(CharacterStringContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<SignedNumericalLiteralContext> signedNumericalLiteral() {
			return getRuleContexts(SignedNumericalLiteralContext.class);
		}
		public SignedNumericalLiteralContext signedNumericalLiteral(int i) {
			return getRuleContext(SignedNumericalLiteralContext.class,i);
		}
		public List<TruthValueContext> truthValue() {
			return getRuleContexts(TruthValueContext.class);
		}
		public TruthValueContext truthValue(int i) {
			return getRuleContext(TruthValueContext.class,i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> PLAIN() { return getTokens(SQLParser.PLAIN); }
		public TerminalNode PLAIN(int i) {
			return getToken(SQLParser.PLAIN, i);
		}
		public List<TerminalNode> EXTERNAL() { return getTokens(SQLParser.EXTERNAL); }
		public TerminalNode EXTERNAL(int i) {
			return getToken(SQLParser.EXTERNAL, i);
		}
		public List<TerminalNode> EXTENDED() { return getTokens(SQLParser.EXTENDED); }
		public TerminalNode EXTENDED(int i) {
			return getToken(SQLParser.EXTENDED, i);
		}
		public List<TerminalNode> MAIN() { return getTokens(SQLParser.MAIN); }
		public TerminalNode MAIN(int i) {
			return getToken(SQLParser.MAIN, i);
		}
		public CreateTypeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTypeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateTypeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateTypeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateTypeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTypeStatementContext createTypeStatement() throws RecognitionException {
		CreateTypeStatementContext _localctx = new CreateTypeStatementContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_createTypeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2428);
			match(TYPE);
			setState(2429);
			((CreateTypeStatementContext)_localctx).name = schemaQualifiedName();
			setState(2577);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
				{
				setState(2430);
				match(AS);
				setState(2499);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(2431);
					match(LEFT_PAREN);
					setState(2440);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
						{
						setState(2432);
						((CreateTypeStatementContext)_localctx).tableColumnDefinition = tableColumnDefinition();
						((CreateTypeStatementContext)_localctx).attrs.add(((CreateTypeStatementContext)_localctx).tableColumnDefinition);
						setState(2437);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(2433);
							match(COMMA);
							setState(2434);
							((CreateTypeStatementContext)_localctx).tableColumnDefinition = tableColumnDefinition();
							((CreateTypeStatementContext)_localctx).attrs.add(((CreateTypeStatementContext)_localctx).tableColumnDefinition);
							}
							}
							setState(2439);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(2442);
					match(RIGHT_PAREN);
					}
					break;
				case ENUM:
					{
					setState(2443);
					match(ENUM);
					setState(2444);
					match(LEFT_PAREN);
					setState(2453);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==Character_String_Literal || _la==BeginDollarStringConstant) {
						{
						setState(2445);
						((CreateTypeStatementContext)_localctx).characterString = characterString();
						((CreateTypeStatementContext)_localctx).enums.add(((CreateTypeStatementContext)_localctx).characterString);
						setState(2450);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(2446);
							match(COMMA);
							setState(2447);
							((CreateTypeStatementContext)_localctx).characterString = characterString();
							((CreateTypeStatementContext)_localctx).enums.add(((CreateTypeStatementContext)_localctx).characterString);
							}
							}
							setState(2452);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						}
					}

					setState(2455);
					match(RIGHT_PAREN);
					}
					break;
				case RANGE:
					{
					setState(2456);
					match(RANGE);
					setState(2457);
					match(LEFT_PAREN);
					setState(2473);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SUBTYPE:
						{
						setState(2458);
						match(SUBTYPE);
						setState(2459);
						match(EQUAL);
						setState(2460);
						((CreateTypeStatementContext)_localctx).subtypeName = dataType();
						}
						break;
					case SUBTYPE_OPCLASS:
						{
						setState(2461);
						match(SUBTYPE_OPCLASS);
						setState(2462);
						match(EQUAL);
						setState(2463);
						((CreateTypeStatementContext)_localctx).subtypeOperatorClass = identifier();
						}
						break;
					case COLLATION:
						{
						setState(2464);
						match(COLLATION);
						setState(2465);
						match(EQUAL);
						setState(2466);
						((CreateTypeStatementContext)_localctx).collation = schemaQualifiedName();
						}
						break;
					case CANONICAL:
						{
						setState(2467);
						match(CANONICAL);
						setState(2468);
						match(EQUAL);
						setState(2469);
						((CreateTypeStatementContext)_localctx).canonicalFunction = schemaQualifiedName();
						}
						break;
					case SUBTYPE_DIFF:
						{
						setState(2470);
						match(SUBTYPE_DIFF);
						setState(2471);
						match(EQUAL);
						setState(2472);
						((CreateTypeStatementContext)_localctx).subtypeDiffFunction = schemaQualifiedName();
						}
						break;
					case COMMA:
					case RIGHT_PAREN:
						break;
					default:
						break;
					}
					setState(2495);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2475);
						match(COMMA);
						setState(2491);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case SUBTYPE:
							{
							setState(2476);
							match(SUBTYPE);
							setState(2477);
							match(EQUAL);
							setState(2478);
							((CreateTypeStatementContext)_localctx).subtypeName = dataType();
							}
							break;
						case SUBTYPE_OPCLASS:
							{
							setState(2479);
							match(SUBTYPE_OPCLASS);
							setState(2480);
							match(EQUAL);
							setState(2481);
							((CreateTypeStatementContext)_localctx).subtypeOperatorClass = identifier();
							}
							break;
						case COLLATION:
							{
							setState(2482);
							match(COLLATION);
							setState(2483);
							match(EQUAL);
							setState(2484);
							((CreateTypeStatementContext)_localctx).collation = schemaQualifiedName();
							}
							break;
						case CANONICAL:
							{
							setState(2485);
							match(CANONICAL);
							setState(2486);
							match(EQUAL);
							setState(2487);
							((CreateTypeStatementContext)_localctx).canonicalFunction = schemaQualifiedName();
							}
							break;
						case SUBTYPE_DIFF:
							{
							setState(2488);
							match(SUBTYPE_DIFF);
							setState(2489);
							match(EQUAL);
							setState(2490);
							((CreateTypeStatementContext)_localctx).subtypeDiffFunction = schemaQualifiedName();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						setState(2497);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2498);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LEFT_PAREN:
				{
				setState(2501);
				match(LEFT_PAREN);
				setState(2509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTERNALLENGTH) {
					{
					setState(2502);
					match(INTERNALLENGTH);
					setState(2503);
					match(EQUAL);
					setState(2506);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case PLUS:
					case MINUS:
					case NUMBER_LITERAL:
					case REAL_NUMBER:
						{
						setState(2504);
						((CreateTypeStatementContext)_localctx).internallength = signedNumericalLiteral();
						}
						break;
					case VARIABLE:
						{
						setState(2505);
						match(VARIABLE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2508);
					match(COMMA);
					}
				}

				setState(2511);
				match(INPUT);
				setState(2512);
				match(EQUAL);
				setState(2513);
				((CreateTypeStatementContext)_localctx).inputFunction = schemaQualifiedName();
				setState(2514);
				match(COMMA);
				setState(2515);
				match(OUTPUT);
				setState(2516);
				match(EQUAL);
				setState(2517);
				((CreateTypeStatementContext)_localctx).outputFunction = schemaQualifiedName();
				setState(2572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2518);
					match(COMMA);
					setState(2568);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case RECEIVE:
						{
						setState(2519);
						match(RECEIVE);
						setState(2520);
						match(EQUAL);
						setState(2521);
						((CreateTypeStatementContext)_localctx).receiveFunction = schemaQualifiedName();
						}
						break;
					case SEND:
						{
						setState(2522);
						match(SEND);
						setState(2523);
						match(EQUAL);
						setState(2524);
						((CreateTypeStatementContext)_localctx).sendFunction = schemaQualifiedName();
						}
						break;
					case TYPMOD_IN:
						{
						setState(2525);
						match(TYPMOD_IN);
						setState(2526);
						match(EQUAL);
						setState(2527);
						((CreateTypeStatementContext)_localctx).typeModifierInputFunction = schemaQualifiedName();
						}
						break;
					case TYPMOD_OUT:
						{
						setState(2528);
						match(TYPMOD_OUT);
						setState(2529);
						match(EQUAL);
						setState(2530);
						((CreateTypeStatementContext)_localctx).typeModifierOutputFunction = schemaQualifiedName();
						}
						break;
					case ANALYZE:
						{
						setState(2531);
						match(ANALYZE);
						setState(2532);
						match(EQUAL);
						setState(2533);
						((CreateTypeStatementContext)_localctx).analyzeFunction = schemaQualifiedName();
						}
						break;
					case INTERNALLENGTH:
						{
						setState(2534);
						match(INTERNALLENGTH);
						setState(2535);
						match(EQUAL);
						setState(2538);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case PLUS:
						case MINUS:
						case NUMBER_LITERAL:
						case REAL_NUMBER:
							{
							setState(2536);
							((CreateTypeStatementContext)_localctx).internallength = signedNumericalLiteral();
							}
							break;
						case VARIABLE:
							{
							setState(2537);
							match(VARIABLE);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case PASSEDBYVALUE:
						{
						setState(2540);
						match(PASSEDBYVALUE);
						}
						break;
					case ALIGNMENT:
						{
						setState(2541);
						match(ALIGNMENT);
						setState(2542);
						match(EQUAL);
						setState(2543);
						((CreateTypeStatementContext)_localctx).alignment = dataType();
						}
						break;
					case STORAGE:
						{
						setState(2544);
						match(STORAGE);
						setState(2545);
						match(EQUAL);
						setState(2546);
						((CreateTypeStatementContext)_localctx).storage = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==EXTERNAL || ((((_la - 460)) & ~0x3f) == 0 && ((1L << (_la - 460)) & ((1L << (EXTENDED - 460)) | (1L << (MAIN - 460)) | (1L << (PLAIN - 460)))) != 0)) ) {
							((CreateTypeStatementContext)_localctx).storage = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case LIKE:
						{
						setState(2547);
						match(LIKE);
						setState(2548);
						match(EQUAL);
						setState(2549);
						((CreateTypeStatementContext)_localctx).likeType = dataType();
						}
						break;
					case CATEGORY:
						{
						setState(2550);
						match(CATEGORY);
						setState(2551);
						match(EQUAL);
						setState(2552);
						((CreateTypeStatementContext)_localctx).category = characterString();
						}
						break;
					case PREFERRED:
						{
						setState(2553);
						match(PREFERRED);
						setState(2554);
						match(EQUAL);
						setState(2555);
						((CreateTypeStatementContext)_localctx).preferred = truthValue();
						}
						break;
					case DEFAULT:
						{
						setState(2556);
						match(DEFAULT);
						setState(2557);
						match(EQUAL);
						setState(2558);
						((CreateTypeStatementContext)_localctx).defaultValue = vex(0);
						}
						break;
					case ELEMENT:
						{
						setState(2559);
						match(ELEMENT);
						setState(2560);
						match(EQUAL);
						setState(2561);
						((CreateTypeStatementContext)_localctx).element = dataType();
						}
						break;
					case DELIMITER:
						{
						setState(2562);
						match(DELIMITER);
						setState(2563);
						match(EQUAL);
						setState(2564);
						((CreateTypeStatementContext)_localctx).delimiter = characterString();
						}
						break;
					case COLLATABLE:
						{
						setState(2565);
						match(COLLATABLE);
						setState(2566);
						match(EQUAL);
						setState(2567);
						((CreateTypeStatementContext)_localctx).collatable = truthValue();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(2574);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2575);
				match(RIGHT_PAREN);
				}
				break;
			case EOF:
			case SEMI_COLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDomainStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public DataTypeContext datType;
		public VexContext defValue;
		public DomainConstraintContext domainConstraint;
		public List<DomainConstraintContext> domConstraint = new ArrayList<DomainConstraintContext>();
		public TerminalNode DOMAIN() { return getToken(SQLParser.DOMAIN, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public List<CollateIdentifierContext> collateIdentifier() {
			return getRuleContexts(CollateIdentifierContext.class);
		}
		public CollateIdentifierContext collateIdentifier(int i) {
			return getRuleContext(CollateIdentifierContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(SQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SQLParser.DEFAULT, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<DomainConstraintContext> domainConstraint() {
			return getRuleContexts(DomainConstraintContext.class);
		}
		public DomainConstraintContext domainConstraint(int i) {
			return getRuleContext(DomainConstraintContext.class,i);
		}
		public CreateDomainStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDomainStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateDomainStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateDomainStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateDomainStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDomainStatementContext createDomainStatement() throws RecognitionException {
		CreateDomainStatementContext _localctx = new CreateDomainStatementContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_createDomainStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2579);
			match(DOMAIN);
			setState(2580);
			((CreateDomainStatementContext)_localctx).name = schemaQualifiedName();
			setState(2582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(2581);
				match(AS);
				}
			}

			setState(2584);
			((CreateDomainStatementContext)_localctx).datType = dataType();
			setState(2591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (CHECK - 378)) | (1L << (COLLATE - 378)) | (1L << (CONSTRAINT - 378)) | (1L << (DEFAULT - 378)) | (1L << (NOT - 378)) | (1L << (NULL - 378)))) != 0)) {
				{
				setState(2589);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case COLLATE:
					{
					setState(2585);
					collateIdentifier();
					}
					break;
				case DEFAULT:
					{
					setState(2586);
					match(DEFAULT);
					setState(2587);
					((CreateDomainStatementContext)_localctx).defValue = vex(0);
					}
					break;
				case CHECK:
				case CONSTRAINT:
				case NOT:
				case NULL:
					{
					setState(2588);
					((CreateDomainStatementContext)_localctx).domainConstraint = domainConstraint();
					((CreateDomainStatementContext)_localctx).domConstraint.add(((CreateDomainStatementContext)_localctx).domainConstraint);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2593);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateServerStatementContext extends ParserRuleContext {
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public List<CharacterStringContext> characterString() {
			return getRuleContexts(CharacterStringContext.class);
		}
		public CharacterStringContext characterString(int i) {
			return getRuleContext(CharacterStringContext.class,i);
		}
		public TerminalNode VERSION() { return getToken(SQLParser.VERSION, 0); }
		public DefineForeignOptionsContext defineForeignOptions() {
			return getRuleContext(DefineForeignOptionsContext.class,0);
		}
		public CreateServerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createServerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateServerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateServerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateServerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateServerStatementContext createServerStatement() throws RecognitionException {
		CreateServerStatementContext _localctx = new CreateServerStatementContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_createServerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2594);
			match(SERVER);
			setState(2596);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,270,_ctx) ) {
			case 1:
				{
				setState(2595);
				ifNotExists();
				}
				break;
			}
			setState(2598);
			identifier();
			setState(2601);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TYPE) {
				{
				setState(2599);
				match(TYPE);
				setState(2600);
				characterString();
				}
			}

			setState(2605);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VERSION) {
				{
				setState(2603);
				match(VERSION);
				setState(2604);
				characterString();
				}
			}

			setState(2607);
			match(FOREIGN);
			setState(2608);
			match(DATA);
			setState(2609);
			match(WRAPPER);
			setState(2610);
			identifier();
			setState(2612);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2611);
				defineForeignOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFtsDictionaryContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public SchemaQualifiedNameContext template;
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(SQLParser.DICTIONARY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode TEMPLATE() { return getToken(SQLParser.TEMPLATE, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<OptionWithValueContext> optionWithValue() {
			return getRuleContexts(OptionWithValueContext.class);
		}
		public OptionWithValueContext optionWithValue(int i) {
			return getRuleContext(OptionWithValueContext.class,i);
		}
		public CreateFtsDictionaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFtsDictionary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateFtsDictionary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateFtsDictionary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateFtsDictionary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFtsDictionaryContext createFtsDictionary() throws RecognitionException {
		CreateFtsDictionaryContext _localctx = new CreateFtsDictionaryContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_createFtsDictionary);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2614);
			match(TEXT);
			setState(2615);
			match(SEARCH);
			setState(2616);
			match(DICTIONARY);
			setState(2617);
			((CreateFtsDictionaryContext)_localctx).name = schemaQualifiedName();
			setState(2618);
			match(LEFT_PAREN);
			setState(2619);
			match(TEMPLATE);
			setState(2620);
			match(EQUAL);
			setState(2621);
			((CreateFtsDictionaryContext)_localctx).template = schemaQualifiedName();
			setState(2626);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2622);
				match(COMMA);
				setState(2623);
				optionWithValue();
				}
				}
				setState(2628);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2629);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionWithValueContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public OptionWithValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionWithValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOptionWithValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOptionWithValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOptionWithValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionWithValueContext optionWithValue() throws RecognitionException {
		OptionWithValueContext _localctx = new OptionWithValueContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_optionWithValue);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2631);
			identifier();
			setState(2632);
			match(EQUAL);
			setState(2633);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFtsConfigurationContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public SchemaQualifiedNameContext parserName;
		public SchemaQualifiedNameContext configName;
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SQLParser.CONFIGURATION, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public TerminalNode PARSER() { return getToken(SQLParser.PARSER, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode COPY() { return getToken(SQLParser.COPY, 0); }
		public CreateFtsConfigurationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFtsConfiguration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateFtsConfiguration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateFtsConfiguration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateFtsConfiguration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFtsConfigurationContext createFtsConfiguration() throws RecognitionException {
		CreateFtsConfigurationContext _localctx = new CreateFtsConfigurationContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_createFtsConfiguration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2635);
			match(TEXT);
			setState(2636);
			match(SEARCH);
			setState(2637);
			match(CONFIGURATION);
			setState(2638);
			((CreateFtsConfigurationContext)_localctx).name = schemaQualifiedName();
			setState(2639);
			match(LEFT_PAREN);
			setState(2646);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PARSER:
				{
				setState(2640);
				match(PARSER);
				setState(2641);
				match(EQUAL);
				setState(2642);
				((CreateFtsConfigurationContext)_localctx).parserName = schemaQualifiedName();
				}
				break;
			case COPY:
				{
				setState(2643);
				match(COPY);
				setState(2644);
				match(EQUAL);
				setState(2645);
				((CreateFtsConfigurationContext)_localctx).configName = schemaQualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2648);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFtsTemplateContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public SchemaQualifiedNameContext initName;
		public SchemaQualifiedNameContext lexizeName;
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode TEMPLATE() { return getToken(SQLParser.TEMPLATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode LEXIZE() { return getToken(SQLParser.LEXIZE, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public List<TerminalNode> INIT() { return getTokens(SQLParser.INIT); }
		public TerminalNode INIT(int i) {
			return getToken(SQLParser.INIT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CreateFtsTemplateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFtsTemplate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateFtsTemplate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateFtsTemplate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateFtsTemplate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFtsTemplateContext createFtsTemplate() throws RecognitionException {
		CreateFtsTemplateContext _localctx = new CreateFtsTemplateContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_createFtsTemplate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2650);
			match(TEXT);
			setState(2651);
			match(SEARCH);
			setState(2652);
			match(TEMPLATE);
			setState(2653);
			((CreateFtsTemplateContext)_localctx).name = schemaQualifiedName();
			setState(2654);
			match(LEFT_PAREN);
			setState(2660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INIT) {
				{
				setState(2655);
				match(INIT);
				setState(2656);
				match(EQUAL);
				setState(2657);
				((CreateFtsTemplateContext)_localctx).initName = schemaQualifiedName();
				setState(2658);
				match(COMMA);
				}
			}

			setState(2662);
			match(LEXIZE);
			setState(2663);
			match(EQUAL);
			setState(2664);
			((CreateFtsTemplateContext)_localctx).lexizeName = schemaQualifiedName();
			setState(2669);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2665);
				match(COMMA);
				setState(2666);
				match(INIT);
				setState(2667);
				match(EQUAL);
				setState(2668);
				((CreateFtsTemplateContext)_localctx).initName = schemaQualifiedName();
				}
			}

			setState(2671);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFtsParserContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public SchemaQualifiedNameContext startFunc;
		public SchemaQualifiedNameContext gettokenFunc;
		public SchemaQualifiedNameContext endFunc;
		public SchemaQualifiedNameContext headlineFunc;
		public SchemaQualifiedNameContext lextypesFunc;
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode PARSER() { return getToken(SQLParser.PARSER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode START() { return getToken(SQLParser.START, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode GETTOKEN() { return getToken(SQLParser.GETTOKEN, 0); }
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public TerminalNode LEXTYPES() { return getToken(SQLParser.LEXTYPES, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public List<TerminalNode> HEADLINE() { return getTokens(SQLParser.HEADLINE); }
		public TerminalNode HEADLINE(int i) {
			return getToken(SQLParser.HEADLINE, i);
		}
		public CreateFtsParserContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFtsParser; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateFtsParser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateFtsParser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateFtsParser(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFtsParserContext createFtsParser() throws RecognitionException {
		CreateFtsParserContext _localctx = new CreateFtsParserContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_createFtsParser);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2673);
			match(TEXT);
			setState(2674);
			match(SEARCH);
			setState(2675);
			match(PARSER);
			setState(2676);
			((CreateFtsParserContext)_localctx).name = schemaQualifiedName();
			setState(2677);
			match(LEFT_PAREN);
			setState(2678);
			match(START);
			setState(2679);
			match(EQUAL);
			setState(2680);
			((CreateFtsParserContext)_localctx).startFunc = schemaQualifiedName();
			setState(2681);
			match(COMMA);
			setState(2682);
			match(GETTOKEN);
			setState(2683);
			match(EQUAL);
			setState(2684);
			((CreateFtsParserContext)_localctx).gettokenFunc = schemaQualifiedName();
			setState(2685);
			match(COMMA);
			setState(2686);
			match(END);
			setState(2687);
			match(EQUAL);
			setState(2688);
			((CreateFtsParserContext)_localctx).endFunc = schemaQualifiedName();
			setState(2689);
			match(COMMA);
			setState(2695);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HEADLINE) {
				{
				setState(2690);
				match(HEADLINE);
				setState(2691);
				match(EQUAL);
				setState(2692);
				((CreateFtsParserContext)_localctx).headlineFunc = schemaQualifiedName();
				setState(2693);
				match(COMMA);
				}
			}

			setState(2697);
			match(LEXTYPES);
			setState(2698);
			match(EQUAL);
			setState(2699);
			((CreateFtsParserContext)_localctx).lextypesFunc = schemaQualifiedName();
			setState(2704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2700);
				match(COMMA);
				setState(2701);
				match(HEADLINE);
				setState(2702);
				match(EQUAL);
				setState(2703);
				((CreateFtsParserContext)_localctx).headlineFunc = schemaQualifiedName();
				}
			}

			setState(2706);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCollationContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TerminalNode COLLATION() { return getToken(SQLParser.COLLATION, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<CollationOptionContext> collationOption() {
			return getRuleContexts(CollationOptionContext.class);
		}
		public CollationOptionContext collationOption(int i) {
			return getRuleContext(CollationOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CreateCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCollationContext createCollation() throws RecognitionException {
		CreateCollationContext _localctx = new CreateCollationContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_createCollation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2708);
			match(COLLATION);
			setState(2710);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,280,_ctx) ) {
			case 1:
				{
				setState(2709);
				ifNotExists();
				}
				break;
			}
			setState(2712);
			((CreateCollationContext)_localctx).name = schemaQualifiedName();
			setState(2727);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FROM:
				{
				setState(2713);
				match(FROM);
				setState(2714);
				schemaQualifiedName();
				}
				break;
			case LEFT_PAREN:
				{
				setState(2715);
				match(LEFT_PAREN);
				setState(2724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION || ((((_la - 457)) & ~0x3f) == 0 && ((1L << (_la - 457)) & ((1L << (DETERMINISTIC - 457)) | (1L << (LC_COLLATE - 457)) | (1L << (LC_CTYPE - 457)) | (1L << (LOCALE - 457)) | (1L << (PROVIDER - 457)))) != 0)) {
					{
					setState(2716);
					collationOption();
					setState(2721);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2717);
						match(COMMA);
						setState(2718);
						collationOption();
						}
						}
						setState(2723);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2726);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterCollationContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TerminalNode COLLATION() { return getToken(SQLParser.COLLATION, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(SQLParser.REFRESH, 0); }
		public TerminalNode VERSION() { return getToken(SQLParser.VERSION, 0); }
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public AlterCollationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterCollation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterCollation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterCollation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterCollation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterCollationContext alterCollation() throws RecognitionException {
		AlterCollationContext _localctx = new AlterCollationContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_alterCollation);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2729);
			match(COLLATION);
			setState(2730);
			((AlterCollationContext)_localctx).name = schemaQualifiedName();
			setState(2736);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REFRESH:
				{
				setState(2731);
				match(REFRESH);
				setState(2732);
				match(VERSION);
				}
				break;
			case RENAME:
				{
				setState(2733);
				renameTo();
				}
				break;
			case OWNER:
				{
				setState(2734);
				ownerTo();
				}
				break;
			case SET:
				{
				setState(2735);
				setSchema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationOptionContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode LOCALE() { return getToken(SQLParser.LOCALE, 0); }
		public TerminalNode LC_COLLATE() { return getToken(SQLParser.LC_COLLATE, 0); }
		public TerminalNode LC_CTYPE() { return getToken(SQLParser.LC_CTYPE, 0); }
		public TerminalNode PROVIDER() { return getToken(SQLParser.PROVIDER, 0); }
		public TerminalNode VERSION() { return getToken(SQLParser.VERSION, 0); }
		public CharacterStringContext characterString() {
			return getRuleContext(CharacterStringContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DETERMINISTIC() { return getToken(SQLParser.DETERMINISTIC, 0); }
		public BooleanValueContext booleanValue() {
			return getRuleContext(BooleanValueContext.class,0);
		}
		public CollationOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCollationOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCollationOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCollationOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationOptionContext collationOption() throws RecognitionException {
		CollationOptionContext _localctx = new CollationOptionContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_collationOption);
		int _la;
		try {
			setState(2747);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSION:
			case LC_COLLATE:
			case LC_CTYPE:
			case LOCALE:
			case PROVIDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(2738);
				_la = _input.LA(1);
				if ( !(_la==VERSION || ((((_la - 478)) & ~0x3f) == 0 && ((1L << (_la - 478)) & ((1L << (LC_COLLATE - 478)) | (1L << (LC_CTYPE - 478)) | (1L << (LOCALE - 478)) | (1L << (PROVIDER - 478)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2739);
				match(EQUAL);
				setState(2742);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(2740);
					characterString();
					}
					break;
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(2741);
					identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DETERMINISTIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(2744);
				match(DETERMINISTIC);
				setState(2745);
				match(EQUAL);
				setState(2746);
				booleanValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserMappingContext extends ParserRuleContext {
		public List<TerminalNode> USER() { return getTokens(SQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(SQLParser.USER, i);
		}
		public TerminalNode MAPPING() { return getToken(SQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public DefineForeignOptionsContext defineForeignOptions() {
			return getRuleContext(DefineForeignOptionsContext.class,0);
		}
		public CreateUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserMappingContext createUserMapping() throws RecognitionException {
		CreateUserMappingContext _localctx = new CreateUserMappingContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_createUserMapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2749);
			match(USER);
			setState(2750);
			match(MAPPING);
			setState(2752);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2751);
				ifNotExists();
				}
			}

			setState(2754);
			match(FOR);
			setState(2757);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case CURRENT_USER:
			case SESSION_USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(2755);
				userName();
				}
				break;
			case USER:
				{
				setState(2756);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2759);
			match(SERVER);
			setState(2760);
			identifier();
			setState(2762);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2761);
				defineForeignOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserMappingContext extends ParserRuleContext {
		public List<TerminalNode> USER() { return getTokens(SQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(SQLParser.USER, i);
		}
		public TerminalNode MAPPING() { return getToken(SQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public DefineForeignOptionsContext defineForeignOptions() {
			return getRuleContext(DefineForeignOptionsContext.class,0);
		}
		public AlterUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserMappingContext alterUserMapping() throws RecognitionException {
		AlterUserMappingContext _localctx = new AlterUserMappingContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_alterUserMapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2764);
			match(USER);
			setState(2765);
			match(MAPPING);
			setState(2766);
			match(FOR);
			setState(2769);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case CURRENT_USER:
			case SESSION_USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(2767);
				userName();
				}
				break;
			case USER:
				{
				setState(2768);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2771);
			match(SERVER);
			setState(2772);
			identifier();
			setState(2774);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(2773);
				defineForeignOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserOrRoleContext extends ParserRuleContext {
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public AlterUserOrRoleSetResetContext alterUserOrRoleSetReset() {
			return getRuleContext(AlterUserOrRoleSetResetContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public List<UserOrRoleOptionForAlterContext> userOrRoleOptionForAlter() {
			return getRuleContexts(UserOrRoleOptionForAlterContext.class);
		}
		public UserOrRoleOptionForAlterContext userOrRoleOptionForAlter(int i) {
			return getRuleContext(UserOrRoleOptionForAlterContext.class,i);
		}
		public AlterUserOrRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserOrRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterUserOrRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterUserOrRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterUserOrRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserOrRoleContext alterUserOrRole() throws RecognitionException {
		AlterUserOrRoleContext _localctx = new AlterUserOrRoleContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_alterUserOrRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2776);
			_la = _input.LA(1);
			if ( !(_la==ROLE || _la==USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2790);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				{
				setState(2777);
				alterUserOrRoleSetReset();
				}
				break;
			case 2:
				{
				setState(2778);
				identifier();
				setState(2779);
				renameTo();
				}
				break;
			case 3:
				{
				setState(2781);
				userName();
				setState(2783);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(2782);
					match(WITH);
					}
				}

				setState(2786); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2785);
					userOrRoleOptionForAlter();
					}
					}
					setState(2788); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==CONNECTION || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==VALID || ((((_la - 446)) & ~0x3f) == 0 && ((1L << (_la - 446)) & ((1L << (BYPASSRLS - 446)) | (1L << (CREATEDB - 446)) | (1L << (CREATEROLE - 446)) | (1L << (LOGIN - 446)) | (1L << (NOBYPASSRLS - 446)) | (1L << (NOCREATEDB - 446)) | (1L << (NOCREATEROLE - 446)) | (1L << (NOINHERIT - 446)) | (1L << (NOLOGIN - 446)) | (1L << (NOREPLICATION - 446)) | (1L << (NOSUPERUSER - 446)))) != 0) || _la==REPLICATION || _la==SUPERUSER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterUserOrRoleSetResetContext extends ParserRuleContext {
		public UserOrRoleSetResetContext userOrRoleSetReset() {
			return getRuleContext(UserOrRoleSetResetContext.class,0);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterUserOrRoleSetResetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterUserOrRoleSetReset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterUserOrRoleSetReset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterUserOrRoleSetReset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterUserOrRoleSetReset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterUserOrRoleSetResetContext alterUserOrRoleSetReset() throws RecognitionException {
		AlterUserOrRoleSetResetContext _localctx = new AlterUserOrRoleSetResetContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_alterUserOrRoleSetReset);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2794);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case CURRENT_USER:
			case SESSION_USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(2792);
				userName();
				}
				break;
			case ALL:
				{
				setState(2793);
				match(ALL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2799);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IN) {
				{
				setState(2796);
				match(IN);
				setState(2797);
				match(DATABASE);
				setState(2798);
				identifier();
				}
			}

			setState(2801);
			userOrRoleSetReset();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserOrRoleSetResetContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public SetStatementValueContext setStatementValue() {
			return getRuleContext(SetStatementValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public UserOrRoleSetResetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userOrRoleSetReset; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUserOrRoleSetReset(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUserOrRoleSetReset(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUserOrRoleSetReset(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserOrRoleSetResetContext userOrRoleSetReset() throws RecognitionException {
		UserOrRoleSetResetContext _localctx = new UserOrRoleSetResetContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_userOrRoleSetReset);
		int _la;
		try {
			setState(2832);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2803);
				match(SET);
				setState(2807);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
				case 1:
					{
					setState(2804);
					identifier();
					setState(2805);
					match(DOT);
					}
					break;
				}
				setState(2809);
				identifier();
				setState(2810);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2811);
				setStatementValue();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2813);
				match(SET);
				setState(2817);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
				case 1:
					{
					setState(2814);
					identifier();
					setState(2815);
					match(DOT);
					}
					break;
				}
				setState(2819);
				identifier();
				setState(2820);
				match(FROM);
				setState(2821);
				match(CURRENT);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2823);
				match(RESET);
				setState(2827);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,299,_ctx) ) {
				case 1:
					{
					setState(2824);
					identifier();
					setState(2825);
					match(DOT);
					}
					break;
				}
				setState(2829);
				identifier();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2830);
				match(RESET);
				setState(2831);
				match(ALL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(SQLParser.GROUP, 0); }
		public AlterGroupActionContext alterGroupAction() {
			return getRuleContext(AlterGroupActionContext.class,0);
		}
		public AlterGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupContext alterGroup() throws RecognitionException {
		AlterGroupContext _localctx = new AlterGroupContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_alterGroup);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2834);
			match(GROUP);
			setState(2835);
			alterGroupAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterGroupActionContext extends ParserRuleContext {
		public IdentifierContext name;
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public AlterGroupActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterGroupAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterGroupAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterGroupAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterGroupAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterGroupActionContext alterGroupAction() throws RecognitionException {
		AlterGroupActionContext _localctx = new AlterGroupActionContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_alterGroupAction);
		int _la;
		try {
			setState(2845);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2837);
				((AlterGroupActionContext)_localctx).name = identifier();
				setState(2838);
				renameTo();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2840);
				userName();
				setState(2841);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2842);
				match(USER);
				setState(2843);
				identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public AlterTablespaceActionContext alterTablespaceAction() {
			return getRuleContext(AlterTablespaceActionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceContext alterTablespace() throws RecognitionException {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_alterTablespace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2847);
			match(TABLESPACE);
			setState(2848);
			((AlterTablespaceContext)_localctx).name = identifier();
			setState(2849);
			alterTablespaceAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOwnerContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TargetOperatorContext targetOperator() {
			return getRuleContext(TargetOperatorContext.class,0);
		}
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode AGGREGATE() { return getToken(SQLParser.AGGREGATE, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode DICTIONARY() { return getToken(SQLParser.DICTIONARY, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SQLParser.CONFIGURATION, 0); }
		public TerminalNode DOMAIN() { return getToken(SQLParser.DOMAIN, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public TerminalNode MATERIALIZED() { return getToken(SQLParser.MATERIALIZED, 0); }
		public AlterOwnerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOwner; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterOwner(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterOwner(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterOwner(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOwnerContext alterOwner() throws RecognitionException {
		AlterOwnerContext _localctx = new AlterOwnerContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_alterOwner);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2880);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				{
				setState(2851);
				match(OPERATOR);
				setState(2852);
				targetOperator();
				}
				break;
			case LARGE:
				{
				setState(2853);
				match(LARGE);
				setState(2854);
				match(OBJECT);
				setState(2855);
				match(NUMBER_LITERAL);
				}
				break;
			case AGGREGATE:
			case FUNCTION:
			case PROCEDURE:
				{
				setState(2856);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2857);
				((AlterOwnerContext)_localctx).name = schemaQualifiedName();
				setState(2858);
				functionArgs();
				}
				break;
			case DOMAIN:
			case MATERIALIZED:
			case SCHEMA:
			case SEQUENCE:
			case TEXT:
			case TYPE:
			case VIEW:
				{
				setState(2874);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,303,_ctx) ) {
				case 1:
					{
					setState(2860);
					match(TEXT);
					setState(2861);
					match(SEARCH);
					setState(2862);
					match(DICTIONARY);
					}
					break;
				case 2:
					{
					setState(2863);
					match(TEXT);
					setState(2864);
					match(SEARCH);
					setState(2865);
					match(CONFIGURATION);
					}
					break;
				case 3:
					{
					setState(2866);
					match(DOMAIN);
					}
					break;
				case 4:
					{
					setState(2867);
					match(SCHEMA);
					}
					break;
				case 5:
					{
					setState(2868);
					match(SEQUENCE);
					}
					break;
				case 6:
					{
					setState(2869);
					match(TYPE);
					}
					break;
				case 7:
					{
					setState(2871);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MATERIALIZED) {
						{
						setState(2870);
						match(MATERIALIZED);
						}
					}

					setState(2873);
					match(VIEW);
					}
					break;
				}
				setState(2877);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					setState(2876);
					ifExists();
					}
					break;
				}
				setState(2879);
				((AlterOwnerContext)_localctx).name = schemaQualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2882);
			ownerTo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTablespaceActionContext extends ParserRuleContext {
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<OptionWithValueContext> optionWithValue() {
			return getRuleContexts(OptionWithValueContext.class);
		}
		public OptionWithValueContext optionWithValue(int i) {
			return getRuleContext(OptionWithValueContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public AlterTablespaceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTablespaceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterTablespaceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterTablespaceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterTablespaceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTablespaceActionContext alterTablespaceAction() throws RecognitionException {
		AlterTablespaceActionContext _localctx = new AlterTablespaceActionContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_alterTablespaceAction);
		int _la;
		try {
			setState(2903);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(2884);
				renameTo();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2885);
				ownerTo();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(2886);
				match(SET);
				setState(2887);
				match(LEFT_PAREN);
				setState(2888);
				optionWithValue();
				setState(2893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2889);
					match(COMMA);
					setState(2890);
					optionWithValue();
					}
					}
					setState(2895);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2896);
				match(RIGHT_PAREN);
				}
				break;
			case RESET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2898);
				match(RESET);
				setState(2899);
				match(LEFT_PAREN);
				setState(2900);
				identifierList();
				setState(2901);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterStatisticsContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TerminalNode STATISTICS() { return getToken(SQLParser.STATISTICS, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public AlterStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterStatisticsContext alterStatistics() throws RecognitionException {
		AlterStatisticsContext _localctx = new AlterStatisticsContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_alterStatistics);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2905);
			match(STATISTICS);
			setState(2906);
			((AlterStatisticsContext)_localctx).name = schemaQualifiedName();
			setState(2910);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(2907);
				renameTo();
				}
				break;
			case SET:
				{
				setState(2908);
				setSchema();
				}
				break;
			case OWNER:
				{
				setState(2909);
				ownerTo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignDataWrapperContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public AlterForeignDataWrapperActionContext alterForeignDataWrapperAction() {
			return getRuleContext(AlterForeignDataWrapperActionContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignDataWrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterForeignDataWrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterForeignDataWrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignDataWrapperContext alterForeignDataWrapper() throws RecognitionException {
		AlterForeignDataWrapperContext _localctx = new AlterForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_alterForeignDataWrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2912);
			match(FOREIGN);
			setState(2913);
			match(DATA);
			setState(2914);
			match(WRAPPER);
			setState(2915);
			((AlterForeignDataWrapperContext)_localctx).name = identifier();
			setState(2916);
			alterForeignDataWrapperAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterForeignDataWrapperActionContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(SQLParser.HANDLER, 0); }
		public List<SchemaQualifiedNameNontypeContext> schemaQualifiedNameNontype() {
			return getRuleContexts(SchemaQualifiedNameNontypeContext.class);
		}
		public SchemaQualifiedNameNontypeContext schemaQualifiedNameNontype(int i) {
			return getRuleContext(SchemaQualifiedNameNontypeContext.class,i);
		}
		public List<TerminalNode> NO() { return getTokens(SQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(SQLParser.NO, i);
		}
		public TerminalNode VALIDATOR() { return getToken(SQLParser.VALIDATOR, 0); }
		public DefineForeignOptionsContext defineForeignOptions() {
			return getRuleContext(DefineForeignOptionsContext.class,0);
		}
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public AlterForeignDataWrapperActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterForeignDataWrapperAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterForeignDataWrapperAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterForeignDataWrapperAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterForeignDataWrapperAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterForeignDataWrapperActionContext alterForeignDataWrapperAction() throws RecognitionException {
		AlterForeignDataWrapperActionContext _localctx = new AlterForeignDataWrapperActionContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_alterForeignDataWrapperAction);
		int _la;
		try {
			setState(2935);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EOF:
			case HANDLER:
			case NO:
			case OPTIONS:
			case VALIDATOR:
			case SEMI_COLON:
				enterOuterAlt(_localctx, 1);
				{
				setState(2922);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					setState(2918);
					match(HANDLER);
					setState(2919);
					schemaQualifiedNameNontype();
					}
					break;
				case 2:
					{
					setState(2920);
					match(NO);
					setState(2921);
					match(HANDLER);
					}
					break;
				}
				setState(2928);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VALIDATOR:
					{
					setState(2924);
					match(VALIDATOR);
					setState(2925);
					schemaQualifiedNameNontype();
					}
					break;
				case NO:
					{
					setState(2926);
					match(NO);
					setState(2927);
					match(VALIDATOR);
					}
					break;
				case EOF:
				case OPTIONS:
				case SEMI_COLON:
					break;
				default:
					break;
				}
				setState(2931);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONS) {
					{
					setState(2930);
					defineForeignOptions();
					}
				}

				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2933);
				ownerTo();
				}
				break;
			case RENAME:
				enterOuterAlt(_localctx, 3);
				{
				setState(2934);
				renameTo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorStatementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TargetOperatorContext targetOperator() {
			return getRuleContext(TargetOperatorContext.class,0);
		}
		public AlterOperatorActionContext alterOperatorAction() {
			return getRuleContext(AlterOperatorActionContext.class,0);
		}
		public AlterOperatorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterOperatorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterOperatorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterOperatorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorStatementContext alterOperatorStatement() throws RecognitionException {
		AlterOperatorStatementContext _localctx = new AlterOperatorStatementContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_alterOperatorStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2937);
			match(OPERATOR);
			setState(2938);
			targetOperator();
			setState(2939);
			alterOperatorAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorActionContext extends ParserRuleContext {
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<OperatorSetRestrictJoinContext> operatorSetRestrictJoin() {
			return getRuleContexts(OperatorSetRestrictJoinContext.class);
		}
		public OperatorSetRestrictJoinContext operatorSetRestrictJoin(int i) {
			return getRuleContext(OperatorSetRestrictJoinContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public AlterOperatorActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterOperatorAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterOperatorAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterOperatorAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorActionContext alterOperatorAction() throws RecognitionException {
		AlterOperatorActionContext _localctx = new AlterOperatorActionContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_alterOperatorAction);
		int _la;
		try {
			setState(2954);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,314,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2941);
				setSchema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2942);
				match(SET);
				setState(2943);
				match(LEFT_PAREN);
				setState(2944);
				operatorSetRestrictJoin();
				setState(2949);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2945);
					match(COMMA);
					setState(2946);
					operatorSetRestrictJoin();
					}
					}
					setState(2951);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2952);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorSetRestrictJoinContext extends ParserRuleContext {
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public OperatorSetRestrictJoinContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorSetRestrictJoin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOperatorSetRestrictJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOperatorSetRestrictJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOperatorSetRestrictJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorSetRestrictJoinContext operatorSetRestrictJoin() throws RecognitionException {
		OperatorSetRestrictJoinContext _localctx = new OperatorSetRestrictJoinContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_operatorSetRestrictJoin);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2956);
			_la = _input.LA(1);
			if ( !(_la==RESTRICT || _la==JOIN) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2957);
			match(EQUAL);
			setState(2958);
			schemaQualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropUserMappingContext extends ParserRuleContext {
		public List<TerminalNode> USER() { return getTokens(SQLParser.USER); }
		public TerminalNode USER(int i) {
			return getToken(SQLParser.USER, i);
		}
		public TerminalNode MAPPING() { return getToken(SQLParser.MAPPING, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropUserMappingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropUserMapping; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropUserMapping(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropUserMapping(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropUserMapping(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropUserMappingContext dropUserMapping() throws RecognitionException {
		DropUserMappingContext _localctx = new DropUserMappingContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_dropUserMapping);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2960);
			match(USER);
			setState(2961);
			match(MAPPING);
			setState(2963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(2962);
				ifExists();
				}
			}

			setState(2965);
			match(FOR);
			setState(2968);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case CURRENT_USER:
			case SESSION_USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(2966);
				userName();
				}
				break;
			case USER:
				{
				setState(2967);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2970);
			match(SERVER);
			setState(2971);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOwnedContext extends ParserRuleContext {
		public TerminalNode OWNED() { return getToken(SQLParser.OWNED, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public DropOwnedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOwned; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropOwned(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropOwned(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropOwned(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOwnedContext dropOwned() throws RecognitionException {
		DropOwnedContext _localctx = new DropOwnedContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_dropOwned);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2973);
			match(OWNED);
			setState(2974);
			match(BY);
			setState(2975);
			userName();
			setState(2980);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2976);
				match(COMMA);
				setState(2977);
				userName();
				}
				}
				setState(2982);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2983);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorStatementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public List<TargetOperatorContext> targetOperator() {
			return getRuleContexts(TargetOperatorContext.class);
		}
		public TargetOperatorContext targetOperator(int i) {
			return getRuleContext(TargetOperatorContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public DropOperatorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropOperatorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropOperatorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropOperatorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorStatementContext dropOperatorStatement() throws RecognitionException {
		DropOperatorStatementContext _localctx = new DropOperatorStatementContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_dropOperatorStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2986);
			match(OPERATOR);
			setState(2988);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,319,_ctx) ) {
			case 1:
				{
				setState(2987);
				ifExists();
				}
				break;
			}
			setState(2990);
			targetOperator();
			setState(2995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2991);
				match(COMMA);
				setState(2992);
				targetOperator();
				}
				}
				setState(2997);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2999);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(2998);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TargetOperatorContext extends ParserRuleContext {
		public OperatorNameContext name;
		public DataTypeContext leftType;
		public DataTypeContext rightType;
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public OperatorNameContext operatorName() {
			return getRuleContext(OperatorNameContext.class,0);
		}
		public List<TerminalNode> NONE() { return getTokens(SQLParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(SQLParser.NONE, i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TargetOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_targetOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTargetOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTargetOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTargetOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TargetOperatorContext targetOperator() throws RecognitionException {
		TargetOperatorContext _localctx = new TargetOperatorContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_targetOperator);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3001);
			((TargetOperatorContext)_localctx).name = operatorName();
			setState(3002);
			match(LEFT_PAREN);
			setState(3005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,322,_ctx) ) {
			case 1:
				{
				setState(3003);
				((TargetOperatorContext)_localctx).leftType = dataType();
				}
				break;
			case 2:
				{
				setState(3004);
				match(NONE);
				}
				break;
			}
			setState(3007);
			match(COMMA);
			setState(3010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(3008);
				((TargetOperatorContext)_localctx).rightType = dataType();
				}
				break;
			case 2:
				{
				setState(3009);
				match(NONE);
				}
				break;
			}
			setState(3012);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DomainConstraintContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode CHECK() { return getToken(SQLParser.CHECK, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public DomainConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_domainConstraint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDomainConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDomainConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDomainConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DomainConstraintContext domainConstraint() throws RecognitionException {
		DomainConstraintContext _localctx = new DomainConstraintContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_domainConstraint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3014);
				match(CONSTRAINT);
				setState(3015);
				((DomainConstraintContext)_localctx).name = identifier();
				}
			}

			setState(3027);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHECK:
				{
				setState(3018);
				match(CHECK);
				setState(3019);
				match(LEFT_PAREN);
				setState(3020);
				vex(0);
				setState(3021);
				match(RIGHT_PAREN);
				}
				break;
			case NOT:
			case NULL:
				{
				setState(3024);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3023);
					match(NOT);
					}
				}

				setState(3026);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTransformStatementContext extends ParserRuleContext {
		public TerminalNode TRANSFORM() { return getToken(SQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<TerminalNode> SQL() { return getTokens(SQLParser.SQL); }
		public TerminalNode SQL(int i) {
			return getToken(SQLParser.SQL, i);
		}
		public List<TerminalNode> WITH() { return getTokens(SQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(SQLParser.WITH, i);
		}
		public List<TerminalNode> FUNCTION() { return getTokens(SQLParser.FUNCTION); }
		public TerminalNode FUNCTION(int i) {
			return getToken(SQLParser.FUNCTION, i);
		}
		public List<FunctionParametersContext> functionParameters() {
			return getRuleContexts(FunctionParametersContext.class);
		}
		public FunctionParametersContext functionParameters(int i) {
			return getRuleContext(FunctionParametersContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public CreateTransformStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTransformStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateTransformStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateTransformStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateTransformStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTransformStatementContext createTransformStatement() throws RecognitionException {
		CreateTransformStatementContext _localctx = new CreateTransformStatementContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_createTransformStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3031);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(3029);
				match(OR);
				setState(3030);
				match(REPLACE);
				}
			}

			setState(3033);
			match(TRANSFORM);
			setState(3034);
			match(FOR);
			setState(3035);
			dataType();
			setState(3036);
			match(LANGUAGE);
			setState(3037);
			identifier();
			setState(3038);
			match(LEFT_PAREN);
			setState(3039);
			match(FROM);
			setState(3040);
			match(SQL);
			setState(3041);
			match(WITH);
			setState(3042);
			match(FUNCTION);
			setState(3043);
			functionParameters();
			setState(3044);
			match(COMMA);
			setState(3045);
			match(TO);
			setState(3046);
			match(SQL);
			setState(3047);
			match(WITH);
			setState(3048);
			match(FUNCTION);
			setState(3049);
			functionParameters();
			setState(3050);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAccessMethodContext extends ParserRuleContext {
		public TerminalNode ACCESS() { return getToken(SQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(SQLParser.METHOD, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode HANDLER() { return getToken(SQLParser.HANDLER, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public CreateAccessMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAccessMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateAccessMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateAccessMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateAccessMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAccessMethodContext createAccessMethod() throws RecognitionException {
		CreateAccessMethodContext _localctx = new CreateAccessMethodContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_createAccessMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3052);
			match(ACCESS);
			setState(3053);
			match(METHOD);
			setState(3054);
			identifier();
			setState(3055);
			match(TYPE);
			setState(3056);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==TABLE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3057);
			match(HANDLER);
			setState(3058);
			schemaQualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateUserOrRoleContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<UserOrRoleOptionContext> userOrRoleOption() {
			return getRuleContexts(UserOrRoleOptionContext.class);
		}
		public UserOrRoleOptionContext userOrRoleOption(int i) {
			return getRuleContext(UserOrRoleOptionContext.class,i);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public CreateUserOrRoleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createUserOrRole; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateUserOrRole(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateUserOrRole(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateUserOrRole(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateUserOrRoleContext createUserOrRole() throws RecognitionException {
		CreateUserOrRoleContext _localctx = new CreateUserOrRoleContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_createUserOrRole);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3060);
			_la = _input.LA(1);
			if ( !(_la==ROLE || _la==USER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3061);
			((CreateUserOrRoleContext)_localctx).name = identifier();
			setState(3072);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADMIN || _la==CONNECTION || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==ROLE || _la==SYSID || _la==VALID || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (IN - 405)) | (1L << (USER - 405)) | (1L << (WITH - 405)) | (1L << (BYPASSRLS - 405)) | (1L << (CREATEDB - 405)) | (1L << (CREATEROLE - 405)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (LOGIN - 485)) | (1L << (NOBYPASSRLS - 485)) | (1L << (NOCREATEDB - 485)) | (1L << (NOCREATEROLE - 485)) | (1L << (NOINHERIT - 485)) | (1L << (NOLOGIN - 485)) | (1L << (NOREPLICATION - 485)) | (1L << (NOSUPERUSER - 485)) | (1L << (REPLICATION - 485)) | (1L << (SUPERUSER - 485)))) != 0)) {
				{
				setState(3063);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3062);
					match(WITH);
					}
				}

				setState(3065);
				userOrRoleOption();
				setState(3069);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==ADMIN || _la==CONNECTION || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==ROLE || _la==SYSID || _la==VALID || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (IN - 405)) | (1L << (USER - 405)) | (1L << (BYPASSRLS - 405)) | (1L << (CREATEDB - 405)) | (1L << (CREATEROLE - 405)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (LOGIN - 485)) | (1L << (NOBYPASSRLS - 485)) | (1L << (NOCREATEDB - 485)) | (1L << (NOCREATEROLE - 485)) | (1L << (NOINHERIT - 485)) | (1L << (NOLOGIN - 485)) | (1L << (NOREPLICATION - 485)) | (1L << (NOSUPERUSER - 485)) | (1L << (REPLICATION - 485)) | (1L << (SUPERUSER - 485)))) != 0)) {
					{
					{
					setState(3066);
					userOrRoleOption();
					}
					}
					setState(3071);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserOrRoleOptionContext extends ParserRuleContext {
		public UserOrRoleOrGroupCommonOptionContext userOrRoleOrGroupCommonOption() {
			return getRuleContext(UserOrRoleOrGroupCommonOptionContext.class,0);
		}
		public UserOrRoleCommonOptionContext userOrRoleCommonOption() {
			return getRuleContext(UserOrRoleCommonOptionContext.class,0);
		}
		public UserOrRoleOrGroupOptionForCreateContext userOrRoleOrGroupOptionForCreate() {
			return getRuleContext(UserOrRoleOrGroupOptionForCreateContext.class,0);
		}
		public UserOrRoleOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userOrRoleOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUserOrRoleOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUserOrRoleOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUserOrRoleOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserOrRoleOptionContext userOrRoleOption() throws RecognitionException {
		UserOrRoleOptionContext _localctx = new UserOrRoleOptionContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_userOrRoleOption);
		try {
			setState(3077);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTED:
			case INHERIT:
			case PASSWORD:
			case VALID:
			case CREATEDB:
			case CREATEROLE:
			case LOGIN:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOSUPERUSER:
			case SUPERUSER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3074);
				userOrRoleOrGroupCommonOption();
				}
				break;
			case CONNECTION:
			case BYPASSRLS:
			case NOBYPASSRLS:
			case NOREPLICATION:
			case REPLICATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(3075);
				userOrRoleCommonOption();
				}
				break;
			case ADMIN:
			case ROLE:
			case SYSID:
			case IN:
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(3076);
				userOrRoleOrGroupOptionForCreate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserOrRoleOptionForAlterContext extends ParserRuleContext {
		public UserOrRoleOrGroupCommonOptionContext userOrRoleOrGroupCommonOption() {
			return getRuleContext(UserOrRoleOrGroupCommonOptionContext.class,0);
		}
		public UserOrRoleCommonOptionContext userOrRoleCommonOption() {
			return getRuleContext(UserOrRoleCommonOptionContext.class,0);
		}
		public UserOrRoleOptionForAlterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userOrRoleOptionForAlter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUserOrRoleOptionForAlter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUserOrRoleOptionForAlter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUserOrRoleOptionForAlter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserOrRoleOptionForAlterContext userOrRoleOptionForAlter() throws RecognitionException {
		UserOrRoleOptionForAlterContext _localctx = new UserOrRoleOptionForAlterContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_userOrRoleOptionForAlter);
		try {
			setState(3081);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTED:
			case INHERIT:
			case PASSWORD:
			case VALID:
			case CREATEDB:
			case CREATEROLE:
			case LOGIN:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOSUPERUSER:
			case SUPERUSER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3079);
				userOrRoleOrGroupCommonOption();
				}
				break;
			case CONNECTION:
			case BYPASSRLS:
			case NOBYPASSRLS:
			case NOREPLICATION:
			case REPLICATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(3080);
				userOrRoleCommonOption();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserOrRoleOrGroupCommonOptionContext extends ParserRuleContext {
		public Token password;
		public Token dateTime;
		public TerminalNode SUPERUSER() { return getToken(SQLParser.SUPERUSER, 0); }
		public TerminalNode NOSUPERUSER() { return getToken(SQLParser.NOSUPERUSER, 0); }
		public TerminalNode CREATEDB() { return getToken(SQLParser.CREATEDB, 0); }
		public TerminalNode NOCREATEDB() { return getToken(SQLParser.NOCREATEDB, 0); }
		public TerminalNode CREATEROLE() { return getToken(SQLParser.CREATEROLE, 0); }
		public TerminalNode NOCREATEROLE() { return getToken(SQLParser.NOCREATEROLE, 0); }
		public TerminalNode INHERIT() { return getToken(SQLParser.INHERIT, 0); }
		public TerminalNode NOINHERIT() { return getToken(SQLParser.NOINHERIT, 0); }
		public TerminalNode LOGIN() { return getToken(SQLParser.LOGIN, 0); }
		public TerminalNode NOLOGIN() { return getToken(SQLParser.NOLOGIN, 0); }
		public TerminalNode PASSWORD() { return getToken(SQLParser.PASSWORD, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode ENCRYPTED() { return getToken(SQLParser.ENCRYPTED, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public TerminalNode VALID() { return getToken(SQLParser.VALID, 0); }
		public TerminalNode UNTIL() { return getToken(SQLParser.UNTIL, 0); }
		public UserOrRoleOrGroupCommonOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userOrRoleOrGroupCommonOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUserOrRoleOrGroupCommonOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUserOrRoleOrGroupCommonOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUserOrRoleOrGroupCommonOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserOrRoleOrGroupCommonOptionContext userOrRoleOrGroupCommonOption() throws RecognitionException {
		UserOrRoleOrGroupCommonOptionContext _localctx = new UserOrRoleOrGroupCommonOptionContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_userOrRoleOrGroupCommonOption);
		int _la;
		try {
			setState(3104);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SUPERUSER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3083);
				match(SUPERUSER);
				}
				break;
			case NOSUPERUSER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3084);
				match(NOSUPERUSER);
				}
				break;
			case CREATEDB:
				enterOuterAlt(_localctx, 3);
				{
				setState(3085);
				match(CREATEDB);
				}
				break;
			case NOCREATEDB:
				enterOuterAlt(_localctx, 4);
				{
				setState(3086);
				match(NOCREATEDB);
				}
				break;
			case CREATEROLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3087);
				match(CREATEROLE);
				}
				break;
			case NOCREATEROLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(3088);
				match(NOCREATEROLE);
				}
				break;
			case INHERIT:
				enterOuterAlt(_localctx, 7);
				{
				setState(3089);
				match(INHERIT);
				}
				break;
			case NOINHERIT:
				enterOuterAlt(_localctx, 8);
				{
				setState(3090);
				match(NOINHERIT);
				}
				break;
			case LOGIN:
				enterOuterAlt(_localctx, 9);
				{
				setState(3091);
				match(LOGIN);
				}
				break;
			case NOLOGIN:
				enterOuterAlt(_localctx, 10);
				{
				setState(3092);
				match(NOLOGIN);
				}
				break;
			case ENCRYPTED:
			case PASSWORD:
				enterOuterAlt(_localctx, 11);
				{
				setState(3094);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCRYPTED) {
					{
					setState(3093);
					match(ENCRYPTED);
					}
				}

				setState(3096);
				match(PASSWORD);
				setState(3099);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case Character_String_Literal:
					{
					setState(3097);
					((UserOrRoleOrGroupCommonOptionContext)_localctx).password = match(Character_String_Literal);
					}
					break;
				case NULL:
					{
					setState(3098);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case VALID:
				enterOuterAlt(_localctx, 12);
				{
				setState(3101);
				match(VALID);
				setState(3102);
				match(UNTIL);
				setState(3103);
				((UserOrRoleOrGroupCommonOptionContext)_localctx).dateTime = match(Character_String_Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserOrRoleCommonOptionContext extends ParserRuleContext {
		public TerminalNode REPLICATION() { return getToken(SQLParser.REPLICATION, 0); }
		public TerminalNode NOREPLICATION() { return getToken(SQLParser.NOREPLICATION, 0); }
		public TerminalNode BYPASSRLS() { return getToken(SQLParser.BYPASSRLS, 0); }
		public TerminalNode NOBYPASSRLS() { return getToken(SQLParser.NOBYPASSRLS, 0); }
		public TerminalNode CONNECTION() { return getToken(SQLParser.CONNECTION, 0); }
		public TerminalNode LIMIT() { return getToken(SQLParser.LIMIT, 0); }
		public SignedNumberLiteralContext signedNumberLiteral() {
			return getRuleContext(SignedNumberLiteralContext.class,0);
		}
		public UserOrRoleCommonOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userOrRoleCommonOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUserOrRoleCommonOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUserOrRoleCommonOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUserOrRoleCommonOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserOrRoleCommonOptionContext userOrRoleCommonOption() throws RecognitionException {
		UserOrRoleCommonOptionContext _localctx = new UserOrRoleCommonOptionContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_userOrRoleCommonOption);
		try {
			setState(3113);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case REPLICATION:
				enterOuterAlt(_localctx, 1);
				{
				setState(3106);
				match(REPLICATION);
				}
				break;
			case NOREPLICATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(3107);
				match(NOREPLICATION);
				}
				break;
			case BYPASSRLS:
				enterOuterAlt(_localctx, 3);
				{
				setState(3108);
				match(BYPASSRLS);
				}
				break;
			case NOBYPASSRLS:
				enterOuterAlt(_localctx, 4);
				{
				setState(3109);
				match(NOBYPASSRLS);
				}
				break;
			case CONNECTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(3110);
				match(CONNECTION);
				setState(3111);
				match(LIMIT);
				setState(3112);
				signedNumberLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserOrRoleOrGroupOptionForCreateContext extends ParserRuleContext {
		public TerminalNode SYSID() { return getToken(SQLParser.SYSID, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public TerminalNode GROUP() { return getToken(SQLParser.GROUP, 0); }
		public TerminalNode ADMIN() { return getToken(SQLParser.ADMIN, 0); }
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public UserOrRoleOrGroupOptionForCreateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userOrRoleOrGroupOptionForCreate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUserOrRoleOrGroupOptionForCreate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUserOrRoleOrGroupOptionForCreate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUserOrRoleOrGroupOptionForCreate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserOrRoleOrGroupOptionForCreateContext userOrRoleOrGroupOptionForCreate() throws RecognitionException {
		UserOrRoleOrGroupOptionForCreateContext _localctx = new UserOrRoleOrGroupOptionForCreateContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_userOrRoleOrGroupOptionForCreate);
		try {
			setState(3127);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SYSID:
				enterOuterAlt(_localctx, 1);
				{
				setState(3115);
				match(SYSID);
				setState(3116);
				vex(0);
				}
				break;
			case ADMIN:
			case ROLE:
			case IN:
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3124);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,337,_ctx) ) {
				case 1:
					{
					setState(3117);
					match(IN);
					setState(3118);
					match(ROLE);
					}
					break;
				case 2:
					{
					setState(3119);
					match(IN);
					setState(3120);
					match(GROUP);
					}
					break;
				case 3:
					{
					setState(3121);
					match(ROLE);
					}
					break;
				case 4:
					{
					setState(3122);
					match(ADMIN);
					}
					break;
				case 5:
					{
					setState(3123);
					match(USER);
					}
					break;
				}
				setState(3126);
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateGroupContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode GROUP() { return getToken(SQLParser.GROUP, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public List<GroupOptionContext> groupOption() {
			return getRuleContexts(GroupOptionContext.class);
		}
		public GroupOptionContext groupOption(int i) {
			return getRuleContext(GroupOptionContext.class,i);
		}
		public CreateGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateGroupContext createGroup() throws RecognitionException {
		CreateGroupContext _localctx = new CreateGroupContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_createGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3129);
			match(GROUP);
			setState(3130);
			((CreateGroupContext)_localctx).name = identifier();
			setState(3139);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ADMIN || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==ROLE || _la==SYSID || _la==VALID || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (IN - 405)) | (1L << (USER - 405)) | (1L << (WITH - 405)) | (1L << (CREATEDB - 405)) | (1L << (CREATEROLE - 405)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (LOGIN - 485)) | (1L << (NOCREATEDB - 485)) | (1L << (NOCREATEROLE - 485)) | (1L << (NOINHERIT - 485)) | (1L << (NOLOGIN - 485)) | (1L << (NOSUPERUSER - 485)) | (1L << (SUPERUSER - 485)))) != 0)) {
				{
				setState(3132);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3131);
					match(WITH);
					}
				}

				setState(3135); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3134);
					groupOption();
					}
					}
					setState(3137); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ADMIN || _la==ENCRYPTED || _la==INHERIT || _la==PASSWORD || _la==ROLE || _la==SYSID || _la==VALID || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (IN - 405)) | (1L << (USER - 405)) | (1L << (CREATEDB - 405)) | (1L << (CREATEROLE - 405)))) != 0) || ((((_la - 485)) & ~0x3f) == 0 && ((1L << (_la - 485)) & ((1L << (LOGIN - 485)) | (1L << (NOCREATEDB - 485)) | (1L << (NOCREATEROLE - 485)) | (1L << (NOINHERIT - 485)) | (1L << (NOLOGIN - 485)) | (1L << (NOSUPERUSER - 485)) | (1L << (SUPERUSER - 485)))) != 0) );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupOptionContext extends ParserRuleContext {
		public UserOrRoleOrGroupCommonOptionContext userOrRoleOrGroupCommonOption() {
			return getRuleContext(UserOrRoleOrGroupCommonOptionContext.class,0);
		}
		public UserOrRoleOrGroupOptionForCreateContext userOrRoleOrGroupOptionForCreate() {
			return getRuleContext(UserOrRoleOrGroupOptionForCreateContext.class,0);
		}
		public GroupOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGroupOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGroupOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitGroupOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupOptionContext groupOption() throws RecognitionException {
		GroupOptionContext _localctx = new GroupOptionContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_groupOption);
		try {
			setState(3143);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENCRYPTED:
			case INHERIT:
			case PASSWORD:
			case VALID:
			case CREATEDB:
			case CREATEROLE:
			case LOGIN:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOSUPERUSER:
			case SUPERUSER:
				enterOuterAlt(_localctx, 1);
				{
				setState(3141);
				userOrRoleOrGroupCommonOption();
				}
				break;
			case ADMIN:
			case ROLE:
			case SYSID:
			case IN:
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(3142);
				userOrRoleOrGroupOptionForCreate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTablespaceContext extends ParserRuleContext {
		public IdentifierContext name;
		public Token directory;
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode LOCATION() { return getToken(SQLParser.LOCATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<OptionWithValueContext> optionWithValue() {
			return getRuleContexts(OptionWithValueContext.class);
		}
		public OptionWithValueContext optionWithValue(int i) {
			return getRuleContext(OptionWithValueContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTablespace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateTablespace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateTablespace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateTablespace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTablespaceContext createTablespace() throws RecognitionException {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_createTablespace);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3145);
			match(TABLESPACE);
			setState(3146);
			((CreateTablespaceContext)_localctx).name = identifier();
			setState(3149);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OWNER) {
				{
				setState(3147);
				match(OWNER);
				setState(3148);
				userName();
				}
			}

			setState(3151);
			match(LOCATION);
			setState(3152);
			((CreateTablespaceContext)_localctx).directory = match(Character_String_Literal);
			setState(3165);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3153);
				match(WITH);
				setState(3154);
				match(LEFT_PAREN);
				setState(3155);
				optionWithValue();
				setState(3160);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3156);
					match(COMMA);
					setState(3157);
					optionWithValue();
					}
					}
					setState(3162);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3163);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateStatisticsContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TerminalNode STATISTICS() { return getToken(SQLParser.STATISTICS, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public CreateStatisticsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createStatistics; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateStatistics(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateStatistics(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateStatistics(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateStatisticsContext createStatistics() throws RecognitionException {
		CreateStatisticsContext _localctx = new CreateStatisticsContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_createStatistics);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3167);
			match(STATISTICS);
			setState(3169);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
			case 1:
				{
				setState(3168);
				ifNotExists();
				}
				break;
			}
			setState(3171);
			((CreateStatisticsContext)_localctx).name = schemaQualifiedName();
			setState(3176);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3172);
				match(LEFT_PAREN);
				setState(3173);
				identifierList();
				setState(3174);
				match(RIGHT_PAREN);
				}
			}

			setState(3178);
			match(ON);
			setState(3179);
			identifier();
			setState(3180);
			match(COMMA);
			setState(3181);
			identifierList();
			setState(3182);
			match(FROM);
			setState(3183);
			schemaQualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignDataWrapperContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode HANDLER() { return getToken(SQLParser.HANDLER, 0); }
		public List<SchemaQualifiedNameNontypeContext> schemaQualifiedNameNontype() {
			return getRuleContexts(SchemaQualifiedNameNontypeContext.class);
		}
		public SchemaQualifiedNameNontypeContext schemaQualifiedNameNontype(int i) {
			return getRuleContext(SchemaQualifiedNameNontypeContext.class,i);
		}
		public List<TerminalNode> NO() { return getTokens(SQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(SQLParser.NO, i);
		}
		public TerminalNode VALIDATOR() { return getToken(SQLParser.VALIDATOR, 0); }
		public TerminalNode OPTIONS() { return getToken(SQLParser.OPTIONS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<OptionWithoutEqualContext> optionWithoutEqual() {
			return getRuleContexts(OptionWithoutEqualContext.class);
		}
		public OptionWithoutEqualContext optionWithoutEqual(int i) {
			return getRuleContext(OptionWithoutEqualContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CreateForeignDataWrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignDataWrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateForeignDataWrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateForeignDataWrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateForeignDataWrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignDataWrapperContext createForeignDataWrapper() throws RecognitionException {
		CreateForeignDataWrapperContext _localctx = new CreateForeignDataWrapperContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_createForeignDataWrapper);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3185);
			match(FOREIGN);
			setState(3186);
			match(DATA);
			setState(3187);
			match(WRAPPER);
			setState(3188);
			((CreateForeignDataWrapperContext)_localctx).name = identifier();
			setState(3193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				{
				setState(3189);
				match(HANDLER);
				setState(3190);
				schemaQualifiedNameNontype();
				}
				break;
			case 2:
				{
				setState(3191);
				match(NO);
				setState(3192);
				match(HANDLER);
				}
				break;
			}
			setState(3199);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALIDATOR:
				{
				setState(3195);
				match(VALIDATOR);
				setState(3196);
				schemaQualifiedNameNontype();
				}
				break;
			case NO:
				{
				setState(3197);
				match(NO);
				setState(3198);
				match(VALIDATOR);
				}
				break;
			case EOF:
			case OPTIONS:
			case SEMI_COLON:
				break;
			default:
				break;
			}
			setState(3213);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(3201);
				match(OPTIONS);
				setState(3202);
				match(LEFT_PAREN);
				setState(3203);
				optionWithoutEqual();
				setState(3208);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3204);
					match(COMMA);
					setState(3205);
					optionWithoutEqual();
					}
					}
					setState(3210);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3211);
				match(RIGHT_PAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionWithoutEqualContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public OptionWithoutEqualContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_optionWithoutEqual; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOptionWithoutEqual(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOptionWithoutEqual(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOptionWithoutEqual(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionWithoutEqualContext optionWithoutEqual() throws RecognitionException {
		OptionWithoutEqualContext _localctx = new OptionWithoutEqualContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_optionWithoutEqual);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3215);
			identifier();
			setState(3216);
			match(Character_String_Literal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorStatementContext extends ParserRuleContext {
		public OperatorNameContext name;
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<OperatorOptionContext> operatorOption() {
			return getRuleContexts(OperatorOptionContext.class);
		}
		public OperatorOptionContext operatorOption(int i) {
			return getRuleContext(OperatorOptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public OperatorNameContext operatorName() {
			return getRuleContext(OperatorNameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CreateOperatorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateOperatorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateOperatorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateOperatorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorStatementContext createOperatorStatement() throws RecognitionException {
		CreateOperatorStatementContext _localctx = new CreateOperatorStatementContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_createOperatorStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3218);
			match(OPERATOR);
			setState(3219);
			((CreateOperatorStatementContext)_localctx).name = operatorName();
			setState(3220);
			match(LEFT_PAREN);
			setState(3221);
			operatorOption();
			setState(3226);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3222);
				match(COMMA);
				setState(3223);
				operatorOption();
				}
				}
				setState(3228);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3229);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorNameContext extends ParserRuleContext {
		public IdentifierContext schemaName;
		public AllSimpleOpContext operator;
		public AllSimpleOpContext allSimpleOp() {
			return getRuleContext(AllSimpleOpContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OperatorNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOperatorName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOperatorName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOperatorName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorNameContext operatorName() throws RecognitionException {
		OperatorNameContext _localctx = new OperatorNameContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_operatorName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3234);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(3231);
				((OperatorNameContext)_localctx).schemaName = identifier();
				setState(3232);
				match(DOT);
				}
			}

			setState(3236);
			((OperatorNameContext)_localctx).operator = allSimpleOp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorOptionContext extends ParserRuleContext {
		public SchemaQualifiedNameContext funcName;
		public SchemaQualifiedNameContext restrName;
		public SchemaQualifiedNameContext joinName;
		public DataTypeContext type;
		public AllOpRefContext additionOperName;
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public TerminalNode LEFTARG() { return getToken(SQLParser.LEFTARG, 0); }
		public TerminalNode RIGHTARG() { return getToken(SQLParser.RIGHTARG, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode COMMUTATOR() { return getToken(SQLParser.COMMUTATOR, 0); }
		public TerminalNode NEGATOR() { return getToken(SQLParser.NEGATOR, 0); }
		public AllOpRefContext allOpRef() {
			return getRuleContext(AllOpRefContext.class,0);
		}
		public TerminalNode HASHES() { return getToken(SQLParser.HASHES, 0); }
		public TerminalNode MERGES() { return getToken(SQLParser.MERGES, 0); }
		public OperatorOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOperatorOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOperatorOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOperatorOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorOptionContext operatorOption() throws RecognitionException {
		OperatorOptionContext _localctx = new OperatorOptionContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_operatorOption);
		int _la;
		try {
			setState(3255);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FUNCTION:
			case PROCEDURE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3238);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3239);
				match(EQUAL);
				setState(3240);
				((OperatorOptionContext)_localctx).funcName = schemaQualifiedName();
				}
				break;
			case RESTRICT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3241);
				match(RESTRICT);
				setState(3242);
				match(EQUAL);
				setState(3243);
				((OperatorOptionContext)_localctx).restrName = schemaQualifiedName();
				}
				break;
			case JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(3244);
				match(JOIN);
				setState(3245);
				match(EQUAL);
				setState(3246);
				((OperatorOptionContext)_localctx).joinName = schemaQualifiedName();
				}
				break;
			case LEFTARG:
			case RIGHTARG:
				enterOuterAlt(_localctx, 4);
				{
				setState(3247);
				_la = _input.LA(1);
				if ( !(_la==LEFTARG || _la==RIGHTARG) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3248);
				match(EQUAL);
				setState(3249);
				((OperatorOptionContext)_localctx).type = dataType();
				}
				break;
			case COMMUTATOR:
			case NEGATOR:
				enterOuterAlt(_localctx, 5);
				{
				setState(3250);
				_la = _input.LA(1);
				if ( !(_la==COMMUTATOR || _la==NEGATOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3251);
				match(EQUAL);
				setState(3252);
				((OperatorOptionContext)_localctx).additionOperName = allOpRef();
				}
				break;
			case HASHES:
				enterOuterAlt(_localctx, 6);
				{
				setState(3253);
				match(HASHES);
				}
				break;
			case MERGES:
				enterOuterAlt(_localctx, 7);
				{
				setState(3254);
				match(MERGES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateAggregateStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public DataTypeContext baseType;
		public SchemaQualifiedNameContext sfuncName;
		public DataTypeContext type;
		public TerminalNode AGGREGATE() { return getToken(SQLParser.AGGREGATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode SFUNC() { return getToken(SQLParser.SFUNC, 0); }
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode STYPE() { return getToken(SQLParser.STYPE, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode BASETYPE() { return getToken(SQLParser.BASETYPE, 0); }
		public List<AggregateParamContext> aggregateParam() {
			return getRuleContexts(AggregateParamContext.class);
		}
		public AggregateParamContext aggregateParam(int i) {
			return getRuleContext(AggregateParamContext.class,i);
		}
		public CreateAggregateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createAggregateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateAggregateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateAggregateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateAggregateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateAggregateStatementContext createAggregateStatement() throws RecognitionException {
		CreateAggregateStatementContext _localctx = new CreateAggregateStatementContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_createAggregateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3259);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(3257);
				match(OR);
				setState(3258);
				match(REPLACE);
				}
			}

			setState(3261);
			match(AGGREGATE);
			setState(3262);
			((CreateAggregateStatementContext)_localctx).name = schemaQualifiedName();
			setState(3264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				{
				setState(3263);
				functionArgs();
				}
				break;
			}
			setState(3266);
			match(LEFT_PAREN);
			setState(3272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BASETYPE) {
				{
				setState(3267);
				match(BASETYPE);
				setState(3268);
				match(EQUAL);
				setState(3269);
				((CreateAggregateStatementContext)_localctx).baseType = dataType();
				setState(3270);
				match(COMMA);
				}
			}

			setState(3274);
			match(SFUNC);
			setState(3275);
			match(EQUAL);
			setState(3276);
			((CreateAggregateStatementContext)_localctx).sfuncName = schemaQualifiedName();
			setState(3277);
			match(COMMA);
			setState(3278);
			match(STYPE);
			setState(3279);
			match(EQUAL);
			setState(3280);
			((CreateAggregateStatementContext)_localctx).type = dataType();
			setState(3285);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3281);
				match(COMMA);
				setState(3282);
				aggregateParam();
				}
				}
				setState(3287);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3288);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateParamContext extends ParserRuleContext {
		public Token sSpace;
		public SchemaQualifiedNameContext finalFunc;
		public SchemaQualifiedNameContext combineFunc;
		public SchemaQualifiedNameContext serialFunc;
		public SchemaQualifiedNameContext deserialFunc;
		public VexContext initCond;
		public SchemaQualifiedNameContext msFunc;
		public SchemaQualifiedNameContext minvFunc;
		public DataTypeContext msType;
		public Token msSpace;
		public SchemaQualifiedNameContext mfinalFunc;
		public VexContext minitCond;
		public TerminalNode SSPACE() { return getToken(SQLParser.SSPACE, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode FINALFUNC() { return getToken(SQLParser.FINALFUNC, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode FINALFUNC_EXTRA() { return getToken(SQLParser.FINALFUNC_EXTRA, 0); }
		public TerminalNode FINALFUNC_MODIFY() { return getToken(SQLParser.FINALFUNC_MODIFY, 0); }
		public TerminalNode READ_ONLY() { return getToken(SQLParser.READ_ONLY, 0); }
		public TerminalNode SHAREABLE() { return getToken(SQLParser.SHAREABLE, 0); }
		public TerminalNode READ_WRITE() { return getToken(SQLParser.READ_WRITE, 0); }
		public TerminalNode COMBINEFUNC() { return getToken(SQLParser.COMBINEFUNC, 0); }
		public TerminalNode SERIALFUNC() { return getToken(SQLParser.SERIALFUNC, 0); }
		public TerminalNode DESERIALFUNC() { return getToken(SQLParser.DESERIALFUNC, 0); }
		public TerminalNode INITCOND() { return getToken(SQLParser.INITCOND, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode MSFUNC() { return getToken(SQLParser.MSFUNC, 0); }
		public TerminalNode MINVFUNC() { return getToken(SQLParser.MINVFUNC, 0); }
		public TerminalNode MSTYPE() { return getToken(SQLParser.MSTYPE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode MSSPACE() { return getToken(SQLParser.MSSPACE, 0); }
		public TerminalNode MFINALFUNC() { return getToken(SQLParser.MFINALFUNC, 0); }
		public TerminalNode MFINALFUNC_EXTRA() { return getToken(SQLParser.MFINALFUNC_EXTRA, 0); }
		public TerminalNode MFINALFUNC_MODIFY() { return getToken(SQLParser.MFINALFUNC_MODIFY, 0); }
		public TerminalNode MINITCOND() { return getToken(SQLParser.MINITCOND, 0); }
		public TerminalNode SORTOP() { return getToken(SQLParser.SORTOP, 0); }
		public AllOpRefContext allOpRef() {
			return getRuleContext(AllOpRefContext.class,0);
		}
		public TerminalNode PARALLEL() { return getToken(SQLParser.PARALLEL, 0); }
		public TerminalNode SAFE() { return getToken(SQLParser.SAFE, 0); }
		public TerminalNode RESTRICTED() { return getToken(SQLParser.RESTRICTED, 0); }
		public TerminalNode UNSAFE() { return getToken(SQLParser.UNSAFE, 0); }
		public TerminalNode HYPOTHETICAL() { return getToken(SQLParser.HYPOTHETICAL, 0); }
		public AggregateParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateParam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAggregateParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAggregateParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAggregateParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateParamContext aggregateParam() throws RecognitionException {
		AggregateParamContext _localctx = new AggregateParamContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_aggregateParam);
		int _la;
		try {
			setState(3341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SSPACE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3290);
				match(SSPACE);
				setState(3291);
				match(EQUAL);
				setState(3292);
				((AggregateParamContext)_localctx).sSpace = match(NUMBER_LITERAL);
				}
				break;
			case FINALFUNC:
				enterOuterAlt(_localctx, 2);
				{
				setState(3293);
				match(FINALFUNC);
				setState(3294);
				match(EQUAL);
				setState(3295);
				((AggregateParamContext)_localctx).finalFunc = schemaQualifiedName();
				}
				break;
			case FINALFUNC_EXTRA:
				enterOuterAlt(_localctx, 3);
				{
				setState(3296);
				match(FINALFUNC_EXTRA);
				}
				break;
			case FINALFUNC_MODIFY:
				enterOuterAlt(_localctx, 4);
				{
				setState(3297);
				match(FINALFUNC_MODIFY);
				setState(3298);
				match(EQUAL);
				setState(3299);
				_la = _input.LA(1);
				if ( !(((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (SHAREABLE - 512)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case COMBINEFUNC:
				enterOuterAlt(_localctx, 5);
				{
				setState(3300);
				match(COMBINEFUNC);
				setState(3301);
				match(EQUAL);
				setState(3302);
				((AggregateParamContext)_localctx).combineFunc = schemaQualifiedName();
				}
				break;
			case SERIALFUNC:
				enterOuterAlt(_localctx, 6);
				{
				setState(3303);
				match(SERIALFUNC);
				setState(3304);
				match(EQUAL);
				setState(3305);
				((AggregateParamContext)_localctx).serialFunc = schemaQualifiedName();
				}
				break;
			case DESERIALFUNC:
				enterOuterAlt(_localctx, 7);
				{
				setState(3306);
				match(DESERIALFUNC);
				setState(3307);
				match(EQUAL);
				setState(3308);
				((AggregateParamContext)_localctx).deserialFunc = schemaQualifiedName();
				}
				break;
			case INITCOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(3309);
				match(INITCOND);
				setState(3310);
				match(EQUAL);
				setState(3311);
				((AggregateParamContext)_localctx).initCond = vex(0);
				}
				break;
			case MSFUNC:
				enterOuterAlt(_localctx, 9);
				{
				setState(3312);
				match(MSFUNC);
				setState(3313);
				match(EQUAL);
				setState(3314);
				((AggregateParamContext)_localctx).msFunc = schemaQualifiedName();
				}
				break;
			case MINVFUNC:
				enterOuterAlt(_localctx, 10);
				{
				setState(3315);
				match(MINVFUNC);
				setState(3316);
				match(EQUAL);
				setState(3317);
				((AggregateParamContext)_localctx).minvFunc = schemaQualifiedName();
				}
				break;
			case MSTYPE:
				enterOuterAlt(_localctx, 11);
				{
				setState(3318);
				match(MSTYPE);
				setState(3319);
				match(EQUAL);
				setState(3320);
				((AggregateParamContext)_localctx).msType = dataType();
				}
				break;
			case MSSPACE:
				enterOuterAlt(_localctx, 12);
				{
				setState(3321);
				match(MSSPACE);
				setState(3322);
				match(EQUAL);
				setState(3323);
				((AggregateParamContext)_localctx).msSpace = match(NUMBER_LITERAL);
				}
				break;
			case MFINALFUNC:
				enterOuterAlt(_localctx, 13);
				{
				setState(3324);
				match(MFINALFUNC);
				setState(3325);
				match(EQUAL);
				setState(3326);
				((AggregateParamContext)_localctx).mfinalFunc = schemaQualifiedName();
				}
				break;
			case MFINALFUNC_EXTRA:
				enterOuterAlt(_localctx, 14);
				{
				setState(3327);
				match(MFINALFUNC_EXTRA);
				}
				break;
			case MFINALFUNC_MODIFY:
				enterOuterAlt(_localctx, 15);
				{
				setState(3328);
				match(MFINALFUNC_MODIFY);
				setState(3329);
				match(EQUAL);
				setState(3330);
				_la = _input.LA(1);
				if ( !(((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (SHAREABLE - 512)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case MINITCOND:
				enterOuterAlt(_localctx, 16);
				{
				setState(3331);
				match(MINITCOND);
				setState(3332);
				match(EQUAL);
				setState(3333);
				((AggregateParamContext)_localctx).minitCond = vex(0);
				}
				break;
			case SORTOP:
				enterOuterAlt(_localctx, 17);
				{
				setState(3334);
				match(SORTOP);
				setState(3335);
				match(EQUAL);
				setState(3336);
				allOpRef();
				}
				break;
			case PARALLEL:
				enterOuterAlt(_localctx, 18);
				{
				setState(3337);
				match(PARALLEL);
				setState(3338);
				match(EQUAL);
				setState(3339);
				_la = _input.LA(1);
				if ( !(((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RESTRICTED - 517)) | (1L << (SAFE - 517)) | (1L << (UNSAFE - 517)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HYPOTHETICAL:
				enterOuterAlt(_localctx, 19);
				{
				setState(3340);
				match(HYPOTHETICAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public SetActionContext setAction() {
			return getRuleContext(SetActionContext.class,0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSetStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSetStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSetStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementContext setStatement() throws RecognitionException {
		SetStatementContext _localctx = new SetStatementContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_setStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3343);
			match(SET);
			setState(3344);
			setAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetActionContext extends ParserRuleContext {
		public TerminalNode CONSTRAINTS() { return getToken(SQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFERRED() { return getToken(SQLParser.DEFERRED, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SQLParser.IMMEDIATE, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public NamesReferencesContext namesReferences() {
			return getRuleContext(NamesReferencesContext.class,0);
		}
		public TerminalNode TRANSACTION() { return getToken(SQLParser.TRANSACTION, 0); }
		public List<TransactionModeContext> transactionMode() {
			return getRuleContexts(TransactionModeContext.class);
		}
		public TransactionModeContext transactionMode(int i) {
			return getRuleContext(TransactionModeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode SNAPSHOT() { return getToken(SQLParser.SNAPSHOT, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public TerminalNode SESSION() { return getToken(SQLParser.SESSION, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(SQLParser.CHARACTERISTICS, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public SessionLocalOptionContext sessionLocalOption() {
			return getRuleContext(SessionLocalOptionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SQLParser.LOCAL, 0); }
		public TerminalNode XML() { return getToken(SQLParser.XML, 0); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode DOCUMENT() { return getToken(SQLParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(SQLParser.CONTENT, 0); }
		public SetActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSetAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSetAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSetAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetActionContext setAction() throws RecognitionException {
		SetActionContext _localctx = new SetActionContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_setAction);
		int _la;
		try {
			setState(3383);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,364,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3346);
				match(CONSTRAINTS);
				setState(3349);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ALL:
					{
					setState(3347);
					match(ALL);
					}
					break;
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(3348);
					namesReferences();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3351);
				_la = _input.LA(1);
				if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3352);
				match(TRANSACTION);
				setState(3353);
				transactionMode();
				setState(3358);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3354);
					match(COMMA);
					setState(3355);
					transactionMode();
					}
					}
					setState(3360);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3361);
				match(TRANSACTION);
				setState(3362);
				match(SNAPSHOT);
				setState(3363);
				match(Character_String_Literal);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3364);
				match(SESSION);
				setState(3365);
				match(CHARACTERISTICS);
				setState(3366);
				match(AS);
				setState(3367);
				match(TRANSACTION);
				setState(3368);
				transactionMode();
				setState(3373);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3369);
					match(COMMA);
					setState(3370);
					transactionMode();
					}
					}
					setState(3375);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3377);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,363,_ctx) ) {
				case 1:
					{
					setState(3376);
					_la = _input.LA(1);
					if ( !(_la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3379);
				sessionLocalOption();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3380);
				match(XML);
				setState(3381);
				match(OPTION);
				setState(3382);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SessionLocalOptionContext extends ParserRuleContext {
		public IdentifierContext configParam;
		public TerminalNode SESSION() { return getToken(SQLParser.SESSION, 0); }
		public TerminalNode AUTHORIZATION() { return getToken(SQLParser.AUTHORIZATION, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode TIME() { return getToken(SQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public SignedNumericalLiteralContext signedNumericalLiteral() {
			return getRuleContext(SignedNumericalLiteralContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(SQLParser.LOCAL, 0); }
		public SetStatementValueContext setStatementValue() {
			return getRuleContext(SetStatementValueContext.class,0);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public TerminalNode NONE() { return getToken(SQLParser.NONE, 0); }
		public SessionLocalOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sessionLocalOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSessionLocalOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSessionLocalOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSessionLocalOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SessionLocalOptionContext sessionLocalOption() throws RecognitionException {
		SessionLocalOptionContext _localctx = new SessionLocalOptionContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_sessionLocalOption);
		int _la;
		try {
			setState(3414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3385);
				match(SESSION);
				setState(3386);
				match(AUTHORIZATION);
				setState(3390);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case Character_String_Literal:
					{
					setState(3387);
					match(Character_String_Literal);
					}
					break;
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(3388);
					identifier();
					}
					break;
				case DEFAULT:
					{
					setState(3389);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3392);
				match(TIME);
				setState(3393);
				match(ZONE);
				setState(3398);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case Character_String_Literal:
					{
					setState(3394);
					match(Character_String_Literal);
					}
					break;
				case PLUS:
				case MINUS:
				case NUMBER_LITERAL:
				case REAL_NUMBER:
					{
					setState(3395);
					signedNumericalLiteral();
					}
					break;
				case LOCAL:
					{
					setState(3396);
					match(LOCAL);
					}
					break;
				case DEFAULT:
					{
					setState(3397);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3403);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,367,_ctx) ) {
				case 1:
					{
					setState(3400);
					identifier();
					setState(3401);
					match(DOT);
					}
					break;
				}
				setState(3405);
				((SessionLocalOptionContext)_localctx).configParam = identifier();
				setState(3406);
				_la = _input.LA(1);
				if ( !(_la==TO || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3407);
				setStatementValue();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3409);
				match(ROLE);
				setState(3412);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					setState(3410);
					identifier();
					}
					break;
				case 2:
					{
					setState(3411);
					match(NONE);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetStatementValueContext extends ParserRuleContext {
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public SetStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSetStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSetStatementValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSetStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetStatementValueContext setStatementValue() throws RecognitionException {
		SetStatementValueContext _localctx = new SetStatementValueContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_setStatementValue);
		int _la;
		try {
			setState(3425);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
			case ALL:
			case ANY:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case FALSE:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL:
			case ON:
			case SESSION_USER:
			case SOME:
			case TRUE:
			case USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case LEFT_PAREN:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case PLACEHOLDER:
			case OP_CHARS:
			case NUMBER_LITERAL:
			case REAL_NUMBER:
			case DOLLAR_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case Character_String_Literal:
			case BeginDollarStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(3416);
				vex(0);
				setState(3421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3417);
					match(COMMA);
					setState(3418);
					vex(0);
					}
					}
					setState(3423);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3424);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateRewriteStatementContext extends ParserRuleContext {
		public IdentifierContext name;
		public Token event;
		public SchemaQualifiedNameContext tableName;
		public TerminalNode RULE() { return getToken(SQLParser.RULE, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode DO() { return getToken(SQLParser.DO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode SELECT() { return getToken(SQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(SQLParser.INSERT, 0); }
		public TerminalNode DELETE() { return getToken(SQLParser.DELETE, 0); }
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public TerminalNode NOTHING() { return getToken(SQLParser.NOTHING, 0); }
		public List<RewriteCommandContext> rewriteCommand() {
			return getRuleContexts(RewriteCommandContext.class);
		}
		public RewriteCommandContext rewriteCommand(int i) {
			return getRuleContext(RewriteCommandContext.class,i);
		}
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode ALSO() { return getToken(SQLParser.ALSO, 0); }
		public TerminalNode INSTEAD() { return getToken(SQLParser.INSTEAD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> SEMI_COLON() { return getTokens(SQLParser.SEMI_COLON); }
		public TerminalNode SEMI_COLON(int i) {
			return getToken(SQLParser.SEMI_COLON, i);
		}
		public CreateRewriteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createRewriteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateRewriteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateRewriteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateRewriteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateRewriteStatementContext createRewriteStatement() throws RecognitionException {
		CreateRewriteStatementContext _localctx = new CreateRewriteStatementContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_createRewriteStatement);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3429);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(3427);
				match(OR);
				setState(3428);
				match(REPLACE);
				}
			}

			setState(3431);
			match(RULE);
			setState(3432);
			((CreateRewriteStatementContext)_localctx).name = identifier();
			setState(3433);
			match(AS);
			setState(3434);
			match(ON);
			setState(3435);
			((CreateRewriteStatementContext)_localctx).event = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DELETE || _la==INSERT || _la==UPDATE || _la==SELECT) ) {
				((CreateRewriteStatementContext)_localctx).event = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3436);
			match(TO);
			setState(3437);
			((CreateRewriteStatementContext)_localctx).tableName = schemaQualifiedName();
			setState(3440);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3438);
				match(WHERE);
				setState(3439);
				vex(0);
				}
			}

			setState(3442);
			match(DO);
			setState(3444);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALSO || _la==INSTEAD) {
				{
				setState(3443);
				_la = _input.LA(1);
				if ( !(_la==ALSO || _la==INSTEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3463);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				setState(3446);
				match(NOTHING);
				}
				break;
			case 2:
				{
				setState(3447);
				rewriteCommand();
				}
				break;
			case 3:
				{
				{
				setState(3448);
				match(LEFT_PAREN);
				setState(3454);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,375,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3449);
						rewriteCommand();
						setState(3450);
						match(SEMI_COLON);
						}
						} 
					}
					setState(3456);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,375,_ctx);
				}
				setState(3457);
				rewriteCommand();
				setState(3459);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEMI_COLON) {
					{
					setState(3458);
					match(SEMI_COLON);
					}
				}

				setState(3461);
				match(RIGHT_PAREN);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RewriteCommandContext extends ParserRuleContext {
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public InsertStmtForPsqlContext insertStmtForPsql() {
			return getRuleContext(InsertStmtForPsqlContext.class,0);
		}
		public UpdateStmtForPsqlContext updateStmtForPsql() {
			return getRuleContext(UpdateStmtForPsqlContext.class,0);
		}
		public DeleteStmtForPsqlContext deleteStmtForPsql() {
			return getRuleContext(DeleteStmtForPsqlContext.class,0);
		}
		public NotifyStmtContext notifyStmt() {
			return getRuleContext(NotifyStmtContext.class,0);
		}
		public RewriteCommandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rewriteCommand; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRewriteCommand(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRewriteCommand(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitRewriteCommand(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RewriteCommandContext rewriteCommand() throws RecognitionException {
		RewriteCommandContext _localctx = new RewriteCommandContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_rewriteCommand);
		try {
			setState(3470);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,378,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3465);
				selectStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3466);
				insertStmtForPsql();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3467);
				updateStmtForPsql();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3468);
				deleteStmtForPsql();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3469);
				notifyStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTriggerStatementContext extends ParserRuleContext {
		public IdentifierContext name;
		public Token beforeTrue;
		public Token insertTrue;
		public Token deleteTrue;
		public Token truncateTrue;
		public Token updateTrue;
		public SchemaQualifiedNameContext tableName;
		public SchemaQualifiedNameContext referencedTableName;
		public Token forEachTrue;
		public FunctionCallContext funcName;
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TerminalNode AFTER() { return getToken(SQLParser.AFTER, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode BEFORE() { return getToken(SQLParser.BEFORE, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TableDeferrableContext tableDeferrable() {
			return getRuleContext(TableDeferrableContext.class,0);
		}
		public TableInitialyImmedContext tableInitialyImmed() {
			return getRuleContext(TableInitialyImmedContext.class,0);
		}
		public TerminalNode REFERENCING() { return getToken(SQLParser.REFERENCING, 0); }
		public List<TriggerReferencingContext> triggerReferencing() {
			return getRuleContexts(TriggerReferencingContext.class);
		}
		public TriggerReferencingContext triggerReferencing(int i) {
			return getRuleContext(TriggerReferencingContext.class,i);
		}
		public WhenTriggerContext whenTrigger() {
			return getRuleContext(WhenTriggerContext.class,0);
		}
		public TerminalNode INSTEAD() { return getToken(SQLParser.INSTEAD, 0); }
		public List<TerminalNode> OF() { return getTokens(SQLParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(SQLParser.OF, i);
		}
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode ROW() { return getToken(SQLParser.ROW, 0); }
		public TerminalNode STATEMENT() { return getToken(SQLParser.STATEMENT, 0); }
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public List<TerminalNode> OR() { return getTokens(SQLParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(SQLParser.OR, i);
		}
		public TerminalNode EACH() { return getToken(SQLParser.EACH, 0); }
		public List<TerminalNode> INSERT() { return getTokens(SQLParser.INSERT); }
		public TerminalNode INSERT(int i) {
			return getToken(SQLParser.INSERT, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public List<TerminalNode> TRUNCATE() { return getTokens(SQLParser.TRUNCATE); }
		public TerminalNode TRUNCATE(int i) {
			return getToken(SQLParser.TRUNCATE, i);
		}
		public List<IdentifierListContext> identifierList() {
			return getRuleContexts(IdentifierListContext.class);
		}
		public IdentifierListContext identifierList(int i) {
			return getRuleContext(IdentifierListContext.class,i);
		}
		public CreateTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTriggerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateTriggerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateTriggerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTriggerStatementContext createTriggerStatement() throws RecognitionException {
		CreateTriggerStatementContext _localctx = new CreateTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_createTriggerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(3472);
				match(CONSTRAINT);
				}
			}

			setState(3475);
			match(TRIGGER);
			setState(3476);
			((CreateTriggerStatementContext)_localctx).name = identifier();
			setState(3481);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BEFORE:
				{
				setState(3477);
				((CreateTriggerStatementContext)_localctx).beforeTrue = match(BEFORE);
				}
				break;
			case INSTEAD:
				{
				{
				setState(3478);
				match(INSTEAD);
				setState(3479);
				match(OF);
				}
				}
				break;
			case AFTER:
				{
				setState(3480);
				match(AFTER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3498); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3493);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DELETE:
				case INSERT:
				case TRUNCATE:
					{
					setState(3486);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case INSERT:
						{
						setState(3483);
						((CreateTriggerStatementContext)_localctx).insertTrue = match(INSERT);
						}
						break;
					case DELETE:
						{
						setState(3484);
						((CreateTriggerStatementContext)_localctx).deleteTrue = match(DELETE);
						}
						break;
					case TRUNCATE:
						{
						setState(3485);
						((CreateTriggerStatementContext)_localctx).truncateTrue = match(TRUNCATE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case UPDATE:
					{
					setState(3488);
					((CreateTriggerStatementContext)_localctx).updateTrue = match(UPDATE);
					setState(3491);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OF) {
						{
						setState(3489);
						match(OF);
						setState(3490);
						identifierList();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OR) {
					{
					setState(3495);
					match(OR);
					}
				}

				}
				}
				setState(3500); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DELETE || _la==INSERT || _la==TRUNCATE || _la==UPDATE );
			setState(3502);
			match(ON);
			setState(3503);
			((CreateTriggerStatementContext)_localctx).tableName = schemaQualifiedName();
			setState(3506);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3504);
				match(FROM);
				setState(3505);
				((CreateTriggerStatementContext)_localctx).referencedTableName = schemaQualifiedName();
				}
			}

			setState(3509);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFERRABLE || _la==NOT) {
				{
				setState(3508);
				tableDeferrable();
				}
			}

			setState(3512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(3511);
				tableInitialyImmed();
				}
			}

			setState(3519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REFERENCING) {
				{
				setState(3514);
				match(REFERENCING);
				setState(3515);
				triggerReferencing();
				setState(3517);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NEW || _la==OLD) {
					{
					setState(3516);
					triggerReferencing();
					}
				}

				}
			}

			setState(3526);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3521);
				((CreateTriggerStatementContext)_localctx).forEachTrue = match(FOR);
				setState(3523);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EACH) {
					{
					setState(3522);
					match(EACH);
					}
				}

				setState(3525);
				_la = _input.LA(1);
				if ( !(_la==STATEMENT || _la==ROW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3529);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(3528);
				whenTrigger();
				}
			}

			setState(3531);
			match(EXECUTE);
			setState(3532);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3533);
			((CreateTriggerStatementContext)_localctx).funcName = functionCall();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TriggerReferencingContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode OLD() { return getToken(SQLParser.OLD, 0); }
		public TerminalNode NEW() { return getToken(SQLParser.NEW, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TriggerReferencingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_triggerReferencing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTriggerReferencing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTriggerReferencing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTriggerReferencing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TriggerReferencingContext triggerReferencing() throws RecognitionException {
		TriggerReferencingContext _localctx = new TriggerReferencingContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_triggerReferencing);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3535);
			_la = _input.LA(1);
			if ( !(_la==NEW || _la==OLD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3536);
			match(TABLE);
			setState(3538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3537);
				match(AS);
				}
			}

			setState(3540);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WhenTriggerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public WhenTriggerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenTrigger; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterWhenTrigger(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitWhenTrigger(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitWhenTrigger(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WhenTriggerContext whenTrigger() throws RecognitionException {
		WhenTriggerContext _localctx = new WhenTriggerContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_whenTrigger);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3542);
			match(WHEN);
			setState(3543);
			match(LEFT_PAREN);
			setState(3544);
			vex(0);
			setState(3545);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleCommonContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public RuleMemberObjectContext ruleMemberObject() {
			return getRuleContext(RuleMemberObjectContext.class,0);
		}
		public RolesNamesContext rolesNames() {
			return getRuleContext(RolesNamesContext.class,0);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<TerminalNode> GRANT() { return getTokens(SQLParser.GRANT); }
		public TerminalNode GRANT(int i) {
			return getToken(SQLParser.GRANT, i);
		}
		public TerminalNode REVOKE() { return getToken(SQLParser.REVOKE, 0); }
		public PermissionsContext permissions() {
			return getRuleContext(PermissionsContext.class,0);
		}
		public ColumnsPermissionsContext columnsPermissions() {
			return getRuleContext(ColumnsPermissionsContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public GrantOptionForContext grantOptionFor() {
			return getRuleContext(GrantOptionForContext.class,0);
		}
		public OtherRulesContext otherRules() {
			return getRuleContext(OtherRulesContext.class,0);
		}
		public RuleCommonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleCommon; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRuleCommon(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRuleCommon(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitRuleCommon(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleCommonContext ruleCommon() throws RecognitionException {
		RuleCommonContext _localctx = new RuleCommonContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_ruleCommon);
		int _la;
		try {
			setState(3569);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3552);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case GRANT:
					{
					setState(3547);
					match(GRANT);
					}
					break;
				case REVOKE:
					{
					setState(3548);
					match(REVOKE);
					setState(3550);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==GRANT) {
						{
						setState(3549);
						grantOptionFor();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(3556);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,397,_ctx) ) {
				case 1:
					{
					setState(3554);
					permissions();
					}
					break;
				case 2:
					{
					setState(3555);
					columnsPermissions();
					}
					break;
				}
				setState(3558);
				match(ON);
				setState(3559);
				ruleMemberObject();
				setState(3560);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==TO) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3561);
				rolesNames();
				setState(3566);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case WITH:
					{
					setState(3562);
					match(WITH);
					setState(3563);
					match(GRANT);
					setState(3564);
					match(OPTION);
					}
					break;
				case CASCADE:
				case RESTRICT:
					{
					setState(3565);
					cascadeRestrict();
					}
					break;
				case EOF:
				case SEMI_COLON:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3568);
				otherRules();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RuleMemberObjectContext extends ParserRuleContext {
		public NamesReferencesContext tableNames;
		public FunctionParametersContext functionParameters;
		public List<FunctionParametersContext> funcName = new ArrayList<FunctionParametersContext>();
		public NamesReferencesContext schemaNames;
		public NamesReferencesContext namesReferences() {
			return getRuleContext(NamesReferencesContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN() { return getToken(SQLParser.DOMAIN, 0); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode ROUTINE() { return getToken(SQLParser.ROUTINE, 0); }
		public List<FunctionParametersContext> functionParameters() {
			return getRuleContexts(FunctionParametersContext.class);
		}
		public FunctionParametersContext functionParameters(int i) {
			return getRuleContext(FunctionParametersContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public List<TerminalNode> NUMBER_LITERAL() { return getTokens(SQLParser.NUMBER_LITERAL); }
		public TerminalNode NUMBER_LITERAL(int i) {
			return getToken(SQLParser.NUMBER_LITERAL, i);
		}
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode TABLES() { return getToken(SQLParser.TABLES, 0); }
		public TerminalNode SEQUENCES() { return getToken(SQLParser.SEQUENCES, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SQLParser.FUNCTIONS, 0); }
		public TerminalNode PROCEDURES() { return getToken(SQLParser.PROCEDURES, 0); }
		public TerminalNode ROUTINES() { return getToken(SQLParser.ROUTINES, 0); }
		public RuleMemberObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ruleMemberObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRuleMemberObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRuleMemberObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitRuleMemberObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RuleMemberObjectContext ruleMemberObject() throws RecognitionException {
		RuleMemberObjectContext _localctx = new RuleMemberObjectContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_ruleMemberObject);
		int _la;
		try {
			setState(3620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,403,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3572);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TABLE) {
					{
					setState(3571);
					match(TABLE);
					}
				}

				setState(3574);
				((RuleMemberObjectContext)_localctx).tableNames = namesReferences();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3575);
				match(SEQUENCE);
				setState(3576);
				namesReferences();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3577);
				match(DATABASE);
				setState(3578);
				namesReferences();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3579);
				match(DOMAIN);
				setState(3580);
				namesReferences();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3581);
				match(FOREIGN);
				setState(3582);
				match(DATA);
				setState(3583);
				match(WRAPPER);
				setState(3584);
				namesReferences();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3585);
				match(FOREIGN);
				setState(3586);
				match(SERVER);
				setState(3587);
				namesReferences();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3588);
				_la = _input.LA(1);
				if ( !(_la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3589);
				((RuleMemberObjectContext)_localctx).functionParameters = functionParameters();
				((RuleMemberObjectContext)_localctx).funcName.add(((RuleMemberObjectContext)_localctx).functionParameters);
				setState(3594);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3590);
					match(COMMA);
					setState(3591);
					((RuleMemberObjectContext)_localctx).functionParameters = functionParameters();
					((RuleMemberObjectContext)_localctx).funcName.add(((RuleMemberObjectContext)_localctx).functionParameters);
					}
					}
					setState(3596);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3597);
				match(LARGE);
				setState(3598);
				match(OBJECT);
				setState(3599);
				match(NUMBER_LITERAL);
				setState(3604);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3600);
					match(COMMA);
					setState(3601);
					match(NUMBER_LITERAL);
					}
					}
					setState(3606);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3607);
				match(LANGUAGE);
				setState(3608);
				namesReferences();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3609);
				match(SCHEMA);
				setState(3610);
				((RuleMemberObjectContext)_localctx).schemaNames = namesReferences();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3611);
				match(TABLESPACE);
				setState(3612);
				namesReferences();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3613);
				match(TYPE);
				setState(3614);
				namesReferences();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3615);
				match(ALL);
				setState(3616);
				_la = _input.LA(1);
				if ( !(_la==FUNCTIONS || ((((_la - 185)) & ~0x3f) == 0 && ((1L << (_la - 185)) & ((1L << (PROCEDURES - 185)) | (1L << (ROUTINES - 185)) | (1L << (SEQUENCES - 185)))) != 0) || _la==TABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3617);
				match(IN);
				setState(3618);
				match(SCHEMA);
				setState(3619);
				namesReferences();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnsPermissionsContext extends ParserRuleContext {
		public List<TableColumnPrivilegesContext> tableColumnPrivileges() {
			return getRuleContexts(TableColumnPrivilegesContext.class);
		}
		public TableColumnPrivilegesContext tableColumnPrivileges(int i) {
			return getRuleContext(TableColumnPrivilegesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ColumnsPermissionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnsPermissions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColumnsPermissions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColumnsPermissions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitColumnsPermissions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnsPermissionsContext columnsPermissions() throws RecognitionException {
		ColumnsPermissionsContext _localctx = new ColumnsPermissionsContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_columnsPermissions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3622);
			tableColumnPrivileges();
			setState(3627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3623);
				match(COMMA);
				setState(3624);
				tableColumnPrivileges();
				}
				}
				setState(3629);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableColumnPrivilegesContext extends ParserRuleContext {
		public TableColumnPrivilegeContext tableColumnPrivilege() {
			return getRuleContext(TableColumnPrivilegeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TableColumnPrivilegesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableColumnPrivileges; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableColumnPrivileges(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableColumnPrivileges(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableColumnPrivileges(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableColumnPrivilegesContext tableColumnPrivileges() throws RecognitionException {
		TableColumnPrivilegesContext _localctx = new TableColumnPrivilegesContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_tableColumnPrivileges);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3630);
			tableColumnPrivilege();
			setState(3631);
			match(LEFT_PAREN);
			setState(3632);
			identifierList();
			setState(3633);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PermissionsContext extends ParserRuleContext {
		public List<PermissionContext> permission() {
			return getRuleContexts(PermissionContext.class);
		}
		public PermissionContext permission(int i) {
			return getRuleContext(PermissionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public PermissionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permissions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPermissions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPermissions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPermissions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PermissionsContext permissions() throws RecognitionException {
		PermissionsContext _localctx = new PermissionsContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_permissions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3635);
			permission();
			setState(3640);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3636);
				match(COMMA);
				setState(3637);
				permission();
				}
				}
				setState(3642);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PermissionContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public TerminalNode CONNECT() { return getToken(SQLParser.CONNECT, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode DELETE() { return getToken(SQLParser.DELETE, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public TerminalNode INSERT() { return getToken(SQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLParser.REFERENCES, 0); }
		public TerminalNode SELECT() { return getToken(SQLParser.SELECT, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(SQLParser.TRUNCATE, 0); }
		public TerminalNode USAGE() { return getToken(SQLParser.USAGE, 0); }
		public PermissionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_permission; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPermission(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPermission(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPermission(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PermissionContext permission() throws RecognitionException {
		PermissionContext _localctx = new PermissionContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_permission);
		int _la;
		try {
			setState(3659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3643);
				match(ALL);
				setState(3645);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(3644);
					match(PRIVILEGES);
					}
				}

				}
				break;
			case CONNECT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3647);
				match(CONNECT);
				}
				break;
			case CREATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3648);
				match(CREATE);
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3649);
				match(DELETE);
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(3650);
				match(EXECUTE);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 6);
				{
				setState(3651);
				match(INSERT);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3652);
				match(UPDATE);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 8);
				{
				setState(3653);
				match(REFERENCES);
				}
				break;
			case SELECT:
				enterOuterAlt(_localctx, 9);
				{
				setState(3654);
				match(SELECT);
				}
				break;
			case TEMP:
				enterOuterAlt(_localctx, 10);
				{
				setState(3655);
				match(TEMP);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 11);
				{
				setState(3656);
				match(TRIGGER);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 12);
				{
				setState(3657);
				match(TRUNCATE);
				}
				break;
			case USAGE:
				enterOuterAlt(_localctx, 13);
				{
				setState(3658);
				match(USAGE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OtherRulesContext extends ParserRuleContext {
		public TerminalNode GRANT() { return getToken(SQLParser.GRANT, 0); }
		public List<NamesReferencesContext> namesReferences() {
			return getRuleContexts(NamesReferencesContext.class);
		}
		public NamesReferencesContext namesReferences(int i) {
			return getRuleContext(NamesReferencesContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode ADMIN() { return getToken(SQLParser.ADMIN, 0); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode REVOKE() { return getToken(SQLParser.REVOKE, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public OtherRulesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_otherRules; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOtherRules(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOtherRules(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOtherRules(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OtherRulesContext otherRules() throws RecognitionException {
		OtherRulesContext _localctx = new OtherRulesContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_otherRules);
		int _la;
		try {
			setState(3682);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GRANT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3661);
				match(GRANT);
				setState(3662);
				namesReferences();
				setState(3663);
				match(TO);
				setState(3664);
				namesReferences();
				setState(3668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3665);
					match(WITH);
					setState(3666);
					match(ADMIN);
					setState(3667);
					match(OPTION);
					}
				}

				}
				break;
			case REVOKE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3670);
				match(REVOKE);
				setState(3674);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
				case 1:
					{
					setState(3671);
					match(ADMIN);
					setState(3672);
					match(OPTION);
					setState(3673);
					match(FOR);
					}
					break;
				}
				setState(3676);
				namesReferences();
				setState(3677);
				match(FROM);
				setState(3678);
				namesReferences();
				setState(3680);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CASCADE || _la==RESTRICT) {
					{
					setState(3679);
					cascadeRestrict();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GrantToRuleContext extends ParserRuleContext {
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public RolesNamesContext rolesNames() {
			return getRuleContext(RolesNamesContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode GRANT() { return getToken(SQLParser.GRANT, 0); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public GrantToRuleContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grantToRule; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGrantToRule(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGrantToRule(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitGrantToRule(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GrantToRuleContext grantToRule() throws RecognitionException {
		GrantToRuleContext _localctx = new GrantToRuleContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_grantToRule);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3684);
			match(TO);
			setState(3685);
			rolesNames();
			setState(3689);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3686);
				match(WITH);
				setState(3687);
				match(GRANT);
				setState(3688);
				match(OPTION);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RevokeFromCascadeRestrictContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public RolesNamesContext rolesNames() {
			return getRuleContext(RolesNamesContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public RevokeFromCascadeRestrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_revokeFromCascadeRestrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRevokeFromCascadeRestrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRevokeFromCascadeRestrict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitRevokeFromCascadeRestrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RevokeFromCascadeRestrictContext revokeFromCascadeRestrict() throws RecognitionException {
		RevokeFromCascadeRestrictContext _localctx = new RevokeFromCascadeRestrictContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_revokeFromCascadeRestrict);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3691);
			match(FROM);
			setState(3692);
			rolesNames();
			setState(3694);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(3693);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RolesNamesContext extends ParserRuleContext {
		public List<RoleNameWithGroupContext> roleNameWithGroup() {
			return getRuleContexts(RoleNameWithGroupContext.class);
		}
		public RoleNameWithGroupContext roleNameWithGroup(int i) {
			return getRuleContext(RoleNameWithGroupContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public RolesNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rolesNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRolesNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRolesNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitRolesNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RolesNamesContext rolesNames() throws RecognitionException {
		RolesNamesContext _localctx = new RolesNamesContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_rolesNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3696);
			roleNameWithGroup();
			setState(3701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3697);
				match(COMMA);
				setState(3698);
				roleNameWithGroup();
				}
				}
				setState(3703);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleNameWithGroupContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public TerminalNode GROUP() { return getToken(SQLParser.GROUP, 0); }
		public RoleNameWithGroupContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleNameWithGroup; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRoleNameWithGroup(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRoleNameWithGroup(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitRoleNameWithGroup(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleNameWithGroupContext roleNameWithGroup() throws RecognitionException {
		RoleNameWithGroupContext _localctx = new RoleNameWithGroupContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_roleNameWithGroup);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(3704);
				match(GROUP);
				}
			}

			setState(3707);
			userName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentOnStatementContext extends ParserRuleContext {
		public TerminalNode COMMENT() { return getToken(SQLParser.COMMENT, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public CommentMemberObjectContext commentMemberObject() {
			return getRuleContext(CommentMemberObjectContext.class,0);
		}
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public CharacterStringContext characterString() {
			return getRuleContext(CharacterStringContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public CommentOnStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentOnStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCommentOnStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCommentOnStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCommentOnStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentOnStatementContext commentOnStatement() throws RecognitionException {
		CommentOnStatementContext _localctx = new CommentOnStatementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_commentOnStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3709);
			match(COMMENT);
			setState(3710);
			match(ON);
			setState(3711);
			commentMemberObject();
			setState(3712);
			match(IS);
			setState(3715);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Character_String_Literal:
			case BeginDollarStringConstant:
				{
				setState(3713);
				characterString();
				}
				break;
			case NULL:
				{
				setState(3714);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SecurityLabelContext extends ParserRuleContext {
		public TerminalNode SECURITY() { return getToken(SQLParser.SECURITY, 0); }
		public TerminalNode LABEL() { return getToken(SQLParser.LABEL, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public LabelMemberObjectContext labelMemberObject() {
			return getRuleContext(LabelMemberObjectContext.class,0);
		}
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public List<CharacterStringContext> characterString() {
			return getRuleContexts(CharacterStringContext.class);
		}
		public CharacterStringContext characterString(int i) {
			return getRuleContext(CharacterStringContext.class,i);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SecurityLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_securityLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSecurityLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSecurityLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSecurityLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SecurityLabelContext securityLabel() throws RecognitionException {
		SecurityLabelContext _localctx = new SecurityLabelContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_securityLabel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3717);
			match(SECURITY);
			setState(3718);
			match(LABEL);
			setState(3724);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(3719);
				match(FOR);
				setState(3722);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(3720);
					identifier();
					}
					break;
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(3721);
					characterString();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(3726);
			match(ON);
			setState(3727);
			labelMemberObject();
			setState(3728);
			match(IS);
			setState(3731);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Character_String_Literal:
			case BeginDollarStringConstant:
				{
				setState(3729);
				characterString();
				}
				break;
			case NULL:
				{
				setState(3730);
				match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommentMemberObjectContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public DataTypeContext source;
		public DataTypeContext target;
		public SchemaQualifiedNameContext tableName;
		public IdentifierContext indexMethod;
		public TerminalNode ACCESS() { return getToken(SQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(SQLParser.METHOD, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(SQLParser.AGGREGATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode ROUTINE() { return getToken(SQLParser.ROUTINE, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(SQLParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode COLLATION() { return getToken(SQLParser.COLLATION, 0); }
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode DOMAIN() { return getToken(SQLParser.DOMAIN, 0); }
		public TerminalNode CONVERSION() { return getToken(SQLParser.CONVERSION, 0); }
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public TerminalNode EVENT() { return getToken(SQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SQLParser.MATERIALIZED, 0); }
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TargetOperatorContext targetOperator() {
			return getRuleContext(TargetOperatorContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode FAMILY() { return getToken(SQLParser.FAMILY, 0); }
		public TerminalNode CLASS() { return getToken(SQLParser.CLASS, 0); }
		public TerminalNode POLICY() { return getToken(SQLParser.POLICY, 0); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public TerminalNode PUBLICATION() { return getToken(SQLParser.PUBLICATION, 0); }
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public TerminalNode RULE() { return getToken(SQLParser.RULE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public TerminalNode STATISTICS() { return getToken(SQLParser.STATISTICS, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(SQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SQLParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(SQLParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(SQLParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(SQLParser.TEMPLATE, 0); }
		public TerminalNode TRANSFORM() { return getToken(SQLParser.TRANSFORM, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public CommentMemberObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commentMemberObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCommentMemberObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCommentMemberObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCommentMemberObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommentMemberObjectContext commentMemberObject() throws RecognitionException {
		CommentMemberObjectContext _localctx = new CommentMemberObjectContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_commentMemberObject);
		int _la;
		try {
			setState(3857);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3733);
				match(ACCESS);
				setState(3734);
				match(METHOD);
				setState(3735);
				identifier();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3736);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3737);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				setState(3738);
				functionArgs();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3740);
				match(CAST);
				setState(3741);
				match(LEFT_PAREN);
				setState(3742);
				((CommentMemberObjectContext)_localctx).source = dataType();
				setState(3743);
				match(AS);
				setState(3744);
				((CommentMemberObjectContext)_localctx).target = dataType();
				setState(3745);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3747);
				match(COLLATION);
				setState(3748);
				identifier();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3749);
				match(COLUMN);
				setState(3750);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3751);
				match(CONSTRAINT);
				setState(3752);
				identifier();
				setState(3753);
				match(ON);
				setState(3755);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
				case 1:
					{
					setState(3754);
					match(DOMAIN);
					}
					break;
				}
				setState(3757);
				((CommentMemberObjectContext)_localctx).tableName = schemaQualifiedName();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3759);
				match(CONVERSION);
				setState(3760);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3761);
				match(DATABASE);
				setState(3762);
				identifier();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(3763);
				match(DOMAIN);
				setState(3764);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(3765);
				match(EXTENSION);
				setState(3766);
				identifier();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(3767);
				match(EVENT);
				setState(3768);
				match(TRIGGER);
				setState(3769);
				identifier();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(3770);
				match(FOREIGN);
				setState(3771);
				match(DATA);
				setState(3772);
				match(WRAPPER);
				setState(3773);
				identifier();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(3775);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(3774);
					match(FOREIGN);
					}
				}

				setState(3777);
				match(TABLE);
				setState(3778);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(3779);
				match(INDEX);
				setState(3780);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(3781);
				match(LARGE);
				setState(3782);
				match(OBJECT);
				setState(3783);
				match(NUMBER_LITERAL);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(3785);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(3784);
					match(MATERIALIZED);
					}
				}

				setState(3787);
				match(VIEW);
				setState(3788);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(3789);
				match(OPERATOR);
				setState(3790);
				targetOperator();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(3791);
				match(OPERATOR);
				setState(3792);
				_la = _input.LA(1);
				if ( !(_la==CLASS || _la==FAMILY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3793);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				setState(3794);
				match(USING);
				setState(3795);
				((CommentMemberObjectContext)_localctx).indexMethod = identifier();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(3797);
				match(POLICY);
				setState(3798);
				identifier();
				setState(3799);
				match(ON);
				setState(3800);
				((CommentMemberObjectContext)_localctx).tableName = schemaQualifiedName();
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(3803);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(3802);
					match(PROCEDURAL);
					}
				}

				setState(3805);
				match(LANGUAGE);
				setState(3806);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(3807);
				match(PUBLICATION);
				setState(3808);
				identifier();
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(3809);
				match(ROLE);
				setState(3810);
				identifier();
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(3811);
				match(RULE);
				setState(3812);
				identifier();
				setState(3813);
				match(ON);
				setState(3814);
				((CommentMemberObjectContext)_localctx).tableName = schemaQualifiedName();
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(3816);
				match(SCHEMA);
				setState(3817);
				identifier();
				}
				break;
			case 25:
				enterOuterAlt(_localctx, 25);
				{
				setState(3818);
				match(SEQUENCE);
				setState(3819);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 26:
				enterOuterAlt(_localctx, 26);
				{
				setState(3820);
				match(SERVER);
				setState(3821);
				identifier();
				}
				break;
			case 27:
				enterOuterAlt(_localctx, 27);
				{
				setState(3822);
				match(STATISTICS);
				setState(3823);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 28:
				enterOuterAlt(_localctx, 28);
				{
				setState(3824);
				match(SUBSCRIPTION);
				setState(3825);
				identifier();
				}
				break;
			case 29:
				enterOuterAlt(_localctx, 29);
				{
				setState(3826);
				match(TABLESPACE);
				setState(3827);
				identifier();
				}
				break;
			case 30:
				enterOuterAlt(_localctx, 30);
				{
				setState(3828);
				match(TEXT);
				setState(3829);
				match(SEARCH);
				setState(3830);
				match(CONFIGURATION);
				setState(3831);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 31:
				enterOuterAlt(_localctx, 31);
				{
				setState(3832);
				match(TEXT);
				setState(3833);
				match(SEARCH);
				setState(3834);
				match(DICTIONARY);
				setState(3835);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 32:
				enterOuterAlt(_localctx, 32);
				{
				setState(3836);
				match(TEXT);
				setState(3837);
				match(SEARCH);
				setState(3838);
				match(PARSER);
				setState(3839);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 33:
				enterOuterAlt(_localctx, 33);
				{
				setState(3840);
				match(TEXT);
				setState(3841);
				match(SEARCH);
				setState(3842);
				match(TEMPLATE);
				setState(3843);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 34:
				enterOuterAlt(_localctx, 34);
				{
				setState(3844);
				match(TRANSFORM);
				setState(3845);
				match(FOR);
				setState(3846);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				setState(3847);
				match(LANGUAGE);
				setState(3848);
				identifier();
				}
				break;
			case 35:
				enterOuterAlt(_localctx, 35);
				{
				setState(3850);
				match(TRIGGER);
				setState(3851);
				identifier();
				setState(3852);
				match(ON);
				setState(3853);
				((CommentMemberObjectContext)_localctx).tableName = schemaQualifiedName();
				}
				break;
			case 36:
				enterOuterAlt(_localctx, 36);
				{
				setState(3855);
				match(TYPE);
				setState(3856);
				((CommentMemberObjectContext)_localctx).name = schemaQualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LabelMemberObjectContext extends ParserRuleContext {
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode AGGREGATE() { return getToken(SQLParser.AGGREGATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode ROUTINE() { return getToken(SQLParser.ROUTINE, 0); }
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOMAIN() { return getToken(SQLParser.DOMAIN, 0); }
		public TerminalNode EVENT() { return getToken(SQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SQLParser.MATERIALIZED, 0); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public TerminalNode PUBLICATION() { return getToken(SQLParser.PUBLICATION, 0); }
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(SQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public LabelMemberObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_labelMemberObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLabelMemberObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLabelMemberObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitLabelMemberObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LabelMemberObjectContext labelMemberObject() throws RecognitionException {
		LabelMemberObjectContext _localctx = new LabelMemberObjectContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_labelMemberObject);
		int _la;
		try {
			setState(3904);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AGGREGATE:
			case FUNCTION:
			case PROCEDURE:
			case ROUTINE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3859);
				_la = _input.LA(1);
				if ( !(_la==AGGREGATE || _la==FUNCTION || _la==PROCEDURE || _la==ROUTINE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3860);
				schemaQualifiedName();
				setState(3861);
				functionArgs();
				}
				break;
			case COLUMN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3863);
				match(COLUMN);
				setState(3864);
				schemaQualifiedName();
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3865);
				match(DATABASE);
				setState(3866);
				identifier();
				}
				break;
			case DOMAIN:
				enterOuterAlt(_localctx, 4);
				{
				setState(3867);
				match(DOMAIN);
				setState(3868);
				schemaQualifiedName();
				}
				break;
			case EVENT:
				enterOuterAlt(_localctx, 5);
				{
				setState(3869);
				match(EVENT);
				setState(3870);
				match(TRIGGER);
				setState(3871);
				identifier();
				}
				break;
			case FOREIGN:
			case TABLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(3873);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(3872);
					match(FOREIGN);
					}
				}

				setState(3875);
				match(TABLE);
				setState(3876);
				schemaQualifiedName();
				}
				break;
			case LARGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(3877);
				match(LARGE);
				setState(3878);
				match(OBJECT);
				setState(3879);
				match(NUMBER_LITERAL);
				}
				break;
			case MATERIALIZED:
			case VIEW:
				enterOuterAlt(_localctx, 8);
				{
				setState(3881);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(3880);
					match(MATERIALIZED);
					}
				}

				setState(3883);
				match(VIEW);
				setState(3884);
				schemaQualifiedName();
				}
				break;
			case LANGUAGE:
			case PROCEDURAL:
				enterOuterAlt(_localctx, 9);
				{
				setState(3886);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(3885);
					match(PROCEDURAL);
					}
				}

				setState(3888);
				match(LANGUAGE);
				setState(3889);
				schemaQualifiedName();
				}
				break;
			case PUBLICATION:
				enterOuterAlt(_localctx, 10);
				{
				setState(3890);
				match(PUBLICATION);
				setState(3891);
				identifier();
				}
				break;
			case ROLE:
				enterOuterAlt(_localctx, 11);
				{
				setState(3892);
				match(ROLE);
				setState(3893);
				identifier();
				}
				break;
			case SCHEMA:
				enterOuterAlt(_localctx, 12);
				{
				setState(3894);
				match(SCHEMA);
				setState(3895);
				identifier();
				}
				break;
			case SEQUENCE:
				enterOuterAlt(_localctx, 13);
				{
				setState(3896);
				match(SEQUENCE);
				setState(3897);
				schemaQualifiedName();
				}
				break;
			case SUBSCRIPTION:
				enterOuterAlt(_localctx, 14);
				{
				setState(3898);
				match(SUBSCRIPTION);
				setState(3899);
				identifier();
				}
				break;
			case TABLESPACE:
				enterOuterAlt(_localctx, 15);
				{
				setState(3900);
				match(TABLESPACE);
				setState(3901);
				identifier();
				}
				break;
			case TYPE:
				enterOuterAlt(_localctx, 16);
				{
				setState(3902);
				match(TYPE);
				setState(3903);
				schemaQualifiedName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctionStatementContext extends ParserRuleContext {
		public DataTypeContext rettypeData;
		public FunctionRetTableContext retTable;
		public FunctionParametersContext functionParameters() {
			return getRuleContext(FunctionParametersContext.class,0);
		}
		public CreateFunctParamsContext createFunctParams() {
			return getRuleContext(CreateFunctParamsContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public TerminalNode RETURNS() { return getToken(SQLParser.RETURNS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionRetTableContext functionRetTable() {
			return getRuleContext(FunctionRetTableContext.class,0);
		}
		public CreateFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctionStatementContext createFunctionStatement() throws RecognitionException {
		CreateFunctionStatementContext _localctx = new CreateFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_createFunctionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3908);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(3906);
				match(OR);
				setState(3907);
				match(REPLACE);
				}
			}

			setState(3910);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3911);
			functionParameters();
			setState(3917);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				setState(3912);
				match(RETURNS);
				setState(3915);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case TABLESAMPLE:
				case VERBOSE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(3913);
					((CreateFunctionStatementContext)_localctx).rettypeData = dataType();
					}
					break;
				case TABLE:
					{
					setState(3914);
					((CreateFunctionStatementContext)_localctx).retTable = functionRetTable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			setState(3919);
			createFunctParams();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateFunctParamsContext extends ParserRuleContext {
		public List<FunctionActionsCommonContext> functionActionsCommon() {
			return getRuleContexts(FunctionActionsCommonContext.class);
		}
		public FunctionActionsCommonContext functionActionsCommon(int i) {
			return getRuleContext(FunctionActionsCommonContext.class,i);
		}
		public WithStorageParameterContext withStorageParameter() {
			return getRuleContext(WithStorageParameterContext.class,0);
		}
		public CreateFunctParamsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createFunctParams; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateFunctParams(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateFunctParams(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateFunctParams(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateFunctParamsContext createFunctParams() throws RecognitionException {
		CreateFunctParamsContext _localctx = new CreateFunctParamsContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_createFunctParams);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3922); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3921);
				functionActionsCommon();
				}
				}
				setState(3924); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CALLED || _la==COST || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (EXTERNAL - 85)) | (1L << (IMMUTABLE - 85)) | (1L << (LANGUAGE - 85)) | (1L << (LEAKPROOF - 85)))) != 0) || ((((_la - 169)) & ~0x3f) == 0 && ((1L << (_la - 169)) & ((1L << (PARALLEL - 169)) | (1L << (RETURNS - 169)) | (1L << (ROWS - 169)) | (1L << (SECURITY - 169)) | (1L << (SET - 169)))) != 0) || ((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (STABLE - 236)) | (1L << (STRICT - 236)) | (1L << (SUPPORT - 236)) | (1L << (TRANSFORM - 236)) | (1L << (VOLATILE - 236)))) != 0) || _la==AS || _la==NOT || _la==WINDOW );
			setState(3927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(3926);
				withStorageParameter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransformForTypeContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TransformForTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transformForType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTransformForType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTransformForType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTransformForType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransformForTypeContext transformForType() throws RecognitionException {
		TransformForTypeContext _localctx = new TransformForTypeContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_transformForType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3929);
			match(FOR);
			setState(3930);
			match(TYPE);
			setState(3931);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionRetTableContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<FunctionColumnNameTypeContext> functionColumnNameType() {
			return getRuleContexts(FunctionColumnNameTypeContext.class);
		}
		public FunctionColumnNameTypeContext functionColumnNameType(int i) {
			return getRuleContext(FunctionColumnNameTypeContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public FunctionRetTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionRetTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionRetTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionRetTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionRetTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionRetTableContext functionRetTable() throws RecognitionException {
		FunctionRetTableContext _localctx = new FunctionRetTableContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_functionRetTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3933);
			match(TABLE);
			setState(3934);
			match(LEFT_PAREN);
			setState(3935);
			functionColumnNameType();
			setState(3940);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3936);
				match(COMMA);
				setState(3937);
				functionColumnNameType();
				}
				}
				setState(3942);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3943);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionColumnNameTypeContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionColumnNameTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionColumnNameType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionColumnNameType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionColumnNameType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionColumnNameType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionColumnNameTypeContext functionColumnNameType() throws RecognitionException {
		FunctionColumnNameTypeContext _localctx = new FunctionColumnNameTypeContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_functionColumnNameType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3945);
			identifier();
			setState(3946);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParametersContext extends ParserRuleContext {
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public FunctionParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionParameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionParameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParametersContext functionParameters() throws RecognitionException {
		FunctionParametersContext _localctx = new FunctionParametersContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_functionParameters);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3948);
			schemaQualifiedName();
			setState(3949);
			functionArgs();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public List<FunctionArgumentsContext> functionArguments() {
			return getRuleContexts(FunctionArgumentsContext.class);
		}
		public FunctionArgumentsContext functionArguments(int i) {
			return getRuleContext(FunctionArgumentsContext.class,i);
		}
		public AggOrderContext aggOrder() {
			return getRuleContext(AggOrderContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3951);
			match(LEFT_PAREN);
			setState(3966);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
			case IN:
			case ORDER:
			case VARIADIC:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case RIGHT_PAREN:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(3960);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)))) != 0) || ((((_la - 405)) & ~0x3f) == 0 && ((1L << (_la - 405)) & ((1L << (IN - 405)) | (1L << (VARIADIC - 405)) | (1L << (ALIGNMENT - 405)) | (1L << (BASETYPE - 405)) | (1L << (BUFFERS - 405)) | (1L << (BYPASSRLS - 405)) | (1L << (CANONICAL - 405)) | (1L << (CATEGORY - 405)) | (1L << (COLLATABLE - 405)) | (1L << (COMBINEFUNC - 405)) | (1L << (COMMUTATOR - 405)) | (1L << (CONNECT - 405)) | (1L << (COSTS - 405)) | (1L << (CREATEDB - 405)) | (1L << (CREATEROLE - 405)) | (1L << (DESERIALFUNC - 405)) | (1L << (DETERMINISTIC - 405)) | (1L << (DISABLE_PAGE_SKIPPING - 405)) | (1L << (ELEMENT - 405)) | (1L << (EXTENDED - 405)) | (1L << (FINALFUNC - 405)) | (1L << (FINALFUNC_EXTRA - 405)) | (1L << (FINALFUNC_MODIFY - 405)) | (1L << (FORCE_NOT_NULL - 405)) | (1L << (FORCE_NULL - 405)) | (1L << (FORCE_QUOTE - 405)) | (1L << (FORMAT - 405)) | (1L << (GETTOKEN - 405)))) != 0) || ((((_la - 469)) & ~0x3f) == 0 && ((1L << (_la - 469)) & ((1L << (HASH - 469)) | (1L << (HASHES - 469)) | (1L << (HEADLINE - 469)) | (1L << (HYPOTHETICAL - 469)) | (1L << (INDEX_CLEANUP - 469)) | (1L << (INIT - 469)) | (1L << (INITCOND - 469)) | (1L << (INTERNALLENGTH - 469)) | (1L << (JSON - 469)) | (1L << (LC_COLLATE - 469)) | (1L << (LC_CTYPE - 469)) | (1L << (LEFTARG - 469)) | (1L << (LEXIZE - 469)) | (1L << (LEXTYPES - 469)) | (1L << (LIST - 469)) | (1L << (LOCALE - 469)) | (1L << (LOGIN - 469)) | (1L << (MAIN - 469)) | (1L << (MERGES - 469)) | (1L << (MFINALFUNC - 469)) | (1L << (MFINALFUNC_EXTRA - 469)) | (1L << (MFINALFUNC_MODIFY - 469)) | (1L << (MINITCOND - 469)) | (1L << (MINVFUNC - 469)) | (1L << (MODULUS - 469)) | (1L << (MSFUNC - 469)) | (1L << (MSSPACE - 469)) | (1L << (MSTYPE - 469)) | (1L << (NEGATOR - 469)) | (1L << (NOBYPASSRLS - 469)) | (1L << (NOCREATEDB - 469)) | (1L << (NOCREATEROLE - 469)) | (1L << (NOINHERIT - 469)) | (1L << (NOLOGIN - 469)) | (1L << (NOREPLICATION - 469)) | (1L << (NOSUPERUSER - 469)) | (1L << (OUTPUT - 469)) | (1L << (PASSEDBYVALUE - 469)) | (1L << (PATH - 469)) | (1L << (PERMISSIVE - 469)) | (1L << (PLAIN - 469)) | (1L << (PREFERRED - 469)) | (1L << (PROVIDER - 469)) | (1L << (READ_ONLY - 469)) | (1L << (READ_WRITE - 469)) | (1L << (RECEIVE - 469)) | (1L << (REMAINDER - 469)) | (1L << (REPLICATION - 469)) | (1L << (RESTRICTED - 469)) | (1L << (RESTRICTIVE - 469)) | (1L << (RIGHTARG - 469)) | (1L << (SAFE - 469)) | (1L << (SEND - 469)) | (1L << (SERIALFUNC - 469)) | (1L << (SETTINGS - 469)) | (1L << (SFUNC - 469)) | (1L << (SHAREABLE - 469)) | (1L << (SKIP_LOCKED - 469)) | (1L << (SORTOP - 469)) | (1L << (SSPACE - 469)) | (1L << (STYPE - 469)) | (1L << (SUBTYPE_DIFF - 469)) | (1L << (SUBTYPE_OPCLASS - 469)) | (1L << (SUBTYPE - 469)))) != 0) || ((((_la - 533)) & ~0x3f) == 0 && ((1L << (_la - 533)) & ((1L << (SUMMARY - 533)) | (1L << (SUPERUSER - 533)) | (1L << (TIMING - 533)) | (1L << (TYPMOD_IN - 533)) | (1L << (TYPMOD_OUT - 533)) | (1L << (UNSAFE - 533)) | (1L << (USAGE - 533)) | (1L << (VARIABLE - 533)) | (1L << (YAML - 533)) | (1L << (ALIAS - 533)) | (1L << (ASSERT - 533)) | (1L << (CONSTANT - 533)) | (1L << (DATATYPE - 533)) | (1L << (DEBUG - 533)) | (1L << (DETAIL - 533)) | (1L << (DIAGNOSTICS - 533)) | (1L << (ELSEIF - 533)) | (1L << (ELSIF - 533)) | (1L << (ERRCODE - 533)) | (1L << (EXIT - 533)) | (1L << (EXCEPTION - 533)) | (1L << (FOREACH - 533)) | (1L << (GET - 533)) | (1L << (HINT - 533)) | (1L << (INFO - 533)) | (1L << (LOG - 533)) | (1L << (LOOP - 533)) | (1L << (MESSAGE - 533)) | (1L << (NOTICE - 533)) | (1L << (OPEN - 533)) | (1L << (PERFORM - 533)) | (1L << (QUERY - 533)) | (1L << (RAISE - 533)) | (1L << (RECORD - 533)) | (1L << (RETURN - 533)) | (1L << (REVERSE - 533)) | (1L << (ROWTYPE - 533)) | (1L << (SLICE - 533)) | (1L << (SQLSTATE - 533)) | (1L << (STACKED - 533)) | (1L << (WARNING - 533)) | (1L << (WHILE - 533)))) != 0) || _la==Identifier || _la==QuotedIdentifier) {
					{
					setState(3952);
					functionArguments();
					setState(3957);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3953);
						match(COMMA);
						setState(3954);
						functionArguments();
						}
						}
						setState(3959);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(3963);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(3962);
					aggOrder();
					}
				}

				}
				break;
			case MULTIPLY:
				{
				setState(3965);
				match(MULTIPLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3968);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggOrderContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(SQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public List<FunctionArgumentsContext> functionArguments() {
			return getRuleContexts(FunctionArgumentsContext.class);
		}
		public FunctionArgumentsContext functionArguments(int i) {
			return getRuleContext(FunctionArgumentsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public AggOrderContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggOrder; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAggOrder(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAggOrder(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAggOrder(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggOrderContext aggOrder() throws RecognitionException {
		AggOrderContext _localctx = new AggOrderContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_aggOrder);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3970);
			match(ORDER);
			setState(3971);
			match(BY);
			setState(3972);
			functionArguments();
			setState(3977);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3973);
				match(COMMA);
				setState(3974);
				functionArguments();
				}
				}
				setState(3979);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharacterStringContext extends ParserRuleContext {
		public TerminalNode BeginDollarStringConstant() { return getToken(SQLParser.BeginDollarStringConstant, 0); }
		public TerminalNode EndDollarStringConstant() { return getToken(SQLParser.EndDollarStringConstant, 0); }
		public List<TerminalNode> TextBetween_Dollar() { return getTokens(SQLParser.TextBetween_Dollar); }
		public TerminalNode TextBetween_Dollar(int i) {
			return getToken(SQLParser.TextBetween_Dollar, i);
		}
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public CharacterStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_characterString; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCharacterString(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCharacterString(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCharacterString(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharacterStringContext characterString() throws RecognitionException {
		CharacterStringContext _localctx = new CharacterStringContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_characterString);
		int _la;
		try {
			setState(3989);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BeginDollarStringConstant:
				enterOuterAlt(_localctx, 1);
				{
				setState(3980);
				match(BeginDollarStringConstant);
				setState(3984);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==TextBetween_Dollar) {
					{
					{
					setState(3981);
					match(TextBetween_Dollar);
					}
					}
					setState(3986);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3987);
				match(EndDollarStringConstant);
				}
				break;
			case Character_String_Literal:
				enterOuterAlt(_localctx, 2);
				{
				setState(3988);
				match(Character_String_Literal);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgumentsContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ArgmodeContext argmode() {
			return getRuleContext(ArgmodeContext.class,0);
		}
		public IdentifierNontypeContext identifierNontype() {
			return getRuleContext(IdentifierNontypeContext.class,0);
		}
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public FunctionArgumentsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArguments; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionArguments(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionArguments(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionArguments(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgumentsContext functionArguments() throws RecognitionException {
		FunctionArgumentsContext _localctx = new FunctionArgumentsContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_functionArguments);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3992);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
			case 1:
				{
				setState(3991);
				argmode();
				}
				break;
			}
			setState(3995);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				setState(3994);
				identifierNontype();
				}
				break;
			}
			setState(3997);
			dataType();
			setState(4000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==EQUAL) {
				{
				setState(3998);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==EQUAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3999);
				vex(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgmodeContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode OUT() { return getToken(SQLParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(SQLParser.INOUT, 0); }
		public TerminalNode VARIADIC() { return getToken(SQLParser.VARIADIC, 0); }
		public ArgmodeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argmode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterArgmode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitArgmode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitArgmode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgmodeContext argmode() throws RecognitionException {
		ArgmodeContext _localctx = new ArgmodeContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_argmode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4002);
			_la = _input.LA(1);
			if ( !(_la==INOUT || _la==OUT || _la==IN || _la==VARIADIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSequenceStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public List<SequenceBodyContext> sequenceBody() {
			return getRuleContexts(SequenceBodyContext.class);
		}
		public SequenceBodyContext sequenceBody(int i) {
			return getRuleContext(SequenceBodyContext.class,i);
		}
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public CreateSequenceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSequenceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateSequenceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateSequenceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateSequenceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSequenceStatementContext createSequenceStatement() throws RecognitionException {
		CreateSequenceStatementContext _localctx = new CreateSequenceStatementContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_createSequenceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4005);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(4004);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4007);
			match(SEQUENCE);
			setState(4009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
			case 1:
				{
				setState(4008);
				ifNotExists();
				}
				break;
			}
			setState(4011);
			((CreateSequenceStatementContext)_localctx).name = schemaQualifiedName();
			setState(4015);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 110)) & ~0x3f) == 0 && ((1L << (_la - 110)) & ((1L << (INCREMENT - 110)) | (1L << (MAXVALUE - 110)) | (1L << (MINVALUE - 110)) | (1L << (NO - 110)) | (1L << (OWNED - 110)))) != 0) || _la==SEQUENCE || _la==START || _la==AS) {
				{
				{
				setState(4012);
				sequenceBody();
				}
				}
				setState(4017);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceBodyContext extends ParserRuleContext {
		public Token type;
		public SchemaQualifiedNameContext name;
		public SignedNumericalLiteralContext incr;
		public SignedNumericalLiteralContext minval;
		public SignedNumericalLiteralContext maxval;
		public SignedNumericalLiteralContext startVal;
		public SignedNumericalLiteralContext cacheVal;
		public Token cycleTrue;
		public Token cycleVal;
		public SchemaQualifiedNameContext colName;
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode SMALLINT() { return getToken(SQLParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(SQLParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(SQLParser.BIGINT, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode NAME() { return getToken(SQLParser.NAME, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode INCREMENT() { return getToken(SQLParser.INCREMENT, 0); }
		public SignedNumericalLiteralContext signedNumericalLiteral() {
			return getRuleContext(SignedNumericalLiteralContext.class,0);
		}
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public TerminalNode MINVALUE() { return getToken(SQLParser.MINVALUE, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode MAXVALUE() { return getToken(SQLParser.MAXVALUE, 0); }
		public TerminalNode START() { return getToken(SQLParser.START, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode CACHE() { return getToken(SQLParser.CACHE, 0); }
		public TerminalNode CYCLE() { return getToken(SQLParser.CYCLE, 0); }
		public TerminalNode OWNED() { return getToken(SQLParser.OWNED, 0); }
		public SequenceBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSequenceBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSequenceBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSequenceBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceBodyContext sequenceBody() throws RecognitionException {
		SequenceBodyContext _localctx = new SequenceBodyContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_sequenceBody);
		int _la;
		try {
			setState(4054);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4018);
				match(AS);
				setState(4019);
				((SequenceBodyContext)_localctx).type = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (BIGINT - 294)) | (1L << (INTEGER - 294)) | (1L << (SMALLINT - 294)))) != 0)) ) {
					((SequenceBodyContext)_localctx).type = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4020);
				match(SEQUENCE);
				setState(4021);
				match(NAME);
				setState(4022);
				((SequenceBodyContext)_localctx).name = schemaQualifiedName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4023);
				match(INCREMENT);
				setState(4025);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(4024);
					match(BY);
					}
				}

				setState(4027);
				((SequenceBodyContext)_localctx).incr = signedNumericalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4032);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MINVALUE:
					{
					setState(4028);
					match(MINVALUE);
					setState(4029);
					((SequenceBodyContext)_localctx).minval = signedNumericalLiteral();
					}
					break;
				case NO:
					{
					setState(4030);
					match(NO);
					setState(4031);
					match(MINVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4038);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MAXVALUE:
					{
					setState(4034);
					match(MAXVALUE);
					setState(4035);
					((SequenceBodyContext)_localctx).maxval = signedNumericalLiteral();
					}
					break;
				case NO:
					{
					setState(4036);
					match(NO);
					setState(4037);
					match(MAXVALUE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4040);
				match(START);
				setState(4042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4041);
					match(WITH);
					}
				}

				setState(4044);
				((SequenceBodyContext)_localctx).startVal = signedNumericalLiteral();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4045);
				match(CACHE);
				setState(4046);
				((SequenceBodyContext)_localctx).cacheVal = signedNumericalLiteral();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4048);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4047);
					((SequenceBodyContext)_localctx).cycleTrue = match(NO);
					}
				}

				setState(4050);
				((SequenceBodyContext)_localctx).cycleVal = match(CYCLE);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4051);
				match(OWNED);
				setState(4052);
				match(BY);
				setState(4053);
				((SequenceBodyContext)_localctx).colName = schemaQualifiedName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedNumberLiteralContext extends ParserRuleContext {
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public SignedNumberLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedNumberLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSignedNumberLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSignedNumberLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSignedNumberLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedNumberLiteralContext signedNumberLiteral() throws RecognitionException {
		SignedNumberLiteralContext _localctx = new SignedNumberLiteralContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_signedNumberLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4057);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(4056);
				sign();
				}
			}

			setState(4059);
			match(NUMBER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignedNumericalLiteralContext extends ParserRuleContext {
		public UnsignedNumericLiteralContext unsignedNumericLiteral() {
			return getRuleContext(UnsignedNumericLiteralContext.class,0);
		}
		public SignContext sign() {
			return getRuleContext(SignContext.class,0);
		}
		public SignedNumericalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signedNumericalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSignedNumericalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSignedNumericalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSignedNumericalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignedNumericalLiteralContext signedNumericalLiteral() throws RecognitionException {
		SignedNumericalLiteralContext _localctx = new SignedNumericalLiteralContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_signedNumericalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4062);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PLUS || _la==MINUS) {
				{
				setState(4061);
				sign();
				}
			}

			setState(4064);
			unsignedNumericLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(SQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SQLParser.MINUS, 0); }
		public SignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignContext sign() throws RecognitionException {
		SignContext _localctx = new SignContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_sign);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4066);
			_la = _input.LA(1);
			if ( !(_la==PLUS || _la==MINUS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSchemaStatementContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode AUTHORIZATION() { return getToken(SQLParser.AUTHORIZATION, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CreateSchemaStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSchemaStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateSchemaStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateSchemaStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateSchemaStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSchemaStatementContext createSchemaStatement() throws RecognitionException {
		CreateSchemaStatementContext _localctx = new CreateSchemaStatementContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_createSchemaStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4068);
			match(SCHEMA);
			setState(4070);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(4069);
				ifNotExists();
				}
				break;
			}
			setState(4073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(4072);
				((CreateSchemaStatementContext)_localctx).name = identifier();
				}
			}

			setState(4077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHORIZATION) {
				{
				setState(4075);
				match(AUTHORIZATION);
				setState(4076);
				userName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePolicyStatementContext extends ParserRuleContext {
		public Token event;
		public VexContext using;
		public VexContext check;
		public TerminalNode POLICY() { return getToken(SQLParser.POLICY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(SQLParser.CHECK, 0); }
		public TerminalNode PERMISSIVE() { return getToken(SQLParser.PERMISSIVE, 0); }
		public TerminalNode RESTRICTIVE() { return getToken(SQLParser.RESTRICTIVE, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode SELECT() { return getToken(SQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(SQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(SQLParser.DELETE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CreatePolicyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPolicyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreatePolicyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreatePolicyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreatePolicyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePolicyStatementContext createPolicyStatement() throws RecognitionException {
		CreatePolicyStatementContext _localctx = new CreatePolicyStatementContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_createPolicyStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4079);
			match(POLICY);
			setState(4080);
			identifier();
			setState(4081);
			match(ON);
			setState(4082);
			schemaQualifiedName();
			setState(4085);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4083);
				match(AS);
				setState(4084);
				_la = _input.LA(1);
				if ( !(_la==PERMISSIVE || _la==RESTRICTIVE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4087);
				match(FOR);
				setState(4088);
				((CreatePolicyStatementContext)_localctx).event = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELETE || _la==INSERT || _la==UPDATE || _la==ALL || _la==SELECT) ) {
					((CreatePolicyStatementContext)_localctx).event = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TO) {
				{
				setState(4091);
				match(TO);
				setState(4092);
				userName();
				setState(4097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4093);
					match(COMMA);
					setState(4094);
					userName();
					}
					}
					setState(4099);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4102);
				match(USING);
				setState(4103);
				((CreatePolicyStatementContext)_localctx).using = vex(0);
				}
			}

			setState(4109);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4106);
				match(WITH);
				setState(4107);
				match(CHECK);
				setState(4108);
				((CreatePolicyStatementContext)_localctx).check = vex(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPolicyStatementContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(SQLParser.POLICY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public List<UserNameContext> userName() {
			return getRuleContexts(UserNameContext.class);
		}
		public UserNameContext userName(int i) {
			return getRuleContext(UserNameContext.class,i);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(SQLParser.CHECK, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public AlterPolicyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPolicyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterPolicyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterPolicyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterPolicyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPolicyStatementContext alterPolicyStatement() throws RecognitionException {
		AlterPolicyStatementContext _localctx = new AlterPolicyStatementContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_alterPolicyStatement);
		int _la;
		try {
			setState(4141);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4111);
				match(POLICY);
				setState(4112);
				identifier();
				setState(4113);
				match(ON);
				setState(4114);
				schemaQualifiedName();
				setState(4115);
				renameTo();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4117);
				match(POLICY);
				setState(4118);
				identifier();
				setState(4119);
				match(ON);
				setState(4120);
				schemaQualifiedName();
				setState(4130);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==TO) {
					{
					setState(4121);
					match(TO);
					setState(4122);
					userName();
					setState(4127);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(4123);
						match(COMMA);
						setState(4124);
						userName();
						}
						}
						setState(4129);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(4134);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4132);
					match(USING);
					setState(4133);
					vex(0);
					}
				}

				setState(4139);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4136);
					match(WITH);
					setState(4137);
					match(CHECK);
					setState(4138);
					vex(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropPolicyStatementContext extends ParserRuleContext {
		public TerminalNode POLICY() { return getToken(SQLParser.POLICY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public DropPolicyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropPolicyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropPolicyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropPolicyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropPolicyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropPolicyStatementContext dropPolicyStatement() throws RecognitionException {
		DropPolicyStatementContext _localctx = new DropPolicyStatementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_dropPolicyStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4143);
			match(POLICY);
			setState(4145);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				setState(4144);
				ifExists();
				}
				break;
			}
			setState(4147);
			identifier();
			setState(4148);
			match(ON);
			setState(4149);
			schemaQualifiedName();
			setState(4151);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4150);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateSubscriptionStatementContext extends ParserRuleContext {
		public TerminalNode SUBSCRIPTION() { return getToken(SQLParser.SUBSCRIPTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode CONNECTION() { return getToken(SQLParser.CONNECTION, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public TerminalNode PUBLICATION() { return getToken(SQLParser.PUBLICATION, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public WithStorageParameterContext withStorageParameter() {
			return getRuleContext(WithStorageParameterContext.class,0);
		}
		public CreateSubscriptionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createSubscriptionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateSubscriptionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateSubscriptionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateSubscriptionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateSubscriptionStatementContext createSubscriptionStatement() throws RecognitionException {
		CreateSubscriptionStatementContext _localctx = new CreateSubscriptionStatementContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_createSubscriptionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4153);
			match(SUBSCRIPTION);
			setState(4154);
			identifier();
			setState(4155);
			match(CONNECTION);
			setState(4156);
			match(Character_String_Literal);
			setState(4157);
			match(PUBLICATION);
			setState(4158);
			identifierList();
			setState(4160);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4159);
				withStorageParameter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSubscriptionStatementContext extends ParserRuleContext {
		public TerminalNode SUBSCRIPTION() { return getToken(SQLParser.SUBSCRIPTION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterSubscriptionActionContext alterSubscriptionAction() {
			return getRuleContext(AlterSubscriptionActionContext.class,0);
		}
		public AlterSubscriptionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSubscriptionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterSubscriptionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterSubscriptionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterSubscriptionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSubscriptionStatementContext alterSubscriptionStatement() throws RecognitionException {
		AlterSubscriptionStatementContext _localctx = new AlterSubscriptionStatementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_alterSubscriptionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4162);
			match(SUBSCRIPTION);
			setState(4163);
			identifier();
			setState(4164);
			alterSubscriptionAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterSubscriptionActionContext extends ParserRuleContext {
		public TerminalNode CONNECTION() { return getToken(SQLParser.CONNECTION, 0); }
		public CharacterStringContext characterString() {
			return getRuleContext(CharacterStringContext.class,0);
		}
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode PUBLICATION() { return getToken(SQLParser.PUBLICATION, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public WithStorageParameterContext withStorageParameter() {
			return getRuleContext(WithStorageParameterContext.class,0);
		}
		public TerminalNode REFRESH() { return getToken(SQLParser.REFRESH, 0); }
		public TerminalNode ENABLE() { return getToken(SQLParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(SQLParser.DISABLE, 0); }
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public AlterSubscriptionActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterSubscriptionAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterSubscriptionAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterSubscriptionAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterSubscriptionAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterSubscriptionActionContext alterSubscriptionAction() throws RecognitionException {
		AlterSubscriptionActionContext _localctx = new AlterSubscriptionActionContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_alterSubscriptionAction);
		int _la;
		try {
			setState(4185);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4166);
				match(CONNECTION);
				setState(4167);
				characterString();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4168);
				match(SET);
				setState(4169);
				match(PUBLICATION);
				setState(4170);
				identifierList();
				setState(4172);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4171);
					withStorageParameter();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4174);
				match(REFRESH);
				setState(4175);
				match(PUBLICATION);
				setState(4177);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4176);
					withStorageParameter();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4179);
				match(ENABLE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4180);
				match(DISABLE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4181);
				match(SET);
				setState(4182);
				storageParameter();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4183);
				ownerTo();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4184);
				renameTo();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateCastStatementContext extends ParserRuleContext {
		public DataTypeContext source;
		public DataTypeContext target;
		public SchemaQualifiedNameContext funcName;
		public TerminalNode CAST() { return getToken(SQLParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<TerminalNode> AS() { return getTokens(SQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(SQLParser.AS, i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public TerminalNode INOUT() { return getToken(SQLParser.INOUT, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode ASSIGNMENT() { return getToken(SQLParser.ASSIGNMENT, 0); }
		public TerminalNode IMPLICIT() { return getToken(SQLParser.IMPLICIT, 0); }
		public CreateCastStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createCastStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateCastStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateCastStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateCastStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateCastStatementContext createCastStatement() throws RecognitionException {
		CreateCastStatementContext _localctx = new CreateCastStatementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_createCastStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4187);
			match(CAST);
			setState(4188);
			match(LEFT_PAREN);
			setState(4189);
			((CreateCastStatementContext)_localctx).source = dataType();
			setState(4190);
			match(AS);
			setState(4191);
			((CreateCastStatementContext)_localctx).target = dataType();
			setState(4192);
			match(RIGHT_PAREN);
			setState(4202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,476,_ctx) ) {
			case 1:
				{
				setState(4193);
				match(WITH);
				setState(4194);
				match(FUNCTION);
				setState(4195);
				((CreateCastStatementContext)_localctx).funcName = schemaQualifiedName();
				setState(4196);
				functionArgs();
				}
				break;
			case 2:
				{
				setState(4198);
				match(WITHOUT);
				setState(4199);
				match(FUNCTION);
				}
				break;
			case 3:
				{
				setState(4200);
				match(WITH);
				setState(4201);
				match(INOUT);
				}
				break;
			}
			setState(4208);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				setState(4204);
				match(AS);
				setState(4205);
				match(ASSIGNMENT);
				}
				break;
			case 2:
				{
				setState(4206);
				match(AS);
				setState(4207);
				match(IMPLICIT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropCastStatementContext extends ParserRuleContext {
		public DataTypeContext source;
		public DataTypeContext target;
		public TerminalNode CAST() { return getToken(SQLParser.CAST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public DropCastStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropCastStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropCastStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropCastStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropCastStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropCastStatementContext dropCastStatement() throws RecognitionException {
		DropCastStatementContext _localctx = new DropCastStatementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_dropCastStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4210);
			match(CAST);
			setState(4212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IF) {
				{
				setState(4211);
				ifExists();
				}
			}

			setState(4214);
			match(LEFT_PAREN);
			setState(4215);
			((DropCastStatementContext)_localctx).source = dataType();
			setState(4216);
			match(AS);
			setState(4217);
			((DropCastStatementContext)_localctx).target = dataType();
			setState(4218);
			match(RIGHT_PAREN);
			setState(4220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4219);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorFamilyStatementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(SQLParser.FAMILY, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CreateOperatorFamilyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorFamilyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateOperatorFamilyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateOperatorFamilyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateOperatorFamilyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorFamilyStatementContext createOperatorFamilyStatement() throws RecognitionException {
		CreateOperatorFamilyStatementContext _localctx = new CreateOperatorFamilyStatementContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_createOperatorFamilyStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4222);
			match(OPERATOR);
			setState(4223);
			match(FAMILY);
			setState(4224);
			schemaQualifiedName();
			setState(4225);
			match(USING);
			setState(4226);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorFamilyStatementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(SQLParser.FAMILY, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OperatorFamilyActionContext operatorFamilyAction() {
			return getRuleContext(OperatorFamilyActionContext.class,0);
		}
		public AlterOperatorFamilyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorFamilyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterOperatorFamilyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterOperatorFamilyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterOperatorFamilyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorFamilyStatementContext alterOperatorFamilyStatement() throws RecognitionException {
		AlterOperatorFamilyStatementContext _localctx = new AlterOperatorFamilyStatementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_alterOperatorFamilyStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4228);
			match(OPERATOR);
			setState(4229);
			match(FAMILY);
			setState(4230);
			schemaQualifiedName();
			setState(4231);
			match(USING);
			setState(4232);
			identifier();
			setState(4233);
			operatorFamilyAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorFamilyActionContext extends ParserRuleContext {
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public List<AddOperatorToFamilyContext> addOperatorToFamily() {
			return getRuleContexts(AddOperatorToFamilyContext.class);
		}
		public AddOperatorToFamilyContext addOperatorToFamily(int i) {
			return getRuleContext(AddOperatorToFamilyContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public List<DropOperatorFromFamilyContext> dropOperatorFromFamily() {
			return getRuleContexts(DropOperatorFromFamilyContext.class);
		}
		public DropOperatorFromFamilyContext dropOperatorFromFamily(int i) {
			return getRuleContext(DropOperatorFromFamilyContext.class,i);
		}
		public OperatorFamilyActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operatorFamilyAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOperatorFamilyAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOperatorFamilyAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOperatorFamilyAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorFamilyActionContext operatorFamilyAction() throws RecognitionException {
		OperatorFamilyActionContext _localctx = new OperatorFamilyActionContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_operatorFamilyAction);
		int _la;
		try {
			setState(4256);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				enterOuterAlt(_localctx, 1);
				{
				setState(4235);
				renameTo();
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4236);
				ownerTo();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(4237);
				setSchema();
				}
				break;
			case ADD:
				enterOuterAlt(_localctx, 4);
				{
				setState(4238);
				match(ADD);
				setState(4239);
				addOperatorToFamily();
				setState(4244);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4240);
					match(COMMA);
					setState(4241);
					addOperatorToFamily();
					}
					}
					setState(4246);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case DROP:
				enterOuterAlt(_localctx, 5);
				{
				setState(4247);
				match(DROP);
				setState(4248);
				dropOperatorFromFamily();
				setState(4253);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4249);
					match(COMMA);
					setState(4250);
					dropOperatorFromFamily();
					}
					}
					setState(4255);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AddOperatorToFamilyContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public UnsignedNumericLiteralContext unsignedNumericLiteral() {
			return getRuleContext(UnsignedNumericLiteralContext.class,0);
		}
		public TargetOperatorContext targetOperator() {
			return getRuleContext(TargetOperatorContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(SQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> NONE() { return getTokens(SQLParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(SQLParser.NONE, i);
		}
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public AddOperatorToFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_addOperatorToFamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAddOperatorToFamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAddOperatorToFamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAddOperatorToFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AddOperatorToFamilyContext addOperatorToFamily() throws RecognitionException {
		AddOperatorToFamilyContext _localctx = new AddOperatorToFamilyContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_addOperatorToFamily);
		int _la;
		try {
			setState(4288);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4258);
				match(OPERATOR);
				setState(4259);
				unsignedNumericLiteral();
				setState(4260);
				targetOperator();
				setState(4267);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
				case 1:
					{
					setState(4261);
					match(FOR);
					setState(4262);
					match(SEARCH);
					}
					break;
				case 2:
					{
					setState(4263);
					match(FOR);
					setState(4264);
					match(ORDER);
					setState(4265);
					match(BY);
					setState(4266);
					schemaQualifiedName();
					}
					break;
				}
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4269);
				match(FUNCTION);
				setState(4270);
				unsignedNumericLiteral();
				setState(4284);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4271);
					match(LEFT_PAREN);
					setState(4274);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
					case 1:
						{
						setState(4272);
						dataType();
						}
						break;
					case 2:
						{
						setState(4273);
						match(NONE);
						}
						break;
					}
					setState(4281);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4276);
						match(COMMA);
						setState(4279);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
						case 1:
							{
							setState(4277);
							dataType();
							}
							break;
						case 2:
							{
							setState(4278);
							match(NONE);
							}
							break;
						}
						}
					}

					setState(4283);
					match(RIGHT_PAREN);
					}
				}

				setState(4286);
				functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorFromFamilyContext extends ParserRuleContext {
		public UnsignedNumericLiteralContext unsignedNumericLiteral() {
			return getRuleContext(UnsignedNumericLiteralContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> NONE() { return getTokens(SQLParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(SQLParser.NONE, i);
		}
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public DropOperatorFromFamilyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorFromFamily; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropOperatorFromFamily(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropOperatorFromFamily(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropOperatorFromFamily(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorFromFamilyContext dropOperatorFromFamily() throws RecognitionException {
		DropOperatorFromFamilyContext _localctx = new DropOperatorFromFamilyContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_dropOperatorFromFamily);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4290);
			_la = _input.LA(1);
			if ( !(_la==FUNCTION || _la==OPERATOR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4291);
			unsignedNumericLiteral();
			setState(4292);
			match(LEFT_PAREN);
			setState(4295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				{
				setState(4293);
				dataType();
				}
				break;
			case 2:
				{
				setState(4294);
				match(NONE);
				}
				break;
			}
			setState(4302);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4297);
				match(COMMA);
				setState(4300);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,490,_ctx) ) {
				case 1:
					{
					setState(4298);
					dataType();
					}
					break;
				case 2:
					{
					setState(4299);
					match(NONE);
					}
					break;
				}
				}
			}

			setState(4304);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorFamilyStatementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode FAMILY() { return getToken(SQLParser.FAMILY, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public DropOperatorFamilyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorFamilyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropOperatorFamilyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropOperatorFamilyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropOperatorFamilyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorFamilyStatementContext dropOperatorFamilyStatement() throws RecognitionException {
		DropOperatorFamilyStatementContext _localctx = new DropOperatorFamilyStatementContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_dropOperatorFamilyStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4306);
			match(OPERATOR);
			setState(4307);
			match(FAMILY);
			setState(4309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,492,_ctx) ) {
			case 1:
				{
				setState(4308);
				ifExists();
				}
				break;
			}
			setState(4311);
			schemaQualifiedName();
			setState(4312);
			match(USING);
			setState(4313);
			identifier();
			setState(4315);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4314);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorClassStatementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(SQLParser.CLASS, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public List<CreateOperatorClassOptionContext> createOperatorClassOption() {
			return getRuleContexts(CreateOperatorClassOptionContext.class);
		}
		public CreateOperatorClassOptionContext createOperatorClassOption(int i) {
			return getRuleContext(CreateOperatorClassOptionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode FAMILY() { return getToken(SQLParser.FAMILY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CreateOperatorClassStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorClassStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateOperatorClassStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateOperatorClassStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateOperatorClassStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorClassStatementContext createOperatorClassStatement() throws RecognitionException {
		CreateOperatorClassStatementContext _localctx = new CreateOperatorClassStatementContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_createOperatorClassStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4317);
			match(OPERATOR);
			setState(4318);
			match(CLASS);
			setState(4319);
			schemaQualifiedName();
			setState(4321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4320);
				match(DEFAULT);
				}
			}

			setState(4323);
			match(FOR);
			setState(4324);
			match(TYPE);
			setState(4325);
			dataType();
			setState(4326);
			match(USING);
			setState(4327);
			identifier();
			setState(4330);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FAMILY) {
				{
				setState(4328);
				match(FAMILY);
				setState(4329);
				schemaQualifiedName();
				}
			}

			setState(4332);
			match(AS);
			setState(4333);
			createOperatorClassOption();
			setState(4338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4334);
				match(COMMA);
				setState(4335);
				createOperatorClassOption();
				}
				}
				setState(4340);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateOperatorClassOptionContext extends ParserRuleContext {
		public OperatorNameContext name;
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public UnsignedNumericLiteralContext unsignedNumericLiteral() {
			return getRuleContext(UnsignedNumericLiteralContext.class,0);
		}
		public OperatorNameContext operatorName() {
			return getRuleContext(OperatorNameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode ORDER() { return getToken(SQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> NONE() { return getTokens(SQLParser.NONE); }
		public TerminalNode NONE(int i) {
			return getToken(SQLParser.NONE, i);
		}
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TerminalNode STORAGE() { return getToken(SQLParser.STORAGE, 0); }
		public CreateOperatorClassOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createOperatorClassOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateOperatorClassOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateOperatorClassOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateOperatorClassOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateOperatorClassOptionContext createOperatorClassOption() throws RecognitionException {
		CreateOperatorClassOptionContext _localctx = new CreateOperatorClassOptionContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_createOperatorClassOption);
		int _la;
		try {
			setState(4386);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4341);
				match(OPERATOR);
				setState(4342);
				unsignedNumericLiteral();
				setState(4343);
				((CreateOperatorClassOptionContext)_localctx).name = operatorName();
				setState(4355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4344);
					match(LEFT_PAREN);
					setState(4347);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
					case 1:
						{
						setState(4345);
						dataType();
						}
						break;
					case 2:
						{
						setState(4346);
						match(NONE);
						}
						break;
					}
					setState(4349);
					match(COMMA);
					setState(4352);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,498,_ctx) ) {
					case 1:
						{
						setState(4350);
						dataType();
						}
						break;
					case 2:
						{
						setState(4351);
						match(NONE);
						}
						break;
					}
					setState(4354);
					match(RIGHT_PAREN);
					}
				}

				setState(4363);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,500,_ctx) ) {
				case 1:
					{
					setState(4357);
					match(FOR);
					setState(4358);
					match(SEARCH);
					}
					break;
				case 2:
					{
					setState(4359);
					match(FOR);
					setState(4360);
					match(ORDER);
					setState(4361);
					match(BY);
					setState(4362);
					schemaQualifiedName();
					}
					break;
				}
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 2);
				{
				setState(4365);
				match(FUNCTION);
				setState(4366);
				unsignedNumericLiteral();
				setState(4380);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4367);
					match(LEFT_PAREN);
					setState(4370);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,501,_ctx) ) {
					case 1:
						{
						setState(4368);
						dataType();
						}
						break;
					case 2:
						{
						setState(4369);
						match(NONE);
						}
						break;
					}
					setState(4377);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(4372);
						match(COMMA);
						setState(4375);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
						case 1:
							{
							setState(4373);
							dataType();
							}
							break;
						case 2:
							{
							setState(4374);
							match(NONE);
							}
							break;
						}
						}
					}

					setState(4379);
					match(RIGHT_PAREN);
					}
				}

				setState(4382);
				functionCall();
				}
				break;
			case STORAGE:
				enterOuterAlt(_localctx, 3);
				{
				setState(4384);
				match(STORAGE);
				setState(4385);
				dataType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterOperatorClassStatementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(SQLParser.CLASS, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public AlterOperatorClassStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterOperatorClassStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterOperatorClassStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterOperatorClassStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterOperatorClassStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterOperatorClassStatementContext alterOperatorClassStatement() throws RecognitionException {
		AlterOperatorClassStatementContext _localctx = new AlterOperatorClassStatementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_alterOperatorClassStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4388);
			match(OPERATOR);
			setState(4389);
			match(CLASS);
			setState(4390);
			schemaQualifiedName();
			setState(4391);
			match(USING);
			setState(4392);
			identifier();
			setState(4396);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(4393);
				renameTo();
				}
				break;
			case OWNER:
				{
				setState(4394);
				ownerTo();
				}
				break;
			case SET:
				{
				setState(4395);
				setSchema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropOperatorClassStatementContext extends ParserRuleContext {
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode CLASS() { return getToken(SQLParser.CLASS, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public DropOperatorClassStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropOperatorClassStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropOperatorClassStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropOperatorClassStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropOperatorClassStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropOperatorClassStatementContext dropOperatorClassStatement() throws RecognitionException {
		DropOperatorClassStatementContext _localctx = new DropOperatorClassStatementContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_dropOperatorClassStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4398);
			match(OPERATOR);
			setState(4399);
			match(CLASS);
			setState(4401);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				setState(4400);
				ifExists();
				}
				break;
			}
			setState(4403);
			schemaQualifiedName();
			setState(4404);
			match(USING);
			setState(4405);
			identifier();
			setState(4407);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(4406);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateConversionStatementContext extends ParserRuleContext {
		public TerminalNode CONVERSION() { return getToken(SQLParser.CONVERSION, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public List<TerminalNode> Character_String_Literal() { return getTokens(SQLParser.Character_String_Literal); }
		public TerminalNode Character_String_Literal(int i) {
			return getToken(SQLParser.Character_String_Literal, i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public CreateConversionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createConversionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateConversionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateConversionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateConversionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateConversionStatementContext createConversionStatement() throws RecognitionException {
		CreateConversionStatementContext _localctx = new CreateConversionStatementContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_createConversionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4410);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4409);
				match(DEFAULT);
				}
			}

			setState(4412);
			match(CONVERSION);
			setState(4413);
			schemaQualifiedName();
			setState(4414);
			match(FOR);
			setState(4415);
			match(Character_String_Literal);
			setState(4416);
			match(TO);
			setState(4417);
			match(Character_String_Literal);
			setState(4418);
			match(FROM);
			setState(4419);
			schemaQualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterConversionStatementContext extends ParserRuleContext {
		public TerminalNode CONVERSION() { return getToken(SQLParser.CONVERSION, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public SetSchemaContext setSchema() {
			return getRuleContext(SetSchemaContext.class,0);
		}
		public AlterConversionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterConversionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterConversionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterConversionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterConversionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterConversionStatementContext alterConversionStatement() throws RecognitionException {
		AlterConversionStatementContext _localctx = new AlterConversionStatementContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_alterConversionStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4421);
			match(CONVERSION);
			setState(4422);
			schemaQualifiedName();
			setState(4426);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(4423);
				renameTo();
				}
				break;
			case OWNER:
				{
				setState(4424);
				ownerTo();
				}
				break;
			case SET:
				{
				setState(4425);
				setSchema();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreatePublicationStatementContext extends ParserRuleContext {
		public TerminalNode PUBLICATION() { return getToken(SQLParser.PUBLICATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public List<OnlyTableMultiplyContext> onlyTableMultiply() {
			return getRuleContexts(OnlyTableMultiplyContext.class);
		}
		public OnlyTableMultiplyContext onlyTableMultiply(int i) {
			return getRuleContext(OnlyTableMultiplyContext.class,i);
		}
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode TABLES() { return getToken(SQLParser.TABLES, 0); }
		public WithStorageParameterContext withStorageParameter() {
			return getRuleContext(WithStorageParameterContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CreatePublicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createPublicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreatePublicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreatePublicationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreatePublicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreatePublicationStatementContext createPublicationStatement() throws RecognitionException {
		CreatePublicationStatementContext _localctx = new CreatePublicationStatementContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_createPublicationStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4428);
			match(PUBLICATION);
			setState(4429);
			identifier();
			setState(4443);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				{
				setState(4430);
				match(FOR);
				setState(4431);
				match(TABLE);
				setState(4432);
				onlyTableMultiply();
				setState(4437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4433);
					match(COMMA);
					setState(4434);
					onlyTableMultiply();
					}
					}
					setState(4439);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(4440);
				match(FOR);
				setState(4441);
				match(ALL);
				setState(4442);
				match(TABLES);
				}
				break;
			}
			setState(4446);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4445);
				withStorageParameter();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPublicationStatementContext extends ParserRuleContext {
		public TerminalNode PUBLICATION() { return getToken(SQLParser.PUBLICATION, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AlterPublicationActionContext alterPublicationAction() {
			return getRuleContext(AlterPublicationActionContext.class,0);
		}
		public AlterPublicationStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPublicationStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterPublicationStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterPublicationStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterPublicationStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPublicationStatementContext alterPublicationStatement() throws RecognitionException {
		AlterPublicationStatementContext _localctx = new AlterPublicationStatementContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_alterPublicationStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4448);
			match(PUBLICATION);
			setState(4449);
			identifier();
			setState(4450);
			alterPublicationAction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterPublicationActionContext extends ParserRuleContext {
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public OwnerToContext ownerTo() {
			return getRuleContext(OwnerToContext.class,0);
		}
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public List<OnlyTableMultiplyContext> onlyTableMultiply() {
			return getRuleContexts(OnlyTableMultiplyContext.class);
		}
		public OnlyTableMultiplyContext onlyTableMultiply(int i) {
			return getRuleContext(OnlyTableMultiplyContext.class,i);
		}
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public AlterPublicationActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterPublicationAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterPublicationAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterPublicationAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterPublicationAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterPublicationActionContext alterPublicationAction() throws RecognitionException {
		AlterPublicationActionContext _localctx = new AlterPublicationActionContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_alterPublicationAction);
		int _la;
		try {
			setState(4466);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,515,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4452);
				renameTo();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4453);
				ownerTo();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4454);
				match(SET);
				setState(4455);
				storageParameter();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4456);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4457);
				match(TABLE);
				setState(4458);
				onlyTableMultiply();
				setState(4463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4459);
					match(COMMA);
					setState(4460);
					onlyTableMultiply();
					}
					}
					setState(4465);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnlyTableMultiplyContext extends ParserRuleContext {
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public OnlyTableMultiplyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onlyTableMultiply; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOnlyTableMultiply(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOnlyTableMultiply(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOnlyTableMultiply(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnlyTableMultiplyContext onlyTableMultiply() throws RecognitionException {
		OnlyTableMultiplyContext _localctx = new OnlyTableMultiplyContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_onlyTableMultiply);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4469);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(4468);
				match(ONLY);
				}
			}

			setState(4471);
			schemaQualifiedName();
			setState(4473);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLY) {
				{
				setState(4472);
				match(MULTIPLY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterTriggerStatementContext extends ParserRuleContext {
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> ON() { return getTokens(SQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SQLParser.ON, i);
		}
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public TerminalNode DEPENDS() { return getToken(SQLParser.DEPENDS, 0); }
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public AlterTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterTriggerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterTriggerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterTriggerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterTriggerStatementContext alterTriggerStatement() throws RecognitionException {
		AlterTriggerStatementContext _localctx = new AlterTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_alterTriggerStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4475);
			match(TRIGGER);
			setState(4476);
			identifier();
			setState(4477);
			match(ON);
			setState(4478);
			schemaQualifiedName();
			setState(4484);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RENAME:
				{
				setState(4479);
				renameTo();
				}
				break;
			case DEPENDS:
				{
				setState(4480);
				match(DEPENDS);
				setState(4481);
				match(ON);
				setState(4482);
				match(EXTENSION);
				setState(4483);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AlterRuleStatementContext extends ParserRuleContext {
		public TerminalNode RULE() { return getToken(SQLParser.RULE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public RenameToContext renameTo() {
			return getRuleContext(RenameToContext.class,0);
		}
		public AlterRuleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alterRuleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAlterRuleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAlterRuleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAlterRuleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AlterRuleStatementContext alterRuleStatement() throws RecognitionException {
		AlterRuleStatementContext _localctx = new AlterRuleStatementContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_alterRuleStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4486);
			match(RULE);
			setState(4487);
			identifier();
			setState(4488);
			match(ON);
			setState(4489);
			schemaQualifiedName();
			setState(4490);
			renameTo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyStatementContext extends ParserRuleContext {
		public CopyToStatementContext copyToStatement() {
			return getRuleContext(CopyToStatementContext.class,0);
		}
		public CopyFromStatementContext copyFromStatement() {
			return getRuleContext(CopyFromStatementContext.class,0);
		}
		public CopyStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCopyStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCopyStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCopyStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyStatementContext copyStatement() throws RecognitionException {
		CopyStatementContext _localctx = new CopyStatementContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_copyStatement);
		try {
			setState(4494);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4492);
				copyToStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4493);
				copyFromStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyFromStatementContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(SQLParser.COPY, 0); }
		public TableColsContext tableCols() {
			return getRuleContext(TableColsContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public TerminalNode STDIN() { return getToken(SQLParser.STDIN, 0); }
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode PROGRAM() { return getToken(SQLParser.PROGRAM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public CopyOptionListContext copyOptionList() {
			return getRuleContext(CopyOptionListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public CopyFromStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyFromStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCopyFromStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCopyFromStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCopyFromStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyFromStatementContext copyFromStatement() throws RecognitionException {
		CopyFromStatementContext _localctx = new CopyFromStatementContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_copyFromStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4496);
			match(COPY);
			setState(4497);
			tableCols();
			setState(4498);
			match(FROM);
			setState(4504);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROGRAM:
			case Character_String_Literal:
				{
				setState(4500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(4499);
					match(PROGRAM);
					}
				}

				setState(4502);
				match(Character_String_Literal);
				}
				break;
			case STDIN:
				{
				setState(4503);
				match(STDIN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4516);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (CSV - 47)) | (1L << (DELIMITER - 47)) | (1L << (ENCODING - 47)) | (1L << (ESCAPE - 47)) | (1L << (FORCE - 47)) | (1L << (HEADER - 47)))) != 0) || _la==OIDS || _la==QUOTE || _la==TEXT || _la==BINARY || _la==FREEZE || ((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (NULL - 415)) | (1L << (WITH - 415)) | (1L << (FORCE_NOT_NULL - 415)) | (1L << (FORCE_NULL - 415)) | (1L << (FORCE_QUOTE - 415)) | (1L << (FORMAT - 415)))) != 0) || _la==LEFT_PAREN) {
				{
				setState(4507);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4506);
					match(WITH);
					}
				}

				setState(4514);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(4509);
					match(LEFT_PAREN);
					setState(4510);
					copyOptionList();
					setState(4511);
					match(RIGHT_PAREN);
					}
					break;
				case CSV:
				case DELIMITER:
				case ENCODING:
				case ESCAPE:
				case FORCE:
				case HEADER:
				case OIDS:
				case QUOTE:
				case TEXT:
				case BINARY:
				case FREEZE:
				case NULL:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
					{
					setState(4513);
					copyOptionList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			setState(4520);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(4518);
				match(WHERE);
				setState(4519);
				vex(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyToStatementContext extends ParserRuleContext {
		public TerminalNode COPY() { return getToken(SQLParser.COPY, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TableColsContext tableCols() {
			return getRuleContext(TableColsContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public DataStatementContext dataStatement() {
			return getRuleContext(DataStatementContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public TerminalNode STDOUT() { return getToken(SQLParser.STDOUT, 0); }
		public TerminalNode PROGRAM() { return getToken(SQLParser.PROGRAM, 0); }
		public CopyOptionListContext copyOptionList() {
			return getRuleContext(CopyOptionListContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public CopyToStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyToStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCopyToStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCopyToStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCopyToStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyToStatementContext copyToStatement() throws RecognitionException {
		CopyToStatementContext _localctx = new CopyToStatementContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_copyToStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4522);
			match(COPY);
			setState(4528);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(4523);
				tableCols();
				}
				break;
			case LEFT_PAREN:
				{
				setState(4524);
				match(LEFT_PAREN);
				setState(4525);
				dataStatement();
				setState(4526);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4530);
			match(TO);
			setState(4536);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROGRAM:
			case Character_String_Literal:
				{
				setState(4532);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROGRAM) {
					{
					setState(4531);
					match(PROGRAM);
					}
				}

				setState(4534);
				match(Character_String_Literal);
				}
				break;
			case STDOUT:
				{
				setState(4535);
				match(STDOUT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4548);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (CSV - 47)) | (1L << (DELIMITER - 47)) | (1L << (ENCODING - 47)) | (1L << (ESCAPE - 47)) | (1L << (FORCE - 47)) | (1L << (HEADER - 47)))) != 0) || _la==OIDS || _la==QUOTE || _la==TEXT || _la==BINARY || _la==FREEZE || ((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (NULL - 415)) | (1L << (WITH - 415)) | (1L << (FORCE_NOT_NULL - 415)) | (1L << (FORCE_NULL - 415)) | (1L << (FORCE_QUOTE - 415)) | (1L << (FORMAT - 415)))) != 0) || _la==LEFT_PAREN) {
				{
				setState(4539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4538);
					match(WITH);
					}
				}

				setState(4546);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LEFT_PAREN:
					{
					setState(4541);
					match(LEFT_PAREN);
					setState(4542);
					copyOptionList();
					setState(4543);
					match(RIGHT_PAREN);
					}
					break;
				case CSV:
				case DELIMITER:
				case ENCODING:
				case ESCAPE:
				case FORCE:
				case HEADER:
				case OIDS:
				case QUOTE:
				case TEXT:
				case BINARY:
				case FREEZE:
				case NULL:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
					{
					setState(4545);
					copyOptionList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionListContext extends ParserRuleContext {
		public List<CopyOptionContext> copyOption() {
			return getRuleContexts(CopyOptionContext.class);
		}
		public CopyOptionContext copyOption(int i) {
			return getRuleContext(CopyOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CopyOptionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOptionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCopyOptionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCopyOptionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCopyOptionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionListContext copyOptionList() throws RecognitionException {
		CopyOptionListContext _localctx = new CopyOptionListContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_copyOptionList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4550);
			copyOption();
			setState(4557);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (CSV - 47)) | (1L << (DELIMITER - 47)) | (1L << (ENCODING - 47)) | (1L << (ESCAPE - 47)) | (1L << (FORCE - 47)) | (1L << (HEADER - 47)))) != 0) || _la==OIDS || _la==QUOTE || _la==TEXT || _la==BINARY || _la==FREEZE || ((((_la - 415)) & ~0x3f) == 0 && ((1L << (_la - 415)) & ((1L << (NULL - 415)) | (1L << (FORCE_NOT_NULL - 415)) | (1L << (FORCE_NULL - 415)) | (1L << (FORCE_QUOTE - 415)) | (1L << (FORMAT - 415)))) != 0) || _la==COMMA) {
				{
				{
				setState(4552);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4551);
					match(COMMA);
					}
				}

				setState(4554);
				copyOption();
				}
				}
				setState(4559);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CopyOptionContext extends ParserRuleContext {
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode CSV() { return getToken(SQLParser.CSV, 0); }
		public TerminalNode BINARY() { return getToken(SQLParser.BINARY, 0); }
		public TerminalNode FORMAT() { return getToken(SQLParser.FORMAT, 0); }
		public TerminalNode OIDS() { return getToken(SQLParser.OIDS, 0); }
		public TruthValueContext truthValue() {
			return getRuleContext(TruthValueContext.class,0);
		}
		public TerminalNode FREEZE() { return getToken(SQLParser.FREEZE, 0); }
		public TerminalNode DELIMITER() { return getToken(SQLParser.DELIMITER, 0); }
		public TerminalNode Character_String_Literal() { return getToken(SQLParser.Character_String_Literal, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode HEADER() { return getToken(SQLParser.HEADER, 0); }
		public TerminalNode QUOTE() { return getToken(SQLParser.QUOTE, 0); }
		public TerminalNode ESCAPE() { return getToken(SQLParser.ESCAPE, 0); }
		public TerminalNode FORCE() { return getToken(SQLParser.FORCE, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public TerminalNode FORCE_QUOTE() { return getToken(SQLParser.FORCE_QUOTE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode FORCE_NOT_NULL() { return getToken(SQLParser.FORCE_NOT_NULL, 0); }
		public TerminalNode FORCE_NULL() { return getToken(SQLParser.FORCE_NULL, 0); }
		public TerminalNode ENCODING() { return getToken(SQLParser.ENCODING, 0); }
		public CopyOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_copyOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCopyOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCopyOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCopyOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CopyOptionContext copyOption() throws RecognitionException {
		CopyOptionContext _localctx = new CopyOptionContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_copyOption);
		int _la;
		try {
			setState(4620);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,542,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4561);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORMAT) {
					{
					setState(4560);
					match(FORMAT);
					}
				}

				setState(4563);
				_la = _input.LA(1);
				if ( !(_la==CSV || _la==TEXT || _la==BINARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4564);
				match(OIDS);
				setState(4566);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0)) {
					{
					setState(4565);
					truthValue();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4568);
				match(FREEZE);
				setState(4570);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0)) {
					{
					setState(4569);
					truthValue();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4572);
				match(DELIMITER);
				setState(4574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4573);
					match(AS);
					}
				}

				setState(4576);
				match(Character_String_Literal);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4577);
				match(NULL);
				setState(4579);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4578);
					match(AS);
					}
				}

				setState(4581);
				match(Character_String_Literal);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4582);
				match(HEADER);
				setState(4584);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0)) {
					{
					setState(4583);
					truthValue();
					}
				}

				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4586);
				match(QUOTE);
				setState(4587);
				match(Character_String_Literal);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4588);
				match(ESCAPE);
				setState(4589);
				match(Character_String_Literal);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4590);
				match(FORCE);
				setState(4591);
				match(QUOTE);
				setState(4594);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MULTIPLY:
					{
					setState(4592);
					match(MULTIPLY);
					}
					break;
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(4593);
					identifierList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4596);
				match(FORCE_QUOTE);
				setState(4602);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case MULTIPLY:
					{
					setState(4597);
					match(MULTIPLY);
					}
					break;
				case LEFT_PAREN:
					{
					setState(4598);
					match(LEFT_PAREN);
					setState(4599);
					identifierList();
					setState(4600);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4604);
				match(FORCE);
				setState(4605);
				match(NOT);
				setState(4606);
				match(NULL);
				setState(4607);
				identifierList();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4608);
				match(FORCE_NOT_NULL);
				setState(4609);
				match(LEFT_PAREN);
				setState(4610);
				identifierList();
				setState(4611);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4613);
				match(FORCE_NULL);
				setState(4614);
				match(LEFT_PAREN);
				setState(4615);
				identifierList();
				setState(4616);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4618);
				match(ENCODING);
				setState(4619);
				match(Character_String_Literal);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateViewStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public ViewColumnsContext columnNames;
		public SelectStmtContext vQuery;
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public TerminalNode RECURSIVE() { return getToken(SQLParser.RECURSIVE, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SQLParser.MATERIALIZED, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public List<TerminalNode> WITH() { return getTokens(SQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(SQLParser.WITH, i);
		}
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public WithCheckOptionContext withCheckOption() {
			return getRuleContext(WithCheckOptionContext.class,0);
		}
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public ViewColumnsContext viewColumns() {
			return getRuleContext(ViewColumnsContext.class,0);
		}
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public CreateViewStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createViewStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateViewStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateViewStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateViewStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateViewStatementContext createViewStatement() throws RecognitionException {
		CreateViewStatementContext _localctx = new CreateViewStatementContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_createViewStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4624);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OR) {
				{
				setState(4622);
				match(OR);
				setState(4623);
				match(REPLACE);
				}
			}

			setState(4627);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMP || _la==TEMPORARY) {
				{
				setState(4626);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4630);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RECURSIVE) {
				{
				setState(4629);
				match(RECURSIVE);
				}
			}

			setState(4633);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATERIALIZED) {
				{
				setState(4632);
				match(MATERIALIZED);
				}
			}

			setState(4635);
			match(VIEW);
			setState(4637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,547,_ctx) ) {
			case 1:
				{
				setState(4636);
				ifNotExists();
				}
				break;
			}
			setState(4639);
			((CreateViewStatementContext)_localctx).name = schemaQualifiedName();
			setState(4641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4640);
				((CreateViewStatementContext)_localctx).columnNames = viewColumns();
				}
			}

			setState(4645);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4643);
				match(USING);
				setState(4644);
				identifier();
				}
			}

			setState(4649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4647);
				match(WITH);
				setState(4648);
				storageParameter();
				}
			}

			setState(4652);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(4651);
				tableSpace();
				}
			}

			setState(4654);
			match(AS);
			setState(4655);
			((CreateViewStatementContext)_localctx).vQuery = selectStmt();
			setState(4657);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,552,_ctx) ) {
			case 1:
				{
				setState(4656);
				withCheckOption();
				}
				break;
			}
			setState(4664);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4659);
				match(WITH);
				setState(4661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4660);
					match(NO);
					}
				}

				setState(4663);
				match(DATA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4666);
			match(IF);
			setState(4667);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4669);
			match(IF);
			setState(4670);
			match(NOT);
			setState(4671);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ViewColumnsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ViewColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_viewColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterViewColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitViewColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitViewColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ViewColumnsContext viewColumns() throws RecognitionException {
		ViewColumnsContext _localctx = new ViewColumnsContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_viewColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4673);
			match(LEFT_PAREN);
			setState(4674);
			identifier();
			setState(4679);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4675);
				match(COMMA);
				setState(4676);
				identifier();
				}
				}
				setState(4681);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4682);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithCheckOptionContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode CHECK() { return getToken(SQLParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode CASCADED() { return getToken(SQLParser.CASCADED, 0); }
		public TerminalNode LOCAL() { return getToken(SQLParser.LOCAL, 0); }
		public WithCheckOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withCheckOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterWithCheckOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitWithCheckOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitWithCheckOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithCheckOptionContext withCheckOption() throws RecognitionException {
		WithCheckOptionContext _localctx = new WithCheckOptionContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_withCheckOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4684);
			match(WITH);
			setState(4686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADED || _la==LOCAL) {
				{
				setState(4685);
				_la = _input.LA(1);
				if ( !(_la==CASCADED || _la==LOCAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4688);
			match(CHECK);
			setState(4689);
			match(OPTION);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public DefineTableContext defineTable() {
			return getRuleContext(DefineTableContext.class,0);
		}
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode UNLOGGED() { return getToken(SQLParser.UNLOGGED, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public PartitionByContext partitionBy() {
			return getRuleContext(PartitionByContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StorageParameterOidContext storageParameterOid() {
			return getRuleContext(StorageParameterOidContext.class,0);
		}
		public OnCommitContext onCommit() {
			return getRuleContext(OnCommitContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public TerminalNode GLOBAL() { return getToken(SQLParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(SQLParser.LOCAL, 0); }
		public CreateTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableStatementContext createTableStatement() throws RecognitionException {
		CreateTableStatementContext _localctx = new CreateTableStatementContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_createTableStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4696);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
			case TEMP:
			case TEMPORARY:
				{
				setState(4692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(4691);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4694);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				{
				setState(4695);
				match(UNLOGGED);
				}
				break;
			case TABLE:
				break;
			default:
				break;
			}
			setState(4698);
			match(TABLE);
			setState(4700);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,559,_ctx) ) {
			case 1:
				{
				setState(4699);
				ifNotExists();
				}
				break;
			}
			setState(4702);
			((CreateTableStatementContext)_localctx).name = schemaQualifiedName();
			setState(4703);
			defineTable();
			setState(4705);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4704);
				partitionBy();
				}
			}

			setState(4709);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4707);
				match(USING);
				setState(4708);
				identifier();
				}
			}

			setState(4712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITHOUT || _la==WITH) {
				{
				setState(4711);
				storageParameterOid();
				}
			}

			setState(4715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(4714);
				onCommit();
				}
			}

			setState(4718);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(4717);
				tableSpace();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateTableAsStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public TerminalNode UNLOGGED() { return getToken(SQLParser.UNLOGGED, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public NamesInParensContext namesInParens() {
			return getRuleContext(NamesInParensContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public StorageParameterOidContext storageParameterOid() {
			return getRuleContext(StorageParameterOidContext.class,0);
		}
		public OnCommitContext onCommit() {
			return getRuleContext(OnCommitContext.class,0);
		}
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode GLOBAL() { return getToken(SQLParser.GLOBAL, 0); }
		public TerminalNode LOCAL() { return getToken(SQLParser.LOCAL, 0); }
		public CreateTableAsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createTableAsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateTableAsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateTableAsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateTableAsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateTableAsStatementContext createTableAsStatement() throws RecognitionException {
		CreateTableAsStatementContext _localctx = new CreateTableAsStatementContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_createTableAsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4725);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GLOBAL:
			case LOCAL:
			case TEMP:
			case TEMPORARY:
				{
				setState(4721);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==LOCAL) {
					{
					setState(4720);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4723);
				_la = _input.LA(1);
				if ( !(_la==TEMP || _la==TEMPORARY) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case UNLOGGED:
				{
				setState(4724);
				match(UNLOGGED);
				}
				break;
			case TABLE:
				break;
			default:
				break;
			}
			setState(4727);
			match(TABLE);
			setState(4729);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,567,_ctx) ) {
			case 1:
				{
				setState(4728);
				ifNotExists();
				}
				break;
			}
			setState(4731);
			((CreateTableAsStatementContext)_localctx).name = schemaQualifiedName();
			setState(4733);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4732);
				namesInParens();
				}
			}

			setState(4737);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(4735);
				match(USING);
				setState(4736);
				identifier();
				}
			}

			setState(4740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITHOUT || _la==WITH) {
				{
				setState(4739);
				storageParameterOid();
				}
			}

			setState(4743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(4742);
				onCommit();
				}
			}

			setState(4746);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLESPACE) {
				{
				setState(4745);
				tableSpace();
				}
			}

			setState(4748);
			match(AS);
			setState(4752);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
			case SELECT:
			case TABLE:
			case WITH:
			case LEFT_PAREN:
				{
				setState(4749);
				selectStmt();
				}
				break;
			case EXECUTE:
				{
				setState(4750);
				match(EXECUTE);
				setState(4751);
				functionCall();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(4754);
				match(WITH);
				setState(4756);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(4755);
					match(NO);
					}
				}

				setState(4758);
				match(DATA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateForeignTableStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public DefineServerContext defineServer() {
			return getRuleContext(DefineServerContext.class,0);
		}
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public DefineColumnsContext defineColumns() {
			return getRuleContext(DefineColumnsContext.class,0);
		}
		public DefinePartitionContext definePartition() {
			return getRuleContext(DefinePartitionContext.class,0);
		}
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateForeignTableStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createForeignTableStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCreateForeignTableStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCreateForeignTableStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCreateForeignTableStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateForeignTableStatementContext createForeignTableStatement() throws RecognitionException {
		CreateForeignTableStatementContext _localctx = new CreateForeignTableStatementContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_createForeignTableStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4761);
			match(FOREIGN);
			setState(4762);
			match(TABLE);
			setState(4764);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,576,_ctx) ) {
			case 1:
				{
				setState(4763);
				ifNotExists();
				}
				break;
			}
			setState(4766);
			((CreateForeignTableStatementContext)_localctx).name = schemaQualifiedName();
			setState(4769);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(4767);
				defineColumns();
				}
				break;
			case PARTITION:
				{
				setState(4768);
				definePartition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4771);
			defineServer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineTableContext extends ParserRuleContext {
		public DefineColumnsContext defineColumns() {
			return getRuleContext(DefineColumnsContext.class,0);
		}
		public DefineTypeContext defineType() {
			return getRuleContext(DefineTypeContext.class,0);
		}
		public DefinePartitionContext definePartition() {
			return getRuleContext(DefinePartitionContext.class,0);
		}
		public DefineTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDefineTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDefineTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDefineTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineTableContext defineTable() throws RecognitionException {
		DefineTableContext _localctx = new DefineTableContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_defineTable);
		try {
			setState(4776);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4773);
				defineColumns();
				}
				break;
			case OF:
				enterOuterAlt(_localctx, 2);
				{
				setState(4774);
				defineType();
				}
				break;
			case PARTITION:
				enterOuterAlt(_localctx, 3);
				{
				setState(4775);
				definePartition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefinePartitionContext extends ParserRuleContext {
		public SchemaQualifiedNameContext parentTable;
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public ForValuesBoundContext forValuesBound() {
			return getRuleContext(ForValuesBoundContext.class,0);
		}
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public ListOfTypeColumnDefContext listOfTypeColumnDef() {
			return getRuleContext(ListOfTypeColumnDefContext.class,0);
		}
		public DefinePartitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_definePartition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDefinePartition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDefinePartition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDefinePartition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefinePartitionContext definePartition() throws RecognitionException {
		DefinePartitionContext _localctx = new DefinePartitionContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_definePartition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4778);
			match(PARTITION);
			setState(4779);
			match(OF);
			setState(4780);
			((DefinePartitionContext)_localctx).parentTable = schemaQualifiedName();
			setState(4782);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4781);
				listOfTypeColumnDef();
				}
			}

			setState(4784);
			forValuesBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForValuesBoundContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode VALUES() { return getToken(SQLParser.VALUES, 0); }
		public PartitionBoundSpecContext partitionBoundSpec() {
			return getRuleContext(PartitionBoundSpecContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public ForValuesBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forValuesBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterForValuesBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitForValuesBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitForValuesBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForValuesBoundContext forValuesBound() throws RecognitionException {
		ForValuesBoundContext _localctx = new ForValuesBoundContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_forValuesBound);
		try {
			setState(4790);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				enterOuterAlt(_localctx, 1);
				{
				setState(4786);
				match(FOR);
				setState(4787);
				match(VALUES);
				setState(4788);
				partitionBoundSpec();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4789);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionBoundSpecContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<PartitionBoundPartContext> partitionBoundPart() {
			return getRuleContexts(PartitionBoundPartContext.class);
		}
		public PartitionBoundPartContext partitionBoundPart(int i) {
			return getRuleContext(PartitionBoundPartContext.class,i);
		}
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode MODULUS() { return getToken(SQLParser.MODULUS, 0); }
		public List<TerminalNode> NUMBER_LITERAL() { return getTokens(SQLParser.NUMBER_LITERAL); }
		public TerminalNode NUMBER_LITERAL(int i) {
			return getToken(SQLParser.NUMBER_LITERAL, i);
		}
		public TerminalNode REMAINDER() { return getToken(SQLParser.REMAINDER, 0); }
		public PartitionBoundSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionBoundSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPartitionBoundSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPartitionBoundSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPartitionBoundSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionBoundSpecContext partitionBoundSpec() throws RecognitionException {
		PartitionBoundSpecContext _localctx = new PartitionBoundSpecContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_partitionBoundSpec);
		int _la;
		try {
			setState(4817);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4792);
				match(IN);
				setState(4793);
				match(LEFT_PAREN);
				setState(4794);
				vex(0);
				setState(4799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4795);
					match(COMMA);
					setState(4796);
					vex(0);
					}
					}
					setState(4801);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4802);
				match(RIGHT_PAREN);
				}
				break;
			case FROM:
				enterOuterAlt(_localctx, 2);
				{
				setState(4804);
				match(FROM);
				setState(4805);
				partitionBoundPart();
				setState(4806);
				match(TO);
				setState(4807);
				partitionBoundPart();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(4809);
				match(WITH);
				setState(4810);
				match(LEFT_PAREN);
				setState(4811);
				match(MODULUS);
				setState(4812);
				match(NUMBER_LITERAL);
				setState(4813);
				match(COMMA);
				setState(4814);
				match(REMAINDER);
				setState(4815);
				match(NUMBER_LITERAL);
				setState(4816);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionBoundPartContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public PartitionBoundPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionBoundPart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPartitionBoundPart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPartitionBoundPart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPartitionBoundPart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionBoundPartContext partitionBoundPart() throws RecognitionException {
		PartitionBoundPartContext _localctx = new PartitionBoundPartContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_partitionBoundPart);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4819);
			match(LEFT_PAREN);
			setState(4820);
			vex(0);
			setState(4825);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4821);
				match(COMMA);
				setState(4822);
				vex(0);
				}
				}
				setState(4827);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4828);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineColumnsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TableColumnDefContext> tableColumnDef() {
			return getRuleContexts(TableColumnDefContext.class);
		}
		public TableColumnDefContext tableColumnDef(int i) {
			return getRuleContext(TableColumnDefContext.class,i);
		}
		public TerminalNode INHERITS() { return getToken(SQLParser.INHERITS, 0); }
		public NamesInParensContext namesInParens() {
			return getRuleContext(NamesInParensContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public DefineColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDefineColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDefineColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDefineColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineColumnsContext defineColumns() throws RecognitionException {
		DefineColumnsContext _localctx = new DefineColumnsContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_defineColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4830);
			match(LEFT_PAREN);
			setState(4839);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (LIKE - 320)) | (1L << (CHECK - 320)) | (1L << (CONSTRAINT - 320)))) != 0) || ((((_la - 389)) & ~0x3f) == 0 && ((1L << (_la - 389)) & ((1L << (DEFAULT - 389)) | (1L << (FOREIGN - 389)) | (1L << (NOT - 389)) | (1L << (NULL - 389)) | (1L << (PRIMARY - 389)) | (1L << (REFERENCES - 389)) | (1L << (UNIQUE - 389)) | (1L << (ALIGNMENT - 389)) | (1L << (BASETYPE - 389)) | (1L << (BUFFERS - 389)) | (1L << (BYPASSRLS - 389)) | (1L << (CANONICAL - 389)) | (1L << (CATEGORY - 389)) | (1L << (COLLATABLE - 389)) | (1L << (COMBINEFUNC - 389)) | (1L << (COMMUTATOR - 389)) | (1L << (CONNECT - 389)))) != 0) || ((((_la - 453)) & ~0x3f) == 0 && ((1L << (_la - 453)) & ((1L << (COSTS - 453)) | (1L << (CREATEDB - 453)) | (1L << (CREATEROLE - 453)) | (1L << (DESERIALFUNC - 453)) | (1L << (DETERMINISTIC - 453)) | (1L << (DISABLE_PAGE_SKIPPING - 453)) | (1L << (ELEMENT - 453)) | (1L << (EXTENDED - 453)) | (1L << (FINALFUNC - 453)) | (1L << (FINALFUNC_EXTRA - 453)) | (1L << (FINALFUNC_MODIFY - 453)) | (1L << (FORCE_NOT_NULL - 453)) | (1L << (FORCE_NULL - 453)) | (1L << (FORCE_QUOTE - 453)) | (1L << (FORMAT - 453)) | (1L << (GETTOKEN - 453)) | (1L << (HASH - 453)) | (1L << (HASHES - 453)) | (1L << (HEADLINE - 453)) | (1L << (HYPOTHETICAL - 453)) | (1L << (INDEX_CLEANUP - 453)) | (1L << (INIT - 453)) | (1L << (INITCOND - 453)) | (1L << (INTERNALLENGTH - 453)) | (1L << (JSON - 453)) | (1L << (LC_COLLATE - 453)) | (1L << (LC_CTYPE - 453)) | (1L << (LEFTARG - 453)) | (1L << (LEXIZE - 453)) | (1L << (LEXTYPES - 453)) | (1L << (LIST - 453)) | (1L << (LOCALE - 453)) | (1L << (LOGIN - 453)) | (1L << (MAIN - 453)) | (1L << (MERGES - 453)) | (1L << (MFINALFUNC - 453)) | (1L << (MFINALFUNC_EXTRA - 453)) | (1L << (MFINALFUNC_MODIFY - 453)) | (1L << (MINITCOND - 453)) | (1L << (MINVFUNC - 453)) | (1L << (MODULUS - 453)) | (1L << (MSFUNC - 453)) | (1L << (MSSPACE - 453)) | (1L << (MSTYPE - 453)) | (1L << (NEGATOR - 453)) | (1L << (NOBYPASSRLS - 453)) | (1L << (NOCREATEDB - 453)) | (1L << (NOCREATEROLE - 453)) | (1L << (NOINHERIT - 453)) | (1L << (NOLOGIN - 453)) | (1L << (NOREPLICATION - 453)) | (1L << (NOSUPERUSER - 453)) | (1L << (OUTPUT - 453)) | (1L << (PASSEDBYVALUE - 453)) | (1L << (PATH - 453)) | (1L << (PERMISSIVE - 453)) | (1L << (PLAIN - 453)) | (1L << (PREFERRED - 453)) | (1L << (PROVIDER - 453)) | (1L << (READ_ONLY - 453)) | (1L << (READ_WRITE - 453)) | (1L << (RECEIVE - 453)) | (1L << (REMAINDER - 453)) | (1L << (REPLICATION - 453)))) != 0) || ((((_la - 517)) & ~0x3f) == 0 && ((1L << (_la - 517)) & ((1L << (RESTRICTED - 517)) | (1L << (RESTRICTIVE - 517)) | (1L << (RIGHTARG - 517)) | (1L << (SAFE - 517)) | (1L << (SEND - 517)) | (1L << (SERIALFUNC - 517)) | (1L << (SETTINGS - 517)) | (1L << (SFUNC - 517)) | (1L << (SHAREABLE - 517)) | (1L << (SKIP_LOCKED - 517)) | (1L << (SORTOP - 517)) | (1L << (SSPACE - 517)) | (1L << (STYPE - 517)) | (1L << (SUBTYPE_DIFF - 517)) | (1L << (SUBTYPE_OPCLASS - 517)) | (1L << (SUBTYPE - 517)) | (1L << (SUMMARY - 517)) | (1L << (SUPERUSER - 517)) | (1L << (TIMING - 517)) | (1L << (TYPMOD_IN - 517)) | (1L << (TYPMOD_OUT - 517)) | (1L << (UNSAFE - 517)) | (1L << (USAGE - 517)) | (1L << (VARIABLE - 517)) | (1L << (YAML - 517)) | (1L << (ALIAS - 517)) | (1L << (ASSERT - 517)) | (1L << (CONSTANT - 517)) | (1L << (DATATYPE - 517)) | (1L << (DEBUG - 517)) | (1L << (DETAIL - 517)) | (1L << (DIAGNOSTICS - 517)) | (1L << (ELSEIF - 517)) | (1L << (ELSIF - 517)) | (1L << (ERRCODE - 517)) | (1L << (EXIT - 517)) | (1L << (EXCEPTION - 517)) | (1L << (FOREACH - 517)) | (1L << (GET - 517)) | (1L << (HINT - 517)) | (1L << (INFO - 517)) | (1L << (LOG - 517)) | (1L << (LOOP - 517)) | (1L << (MESSAGE - 517)) | (1L << (NOTICE - 517)) | (1L << (OPEN - 517)) | (1L << (PERFORM - 517)) | (1L << (QUERY - 517)) | (1L << (RAISE - 517)) | (1L << (RECORD - 517)) | (1L << (RETURN - 517)) | (1L << (REVERSE - 517)) | (1L << (ROWTYPE - 517)) | (1L << (SLICE - 517)) | (1L << (SQLSTATE - 517)) | (1L << (STACKED - 517)) | (1L << (WARNING - 517)) | (1L << (WHILE - 517)))) != 0) || _la==Identifier || _la==QuotedIdentifier) {
				{
				setState(4831);
				tableColumnDef();
				setState(4836);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4832);
					match(COMMA);
					setState(4833);
					tableColumnDef();
					}
					}
					setState(4838);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(4841);
			match(RIGHT_PAREN);
			setState(4844);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INHERITS) {
				{
				setState(4842);
				match(INHERITS);
				setState(4843);
				namesInParens();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineTypeContext extends ParserRuleContext {
		public DataTypeContext typeName;
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public ListOfTypeColumnDefContext listOfTypeColumnDef() {
			return getRuleContext(ListOfTypeColumnDefContext.class,0);
		}
		public DefineTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDefineType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDefineType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDefineType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineTypeContext defineType() throws RecognitionException {
		DefineTypeContext _localctx = new DefineTypeContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_defineType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4846);
			match(OF);
			setState(4847);
			((DefineTypeContext)_localctx).typeName = dataType();
			setState(4849);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(4848);
				listOfTypeColumnDef();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionByContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public PartitionMethodContext partitionMethod() {
			return getRuleContext(PartitionMethodContext.class,0);
		}
		public PartitionByContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionBy; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPartitionBy(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPartitionBy(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPartitionBy(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionByContext partitionBy() throws RecognitionException {
		PartitionByContext _localctx = new PartitionByContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_partitionBy);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4851);
			match(PARTITION);
			setState(4852);
			match(BY);
			setState(4853);
			partitionMethod();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionMethodContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<PartitionColumnContext> partitionColumn() {
			return getRuleContexts(PartitionColumnContext.class);
		}
		public PartitionColumnContext partitionColumn(int i) {
			return getRuleContext(PartitionColumnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode RANGE() { return getToken(SQLParser.RANGE, 0); }
		public TerminalNode LIST() { return getToken(SQLParser.LIST, 0); }
		public TerminalNode HASH() { return getToken(SQLParser.HASH, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public PartitionMethodContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionMethod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPartitionMethod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPartitionMethod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPartitionMethod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionMethodContext partitionMethod() throws RecognitionException {
		PartitionMethodContext _localctx = new PartitionMethodContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_partitionMethod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4855);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==HASH || _la==LIST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4856);
			match(LEFT_PAREN);
			setState(4857);
			partitionColumn();
			setState(4862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4858);
				match(COMMA);
				setState(4859);
				partitionColumn();
				}
				}
				setState(4864);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4865);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionColumnContext extends ParserRuleContext {
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PartitionColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPartitionColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPartitionColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPartitionColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionColumnContext partitionColumn() throws RecognitionException {
		PartitionColumnContext _localctx = new PartitionColumnContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_partitionColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4867);
			vex(0);
			setState(4869);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(4868);
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineServerContext extends ParserRuleContext {
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DefineForeignOptionsContext defineForeignOptions() {
			return getRuleContext(DefineForeignOptionsContext.class,0);
		}
		public DefineServerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineServer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDefineServer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDefineServer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDefineServer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineServerContext defineServer() throws RecognitionException {
		DefineServerContext _localctx = new DefineServerContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_defineServer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4871);
			match(SERVER);
			setState(4872);
			identifier();
			setState(4874);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(4873);
				defineForeignOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefineForeignOptionsContext extends ParserRuleContext {
		public TerminalNode OPTIONS() { return getToken(SQLParser.OPTIONS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<ForeignOptionContext> foreignOption() {
			return getRuleContexts(ForeignOptionContext.class);
		}
		public ForeignOptionContext foreignOption(int i) {
			return getRuleContext(ForeignOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public DefineForeignOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defineForeignOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDefineForeignOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDefineForeignOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDefineForeignOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefineForeignOptionsContext defineForeignOptions() throws RecognitionException {
		DefineForeignOptionsContext _localctx = new DefineForeignOptionsContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_defineForeignOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4876);
			match(OPTIONS);
			setState(4877);
			match(LEFT_PAREN);
			{
			setState(4878);
			foreignOption();
			setState(4883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4879);
				match(COMMA);
				setState(4880);
				foreignOption();
				}
				}
				setState(4885);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			setState(4886);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeignOptionContext extends ParserRuleContext {
		public ForeignOptionNameContext foreignOptionName() {
			return getRuleContext(ForeignOptionNameContext.class,0);
		}
		public CharacterStringContext characterString() {
			return getRuleContext(CharacterStringContext.class,0);
		}
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public ForeignOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterForeignOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitForeignOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitForeignOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignOptionContext foreignOption() throws RecognitionException {
		ForeignOptionContext _localctx = new ForeignOptionContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_foreignOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,592,_ctx) ) {
			case 1:
				{
				setState(4888);
				_la = _input.LA(1);
				if ( !(_la==ADD || _la==DROP || _la==SET) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4891);
			foreignOptionName();
			setState(4893);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==Character_String_Literal || _la==BeginDollarStringConstant) {
				{
				setState(4892);
				characterString();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ForeignOptionNameContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public ForeignOptionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_foreignOptionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterForeignOptionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitForeignOptionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitForeignOptionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ForeignOptionNameContext foreignOptionName() throws RecognitionException {
		ForeignOptionNameContext _localctx = new ForeignOptionNameContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_foreignOptionName);
		try {
			setState(4897);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(4895);
				identifier();
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4896);
				match(USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ListOfTypeColumnDefContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TableOfTypeColumnDefContext> tableOfTypeColumnDef() {
			return getRuleContexts(TableOfTypeColumnDefContext.class);
		}
		public TableOfTypeColumnDefContext tableOfTypeColumnDef(int i) {
			return getRuleContext(TableOfTypeColumnDefContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ListOfTypeColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_listOfTypeColumnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterListOfTypeColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitListOfTypeColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitListOfTypeColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ListOfTypeColumnDefContext listOfTypeColumnDef() throws RecognitionException {
		ListOfTypeColumnDefContext _localctx = new ListOfTypeColumnDefContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_listOfTypeColumnDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4899);
			match(LEFT_PAREN);
			{
			setState(4900);
			tableOfTypeColumnDef();
			setState(4905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4901);
				match(COMMA);
				setState(4902);
				tableOfTypeColumnDef();
				}
				}
				setState(4907);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
			setState(4908);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableColumnDefContext extends ParserRuleContext {
		public ConstraintCommonContext tablConstraint;
		public TableColumnDefinitionContext tableColumnDefinition() {
			return getRuleContext(TableColumnDefinitionContext.class,0);
		}
		public ConstraintCommonContext constraintCommon() {
			return getRuleContext(ConstraintCommonContext.class,0);
		}
		public TerminalNode LIKE() { return getToken(SQLParser.LIKE, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public List<LikeOptionContext> likeOption() {
			return getRuleContexts(LikeOptionContext.class);
		}
		public LikeOptionContext likeOption(int i) {
			return getRuleContext(LikeOptionContext.class,i);
		}
		public TableColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableColumnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableColumnDefContext tableColumnDef() throws RecognitionException {
		TableColumnDefContext _localctx = new TableColumnDefContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_tableColumnDef);
		int _la;
		try {
			setState(4920);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,597,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4910);
				tableColumnDefinition();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4911);
				((TableColumnDefContext)_localctx).tablConstraint = constraintCommon();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4912);
				match(LIKE);
				setState(4913);
				schemaQualifiedName();
				setState(4917);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXCLUDING || _la==INCLUDING) {
					{
					{
					setState(4914);
					likeOption();
					}
					}
					setState(4919);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableOfTypeColumnDefContext extends ParserRuleContext {
		public ConstraintCommonContext tablConstraint;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode OPTIONS() { return getToken(SQLParser.OPTIONS, 0); }
		public List<ConstraintCommonContext> constraintCommon() {
			return getRuleContexts(ConstraintCommonContext.class);
		}
		public ConstraintCommonContext constraintCommon(int i) {
			return getRuleContext(ConstraintCommonContext.class,i);
		}
		public TableOfTypeColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableOfTypeColumnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableOfTypeColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableOfTypeColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableOfTypeColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableOfTypeColumnDefContext tableOfTypeColumnDef() throws RecognitionException {
		TableOfTypeColumnDefContext _localctx = new TableOfTypeColumnDefContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_tableOfTypeColumnDef);
		int _la;
		try {
			setState(4934);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,600,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4922);
				identifier();
				setState(4925);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(4923);
					match(WITH);
					setState(4924);
					match(OPTIONS);
					}
				}

				setState(4930);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==EXCLUDE || _la==GENERATED || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (CHECK - 378)) | (1L << (CONSTRAINT - 378)) | (1L << (DEFAULT - 378)) | (1L << (FOREIGN - 378)) | (1L << (NOT - 378)) | (1L << (NULL - 378)) | (1L << (PRIMARY - 378)) | (1L << (REFERENCES - 378)) | (1L << (UNIQUE - 378)))) != 0)) {
					{
					{
					setState(4927);
					constraintCommon();
					}
					}
					setState(4932);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4933);
				((TableOfTypeColumnDefContext)_localctx).tablConstraint = constraintCommon();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableColumnDefinitionContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public DefineForeignOptionsContext defineForeignOptions() {
			return getRuleContext(DefineForeignOptionsContext.class,0);
		}
		public CollateIdentifierContext collateIdentifier() {
			return getRuleContext(CollateIdentifierContext.class,0);
		}
		public List<ConstraintCommonContext> constraintCommon() {
			return getRuleContexts(ConstraintCommonContext.class);
		}
		public ConstraintCommonContext constraintCommon(int i) {
			return getRuleContext(ConstraintCommonContext.class,i);
		}
		public TableColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableColumnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableColumnDefinitionContext tableColumnDefinition() throws RecognitionException {
		TableColumnDefinitionContext _localctx = new TableColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_tableColumnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4936);
			identifier();
			setState(4937);
			dataType();
			setState(4939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OPTIONS) {
				{
				setState(4938);
				defineForeignOptions();
				}
			}

			setState(4942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLLATE) {
				{
				setState(4941);
				collateIdentifier();
				}
			}

			setState(4947);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==EXCLUDE || _la==GENERATED || ((((_la - 378)) & ~0x3f) == 0 && ((1L << (_la - 378)) & ((1L << (CHECK - 378)) | (1L << (CONSTRAINT - 378)) | (1L << (DEFAULT - 378)) | (1L << (FOREIGN - 378)) | (1L << (NOT - 378)) | (1L << (NULL - 378)) | (1L << (PRIMARY - 378)) | (1L << (REFERENCES - 378)) | (1L << (UNIQUE - 378)))) != 0)) {
				{
				{
				setState(4944);
				constraintCommon();
				}
				}
				setState(4949);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LikeOptionContext extends ParserRuleContext {
		public TerminalNode INCLUDING() { return getToken(SQLParser.INCLUDING, 0); }
		public TerminalNode EXCLUDING() { return getToken(SQLParser.EXCLUDING, 0); }
		public TerminalNode COMMENTS() { return getToken(SQLParser.COMMENTS, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(SQLParser.CONSTRAINTS, 0); }
		public TerminalNode DEFAULTS() { return getToken(SQLParser.DEFAULTS, 0); }
		public TerminalNode GENERATED() { return getToken(SQLParser.GENERATED, 0); }
		public TerminalNode IDENTITY() { return getToken(SQLParser.IDENTITY, 0); }
		public TerminalNode INDEXES() { return getToken(SQLParser.INDEXES, 0); }
		public TerminalNode STORAGE() { return getToken(SQLParser.STORAGE, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public LikeOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_likeOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLikeOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLikeOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitLikeOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LikeOptionContext likeOption() throws RecognitionException {
		LikeOptionContext _localctx = new LikeOptionContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_likeOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4950);
			_la = _input.LA(1);
			if ( !(_la==EXCLUDING || _la==INCLUDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4951);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMENTS) | (1L << CONSTRAINTS) | (1L << DEFAULTS))) != 0) || ((((_la - 94)) & ~0x3f) == 0 && ((1L << (_la - 94)) & ((1L << (GENERATED - 94)) | (1L << (IDENTITY - 94)) | (1L << (INDEXES - 94)))) != 0) || _la==STORAGE || _la==ALL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstraintCommonContext extends ParserRuleContext {
		public ConstrBodyContext constrBody() {
			return getRuleContext(ConstrBodyContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TableDeferrableContext tableDeferrable() {
			return getRuleContext(TableDeferrableContext.class,0);
		}
		public TableInitialyImmedContext tableInitialyImmed() {
			return getRuleContext(TableInitialyImmedContext.class,0);
		}
		public ConstraintCommonContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraintCommon; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterConstraintCommon(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitConstraintCommon(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitConstraintCommon(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstraintCommonContext constraintCommon() throws RecognitionException {
		ConstraintCommonContext _localctx = new ConstraintCommonContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_constraintCommon);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4955);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTRAINT) {
				{
				setState(4953);
				match(CONSTRAINT);
				setState(4954);
				identifier();
				}
			}

			setState(4957);
			constrBody();
			setState(4959);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,605,_ctx) ) {
			case 1:
				{
				setState(4958);
				tableDeferrable();
				}
				break;
			}
			setState(4962);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INITIALLY) {
				{
				setState(4961);
				tableInitialyImmed();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstrBodyContext extends ParserRuleContext {
		public IdentifierContext indexMethod;
		public Token where;
		public VexContext exp;
		public NamesInParensContext ref;
		public VexContext expression;
		public NamesInParensContext col;
		public VexContext defaultExpr;
		public TerminalNode EXCLUDE() { return getToken(SQLParser.EXCLUDE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<SortSpecifierContext> sortSpecifier() {
			return getRuleContexts(SortSpecifierContext.class);
		}
		public SortSpecifierContext sortSpecifier(int i) {
			return getRuleContext(SortSpecifierContext.class,i);
		}
		public List<TerminalNode> WITH() { return getTokens(SQLParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(SQLParser.WITH, i);
		}
		public List<AllOpContext> allOp() {
			return getRuleContexts(AllOpContext.class);
		}
		public AllOpContext allOp(int i) {
			return getRuleContext(AllOpContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public IndexParametersContext indexParameters() {
			return getRuleContext(IndexParametersContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode REFERENCES() { return getToken(SQLParser.REFERENCES, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(SQLParser.KEY, 0); }
		public List<NamesInParensContext> namesInParens() {
			return getRuleContexts(NamesInParensContext.class);
		}
		public NamesInParensContext namesInParens(int i) {
			return getRuleContext(NamesInParensContext.class,i);
		}
		public List<TerminalNode> MATCH() { return getTokens(SQLParser.MATCH); }
		public TerminalNode MATCH(int i) {
			return getToken(SQLParser.MATCH, i);
		}
		public List<TerminalNode> ON() { return getTokens(SQLParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(SQLParser.ON, i);
		}
		public List<ActionContext> action() {
			return getRuleContexts(ActionContext.class);
		}
		public ActionContext action(int i) {
			return getRuleContext(ActionContext.class,i);
		}
		public List<TerminalNode> FULL() { return getTokens(SQLParser.FULL); }
		public TerminalNode FULL(int i) {
			return getToken(SQLParser.FULL, i);
		}
		public List<TerminalNode> PARTIAL() { return getTokens(SQLParser.PARTIAL); }
		public TerminalNode PARTIAL(int i) {
			return getToken(SQLParser.PARTIAL, i);
		}
		public List<TerminalNode> SIMPLE() { return getTokens(SQLParser.SIMPLE); }
		public TerminalNode SIMPLE(int i) {
			return getToken(SQLParser.SIMPLE, i);
		}
		public List<TerminalNode> DELETE() { return getTokens(SQLParser.DELETE); }
		public TerminalNode DELETE(int i) {
			return getToken(SQLParser.DELETE, i);
		}
		public List<TerminalNode> UPDATE() { return getTokens(SQLParser.UPDATE); }
		public TerminalNode UPDATE(int i) {
			return getToken(SQLParser.UPDATE, i);
		}
		public TerminalNode CHECK() { return getToken(SQLParser.CHECK, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode INHERIT() { return getToken(SQLParser.INHERIT, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public TerminalNode PRIMARY() { return getToken(SQLParser.PRIMARY, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public IdentityBodyContext identityBody() {
			return getRuleContext(IdentityBodyContext.class,0);
		}
		public TerminalNode GENERATED() { return getToken(SQLParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(SQLParser.ALWAYS, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode STORED() { return getToken(SQLParser.STORED, 0); }
		public ConstrBodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constrBody; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterConstrBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitConstrBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitConstrBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstrBodyContext constrBody() throws RecognitionException {
		ConstrBodyContext _localctx = new ConstrBodyContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_constrBody);
		int _la;
		try {
			setState(5041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4964);
				match(EXCLUDE);
				setState(4967);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4965);
					match(USING);
					setState(4966);
					((ConstrBodyContext)_localctx).indexMethod = identifier();
					}
				}

				setState(4969);
				match(LEFT_PAREN);
				setState(4970);
				sortSpecifier();
				setState(4971);
				match(WITH);
				setState(4972);
				allOp();
				setState(4980);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4973);
					match(COMMA);
					setState(4974);
					sortSpecifier();
					setState(4975);
					match(WITH);
					setState(4976);
					allOp();
					}
					}
					setState(4982);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4983);
				match(RIGHT_PAREN);
				setState(4984);
				indexParameters();
				setState(4987);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(4985);
					((ConstrBodyContext)_localctx).where = match(WHERE);
					setState(4986);
					((ConstrBodyContext)_localctx).exp = vex(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4992);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(4989);
					match(FOREIGN);
					setState(4990);
					match(KEY);
					setState(4991);
					namesInParens();
					}
				}

				setState(4994);
				match(REFERENCES);
				setState(4995);
				schemaQualifiedName();
				setState(4997);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4996);
					((ConstrBodyContext)_localctx).ref = namesInParens();
					}
				}

				setState(5006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==MATCH || _la==ON) {
					{
					setState(5004);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case MATCH:
						{
						setState(4999);
						match(MATCH);
						setState(5000);
						_la = _input.LA(1);
						if ( !(_la==PARTIAL || _la==SIMPLE || _la==FULL) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					case ON:
						{
						setState(5001);
						match(ON);
						setState(5002);
						_la = _input.LA(1);
						if ( !(_la==DELETE || _la==UPDATE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5003);
						action();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					setState(5008);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5009);
				match(CHECK);
				setState(5010);
				match(LEFT_PAREN);
				setState(5011);
				((ConstrBodyContext)_localctx).expression = vex(0);
				setState(5012);
				match(RIGHT_PAREN);
				setState(5015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO) {
					{
					setState(5013);
					match(NO);
					setState(5014);
					match(INHERIT);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5018);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(5017);
					match(NOT);
					}
				}

				setState(5020);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5024);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNIQUE:
					{
					setState(5021);
					match(UNIQUE);
					}
					break;
				case PRIMARY:
					{
					setState(5022);
					match(PRIMARY);
					setState(5023);
					match(KEY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5026);
					((ConstrBodyContext)_localctx).col = namesInParens();
					}
				}

				setState(5029);
				indexParameters();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5030);
				match(DEFAULT);
				setState(5031);
				((ConstrBodyContext)_localctx).defaultExpr = vex(0);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5032);
				identityBody();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5033);
				match(GENERATED);
				setState(5034);
				match(ALWAYS);
				setState(5035);
				match(AS);
				setState(5036);
				match(LEFT_PAREN);
				setState(5037);
				vex(0);
				setState(5038);
				match(RIGHT_PAREN);
				setState(5039);
				match(STORED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOpContext extends ParserRuleContext {
		public OpContext op() {
			return getRuleContext(OpContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(SQLParser.NOT_EQUAL, 0); }
		public TerminalNode LTH() { return getToken(SQLParser.LTH, 0); }
		public TerminalNode LEQ() { return getToken(SQLParser.LEQ, 0); }
		public TerminalNode GTH() { return getToken(SQLParser.GTH, 0); }
		public TerminalNode GEQ() { return getToken(SQLParser.GEQ, 0); }
		public TerminalNode PLUS() { return getToken(SQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SQLParser.MINUS, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public TerminalNode DIVIDE() { return getToken(SQLParser.DIVIDE, 0); }
		public TerminalNode MODULAR() { return getToken(SQLParser.MODULAR, 0); }
		public TerminalNode EXP() { return getToken(SQLParser.EXP, 0); }
		public AllOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAllOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAllOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAllOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOpContext allOp() throws RecognitionException {
		AllOpContext _localctx = new AllOpContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_allOp);
		try {
			setState(5056);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OPERATOR:
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case OP_CHARS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5043);
				op();
				}
				break;
			case EQUAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5044);
				match(EQUAL);
				}
				break;
			case NOT_EQUAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5045);
				match(NOT_EQUAL);
				}
				break;
			case LTH:
				enterOuterAlt(_localctx, 4);
				{
				setState(5046);
				match(LTH);
				}
				break;
			case LEQ:
				enterOuterAlt(_localctx, 5);
				{
				setState(5047);
				match(LEQ);
				}
				break;
			case GTH:
				enterOuterAlt(_localctx, 6);
				{
				setState(5048);
				match(GTH);
				}
				break;
			case GEQ:
				enterOuterAlt(_localctx, 7);
				{
				setState(5049);
				match(GEQ);
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5050);
				match(PLUS);
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5051);
				match(MINUS);
				}
				break;
			case MULTIPLY:
				enterOuterAlt(_localctx, 10);
				{
				setState(5052);
				match(MULTIPLY);
				}
				break;
			case DIVIDE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5053);
				match(DIVIDE);
				}
				break;
			case MODULAR:
				enterOuterAlt(_localctx, 12);
				{
				setState(5054);
				match(MODULAR);
				}
				break;
			case EXP:
				enterOuterAlt(_localctx, 13);
				{
				setState(5055);
				match(EXP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllSimpleOpContext extends ParserRuleContext {
		public OpCharsContext opChars() {
			return getRuleContext(OpCharsContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(SQLParser.NOT_EQUAL, 0); }
		public TerminalNode LTH() { return getToken(SQLParser.LTH, 0); }
		public TerminalNode LEQ() { return getToken(SQLParser.LEQ, 0); }
		public TerminalNode GTH() { return getToken(SQLParser.GTH, 0); }
		public TerminalNode GEQ() { return getToken(SQLParser.GEQ, 0); }
		public TerminalNode PLUS() { return getToken(SQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SQLParser.MINUS, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public TerminalNode DIVIDE() { return getToken(SQLParser.DIVIDE, 0); }
		public TerminalNode MODULAR() { return getToken(SQLParser.MODULAR, 0); }
		public TerminalNode EXP() { return getToken(SQLParser.EXP, 0); }
		public AllSimpleOpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allSimpleOp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAllSimpleOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAllSimpleOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAllSimpleOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllSimpleOpContext allSimpleOp() throws RecognitionException {
		AllSimpleOpContext _localctx = new AllSimpleOpContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_allSimpleOp);
		try {
			setState(5071);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case OP_CHARS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5058);
				opChars();
				}
				break;
			case EQUAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5059);
				match(EQUAL);
				}
				break;
			case NOT_EQUAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5060);
				match(NOT_EQUAL);
				}
				break;
			case LTH:
				enterOuterAlt(_localctx, 4);
				{
				setState(5061);
				match(LTH);
				}
				break;
			case LEQ:
				enterOuterAlt(_localctx, 5);
				{
				setState(5062);
				match(LEQ);
				}
				break;
			case GTH:
				enterOuterAlt(_localctx, 6);
				{
				setState(5063);
				match(GTH);
				}
				break;
			case GEQ:
				enterOuterAlt(_localctx, 7);
				{
				setState(5064);
				match(GEQ);
				}
				break;
			case PLUS:
				enterOuterAlt(_localctx, 8);
				{
				setState(5065);
				match(PLUS);
				}
				break;
			case MINUS:
				enterOuterAlt(_localctx, 9);
				{
				setState(5066);
				match(MINUS);
				}
				break;
			case MULTIPLY:
				enterOuterAlt(_localctx, 10);
				{
				setState(5067);
				match(MULTIPLY);
				}
				break;
			case DIVIDE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5068);
				match(DIVIDE);
				}
				break;
			case MODULAR:
				enterOuterAlt(_localctx, 12);
				{
				setState(5069);
				match(MODULAR);
				}
				break;
			case EXP:
				enterOuterAlt(_localctx, 13);
				{
				setState(5070);
				match(EXP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OpCharsContext extends ParserRuleContext {
		public TerminalNode OP_CHARS() { return getToken(SQLParser.OP_CHARS, 0); }
		public TerminalNode LESS_LESS() { return getToken(SQLParser.LESS_LESS, 0); }
		public TerminalNode GREATER_GREATER() { return getToken(SQLParser.GREATER_GREATER, 0); }
		public TerminalNode HASH_SIGN() { return getToken(SQLParser.HASH_SIGN, 0); }
		public OpCharsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_opChars; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOpChars(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOpChars(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOpChars(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpCharsContext opChars() throws RecognitionException {
		OpCharsContext _localctx = new OpCharsContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_opChars);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5073);
			_la = _input.LA(1);
			if ( !(((((_la - 601)) & ~0x3f) == 0 && ((1L << (_la - 601)) & ((1L << (LESS_LESS - 601)) | (1L << (GREATER_GREATER - 601)) | (1L << (HASH_SIGN - 601)) | (1L << (OP_CHARS - 601)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexParametersContext extends ParserRuleContext {
		public IncludingIndexContext includingIndex() {
			return getRuleContext(IncludingIndexContext.class,0);
		}
		public WithStorageParameterContext withStorageParameter() {
			return getRuleContext(WithStorageParameterContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public TableSpaceContext tableSpace() {
			return getRuleContext(TableSpaceContext.class,0);
		}
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public IndexParametersContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexParameters; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndexParameters(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndexParameters(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIndexParameters(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexParametersContext indexParameters() throws RecognitionException {
		IndexParametersContext _localctx = new IndexParametersContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_indexParameters);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5076);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INCLUDE) {
				{
				setState(5075);
				includingIndex();
				}
			}

			setState(5079);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(5078);
				withStorageParameter();
				}
			}

			setState(5087);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(5081);
				match(USING);
				setState(5082);
				match(INDEX);
				setState(5085);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,623,_ctx) ) {
				case 1:
					{
					setState(5083);
					tableSpace();
					}
					break;
				case 2:
					{
					setState(5084);
					schemaQualifiedName();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamesInParensContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public NamesReferencesContext namesReferences() {
			return getRuleContext(NamesReferencesContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public NamesInParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namesInParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNamesInParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNamesInParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitNamesInParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamesInParensContext namesInParens() throws RecognitionException {
		NamesInParensContext _localctx = new NamesInParensContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_namesInParens);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5089);
			match(LEFT_PAREN);
			setState(5090);
			namesReferences();
			setState(5091);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NamesReferencesContext extends ParserRuleContext {
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public NamesReferencesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_namesReferences; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNamesReferences(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNamesReferences(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitNamesReferences(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NamesReferencesContext namesReferences() throws RecognitionException {
		NamesReferencesContext _localctx = new NamesReferencesContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_namesReferences);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5093);
			schemaQualifiedName();
			setState(5098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5094);
				match(COMMA);
				setState(5095);
				schemaQualifiedName();
				}
				}
				setState(5100);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageParameterContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<StorageParameterOptionContext> storageParameterOption() {
			return getRuleContexts(StorageParameterOptionContext.class);
		}
		public StorageParameterOptionContext storageParameterOption(int i) {
			return getRuleContext(StorageParameterOptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public StorageParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStorageParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStorageParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitStorageParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterContext storageParameter() throws RecognitionException {
		StorageParameterContext _localctx = new StorageParameterContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_storageParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5101);
			match(LEFT_PAREN);
			setState(5102);
			storageParameterOption();
			setState(5107);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5103);
				match(COMMA);
				setState(5104);
				storageParameterOption();
				}
				}
				setState(5109);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5110);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageParameterOptionContext extends ParserRuleContext {
		public StorageParameterNameContext storageParameterName() {
			return getRuleContext(StorageParameterNameContext.class,0);
		}
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public StorageParameterOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameterOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStorageParameterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStorageParameterOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitStorageParameterOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterOptionContext storageParameterOption() throws RecognitionException {
		StorageParameterOptionContext _localctx = new StorageParameterOptionContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_storageParameterOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5112);
			storageParameterName();
			setState(5115);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EQUAL) {
				{
				setState(5113);
				match(EQUAL);
				setState(5114);
				vex(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageParameterNameContext extends ParserRuleContext {
		public List<ColLabelContext> colLabel() {
			return getRuleContexts(ColLabelContext.class);
		}
		public ColLabelContext colLabel(int i) {
			return getRuleContext(ColLabelContext.class,i);
		}
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public StorageParameterNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameterName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStorageParameterName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStorageParameterName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitStorageParameterName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterNameContext storageParameterName() throws RecognitionException {
		StorageParameterNameContext _localctx = new StorageParameterNameContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_storageParameterName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5117);
			colLabel();
			setState(5120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT) {
				{
				setState(5118);
				match(DOT);
				setState(5119);
				colLabel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithStorageParameterContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public StorageParameterContext storageParameter() {
			return getRuleContext(StorageParameterContext.class,0);
		}
		public WithStorageParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withStorageParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterWithStorageParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitWithStorageParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitWithStorageParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithStorageParameterContext withStorageParameter() throws RecognitionException {
		WithStorageParameterContext _localctx = new WithStorageParameterContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_withStorageParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5122);
			match(WITH);
			setState(5123);
			storageParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StorageParameterOidContext extends ParserRuleContext {
		public WithStorageParameterContext withStorageParameter() {
			return getRuleContext(WithStorageParameterContext.class,0);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode OIDS() { return getToken(SQLParser.OIDS, 0); }
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public StorageParameterOidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_storageParameterOid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStorageParameterOid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStorageParameterOid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitStorageParameterOid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StorageParameterOidContext storageParameterOid() throws RecognitionException {
		StorageParameterOidContext _localctx = new StorageParameterOidContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_storageParameterOid);
		try {
			setState(5130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,629,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5125);
				withStorageParameter();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(5126);
				match(WITH);
				setState(5127);
				match(OIDS);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(5128);
				match(WITHOUT);
				setState(5129);
				match(OIDS);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OnCommitContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode COMMIT() { return getToken(SQLParser.COMMIT, 0); }
		public TerminalNode PRESERVE() { return getToken(SQLParser.PRESERVE, 0); }
		public TerminalNode ROWS() { return getToken(SQLParser.ROWS, 0); }
		public TerminalNode DELETE() { return getToken(SQLParser.DELETE, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public OnCommitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_onCommit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOnCommit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOnCommit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOnCommit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OnCommitContext onCommit() throws RecognitionException {
		OnCommitContext _localctx = new OnCommitContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_onCommit);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5132);
			match(ON);
			setState(5133);
			match(COMMIT);
			setState(5139);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PRESERVE:
				{
				setState(5134);
				match(PRESERVE);
				setState(5135);
				match(ROWS);
				}
				break;
			case DELETE:
				{
				setState(5136);
				match(DELETE);
				setState(5137);
				match(ROWS);
				}
				break;
			case DROP:
				{
				setState(5138);
				match(DROP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSpaceContext extends ParserRuleContext {
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TableSpaceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSpace; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableSpace(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableSpace(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableSpace(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSpaceContext tableSpace() throws RecognitionException {
		TableSpaceContext _localctx = new TableSpaceContext(_ctx, getState());
		enterRule(_localctx, 486, RULE_tableSpace);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5141);
			match(TABLESPACE);
			setState(5142);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ActionContext extends ParserRuleContext {
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(SQLParser.ACTION, 0); }
		public ActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_action; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ActionContext action() throws RecognitionException {
		ActionContext _localctx = new ActionContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_action);
		int _la;
		try {
			setState(5149);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CASCADE:
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5144);
				cascadeRestrict();
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 2);
				{
				setState(5145);
				match(SET);
				setState(5146);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==NULL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 3);
				{
				setState(5147);
				match(NO);
				setState(5148);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OwnerToContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(SQLParser.SESSION_USER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public OwnerToContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ownerTo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOwnerTo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOwnerTo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOwnerTo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OwnerToContext ownerTo() throws RecognitionException {
		OwnerToContext _localctx = new OwnerToContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_ownerTo);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5151);
			match(OWNER);
			setState(5152);
			match(TO);
			setState(5156);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(5153);
				((OwnerToContext)_localctx).name = identifier();
				}
				break;
			case CURRENT_USER:
				{
				setState(5154);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				{
				setState(5155);
				match(SESSION_USER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameToContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public RenameToContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRenameTo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRenameTo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitRenameTo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameToContext renameTo() throws RecognitionException {
		RenameToContext _localctx = new RenameToContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_renameTo);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5158);
			match(RENAME);
			setState(5159);
			match(TO);
			setState(5160);
			((RenameToContext)_localctx).name = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetSchemaContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SetSchemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setSchema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSetSchema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSetSchema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSetSchema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetSchemaContext setSchema() throws RecognitionException {
		SetSchemaContext _localctx = new SetSchemaContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_setSchema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5162);
			match(SET);
			setState(5163);
			match(SCHEMA);
			setState(5164);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableColumnPrivilegeContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SQLParser.SELECT, 0); }
		public TerminalNode INSERT() { return getToken(SQLParser.INSERT, 0); }
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public TerminalNode DELETE() { return getToken(SQLParser.DELETE, 0); }
		public TerminalNode TRUNCATE() { return getToken(SQLParser.TRUNCATE, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLParser.REFERENCES, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public TableColumnPrivilegeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableColumnPrivilege; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableColumnPrivilege(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableColumnPrivilege(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableColumnPrivilege(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableColumnPrivilegeContext tableColumnPrivilege() throws RecognitionException {
		TableColumnPrivilegeContext _localctx = new TableColumnPrivilegeContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_tableColumnPrivilege);
		int _la;
		try {
			setState(5177);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5166);
				match(SELECT);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 2);
				{
				setState(5167);
				match(INSERT);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5168);
				match(UPDATE);
				}
				break;
			case DELETE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5169);
				match(DELETE);
				}
				break;
			case TRUNCATE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5170);
				match(TRUNCATE);
				}
				break;
			case REFERENCES:
				enterOuterAlt(_localctx, 6);
				{
				setState(5171);
				match(REFERENCES);
				}
				break;
			case TRIGGER:
				enterOuterAlt(_localctx, 7);
				{
				setState(5172);
				match(TRIGGER);
				}
				break;
			case ALL:
				enterOuterAlt(_localctx, 8);
				{
				setState(5173);
				match(ALL);
				setState(5175);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIVILEGES) {
					{
					setState(5174);
					match(PRIVILEGES);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsageSelectUpdateContext extends ParserRuleContext {
		public TerminalNode USAGE() { return getToken(SQLParser.USAGE, 0); }
		public TerminalNode SELECT() { return getToken(SQLParser.SELECT, 0); }
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public UsageSelectUpdateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usageSelectUpdate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUsageSelectUpdate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUsageSelectUpdate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUsageSelectUpdate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsageSelectUpdateContext usageSelectUpdate() throws RecognitionException {
		UsageSelectUpdateContext _localctx = new UsageSelectUpdateContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_usageSelectUpdate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5179);
			_la = _input.LA(1);
			if ( !(_la==UPDATE || _la==SELECT || _la==USAGE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionByColumnsContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public PartitionByColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionByColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPartitionByColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPartitionByColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPartitionByColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionByColumnsContext partitionByColumns() throws RecognitionException {
		PartitionByColumnsContext _localctx = new PartitionByColumnsContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_partitionByColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5181);
			match(PARTITION);
			setState(5182);
			match(BY);
			setState(5183);
			vex(0);
			setState(5188);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5184);
				match(COMMA);
				setState(5185);
				vex(0);
				}
				}
				setState(5190);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CascadeRestrictContext extends ParserRuleContext {
		public TerminalNode CASCADE() { return getToken(SQLParser.CASCADE, 0); }
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public CascadeRestrictContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cascadeRestrict; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCascadeRestrict(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCascadeRestrict(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCascadeRestrict(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CascadeRestrictContext cascadeRestrict() throws RecognitionException {
		CascadeRestrictContext _localctx = new CascadeRestrictContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_cascadeRestrict);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5191);
			_la = _input.LA(1);
			if ( !(_la==CASCADE || _la==RESTRICT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollateIdentifierContext extends ParserRuleContext {
		public SchemaQualifiedNameContext collation;
		public TerminalNode COLLATE() { return getToken(SQLParser.COLLATE, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public CollateIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collateIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCollateIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCollateIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCollateIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollateIdentifierContext collateIdentifier() throws RecognitionException {
		CollateIdentifierContext _localctx = new CollateIdentifierContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_collateIdentifier);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5193);
			match(COLLATE);
			setState(5194);
			((CollateIdentifierContext)_localctx).collation = schemaQualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionVarContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DollarNumberContext dollarNumber() {
			return getRuleContext(DollarNumberContext.class,0);
		}
		public IndirectionListContext indirectionList() {
			return getRuleContext(IndirectionListContext.class,0);
		}
		public IndirectionVarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirectionVar; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndirectionVar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndirectionVar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIndirectionVar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionVarContext indirectionVar() throws RecognitionException {
		IndirectionVarContext _localctx = new IndirectionVarContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_indirectionVar);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5198);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(5196);
				identifier();
				}
				break;
			case DOLLAR_NUMBER:
				{
				setState(5197);
				dollarNumber();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5201);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,637,_ctx) ) {
			case 1:
				{
				setState(5200);
				indirectionList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DollarNumberContext extends ParserRuleContext {
		public TerminalNode DOLLAR_NUMBER() { return getToken(SQLParser.DOLLAR_NUMBER, 0); }
		public DollarNumberContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dollarNumber; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDollarNumber(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDollarNumber(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDollarNumber(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DollarNumberContext dollarNumber() throws RecognitionException {
		DollarNumberContext _localctx = new DollarNumberContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_dollarNumber);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5203);
			match(DOLLAR_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionListContext extends ParserRuleContext {
		public List<IndirectionContext> indirection() {
			return getRuleContexts(IndirectionContext.class);
		}
		public IndirectionContext indirection(int i) {
			return getRuleContext(IndirectionContext.class,i);
		}
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public IndirectionListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirectionList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndirectionList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndirectionList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIndirectionList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionListContext indirectionList() throws RecognitionException {
		IndirectionListContext _localctx = new IndirectionListContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_indirectionList);
		try {
			int _alt;
			setState(5218);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,640,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5206); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5205);
						indirection();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5208); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,638,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5213);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,639,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5210);
						indirection();
						}
						} 
					}
					setState(5215);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,639,_ctx);
				}
				setState(5216);
				match(DOT);
				setState(5217);
				match(MULTIPLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionContext extends ParserRuleContext {
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(SQLParser.LEFT_BRACKET, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(SQLParser.RIGHT_BRACKET, 0); }
		public TerminalNode COLON() { return getToken(SQLParser.COLON, 0); }
		public IndirectionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirection; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndirection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndirection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIndirection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionContext indirection() throws RecognitionException {
		IndirectionContext _localctx = new IndirectionContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_indirection);
		int _la;
		try {
			setState(5235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,643,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5220);
				match(DOT);
				setState(5221);
				colLabel();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5222);
				match(LEFT_BRACKET);
				setState(5223);
				vex(0);
				setState(5224);
				match(RIGHT_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5226);
				match(LEFT_BRACKET);
				setState(5228);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (PLACEHOLDER - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
					{
					setState(5227);
					vex(0);
					}
				}

				setState(5230);
				match(COLON);
				setState(5232);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (PLACEHOLDER - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
					{
					setState(5231);
					vex(0);
					}
				}

				setState(5234);
				match(RIGHT_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropFunctionStatementContext extends ParserRuleContext {
		public SchemaQualifiedNameContext name;
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode AGGREGATE() { return getToken(SQLParser.AGGREGATE, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public DropFunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropFunctionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropFunctionStatementContext dropFunctionStatement() throws RecognitionException {
		DropFunctionStatementContext _localctx = new DropFunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_dropFunctionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5237);
			_la = _input.LA(1);
			if ( !(_la==AGGREGATE || _la==FUNCTION || _la==PROCEDURE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,644,_ctx) ) {
			case 1:
				{
				setState(5238);
				ifExists();
				}
				break;
			}
			setState(5241);
			((DropFunctionStatementContext)_localctx).name = schemaQualifiedName();
			setState(5243);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(5242);
				functionArgs();
				}
			}

			setState(5246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5245);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTriggerStatementContext extends ParserRuleContext {
		public IdentifierContext name;
		public SchemaQualifiedNameContext tableName;
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public DropTriggerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTriggerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropTriggerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropTriggerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropTriggerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTriggerStatementContext dropTriggerStatement() throws RecognitionException {
		DropTriggerStatementContext _localctx = new DropTriggerStatementContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_dropTriggerStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5248);
			match(TRIGGER);
			setState(5250);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,647,_ctx) ) {
			case 1:
				{
				setState(5249);
				ifExists();
				}
				break;
			}
			setState(5252);
			((DropTriggerStatementContext)_localctx).name = identifier();
			setState(5253);
			match(ON);
			setState(5254);
			((DropTriggerStatementContext)_localctx).tableName = schemaQualifiedName();
			setState(5256);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5255);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropRuleStatementContext extends ParserRuleContext {
		public IdentifierContext name;
		public TerminalNode RULE() { return getToken(SQLParser.RULE, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public DropRuleStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropRuleStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropRuleStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropRuleStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropRuleStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropRuleStatementContext dropRuleStatement() throws RecognitionException {
		DropRuleStatementContext _localctx = new DropRuleStatementContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_dropRuleStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5258);
			match(RULE);
			setState(5260);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				{
				setState(5259);
				ifExists();
				}
				break;
			}
			setState(5262);
			((DropRuleStatementContext)_localctx).name = identifier();
			setState(5263);
			match(ON);
			setState(5264);
			schemaQualifiedName();
			setState(5266);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5265);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropStatementsContext extends ParserRuleContext {
		public IfExistNamesRestrictCascadeContext ifExistNamesRestrictCascade() {
			return getRuleContext(IfExistNamesRestrictCascadeContext.class,0);
		}
		public TerminalNode ACCESS() { return getToken(SQLParser.ACCESS, 0); }
		public TerminalNode METHOD() { return getToken(SQLParser.METHOD, 0); }
		public TerminalNode COLLATION() { return getToken(SQLParser.COLLATION, 0); }
		public TerminalNode CONVERSION() { return getToken(SQLParser.CONVERSION, 0); }
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public TerminalNode DOMAIN() { return getToken(SQLParser.DOMAIN, 0); }
		public TerminalNode EVENT() { return getToken(SQLParser.EVENT, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public TerminalNode GROUP() { return getToken(SQLParser.GROUP, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public TerminalNode PUBLICATION() { return getToken(SQLParser.PUBLICATION, 0); }
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public TerminalNode STATISTICS() { return getToken(SQLParser.STATISTICS, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(SQLParser.SUBSCRIPTION, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SQLParser.CONFIGURATION, 0); }
		public TerminalNode DICTIONARY() { return getToken(SQLParser.DICTIONARY, 0); }
		public TerminalNode PARSER() { return getToken(SQLParser.PARSER, 0); }
		public TerminalNode TEMPLATE() { return getToken(SQLParser.TEMPLATE, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(SQLParser.CONCURRENTLY, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SQLParser.MATERIALIZED, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public DropStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDropStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDropStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDropStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropStatementsContext dropStatements() throws RecognitionException {
		DropStatementsContext _localctx = new DropStatementsContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_dropStatements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5310);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,655,_ctx) ) {
			case 1:
				{
				setState(5268);
				match(ACCESS);
				setState(5269);
				match(METHOD);
				}
				break;
			case 2:
				{
				setState(5270);
				match(COLLATION);
				}
				break;
			case 3:
				{
				setState(5271);
				match(CONVERSION);
				}
				break;
			case 4:
				{
				setState(5272);
				match(DATABASE);
				}
				break;
			case 5:
				{
				setState(5273);
				match(DOMAIN);
				}
				break;
			case 6:
				{
				setState(5274);
				match(EVENT);
				setState(5275);
				match(TRIGGER);
				}
				break;
			case 7:
				{
				setState(5276);
				match(EXTENSION);
				}
				break;
			case 8:
				{
				setState(5277);
				match(GROUP);
				}
				break;
			case 9:
				{
				setState(5279);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOREIGN) {
					{
					setState(5278);
					match(FOREIGN);
					}
				}

				setState(5281);
				match(TABLE);
				}
				break;
			case 10:
				{
				setState(5282);
				match(FOREIGN);
				setState(5283);
				match(DATA);
				setState(5284);
				match(WRAPPER);
				}
				break;
			case 11:
				{
				setState(5285);
				match(INDEX);
				setState(5287);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONCURRENTLY) {
					{
					setState(5286);
					match(CONCURRENTLY);
					}
				}

				}
				break;
			case 12:
				{
				setState(5290);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MATERIALIZED) {
					{
					setState(5289);
					match(MATERIALIZED);
					}
				}

				setState(5292);
				match(VIEW);
				}
				break;
			case 13:
				{
				setState(5294);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PROCEDURAL) {
					{
					setState(5293);
					match(PROCEDURAL);
					}
				}

				setState(5296);
				match(LANGUAGE);
				}
				break;
			case 14:
				{
				setState(5297);
				match(PUBLICATION);
				}
				break;
			case 15:
				{
				setState(5298);
				match(ROLE);
				}
				break;
			case 16:
				{
				setState(5299);
				match(SCHEMA);
				}
				break;
			case 17:
				{
				setState(5300);
				match(SEQUENCE);
				}
				break;
			case 18:
				{
				setState(5301);
				match(SERVER);
				}
				break;
			case 19:
				{
				setState(5302);
				match(STATISTICS);
				}
				break;
			case 20:
				{
				setState(5303);
				match(SUBSCRIPTION);
				}
				break;
			case 21:
				{
				setState(5304);
				match(TABLESPACE);
				}
				break;
			case 22:
				{
				setState(5305);
				match(TYPE);
				}
				break;
			case 23:
				{
				setState(5306);
				match(TEXT);
				setState(5307);
				match(SEARCH);
				setState(5308);
				_la = _input.LA(1);
				if ( !(_la==CONFIGURATION || _la==DICTIONARY || _la==PARSER || _la==TEMPLATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 24:
				{
				setState(5309);
				match(USER);
				}
				break;
			}
			setState(5312);
			ifExistNamesRestrictCascade();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistNamesRestrictCascadeContext extends ParserRuleContext {
		public NamesReferencesContext namesReferences() {
			return getRuleContext(NamesReferencesContext.class,0);
		}
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public IfExistNamesRestrictCascadeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExistNamesRestrictCascade; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIfExistNamesRestrictCascade(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIfExistNamesRestrictCascade(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIfExistNamesRestrictCascade(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistNamesRestrictCascadeContext ifExistNamesRestrictCascade() throws RecognitionException {
		IfExistNamesRestrictCascadeContext _localctx = new IfExistNamesRestrictCascadeContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_ifExistNamesRestrictCascade);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5315);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,656,_ctx) ) {
			case 1:
				{
				setState(5314);
				ifExists();
				}
				break;
			}
			setState(5317);
			namesReferences();
			setState(5319);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(5318);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdTokenContext extends ParserRuleContext {
		public TerminalNode Identifier() { return getToken(SQLParser.Identifier, 0); }
		public TerminalNode QuotedIdentifier() { return getToken(SQLParser.QuotedIdentifier, 0); }
		public TokensNonkeywordContext tokensNonkeyword() {
			return getRuleContext(TokensNonkeywordContext.class,0);
		}
		public IdTokenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_idToken; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIdToken(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIdToken(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIdToken(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdTokenContext idToken() throws RecognitionException {
		IdTokenContext _localctx = new IdTokenContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_idToken);
		try {
			setState(5324);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case Identifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(5321);
				match(Identifier);
				}
				break;
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 2);
				{
				setState(5322);
				match(QuotedIdentifier);
				}
				break;
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5323);
				tokensNonkeyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierContext extends ParserRuleContext {
		public IdTokenContext idToken() {
			return getRuleContext(IdTokenContext.class,0);
		}
		public TokensNonreservedContext tokensNonreserved() {
			return getRuleContext(TokensNonreservedContext.class,0);
		}
		public TokensNonreservedExceptFunctionTypeContext tokensNonreservedExceptFunctionType() {
			return getRuleContext(TokensNonreservedExceptFunctionTypeContext.class,0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierContext identifier() throws RecognitionException {
		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_identifier);
		try {
			setState(5329);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(5326);
				idToken();
				}
				break;
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5327);
				tokensNonreserved();
				}
				break;
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5328);
				tokensNonreservedExceptFunctionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierNontypeContext extends ParserRuleContext {
		public IdTokenContext idToken() {
			return getRuleContext(IdTokenContext.class,0);
		}
		public TokensNonreservedContext tokensNonreserved() {
			return getRuleContext(TokensNonreservedContext.class,0);
		}
		public TokensReservedExceptFunctionTypeContext tokensReservedExceptFunctionType() {
			return getRuleContext(TokensReservedExceptFunctionTypeContext.class,0);
		}
		public IdentifierNontypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierNontype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIdentifierNontype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIdentifierNontype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIdentifierNontype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierNontypeContext identifierNontype() throws RecognitionException {
		IdentifierNontypeContext _localctx = new IdentifierNontypeContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_identifierNontype);
		try {
			setState(5334);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(5331);
				idToken();
				}
				break;
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
				enterOuterAlt(_localctx, 2);
				{
				setState(5332);
				tokensNonreserved();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5333);
				tokensReservedExceptFunctionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColLabelContext extends ParserRuleContext {
		public IdTokenContext idToken() {
			return getRuleContext(IdTokenContext.class,0);
		}
		public TokensReservedContext tokensReserved() {
			return getRuleContext(TokensReservedContext.class,0);
		}
		public TokensNonreservedContext tokensNonreserved() {
			return getRuleContext(TokensNonreservedContext.class,0);
		}
		public TokensReservedExceptFunctionTypeContext tokensReservedExceptFunctionType() {
			return getRuleContext(TokensReservedExceptFunctionTypeContext.class,0);
		}
		public TokensNonreservedExceptFunctionTypeContext tokensNonreservedExceptFunctionType() {
			return getRuleContext(TokensNonreservedExceptFunctionTypeContext.class,0);
		}
		public ColLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_colLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterColLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitColLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitColLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColLabelContext colLabel() throws RecognitionException {
		ColLabelContext _localctx = new ColLabelContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_colLabel);
		try {
			setState(5341);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(5336);
				idToken();
				}
				break;
			case ALL:
			case ANALYSE:
			case ANALYZE:
			case AND:
			case ANY:
			case ARRAY:
			case AS:
			case ASC:
			case ASYMMETRIC:
			case BOTH:
			case CASE:
			case CAST:
			case CHECK:
			case COLLATE:
			case COLUMN:
			case CONSTRAINT:
			case CREATE:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_ROLE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case DEFAULT:
			case DEFERRABLE:
			case DESC:
			case DISTINCT:
			case DO:
			case ELSE:
			case END:
			case EXCEPT:
			case FALSE:
			case FETCH:
			case FOR:
			case FOREIGN:
			case FROM:
			case GRANT:
			case GROUP:
			case HAVING:
			case IN:
			case INITIALLY:
			case INTERSECT:
			case INTO:
			case LATERAL:
			case LEADING:
			case LIMIT:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL:
			case OFFSET:
			case ON:
			case ONLY:
			case OR:
			case ORDER:
			case PLACING:
			case PRIMARY:
			case REFERENCES:
			case RETURNING:
			case SELECT:
			case SESSION_USER:
			case SOME:
			case SYMMETRIC:
			case TABLE:
			case THEN:
			case TO:
			case TRAILING:
			case TRUE:
			case UNION:
			case UNIQUE:
			case USER:
			case USING:
			case VARIADIC:
			case WHEN:
			case WHERE:
			case WINDOW:
			case WITH:
				enterOuterAlt(_localctx, 2);
				{
				setState(5337);
				tokensReserved();
				}
				break;
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5338);
				tokensNonreserved();
				}
				break;
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5339);
				tokensReservedExceptFunctionType();
				}
				break;
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5340);
				tokensNonreservedExceptFunctionType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TokensNonreservedContext extends ParserRuleContext {
		public TerminalNode ABORT() { return getToken(SQLParser.ABORT, 0); }
		public TerminalNode ABSOLUTE() { return getToken(SQLParser.ABSOLUTE, 0); }
		public TerminalNode ACCESS() { return getToken(SQLParser.ACCESS, 0); }
		public TerminalNode ACTION() { return getToken(SQLParser.ACTION, 0); }
		public TerminalNode ADD() { return getToken(SQLParser.ADD, 0); }
		public TerminalNode ADMIN() { return getToken(SQLParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(SQLParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(SQLParser.AGGREGATE, 0); }
		public TerminalNode ALSO() { return getToken(SQLParser.ALSO, 0); }
		public TerminalNode ALTER() { return getToken(SQLParser.ALTER, 0); }
		public TerminalNode ALWAYS() { return getToken(SQLParser.ALWAYS, 0); }
		public TerminalNode ASSERTION() { return getToken(SQLParser.ASSERTION, 0); }
		public TerminalNode ASSIGNMENT() { return getToken(SQLParser.ASSIGNMENT, 0); }
		public TerminalNode AT() { return getToken(SQLParser.AT, 0); }
		public TerminalNode ATTACH() { return getToken(SQLParser.ATTACH, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(SQLParser.ATTRIBUTE, 0); }
		public TerminalNode BACKWARD() { return getToken(SQLParser.BACKWARD, 0); }
		public TerminalNode BEFORE() { return getToken(SQLParser.BEFORE, 0); }
		public TerminalNode BEGIN() { return getToken(SQLParser.BEGIN, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public TerminalNode CACHE() { return getToken(SQLParser.CACHE, 0); }
		public TerminalNode CALL() { return getToken(SQLParser.CALL, 0); }
		public TerminalNode CALLED() { return getToken(SQLParser.CALLED, 0); }
		public TerminalNode CASCADE() { return getToken(SQLParser.CASCADE, 0); }
		public TerminalNode CASCADED() { return getToken(SQLParser.CASCADED, 0); }
		public TerminalNode CATALOG() { return getToken(SQLParser.CATALOG, 0); }
		public TerminalNode CHAIN() { return getToken(SQLParser.CHAIN, 0); }
		public TerminalNode CHARACTERISTICS() { return getToken(SQLParser.CHARACTERISTICS, 0); }
		public TerminalNode CHECKPOINT() { return getToken(SQLParser.CHECKPOINT, 0); }
		public TerminalNode CLASS() { return getToken(SQLParser.CLASS, 0); }
		public TerminalNode CLOSE() { return getToken(SQLParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(SQLParser.CLUSTER, 0); }
		public TerminalNode COLUMNS() { return getToken(SQLParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(SQLParser.COMMENT, 0); }
		public TerminalNode COMMENTS() { return getToken(SQLParser.COMMENTS, 0); }
		public TerminalNode COMMIT() { return getToken(SQLParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(SQLParser.COMMITTED, 0); }
		public TerminalNode CONFIGURATION() { return getToken(SQLParser.CONFIGURATION, 0); }
		public TerminalNode CONFLICT() { return getToken(SQLParser.CONFLICT, 0); }
		public TerminalNode CONNECTION() { return getToken(SQLParser.CONNECTION, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(SQLParser.CONSTRAINTS, 0); }
		public TerminalNode CONTENT() { return getToken(SQLParser.CONTENT, 0); }
		public TerminalNode CONTINUE() { return getToken(SQLParser.CONTINUE, 0); }
		public TerminalNode CONVERSION() { return getToken(SQLParser.CONVERSION, 0); }
		public TerminalNode COPY() { return getToken(SQLParser.COPY, 0); }
		public TerminalNode COST() { return getToken(SQLParser.COST, 0); }
		public TerminalNode CSV() { return getToken(SQLParser.CSV, 0); }
		public TerminalNode CUBE() { return getToken(SQLParser.CUBE, 0); }
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode CURSOR() { return getToken(SQLParser.CURSOR, 0); }
		public TerminalNode CYCLE() { return getToken(SQLParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(SQLParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(SQLParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(SQLParser.DAY, 0); }
		public TerminalNode DEALLOCATE() { return getToken(SQLParser.DEALLOCATE, 0); }
		public TerminalNode DECLARE() { return getToken(SQLParser.DECLARE, 0); }
		public TerminalNode DEFAULTS() { return getToken(SQLParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(SQLParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(SQLParser.DEFINER, 0); }
		public TerminalNode DELETE() { return getToken(SQLParser.DELETE, 0); }
		public TerminalNode DELIMITER() { return getToken(SQLParser.DELIMITER, 0); }
		public TerminalNode DELIMITERS() { return getToken(SQLParser.DELIMITERS, 0); }
		public TerminalNode DEPENDS() { return getToken(SQLParser.DEPENDS, 0); }
		public TerminalNode DETACH() { return getToken(SQLParser.DETACH, 0); }
		public TerminalNode DICTIONARY() { return getToken(SQLParser.DICTIONARY, 0); }
		public TerminalNode DISABLE() { return getToken(SQLParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(SQLParser.DISCARD, 0); }
		public TerminalNode DOCUMENT() { return getToken(SQLParser.DOCUMENT, 0); }
		public TerminalNode DOMAIN() { return getToken(SQLParser.DOMAIN, 0); }
		public TerminalNode DOUBLE() { return getToken(SQLParser.DOUBLE, 0); }
		public TerminalNode DROP() { return getToken(SQLParser.DROP, 0); }
		public TerminalNode EACH() { return getToken(SQLParser.EACH, 0); }
		public TerminalNode ENABLE() { return getToken(SQLParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(SQLParser.ENCODING, 0); }
		public TerminalNode ENCRYPTED() { return getToken(SQLParser.ENCRYPTED, 0); }
		public TerminalNode ENUM() { return getToken(SQLParser.ENUM, 0); }
		public TerminalNode ESCAPE() { return getToken(SQLParser.ESCAPE, 0); }
		public TerminalNode EVENT() { return getToken(SQLParser.EVENT, 0); }
		public TerminalNode EXCLUDE() { return getToken(SQLParser.EXCLUDE, 0); }
		public TerminalNode EXCLUDING() { return getToken(SQLParser.EXCLUDING, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(SQLParser.EXCLUSIVE, 0); }
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public TerminalNode EXPLAIN() { return getToken(SQLParser.EXPLAIN, 0); }
		public TerminalNode EXTENSION() { return getToken(SQLParser.EXTENSION, 0); }
		public TerminalNode EXTERNAL() { return getToken(SQLParser.EXTERNAL, 0); }
		public TerminalNode FAMILY() { return getToken(SQLParser.FAMILY, 0); }
		public TerminalNode FILTER() { return getToken(SQLParser.FILTER, 0); }
		public TerminalNode FIRST() { return getToken(SQLParser.FIRST, 0); }
		public TerminalNode FOLLOWING() { return getToken(SQLParser.FOLLOWING, 0); }
		public TerminalNode FORCE() { return getToken(SQLParser.FORCE, 0); }
		public TerminalNode FORWARD() { return getToken(SQLParser.FORWARD, 0); }
		public TerminalNode FUNCTION() { return getToken(SQLParser.FUNCTION, 0); }
		public TerminalNode FUNCTIONS() { return getToken(SQLParser.FUNCTIONS, 0); }
		public TerminalNode GENERATED() { return getToken(SQLParser.GENERATED, 0); }
		public TerminalNode GLOBAL() { return getToken(SQLParser.GLOBAL, 0); }
		public TerminalNode GRANTED() { return getToken(SQLParser.GRANTED, 0); }
		public TerminalNode GROUPS() { return getToken(SQLParser.GROUPS, 0); }
		public TerminalNode HANDLER() { return getToken(SQLParser.HANDLER, 0); }
		public TerminalNode HEADER() { return getToken(SQLParser.HEADER, 0); }
		public TerminalNode HOLD() { return getToken(SQLParser.HOLD, 0); }
		public TerminalNode HOUR() { return getToken(SQLParser.HOUR, 0); }
		public TerminalNode IDENTITY() { return getToken(SQLParser.IDENTITY, 0); }
		public TerminalNode IF() { return getToken(SQLParser.IF, 0); }
		public TerminalNode IMMEDIATE() { return getToken(SQLParser.IMMEDIATE, 0); }
		public TerminalNode IMMUTABLE() { return getToken(SQLParser.IMMUTABLE, 0); }
		public TerminalNode IMPLICIT() { return getToken(SQLParser.IMPLICIT, 0); }
		public TerminalNode IMPORT() { return getToken(SQLParser.IMPORT, 0); }
		public TerminalNode INCLUDE() { return getToken(SQLParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(SQLParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(SQLParser.INCREMENT, 0); }
		public TerminalNode INDEX() { return getToken(SQLParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(SQLParser.INDEXES, 0); }
		public TerminalNode INHERIT() { return getToken(SQLParser.INHERIT, 0); }
		public TerminalNode INHERITS() { return getToken(SQLParser.INHERITS, 0); }
		public TerminalNode INLINE() { return getToken(SQLParser.INLINE, 0); }
		public TerminalNode INPUT() { return getToken(SQLParser.INPUT, 0); }
		public TerminalNode INSENSITIVE() { return getToken(SQLParser.INSENSITIVE, 0); }
		public TerminalNode INSERT() { return getToken(SQLParser.INSERT, 0); }
		public TerminalNode INSTEAD() { return getToken(SQLParser.INSTEAD, 0); }
		public TerminalNode INVOKER() { return getToken(SQLParser.INVOKER, 0); }
		public TerminalNode ISOLATION() { return getToken(SQLParser.ISOLATION, 0); }
		public TerminalNode KEY() { return getToken(SQLParser.KEY, 0); }
		public TerminalNode LABEL() { return getToken(SQLParser.LABEL, 0); }
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public TerminalNode LARGE() { return getToken(SQLParser.LARGE, 0); }
		public TerminalNode LAST() { return getToken(SQLParser.LAST, 0); }
		public TerminalNode LEAKPROOF() { return getToken(SQLParser.LEAKPROOF, 0); }
		public TerminalNode LEVEL() { return getToken(SQLParser.LEVEL, 0); }
		public TerminalNode LISTEN() { return getToken(SQLParser.LISTEN, 0); }
		public TerminalNode LOAD() { return getToken(SQLParser.LOAD, 0); }
		public TerminalNode LOCAL() { return getToken(SQLParser.LOCAL, 0); }
		public TerminalNode LOCATION() { return getToken(SQLParser.LOCATION, 0); }
		public TerminalNode LOCK() { return getToken(SQLParser.LOCK, 0); }
		public TerminalNode LOCKED() { return getToken(SQLParser.LOCKED, 0); }
		public TerminalNode LOGGED() { return getToken(SQLParser.LOGGED, 0); }
		public TerminalNode MAPPING() { return getToken(SQLParser.MAPPING, 0); }
		public TerminalNode MATCH() { return getToken(SQLParser.MATCH, 0); }
		public TerminalNode MATERIALIZED() { return getToken(SQLParser.MATERIALIZED, 0); }
		public TerminalNode MAXVALUE() { return getToken(SQLParser.MAXVALUE, 0); }
		public TerminalNode METHOD() { return getToken(SQLParser.METHOD, 0); }
		public TerminalNode MINUTE() { return getToken(SQLParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(SQLParser.MINVALUE, 0); }
		public TerminalNode MODE() { return getToken(SQLParser.MODE, 0); }
		public TerminalNode MONTH() { return getToken(SQLParser.MONTH, 0); }
		public TerminalNode MOVE() { return getToken(SQLParser.MOVE, 0); }
		public TerminalNode NAME() { return getToken(SQLParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(SQLParser.NAMES, 0); }
		public TerminalNode NEW() { return getToken(SQLParser.NEW, 0); }
		public TerminalNode NEXT() { return getToken(SQLParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode NOTHING() { return getToken(SQLParser.NOTHING, 0); }
		public TerminalNode NOTIFY() { return getToken(SQLParser.NOTIFY, 0); }
		public TerminalNode NOWAIT() { return getToken(SQLParser.NOWAIT, 0); }
		public TerminalNode NULLS() { return getToken(SQLParser.NULLS, 0); }
		public TerminalNode OBJECT() { return getToken(SQLParser.OBJECT, 0); }
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public TerminalNode OFF() { return getToken(SQLParser.OFF, 0); }
		public TerminalNode OIDS() { return getToken(SQLParser.OIDS, 0); }
		public TerminalNode OLD() { return getToken(SQLParser.OLD, 0); }
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode OPTION() { return getToken(SQLParser.OPTION, 0); }
		public TerminalNode OPTIONS() { return getToken(SQLParser.OPTIONS, 0); }
		public TerminalNode ORDINALITY() { return getToken(SQLParser.ORDINALITY, 0); }
		public TerminalNode OTHERS() { return getToken(SQLParser.OTHERS, 0); }
		public TerminalNode OVER() { return getToken(SQLParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(SQLParser.OVERRIDING, 0); }
		public TerminalNode OWNED() { return getToken(SQLParser.OWNED, 0); }
		public TerminalNode OWNER() { return getToken(SQLParser.OWNER, 0); }
		public TerminalNode PARALLEL() { return getToken(SQLParser.PARALLEL, 0); }
		public TerminalNode PARSER() { return getToken(SQLParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(SQLParser.PARTIAL, 0); }
		public TerminalNode PARTITION() { return getToken(SQLParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(SQLParser.PASSING, 0); }
		public TerminalNode PASSWORD() { return getToken(SQLParser.PASSWORD, 0); }
		public TerminalNode PLANS() { return getToken(SQLParser.PLANS, 0); }
		public TerminalNode POLICY() { return getToken(SQLParser.POLICY, 0); }
		public TerminalNode PRECEDING() { return getToken(SQLParser.PRECEDING, 0); }
		public TerminalNode PREPARE() { return getToken(SQLParser.PREPARE, 0); }
		public TerminalNode PREPARED() { return getToken(SQLParser.PREPARED, 0); }
		public TerminalNode PRESERVE() { return getToken(SQLParser.PRESERVE, 0); }
		public TerminalNode PRIOR() { return getToken(SQLParser.PRIOR, 0); }
		public TerminalNode PRIVILEGES() { return getToken(SQLParser.PRIVILEGES, 0); }
		public TerminalNode PROCEDURAL() { return getToken(SQLParser.PROCEDURAL, 0); }
		public TerminalNode PROCEDURE() { return getToken(SQLParser.PROCEDURE, 0); }
		public TerminalNode PROCEDURES() { return getToken(SQLParser.PROCEDURES, 0); }
		public TerminalNode PROGRAM() { return getToken(SQLParser.PROGRAM, 0); }
		public TerminalNode PUBLICATION() { return getToken(SQLParser.PUBLICATION, 0); }
		public TerminalNode QUOTE() { return getToken(SQLParser.QUOTE, 0); }
		public TerminalNode RANGE() { return getToken(SQLParser.RANGE, 0); }
		public TerminalNode READ() { return getToken(SQLParser.READ, 0); }
		public TerminalNode REASSIGN() { return getToken(SQLParser.REASSIGN, 0); }
		public TerminalNode RECHECK() { return getToken(SQLParser.RECHECK, 0); }
		public TerminalNode RECURSIVE() { return getToken(SQLParser.RECURSIVE, 0); }
		public TerminalNode REF() { return getToken(SQLParser.REF, 0); }
		public TerminalNode REFERENCING() { return getToken(SQLParser.REFERENCING, 0); }
		public TerminalNode REFRESH() { return getToken(SQLParser.REFRESH, 0); }
		public TerminalNode REINDEX() { return getToken(SQLParser.REINDEX, 0); }
		public TerminalNode RELATIVE() { return getToken(SQLParser.RELATIVE, 0); }
		public TerminalNode RELEASE() { return getToken(SQLParser.RELEASE, 0); }
		public TerminalNode RENAME() { return getToken(SQLParser.RENAME, 0); }
		public TerminalNode REPEATABLE() { return getToken(SQLParser.REPEATABLE, 0); }
		public TerminalNode REPLACE() { return getToken(SQLParser.REPLACE, 0); }
		public TerminalNode REPLICA() { return getToken(SQLParser.REPLICA, 0); }
		public TerminalNode RESET() { return getToken(SQLParser.RESET, 0); }
		public TerminalNode RESTART() { return getToken(SQLParser.RESTART, 0); }
		public TerminalNode RESTRICT() { return getToken(SQLParser.RESTRICT, 0); }
		public TerminalNode RETURNS() { return getToken(SQLParser.RETURNS, 0); }
		public TerminalNode REVOKE() { return getToken(SQLParser.REVOKE, 0); }
		public TerminalNode ROLE() { return getToken(SQLParser.ROLE, 0); }
		public TerminalNode ROLLBACK() { return getToken(SQLParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(SQLParser.ROLLUP, 0); }
		public TerminalNode ROUTINE() { return getToken(SQLParser.ROUTINE, 0); }
		public TerminalNode ROUTINES() { return getToken(SQLParser.ROUTINES, 0); }
		public TerminalNode ROWS() { return getToken(SQLParser.ROWS, 0); }
		public TerminalNode RULE() { return getToken(SQLParser.RULE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(SQLParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public TerminalNode SCHEMAS() { return getToken(SQLParser.SCHEMAS, 0); }
		public TerminalNode SCROLL() { return getToken(SQLParser.SCROLL, 0); }
		public TerminalNode SEARCH() { return getToken(SQLParser.SEARCH, 0); }
		public TerminalNode SECOND() { return getToken(SQLParser.SECOND, 0); }
		public TerminalNode SECURITY() { return getToken(SQLParser.SECURITY, 0); }
		public TerminalNode SEQUENCE() { return getToken(SQLParser.SEQUENCE, 0); }
		public TerminalNode SEQUENCES() { return getToken(SQLParser.SEQUENCES, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(SQLParser.SERIALIZABLE, 0); }
		public TerminalNode SERVER() { return getToken(SQLParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(SQLParser.SESSION, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public TerminalNode SETS() { return getToken(SQLParser.SETS, 0); }
		public TerminalNode SHARE() { return getToken(SQLParser.SHARE, 0); }
		public TerminalNode SHOW() { return getToken(SQLParser.SHOW, 0); }
		public TerminalNode SIMPLE() { return getToken(SQLParser.SIMPLE, 0); }
		public TerminalNode SKIP_() { return getToken(SQLParser.SKIP_, 0); }
		public TerminalNode SNAPSHOT() { return getToken(SQLParser.SNAPSHOT, 0); }
		public TerminalNode SQL() { return getToken(SQLParser.SQL, 0); }
		public TerminalNode STABLE() { return getToken(SQLParser.STABLE, 0); }
		public TerminalNode STANDALONE() { return getToken(SQLParser.STANDALONE, 0); }
		public TerminalNode START() { return getToken(SQLParser.START, 0); }
		public TerminalNode STATEMENT() { return getToken(SQLParser.STATEMENT, 0); }
		public TerminalNode STATISTICS() { return getToken(SQLParser.STATISTICS, 0); }
		public TerminalNode STDIN() { return getToken(SQLParser.STDIN, 0); }
		public TerminalNode STDOUT() { return getToken(SQLParser.STDOUT, 0); }
		public TerminalNode STORAGE() { return getToken(SQLParser.STORAGE, 0); }
		public TerminalNode STORED() { return getToken(SQLParser.STORED, 0); }
		public TerminalNode STRICT() { return getToken(SQLParser.STRICT, 0); }
		public TerminalNode STRIP() { return getToken(SQLParser.STRIP, 0); }
		public TerminalNode SUBSCRIPTION() { return getToken(SQLParser.SUBSCRIPTION, 0); }
		public TerminalNode SUPPORT() { return getToken(SQLParser.SUPPORT, 0); }
		public TerminalNode SYSID() { return getToken(SQLParser.SYSID, 0); }
		public TerminalNode SYSTEM() { return getToken(SQLParser.SYSTEM, 0); }
		public TerminalNode TABLES() { return getToken(SQLParser.TABLES, 0); }
		public TerminalNode TABLESPACE() { return getToken(SQLParser.TABLESPACE, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public TerminalNode TEMPLATE() { return getToken(SQLParser.TEMPLATE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public TerminalNode TEXT() { return getToken(SQLParser.TEXT, 0); }
		public TerminalNode TIES() { return getToken(SQLParser.TIES, 0); }
		public TerminalNode TRANSACTION() { return getToken(SQLParser.TRANSACTION, 0); }
		public TerminalNode TRANSFORM() { return getToken(SQLParser.TRANSFORM, 0); }
		public TerminalNode TRIGGER() { return getToken(SQLParser.TRIGGER, 0); }
		public TerminalNode TRUNCATE() { return getToken(SQLParser.TRUNCATE, 0); }
		public TerminalNode TRUSTED() { return getToken(SQLParser.TRUSTED, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public TerminalNode TYPES() { return getToken(SQLParser.TYPES, 0); }
		public TerminalNode UNBOUNDED() { return getToken(SQLParser.UNBOUNDED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(SQLParser.UNCOMMITTED, 0); }
		public TerminalNode UNENCRYPTED() { return getToken(SQLParser.UNENCRYPTED, 0); }
		public TerminalNode UNKNOWN() { return getToken(SQLParser.UNKNOWN, 0); }
		public TerminalNode UNLISTEN() { return getToken(SQLParser.UNLISTEN, 0); }
		public TerminalNode UNLOGGED() { return getToken(SQLParser.UNLOGGED, 0); }
		public TerminalNode UNTIL() { return getToken(SQLParser.UNTIL, 0); }
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public TerminalNode VACUUM() { return getToken(SQLParser.VACUUM, 0); }
		public TerminalNode VALID() { return getToken(SQLParser.VALID, 0); }
		public TerminalNode VALIDATE() { return getToken(SQLParser.VALIDATE, 0); }
		public TerminalNode VALIDATOR() { return getToken(SQLParser.VALIDATOR, 0); }
		public TerminalNode VALUE() { return getToken(SQLParser.VALUE, 0); }
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(SQLParser.VERSION, 0); }
		public TerminalNode VIEW() { return getToken(SQLParser.VIEW, 0); }
		public TerminalNode VIEWS() { return getToken(SQLParser.VIEWS, 0); }
		public TerminalNode VOLATILE() { return getToken(SQLParser.VOLATILE, 0); }
		public TerminalNode WHITESPACE() { return getToken(SQLParser.WHITESPACE, 0); }
		public TerminalNode WITHIN() { return getToken(SQLParser.WITHIN, 0); }
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(SQLParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(SQLParser.WRAPPER, 0); }
		public TerminalNode WRITE() { return getToken(SQLParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(SQLParser.XML, 0); }
		public TerminalNode YEAR() { return getToken(SQLParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(SQLParser.YES, 0); }
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public TokensNonreservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tokensNonreserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTokensNonreserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTokensNonreserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTokensNonreserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TokensNonreservedContext tokensNonreserved() throws RecognitionException {
		TokensNonreservedContext _localctx = new TokensNonreservedContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_tokensNonreserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5343);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TokensNonreservedExceptFunctionTypeContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(SQLParser.BETWEEN, 0); }
		public TerminalNode BIGINT() { return getToken(SQLParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(SQLParser.BIT, 0); }
		public TerminalNode BOOLEAN() { return getToken(SQLParser.BOOLEAN, 0); }
		public TerminalNode CHAR() { return getToken(SQLParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(SQLParser.CHARACTER, 0); }
		public TerminalNode COALESCE() { return getToken(SQLParser.COALESCE, 0); }
		public TerminalNode DEC() { return getToken(SQLParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(SQLParser.DECIMAL, 0); }
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TerminalNode EXTRACT() { return getToken(SQLParser.EXTRACT, 0); }
		public TerminalNode FLOAT() { return getToken(SQLParser.FLOAT, 0); }
		public TerminalNode GREATEST() { return getToken(SQLParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(SQLParser.GROUPING, 0); }
		public TerminalNode INOUT() { return getToken(SQLParser.INOUT, 0); }
		public TerminalNode INT() { return getToken(SQLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(SQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(SQLParser.INTERVAL, 0); }
		public TerminalNode LEAST() { return getToken(SQLParser.LEAST, 0); }
		public TerminalNode NATIONAL() { return getToken(SQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(SQLParser.NCHAR, 0); }
		public TerminalNode NONE() { return getToken(SQLParser.NONE, 0); }
		public TerminalNode NULLIF() { return getToken(SQLParser.NULLIF, 0); }
		public TerminalNode NUMERIC() { return getToken(SQLParser.NUMERIC, 0); }
		public TerminalNode OUT() { return getToken(SQLParser.OUT, 0); }
		public TerminalNode OVERLAY() { return getToken(SQLParser.OVERLAY, 0); }
		public TerminalNode POSITION() { return getToken(SQLParser.POSITION, 0); }
		public TerminalNode PRECISION() { return getToken(SQLParser.PRECISION, 0); }
		public TerminalNode REAL() { return getToken(SQLParser.REAL, 0); }
		public TerminalNode ROW() { return getToken(SQLParser.ROW, 0); }
		public TerminalNode SETOF() { return getToken(SQLParser.SETOF, 0); }
		public TerminalNode SMALLINT() { return getToken(SQLParser.SMALLINT, 0); }
		public TerminalNode SUBSTRING() { return getToken(SQLParser.SUBSTRING, 0); }
		public TerminalNode TIME() { return getToken(SQLParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SQLParser.TIMESTAMP, 0); }
		public TerminalNode TREAT() { return getToken(SQLParser.TREAT, 0); }
		public TerminalNode TRIM() { return getToken(SQLParser.TRIM, 0); }
		public TerminalNode VALUES() { return getToken(SQLParser.VALUES, 0); }
		public TerminalNode VARCHAR() { return getToken(SQLParser.VARCHAR, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(SQLParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCONCAT() { return getToken(SQLParser.XMLCONCAT, 0); }
		public TerminalNode XMLELEMENT() { return getToken(SQLParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(SQLParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(SQLParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(SQLParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(SQLParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(SQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(SQLParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(SQLParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(SQLParser.XMLTABLE, 0); }
		public TokensNonreservedExceptFunctionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tokensNonreservedExceptFunctionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTokensNonreservedExceptFunctionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTokensNonreservedExceptFunctionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTokensNonreservedExceptFunctionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TokensNonreservedExceptFunctionTypeContext tokensNonreservedExceptFunctionType() throws RecognitionException {
		TokensNonreservedExceptFunctionTypeContext _localctx = new TokensNonreservedExceptFunctionTypeContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_tokensNonreservedExceptFunctionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5345);
			_la = _input.LA(1);
			if ( !(((((_la - 293)) & ~0x3f) == 0 && ((1L << (_la - 293)) & ((1L << (BETWEEN - 293)) | (1L << (BIGINT - 293)) | (1L << (BIT - 293)) | (1L << (BOOLEAN - 293)) | (1L << (CHAR - 293)) | (1L << (CHARACTER - 293)) | (1L << (COALESCE - 293)) | (1L << (DEC - 293)) | (1L << (DECIMAL - 293)) | (1L << (EXISTS - 293)) | (1L << (EXTRACT - 293)) | (1L << (FLOAT - 293)) | (1L << (GREATEST - 293)) | (1L << (GROUPING - 293)) | (1L << (INOUT - 293)) | (1L << (INT - 293)) | (1L << (INTEGER - 293)) | (1L << (INTERVAL - 293)) | (1L << (LEAST - 293)) | (1L << (NATIONAL - 293)) | (1L << (NCHAR - 293)) | (1L << (NONE - 293)) | (1L << (NULLIF - 293)) | (1L << (NUMERIC - 293)) | (1L << (OUT - 293)) | (1L << (OVERLAY - 293)) | (1L << (POSITION - 293)) | (1L << (PRECISION - 293)) | (1L << (REAL - 293)) | (1L << (ROW - 293)) | (1L << (SETOF - 293)) | (1L << (SMALLINT - 293)) | (1L << (SUBSTRING - 293)) | (1L << (TIME - 293)) | (1L << (TIMESTAMP - 293)) | (1L << (TREAT - 293)) | (1L << (TRIM - 293)) | (1L << (VALUES - 293)) | (1L << (VARCHAR - 293)) | (1L << (XMLATTRIBUTES - 293)) | (1L << (XMLCONCAT - 293)) | (1L << (XMLELEMENT - 293)) | (1L << (XMLEXISTS - 293)) | (1L << (XMLFOREST - 293)) | (1L << (XMLNAMESPACES - 293)) | (1L << (XMLPARSE - 293)) | (1L << (XMLPI - 293)) | (1L << (XMLROOT - 293)) | (1L << (XMLSERIALIZE - 293)) | (1L << (XMLTABLE - 293)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TokensReservedExceptFunctionTypeContext extends ParserRuleContext {
		public TerminalNode AUTHORIZATION() { return getToken(SQLParser.AUTHORIZATION, 0); }
		public TerminalNode BINARY() { return getToken(SQLParser.BINARY, 0); }
		public TerminalNode COLLATION() { return getToken(SQLParser.COLLATION, 0); }
		public TerminalNode CONCURRENTLY() { return getToken(SQLParser.CONCURRENTLY, 0); }
		public TerminalNode CROSS() { return getToken(SQLParser.CROSS, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(SQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode FREEZE() { return getToken(SQLParser.FREEZE, 0); }
		public TerminalNode FULL() { return getToken(SQLParser.FULL, 0); }
		public TerminalNode ILIKE() { return getToken(SQLParser.ILIKE, 0); }
		public TerminalNode INNER() { return getToken(SQLParser.INNER, 0); }
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public TerminalNode ISNULL() { return getToken(SQLParser.ISNULL, 0); }
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public TerminalNode LEFT() { return getToken(SQLParser.LEFT, 0); }
		public TerminalNode LIKE() { return getToken(SQLParser.LIKE, 0); }
		public TerminalNode NATURAL() { return getToken(SQLParser.NATURAL, 0); }
		public TerminalNode NOTNULL() { return getToken(SQLParser.NOTNULL, 0); }
		public TerminalNode OUTER() { return getToken(SQLParser.OUTER, 0); }
		public TerminalNode OVERLAPS() { return getToken(SQLParser.OVERLAPS, 0); }
		public TerminalNode RIGHT() { return getToken(SQLParser.RIGHT, 0); }
		public TerminalNode SIMILAR() { return getToken(SQLParser.SIMILAR, 0); }
		public TerminalNode TABLESAMPLE() { return getToken(SQLParser.TABLESAMPLE, 0); }
		public TerminalNode VERBOSE() { return getToken(SQLParser.VERBOSE, 0); }
		public TokensReservedExceptFunctionTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tokensReservedExceptFunctionType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTokensReservedExceptFunctionType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTokensReservedExceptFunctionType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTokensReservedExceptFunctionType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TokensReservedExceptFunctionTypeContext tokensReservedExceptFunctionType() throws RecognitionException {
		TokensReservedExceptFunctionTypeContext _localctx = new TokensReservedExceptFunctionTypeContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_tokensReservedExceptFunctionType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5347);
			_la = _input.LA(1);
			if ( !(((((_la - 343)) & ~0x3f) == 0 && ((1L << (_la - 343)) & ((1L << (AUTHORIZATION - 343)) | (1L << (BINARY - 343)) | (1L << (COLLATION - 343)) | (1L << (CONCURRENTLY - 343)) | (1L << (CROSS - 343)) | (1L << (CURRENT_SCHEMA - 343)) | (1L << (FREEZE - 343)) | (1L << (FULL - 343)) | (1L << (ILIKE - 343)) | (1L << (INNER - 343)) | (1L << (IS - 343)) | (1L << (ISNULL - 343)) | (1L << (JOIN - 343)) | (1L << (LEFT - 343)) | (1L << (LIKE - 343)) | (1L << (NATURAL - 343)) | (1L << (NOTNULL - 343)) | (1L << (OUTER - 343)) | (1L << (OVERLAPS - 343)) | (1L << (RIGHT - 343)) | (1L << (SIMILAR - 343)) | (1L << (TABLESAMPLE - 343)) | (1L << (VERBOSE - 343)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TokensReservedContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode ANALYSE() { return getToken(SQLParser.ANALYSE, 0); }
		public TerminalNode ANALYZE() { return getToken(SQLParser.ANALYZE, 0); }
		public TerminalNode AND() { return getToken(SQLParser.AND, 0); }
		public TerminalNode ANY() { return getToken(SQLParser.ANY, 0); }
		public TerminalNode ARRAY() { return getToken(SQLParser.ARRAY, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode ASC() { return getToken(SQLParser.ASC, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(SQLParser.ASYMMETRIC, 0); }
		public TerminalNode BOTH() { return getToken(SQLParser.BOTH, 0); }
		public TerminalNode CASE() { return getToken(SQLParser.CASE, 0); }
		public TerminalNode CAST() { return getToken(SQLParser.CAST, 0); }
		public TerminalNode CHECK() { return getToken(SQLParser.CHECK, 0); }
		public TerminalNode COLLATE() { return getToken(SQLParser.COLLATE, 0); }
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode CREATE() { return getToken(SQLParser.CREATE, 0); }
		public TerminalNode CURRENT_CATALOG() { return getToken(SQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(SQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_ROLE() { return getToken(SQLParser.CURRENT_ROLE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SQLParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SQLParser.CURRENT_USER, 0); }
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode DEFERRABLE() { return getToken(SQLParser.DEFERRABLE, 0); }
		public TerminalNode DESC() { return getToken(SQLParser.DESC, 0); }
		public TerminalNode DISTINCT() { return getToken(SQLParser.DISTINCT, 0); }
		public TerminalNode DO() { return getToken(SQLParser.DO, 0); }
		public TerminalNode ELSE() { return getToken(SQLParser.ELSE, 0); }
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public TerminalNode EXCEPT() { return getToken(SQLParser.EXCEPT, 0); }
		public TerminalNode FALSE() { return getToken(SQLParser.FALSE, 0); }
		public TerminalNode FETCH() { return getToken(SQLParser.FETCH, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode FOREIGN() { return getToken(SQLParser.FOREIGN, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode GRANT() { return getToken(SQLParser.GRANT, 0); }
		public TerminalNode GROUP() { return getToken(SQLParser.GROUP, 0); }
		public TerminalNode HAVING() { return getToken(SQLParser.HAVING, 0); }
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode INITIALLY() { return getToken(SQLParser.INITIALLY, 0); }
		public TerminalNode INTERSECT() { return getToken(SQLParser.INTERSECT, 0); }
		public TerminalNode INTO() { return getToken(SQLParser.INTO, 0); }
		public TerminalNode LATERAL() { return getToken(SQLParser.LATERAL, 0); }
		public TerminalNode LEADING() { return getToken(SQLParser.LEADING, 0); }
		public TerminalNode LIMIT() { return getToken(SQLParser.LIMIT, 0); }
		public TerminalNode LOCALTIME() { return getToken(SQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SQLParser.LOCALTIMESTAMP, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode OFFSET() { return getToken(SQLParser.OFFSET, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode ORDER() { return getToken(SQLParser.ORDER, 0); }
		public TerminalNode PLACING() { return getToken(SQLParser.PLACING, 0); }
		public TerminalNode PRIMARY() { return getToken(SQLParser.PRIMARY, 0); }
		public TerminalNode REFERENCES() { return getToken(SQLParser.REFERENCES, 0); }
		public TerminalNode RETURNING() { return getToken(SQLParser.RETURNING, 0); }
		public TerminalNode SELECT() { return getToken(SQLParser.SELECT, 0); }
		public TerminalNode SESSION_USER() { return getToken(SQLParser.SESSION_USER, 0); }
		public TerminalNode SOME() { return getToken(SQLParser.SOME, 0); }
		public TerminalNode SYMMETRIC() { return getToken(SQLParser.SYMMETRIC, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode THEN() { return getToken(SQLParser.THEN, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode TRAILING() { return getToken(SQLParser.TRAILING, 0); }
		public TerminalNode TRUE() { return getToken(SQLParser.TRUE, 0); }
		public TerminalNode UNION() { return getToken(SQLParser.UNION, 0); }
		public TerminalNode UNIQUE() { return getToken(SQLParser.UNIQUE, 0); }
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public TerminalNode VARIADIC() { return getToken(SQLParser.VARIADIC, 0); }
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public TerminalNode WINDOW() { return getToken(SQLParser.WINDOW, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TokensReservedContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tokensReserved; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTokensReserved(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTokensReserved(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTokensReserved(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TokensReservedContext tokensReserved() throws RecognitionException {
		TokensReservedContext _localctx = new TokensReservedContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_tokensReserved);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5349);
			_la = _input.LA(1);
			if ( !(((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (ALL - 366)) | (1L << (ANALYSE - 366)) | (1L << (ANALYZE - 366)) | (1L << (AND - 366)) | (1L << (ANY - 366)) | (1L << (ARRAY - 366)) | (1L << (AS - 366)) | (1L << (ASC - 366)) | (1L << (ASYMMETRIC - 366)) | (1L << (BOTH - 366)) | (1L << (CASE - 366)) | (1L << (CAST - 366)) | (1L << (CHECK - 366)) | (1L << (COLLATE - 366)) | (1L << (COLUMN - 366)) | (1L << (CONSTRAINT - 366)) | (1L << (CREATE - 366)) | (1L << (CURRENT_CATALOG - 366)) | (1L << (CURRENT_DATE - 366)) | (1L << (CURRENT_ROLE - 366)) | (1L << (CURRENT_TIME - 366)) | (1L << (CURRENT_TIMESTAMP - 366)) | (1L << (CURRENT_USER - 366)) | (1L << (DEFAULT - 366)) | (1L << (DEFERRABLE - 366)) | (1L << (DESC - 366)) | (1L << (DISTINCT - 366)) | (1L << (DO - 366)) | (1L << (ELSE - 366)) | (1L << (END - 366)) | (1L << (EXCEPT - 366)) | (1L << (FALSE - 366)) | (1L << (FETCH - 366)) | (1L << (FOR - 366)) | (1L << (FOREIGN - 366)) | (1L << (FROM - 366)) | (1L << (GRANT - 366)) | (1L << (GROUP - 366)) | (1L << (HAVING - 366)) | (1L << (IN - 366)) | (1L << (INITIALLY - 366)) | (1L << (INTERSECT - 366)) | (1L << (INTO - 366)) | (1L << (LATERAL - 366)) | (1L << (LEADING - 366)) | (1L << (LIMIT - 366)) | (1L << (LOCALTIME - 366)) | (1L << (LOCALTIMESTAMP - 366)) | (1L << (NOT - 366)) | (1L << (NULL - 366)) | (1L << (OFFSET - 366)) | (1L << (ON - 366)) | (1L << (ONLY - 366)) | (1L << (OR - 366)) | (1L << (ORDER - 366)) | (1L << (PLACING - 366)) | (1L << (PRIMARY - 366)) | (1L << (REFERENCES - 366)) | (1L << (RETURNING - 366)) | (1L << (SELECT - 366)) | (1L << (SESSION_USER - 366)) | (1L << (SOME - 366)) | (1L << (SYMMETRIC - 366)) | (1L << (TABLE - 366)))) != 0) || ((((_la - 430)) & ~0x3f) == 0 && ((1L << (_la - 430)) & ((1L << (THEN - 430)) | (1L << (TO - 430)) | (1L << (TRAILING - 430)) | (1L << (TRUE - 430)) | (1L << (UNION - 430)) | (1L << (UNIQUE - 430)) | (1L << (USER - 430)) | (1L << (USING - 430)) | (1L << (VARIADIC - 430)) | (1L << (WHEN - 430)) | (1L << (WHERE - 430)) | (1L << (WINDOW - 430)) | (1L << (WITH - 430)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TokensNonkeywordContext extends ParserRuleContext {
		public TerminalNode ALIGNMENT() { return getToken(SQLParser.ALIGNMENT, 0); }
		public TerminalNode BASETYPE() { return getToken(SQLParser.BASETYPE, 0); }
		public TerminalNode BUFFERS() { return getToken(SQLParser.BUFFERS, 0); }
		public TerminalNode BYPASSRLS() { return getToken(SQLParser.BYPASSRLS, 0); }
		public TerminalNode CANONICAL() { return getToken(SQLParser.CANONICAL, 0); }
		public TerminalNode CATEGORY() { return getToken(SQLParser.CATEGORY, 0); }
		public TerminalNode COLLATABLE() { return getToken(SQLParser.COLLATABLE, 0); }
		public TerminalNode COMBINEFUNC() { return getToken(SQLParser.COMBINEFUNC, 0); }
		public TerminalNode COMMUTATOR() { return getToken(SQLParser.COMMUTATOR, 0); }
		public TerminalNode CONNECT() { return getToken(SQLParser.CONNECT, 0); }
		public TerminalNode COSTS() { return getToken(SQLParser.COSTS, 0); }
		public TerminalNode CREATEDB() { return getToken(SQLParser.CREATEDB, 0); }
		public TerminalNode CREATEROLE() { return getToken(SQLParser.CREATEROLE, 0); }
		public TerminalNode DESERIALFUNC() { return getToken(SQLParser.DESERIALFUNC, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(SQLParser.DETERMINISTIC, 0); }
		public TerminalNode DISABLE_PAGE_SKIPPING() { return getToken(SQLParser.DISABLE_PAGE_SKIPPING, 0); }
		public TerminalNode ELEMENT() { return getToken(SQLParser.ELEMENT, 0); }
		public TerminalNode EXTENDED() { return getToken(SQLParser.EXTENDED, 0); }
		public TerminalNode FINALFUNC() { return getToken(SQLParser.FINALFUNC, 0); }
		public TerminalNode FINALFUNC_EXTRA() { return getToken(SQLParser.FINALFUNC_EXTRA, 0); }
		public TerminalNode FINALFUNC_MODIFY() { return getToken(SQLParser.FINALFUNC_MODIFY, 0); }
		public TerminalNode FORCE_NOT_NULL() { return getToken(SQLParser.FORCE_NOT_NULL, 0); }
		public TerminalNode FORCE_NULL() { return getToken(SQLParser.FORCE_NULL, 0); }
		public TerminalNode FORCE_QUOTE() { return getToken(SQLParser.FORCE_QUOTE, 0); }
		public TerminalNode FORMAT() { return getToken(SQLParser.FORMAT, 0); }
		public TerminalNode GETTOKEN() { return getToken(SQLParser.GETTOKEN, 0); }
		public TerminalNode HASH() { return getToken(SQLParser.HASH, 0); }
		public TerminalNode HASHES() { return getToken(SQLParser.HASHES, 0); }
		public TerminalNode HEADLINE() { return getToken(SQLParser.HEADLINE, 0); }
		public TerminalNode HYPOTHETICAL() { return getToken(SQLParser.HYPOTHETICAL, 0); }
		public TerminalNode INDEX_CLEANUP() { return getToken(SQLParser.INDEX_CLEANUP, 0); }
		public TerminalNode INIT() { return getToken(SQLParser.INIT, 0); }
		public TerminalNode INITCOND() { return getToken(SQLParser.INITCOND, 0); }
		public TerminalNode INTERNALLENGTH() { return getToken(SQLParser.INTERNALLENGTH, 0); }
		public TerminalNode JSON() { return getToken(SQLParser.JSON, 0); }
		public TerminalNode LC_COLLATE() { return getToken(SQLParser.LC_COLLATE, 0); }
		public TerminalNode LC_CTYPE() { return getToken(SQLParser.LC_CTYPE, 0); }
		public TerminalNode LEFTARG() { return getToken(SQLParser.LEFTARG, 0); }
		public TerminalNode LEXIZE() { return getToken(SQLParser.LEXIZE, 0); }
		public TerminalNode LEXTYPES() { return getToken(SQLParser.LEXTYPES, 0); }
		public TerminalNode LIST() { return getToken(SQLParser.LIST, 0); }
		public TerminalNode LOCALE() { return getToken(SQLParser.LOCALE, 0); }
		public TerminalNode LOGIN() { return getToken(SQLParser.LOGIN, 0); }
		public TerminalNode MAIN() { return getToken(SQLParser.MAIN, 0); }
		public TerminalNode MERGES() { return getToken(SQLParser.MERGES, 0); }
		public TerminalNode MFINALFUNC() { return getToken(SQLParser.MFINALFUNC, 0); }
		public TerminalNode MFINALFUNC_EXTRA() { return getToken(SQLParser.MFINALFUNC_EXTRA, 0); }
		public TerminalNode MFINALFUNC_MODIFY() { return getToken(SQLParser.MFINALFUNC_MODIFY, 0); }
		public TerminalNode MINITCOND() { return getToken(SQLParser.MINITCOND, 0); }
		public TerminalNode MINVFUNC() { return getToken(SQLParser.MINVFUNC, 0); }
		public TerminalNode MODULUS() { return getToken(SQLParser.MODULUS, 0); }
		public TerminalNode MSFUNC() { return getToken(SQLParser.MSFUNC, 0); }
		public TerminalNode MSSPACE() { return getToken(SQLParser.MSSPACE, 0); }
		public TerminalNode MSTYPE() { return getToken(SQLParser.MSTYPE, 0); }
		public TerminalNode NEGATOR() { return getToken(SQLParser.NEGATOR, 0); }
		public TerminalNode NOBYPASSRLS() { return getToken(SQLParser.NOBYPASSRLS, 0); }
		public TerminalNode NOCREATEDB() { return getToken(SQLParser.NOCREATEDB, 0); }
		public TerminalNode NOCREATEROLE() { return getToken(SQLParser.NOCREATEROLE, 0); }
		public TerminalNode NOINHERIT() { return getToken(SQLParser.NOINHERIT, 0); }
		public TerminalNode NOLOGIN() { return getToken(SQLParser.NOLOGIN, 0); }
		public TerminalNode NOREPLICATION() { return getToken(SQLParser.NOREPLICATION, 0); }
		public TerminalNode NOSUPERUSER() { return getToken(SQLParser.NOSUPERUSER, 0); }
		public TerminalNode OUTPUT() { return getToken(SQLParser.OUTPUT, 0); }
		public TerminalNode PASSEDBYVALUE() { return getToken(SQLParser.PASSEDBYVALUE, 0); }
		public TerminalNode PATH() { return getToken(SQLParser.PATH, 0); }
		public TerminalNode PERMISSIVE() { return getToken(SQLParser.PERMISSIVE, 0); }
		public TerminalNode PLAIN() { return getToken(SQLParser.PLAIN, 0); }
		public TerminalNode PREFERRED() { return getToken(SQLParser.PREFERRED, 0); }
		public TerminalNode PROVIDER() { return getToken(SQLParser.PROVIDER, 0); }
		public TerminalNode READ_ONLY() { return getToken(SQLParser.READ_ONLY, 0); }
		public TerminalNode READ_WRITE() { return getToken(SQLParser.READ_WRITE, 0); }
		public TerminalNode RECEIVE() { return getToken(SQLParser.RECEIVE, 0); }
		public TerminalNode REPLICATION() { return getToken(SQLParser.REPLICATION, 0); }
		public TerminalNode REMAINDER() { return getToken(SQLParser.REMAINDER, 0); }
		public TerminalNode RESTRICTED() { return getToken(SQLParser.RESTRICTED, 0); }
		public TerminalNode RESTRICTIVE() { return getToken(SQLParser.RESTRICTIVE, 0); }
		public TerminalNode RIGHTARG() { return getToken(SQLParser.RIGHTARG, 0); }
		public TerminalNode SAFE() { return getToken(SQLParser.SAFE, 0); }
		public TerminalNode SEND() { return getToken(SQLParser.SEND, 0); }
		public TerminalNode SERIALFUNC() { return getToken(SQLParser.SERIALFUNC, 0); }
		public TerminalNode SETTINGS() { return getToken(SQLParser.SETTINGS, 0); }
		public TerminalNode SFUNC() { return getToken(SQLParser.SFUNC, 0); }
		public TerminalNode SHAREABLE() { return getToken(SQLParser.SHAREABLE, 0); }
		public TerminalNode SKIP_LOCKED() { return getToken(SQLParser.SKIP_LOCKED, 0); }
		public TerminalNode SORTOP() { return getToken(SQLParser.SORTOP, 0); }
		public TerminalNode SSPACE() { return getToken(SQLParser.SSPACE, 0); }
		public TerminalNode STYPE() { return getToken(SQLParser.STYPE, 0); }
		public TerminalNode SUBTYPE() { return getToken(SQLParser.SUBTYPE, 0); }
		public TerminalNode SUBTYPE_DIFF() { return getToken(SQLParser.SUBTYPE_DIFF, 0); }
		public TerminalNode SUBTYPE_OPCLASS() { return getToken(SQLParser.SUBTYPE_OPCLASS, 0); }
		public TerminalNode SUMMARY() { return getToken(SQLParser.SUMMARY, 0); }
		public TerminalNode SUPERUSER() { return getToken(SQLParser.SUPERUSER, 0); }
		public TerminalNode TIMING() { return getToken(SQLParser.TIMING, 0); }
		public TerminalNode TYPMOD_IN() { return getToken(SQLParser.TYPMOD_IN, 0); }
		public TerminalNode TYPMOD_OUT() { return getToken(SQLParser.TYPMOD_OUT, 0); }
		public TerminalNode UNSAFE() { return getToken(SQLParser.UNSAFE, 0); }
		public TerminalNode USAGE() { return getToken(SQLParser.USAGE, 0); }
		public TerminalNode VARIABLE() { return getToken(SQLParser.VARIABLE, 0); }
		public TerminalNode YAML() { return getToken(SQLParser.YAML, 0); }
		public TerminalNode ALIAS() { return getToken(SQLParser.ALIAS, 0); }
		public TerminalNode ASSERT() { return getToken(SQLParser.ASSERT, 0); }
		public TerminalNode CONSTANT() { return getToken(SQLParser.CONSTANT, 0); }
		public TerminalNode DATATYPE() { return getToken(SQLParser.DATATYPE, 0); }
		public TerminalNode DEBUG() { return getToken(SQLParser.DEBUG, 0); }
		public TerminalNode DETAIL() { return getToken(SQLParser.DETAIL, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(SQLParser.DIAGNOSTICS, 0); }
		public TerminalNode ELSEIF() { return getToken(SQLParser.ELSEIF, 0); }
		public TerminalNode ELSIF() { return getToken(SQLParser.ELSIF, 0); }
		public TerminalNode ERRCODE() { return getToken(SQLParser.ERRCODE, 0); }
		public TerminalNode EXIT() { return getToken(SQLParser.EXIT, 0); }
		public TerminalNode EXCEPTION() { return getToken(SQLParser.EXCEPTION, 0); }
		public TerminalNode FOREACH() { return getToken(SQLParser.FOREACH, 0); }
		public TerminalNode GET() { return getToken(SQLParser.GET, 0); }
		public TerminalNode HINT() { return getToken(SQLParser.HINT, 0); }
		public TerminalNode INFO() { return getToken(SQLParser.INFO, 0); }
		public TerminalNode LOG() { return getToken(SQLParser.LOG, 0); }
		public TerminalNode LOOP() { return getToken(SQLParser.LOOP, 0); }
		public TerminalNode MESSAGE() { return getToken(SQLParser.MESSAGE, 0); }
		public TerminalNode NOTICE() { return getToken(SQLParser.NOTICE, 0); }
		public TerminalNode OPEN() { return getToken(SQLParser.OPEN, 0); }
		public TerminalNode PERFORM() { return getToken(SQLParser.PERFORM, 0); }
		public TerminalNode QUERY() { return getToken(SQLParser.QUERY, 0); }
		public TerminalNode RAISE() { return getToken(SQLParser.RAISE, 0); }
		public TerminalNode RECORD() { return getToken(SQLParser.RECORD, 0); }
		public TerminalNode RETURN() { return getToken(SQLParser.RETURN, 0); }
		public TerminalNode REVERSE() { return getToken(SQLParser.REVERSE, 0); }
		public TerminalNode ROWTYPE() { return getToken(SQLParser.ROWTYPE, 0); }
		public TerminalNode SLICE() { return getToken(SQLParser.SLICE, 0); }
		public TerminalNode SQLSTATE() { return getToken(SQLParser.SQLSTATE, 0); }
		public TerminalNode STACKED() { return getToken(SQLParser.STACKED, 0); }
		public TerminalNode WARNING() { return getToken(SQLParser.WARNING, 0); }
		public TerminalNode WHILE() { return getToken(SQLParser.WHILE, 0); }
		public TokensNonkeywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tokensNonkeyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTokensNonkeyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTokensNonkeyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTokensNonkeyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TokensNonkeywordContext tokensNonkeyword() throws RecognitionException {
		TokensNonkeywordContext _localctx = new TokensNonkeywordContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_tokensNonkeyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5351);
			_la = _input.LA(1);
			if ( !(((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaQualifiedNameNontypeContext extends ParserRuleContext {
		public IdentifierContext schema;
		public IdentifierNontypeContext identifierNontype() {
			return getRuleContext(IdentifierNontypeContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public SchemaQualifiedNameNontypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaQualifiedNameNontype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchemaQualifiedNameNontype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchemaQualifiedNameNontype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSchemaQualifiedNameNontype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaQualifiedNameNontypeContext schemaQualifiedNameNontype() throws RecognitionException {
		SchemaQualifiedNameNontypeContext _localctx = new SchemaQualifiedNameNontypeContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_schemaQualifiedNameNontype);
		try {
			setState(5358);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,662,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5353);
				identifierNontype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5354);
				((SchemaQualifiedNameNontypeContext)_localctx).schema = identifier();
				setState(5355);
				match(DOT);
				setState(5356);
				identifierNontype();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeListContext extends ParserRuleContext {
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTypeList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTypeList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTypeList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeListContext typeList() throws RecognitionException {
		TypeListContext _localctx = new TypeListContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_typeList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5360);
			dataType();
			setState(5365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5361);
				match(COMMA);
				setState(5362);
				dataType();
				}
				}
				setState(5367);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public PredefinedTypeContext predefinedType() {
			return getRuleContext(PredefinedTypeContext.class,0);
		}
		public TerminalNode SETOF() { return getToken(SQLParser.SETOF, 0); }
		public TerminalNode ARRAY() { return getToken(SQLParser.ARRAY, 0); }
		public List<ArrayTypeContext> arrayType() {
			return getRuleContexts(ArrayTypeContext.class);
		}
		public ArrayTypeContext arrayType(int i) {
			return getRuleContext(ArrayTypeContext.class,i);
		}
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_dataType);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5369);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				{
				setState(5368);
				match(SETOF);
				}
				break;
			}
			setState(5371);
			predefinedType();
			setState(5381);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,667,_ctx) ) {
			case 1:
				{
				setState(5372);
				match(ARRAY);
				setState(5374);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,665,_ctx) ) {
				case 1:
					{
					setState(5373);
					arrayType();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5377); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(5376);
						arrayType();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5379); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,666,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayTypeContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACKET() { return getToken(SQLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(SQLParser.RIGHT_BRACKET, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public ArrayTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterArrayType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitArrayType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitArrayType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayTypeContext arrayType() throws RecognitionException {
		ArrayTypeContext _localctx = new ArrayTypeContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_arrayType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5383);
			match(LEFT_BRACKET);
			setState(5385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NUMBER_LITERAL) {
				{
				setState(5384);
				match(NUMBER_LITERAL);
				}
			}

			setState(5387);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PredefinedTypeContext extends ParserRuleContext {
		public TerminalNode BIGINT() { return getToken(SQLParser.BIGINT, 0); }
		public TerminalNode BIT() { return getToken(SQLParser.BIT, 0); }
		public TerminalNode VARYING() { return getToken(SQLParser.VARYING, 0); }
		public TypeLengthContext typeLength() {
			return getRuleContext(TypeLengthContext.class,0);
		}
		public TerminalNode BOOLEAN() { return getToken(SQLParser.BOOLEAN, 0); }
		public TerminalNode DEC() { return getToken(SQLParser.DEC, 0); }
		public PrecisionParamContext precisionParam() {
			return getRuleContext(PrecisionParamContext.class,0);
		}
		public TerminalNode DECIMAL() { return getToken(SQLParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(SQLParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(SQLParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(SQLParser.FLOAT, 0); }
		public TerminalNode INT() { return getToken(SQLParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(SQLParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(SQLParser.INTERVAL, 0); }
		public IntervalFieldContext intervalField() {
			return getRuleContext(IntervalFieldContext.class,0);
		}
		public TerminalNode CHARACTER() { return getToken(SQLParser.CHARACTER, 0); }
		public TerminalNode CHAR() { return getToken(SQLParser.CHAR, 0); }
		public TerminalNode NATIONAL() { return getToken(SQLParser.NATIONAL, 0); }
		public TerminalNode NCHAR() { return getToken(SQLParser.NCHAR, 0); }
		public TerminalNode NUMERIC() { return getToken(SQLParser.NUMERIC, 0); }
		public TerminalNode REAL() { return getToken(SQLParser.REAL, 0); }
		public TerminalNode SMALLINT() { return getToken(SQLParser.SMALLINT, 0); }
		public List<TerminalNode> TIME() { return getTokens(SQLParser.TIME); }
		public TerminalNode TIME(int i) {
			return getToken(SQLParser.TIME, i);
		}
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode WITHOUT() { return getToken(SQLParser.WITHOUT, 0); }
		public TerminalNode TIMESTAMP() { return getToken(SQLParser.TIMESTAMP, 0); }
		public TerminalNode VARCHAR() { return getToken(SQLParser.VARCHAR, 0); }
		public SchemaQualifiedNameNontypeContext schemaQualifiedNameNontype() {
			return getRuleContext(SchemaQualifiedNameNontypeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predefinedType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPredefinedType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPredefinedType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPredefinedType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredefinedTypeContext predefinedType() throws RecognitionException {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_predefinedType);
		int _la;
		try {
			setState(5480);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,689,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5389);
				match(BIGINT);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5390);
				match(BIT);
				setState(5392);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
				case 1:
					{
					setState(5391);
					match(VARYING);
					}
					break;
				}
				setState(5395);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,670,_ctx) ) {
				case 1:
					{
					setState(5394);
					typeLength();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5397);
				match(BOOLEAN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5398);
				match(DEC);
				setState(5400);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,671,_ctx) ) {
				case 1:
					{
					setState(5399);
					precisionParam();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5402);
				match(DECIMAL);
				setState(5404);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,672,_ctx) ) {
				case 1:
					{
					setState(5403);
					precisionParam();
					}
					break;
				}
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5406);
				match(DOUBLE);
				setState(5407);
				match(PRECISION);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5408);
				match(FLOAT);
				setState(5410);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,673,_ctx) ) {
				case 1:
					{
					setState(5409);
					precisionParam();
					}
					break;
				}
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5412);
				match(INT);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5413);
				match(INTEGER);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5414);
				match(INTERVAL);
				setState(5416);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,674,_ctx) ) {
				case 1:
					{
					setState(5415);
					intervalField();
					}
					break;
				}
				setState(5419);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,675,_ctx) ) {
				case 1:
					{
					setState(5418);
					typeLength();
					}
					break;
				}
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5422);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NATIONAL) {
					{
					setState(5421);
					match(NATIONAL);
					}
				}

				setState(5424);
				_la = _input.LA(1);
				if ( !(_la==CHAR || _la==CHARACTER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5426);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
				case 1:
					{
					setState(5425);
					match(VARYING);
					}
					break;
				}
				setState(5429);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
				case 1:
					{
					setState(5428);
					typeLength();
					}
					break;
				}
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5431);
				match(NCHAR);
				setState(5433);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
				case 1:
					{
					setState(5432);
					match(VARYING);
					}
					break;
				}
				setState(5436);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
				case 1:
					{
					setState(5435);
					typeLength();
					}
					break;
				}
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5438);
				match(NUMERIC);
				setState(5440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,681,_ctx) ) {
				case 1:
					{
					setState(5439);
					precisionParam();
					}
					break;
				}
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(5442);
				match(REAL);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(5443);
				match(SMALLINT);
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(5444);
				match(TIME);
				setState(5446);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
				case 1:
					{
					setState(5445);
					typeLength();
					}
					break;
				}
				setState(5451);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
				case 1:
					{
					setState(5448);
					_la = _input.LA(1);
					if ( !(_la==WITHOUT || _la==WITH) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5449);
					match(TIME);
					setState(5450);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(5453);
				match(TIMESTAMP);
				setState(5455);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,684,_ctx) ) {
				case 1:
					{
					setState(5454);
					typeLength();
					}
					break;
				}
				setState(5460);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
				case 1:
					{
					setState(5457);
					_la = _input.LA(1);
					if ( !(_la==WITHOUT || _la==WITH) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(5458);
					match(TIME);
					setState(5459);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(5462);
				match(VARCHAR);
				setState(5464);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,686,_ctx) ) {
				case 1:
					{
					setState(5463);
					typeLength();
					}
					break;
				}
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(5466);
				schemaQualifiedNameNontype();
				setState(5478);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,688,_ctx) ) {
				case 1:
					{
					setState(5467);
					match(LEFT_PAREN);
					setState(5468);
					vex(0);
					setState(5473);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5469);
						match(COMMA);
						setState(5470);
						vex(0);
						}
						}
						setState(5475);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5476);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalFieldContext extends ParserRuleContext {
		public TerminalNode YEAR() { return getToken(SQLParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(SQLParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(SQLParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(SQLParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(SQLParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(SQLParser.SECOND, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public IntervalFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIntervalField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIntervalField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIntervalField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalFieldContext intervalField() throws RecognitionException {
		IntervalFieldContext _localctx = new IntervalFieldContext(_ctx, getState());
		enterRule(_localctx, 552, RULE_intervalField);
		try {
			setState(5509);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,690,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5482);
				match(YEAR);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5483);
				match(MONTH);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5484);
				match(DAY);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5485);
				match(HOUR);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5486);
				match(MINUTE);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5487);
				match(SECOND);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5488);
				match(YEAR);
				setState(5489);
				match(TO);
				setState(5490);
				match(MONTH);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5491);
				match(DAY);
				setState(5492);
				match(TO);
				setState(5493);
				match(HOUR);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5494);
				match(DAY);
				setState(5495);
				match(TO);
				setState(5496);
				match(MINUTE);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5497);
				match(DAY);
				setState(5498);
				match(TO);
				setState(5499);
				match(SECOND);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5500);
				match(HOUR);
				setState(5501);
				match(TO);
				setState(5502);
				match(MINUTE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5503);
				match(HOUR);
				setState(5504);
				match(TO);
				setState(5505);
				match(SECOND);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(5506);
				match(MINUTE);
				setState(5507);
				match(TO);
				setState(5508);
				match(SECOND);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeLengthContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TypeLengthContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeLength; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTypeLength(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTypeLength(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTypeLength(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeLengthContext typeLength() throws RecognitionException {
		TypeLengthContext _localctx = new TypeLengthContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_typeLength);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5511);
			match(LEFT_PAREN);
			setState(5512);
			match(NUMBER_LITERAL);
			setState(5513);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrecisionParamContext extends ParserRuleContext {
		public Token precision;
		public Token scale;
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> NUMBER_LITERAL() { return getTokens(SQLParser.NUMBER_LITERAL); }
		public TerminalNode NUMBER_LITERAL(int i) {
			return getToken(SQLParser.NUMBER_LITERAL, i);
		}
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public PrecisionParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precisionParam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPrecisionParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPrecisionParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPrecisionParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrecisionParamContext precisionParam() throws RecognitionException {
		PrecisionParamContext _localctx = new PrecisionParamContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_precisionParam);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5515);
			match(LEFT_PAREN);
			setState(5516);
			((PrecisionParamContext)_localctx).precision = match(NUMBER_LITERAL);
			setState(5519);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5517);
				match(COMMA);
				setState(5518);
				((PrecisionParamContext)_localctx).scale = match(NUMBER_LITERAL);
				}
			}

			setState(5521);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VexContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public IndirectionListContext indirectionList() {
			return getRuleContext(IndirectionListContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode PLUS() { return getToken(SQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SQLParser.MINUS, 0); }
		public OpContext op() {
			return getRuleContext(OpContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public ValueExpressionPrimaryContext valueExpressionPrimary() {
			return getRuleContext(ValueExpressionPrimaryContext.class,0);
		}
		public TerminalNode PLACEHOLDER() { return getToken(SQLParser.PLACEHOLDER, 0); }
		public TerminalNode AT() { return getToken(SQLParser.AT, 0); }
		public TerminalNode TIME() { return getToken(SQLParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(SQLParser.ZONE, 0); }
		public TerminalNode EXP() { return getToken(SQLParser.EXP, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public TerminalNode DIVIDE() { return getToken(SQLParser.DIVIDE, 0); }
		public TerminalNode MODULAR() { return getToken(SQLParser.MODULAR, 0); }
		public TerminalNode BETWEEN() { return getToken(SQLParser.BETWEEN, 0); }
		public VexBContext vexB() {
			return getRuleContext(VexBContext.class,0);
		}
		public TerminalNode AND() { return getToken(SQLParser.AND, 0); }
		public TerminalNode ASYMMETRIC() { return getToken(SQLParser.ASYMMETRIC, 0); }
		public TerminalNode SYMMETRIC() { return getToken(SQLParser.SYMMETRIC, 0); }
		public TerminalNode LIKE() { return getToken(SQLParser.LIKE, 0); }
		public TerminalNode ILIKE() { return getToken(SQLParser.ILIKE, 0); }
		public TerminalNode SIMILAR() { return getToken(SQLParser.SIMILAR, 0); }
		public TerminalNode TO() { return getToken(SQLParser.TO, 0); }
		public TerminalNode ESCAPE() { return getToken(SQLParser.ESCAPE, 0); }
		public TerminalNode LTH() { return getToken(SQLParser.LTH, 0); }
		public TerminalNode GTH() { return getToken(SQLParser.GTH, 0); }
		public TerminalNode LEQ() { return getToken(SQLParser.LEQ, 0); }
		public TerminalNode GEQ() { return getToken(SQLParser.GEQ, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(SQLParser.NOT_EQUAL, 0); }
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(SQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode OR() { return getToken(SQLParser.OR, 0); }
		public TerminalNode CAST_EXPRESSION() { return getToken(SQLParser.CAST_EXPRESSION, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CollateIdentifierContext collateIdentifier() {
			return getRuleContext(CollateIdentifierContext.class,0);
		}
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public SelectStmtNoParensContext selectStmtNoParens() {
			return getRuleContext(SelectStmtNoParensContext.class,0);
		}
		public TruthValueContext truthValue() {
			return getRuleContext(TruthValueContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode DOCUMENT() { return getToken(SQLParser.DOCUMENT, 0); }
		public TerminalNode UNKNOWN() { return getToken(SQLParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public TerminalNode ISNULL() { return getToken(SQLParser.ISNULL, 0); }
		public TerminalNode NOTNULL() { return getToken(SQLParser.NOTNULL, 0); }
		public VexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterVex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitVex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitVex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VexContext vex() throws RecognitionException {
		return vex(0);
	}

	private VexContext vex(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		VexContext _localctx = new VexContext(_ctx, _parentState);
		VexContext _prevctx = _localctx;
		int _startState = 558;
		enterRecursionRule(_localctx, 558, RULE_vex, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5549);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,694,_ctx) ) {
			case 1:
				{
				setState(5524);
				match(LEFT_PAREN);
				setState(5525);
				vex(0);
				setState(5526);
				match(RIGHT_PAREN);
				setState(5528);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,692,_ctx) ) {
				case 1:
					{
					setState(5527);
					indirectionList();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5530);
				match(LEFT_PAREN);
				setState(5531);
				vex(0);
				setState(5534); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5532);
					match(COMMA);
					setState(5533);
					vex(0);
					}
					}
					setState(5536); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(5538);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(5540);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5541);
				vex(25);
				}
				break;
			case 4:
				{
				setState(5542);
				op();
				setState(5543);
				vex(19);
				}
				break;
			case 5:
				{
				setState(5545);
				match(NOT);
				setState(5546);
				vex(5);
				}
				break;
			case 6:
				{
				setState(5547);
				valueExpressionPrimary();
				}
				break;
			case 7:
				{
				setState(5548);
				match(PLACEHOLDER);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5686);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,711,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5684);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,710,_ctx) ) {
					case 1:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5551);
						if (!(precpred(_ctx, 24))) throw new FailedPredicateException(this, "precpred(_ctx, 24)");
						setState(5552);
						match(AT);
						setState(5553);
						match(TIME);
						setState(5554);
						match(ZONE);
						setState(5555);
						vex(25);
						}
						break;
					case 2:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5556);
						if (!(precpred(_ctx, 23))) throw new FailedPredicateException(this, "precpred(_ctx, 23)");
						setState(5557);
						match(EXP);
						setState(5558);
						vex(24);
						}
						break;
					case 3:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5559);
						if (!(precpred(_ctx, 22))) throw new FailedPredicateException(this, "precpred(_ctx, 22)");
						setState(5560);
						_la = _input.LA(1);
						if ( !(((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (MULTIPLY - 589)) | (1L << (DIVIDE - 589)) | (1L << (MODULAR - 589)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5561);
						vex(23);
						}
						break;
					case 4:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5562);
						if (!(precpred(_ctx, 21))) throw new FailedPredicateException(this, "precpred(_ctx, 21)");
						setState(5563);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5564);
						vex(22);
						}
						break;
					case 5:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5565);
						if (!(precpred(_ctx, 20))) throw new FailedPredicateException(this, "precpred(_ctx, 20)");
						setState(5566);
						op();
						setState(5567);
						vex(21);
						}
						break;
					case 6:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5569);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(5571);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5570);
							match(NOT);
							}
						}

						setState(5573);
						match(BETWEEN);
						setState(5575);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==ASYMMETRIC || _la==SYMMETRIC) {
							{
							setState(5574);
							_la = _input.LA(1);
							if ( !(_la==ASYMMETRIC || _la==SYMMETRIC) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							}
						}

						setState(5577);
						vexB(0);
						setState(5578);
						match(AND);
						setState(5579);
						vex(17);
						}
						break;
					case 7:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5581);
						if (!(precpred(_ctx, 15))) throw new FailedPredicateException(this, "precpred(_ctx, 15)");
						setState(5583);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5582);
							match(NOT);
							}
						}

						setState(5589);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case LIKE:
							{
							setState(5585);
							match(LIKE);
							}
							break;
						case ILIKE:
							{
							setState(5586);
							match(ILIKE);
							}
							break;
						case SIMILAR:
							{
							setState(5587);
							match(SIMILAR);
							setState(5588);
							match(TO);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5591);
						vex(16);
						}
						break;
					case 8:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5592);
						if (!(precpred(_ctx, 14))) throw new FailedPredicateException(this, "precpred(_ctx, 14)");
						setState(5594);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5593);
							match(NOT);
							}
						}

						setState(5600);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case LIKE:
							{
							setState(5596);
							match(LIKE);
							}
							break;
						case ILIKE:
							{
							setState(5597);
							match(ILIKE);
							}
							break;
						case SIMILAR:
							{
							setState(5598);
							match(SIMILAR);
							setState(5599);
							match(TO);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						setState(5602);
						vex(0);
						setState(5603);
						match(ESCAPE);
						setState(5604);
						vex(15);
						}
						break;
					case 9:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5606);
						if (!(precpred(_ctx, 13))) throw new FailedPredicateException(this, "precpred(_ctx, 13)");
						setState(5607);
						_la = _input.LA(1);
						if ( !(((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (EQUAL - 576)) | (1L << (NOT_EQUAL - 576)) | (1L << (LTH - 576)) | (1L << (LEQ - 576)) | (1L << (GTH - 576)) | (1L << (GEQ - 576)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5608);
						vex(14);
						}
						break;
					case 10:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5609);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(5610);
						match(IS);
						setState(5612);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5611);
							match(NOT);
							}
						}

						setState(5614);
						match(DISTINCT);
						setState(5615);
						match(FROM);
						setState(5616);
						vex(12);
						}
						break;
					case 11:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5617);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5618);
						match(AND);
						setState(5619);
						vex(5);
						}
						break;
					case 12:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5620);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5621);
						match(OR);
						setState(5622);
						vex(4);
						}
						break;
					case 13:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5623);
						if (!(precpred(_ctx, 29))) throw new FailedPredicateException(this, "precpred(_ctx, 29)");
						setState(5624);
						match(CAST_EXPRESSION);
						setState(5625);
						dataType();
						}
						break;
					case 14:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5626);
						if (!(precpred(_ctx, 26))) throw new FailedPredicateException(this, "precpred(_ctx, 26)");
						setState(5627);
						collateIdentifier();
						}
						break;
					case 15:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5628);
						if (!(precpred(_ctx, 18))) throw new FailedPredicateException(this, "precpred(_ctx, 18)");
						setState(5629);
						op();
						}
						break;
					case 16:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5630);
						if (!(precpred(_ctx, 17))) throw new FailedPredicateException(this, "precpred(_ctx, 17)");
						setState(5632);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5631);
							match(NOT);
							}
						}

						setState(5634);
						match(IN);
						setState(5635);
						match(LEFT_PAREN);
						setState(5645);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,704,_ctx) ) {
						case 1:
							{
							setState(5636);
							selectStmtNoParens();
							}
							break;
						case 2:
							{
							setState(5637);
							vex(0);
							setState(5642);
							_errHandler.sync(this);
							_la = _input.LA(1);
							while (_la==COMMA) {
								{
								{
								setState(5638);
								match(COMMA);
								setState(5639);
								vex(0);
								}
								}
								setState(5644);
								_errHandler.sync(this);
								_la = _input.LA(1);
							}
							}
							break;
						}
						setState(5647);
						match(RIGHT_PAREN);
						}
						break;
					case 17:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5649);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(5650);
						match(IS);
						setState(5652);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5651);
							match(NOT);
							}
						}

						setState(5656);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case FALSE:
						case ON:
						case TRUE:
							{
							setState(5654);
							truthValue();
							}
							break;
						case NULL:
							{
							setState(5655);
							match(NULL);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						break;
					case 18:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5658);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(5659);
						match(IS);
						setState(5661);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5660);
							match(NOT);
							}
						}

						setState(5663);
						match(DOCUMENT);
						}
						break;
					case 19:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5664);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(5665);
						match(IS);
						setState(5667);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5666);
							match(NOT);
							}
						}

						setState(5669);
						match(UNKNOWN);
						}
						break;
					case 20:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5670);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(5671);
						match(IS);
						setState(5673);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5672);
							match(NOT);
							}
						}

						setState(5675);
						match(OF);
						setState(5676);
						match(LEFT_PAREN);
						setState(5677);
						typeList();
						setState(5678);
						match(RIGHT_PAREN);
						}
						break;
					case 21:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5680);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5681);
						match(ISNULL);
						}
						break;
					case 22:
						{
						_localctx = new VexContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vex);
						setState(5682);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5683);
						match(NOTNULL);
						}
						break;
					}
					} 
				}
				setState(5688);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,711,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class VexBContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public IndirectionListContext indirectionList() {
			return getRuleContext(IndirectionListContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<VexBContext> vexB() {
			return getRuleContexts(VexBContext.class);
		}
		public VexBContext vexB(int i) {
			return getRuleContext(VexBContext.class,i);
		}
		public TerminalNode PLUS() { return getToken(SQLParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(SQLParser.MINUS, 0); }
		public OpContext op() {
			return getRuleContext(OpContext.class,0);
		}
		public ValueExpressionPrimaryContext valueExpressionPrimary() {
			return getRuleContext(ValueExpressionPrimaryContext.class,0);
		}
		public TerminalNode EXP() { return getToken(SQLParser.EXP, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public TerminalNode DIVIDE() { return getToken(SQLParser.DIVIDE, 0); }
		public TerminalNode MODULAR() { return getToken(SQLParser.MODULAR, 0); }
		public TerminalNode LTH() { return getToken(SQLParser.LTH, 0); }
		public TerminalNode GTH() { return getToken(SQLParser.GTH, 0); }
		public TerminalNode LEQ() { return getToken(SQLParser.LEQ, 0); }
		public TerminalNode GEQ() { return getToken(SQLParser.GEQ, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode NOT_EQUAL() { return getToken(SQLParser.NOT_EQUAL, 0); }
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public TerminalNode DISTINCT() { return getToken(SQLParser.DISTINCT, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode CAST_EXPRESSION() { return getToken(SQLParser.CAST_EXPRESSION, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode DOCUMENT() { return getToken(SQLParser.DOCUMENT, 0); }
		public TerminalNode UNKNOWN() { return getToken(SQLParser.UNKNOWN, 0); }
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public TypeListContext typeList() {
			return getRuleContext(TypeListContext.class,0);
		}
		public VexBContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vexB; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterVexB(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitVexB(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitVexB(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VexBContext vexB() throws RecognitionException {
		return vexB(0);
	}

	private VexBContext vexB(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		VexBContext _localctx = new VexBContext(_ctx, _parentState);
		VexBContext _prevctx = _localctx;
		int _startState = 560;
		enterRecursionRule(_localctx, 560, RULE_vexB, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5712);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
			case 1:
				{
				setState(5690);
				match(LEFT_PAREN);
				setState(5691);
				vex(0);
				setState(5692);
				match(RIGHT_PAREN);
				setState(5694);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,712,_ctx) ) {
				case 1:
					{
					setState(5693);
					indirectionList();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(5696);
				match(LEFT_PAREN);
				setState(5697);
				vex(0);
				setState(5700); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(5698);
					match(COMMA);
					setState(5699);
					vex(0);
					}
					}
					setState(5702); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(5704);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(5706);
				_la = _input.LA(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5707);
				vexB(13);
				}
				break;
			case 4:
				{
				setState(5708);
				op();
				setState(5709);
				vexB(8);
				}
				break;
			case 5:
				{
				setState(5711);
				valueExpressionPrimary();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(5767);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,720,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(5765);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,719,_ctx) ) {
					case 1:
						{
						_localctx = new VexBContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vexB);
						setState(5714);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(5715);
						match(EXP);
						setState(5716);
						vexB(13);
						}
						break;
					case 2:
						{
						_localctx = new VexBContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vexB);
						setState(5717);
						if (!(precpred(_ctx, 11))) throw new FailedPredicateException(this, "precpred(_ctx, 11)");
						setState(5718);
						_la = _input.LA(1);
						if ( !(((((_la - 589)) & ~0x3f) == 0 && ((1L << (_la - 589)) & ((1L << (MULTIPLY - 589)) | (1L << (DIVIDE - 589)) | (1L << (MODULAR - 589)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5719);
						vexB(12);
						}
						break;
					case 3:
						{
						_localctx = new VexBContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vexB);
						setState(5720);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(5721);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5722);
						vexB(11);
						}
						break;
					case 4:
						{
						_localctx = new VexBContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vexB);
						setState(5723);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(5724);
						op();
						setState(5725);
						vexB(10);
						}
						break;
					case 5:
						{
						_localctx = new VexBContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vexB);
						setState(5727);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(5728);
						_la = _input.LA(1);
						if ( !(((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (EQUAL - 576)) | (1L << (NOT_EQUAL - 576)) | (1L << (LTH - 576)) | (1L << (LEQ - 576)) | (1L << (GTH - 576)) | (1L << (GEQ - 576)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(5729);
						vexB(7);
						}
						break;
					case 6:
						{
						_localctx = new VexBContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vexB);
						setState(5730);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(5731);
						match(IS);
						setState(5733);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5732);
							match(NOT);
							}
						}

						setState(5735);
						match(DISTINCT);
						setState(5736);
						match(FROM);
						setState(5737);
						vexB(6);
						}
						break;
					case 7:
						{
						_localctx = new VexBContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vexB);
						setState(5738);
						if (!(precpred(_ctx, 16))) throw new FailedPredicateException(this, "precpred(_ctx, 16)");
						setState(5739);
						match(CAST_EXPRESSION);
						setState(5740);
						dataType();
						}
						break;
					case 8:
						{
						_localctx = new VexBContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vexB);
						setState(5741);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(5742);
						op();
						}
						break;
					case 9:
						{
						_localctx = new VexBContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vexB);
						setState(5743);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(5744);
						match(IS);
						setState(5746);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5745);
							match(NOT);
							}
						}

						setState(5748);
						match(DOCUMENT);
						}
						break;
					case 10:
						{
						_localctx = new VexBContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vexB);
						setState(5749);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(5750);
						match(IS);
						setState(5752);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5751);
							match(NOT);
							}
						}

						setState(5754);
						match(UNKNOWN);
						}
						break;
					case 11:
						{
						_localctx = new VexBContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_vexB);
						setState(5755);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(5756);
						match(IS);
						setState(5758);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(5757);
							match(NOT);
							}
						}

						setState(5760);
						match(OF);
						setState(5761);
						match(LEFT_PAREN);
						setState(5762);
						typeList();
						setState(5763);
						match(RIGHT_PAREN);
						}
						break;
					}
					} 
				}
				setState(5769);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,720,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class OpContext extends ParserRuleContext {
		public OpCharsContext opChars() {
			return getRuleContext(OpCharsContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public AllSimpleOpContext allSimpleOp() {
			return getRuleContext(AllSimpleOpContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public OpContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OpContext op() throws RecognitionException {
		OpContext _localctx = new OpContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_op);
		try {
			setState(5778);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case OP_CHARS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5770);
				opChars();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5771);
				match(OPERATOR);
				setState(5772);
				match(LEFT_PAREN);
				setState(5773);
				identifier();
				setState(5774);
				match(DOT);
				setState(5775);
				allSimpleOp();
				setState(5776);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AllOpRefContext extends ParserRuleContext {
		public AllSimpleOpContext allSimpleOp() {
			return getRuleContext(AllSimpleOpContext.class,0);
		}
		public TerminalNode OPERATOR() { return getToken(SQLParser.OPERATOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOT() { return getToken(SQLParser.DOT, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public AllOpRefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_allOpRef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAllOpRef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAllOpRef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAllOpRef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AllOpRefContext allOpRef() throws RecognitionException {
		AllOpRefContext _localctx = new AllOpRefContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_allOpRef);
		try {
			setState(5788);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL:
			case NOT_EQUAL:
			case LTH:
			case LEQ:
			case GTH:
			case GEQ:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case DIVIDE:
			case MODULAR:
			case EXP:
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case OP_CHARS:
				enterOuterAlt(_localctx, 1);
				{
				setState(5780);
				allSimpleOp();
				}
				break;
			case OPERATOR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5781);
				match(OPERATOR);
				setState(5782);
				match(LEFT_PAREN);
				setState(5783);
				identifier();
				setState(5784);
				match(DOT);
				setState(5785);
				allSimpleOp();
				setState(5786);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatetimeOverlapsContext extends ParserRuleContext {
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public TerminalNode OVERLAPS() { return getToken(SQLParser.OVERLAPS, 0); }
		public DatetimeOverlapsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetimeOverlaps; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDatetimeOverlaps(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDatetimeOverlaps(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDatetimeOverlaps(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatetimeOverlapsContext datetimeOverlaps() throws RecognitionException {
		DatetimeOverlapsContext _localctx = new DatetimeOverlapsContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_datetimeOverlaps);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5790);
			match(LEFT_PAREN);
			setState(5791);
			vex(0);
			setState(5792);
			match(COMMA);
			setState(5793);
			vex(0);
			setState(5794);
			match(RIGHT_PAREN);
			setState(5795);
			match(OVERLAPS);
			setState(5796);
			match(LEFT_PAREN);
			setState(5797);
			vex(0);
			setState(5798);
			match(COMMA);
			setState(5799);
			vex(0);
			setState(5800);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValueExpressionPrimaryContext extends ParserRuleContext {
		public UnsignedValueSpecificationContext unsignedValueSpecification() {
			return getRuleContext(UnsignedValueSpecificationContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public SelectStmtNoParensContext selectStmtNoParens() {
			return getRuleContext(SelectStmtNoParensContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public IndirectionListContext indirectionList() {
			return getRuleContext(IndirectionListContext.class,0);
		}
		public CaseExpressionContext caseExpression() {
			return getRuleContext(CaseExpressionContext.class,0);
		}
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public ComparisonModContext comparisonMod() {
			return getRuleContext(ComparisonModContext.class,0);
		}
		public TerminalNode EXISTS() { return getToken(SQLParser.EXISTS, 0); }
		public TableSubqueryContext tableSubquery() {
			return getRuleContext(TableSubqueryContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public IndirectionVarContext indirectionVar() {
			return getRuleContext(IndirectionVarContext.class,0);
		}
		public ArrayExpressionContext arrayExpression() {
			return getRuleContext(ArrayExpressionContext.class,0);
		}
		public TypeCoercionContext typeCoercion() {
			return getRuleContext(TypeCoercionContext.class,0);
		}
		public DatetimeOverlapsContext datetimeOverlaps() {
			return getRuleContext(DatetimeOverlapsContext.class,0);
		}
		public ValueExpressionPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valueExpressionPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterValueExpressionPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitValueExpressionPrimary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitValueExpressionPrimary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueExpressionPrimaryContext valueExpressionPrimary() throws RecognitionException {
		ValueExpressionPrimaryContext _localctx = new ValueExpressionPrimaryContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_valueExpressionPrimary);
		try {
			setState(5820);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,724,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5802);
				unsignedValueSpecification();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5803);
				match(LEFT_PAREN);
				setState(5804);
				selectStmtNoParens();
				setState(5805);
				match(RIGHT_PAREN);
				setState(5807);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,723,_ctx) ) {
				case 1:
					{
					setState(5806);
					indirectionList();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5809);
				caseExpression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5810);
				match(NULL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5811);
				match(MULTIPLY);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5812);
				comparisonMod();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5813);
				match(EXISTS);
				setState(5814);
				tableSubquery();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(5815);
				functionCall();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(5816);
				indirectionVar();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(5817);
				arrayExpression();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(5818);
				typeCoercion();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(5819);
				datetimeOverlaps();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnsignedValueSpecificationContext extends ParserRuleContext {
		public UnsignedNumericLiteralContext unsignedNumericLiteral() {
			return getRuleContext(UnsignedNumericLiteralContext.class,0);
		}
		public CharacterStringContext characterString() {
			return getRuleContext(CharacterStringContext.class,0);
		}
		public TruthValueContext truthValue() {
			return getRuleContext(TruthValueContext.class,0);
		}
		public UnsignedValueSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedValueSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnsignedValueSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnsignedValueSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUnsignedValueSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnsignedValueSpecificationContext unsignedValueSpecification() throws RecognitionException {
		UnsignedValueSpecificationContext _localctx = new UnsignedValueSpecificationContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_unsignedValueSpecification);
		try {
			setState(5825);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NUMBER_LITERAL:
			case REAL_NUMBER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5822);
				unsignedNumericLiteral();
				}
				break;
			case Character_String_Literal:
			case BeginDollarStringConstant:
				enterOuterAlt(_localctx, 2);
				{
				setState(5823);
				characterString();
				}
				break;
			case FALSE:
			case ON:
			case TRUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(5824);
				truthValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnsignedNumericLiteralContext extends ParserRuleContext {
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public TerminalNode REAL_NUMBER() { return getToken(SQLParser.REAL_NUMBER, 0); }
		public UnsignedNumericLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unsignedNumericLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUnsignedNumericLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUnsignedNumericLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUnsignedNumericLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnsignedNumericLiteralContext unsignedNumericLiteral() throws RecognitionException {
		UnsignedNumericLiteralContext _localctx = new UnsignedNumericLiteralContext(_ctx, getState());
		enterRule(_localctx, 572, RULE_unsignedNumericLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5827);
			_la = _input.LA(1);
			if ( !(_la==NUMBER_LITERAL || _la==REAL_NUMBER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruthValueContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(SQLParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(SQLParser.FALSE, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TruthValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truthValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTruthValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTruthValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTruthValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruthValueContext truthValue() throws RecognitionException {
		TruthValueContext _localctx = new TruthValueContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_truthValue);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5829);
			_la = _input.LA(1);
			if ( !(((((_la - 397)) & ~0x3f) == 0 && ((1L << (_la - 397)) & ((1L << (FALSE - 397)) | (1L << (ON - 397)) | (1L << (TRUE - 397)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseExpressionContext extends ParserRuleContext {
		public VexContext vex;
		public List<VexContext> r = new ArrayList<VexContext>();
		public TerminalNode CASE() { return getToken(SQLParser.CASE, 0); }
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> WHEN() { return getTokens(SQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(SQLParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(SQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SQLParser.THEN, i);
		}
		public TerminalNode ELSE() { return getToken(SQLParser.ELSE, 0); }
		public CaseExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCaseExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCaseExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCaseExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseExpressionContext caseExpression() throws RecognitionException {
		CaseExpressionContext _localctx = new CaseExpressionContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_caseExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5831);
			match(CASE);
			setState(5833);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (PLACEHOLDER - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
				{
				setState(5832);
				vex(0);
				}
			}

			setState(5840); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(5835);
				match(WHEN);
				setState(5836);
				vex(0);
				setState(5837);
				match(THEN);
				setState(5838);
				((CaseExpressionContext)_localctx).vex = vex(0);
				((CaseExpressionContext)_localctx).r.add(((CaseExpressionContext)_localctx).vex);
				}
				}
				setState(5842); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(5846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(5844);
				match(ELSE);
				setState(5845);
				((CaseExpressionContext)_localctx).vex = vex(0);
				((CaseExpressionContext)_localctx).r.add(((CaseExpressionContext)_localctx).vex);
				}
			}

			setState(5848);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CastSpecificationContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode CAST() { return getToken(SQLParser.CAST, 0); }
		public TerminalNode TREAT() { return getToken(SQLParser.TREAT, 0); }
		public CastSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_castSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCastSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCastSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCastSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CastSpecificationContext castSpecification() throws RecognitionException {
		CastSpecificationContext _localctx = new CastSpecificationContext(_ctx, getState());
		enterRule(_localctx, 578, RULE_castSpecification);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5850);
			_la = _input.LA(1);
			if ( !(_la==TREAT || _la==CAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5851);
			match(LEFT_PAREN);
			setState(5852);
			vex(0);
			setState(5853);
			match(AS);
			setState(5854);
			dataType();
			setState(5855);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public SchemaQualifiedNameNontypeContext schemaQualifiedNameNontype() {
			return getRuleContext(SchemaQualifiedNameNontypeContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public List<VexOrNamedNotationContext> vexOrNamedNotation() {
			return getRuleContexts(VexOrNamedNotationContext.class);
		}
		public VexOrNamedNotationContext vexOrNamedNotation(int i) {
			return getRuleContext(VexOrNamedNotationContext.class,i);
		}
		public TerminalNode WITHIN() { return getToken(SQLParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(SQLParser.GROUP, 0); }
		public List<OrderbyClauseContext> orderbyClause() {
			return getRuleContexts(OrderbyClauseContext.class);
		}
		public OrderbyClauseContext orderbyClause(int i) {
			return getRuleContext(OrderbyClauseContext.class,i);
		}
		public FilterClauseContext filterClause() {
			return getRuleContext(FilterClauseContext.class,0);
		}
		public TerminalNode OVER() { return getToken(SQLParser.OVER, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public WindowDefinitionContext windowDefinition() {
			return getRuleContext(WindowDefinitionContext.class,0);
		}
		public SetQualifierContext setQualifier() {
			return getRuleContext(SetQualifierContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public FunctionConstructContext functionConstruct() {
			return getRuleContext(FunctionConstructContext.class,0);
		}
		public ExtractFunctionContext extractFunction() {
			return getRuleContext(ExtractFunctionContext.class,0);
		}
		public SystemFunctionContext systemFunction() {
			return getRuleContext(SystemFunctionContext.class,0);
		}
		public DateTimeFunctionContext dateTimeFunction() {
			return getRuleContext(DateTimeFunctionContext.class,0);
		}
		public StringValueFunctionContext stringValueFunction() {
			return getRuleContext(StringValueFunctionContext.class,0);
		}
		public XmlFunctionContext xmlFunction() {
			return getRuleContext(XmlFunctionContext.class,0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 580, RULE_functionCall);
		int _la;
		try {
			setState(5900);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,737,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5857);
				schemaQualifiedNameNontype();
				setState(5858);
				match(LEFT_PAREN);
				setState(5873);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (DISTINCT - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (VARIADIC - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (PLACEHOLDER - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
					{
					setState(5860);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,729,_ctx) ) {
					case 1:
						{
						setState(5859);
						setQualifier();
						}
						break;
					}
					setState(5862);
					vexOrNamedNotation();
					setState(5867);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5863);
						match(COMMA);
						setState(5864);
						vexOrNamedNotation();
						}
						}
						setState(5869);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(5871);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ORDER) {
						{
						setState(5870);
						orderbyClause();
						}
					}

					}
				}

				setState(5875);
				match(RIGHT_PAREN);
				setState(5882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,733,_ctx) ) {
				case 1:
					{
					setState(5876);
					match(WITHIN);
					setState(5877);
					match(GROUP);
					setState(5878);
					match(LEFT_PAREN);
					setState(5879);
					orderbyClause();
					setState(5880);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5885);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,734,_ctx) ) {
				case 1:
					{
					setState(5884);
					filterClause();
					}
					break;
				}
				setState(5892);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,736,_ctx) ) {
				case 1:
					{
					setState(5887);
					match(OVER);
					setState(5890);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ABORT:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATTACH:
					case ATTRIBUTE:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BY:
					case CACHE:
					case CALL:
					case CALLED:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CHAIN:
					case CHARACTERISTICS:
					case CHECKPOINT:
					case CLASS:
					case CLOSE:
					case CLUSTER:
					case COLUMNS:
					case COMMENT:
					case COMMENTS:
					case COMMIT:
					case COMMITTED:
					case CONFIGURATION:
					case CONFLICT:
					case CONNECTION:
					case CONSTRAINTS:
					case CONTENT:
					case CONTINUE:
					case CONVERSION:
					case COPY:
					case COST:
					case CSV:
					case CUBE:
					case CURRENT:
					case CURSOR:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DEALLOCATE:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DEPENDS:
					case DETACH:
					case DICTIONARY:
					case DISABLE:
					case DISCARD:
					case DOCUMENT:
					case DOMAIN:
					case DOUBLE:
					case DROP:
					case EACH:
					case ENABLE:
					case ENCODING:
					case ENCRYPTED:
					case ENUM:
					case ESCAPE:
					case EVENT:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXECUTE:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORWARD:
					case FUNCTION:
					case FUNCTIONS:
					case GENERATED:
					case GLOBAL:
					case GRANTED:
					case GROUPS:
					case HANDLER:
					case HEADER:
					case HOLD:
					case HOUR:
					case IDENTITY:
					case IF:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLICIT:
					case IMPORT:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDEXES:
					case INHERIT:
					case INHERITS:
					case INLINE:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTEAD:
					case INVOKER:
					case ISOLATION:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAKPROOF:
					case LEVEL:
					case LISTEN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCKED:
					case LOGGED:
					case MAPPING:
					case MATCH:
					case MATERIALIZED:
					case MAXVALUE:
					case METHOD:
					case MINUTE:
					case MINVALUE:
					case MODE:
					case MONTH:
					case MOVE:
					case NAME:
					case NAMES:
					case NEW:
					case NEXT:
					case NO:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLS:
					case OBJECT:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDINALITY:
					case OTHERS:
					case OVER:
					case OVERRIDING:
					case OWNED:
					case OWNER:
					case PARALLEL:
					case PARSER:
					case PARTIAL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PLANS:
					case POLICY:
					case PRECEDING:
					case PREPARE:
					case PREPARED:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PROCEDURES:
					case PROGRAM:
					case PUBLICATION:
					case QUOTE:
					case RANGE:
					case READ:
					case REASSIGN:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case REPLICA:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RETURNS:
					case REVOKE:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINES:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMAS:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECURITY:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER:
					case SESSION:
					case SET:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SKIP_:
					case SNAPSHOT:
					case SQL:
					case STABLE:
					case STANDALONE:
					case START:
					case STATEMENT:
					case STATISTICS:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STORED:
					case STRICT:
					case STRIP:
					case SUBSCRIPTION:
					case SUPPORT:
					case SYSID:
					case SYSTEM:
					case TABLES:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TEXT:
					case TIES:
					case TRANSACTION:
					case TRANSFORM:
					case TRIGGER:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case TYPES:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNLOGGED:
					case UNTIL:
					case UPDATE:
					case VACUUM:
					case VALID:
					case VALIDATE:
					case VALIDATOR:
					case VALUE:
					case VARYING:
					case VERSION:
					case VIEW:
					case VIEWS:
					case VOLATILE:
					case WHITESPACE:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRAPPER:
					case WRITE:
					case XML:
					case YEAR:
					case YES:
					case ZONE:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BOOLEAN:
					case CHAR:
					case CHARACTER:
					case COALESCE:
					case DEC:
					case DECIMAL:
					case EXISTS:
					case EXTRACT:
					case FLOAT:
					case GREATEST:
					case GROUPING:
					case INOUT:
					case INT:
					case INTEGER:
					case INTERVAL:
					case LEAST:
					case NATIONAL:
					case NCHAR:
					case NONE:
					case NULLIF:
					case NUMERIC:
					case OUT:
					case OVERLAY:
					case POSITION:
					case PRECISION:
					case REAL:
					case ROW:
					case SETOF:
					case SMALLINT:
					case SUBSTRING:
					case TIME:
					case TIMESTAMP:
					case TREAT:
					case TRIM:
					case VALUES:
					case VARCHAR:
					case XMLATTRIBUTES:
					case XMLCONCAT:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case ALIGNMENT:
					case BASETYPE:
					case BUFFERS:
					case BYPASSRLS:
					case CANONICAL:
					case CATEGORY:
					case COLLATABLE:
					case COMBINEFUNC:
					case COMMUTATOR:
					case CONNECT:
					case COSTS:
					case CREATEDB:
					case CREATEROLE:
					case DESERIALFUNC:
					case DETERMINISTIC:
					case DISABLE_PAGE_SKIPPING:
					case ELEMENT:
					case EXTENDED:
					case FINALFUNC:
					case FINALFUNC_EXTRA:
					case FINALFUNC_MODIFY:
					case FORCE_NOT_NULL:
					case FORCE_NULL:
					case FORCE_QUOTE:
					case FORMAT:
					case GETTOKEN:
					case HASH:
					case HASHES:
					case HEADLINE:
					case HYPOTHETICAL:
					case INDEX_CLEANUP:
					case INIT:
					case INITCOND:
					case INTERNALLENGTH:
					case JSON:
					case LC_COLLATE:
					case LC_CTYPE:
					case LEFTARG:
					case LEXIZE:
					case LEXTYPES:
					case LIST:
					case LOCALE:
					case LOGIN:
					case MAIN:
					case MERGES:
					case MFINALFUNC:
					case MFINALFUNC_EXTRA:
					case MFINALFUNC_MODIFY:
					case MINITCOND:
					case MINVFUNC:
					case MODULUS:
					case MSFUNC:
					case MSSPACE:
					case MSTYPE:
					case NEGATOR:
					case NOBYPASSRLS:
					case NOCREATEDB:
					case NOCREATEROLE:
					case NOINHERIT:
					case NOLOGIN:
					case NOREPLICATION:
					case NOSUPERUSER:
					case OUTPUT:
					case PASSEDBYVALUE:
					case PATH:
					case PERMISSIVE:
					case PLAIN:
					case PREFERRED:
					case PROVIDER:
					case READ_ONLY:
					case READ_WRITE:
					case RECEIVE:
					case REMAINDER:
					case REPLICATION:
					case RESTRICTED:
					case RESTRICTIVE:
					case RIGHTARG:
					case SAFE:
					case SEND:
					case SERIALFUNC:
					case SETTINGS:
					case SFUNC:
					case SHAREABLE:
					case SKIP_LOCKED:
					case SORTOP:
					case SSPACE:
					case STYPE:
					case SUBTYPE_DIFF:
					case SUBTYPE_OPCLASS:
					case SUBTYPE:
					case SUMMARY:
					case SUPERUSER:
					case TIMING:
					case TYPMOD_IN:
					case TYPMOD_OUT:
					case UNSAFE:
					case USAGE:
					case VARIABLE:
					case YAML:
					case ALIAS:
					case ASSERT:
					case CONSTANT:
					case DATATYPE:
					case DEBUG:
					case DETAIL:
					case DIAGNOSTICS:
					case ELSEIF:
					case ELSIF:
					case ERRCODE:
					case EXIT:
					case EXCEPTION:
					case FOREACH:
					case GET:
					case HINT:
					case INFO:
					case LOG:
					case LOOP:
					case MESSAGE:
					case NOTICE:
					case OPEN:
					case PERFORM:
					case QUERY:
					case RAISE:
					case RECORD:
					case RETURN:
					case REVERSE:
					case ROWTYPE:
					case SLICE:
					case SQLSTATE:
					case STACKED:
					case WARNING:
					case WHILE:
					case Identifier:
					case QuotedIdentifier:
						{
						setState(5888);
						identifier();
						}
						break;
					case LEFT_PAREN:
						{
						setState(5889);
						windowDefinition();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5894);
				functionConstruct();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5895);
				extractFunction();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5896);
				systemFunction();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5897);
				dateTimeFunction();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(5898);
				stringValueFunction();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(5899);
				xmlFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VexOrNamedNotationContext extends ParserRuleContext {
		public IdentifierContext argname;
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode VARIADIC() { return getToken(SQLParser.VARIADIC, 0); }
		public PointerContext pointer() {
			return getRuleContext(PointerContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public VexOrNamedNotationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vexOrNamedNotation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterVexOrNamedNotation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitVexOrNamedNotation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitVexOrNamedNotation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VexOrNamedNotationContext vexOrNamedNotation() throws RecognitionException {
		VexOrNamedNotationContext _localctx = new VexOrNamedNotationContext(_ctx, getState());
		enterRule(_localctx, 582, RULE_vexOrNamedNotation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5903);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VARIADIC) {
				{
				setState(5902);
				match(VARIADIC);
				}
			}

			setState(5908);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,739,_ctx) ) {
			case 1:
				{
				setState(5905);
				((VexOrNamedNotationContext)_localctx).argname = identifier();
				setState(5906);
				pointer();
				}
				break;
			}
			setState(5910);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PointerContext extends ParserRuleContext {
		public TerminalNode EQUAL_GTH() { return getToken(SQLParser.EQUAL_GTH, 0); }
		public TerminalNode COLON_EQUAL() { return getToken(SQLParser.COLON_EQUAL, 0); }
		public PointerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pointer; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPointer(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPointer(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPointer(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PointerContext pointer() throws RecognitionException {
		PointerContext _localctx = new PointerContext(_ctx, getState());
		enterRule(_localctx, 584, RULE_pointer);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5912);
			_la = _input.LA(1);
			if ( !(_la==EQUAL_GTH || _la==COLON_EQUAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionConstructContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode COALESCE() { return getToken(SQLParser.COALESCE, 0); }
		public TerminalNode GREATEST() { return getToken(SQLParser.GREATEST, 0); }
		public TerminalNode GROUPING() { return getToken(SQLParser.GROUPING, 0); }
		public TerminalNode LEAST() { return getToken(SQLParser.LEAST, 0); }
		public TerminalNode NULLIF() { return getToken(SQLParser.NULLIF, 0); }
		public TerminalNode XMLCONCAT() { return getToken(SQLParser.XMLCONCAT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode ROW() { return getToken(SQLParser.ROW, 0); }
		public FunctionConstructContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionConstruct; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionConstruct(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionConstruct(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionConstruct(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionConstructContext functionConstruct() throws RecognitionException {
		FunctionConstructContext _localctx = new FunctionConstructContext(_ctx, getState());
		enterRule(_localctx, 586, RULE_functionConstruct);
		int _la;
		try {
			setState(5939);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COALESCE:
			case GREATEST:
			case GROUPING:
			case LEAST:
			case NULLIF:
			case XMLCONCAT:
				enterOuterAlt(_localctx, 1);
				{
				setState(5914);
				_la = _input.LA(1);
				if ( !(((((_la - 299)) & ~0x3f) == 0 && ((1L << (_la - 299)) & ((1L << (COALESCE - 299)) | (1L << (GREATEST - 299)) | (1L << (GROUPING - 299)) | (1L << (LEAST - 299)) | (1L << (NULLIF - 299)) | (1L << (XMLCONCAT - 299)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5915);
				match(LEFT_PAREN);
				setState(5916);
				vex(0);
				setState(5921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5917);
					match(COMMA);
					setState(5918);
					vex(0);
					}
					}
					setState(5923);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(5924);
				match(RIGHT_PAREN);
				}
				break;
			case ROW:
				enterOuterAlt(_localctx, 2);
				{
				setState(5926);
				match(ROW);
				setState(5927);
				match(LEFT_PAREN);
				setState(5936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (PLACEHOLDER - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
					{
					setState(5928);
					vex(0);
					setState(5933);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(5929);
						match(COMMA);
						setState(5930);
						vex(0);
						}
						}
						setState(5935);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(5938);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExtractFunctionContext extends ParserRuleContext {
		public TerminalNode EXTRACT() { return getToken(SQLParser.EXTRACT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public CharacterStringContext characterString() {
			return getRuleContext(CharacterStringContext.class,0);
		}
		public ExtractFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_extractFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExtractFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExtractFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitExtractFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExtractFunctionContext extractFunction() throws RecognitionException {
		ExtractFunctionContext _localctx = new ExtractFunctionContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_extractFunction);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5941);
			match(EXTRACT);
			setState(5942);
			match(LEFT_PAREN);
			setState(5945);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(5943);
				identifier();
				}
				break;
			case Character_String_Literal:
			case BeginDollarStringConstant:
				{
				setState(5944);
				characterString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(5947);
			match(FROM);
			setState(5948);
			vex(0);
			setState(5949);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SystemFunctionContext extends ParserRuleContext {
		public TerminalNode CURRENT_CATALOG() { return getToken(SQLParser.CURRENT_CATALOG, 0); }
		public TerminalNode CURRENT_SCHEMA() { return getToken(SQLParser.CURRENT_SCHEMA, 0); }
		public TerminalNode CURRENT_USER() { return getToken(SQLParser.CURRENT_USER, 0); }
		public TerminalNode SESSION_USER() { return getToken(SQLParser.SESSION_USER, 0); }
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public CastSpecificationContext castSpecification() {
			return getRuleContext(CastSpecificationContext.class,0);
		}
		public SystemFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_systemFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSystemFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSystemFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSystemFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SystemFunctionContext systemFunction() throws RecognitionException {
		SystemFunctionContext _localctx = new SystemFunctionContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_systemFunction);
		try {
			setState(5957);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_CATALOG:
				enterOuterAlt(_localctx, 1);
				{
				setState(5951);
				match(CURRENT_CATALOG);
				}
				break;
			case CURRENT_SCHEMA:
				enterOuterAlt(_localctx, 2);
				{
				setState(5952);
				match(CURRENT_SCHEMA);
				}
				break;
			case CURRENT_USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(5953);
				match(CURRENT_USER);
				}
				break;
			case SESSION_USER:
				enterOuterAlt(_localctx, 4);
				{
				setState(5954);
				match(SESSION_USER);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 5);
				{
				setState(5955);
				match(USER);
				}
				break;
			case TREAT:
			case CAST:
				enterOuterAlt(_localctx, 6);
				{
				setState(5956);
				castSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DateTimeFunctionContext extends ParserRuleContext {
		public TerminalNode CURRENT_DATE() { return getToken(SQLParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(SQLParser.CURRENT_TIME, 0); }
		public TypeLengthContext typeLength() {
			return getRuleContext(TypeLengthContext.class,0);
		}
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(SQLParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(SQLParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(SQLParser.LOCALTIMESTAMP, 0); }
		public DateTimeFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dateTimeFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDateTimeFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDateTimeFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDateTimeFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DateTimeFunctionContext dateTimeFunction() throws RecognitionException {
		DateTimeFunctionContext _localctx = new DateTimeFunctionContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_dateTimeFunction);
		try {
			setState(5976);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(5959);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(5960);
				match(CURRENT_TIME);
				setState(5962);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,746,_ctx) ) {
				case 1:
					{
					setState(5961);
					typeLength();
					}
					break;
				}
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 3);
				{
				setState(5964);
				match(CURRENT_TIMESTAMP);
				setState(5966);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,747,_ctx) ) {
				case 1:
					{
					setState(5965);
					typeLength();
					}
					break;
				}
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 4);
				{
				setState(5968);
				match(LOCALTIME);
				setState(5970);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,748,_ctx) ) {
				case 1:
					{
					setState(5969);
					typeLength();
					}
					break;
				}
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 5);
				{
				setState(5972);
				match(LOCALTIMESTAMP);
				setState(5974);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,749,_ctx) ) {
				case 1:
					{
					setState(5973);
					typeLength();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringValueFunctionContext extends ParserRuleContext {
		public VexContext chars;
		public VexContext str;
		public TerminalNode TRIM() { return getToken(SQLParser.TRIM, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode LEADING() { return getToken(SQLParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(SQLParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(SQLParser.BOTH, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode SUBSTRING() { return getToken(SQLParser.SUBSTRING, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode POSITION() { return getToken(SQLParser.POSITION, 0); }
		public VexBContext vexB() {
			return getRuleContext(VexBContext.class,0);
		}
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode OVERLAY() { return getToken(SQLParser.OVERLAY, 0); }
		public TerminalNode PLACING() { return getToken(SQLParser.PLACING, 0); }
		public TerminalNode COLLATION() { return getToken(SQLParser.COLLATION, 0); }
		public StringValueFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringValueFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStringValueFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStringValueFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitStringValueFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringValueFunctionContext stringValueFunction() throws RecognitionException {
		StringValueFunctionContext _localctx = new StringValueFunctionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_stringValueFunction);
		int _la;
		try {
			setState(6045);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TRIM:
				enterOuterAlt(_localctx, 1);
				{
				setState(5978);
				match(TRIM);
				setState(5979);
				match(LEFT_PAREN);
				setState(5981);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (BOTH - 375)) | (1L << (LEADING - 375)) | (1L << (TRAILING - 375)))) != 0)) {
					{
					setState(5980);
					_la = _input.LA(1);
					if ( !(((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & ((1L << (BOTH - 375)) | (1L << (LEADING - 375)) | (1L << (TRAILING - 375)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(5995);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,754,_ctx) ) {
				case 1:
					{
					setState(5983);
					((StringValueFunctionContext)_localctx).chars = vex(0);
					setState(5984);
					match(FROM);
					setState(5985);
					((StringValueFunctionContext)_localctx).str = vex(0);
					}
					break;
				case 2:
					{
					setState(5988);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==FROM) {
						{
						setState(5987);
						match(FROM);
						}
					}

					setState(5990);
					((StringValueFunctionContext)_localctx).str = vex(0);
					setState(5993);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5991);
						match(COMMA);
						setState(5992);
						((StringValueFunctionContext)_localctx).chars = vex(0);
						}
					}

					}
					break;
				}
				setState(5997);
				match(RIGHT_PAREN);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5999);
				match(SUBSTRING);
				setState(6000);
				match(LEFT_PAREN);
				setState(6001);
				vex(0);
				setState(6006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6002);
					match(COMMA);
					setState(6003);
					vex(0);
					}
					}
					setState(6008);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6011);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(6009);
					match(FROM);
					setState(6010);
					vex(0);
					}
				}

				setState(6015);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6013);
					match(FOR);
					setState(6014);
					vex(0);
					}
				}

				setState(6017);
				match(RIGHT_PAREN);
				}
				break;
			case POSITION:
				enterOuterAlt(_localctx, 3);
				{
				setState(6019);
				match(POSITION);
				setState(6020);
				match(LEFT_PAREN);
				setState(6021);
				vexB(0);
				setState(6022);
				match(IN);
				setState(6023);
				vex(0);
				setState(6024);
				match(RIGHT_PAREN);
				}
				break;
			case OVERLAY:
				enterOuterAlt(_localctx, 4);
				{
				setState(6026);
				match(OVERLAY);
				setState(6027);
				match(LEFT_PAREN);
				setState(6028);
				vex(0);
				setState(6029);
				match(PLACING);
				setState(6030);
				vex(0);
				setState(6031);
				match(FROM);
				setState(6032);
				vex(0);
				setState(6035);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(6033);
					match(FOR);
					setState(6034);
					vex(0);
					}
				}

				setState(6037);
				match(RIGHT_PAREN);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 5);
				{
				setState(6039);
				match(COLLATION);
				setState(6040);
				match(FOR);
				setState(6041);
				match(LEFT_PAREN);
				setState(6042);
				vex(0);
				setState(6043);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlFunctionContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext attname;
		public TerminalNode XMLELEMENT() { return getToken(SQLParser.XMLELEMENT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public TerminalNode NAME() { return getToken(SQLParser.NAME, 0); }
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode XMLATTRIBUTES() { return getToken(SQLParser.XMLATTRIBUTES, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(SQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(SQLParser.AS, i);
		}
		public TerminalNode XMLFOREST() { return getToken(SQLParser.XMLFOREST, 0); }
		public TerminalNode XMLPI() { return getToken(SQLParser.XMLPI, 0); }
		public TerminalNode XMLROOT() { return getToken(SQLParser.XMLROOT, 0); }
		public TerminalNode VERSION() { return getToken(SQLParser.VERSION, 0); }
		public List<TerminalNode> NO() { return getTokens(SQLParser.NO); }
		public TerminalNode NO(int i) {
			return getToken(SQLParser.NO, i);
		}
		public List<TerminalNode> VALUE() { return getTokens(SQLParser.VALUE); }
		public TerminalNode VALUE(int i) {
			return getToken(SQLParser.VALUE, i);
		}
		public TerminalNode STANDALONE() { return getToken(SQLParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(SQLParser.YES, 0); }
		public TerminalNode XMLEXISTS() { return getToken(SQLParser.XMLEXISTS, 0); }
		public TerminalNode PASSING() { return getToken(SQLParser.PASSING, 0); }
		public List<TerminalNode> BY() { return getTokens(SQLParser.BY); }
		public TerminalNode BY(int i) {
			return getToken(SQLParser.BY, i);
		}
		public List<TerminalNode> REF() { return getTokens(SQLParser.REF); }
		public TerminalNode REF(int i) {
			return getToken(SQLParser.REF, i);
		}
		public TerminalNode XMLPARSE() { return getToken(SQLParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(SQLParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(SQLParser.CONTENT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(SQLParser.XMLSERIALIZE, 0); }
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode XMLTABLE() { return getToken(SQLParser.XMLTABLE, 0); }
		public TerminalNode COLUMNS() { return getToken(SQLParser.COLUMNS, 0); }
		public List<XmlTableColumnContext> xmlTableColumn() {
			return getRuleContexts(XmlTableColumnContext.class);
		}
		public XmlTableColumnContext xmlTableColumn(int i) {
			return getRuleContext(XmlTableColumnContext.class,i);
		}
		public TerminalNode XMLNAMESPACES() { return getToken(SQLParser.XMLNAMESPACES, 0); }
		public XmlFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterXmlFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitXmlFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitXmlFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlFunctionContext xmlFunction() throws RecognitionException {
		XmlFunctionContext _localctx = new XmlFunctionContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_xmlFunction);
		int _la;
		try {
			setState(6208);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case XMLELEMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6047);
				match(XMLELEMENT);
				setState(6048);
				match(LEFT_PAREN);
				setState(6049);
				match(NAME);
				setState(6050);
				((XmlFunctionContext)_localctx).name = identifier();
				setState(6072);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,763,_ctx) ) {
				case 1:
					{
					setState(6051);
					match(COMMA);
					setState(6052);
					match(XMLATTRIBUTES);
					setState(6053);
					match(LEFT_PAREN);
					setState(6054);
					vex(0);
					setState(6057);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(6055);
						match(AS);
						setState(6056);
						((XmlFunctionContext)_localctx).attname = identifier();
						}
					}

					setState(6067);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6059);
						match(COMMA);
						setState(6060);
						vex(0);
						setState(6063);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==AS) {
							{
							setState(6061);
							match(AS);
							setState(6062);
							((XmlFunctionContext)_localctx).attname = identifier();
							}
						}

						}
						}
						setState(6069);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(6070);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(6078);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6074);
					match(COMMA);
					setState(6075);
					vex(0);
					}
					}
					setState(6080);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6081);
				match(RIGHT_PAREN);
				}
				break;
			case XMLFOREST:
				enterOuterAlt(_localctx, 2);
				{
				setState(6083);
				match(XMLFOREST);
				setState(6084);
				match(LEFT_PAREN);
				setState(6085);
				vex(0);
				setState(6088);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6086);
					match(AS);
					setState(6087);
					((XmlFunctionContext)_localctx).name = identifier();
					}
				}

				setState(6098);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6090);
					match(COMMA);
					setState(6091);
					vex(0);
					setState(6094);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(6092);
						match(AS);
						setState(6093);
						((XmlFunctionContext)_localctx).name = identifier();
						}
					}

					}
					}
					setState(6100);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6101);
				match(RIGHT_PAREN);
				}
				break;
			case XMLPI:
				enterOuterAlt(_localctx, 3);
				{
				setState(6103);
				match(XMLPI);
				setState(6104);
				match(LEFT_PAREN);
				setState(6105);
				match(NAME);
				setState(6106);
				((XmlFunctionContext)_localctx).name = identifier();
				setState(6109);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6107);
					match(COMMA);
					setState(6108);
					vex(0);
					}
				}

				setState(6111);
				match(RIGHT_PAREN);
				}
				break;
			case XMLROOT:
				enterOuterAlt(_localctx, 4);
				{
				setState(6113);
				match(XMLROOT);
				setState(6114);
				match(LEFT_PAREN);
				setState(6115);
				vex(0);
				setState(6116);
				match(COMMA);
				setState(6117);
				match(VERSION);
				setState(6121);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,769,_ctx) ) {
				case 1:
					{
					setState(6118);
					vex(0);
					}
					break;
				case 2:
					{
					setState(6119);
					match(NO);
					setState(6120);
					match(VALUE);
					}
					break;
				}
				setState(6131);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(6123);
					match(COMMA);
					setState(6124);
					match(STANDALONE);
					setState(6129);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,770,_ctx) ) {
					case 1:
						{
						setState(6125);
						match(YES);
						}
						break;
					case 2:
						{
						setState(6126);
						match(NO);
						}
						break;
					case 3:
						{
						setState(6127);
						match(NO);
						setState(6128);
						match(VALUE);
						}
						break;
					}
					}
				}

				setState(6133);
				match(RIGHT_PAREN);
				}
				break;
			case XMLEXISTS:
				enterOuterAlt(_localctx, 5);
				{
				setState(6135);
				match(XMLEXISTS);
				setState(6136);
				match(LEFT_PAREN);
				setState(6137);
				vex(0);
				setState(6138);
				match(PASSING);
				setState(6141);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,772,_ctx) ) {
				case 1:
					{
					setState(6139);
					match(BY);
					setState(6140);
					match(REF);
					}
					break;
				}
				setState(6143);
				vex(0);
				setState(6146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(6144);
					match(BY);
					setState(6145);
					match(REF);
					}
				}

				setState(6148);
				match(RIGHT_PAREN);
				}
				break;
			case XMLPARSE:
				enterOuterAlt(_localctx, 6);
				{
				setState(6150);
				match(XMLPARSE);
				setState(6151);
				match(LEFT_PAREN);
				setState(6152);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6153);
				vex(0);
				setState(6154);
				match(RIGHT_PAREN);
				}
				break;
			case XMLSERIALIZE:
				enterOuterAlt(_localctx, 7);
				{
				setState(6156);
				match(XMLSERIALIZE);
				setState(6157);
				match(LEFT_PAREN);
				setState(6158);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6159);
				vex(0);
				setState(6160);
				match(AS);
				setState(6161);
				dataType();
				setState(6162);
				match(RIGHT_PAREN);
				}
				break;
			case XMLTABLE:
				enterOuterAlt(_localctx, 8);
				{
				setState(6164);
				match(XMLTABLE);
				setState(6165);
				match(LEFT_PAREN);
				setState(6184);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,775,_ctx) ) {
				case 1:
					{
					setState(6166);
					match(XMLNAMESPACES);
					setState(6167);
					match(LEFT_PAREN);
					setState(6168);
					vex(0);
					setState(6169);
					match(AS);
					setState(6170);
					((XmlFunctionContext)_localctx).name = identifier();
					setState(6178);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6171);
						match(COMMA);
						setState(6172);
						vex(0);
						setState(6173);
						match(AS);
						setState(6174);
						((XmlFunctionContext)_localctx).name = identifier();
						}
						}
						setState(6180);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(6181);
					match(RIGHT_PAREN);
					setState(6182);
					match(COMMA);
					}
					break;
				}
				setState(6186);
				vex(0);
				setState(6187);
				match(PASSING);
				setState(6190);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,776,_ctx) ) {
				case 1:
					{
					setState(6188);
					match(BY);
					setState(6189);
					match(REF);
					}
					break;
				}
				setState(6192);
				vex(0);
				setState(6195);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(6193);
					match(BY);
					setState(6194);
					match(REF);
					}
				}

				setState(6197);
				match(COLUMNS);
				setState(6198);
				xmlTableColumn();
				setState(6203);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6199);
					match(COMMA);
					setState(6200);
					xmlTableColumn();
					}
					}
					setState(6205);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6206);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XmlTableColumnContext extends ParserRuleContext {
		public IdentifierContext name;
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(SQLParser.ORDINALITY, 0); }
		public TerminalNode PATH() { return getToken(SQLParser.PATH, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public XmlTableColumnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlTableColumn; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterXmlTableColumn(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitXmlTableColumn(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitXmlTableColumn(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XmlTableColumnContext xmlTableColumn() throws RecognitionException {
		XmlTableColumnContext _localctx = new XmlTableColumnContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_xmlTableColumn);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6210);
			((XmlTableColumnContext)_localctx).name = identifier();
			setState(6228);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(6211);
				dataType();
				setState(6214);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(6212);
					match(PATH);
					setState(6213);
					vex(0);
					}
				}

				setState(6218);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(6216);
					match(DEFAULT);
					setState(6217);
					vex(0);
					}
				}

				setState(6224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT || _la==NULL) {
					{
					setState(6221);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(6220);
						match(NOT);
						}
					}

					setState(6223);
					match(NULL);
					}
				}

				}
				break;
			case FOR:
				{
				setState(6226);
				match(FOR);
				setState(6227);
				match(ORDINALITY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonModContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(SQLParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(SQLParser.SOME, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public SelectStmtNoParensContext selectStmtNoParens() {
			return getRuleContext(SelectStmtNoParensContext.class,0);
		}
		public ComparisonModContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonMod; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterComparisonMod(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitComparisonMod(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitComparisonMod(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonModContext comparisonMod() throws RecognitionException {
		ComparisonModContext _localctx = new ComparisonModContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_comparisonMod);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6230);
			_la = _input.LA(1);
			if ( !(((((_la - 366)) & ~0x3f) == 0 && ((1L << (_la - 366)) & ((1L << (ALL - 366)) | (1L << (ANY - 366)) | (1L << (SOME - 366)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6231);
			match(LEFT_PAREN);
			setState(6234);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,785,_ctx) ) {
			case 1:
				{
				setState(6232);
				vex(0);
				}
				break;
			case 2:
				{
				setState(6233);
				selectStmtNoParens();
				}
				break;
			}
			setState(6236);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FilterClauseContext extends ParserRuleContext {
		public TerminalNode FILTER() { return getToken(SQLParser.FILTER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public FilterClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_filterClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFilterClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFilterClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFilterClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FilterClauseContext filterClause() throws RecognitionException {
		FilterClauseContext _localctx = new FilterClauseContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_filterClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6238);
			match(FILTER);
			setState(6239);
			match(LEFT_PAREN);
			setState(6240);
			match(WHERE);
			setState(6241);
			vex(0);
			setState(6242);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowDefinitionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public PartitionByColumnsContext partitionByColumns() {
			return getRuleContext(PartitionByColumnsContext.class,0);
		}
		public OrderbyClauseContext orderbyClause() {
			return getRuleContext(OrderbyClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterWindowDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitWindowDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitWindowDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowDefinitionContext windowDefinition() throws RecognitionException {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_windowDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6244);
			match(LEFT_PAREN);
			setState(6246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,786,_ctx) ) {
			case 1:
				{
				setState(6245);
				identifier();
				}
				break;
			}
			setState(6249);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(6248);
				partitionByColumns();
				}
			}

			setState(6252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(6251);
				orderbyClause();
				}
			}

			setState(6255);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUPS || _la==RANGE || _la==ROWS) {
				{
				setState(6254);
				frameClause();
				}
			}

			setState(6257);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public TerminalNode RANGE() { return getToken(SQLParser.RANGE, 0); }
		public TerminalNode ROWS() { return getToken(SQLParser.ROWS, 0); }
		public TerminalNode GROUPS() { return getToken(SQLParser.GROUPS, 0); }
		public List<FrameBoundContext> frameBound() {
			return getRuleContexts(FrameBoundContext.class);
		}
		public FrameBoundContext frameBound(int i) {
			return getRuleContext(FrameBoundContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(SQLParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(SQLParser.AND, 0); }
		public TerminalNode EXCLUDE() { return getToken(SQLParser.EXCLUDE, 0); }
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(SQLParser.ROW, 0); }
		public TerminalNode GROUP() { return getToken(SQLParser.GROUP, 0); }
		public TerminalNode TIES() { return getToken(SQLParser.TIES, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode OTHERS() { return getToken(SQLParser.OTHERS, 0); }
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_frameClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6259);
			_la = _input.LA(1);
			if ( !(_la==GROUPS || _la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(6266);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,790,_ctx) ) {
			case 1:
				{
				setState(6260);
				frameBound();
				}
				break;
			case 2:
				{
				setState(6261);
				match(BETWEEN);
				setState(6262);
				frameBound();
				setState(6263);
				match(AND);
				setState(6264);
				frameBound();
				}
				break;
			}
			setState(6277);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE) {
				{
				setState(6268);
				match(EXCLUDE);
				setState(6275);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CURRENT:
					{
					setState(6269);
					match(CURRENT);
					setState(6270);
					match(ROW);
					}
					break;
				case GROUP:
					{
					setState(6271);
					match(GROUP);
					}
					break;
				case TIES:
					{
					setState(6272);
					match(TIES);
					}
					break;
				case NO:
					{
					setState(6273);
					match(NO);
					setState(6274);
					match(OTHERS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBoundContext extends ParserRuleContext {
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode PRECEDING() { return getToken(SQLParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(SQLParser.FOLLOWING, 0); }
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(SQLParser.ROW, 0); }
		public FrameBoundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFrameBound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFrameBound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFrameBound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBoundContext frameBound() throws RecognitionException {
		FrameBoundContext _localctx = new FrameBoundContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_frameBound);
		int _la;
		try {
			setState(6284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,793,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6279);
				vex(0);
				setState(6280);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6282);
				match(CURRENT);
				setState(6283);
				match(ROW);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayExpressionContext extends ParserRuleContext {
		public TerminalNode ARRAY() { return getToken(SQLParser.ARRAY, 0); }
		public ArrayElementsContext arrayElements() {
			return getRuleContext(ArrayElementsContext.class,0);
		}
		public TableSubqueryContext tableSubquery() {
			return getRuleContext(TableSubqueryContext.class,0);
		}
		public ArrayExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterArrayExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitArrayExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitArrayExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayExpressionContext arrayExpression() throws RecognitionException {
		ArrayExpressionContext _localctx = new ArrayExpressionContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_arrayExpression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6286);
			match(ARRAY);
			setState(6289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_BRACKET:
				{
				setState(6287);
				arrayElements();
				}
				break;
			case LEFT_PAREN:
				{
				setState(6288);
				tableSubquery();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArrayElementsContext extends ParserRuleContext {
		public TerminalNode LEFT_BRACKET() { return getToken(SQLParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(SQLParser.RIGHT_BRACKET, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<ArrayElementsContext> arrayElements() {
			return getRuleContexts(ArrayElementsContext.class);
		}
		public ArrayElementsContext arrayElements(int i) {
			return getRuleContext(ArrayElementsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ArrayElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arrayElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterArrayElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitArrayElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitArrayElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArrayElementsContext arrayElements() throws RecognitionException {
		ArrayElementsContext _localctx = new ArrayElementsContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_arrayElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6291);
			match(LEFT_BRACKET);
			setState(6306);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LEFT_BRACKET - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (PLACEHOLDER - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
				{
				setState(6294);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case TABLESAMPLE:
				case VERBOSE:
				case ALL:
				case ANY:
				case ARRAY:
				case CASE:
				case CAST:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case FALSE:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL:
				case ON:
				case SESSION_USER:
				case SOME:
				case TRUE:
				case USER:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case LEFT_PAREN:
				case PLUS:
				case MINUS:
				case MULTIPLY:
				case LESS_LESS:
				case GREATER_GREATER:
				case HASH_SIGN:
				case PLACEHOLDER:
				case OP_CHARS:
				case NUMBER_LITERAL:
				case REAL_NUMBER:
				case DOLLAR_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(6292);
					vex(0);
					}
					break;
				case LEFT_BRACKET:
					{
					setState(6293);
					arrayElements();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6296);
					match(COMMA);
					setState(6299);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ABORT:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATTACH:
					case ATTRIBUTE:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BY:
					case CACHE:
					case CALL:
					case CALLED:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CHAIN:
					case CHARACTERISTICS:
					case CHECKPOINT:
					case CLASS:
					case CLOSE:
					case CLUSTER:
					case COLUMNS:
					case COMMENT:
					case COMMENTS:
					case COMMIT:
					case COMMITTED:
					case CONFIGURATION:
					case CONFLICT:
					case CONNECTION:
					case CONSTRAINTS:
					case CONTENT:
					case CONTINUE:
					case CONVERSION:
					case COPY:
					case COST:
					case CSV:
					case CUBE:
					case CURRENT:
					case CURSOR:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DEALLOCATE:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DEPENDS:
					case DETACH:
					case DICTIONARY:
					case DISABLE:
					case DISCARD:
					case DOCUMENT:
					case DOMAIN:
					case DOUBLE:
					case DROP:
					case EACH:
					case ENABLE:
					case ENCODING:
					case ENCRYPTED:
					case ENUM:
					case ESCAPE:
					case EVENT:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXECUTE:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORWARD:
					case FUNCTION:
					case FUNCTIONS:
					case GENERATED:
					case GLOBAL:
					case GRANTED:
					case GROUPS:
					case HANDLER:
					case HEADER:
					case HOLD:
					case HOUR:
					case IDENTITY:
					case IF:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLICIT:
					case IMPORT:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDEXES:
					case INHERIT:
					case INHERITS:
					case INLINE:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTEAD:
					case INVOKER:
					case ISOLATION:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAKPROOF:
					case LEVEL:
					case LISTEN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCKED:
					case LOGGED:
					case MAPPING:
					case MATCH:
					case MATERIALIZED:
					case MAXVALUE:
					case METHOD:
					case MINUTE:
					case MINVALUE:
					case MODE:
					case MONTH:
					case MOVE:
					case NAME:
					case NAMES:
					case NEW:
					case NEXT:
					case NO:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLS:
					case OBJECT:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDINALITY:
					case OTHERS:
					case OVER:
					case OVERRIDING:
					case OWNED:
					case OWNER:
					case PARALLEL:
					case PARSER:
					case PARTIAL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PLANS:
					case POLICY:
					case PRECEDING:
					case PREPARE:
					case PREPARED:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PROCEDURES:
					case PROGRAM:
					case PUBLICATION:
					case QUOTE:
					case RANGE:
					case READ:
					case REASSIGN:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case REPLICA:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RETURNS:
					case REVOKE:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINES:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMAS:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECURITY:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER:
					case SESSION:
					case SET:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SKIP_:
					case SNAPSHOT:
					case SQL:
					case STABLE:
					case STANDALONE:
					case START:
					case STATEMENT:
					case STATISTICS:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STORED:
					case STRICT:
					case STRIP:
					case SUBSCRIPTION:
					case SUPPORT:
					case SYSID:
					case SYSTEM:
					case TABLES:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TEXT:
					case TIES:
					case TRANSACTION:
					case TRANSFORM:
					case TRIGGER:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case TYPES:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNLOGGED:
					case UNTIL:
					case UPDATE:
					case VACUUM:
					case VALID:
					case VALIDATE:
					case VALIDATOR:
					case VALUE:
					case VARYING:
					case VERSION:
					case VIEW:
					case VIEWS:
					case VOLATILE:
					case WHITESPACE:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRAPPER:
					case WRITE:
					case XML:
					case YEAR:
					case YES:
					case ZONE:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BOOLEAN:
					case CHAR:
					case CHARACTER:
					case COALESCE:
					case DEC:
					case DECIMAL:
					case EXISTS:
					case EXTRACT:
					case FLOAT:
					case GREATEST:
					case GROUPING:
					case INOUT:
					case INT:
					case INTEGER:
					case INTERVAL:
					case LEAST:
					case NATIONAL:
					case NCHAR:
					case NONE:
					case NULLIF:
					case NUMERIC:
					case OUT:
					case OVERLAY:
					case POSITION:
					case PRECISION:
					case REAL:
					case ROW:
					case SETOF:
					case SMALLINT:
					case SUBSTRING:
					case TIME:
					case TIMESTAMP:
					case TREAT:
					case TRIM:
					case VALUES:
					case VARCHAR:
					case XMLATTRIBUTES:
					case XMLCONCAT:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case AUTHORIZATION:
					case BINARY:
					case COLLATION:
					case CONCURRENTLY:
					case CROSS:
					case CURRENT_SCHEMA:
					case FREEZE:
					case FULL:
					case ILIKE:
					case INNER:
					case IS:
					case ISNULL:
					case JOIN:
					case LEFT:
					case LIKE:
					case NATURAL:
					case NOTNULL:
					case OUTER:
					case OVERLAPS:
					case RIGHT:
					case SIMILAR:
					case TABLESAMPLE:
					case VERBOSE:
					case ALL:
					case ANY:
					case ARRAY:
					case CASE:
					case CAST:
					case CURRENT_CATALOG:
					case CURRENT_DATE:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case FALSE:
					case LOCALTIME:
					case LOCALTIMESTAMP:
					case NOT:
					case NULL:
					case ON:
					case SESSION_USER:
					case SOME:
					case TRUE:
					case USER:
					case ALIGNMENT:
					case BASETYPE:
					case BUFFERS:
					case BYPASSRLS:
					case CANONICAL:
					case CATEGORY:
					case COLLATABLE:
					case COMBINEFUNC:
					case COMMUTATOR:
					case CONNECT:
					case COSTS:
					case CREATEDB:
					case CREATEROLE:
					case DESERIALFUNC:
					case DETERMINISTIC:
					case DISABLE_PAGE_SKIPPING:
					case ELEMENT:
					case EXTENDED:
					case FINALFUNC:
					case FINALFUNC_EXTRA:
					case FINALFUNC_MODIFY:
					case FORCE_NOT_NULL:
					case FORCE_NULL:
					case FORCE_QUOTE:
					case FORMAT:
					case GETTOKEN:
					case HASH:
					case HASHES:
					case HEADLINE:
					case HYPOTHETICAL:
					case INDEX_CLEANUP:
					case INIT:
					case INITCOND:
					case INTERNALLENGTH:
					case JSON:
					case LC_COLLATE:
					case LC_CTYPE:
					case LEFTARG:
					case LEXIZE:
					case LEXTYPES:
					case LIST:
					case LOCALE:
					case LOGIN:
					case MAIN:
					case MERGES:
					case MFINALFUNC:
					case MFINALFUNC_EXTRA:
					case MFINALFUNC_MODIFY:
					case MINITCOND:
					case MINVFUNC:
					case MODULUS:
					case MSFUNC:
					case MSSPACE:
					case MSTYPE:
					case NEGATOR:
					case NOBYPASSRLS:
					case NOCREATEDB:
					case NOCREATEROLE:
					case NOINHERIT:
					case NOLOGIN:
					case NOREPLICATION:
					case NOSUPERUSER:
					case OUTPUT:
					case PASSEDBYVALUE:
					case PATH:
					case PERMISSIVE:
					case PLAIN:
					case PREFERRED:
					case PROVIDER:
					case READ_ONLY:
					case READ_WRITE:
					case RECEIVE:
					case REMAINDER:
					case REPLICATION:
					case RESTRICTED:
					case RESTRICTIVE:
					case RIGHTARG:
					case SAFE:
					case SEND:
					case SERIALFUNC:
					case SETTINGS:
					case SFUNC:
					case SHAREABLE:
					case SKIP_LOCKED:
					case SORTOP:
					case SSPACE:
					case STYPE:
					case SUBTYPE_DIFF:
					case SUBTYPE_OPCLASS:
					case SUBTYPE:
					case SUMMARY:
					case SUPERUSER:
					case TIMING:
					case TYPMOD_IN:
					case TYPMOD_OUT:
					case UNSAFE:
					case USAGE:
					case VARIABLE:
					case YAML:
					case ALIAS:
					case ASSERT:
					case CONSTANT:
					case DATATYPE:
					case DEBUG:
					case DETAIL:
					case DIAGNOSTICS:
					case ELSEIF:
					case ELSIF:
					case ERRCODE:
					case EXIT:
					case EXCEPTION:
					case FOREACH:
					case GET:
					case HINT:
					case INFO:
					case LOG:
					case LOOP:
					case MESSAGE:
					case NOTICE:
					case OPEN:
					case PERFORM:
					case QUERY:
					case RAISE:
					case RECORD:
					case RETURN:
					case REVERSE:
					case ROWTYPE:
					case SLICE:
					case SQLSTATE:
					case STACKED:
					case WARNING:
					case WHILE:
					case LEFT_PAREN:
					case PLUS:
					case MINUS:
					case MULTIPLY:
					case LESS_LESS:
					case GREATER_GREATER:
					case HASH_SIGN:
					case PLACEHOLDER:
					case OP_CHARS:
					case NUMBER_LITERAL:
					case REAL_NUMBER:
					case DOLLAR_NUMBER:
					case Identifier:
					case QuotedIdentifier:
					case Character_String_Literal:
					case BeginDollarStringConstant:
						{
						setState(6297);
						vex(0);
						}
						break;
					case LEFT_BRACKET:
						{
						setState(6298);
						arrayElements();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					setState(6305);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6308);
			match(RIGHT_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeCoercionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public CharacterStringContext characterString() {
			return getRuleContext(CharacterStringContext.class,0);
		}
		public TerminalNode INTERVAL() { return getToken(SQLParser.INTERVAL, 0); }
		public IntervalFieldContext intervalField() {
			return getRuleContext(IntervalFieldContext.class,0);
		}
		public TypeLengthContext typeLength() {
			return getRuleContext(TypeLengthContext.class,0);
		}
		public TypeCoercionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeCoercion; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTypeCoercion(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTypeCoercion(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTypeCoercion(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeCoercionContext typeCoercion() throws RecognitionException {
		TypeCoercionContext _localctx = new TypeCoercionContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_typeCoercion);
		try {
			setState(6319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,800,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6310);
				dataType();
				setState(6311);
				characterString();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6313);
				match(INTERVAL);
				setState(6314);
				characterString();
				setState(6315);
				intervalField();
				setState(6317);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,799,_ctx) ) {
				case 1:
					{
					setState(6316);
					typeLength();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SchemaQualifiedNameContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> DOT() { return getTokens(SQLParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(SQLParser.DOT, i);
		}
		public SchemaQualifiedNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schemaQualifiedName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSchemaQualifiedName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSchemaQualifiedName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSchemaQualifiedName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SchemaQualifiedNameContext schemaQualifiedName() throws RecognitionException {
		SchemaQualifiedNameContext _localctx = new SchemaQualifiedNameContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_schemaQualifiedName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6321);
			identifier();
			setState(6328);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,802,_ctx) ) {
			case 1:
				{
				setState(6322);
				match(DOT);
				setState(6323);
				identifier();
				setState(6326);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,801,_ctx) ) {
				case 1:
					{
					setState(6324);
					match(DOT);
					setState(6325);
					identifier();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SetQualifierContext extends ParserRuleContext {
		public TerminalNode DISTINCT() { return getToken(SQLParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public SetQualifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_setQualifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSetQualifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSetQualifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSetQualifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SetQualifierContext setQualifier() throws RecognitionException {
		SetQualifierContext _localctx = new SetQualifierContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_setQualifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6330);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==DISTINCT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSubqueryContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TableSubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSubquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTableSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTableSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTableSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSubqueryContext tableSubquery() throws RecognitionException {
		TableSubqueryContext _localctx = new TableSubqueryContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_tableSubquery);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6332);
			match(LEFT_PAREN);
			setState(6333);
			selectStmt();
			setState(6334);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStmtContext extends ParserRuleContext {
		public SelectOpsContext selectOps() {
			return getRuleContext(SelectOpsContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public List<AfterOpsContext> afterOps() {
			return getRuleContexts(AfterOpsContext.class);
		}
		public AfterOpsContext afterOps(int i) {
			return getRuleContext(AfterOpsContext.class,i);
		}
		public SelectStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSelectStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSelectStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSelectStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStmtContext selectStmt() throws RecognitionException {
		SelectStmtContext _localctx = new SelectStmtContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_selectStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6336);
				withClause();
				}
			}

			setState(6339);
			selectOps(0);
			setState(6343);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (FETCH - 398)) | (1L << (FOR - 398)) | (1L << (LIMIT - 398)) | (1L << (OFFSET - 398)) | (1L << (ORDER - 398)))) != 0)) {
				{
				{
				setState(6340);
				afterOps();
				}
				}
				setState(6345);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AfterOpsContext extends ParserRuleContext {
		public OrderbyClauseContext orderbyClause() {
			return getRuleContext(OrderbyClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(SQLParser.LIMIT, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode ALL() { return getToken(SQLParser.ALL, 0); }
		public TerminalNode OFFSET() { return getToken(SQLParser.OFFSET, 0); }
		public TerminalNode ROW() { return getToken(SQLParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(SQLParser.ROWS, 0); }
		public TerminalNode FETCH() { return getToken(SQLParser.FETCH, 0); }
		public TerminalNode FIRST() { return getToken(SQLParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(SQLParser.NEXT, 0); }
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode KEY() { return getToken(SQLParser.KEY, 0); }
		public TerminalNode SHARE() { return getToken(SQLParser.SHARE, 0); }
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public List<SchemaQualifiedNameContext> schemaQualifiedName() {
			return getRuleContexts(SchemaQualifiedNameContext.class);
		}
		public SchemaQualifiedNameContext schemaQualifiedName(int i) {
			return getRuleContext(SchemaQualifiedNameContext.class,i);
		}
		public TerminalNode NOWAIT() { return getToken(SQLParser.NOWAIT, 0); }
		public TerminalNode SKIP_() { return getToken(SQLParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(SQLParser.LOCKED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public AfterOpsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_afterOps; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAfterOps(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAfterOps(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAfterOps(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AfterOpsContext afterOps() throws RecognitionException {
		AfterOpsContext _localctx = new AfterOpsContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_afterOps);
		int _la;
		try {
			setState(6392);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(6346);
				orderbyClause();
				}
				break;
			case LIMIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(6347);
				match(LIMIT);
				setState(6350);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,805,_ctx) ) {
				case 1:
					{
					setState(6348);
					vex(0);
					}
					break;
				case 2:
					{
					setState(6349);
					match(ALL);
					}
					break;
				}
				}
				break;
			case OFFSET:
				enterOuterAlt(_localctx, 3);
				{
				setState(6352);
				match(OFFSET);
				setState(6353);
				vex(0);
				setState(6355);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROWS || _la==ROW) {
					{
					setState(6354);
					_la = _input.LA(1);
					if ( !(_la==ROWS || _la==ROW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case FETCH:
				enterOuterAlt(_localctx, 4);
				{
				setState(6357);
				match(FETCH);
				setState(6358);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==NEXT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6360);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,807,_ctx) ) {
				case 1:
					{
					setState(6359);
					vex(0);
					}
					break;
				}
				setState(6362);
				_la = _input.LA(1);
				if ( !(_la==ROWS || _la==ROW) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6364);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(6363);
					match(ONLY);
					}
				}

				}
				break;
			case FOR:
				enterOuterAlt(_localctx, 5);
				{
				setState(6366);
				match(FOR);
				setState(6374);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UPDATE:
					{
					setState(6367);
					match(UPDATE);
					}
					break;
				case NO:
					{
					setState(6368);
					match(NO);
					setState(6369);
					match(KEY);
					setState(6370);
					match(UPDATE);
					}
					break;
				case SHARE:
					{
					setState(6371);
					match(SHARE);
					}
					break;
				case KEY:
					{
					setState(6372);
					match(KEY);
					setState(6373);
					match(SHARE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6385);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(6376);
					match(OF);
					setState(6377);
					schemaQualifiedName();
					setState(6382);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6378);
						match(COMMA);
						setState(6379);
						schemaQualifiedName();
						}
						}
						setState(6384);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(6390);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NOWAIT:
					{
					setState(6387);
					match(NOWAIT);
					}
					break;
				case SKIP_:
					{
					setState(6388);
					match(SKIP_);
					setState(6389);
					match(LOCKED);
					}
					break;
				case EOF:
				case FETCH:
				case FOR:
				case LIMIT:
				case OFFSET:
				case ON:
				case ORDER:
				case RETURNING:
				case WITH:
				case LOOP:
				case SEMI_COLON:
				case RIGHT_PAREN:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStmtNoParensContext extends ParserRuleContext {
		public SelectOpsNoParensContext selectOpsNoParens() {
			return getRuleContext(SelectOpsNoParensContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public List<AfterOpsContext> afterOps() {
			return getRuleContexts(AfterOpsContext.class);
		}
		public AfterOpsContext afterOps(int i) {
			return getRuleContext(AfterOpsContext.class,i);
		}
		public SelectStmtNoParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStmtNoParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSelectStmtNoParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSelectStmtNoParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSelectStmtNoParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStmtNoParensContext selectStmtNoParens() throws RecognitionException {
		SelectStmtNoParensContext _localctx = new SelectStmtNoParensContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_selectStmtNoParens);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6394);
				withClause();
				}
			}

			setState(6397);
			selectOpsNoParens();
			setState(6401);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (FETCH - 398)) | (1L << (FOR - 398)) | (1L << (LIMIT - 398)) | (1L << (OFFSET - 398)) | (1L << (ORDER - 398)))) != 0)) {
				{
				{
				setState(6398);
				afterOps();
				}
				}
				setState(6403);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public List<WithQueryContext> withQuery() {
			return getRuleContexts(WithQueryContext.class);
		}
		public WithQueryContext withQuery(int i) {
			return getRuleContext(WithQueryContext.class,i);
		}
		public TerminalNode RECURSIVE() { return getToken(SQLParser.RECURSIVE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_withClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6404);
			match(WITH);
			setState(6406);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,816,_ctx) ) {
			case 1:
				{
				setState(6405);
				match(RECURSIVE);
				}
				break;
			}
			setState(6408);
			withQuery();
			setState(6413);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6409);
				match(COMMA);
				setState(6410);
				withQuery();
				}
				}
				setState(6415);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithQueryContext extends ParserRuleContext {
		public IdentifierContext queryName;
		public IdentifierContext identifier;
		public List<IdentifierContext> columnName = new ArrayList<IdentifierContext>();
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public DataStatementContext dataStatement() {
			return getRuleContext(DataStatementContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode MATERIALIZED() { return getToken(SQLParser.MATERIALIZED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public WithQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterWithQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitWithQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitWithQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithQueryContext withQuery() throws RecognitionException {
		WithQueryContext _localctx = new WithQueryContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_withQuery);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6416);
			((WithQueryContext)_localctx).queryName = identifier();
			setState(6428);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(6417);
				match(LEFT_PAREN);
				setState(6418);
				((WithQueryContext)_localctx).identifier = identifier();
				((WithQueryContext)_localctx).columnName.add(((WithQueryContext)_localctx).identifier);
				setState(6423);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6419);
					match(COMMA);
					setState(6420);
					((WithQueryContext)_localctx).identifier = identifier();
					((WithQueryContext)_localctx).columnName.add(((WithQueryContext)_localctx).identifier);
					}
					}
					setState(6425);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6426);
				match(RIGHT_PAREN);
				}
			}

			setState(6430);
			match(AS);
			setState(6435);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATERIALIZED || _la==NOT) {
				{
				setState(6432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(6431);
					match(NOT);
					}
				}

				setState(6434);
				match(MATERIALIZED);
				}
			}

			setState(6437);
			match(LEFT_PAREN);
			setState(6438);
			dataStatement();
			setState(6439);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectOpsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public SelectPrimaryContext selectPrimary() {
			return getRuleContext(SelectPrimaryContext.class,0);
		}
		public List<SelectOpsContext> selectOps() {
			return getRuleContexts(SelectOpsContext.class);
		}
		public SelectOpsContext selectOps(int i) {
			return getRuleContext(SelectOpsContext.class,i);
		}
		public TerminalNode INTERSECT() { return getToken(SQLParser.INTERSECT, 0); }
		public TerminalNode UNION() { return getToken(SQLParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(SQLParser.EXCEPT, 0); }
		public SetQualifierContext setQualifier() {
			return getRuleContext(SetQualifierContext.class,0);
		}
		public SelectOpsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOps; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSelectOps(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSelectOps(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSelectOps(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectOpsContext selectOps() throws RecognitionException {
		return selectOps(0);
	}

	private SelectOpsContext selectOps(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		SelectOpsContext _localctx = new SelectOpsContext(_ctx, _parentState);
		SelectOpsContext _prevctx = _localctx;
		int _startState = 632;
		enterRecursionRule(_localctx, 632, RULE_selectOps, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6447);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				{
				setState(6442);
				match(LEFT_PAREN);
				setState(6443);
				selectStmt();
				setState(6444);
				match(RIGHT_PAREN);
				}
				break;
			case VALUES:
			case SELECT:
			case TABLE:
				{
				setState(6446);
				selectPrimary();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(6457);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,824,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new SelectOpsContext(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_selectOps);
					setState(6449);
					if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
					setState(6450);
					_la = _input.LA(1);
					if ( !(((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (EXCEPT - 396)) | (1L << (INTERSECT - 396)) | (1L << (UNION - 396)))) != 0)) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(6452);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(6451);
						setQualifier();
						}
					}

					setState(6454);
					selectOps(3);
					}
					} 
				}
				setState(6459);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,824,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class SelectOpsNoParensContext extends ParserRuleContext {
		public SelectOpsContext selectOps() {
			return getRuleContext(SelectOpsContext.class,0);
		}
		public TerminalNode INTERSECT() { return getToken(SQLParser.INTERSECT, 0); }
		public TerminalNode UNION() { return getToken(SQLParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(SQLParser.EXCEPT, 0); }
		public SelectPrimaryContext selectPrimary() {
			return getRuleContext(SelectPrimaryContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public SetQualifierContext setQualifier() {
			return getRuleContext(SetQualifierContext.class,0);
		}
		public SelectOpsNoParensContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectOpsNoParens; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSelectOpsNoParens(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSelectOpsNoParens(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSelectOpsNoParens(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectOpsNoParensContext selectOpsNoParens() throws RecognitionException {
		SelectOpsNoParensContext _localctx = new SelectOpsNoParensContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_selectOpsNoParens);
		int _la;
		try {
			setState(6473);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,827,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6460);
				selectOps(0);
				setState(6461);
				_la = _input.LA(1);
				if ( !(((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (EXCEPT - 396)) | (1L << (INTERSECT - 396)) | (1L << (UNION - 396)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6463);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(6462);
					setQualifier();
					}
				}

				setState(6470);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case VALUES:
				case SELECT:
				case TABLE:
					{
					setState(6465);
					selectPrimary();
					}
					break;
				case LEFT_PAREN:
					{
					setState(6466);
					match(LEFT_PAREN);
					setState(6467);
					selectStmt();
					setState(6468);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6472);
				selectPrimary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectPrimaryContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(SQLParser.SELECT, 0); }
		public SetQualifierContext setQualifier() {
			return getRuleContext(SetQualifierContext.class,0);
		}
		public SelectListContext selectList() {
			return getRuleContext(SelectListContext.class,0);
		}
		public IntoTableContext intoTable() {
			return getRuleContext(IntoTableContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<FromItemContext> fromItem() {
			return getRuleContexts(FromItemContext.class);
		}
		public FromItemContext fromItem(int i) {
			return getRuleContext(FromItemContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public GroupbyClauseContext groupbyClause() {
			return getRuleContext(GroupbyClauseContext.class,0);
		}
		public TerminalNode HAVING() { return getToken(SQLParser.HAVING, 0); }
		public TerminalNode WINDOW() { return getToken(SQLParser.WINDOW, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(SQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(SQLParser.AS, i);
		}
		public List<WindowDefinitionContext> windowDefinition() {
			return getRuleContexts(WindowDefinitionContext.class);
		}
		public WindowDefinitionContext windowDefinition(int i) {
			return getRuleContext(WindowDefinitionContext.class,i);
		}
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public ValuesStmtContext valuesStmt() {
			return getRuleContext(ValuesStmtContext.class,0);
		}
		public SelectPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSelectPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSelectPrimary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSelectPrimary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectPrimaryContext selectPrimary() throws RecognitionException {
		SelectPrimaryContext _localctx = new SelectPrimaryContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_selectPrimary);
		int _la;
		try {
			int _alt;
			setState(6546);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(6475);
				match(SELECT);
				setState(6491);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,830,_ctx) ) {
				case 1:
					{
					setState(6476);
					setQualifier();
					setState(6489);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,829,_ctx) ) {
					case 1:
						{
						setState(6477);
						match(ON);
						setState(6478);
						match(LEFT_PAREN);
						setState(6479);
						vex(0);
						setState(6484);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6480);
							match(COMMA);
							setState(6481);
							vex(0);
							}
							}
							setState(6486);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(6487);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				}
				setState(6494);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,831,_ctx) ) {
				case 1:
					{
					setState(6493);
					selectList();
					}
					break;
				}
				setState(6497);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,832,_ctx) ) {
				case 1:
					{
					setState(6496);
					intoTable();
					}
					break;
				}
				setState(6508);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,834,_ctx) ) {
				case 1:
					{
					setState(6499);
					match(FROM);
					setState(6500);
					fromItem(0);
					setState(6505);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,833,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6501);
							match(COMMA);
							setState(6502);
							fromItem(0);
							}
							} 
						}
						setState(6507);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,833,_ctx);
					}
					}
					break;
				}
				setState(6512);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,835,_ctx) ) {
				case 1:
					{
					setState(6510);
					match(WHERE);
					setState(6511);
					vex(0);
					}
					break;
				}
				setState(6515);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,836,_ctx) ) {
				case 1:
					{
					setState(6514);
					groupbyClause();
					}
					break;
				}
				setState(6519);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,837,_ctx) ) {
				case 1:
					{
					setState(6517);
					match(HAVING);
					setState(6518);
					vex(0);
					}
					break;
				}
				setState(6535);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,839,_ctx) ) {
				case 1:
					{
					setState(6521);
					match(WINDOW);
					setState(6522);
					identifier();
					setState(6523);
					match(AS);
					setState(6524);
					windowDefinition();
					setState(6532);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,838,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(6525);
							match(COMMA);
							setState(6526);
							identifier();
							setState(6527);
							match(AS);
							setState(6528);
							windowDefinition();
							}
							} 
						}
						setState(6534);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,838,_ctx);
					}
					}
					break;
				}
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(6537);
				match(TABLE);
				setState(6539);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(6538);
					match(ONLY);
					}
				}

				setState(6541);
				schemaQualifiedName();
				setState(6543);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,841,_ctx) ) {
				case 1:
					{
					setState(6542);
					match(MULTIPLY);
					}
					break;
				}
				}
				break;
			case VALUES:
				enterOuterAlt(_localctx, 3);
				{
				setState(6545);
				valuesStmt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectListContext extends ParserRuleContext {
		public List<SelectSublistContext> selectSublist() {
			return getRuleContexts(SelectSublistContext.class);
		}
		public SelectSublistContext selectSublist(int i) {
			return getRuleContext(SelectSublistContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public SelectListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSelectList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSelectList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSelectList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectListContext selectList() throws RecognitionException {
		SelectListContext _localctx = new SelectListContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_selectList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6548);
			selectSublist();
			setState(6553);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6549);
					match(COMMA);
					setState(6550);
					selectSublist();
					}
					} 
				}
				setState(6555);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,843,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSublistContext extends ParserRuleContext {
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public ColLabelContext colLabel() {
			return getRuleContext(ColLabelContext.class,0);
		}
		public IdTokenContext idToken() {
			return getRuleContext(IdTokenContext.class,0);
		}
		public SelectSublistContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSublist; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSelectSublist(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSelectSublist(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSelectSublist(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSublistContext selectSublist() throws RecognitionException {
		SelectSublistContext _localctx = new SelectSublistContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_selectSublist);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6556);
			vex(0);
			setState(6560);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,844,_ctx) ) {
			case 1:
				{
				setState(6557);
				match(AS);
				setState(6558);
				colLabel();
				}
				break;
			case 2:
				{
				setState(6559);
				idToken();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntoTableContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(SQLParser.INTO, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode TEMPORARY() { return getToken(SQLParser.TEMPORARY, 0); }
		public TerminalNode TEMP() { return getToken(SQLParser.TEMP, 0); }
		public TerminalNode UNLOGGED() { return getToken(SQLParser.UNLOGGED, 0); }
		public IntoTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intoTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIntoTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIntoTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIntoTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntoTableContext intoTable() throws RecognitionException {
		IntoTableContext _localctx = new IntoTableContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_intoTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6562);
			match(INTO);
			setState(6564);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,845,_ctx) ) {
			case 1:
				{
				setState(6563);
				_la = _input.LA(1);
				if ( !(((((_la - 253)) & ~0x3f) == 0 && ((1L << (_la - 253)) & ((1L << (TEMP - 253)) | (1L << (TEMPORARY - 253)) | (1L << (UNLOGGED - 253)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(6567);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(6566);
				match(TABLE);
				}
			}

			setState(6569);
			schemaQualifiedName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromItemContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<FromItemContext> fromItem() {
			return getRuleContexts(FromItemContext.class);
		}
		public FromItemContext fromItem(int i) {
			return getRuleContext(FromItemContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public FromPrimaryContext fromPrimary() {
			return getRuleContext(FromPrimaryContext.class,0);
		}
		public TerminalNode CROSS() { return getToken(SQLParser.CROSS, 0); }
		public TerminalNode JOIN() { return getToken(SQLParser.JOIN, 0); }
		public TerminalNode NATURAL() { return getToken(SQLParser.NATURAL, 0); }
		public TerminalNode INNER() { return getToken(SQLParser.INNER, 0); }
		public TerminalNode LEFT() { return getToken(SQLParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(SQLParser.RIGHT, 0); }
		public TerminalNode FULL() { return getToken(SQLParser.FULL, 0); }
		public TerminalNode OUTER() { return getToken(SQLParser.OUTER, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public NamesInParensContext namesInParens() {
			return getRuleContext(NamesInParensContext.class,0);
		}
		public FromItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFromItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFromItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFromItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromItemContext fromItem() throws RecognitionException {
		return fromItem(0);
	}

	private FromItemContext fromItem(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		FromItemContext _localctx = new FromItemContext(_ctx, _parentState);
		FromItemContext _prevctx = _localctx;
		int _startState = 644;
		enterRecursionRule(_localctx, 644, RULE_fromItem, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6579);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,848,_ctx) ) {
			case 1:
				{
				setState(6572);
				match(LEFT_PAREN);
				setState(6573);
				fromItem(0);
				setState(6574);
				match(RIGHT_PAREN);
				setState(6576);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,847,_ctx) ) {
				case 1:
					{
					setState(6575);
					aliasClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(6578);
				fromPrimary();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(6624);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,856,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(6622);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,855,_ctx) ) {
					case 1:
						{
						_localctx = new FromItemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_fromItem);
						setState(6581);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(6582);
						match(CROSS);
						setState(6583);
						match(JOIN);
						setState(6584);
						fromItem(6);
						}
						break;
					case 2:
						{
						_localctx = new FromItemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_fromItem);
						setState(6585);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(6586);
						match(NATURAL);
						setState(6592);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case INNER:
							{
							setState(6587);
							match(INNER);
							}
							break;
						case FULL:
						case LEFT:
						case RIGHT:
							{
							setState(6588);
							_la = _input.LA(1);
							if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (FULL - 350)) | (1L << (LEFT - 350)) | (1L << (RIGHT - 350)))) != 0)) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(6590);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==OUTER) {
								{
								setState(6589);
								match(OUTER);
								}
							}

							}
							break;
						case JOIN:
							break;
						default:
							break;
						}
						setState(6594);
						match(JOIN);
						setState(6595);
						fromItem(3);
						}
						break;
					case 3:
						{
						_localctx = new FromItemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_fromItem);
						setState(6596);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(6602);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case INNER:
							{
							setState(6597);
							match(INNER);
							}
							break;
						case FULL:
						case LEFT:
						case RIGHT:
							{
							setState(6598);
							_la = _input.LA(1);
							if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (FULL - 350)) | (1L << (LEFT - 350)) | (1L << (RIGHT - 350)))) != 0)) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(6600);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==OUTER) {
								{
								setState(6599);
								match(OUTER);
								}
							}

							}
							break;
						case JOIN:
							break;
						default:
							break;
						}
						setState(6604);
						match(JOIN);
						setState(6605);
						fromItem(0);
						setState(6606);
						match(ON);
						setState(6607);
						vex(0);
						}
						break;
					case 4:
						{
						_localctx = new FromItemContext(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_fromItem);
						setState(6609);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(6615);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case INNER:
							{
							setState(6610);
							match(INNER);
							}
							break;
						case FULL:
						case LEFT:
						case RIGHT:
							{
							setState(6611);
							_la = _input.LA(1);
							if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (FULL - 350)) | (1L << (LEFT - 350)) | (1L << (RIGHT - 350)))) != 0)) ) {
							_errHandler.recoverInline(this);
							}
							else {
								if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
								_errHandler.reportMatch(this);
								consume();
							}
							setState(6613);
							_errHandler.sync(this);
							_la = _input.LA(1);
							if (_la==OUTER) {
								{
								setState(6612);
								match(OUTER);
								}
							}

							}
							break;
						case JOIN:
							break;
						default:
							break;
						}
						setState(6617);
						match(JOIN);
						setState(6618);
						fromItem(0);
						setState(6619);
						match(USING);
						setState(6620);
						namesInParens();
						}
						break;
					}
					} 
				}
				setState(6626);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,856,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class FromPrimaryContext extends ParserRuleContext {
		public IdentifierContext method;
		public IdentifierContext alias;
		public IdentifierContext identifier;
		public List<IdentifierContext> columnAlias = new ArrayList<IdentifierContext>();
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public AliasClauseContext aliasClause() {
			return getRuleContext(AliasClauseContext.class,0);
		}
		public TerminalNode TABLESAMPLE() { return getToken(SQLParser.TABLESAMPLE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode REPEATABLE() { return getToken(SQLParser.REPEATABLE, 0); }
		public TableSubqueryContext tableSubquery() {
			return getRuleContext(TableSubqueryContext.class,0);
		}
		public TerminalNode LATERAL() { return getToken(SQLParser.LATERAL, 0); }
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public TerminalNode WITH() { return getToken(SQLParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(SQLParser.ORDINALITY, 0); }
		public List<TerminalNode> AS() { return getTokens(SQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(SQLParser.AS, i);
		}
		public List<FromFunctionColumnDefContext> fromFunctionColumnDef() {
			return getRuleContexts(FromFunctionColumnDefContext.class);
		}
		public FromFunctionColumnDefContext fromFunctionColumnDef(int i) {
			return getRuleContext(FromFunctionColumnDefContext.class,i);
		}
		public TerminalNode ROWS() { return getToken(SQLParser.ROWS, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public FromPrimaryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromPrimary; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFromPrimary(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFromPrimary(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFromPrimary(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromPrimaryContext fromPrimary() throws RecognitionException {
		FromPrimaryContext _localctx = new FromPrimaryContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_fromPrimary);
		int _la;
		try {
			setState(6737);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,879,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6628);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ONLY) {
					{
					setState(6627);
					match(ONLY);
					}
				}

				setState(6630);
				schemaQualifiedName();
				setState(6632);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,858,_ctx) ) {
				case 1:
					{
					setState(6631);
					match(MULTIPLY);
					}
					break;
				}
				setState(6635);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,859,_ctx) ) {
				case 1:
					{
					setState(6634);
					aliasClause();
					}
					break;
				}
				setState(6653);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,862,_ctx) ) {
				case 1:
					{
					setState(6637);
					match(TABLESAMPLE);
					setState(6638);
					((FromPrimaryContext)_localctx).method = identifier();
					setState(6639);
					match(LEFT_PAREN);
					setState(6640);
					vex(0);
					setState(6645);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(6641);
						match(COMMA);
						setState(6642);
						vex(0);
						}
						}
						setState(6647);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(6648);
					match(RIGHT_PAREN);
					setState(6651);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,861,_ctx) ) {
					case 1:
						{
						setState(6649);
						match(REPEATABLE);
						setState(6650);
						vex(0);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6656);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(6655);
					match(LATERAL);
					}
				}

				setState(6658);
				tableSubquery();
				setState(6659);
				aliasClause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6662);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(6661);
					match(LATERAL);
					}
				}

				setState(6664);
				functionCall();
				setState(6667);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,865,_ctx) ) {
				case 1:
					{
					setState(6665);
					match(WITH);
					setState(6666);
					match(ORDINALITY);
					}
					break;
				}
				setState(6689);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,869,_ctx) ) {
				case 1:
					{
					setState(6669);
					match(AS);
					setState(6670);
					fromFunctionColumnDef();
					}
					break;
				case 2:
					{
					setState(6672);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(6671);
						match(AS);
						}
					}

					setState(6674);
					((FromPrimaryContext)_localctx).alias = identifier();
					setState(6687);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,868,_ctx) ) {
					case 1:
						{
						setState(6675);
						match(LEFT_PAREN);
						setState(6676);
						((FromPrimaryContext)_localctx).identifier = identifier();
						((FromPrimaryContext)_localctx).columnAlias.add(((FromPrimaryContext)_localctx).identifier);
						setState(6681);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6677);
							match(COMMA);
							setState(6678);
							((FromPrimaryContext)_localctx).identifier = identifier();
							((FromPrimaryContext)_localctx).columnAlias.add(((FromPrimaryContext)_localctx).identifier);
							}
							}
							setState(6683);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(6684);
						match(RIGHT_PAREN);
						}
						break;
					case 2:
						{
						setState(6686);
						fromFunctionColumnDef();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(6692);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LATERAL) {
					{
					setState(6691);
					match(LATERAL);
					}
				}

				setState(6694);
				match(ROWS);
				setState(6695);
				match(FROM);
				setState(6696);
				match(LEFT_PAREN);
				setState(6697);
				functionCall();
				setState(6700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6698);
					match(AS);
					setState(6699);
					fromFunctionColumnDef();
					}
				}

				setState(6710);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6702);
					match(COMMA);
					setState(6703);
					functionCall();
					setState(6706);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(6704);
						match(AS);
						setState(6705);
						fromFunctionColumnDef();
						}
					}

					}
					}
					setState(6712);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6713);
				match(RIGHT_PAREN);
				setState(6716);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,874,_ctx) ) {
				case 1:
					{
					setState(6714);
					match(WITH);
					setState(6715);
					match(ORDINALITY);
					}
					break;
				}
				setState(6735);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,878,_ctx) ) {
				case 1:
					{
					setState(6719);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(6718);
						match(AS);
						}
					}

					setState(6721);
					((FromPrimaryContext)_localctx).alias = identifier();
					setState(6733);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,877,_ctx) ) {
					case 1:
						{
						setState(6722);
						match(LEFT_PAREN);
						setState(6723);
						((FromPrimaryContext)_localctx).identifier = identifier();
						((FromPrimaryContext)_localctx).columnAlias.add(((FromPrimaryContext)_localctx).identifier);
						setState(6728);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(6724);
							match(COMMA);
							setState(6725);
							((FromPrimaryContext)_localctx).identifier = identifier();
							((FromPrimaryContext)_localctx).columnAlias.add(((FromPrimaryContext)_localctx).identifier);
							}
							}
							setState(6730);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(6731);
						match(RIGHT_PAREN);
						}
						break;
					}
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AliasClauseContext extends ParserRuleContext {
		public IdentifierContext alias;
		public IdentifierContext identifier;
		public List<IdentifierContext> columnAlias = new ArrayList<IdentifierContext>();
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public AliasClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aliasClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAliasClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAliasClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAliasClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AliasClauseContext aliasClause() throws RecognitionException {
		AliasClauseContext _localctx = new AliasClauseContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_aliasClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6740);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6739);
				match(AS);
				}
			}

			setState(6742);
			((AliasClauseContext)_localctx).alias = identifier();
			setState(6754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,882,_ctx) ) {
			case 1:
				{
				setState(6743);
				match(LEFT_PAREN);
				setState(6744);
				((AliasClauseContext)_localctx).identifier = identifier();
				((AliasClauseContext)_localctx).columnAlias.add(((AliasClauseContext)_localctx).identifier);
				setState(6749);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6745);
					match(COMMA);
					setState(6746);
					((AliasClauseContext)_localctx).identifier = identifier();
					((AliasClauseContext)_localctx).columnAlias.add(((AliasClauseContext)_localctx).identifier);
					}
					}
					setState(6751);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6752);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromFunctionColumnDefContext extends ParserRuleContext {
		public IdentifierContext identifier;
		public List<IdentifierContext> columnAlias = new ArrayList<IdentifierContext>();
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public FromFunctionColumnDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromFunctionColumnDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFromFunctionColumnDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFromFunctionColumnDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFromFunctionColumnDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromFunctionColumnDefContext fromFunctionColumnDef() throws RecognitionException {
		FromFunctionColumnDefContext _localctx = new FromFunctionColumnDefContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_fromFunctionColumnDef);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6756);
			match(LEFT_PAREN);
			setState(6757);
			((FromFunctionColumnDefContext)_localctx).identifier = identifier();
			((FromFunctionColumnDefContext)_localctx).columnAlias.add(((FromFunctionColumnDefContext)_localctx).identifier);
			setState(6758);
			dataType();
			setState(6765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6759);
				match(COMMA);
				setState(6760);
				((FromFunctionColumnDefContext)_localctx).identifier = identifier();
				((FromFunctionColumnDefContext)_localctx).columnAlias.add(((FromFunctionColumnDefContext)_localctx).identifier);
				setState(6761);
				dataType();
				}
				}
				setState(6767);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6768);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupbyClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(SQLParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public GroupingElementListContext groupingElementList() {
			return getRuleContext(GroupingElementListContext.class,0);
		}
		public GroupbyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupbyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGroupbyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGroupbyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitGroupbyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupbyClauseContext groupbyClause() throws RecognitionException {
		GroupbyClauseContext _localctx = new GroupbyClauseContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_groupbyClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6770);
			match(GROUP);
			setState(6771);
			match(BY);
			setState(6772);
			groupingElementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingElementListContext extends ParserRuleContext {
		public List<GroupingElementContext> groupingElement() {
			return getRuleContexts(GroupingElementContext.class);
		}
		public GroupingElementContext groupingElement(int i) {
			return getRuleContext(GroupingElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public GroupingElementListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingElementList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGroupingElementList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGroupingElementList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitGroupingElementList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingElementListContext groupingElementList() throws RecognitionException {
		GroupingElementListContext _localctx = new GroupingElementListContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_groupingElementList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6774);
			groupingElement();
			setState(6779);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,884,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6775);
					match(COMMA);
					setState(6776);
					groupingElement();
					}
					} 
				}
				setState(6781);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,884,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupingElementContext extends ParserRuleContext {
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public GroupingElementListContext groupingElementList() {
			return getRuleContext(GroupingElementListContext.class,0);
		}
		public TerminalNode ROLLUP() { return getToken(SQLParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(SQLParser.CUBE, 0); }
		public TerminalNode GROUPING() { return getToken(SQLParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(SQLParser.SETS, 0); }
		public GroupingElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupingElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterGroupingElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitGroupingElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitGroupingElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupingElementContext groupingElement() throws RecognitionException {
		GroupingElementContext _localctx = new GroupingElementContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_groupingElement);
		try {
			setState(6795);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,886,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6782);
				vex(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6783);
				match(LEFT_PAREN);
				setState(6784);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(6789);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ROLLUP:
					{
					setState(6785);
					match(ROLLUP);
					}
					break;
				case CUBE:
					{
					setState(6786);
					match(CUBE);
					}
					break;
				case GROUPING:
					{
					setState(6787);
					match(GROUPING);
					setState(6788);
					match(SETS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(6791);
				match(LEFT_PAREN);
				setState(6792);
				groupingElementList();
				setState(6793);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesStmtContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(SQLParser.VALUES, 0); }
		public List<ValuesValuesContext> valuesValues() {
			return getRuleContexts(ValuesValuesContext.class);
		}
		public ValuesValuesContext valuesValues(int i) {
			return getRuleContext(ValuesValuesContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ValuesStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterValuesStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitValuesStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitValuesStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesStmtContext valuesStmt() throws RecognitionException {
		ValuesStmtContext _localctx = new ValuesStmtContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_valuesStmt);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(6797);
			match(VALUES);
			setState(6798);
			valuesValues();
			setState(6803);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,887,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(6799);
					match(COMMA);
					setState(6800);
					valuesValues();
					}
					} 
				}
				setState(6805);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,887,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ValuesValuesContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(SQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SQLParser.DEFAULT, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ValuesValuesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_valuesValues; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterValuesValues(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitValuesValues(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitValuesValues(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValuesValuesContext valuesValues() throws RecognitionException {
		ValuesValuesContext _localctx = new ValuesValuesContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_valuesValues);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6806);
			match(LEFT_PAREN);
			setState(6809);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case AUTHORIZATION:
			case BINARY:
			case COLLATION:
			case CONCURRENTLY:
			case CROSS:
			case CURRENT_SCHEMA:
			case FREEZE:
			case FULL:
			case ILIKE:
			case INNER:
			case IS:
			case ISNULL:
			case JOIN:
			case LEFT:
			case LIKE:
			case NATURAL:
			case NOTNULL:
			case OUTER:
			case OVERLAPS:
			case RIGHT:
			case SIMILAR:
			case TABLESAMPLE:
			case VERBOSE:
			case ALL:
			case ANY:
			case ARRAY:
			case CASE:
			case CAST:
			case CURRENT_CATALOG:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case CURRENT_USER:
			case FALSE:
			case LOCALTIME:
			case LOCALTIMESTAMP:
			case NOT:
			case NULL:
			case ON:
			case SESSION_USER:
			case SOME:
			case TRUE:
			case USER:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case LEFT_PAREN:
			case PLUS:
			case MINUS:
			case MULTIPLY:
			case LESS_LESS:
			case GREATER_GREATER:
			case HASH_SIGN:
			case PLACEHOLDER:
			case OP_CHARS:
			case NUMBER_LITERAL:
			case REAL_NUMBER:
			case DOLLAR_NUMBER:
			case Identifier:
			case QuotedIdentifier:
			case Character_String_Literal:
			case BeginDollarStringConstant:
				{
				setState(6807);
				vex(0);
				}
				break;
			case DEFAULT:
				{
				setState(6808);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6818);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6811);
				match(COMMA);
				setState(6814);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case TABLESAMPLE:
				case VERBOSE:
				case ALL:
				case ANY:
				case ARRAY:
				case CASE:
				case CAST:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case FALSE:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL:
				case ON:
				case SESSION_USER:
				case SOME:
				case TRUE:
				case USER:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case LEFT_PAREN:
				case PLUS:
				case MINUS:
				case MULTIPLY:
				case LESS_LESS:
				case GREATER_GREATER:
				case HASH_SIGN:
				case PLACEHOLDER:
				case OP_CHARS:
				case NUMBER_LITERAL:
				case REAL_NUMBER:
				case DOLLAR_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(6812);
					vex(0);
					}
					break;
				case DEFAULT:
					{
					setState(6813);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				setState(6820);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6821);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderbyClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(SQLParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public SortSpecifierListContext sortSpecifierList() {
			return getRuleContext(SortSpecifierListContext.class,0);
		}
		public OrderbyClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderbyClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOrderbyClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOrderbyClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOrderbyClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderbyClauseContext orderbyClause() throws RecognitionException {
		OrderbyClauseContext _localctx = new OrderbyClauseContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_orderbyClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6823);
			match(ORDER);
			setState(6824);
			match(BY);
			setState(6825);
			sortSpecifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortSpecifierListContext extends ParserRuleContext {
		public List<SortSpecifierContext> sortSpecifier() {
			return getRuleContexts(SortSpecifierContext.class);
		}
		public SortSpecifierContext sortSpecifier(int i) {
			return getRuleContext(SortSpecifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public SortSpecifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortSpecifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSortSpecifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSortSpecifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSortSpecifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortSpecifierListContext sortSpecifierList() throws RecognitionException {
		SortSpecifierListContext _localctx = new SortSpecifierListContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_sortSpecifierList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6827);
			sortSpecifier();
			setState(6832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6828);
				match(COMMA);
				setState(6829);
				sortSpecifier();
				}
				}
				setState(6834);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SortSpecifierContext extends ParserRuleContext {
		public VexContext key;
		public SchemaQualifiedNameContext opclass;
		public OrderSpecificationContext order;
		public NullOrderingContext nullOrder;
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public OrderSpecificationContext orderSpecification() {
			return getRuleContext(OrderSpecificationContext.class,0);
		}
		public NullOrderingContext nullOrdering() {
			return getRuleContext(NullOrderingContext.class,0);
		}
		public SortSpecifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sortSpecifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterSortSpecifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitSortSpecifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitSortSpecifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SortSpecifierContext sortSpecifier() throws RecognitionException {
		SortSpecifierContext _localctx = new SortSpecifierContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_sortSpecifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6835);
			((SortSpecifierContext)_localctx).key = vex(0);
			setState(6837);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,892,_ctx) ) {
			case 1:
				{
				setState(6836);
				((SortSpecifierContext)_localctx).opclass = schemaQualifiedName();
				}
				break;
			}
			setState(6840);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==USING) {
				{
				setState(6839);
				((SortSpecifierContext)_localctx).order = orderSpecification();
				}
			}

			setState(6843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(6842);
				((SortSpecifierContext)_localctx).nullOrder = nullOrdering();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderSpecificationContext extends ParserRuleContext {
		public TerminalNode ASC() { return getToken(SQLParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(SQLParser.DESC, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public AllOpRefContext allOpRef() {
			return getRuleContext(AllOpRefContext.class,0);
		}
		public OrderSpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderSpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOrderSpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOrderSpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOrderSpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderSpecificationContext orderSpecification() throws RecognitionException {
		OrderSpecificationContext _localctx = new OrderSpecificationContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_orderSpecification);
		try {
			setState(6849);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASC:
				enterOuterAlt(_localctx, 1);
				{
				setState(6845);
				match(ASC);
				}
				break;
			case DESC:
				enterOuterAlt(_localctx, 2);
				{
				setState(6846);
				match(DESC);
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 3);
				{
				setState(6847);
				match(USING);
				setState(6848);
				allOpRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullOrderingContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(SQLParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(SQLParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(SQLParser.LAST, 0); }
		public NullOrderingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullOrdering; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNullOrdering(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNullOrdering(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitNullOrdering(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullOrderingContext nullOrdering() throws RecognitionException {
		NullOrderingContext _localctx = new NullOrderingContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_nullOrdering);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6851);
			match(NULLS);
			setState(6852);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStmtForPsqlContext extends ParserRuleContext {
		public SchemaQualifiedNameContext insertTableName;
		public IdentifierContext alias;
		public TerminalNode INSERT() { return getToken(SQLParser.INSERT, 0); }
		public TerminalNode INTO() { return getToken(SQLParser.INTO, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode VALUES() { return getToken(SQLParser.VALUES, 0); }
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public TerminalNode OVERRIDING() { return getToken(SQLParser.OVERRIDING, 0); }
		public TerminalNode VALUE() { return getToken(SQLParser.VALUE, 0); }
		public InsertColumnsContext insertColumns() {
			return getRuleContext(InsertColumnsContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode CONFLICT() { return getToken(SQLParser.CONFLICT, 0); }
		public ConflictActionContext conflictAction() {
			return getRuleContext(ConflictActionContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(SQLParser.RETURNING, 0); }
		public SelectListContext selectList() {
			return getRuleContext(SelectListContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SYSTEM() { return getToken(SQLParser.SYSTEM, 0); }
		public TerminalNode USER() { return getToken(SQLParser.USER, 0); }
		public ConflictObjectContext conflictObject() {
			return getRuleContext(ConflictObjectContext.class,0);
		}
		public InsertStmtForPsqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStmtForPsql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterInsertStmtForPsql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitInsertStmtForPsql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitInsertStmtForPsql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStmtForPsqlContext insertStmtForPsql() throws RecognitionException {
		InsertStmtForPsqlContext _localctx = new InsertStmtForPsqlContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_insertStmtForPsql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6855);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6854);
				withClause();
				}
			}

			setState(6857);
			match(INSERT);
			setState(6858);
			match(INTO);
			setState(6859);
			((InsertStmtForPsqlContext)_localctx).insertTableName = schemaQualifiedName();
			setState(6862);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(6860);
				match(AS);
				setState(6861);
				((InsertStmtForPsqlContext)_localctx).alias = identifier();
				}
			}

			setState(6867);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OVERRIDING) {
				{
				setState(6864);
				match(OVERRIDING);
				setState(6865);
				_la = _input.LA(1);
				if ( !(_la==SYSTEM || _la==USER) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(6866);
				match(VALUE);
				}
			}

			setState(6870);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,899,_ctx) ) {
			case 1:
				{
				setState(6869);
				insertColumns();
				}
				break;
			}
			setState(6875);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
			case SELECT:
			case TABLE:
			case WITH:
			case LEFT_PAREN:
				{
				setState(6872);
				selectStmt();
				}
				break;
			case DEFAULT:
				{
				setState(6873);
				match(DEFAULT);
				setState(6874);
				match(VALUES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(6883);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(6877);
				match(ON);
				setState(6878);
				match(CONFLICT);
				setState(6880);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ON || _la==LEFT_PAREN) {
					{
					setState(6879);
					conflictObject();
					}
				}

				setState(6882);
				conflictAction();
				}
			}

			setState(6887);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(6885);
				match(RETURNING);
				setState(6886);
				selectList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertColumnsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<IndirectionIdentifierContext> indirectionIdentifier() {
			return getRuleContexts(IndirectionIdentifierContext.class);
		}
		public IndirectionIdentifierContext indirectionIdentifier(int i) {
			return getRuleContext(IndirectionIdentifierContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public InsertColumnsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertColumns; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterInsertColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitInsertColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitInsertColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertColumnsContext insertColumns() throws RecognitionException {
		InsertColumnsContext _localctx = new InsertColumnsContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_insertColumns);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6889);
			match(LEFT_PAREN);
			setState(6890);
			indirectionIdentifier();
			setState(6895);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6891);
				match(COMMA);
				setState(6892);
				indirectionIdentifier();
				}
				}
				setState(6897);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(6898);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndirectionIdentifierContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public IndirectionListContext indirectionList() {
			return getRuleContext(IndirectionListContext.class,0);
		}
		public IndirectionIdentifierContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indirectionIdentifier; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIndirectionIdentifier(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIndirectionIdentifier(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIndirectionIdentifier(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndirectionIdentifierContext indirectionIdentifier() throws RecognitionException {
		IndirectionIdentifierContext _localctx = new IndirectionIdentifierContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_indirectionIdentifier);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6900);
			identifier();
			setState(6902);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DOT || _la==LEFT_BRACKET) {
				{
				setState(6901);
				indirectionList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConflictObjectContext extends ParserRuleContext {
		public IndexSortContext indexSort() {
			return getRuleContext(IndexSortContext.class,0);
		}
		public IndexWhereContext indexWhere() {
			return getRuleContext(IndexWhereContext.class,0);
		}
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public ConflictObjectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conflictObject; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterConflictObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitConflictObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitConflictObject(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConflictObjectContext conflictObject() throws RecognitionException {
		ConflictObjectContext _localctx = new ConflictObjectContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_conflictObject);
		int _la;
		try {
			setState(6911);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(6904);
				indexSort();
				setState(6906);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(6905);
					indexWhere();
					}
				}

				}
				break;
			case ON:
				enterOuterAlt(_localctx, 2);
				{
				setState(6908);
				match(ON);
				setState(6909);
				match(CONSTRAINT);
				setState(6910);
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConflictActionContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(SQLParser.DO, 0); }
		public TerminalNode NOTHING() { return getToken(SQLParser.NOTHING, 0); }
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public List<UpdateSetContext> updateSet() {
			return getRuleContexts(UpdateSetContext.class);
		}
		public UpdateSetContext updateSet(int i) {
			return getRuleContext(UpdateSetContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public ConflictActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conflictAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterConflictAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitConflictAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitConflictAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConflictActionContext conflictAction() throws RecognitionException {
		ConflictActionContext _localctx = new ConflictActionContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_conflictAction);
		int _la;
		try {
			setState(6930);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,910,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(6913);
				match(DO);
				setState(6914);
				match(NOTHING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(6915);
				match(DO);
				setState(6916);
				match(UPDATE);
				setState(6917);
				match(SET);
				setState(6918);
				updateSet();
				setState(6923);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6919);
					match(COMMA);
					setState(6920);
					updateSet();
					}
					}
					setState(6925);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(6928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(6926);
					match(WHERE);
					setState(6927);
					vex(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStmtForPsqlContext extends ParserRuleContext {
		public SchemaQualifiedNameContext deleteTableName;
		public IdentifierContext alias;
		public IdentifierContext cursor;
		public TerminalNode DELETE() { return getToken(SQLParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public List<FromItemContext> fromItem() {
			return getRuleContexts(FromItemContext.class);
		}
		public FromItemContext fromItem(int i) {
			return getRuleContext(FromItemContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public TerminalNode RETURNING() { return getToken(SQLParser.RETURNING, 0); }
		public SelectListContext selectList() {
			return getRuleContext(SelectListContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public DeleteStmtForPsqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStmtForPsql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDeleteStmtForPsql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDeleteStmtForPsql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDeleteStmtForPsql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStmtForPsqlContext deleteStmtForPsql() throws RecognitionException {
		DeleteStmtForPsqlContext _localctx = new DeleteStmtForPsqlContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_deleteStmtForPsql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6933);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6932);
				withClause();
				}
			}

			setState(6935);
			match(DELETE);
			setState(6936);
			match(FROM);
			setState(6938);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(6937);
				match(ONLY);
				}
			}

			setState(6940);
			((DeleteStmtForPsqlContext)_localctx).deleteTableName = schemaQualifiedName();
			setState(6942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLY) {
				{
				setState(6941);
				match(MULTIPLY);
				}
			}

			setState(6948);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,915,_ctx) ) {
			case 1:
				{
				setState(6945);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6944);
					match(AS);
					}
				}

				setState(6947);
				((DeleteStmtForPsqlContext)_localctx).alias = identifier();
				}
				break;
			}
			setState(6959);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(6950);
				match(USING);
				setState(6951);
				fromItem(0);
				setState(6956);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(6952);
					match(COMMA);
					setState(6953);
					fromItem(0);
					}
					}
					setState(6958);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(6968);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(6961);
				match(WHERE);
				setState(6966);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,918,_ctx) ) {
				case 1:
					{
					setState(6962);
					vex(0);
					}
					break;
				case 2:
					{
					setState(6963);
					match(CURRENT);
					setState(6964);
					match(OF);
					setState(6965);
					((DeleteStmtForPsqlContext)_localctx).cursor = identifier();
					}
					break;
				}
				}
			}

			setState(6972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(6970);
				match(RETURNING);
				setState(6971);
				selectList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStmtForPsqlContext extends ParserRuleContext {
		public SchemaQualifiedNameContext updateTableName;
		public IdentifierContext alias;
		public IdentifierContext cursor;
		public TerminalNode UPDATE() { return getToken(SQLParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(SQLParser.SET, 0); }
		public List<UpdateSetContext> updateSet() {
			return getRuleContexts(UpdateSetContext.class);
		}
		public UpdateSetContext updateSet(int i) {
			return getRuleContext(UpdateSetContext.class,i);
		}
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public WithClauseContext withClause() {
			return getRuleContext(WithClauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(SQLParser.ONLY, 0); }
		public TerminalNode MULTIPLY() { return getToken(SQLParser.MULTIPLY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<FromItemContext> fromItem() {
			return getRuleContexts(FromItemContext.class);
		}
		public FromItemContext fromItem(int i) {
			return getRuleContext(FromItemContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public TerminalNode RETURNING() { return getToken(SQLParser.RETURNING, 0); }
		public SelectListContext selectList() {
			return getRuleContext(SelectListContext.class,0);
		}
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(SQLParser.OF, 0); }
		public TerminalNode AS() { return getToken(SQLParser.AS, 0); }
		public UpdateStmtForPsqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStmtForPsql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUpdateStmtForPsql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUpdateStmtForPsql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUpdateStmtForPsql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStmtForPsqlContext updateStmtForPsql() throws RecognitionException {
		UpdateStmtForPsqlContext _localctx = new UpdateStmtForPsqlContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_updateStmtForPsql);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(6975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(6974);
				withClause();
				}
			}

			setState(6977);
			match(UPDATE);
			setState(6979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ONLY) {
				{
				setState(6978);
				match(ONLY);
				}
			}

			setState(6981);
			((UpdateStmtForPsqlContext)_localctx).updateTableName = schemaQualifiedName();
			setState(6983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MULTIPLY) {
				{
				setState(6982);
				match(MULTIPLY);
				}
			}

			setState(6989);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,925,_ctx) ) {
			case 1:
				{
				setState(6986);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(6985);
					match(AS);
					}
				}

				setState(6988);
				((UpdateStmtForPsqlContext)_localctx).alias = identifier();
				}
				break;
			}
			setState(6991);
			match(SET);
			setState(6992);
			updateSet();
			setState(6997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(6993);
				match(COMMA);
				setState(6994);
				updateSet();
				}
				}
				setState(6999);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7009);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(7000);
				match(FROM);
				setState(7001);
				fromItem(0);
				setState(7006);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7002);
					match(COMMA);
					setState(7003);
					fromItem(0);
					}
					}
					setState(7008);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(7018);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(7011);
				match(WHERE);
				setState(7016);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,929,_ctx) ) {
				case 1:
					{
					setState(7012);
					vex(0);
					}
					break;
				case 2:
					{
					setState(7013);
					match(CURRENT);
					setState(7014);
					match(OF);
					setState(7015);
					((UpdateStmtForPsqlContext)_localctx).cursor = identifier();
					}
					break;
				}
				}
			}

			setState(7022);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURNING) {
				{
				setState(7020);
				match(RETURNING);
				setState(7021);
				selectList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateSetContext extends ParserRuleContext {
		public IndirectionIdentifierContext indirectionIdentifier;
		public List<IndirectionIdentifierContext> column = new ArrayList<IndirectionIdentifierContext>();
		public VexContext vex;
		public List<VexContext> value = new ArrayList<VexContext>();
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public List<IndirectionIdentifierContext> indirectionIdentifier() {
			return getRuleContexts(IndirectionIdentifierContext.class);
		}
		public IndirectionIdentifierContext indirectionIdentifier(int i) {
			return getRuleContext(IndirectionIdentifierContext.class,i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(SQLParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(SQLParser.DEFAULT, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(SQLParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(SQLParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(SQLParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(SQLParser.RIGHT_PAREN, i);
		}
		public TableSubqueryContext tableSubquery() {
			return getRuleContext(TableSubqueryContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode ROW() { return getToken(SQLParser.ROW, 0); }
		public UpdateSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUpdateSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUpdateSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUpdateSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateSetContext updateSet() throws RecognitionException {
		UpdateSetContext _localctx = new UpdateSetContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_updateSet);
		int _la;
		try {
			setState(7063);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				enterOuterAlt(_localctx, 1);
				{
				setState(7024);
				((UpdateSetContext)_localctx).indirectionIdentifier = indirectionIdentifier();
				((UpdateSetContext)_localctx).column.add(((UpdateSetContext)_localctx).indirectionIdentifier);
				setState(7025);
				match(EQUAL);
				setState(7028);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case AUTHORIZATION:
				case BINARY:
				case COLLATION:
				case CONCURRENTLY:
				case CROSS:
				case CURRENT_SCHEMA:
				case FREEZE:
				case FULL:
				case ILIKE:
				case INNER:
				case IS:
				case ISNULL:
				case JOIN:
				case LEFT:
				case LIKE:
				case NATURAL:
				case NOTNULL:
				case OUTER:
				case OVERLAPS:
				case RIGHT:
				case SIMILAR:
				case TABLESAMPLE:
				case VERBOSE:
				case ALL:
				case ANY:
				case ARRAY:
				case CASE:
				case CAST:
				case CURRENT_CATALOG:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case CURRENT_USER:
				case FALSE:
				case LOCALTIME:
				case LOCALTIMESTAMP:
				case NOT:
				case NULL:
				case ON:
				case SESSION_USER:
				case SOME:
				case TRUE:
				case USER:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case LEFT_PAREN:
				case PLUS:
				case MINUS:
				case MULTIPLY:
				case LESS_LESS:
				case GREATER_GREATER:
				case HASH_SIGN:
				case PLACEHOLDER:
				case OP_CHARS:
				case NUMBER_LITERAL:
				case REAL_NUMBER:
				case DOLLAR_NUMBER:
				case Identifier:
				case QuotedIdentifier:
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(7026);
					((UpdateSetContext)_localctx).vex = vex(0);
					((UpdateSetContext)_localctx).value.add(((UpdateSetContext)_localctx).vex);
					}
					break;
				case DEFAULT:
					{
					setState(7027);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(7030);
				match(LEFT_PAREN);
				setState(7031);
				((UpdateSetContext)_localctx).indirectionIdentifier = indirectionIdentifier();
				((UpdateSetContext)_localctx).column.add(((UpdateSetContext)_localctx).indirectionIdentifier);
				setState(7036);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7032);
					match(COMMA);
					setState(7033);
					((UpdateSetContext)_localctx).indirectionIdentifier = indirectionIdentifier();
					((UpdateSetContext)_localctx).column.add(((UpdateSetContext)_localctx).indirectionIdentifier);
					}
					}
					setState(7038);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7039);
				match(RIGHT_PAREN);
				setState(7040);
				match(EQUAL);
				setState(7042);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ROW) {
					{
					setState(7041);
					match(ROW);
					}
				}

				setState(7061);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,938,_ctx) ) {
				case 1:
					{
					setState(7044);
					match(LEFT_PAREN);
					setState(7047);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ABORT:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATTACH:
					case ATTRIBUTE:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BY:
					case CACHE:
					case CALL:
					case CALLED:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CHAIN:
					case CHARACTERISTICS:
					case CHECKPOINT:
					case CLASS:
					case CLOSE:
					case CLUSTER:
					case COLUMNS:
					case COMMENT:
					case COMMENTS:
					case COMMIT:
					case COMMITTED:
					case CONFIGURATION:
					case CONFLICT:
					case CONNECTION:
					case CONSTRAINTS:
					case CONTENT:
					case CONTINUE:
					case CONVERSION:
					case COPY:
					case COST:
					case CSV:
					case CUBE:
					case CURRENT:
					case CURSOR:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DEALLOCATE:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DEPENDS:
					case DETACH:
					case DICTIONARY:
					case DISABLE:
					case DISCARD:
					case DOCUMENT:
					case DOMAIN:
					case DOUBLE:
					case DROP:
					case EACH:
					case ENABLE:
					case ENCODING:
					case ENCRYPTED:
					case ENUM:
					case ESCAPE:
					case EVENT:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXECUTE:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORWARD:
					case FUNCTION:
					case FUNCTIONS:
					case GENERATED:
					case GLOBAL:
					case GRANTED:
					case GROUPS:
					case HANDLER:
					case HEADER:
					case HOLD:
					case HOUR:
					case IDENTITY:
					case IF:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLICIT:
					case IMPORT:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDEXES:
					case INHERIT:
					case INHERITS:
					case INLINE:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTEAD:
					case INVOKER:
					case ISOLATION:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAKPROOF:
					case LEVEL:
					case LISTEN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCKED:
					case LOGGED:
					case MAPPING:
					case MATCH:
					case MATERIALIZED:
					case MAXVALUE:
					case METHOD:
					case MINUTE:
					case MINVALUE:
					case MODE:
					case MONTH:
					case MOVE:
					case NAME:
					case NAMES:
					case NEW:
					case NEXT:
					case NO:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLS:
					case OBJECT:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDINALITY:
					case OTHERS:
					case OVER:
					case OVERRIDING:
					case OWNED:
					case OWNER:
					case PARALLEL:
					case PARSER:
					case PARTIAL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PLANS:
					case POLICY:
					case PRECEDING:
					case PREPARE:
					case PREPARED:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PROCEDURES:
					case PROGRAM:
					case PUBLICATION:
					case QUOTE:
					case RANGE:
					case READ:
					case REASSIGN:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case REPLICA:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RETURNS:
					case REVOKE:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINES:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMAS:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECURITY:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER:
					case SESSION:
					case SET:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SKIP_:
					case SNAPSHOT:
					case SQL:
					case STABLE:
					case STANDALONE:
					case START:
					case STATEMENT:
					case STATISTICS:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STORED:
					case STRICT:
					case STRIP:
					case SUBSCRIPTION:
					case SUPPORT:
					case SYSID:
					case SYSTEM:
					case TABLES:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TEXT:
					case TIES:
					case TRANSACTION:
					case TRANSFORM:
					case TRIGGER:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case TYPES:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNLOGGED:
					case UNTIL:
					case UPDATE:
					case VACUUM:
					case VALID:
					case VALIDATE:
					case VALIDATOR:
					case VALUE:
					case VARYING:
					case VERSION:
					case VIEW:
					case VIEWS:
					case VOLATILE:
					case WHITESPACE:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRAPPER:
					case WRITE:
					case XML:
					case YEAR:
					case YES:
					case ZONE:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BOOLEAN:
					case CHAR:
					case CHARACTER:
					case COALESCE:
					case DEC:
					case DECIMAL:
					case EXISTS:
					case EXTRACT:
					case FLOAT:
					case GREATEST:
					case GROUPING:
					case INOUT:
					case INT:
					case INTEGER:
					case INTERVAL:
					case LEAST:
					case NATIONAL:
					case NCHAR:
					case NONE:
					case NULLIF:
					case NUMERIC:
					case OUT:
					case OVERLAY:
					case POSITION:
					case PRECISION:
					case REAL:
					case ROW:
					case SETOF:
					case SMALLINT:
					case SUBSTRING:
					case TIME:
					case TIMESTAMP:
					case TREAT:
					case TRIM:
					case VALUES:
					case VARCHAR:
					case XMLATTRIBUTES:
					case XMLCONCAT:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case AUTHORIZATION:
					case BINARY:
					case COLLATION:
					case CONCURRENTLY:
					case CROSS:
					case CURRENT_SCHEMA:
					case FREEZE:
					case FULL:
					case ILIKE:
					case INNER:
					case IS:
					case ISNULL:
					case JOIN:
					case LEFT:
					case LIKE:
					case NATURAL:
					case NOTNULL:
					case OUTER:
					case OVERLAPS:
					case RIGHT:
					case SIMILAR:
					case TABLESAMPLE:
					case VERBOSE:
					case ALL:
					case ANY:
					case ARRAY:
					case CASE:
					case CAST:
					case CURRENT_CATALOG:
					case CURRENT_DATE:
					case CURRENT_TIME:
					case CURRENT_TIMESTAMP:
					case CURRENT_USER:
					case FALSE:
					case LOCALTIME:
					case LOCALTIMESTAMP:
					case NOT:
					case NULL:
					case ON:
					case SESSION_USER:
					case SOME:
					case TRUE:
					case USER:
					case ALIGNMENT:
					case BASETYPE:
					case BUFFERS:
					case BYPASSRLS:
					case CANONICAL:
					case CATEGORY:
					case COLLATABLE:
					case COMBINEFUNC:
					case COMMUTATOR:
					case CONNECT:
					case COSTS:
					case CREATEDB:
					case CREATEROLE:
					case DESERIALFUNC:
					case DETERMINISTIC:
					case DISABLE_PAGE_SKIPPING:
					case ELEMENT:
					case EXTENDED:
					case FINALFUNC:
					case FINALFUNC_EXTRA:
					case FINALFUNC_MODIFY:
					case FORCE_NOT_NULL:
					case FORCE_NULL:
					case FORCE_QUOTE:
					case FORMAT:
					case GETTOKEN:
					case HASH:
					case HASHES:
					case HEADLINE:
					case HYPOTHETICAL:
					case INDEX_CLEANUP:
					case INIT:
					case INITCOND:
					case INTERNALLENGTH:
					case JSON:
					case LC_COLLATE:
					case LC_CTYPE:
					case LEFTARG:
					case LEXIZE:
					case LEXTYPES:
					case LIST:
					case LOCALE:
					case LOGIN:
					case MAIN:
					case MERGES:
					case MFINALFUNC:
					case MFINALFUNC_EXTRA:
					case MFINALFUNC_MODIFY:
					case MINITCOND:
					case MINVFUNC:
					case MODULUS:
					case MSFUNC:
					case MSSPACE:
					case MSTYPE:
					case NEGATOR:
					case NOBYPASSRLS:
					case NOCREATEDB:
					case NOCREATEROLE:
					case NOINHERIT:
					case NOLOGIN:
					case NOREPLICATION:
					case NOSUPERUSER:
					case OUTPUT:
					case PASSEDBYVALUE:
					case PATH:
					case PERMISSIVE:
					case PLAIN:
					case PREFERRED:
					case PROVIDER:
					case READ_ONLY:
					case READ_WRITE:
					case RECEIVE:
					case REMAINDER:
					case REPLICATION:
					case RESTRICTED:
					case RESTRICTIVE:
					case RIGHTARG:
					case SAFE:
					case SEND:
					case SERIALFUNC:
					case SETTINGS:
					case SFUNC:
					case SHAREABLE:
					case SKIP_LOCKED:
					case SORTOP:
					case SSPACE:
					case STYPE:
					case SUBTYPE_DIFF:
					case SUBTYPE_OPCLASS:
					case SUBTYPE:
					case SUMMARY:
					case SUPERUSER:
					case TIMING:
					case TYPMOD_IN:
					case TYPMOD_OUT:
					case UNSAFE:
					case USAGE:
					case VARIABLE:
					case YAML:
					case ALIAS:
					case ASSERT:
					case CONSTANT:
					case DATATYPE:
					case DEBUG:
					case DETAIL:
					case DIAGNOSTICS:
					case ELSEIF:
					case ELSIF:
					case ERRCODE:
					case EXIT:
					case EXCEPTION:
					case FOREACH:
					case GET:
					case HINT:
					case INFO:
					case LOG:
					case LOOP:
					case MESSAGE:
					case NOTICE:
					case OPEN:
					case PERFORM:
					case QUERY:
					case RAISE:
					case RECORD:
					case RETURN:
					case REVERSE:
					case ROWTYPE:
					case SLICE:
					case SQLSTATE:
					case STACKED:
					case WARNING:
					case WHILE:
					case LEFT_PAREN:
					case PLUS:
					case MINUS:
					case MULTIPLY:
					case LESS_LESS:
					case GREATER_GREATER:
					case HASH_SIGN:
					case PLACEHOLDER:
					case OP_CHARS:
					case NUMBER_LITERAL:
					case REAL_NUMBER:
					case DOLLAR_NUMBER:
					case Identifier:
					case QuotedIdentifier:
					case Character_String_Literal:
					case BeginDollarStringConstant:
						{
						setState(7045);
						((UpdateSetContext)_localctx).vex = vex(0);
						((UpdateSetContext)_localctx).value.add(((UpdateSetContext)_localctx).vex);
						}
						break;
					case DEFAULT:
						{
						setState(7046);
						match(DEFAULT);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7056);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7049);
						match(COMMA);
						setState(7052);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case ABORT:
						case ABSOLUTE:
						case ACCESS:
						case ACTION:
						case ADD:
						case ADMIN:
						case AFTER:
						case AGGREGATE:
						case ALSO:
						case ALTER:
						case ALWAYS:
						case ASSERTION:
						case ASSIGNMENT:
						case AT:
						case ATTACH:
						case ATTRIBUTE:
						case BACKWARD:
						case BEFORE:
						case BEGIN:
						case BY:
						case CACHE:
						case CALL:
						case CALLED:
						case CASCADE:
						case CASCADED:
						case CATALOG:
						case CHAIN:
						case CHARACTERISTICS:
						case CHECKPOINT:
						case CLASS:
						case CLOSE:
						case CLUSTER:
						case COLUMNS:
						case COMMENT:
						case COMMENTS:
						case COMMIT:
						case COMMITTED:
						case CONFIGURATION:
						case CONFLICT:
						case CONNECTION:
						case CONSTRAINTS:
						case CONTENT:
						case CONTINUE:
						case CONVERSION:
						case COPY:
						case COST:
						case CSV:
						case CUBE:
						case CURRENT:
						case CURSOR:
						case CYCLE:
						case DATA:
						case DATABASE:
						case DAY:
						case DEALLOCATE:
						case DECLARE:
						case DEFAULTS:
						case DEFERRED:
						case DEFINER:
						case DELETE:
						case DELIMITER:
						case DELIMITERS:
						case DEPENDS:
						case DETACH:
						case DICTIONARY:
						case DISABLE:
						case DISCARD:
						case DOCUMENT:
						case DOMAIN:
						case DOUBLE:
						case DROP:
						case EACH:
						case ENABLE:
						case ENCODING:
						case ENCRYPTED:
						case ENUM:
						case ESCAPE:
						case EVENT:
						case EXCLUDE:
						case EXCLUDING:
						case EXCLUSIVE:
						case EXECUTE:
						case EXPLAIN:
						case EXTENSION:
						case EXTERNAL:
						case FAMILY:
						case FILTER:
						case FIRST:
						case FOLLOWING:
						case FORCE:
						case FORWARD:
						case FUNCTION:
						case FUNCTIONS:
						case GENERATED:
						case GLOBAL:
						case GRANTED:
						case GROUPS:
						case HANDLER:
						case HEADER:
						case HOLD:
						case HOUR:
						case IDENTITY:
						case IF:
						case IMMEDIATE:
						case IMMUTABLE:
						case IMPLICIT:
						case IMPORT:
						case INCLUDE:
						case INCLUDING:
						case INCREMENT:
						case INDEX:
						case INDEXES:
						case INHERIT:
						case INHERITS:
						case INLINE:
						case INPUT:
						case INSENSITIVE:
						case INSERT:
						case INSTEAD:
						case INVOKER:
						case ISOLATION:
						case KEY:
						case LABEL:
						case LANGUAGE:
						case LARGE:
						case LAST:
						case LEAKPROOF:
						case LEVEL:
						case LISTEN:
						case LOAD:
						case LOCAL:
						case LOCATION:
						case LOCK:
						case LOCKED:
						case LOGGED:
						case MAPPING:
						case MATCH:
						case MATERIALIZED:
						case MAXVALUE:
						case METHOD:
						case MINUTE:
						case MINVALUE:
						case MODE:
						case MONTH:
						case MOVE:
						case NAME:
						case NAMES:
						case NEW:
						case NEXT:
						case NO:
						case NOTHING:
						case NOTIFY:
						case NOWAIT:
						case NULLS:
						case OBJECT:
						case OF:
						case OFF:
						case OIDS:
						case OLD:
						case OPERATOR:
						case OPTION:
						case OPTIONS:
						case ORDINALITY:
						case OTHERS:
						case OVER:
						case OVERRIDING:
						case OWNED:
						case OWNER:
						case PARALLEL:
						case PARSER:
						case PARTIAL:
						case PARTITION:
						case PASSING:
						case PASSWORD:
						case PLANS:
						case POLICY:
						case PRECEDING:
						case PREPARE:
						case PREPARED:
						case PRESERVE:
						case PRIOR:
						case PRIVILEGES:
						case PROCEDURAL:
						case PROCEDURE:
						case PROCEDURES:
						case PROGRAM:
						case PUBLICATION:
						case QUOTE:
						case RANGE:
						case READ:
						case REASSIGN:
						case RECHECK:
						case RECURSIVE:
						case REF:
						case REFERENCING:
						case REFRESH:
						case REINDEX:
						case RELATIVE:
						case RELEASE:
						case RENAME:
						case REPEATABLE:
						case REPLACE:
						case REPLICA:
						case RESET:
						case RESTART:
						case RESTRICT:
						case RETURNS:
						case REVOKE:
						case ROLE:
						case ROLLBACK:
						case ROLLUP:
						case ROUTINE:
						case ROUTINES:
						case ROWS:
						case RULE:
						case SAVEPOINT:
						case SCHEMA:
						case SCHEMAS:
						case SCROLL:
						case SEARCH:
						case SECOND:
						case SECURITY:
						case SEQUENCE:
						case SEQUENCES:
						case SERIALIZABLE:
						case SERVER:
						case SESSION:
						case SET:
						case SETS:
						case SHARE:
						case SHOW:
						case SIMPLE:
						case SKIP_:
						case SNAPSHOT:
						case SQL:
						case STABLE:
						case STANDALONE:
						case START:
						case STATEMENT:
						case STATISTICS:
						case STDIN:
						case STDOUT:
						case STORAGE:
						case STORED:
						case STRICT:
						case STRIP:
						case SUBSCRIPTION:
						case SUPPORT:
						case SYSID:
						case SYSTEM:
						case TABLES:
						case TABLESPACE:
						case TEMP:
						case TEMPLATE:
						case TEMPORARY:
						case TEXT:
						case TIES:
						case TRANSACTION:
						case TRANSFORM:
						case TRIGGER:
						case TRUNCATE:
						case TRUSTED:
						case TYPE:
						case TYPES:
						case UNBOUNDED:
						case UNCOMMITTED:
						case UNENCRYPTED:
						case UNKNOWN:
						case UNLISTEN:
						case UNLOGGED:
						case UNTIL:
						case UPDATE:
						case VACUUM:
						case VALID:
						case VALIDATE:
						case VALIDATOR:
						case VALUE:
						case VARYING:
						case VERSION:
						case VIEW:
						case VIEWS:
						case VOLATILE:
						case WHITESPACE:
						case WITHIN:
						case WITHOUT:
						case WORK:
						case WRAPPER:
						case WRITE:
						case XML:
						case YEAR:
						case YES:
						case ZONE:
						case BETWEEN:
						case BIGINT:
						case BIT:
						case BOOLEAN:
						case CHAR:
						case CHARACTER:
						case COALESCE:
						case DEC:
						case DECIMAL:
						case EXISTS:
						case EXTRACT:
						case FLOAT:
						case GREATEST:
						case GROUPING:
						case INOUT:
						case INT:
						case INTEGER:
						case INTERVAL:
						case LEAST:
						case NATIONAL:
						case NCHAR:
						case NONE:
						case NULLIF:
						case NUMERIC:
						case OUT:
						case OVERLAY:
						case POSITION:
						case PRECISION:
						case REAL:
						case ROW:
						case SETOF:
						case SMALLINT:
						case SUBSTRING:
						case TIME:
						case TIMESTAMP:
						case TREAT:
						case TRIM:
						case VALUES:
						case VARCHAR:
						case XMLATTRIBUTES:
						case XMLCONCAT:
						case XMLELEMENT:
						case XMLEXISTS:
						case XMLFOREST:
						case XMLNAMESPACES:
						case XMLPARSE:
						case XMLPI:
						case XMLROOT:
						case XMLSERIALIZE:
						case XMLTABLE:
						case AUTHORIZATION:
						case BINARY:
						case COLLATION:
						case CONCURRENTLY:
						case CROSS:
						case CURRENT_SCHEMA:
						case FREEZE:
						case FULL:
						case ILIKE:
						case INNER:
						case IS:
						case ISNULL:
						case JOIN:
						case LEFT:
						case LIKE:
						case NATURAL:
						case NOTNULL:
						case OUTER:
						case OVERLAPS:
						case RIGHT:
						case SIMILAR:
						case TABLESAMPLE:
						case VERBOSE:
						case ALL:
						case ANY:
						case ARRAY:
						case CASE:
						case CAST:
						case CURRENT_CATALOG:
						case CURRENT_DATE:
						case CURRENT_TIME:
						case CURRENT_TIMESTAMP:
						case CURRENT_USER:
						case FALSE:
						case LOCALTIME:
						case LOCALTIMESTAMP:
						case NOT:
						case NULL:
						case ON:
						case SESSION_USER:
						case SOME:
						case TRUE:
						case USER:
						case ALIGNMENT:
						case BASETYPE:
						case BUFFERS:
						case BYPASSRLS:
						case CANONICAL:
						case CATEGORY:
						case COLLATABLE:
						case COMBINEFUNC:
						case COMMUTATOR:
						case CONNECT:
						case COSTS:
						case CREATEDB:
						case CREATEROLE:
						case DESERIALFUNC:
						case DETERMINISTIC:
						case DISABLE_PAGE_SKIPPING:
						case ELEMENT:
						case EXTENDED:
						case FINALFUNC:
						case FINALFUNC_EXTRA:
						case FINALFUNC_MODIFY:
						case FORCE_NOT_NULL:
						case FORCE_NULL:
						case FORCE_QUOTE:
						case FORMAT:
						case GETTOKEN:
						case HASH:
						case HASHES:
						case HEADLINE:
						case HYPOTHETICAL:
						case INDEX_CLEANUP:
						case INIT:
						case INITCOND:
						case INTERNALLENGTH:
						case JSON:
						case LC_COLLATE:
						case LC_CTYPE:
						case LEFTARG:
						case LEXIZE:
						case LEXTYPES:
						case LIST:
						case LOCALE:
						case LOGIN:
						case MAIN:
						case MERGES:
						case MFINALFUNC:
						case MFINALFUNC_EXTRA:
						case MFINALFUNC_MODIFY:
						case MINITCOND:
						case MINVFUNC:
						case MODULUS:
						case MSFUNC:
						case MSSPACE:
						case MSTYPE:
						case NEGATOR:
						case NOBYPASSRLS:
						case NOCREATEDB:
						case NOCREATEROLE:
						case NOINHERIT:
						case NOLOGIN:
						case NOREPLICATION:
						case NOSUPERUSER:
						case OUTPUT:
						case PASSEDBYVALUE:
						case PATH:
						case PERMISSIVE:
						case PLAIN:
						case PREFERRED:
						case PROVIDER:
						case READ_ONLY:
						case READ_WRITE:
						case RECEIVE:
						case REMAINDER:
						case REPLICATION:
						case RESTRICTED:
						case RESTRICTIVE:
						case RIGHTARG:
						case SAFE:
						case SEND:
						case SERIALFUNC:
						case SETTINGS:
						case SFUNC:
						case SHAREABLE:
						case SKIP_LOCKED:
						case SORTOP:
						case SSPACE:
						case STYPE:
						case SUBTYPE_DIFF:
						case SUBTYPE_OPCLASS:
						case SUBTYPE:
						case SUMMARY:
						case SUPERUSER:
						case TIMING:
						case TYPMOD_IN:
						case TYPMOD_OUT:
						case UNSAFE:
						case USAGE:
						case VARIABLE:
						case YAML:
						case ALIAS:
						case ASSERT:
						case CONSTANT:
						case DATATYPE:
						case DEBUG:
						case DETAIL:
						case DIAGNOSTICS:
						case ELSEIF:
						case ELSIF:
						case ERRCODE:
						case EXIT:
						case EXCEPTION:
						case FOREACH:
						case GET:
						case HINT:
						case INFO:
						case LOG:
						case LOOP:
						case MESSAGE:
						case NOTICE:
						case OPEN:
						case PERFORM:
						case QUERY:
						case RAISE:
						case RECORD:
						case RETURN:
						case REVERSE:
						case ROWTYPE:
						case SLICE:
						case SQLSTATE:
						case STACKED:
						case WARNING:
						case WHILE:
						case LEFT_PAREN:
						case PLUS:
						case MINUS:
						case MULTIPLY:
						case LESS_LESS:
						case GREATER_GREATER:
						case HASH_SIGN:
						case PLACEHOLDER:
						case OP_CHARS:
						case NUMBER_LITERAL:
						case REAL_NUMBER:
						case DOLLAR_NUMBER:
						case Identifier:
						case QuotedIdentifier:
						case Character_String_Literal:
						case BeginDollarStringConstant:
							{
							setState(7050);
							((UpdateSetContext)_localctx).vex = vex(0);
							((UpdateSetContext)_localctx).value.add(((UpdateSetContext)_localctx).vex);
							}
							break;
						case DEFAULT:
							{
							setState(7051);
							match(DEFAULT);
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						setState(7058);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(7059);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(7060);
					tableSubquery();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NotifyStmtContext extends ParserRuleContext {
		public IdentifierContext channel;
		public CharacterStringContext payload;
		public TerminalNode NOTIFY() { return getToken(SQLParser.NOTIFY, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COMMA() { return getToken(SQLParser.COMMA, 0); }
		public CharacterStringContext characterString() {
			return getRuleContext(CharacterStringContext.class,0);
		}
		public NotifyStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_notifyStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterNotifyStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitNotifyStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitNotifyStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NotifyStmtContext notifyStmt() throws RecognitionException {
		NotifyStmtContext _localctx = new NotifyStmtContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_notifyStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7065);
			match(NOTIFY);
			setState(7066);
			((NotifyStmtContext)_localctx).channel = identifier();
			setState(7069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(7067);
				match(COMMA);
				setState(7068);
				((NotifyStmtContext)_localctx).payload = characterString();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateStmtContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(SQLParser.TRUNCATE, 0); }
		public List<OnlyTableMultiplyContext> onlyTableMultiply() {
			return getRuleContexts(OnlyTableMultiplyContext.class);
		}
		public OnlyTableMultiplyContext onlyTableMultiply(int i) {
			return getRuleContext(OnlyTableMultiplyContext.class,i);
		}
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode IDENTITY() { return getToken(SQLParser.IDENTITY, 0); }
		public CascadeRestrictContext cascadeRestrict() {
			return getRuleContext(CascadeRestrictContext.class,0);
		}
		public TerminalNode RESTART() { return getToken(SQLParser.RESTART, 0); }
		public TerminalNode CONTINUE() { return getToken(SQLParser.CONTINUE, 0); }
		public TruncateStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTruncateStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTruncateStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTruncateStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateStmtContext truncateStmt() throws RecognitionException {
		TruncateStmtContext _localctx = new TruncateStmtContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_truncateStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7071);
			match(TRUNCATE);
			setState(7073);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(7072);
				match(TABLE);
				}
			}

			setState(7075);
			onlyTableMultiply();
			setState(7080);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7076);
				match(COMMA);
				setState(7077);
				onlyTableMultiply();
				}
				}
				setState(7082);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7085);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONTINUE || _la==RESTART) {
				{
				setState(7083);
				_la = _input.LA(1);
				if ( !(_la==CONTINUE || _la==RESTART) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7084);
				match(IDENTITY);
				}
			}

			setState(7088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(7087);
				cascadeRestrict();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdentifierListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_identifierList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIdentifierList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIdentifierList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIdentifierList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdentifierListContext identifierList() throws RecognitionException {
		IdentifierListContext _localctx = new IdentifierListContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_identifierList);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7090);
			identifier();
			setState(7095);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,945,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7091);
					match(COMMA);
					setState(7092);
					identifier();
					}
					} 
				}
				setState(7097);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,945,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AnonymousBlockContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(SQLParser.DO, 0); }
		public List<CharacterStringContext> characterString() {
			return getRuleContexts(CharacterStringContext.class);
		}
		public CharacterStringContext characterString(int i) {
			return getRuleContext(CharacterStringContext.class,i);
		}
		public TerminalNode LANGUAGE() { return getToken(SQLParser.LANGUAGE, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public AnonymousBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_anonymousBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAnonymousBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAnonymousBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAnonymousBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AnonymousBlockContext anonymousBlock() throws RecognitionException {
		AnonymousBlockContext _localctx = new AnonymousBlockContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_anonymousBlock);
		int _la;
		try {
			setState(7114);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,949,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7098);
				match(DO);
				setState(7104);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LANGUAGE) {
					{
					setState(7099);
					match(LANGUAGE);
					setState(7102);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ABORT:
					case ABSOLUTE:
					case ACCESS:
					case ACTION:
					case ADD:
					case ADMIN:
					case AFTER:
					case AGGREGATE:
					case ALSO:
					case ALTER:
					case ALWAYS:
					case ASSERTION:
					case ASSIGNMENT:
					case AT:
					case ATTACH:
					case ATTRIBUTE:
					case BACKWARD:
					case BEFORE:
					case BEGIN:
					case BY:
					case CACHE:
					case CALL:
					case CALLED:
					case CASCADE:
					case CASCADED:
					case CATALOG:
					case CHAIN:
					case CHARACTERISTICS:
					case CHECKPOINT:
					case CLASS:
					case CLOSE:
					case CLUSTER:
					case COLUMNS:
					case COMMENT:
					case COMMENTS:
					case COMMIT:
					case COMMITTED:
					case CONFIGURATION:
					case CONFLICT:
					case CONNECTION:
					case CONSTRAINTS:
					case CONTENT:
					case CONTINUE:
					case CONVERSION:
					case COPY:
					case COST:
					case CSV:
					case CUBE:
					case CURRENT:
					case CURSOR:
					case CYCLE:
					case DATA:
					case DATABASE:
					case DAY:
					case DEALLOCATE:
					case DECLARE:
					case DEFAULTS:
					case DEFERRED:
					case DEFINER:
					case DELETE:
					case DELIMITER:
					case DELIMITERS:
					case DEPENDS:
					case DETACH:
					case DICTIONARY:
					case DISABLE:
					case DISCARD:
					case DOCUMENT:
					case DOMAIN:
					case DOUBLE:
					case DROP:
					case EACH:
					case ENABLE:
					case ENCODING:
					case ENCRYPTED:
					case ENUM:
					case ESCAPE:
					case EVENT:
					case EXCLUDE:
					case EXCLUDING:
					case EXCLUSIVE:
					case EXECUTE:
					case EXPLAIN:
					case EXTENSION:
					case EXTERNAL:
					case FAMILY:
					case FILTER:
					case FIRST:
					case FOLLOWING:
					case FORCE:
					case FORWARD:
					case FUNCTION:
					case FUNCTIONS:
					case GENERATED:
					case GLOBAL:
					case GRANTED:
					case GROUPS:
					case HANDLER:
					case HEADER:
					case HOLD:
					case HOUR:
					case IDENTITY:
					case IF:
					case IMMEDIATE:
					case IMMUTABLE:
					case IMPLICIT:
					case IMPORT:
					case INCLUDE:
					case INCLUDING:
					case INCREMENT:
					case INDEX:
					case INDEXES:
					case INHERIT:
					case INHERITS:
					case INLINE:
					case INPUT:
					case INSENSITIVE:
					case INSERT:
					case INSTEAD:
					case INVOKER:
					case ISOLATION:
					case KEY:
					case LABEL:
					case LANGUAGE:
					case LARGE:
					case LAST:
					case LEAKPROOF:
					case LEVEL:
					case LISTEN:
					case LOAD:
					case LOCAL:
					case LOCATION:
					case LOCK:
					case LOCKED:
					case LOGGED:
					case MAPPING:
					case MATCH:
					case MATERIALIZED:
					case MAXVALUE:
					case METHOD:
					case MINUTE:
					case MINVALUE:
					case MODE:
					case MONTH:
					case MOVE:
					case NAME:
					case NAMES:
					case NEW:
					case NEXT:
					case NO:
					case NOTHING:
					case NOTIFY:
					case NOWAIT:
					case NULLS:
					case OBJECT:
					case OF:
					case OFF:
					case OIDS:
					case OLD:
					case OPERATOR:
					case OPTION:
					case OPTIONS:
					case ORDINALITY:
					case OTHERS:
					case OVER:
					case OVERRIDING:
					case OWNED:
					case OWNER:
					case PARALLEL:
					case PARSER:
					case PARTIAL:
					case PARTITION:
					case PASSING:
					case PASSWORD:
					case PLANS:
					case POLICY:
					case PRECEDING:
					case PREPARE:
					case PREPARED:
					case PRESERVE:
					case PRIOR:
					case PRIVILEGES:
					case PROCEDURAL:
					case PROCEDURE:
					case PROCEDURES:
					case PROGRAM:
					case PUBLICATION:
					case QUOTE:
					case RANGE:
					case READ:
					case REASSIGN:
					case RECHECK:
					case RECURSIVE:
					case REF:
					case REFERENCING:
					case REFRESH:
					case REINDEX:
					case RELATIVE:
					case RELEASE:
					case RENAME:
					case REPEATABLE:
					case REPLACE:
					case REPLICA:
					case RESET:
					case RESTART:
					case RESTRICT:
					case RETURNS:
					case REVOKE:
					case ROLE:
					case ROLLBACK:
					case ROLLUP:
					case ROUTINE:
					case ROUTINES:
					case ROWS:
					case RULE:
					case SAVEPOINT:
					case SCHEMA:
					case SCHEMAS:
					case SCROLL:
					case SEARCH:
					case SECOND:
					case SECURITY:
					case SEQUENCE:
					case SEQUENCES:
					case SERIALIZABLE:
					case SERVER:
					case SESSION:
					case SET:
					case SETS:
					case SHARE:
					case SHOW:
					case SIMPLE:
					case SKIP_:
					case SNAPSHOT:
					case SQL:
					case STABLE:
					case STANDALONE:
					case START:
					case STATEMENT:
					case STATISTICS:
					case STDIN:
					case STDOUT:
					case STORAGE:
					case STORED:
					case STRICT:
					case STRIP:
					case SUBSCRIPTION:
					case SUPPORT:
					case SYSID:
					case SYSTEM:
					case TABLES:
					case TABLESPACE:
					case TEMP:
					case TEMPLATE:
					case TEMPORARY:
					case TEXT:
					case TIES:
					case TRANSACTION:
					case TRANSFORM:
					case TRIGGER:
					case TRUNCATE:
					case TRUSTED:
					case TYPE:
					case TYPES:
					case UNBOUNDED:
					case UNCOMMITTED:
					case UNENCRYPTED:
					case UNKNOWN:
					case UNLISTEN:
					case UNLOGGED:
					case UNTIL:
					case UPDATE:
					case VACUUM:
					case VALID:
					case VALIDATE:
					case VALIDATOR:
					case VALUE:
					case VARYING:
					case VERSION:
					case VIEW:
					case VIEWS:
					case VOLATILE:
					case WHITESPACE:
					case WITHIN:
					case WITHOUT:
					case WORK:
					case WRAPPER:
					case WRITE:
					case XML:
					case YEAR:
					case YES:
					case ZONE:
					case BETWEEN:
					case BIGINT:
					case BIT:
					case BOOLEAN:
					case CHAR:
					case CHARACTER:
					case COALESCE:
					case DEC:
					case DECIMAL:
					case EXISTS:
					case EXTRACT:
					case FLOAT:
					case GREATEST:
					case GROUPING:
					case INOUT:
					case INT:
					case INTEGER:
					case INTERVAL:
					case LEAST:
					case NATIONAL:
					case NCHAR:
					case NONE:
					case NULLIF:
					case NUMERIC:
					case OUT:
					case OVERLAY:
					case POSITION:
					case PRECISION:
					case REAL:
					case ROW:
					case SETOF:
					case SMALLINT:
					case SUBSTRING:
					case TIME:
					case TIMESTAMP:
					case TREAT:
					case TRIM:
					case VALUES:
					case VARCHAR:
					case XMLATTRIBUTES:
					case XMLCONCAT:
					case XMLELEMENT:
					case XMLEXISTS:
					case XMLFOREST:
					case XMLNAMESPACES:
					case XMLPARSE:
					case XMLPI:
					case XMLROOT:
					case XMLSERIALIZE:
					case XMLTABLE:
					case ALIGNMENT:
					case BASETYPE:
					case BUFFERS:
					case BYPASSRLS:
					case CANONICAL:
					case CATEGORY:
					case COLLATABLE:
					case COMBINEFUNC:
					case COMMUTATOR:
					case CONNECT:
					case COSTS:
					case CREATEDB:
					case CREATEROLE:
					case DESERIALFUNC:
					case DETERMINISTIC:
					case DISABLE_PAGE_SKIPPING:
					case ELEMENT:
					case EXTENDED:
					case FINALFUNC:
					case FINALFUNC_EXTRA:
					case FINALFUNC_MODIFY:
					case FORCE_NOT_NULL:
					case FORCE_NULL:
					case FORCE_QUOTE:
					case FORMAT:
					case GETTOKEN:
					case HASH:
					case HASHES:
					case HEADLINE:
					case HYPOTHETICAL:
					case INDEX_CLEANUP:
					case INIT:
					case INITCOND:
					case INTERNALLENGTH:
					case JSON:
					case LC_COLLATE:
					case LC_CTYPE:
					case LEFTARG:
					case LEXIZE:
					case LEXTYPES:
					case LIST:
					case LOCALE:
					case LOGIN:
					case MAIN:
					case MERGES:
					case MFINALFUNC:
					case MFINALFUNC_EXTRA:
					case MFINALFUNC_MODIFY:
					case MINITCOND:
					case MINVFUNC:
					case MODULUS:
					case MSFUNC:
					case MSSPACE:
					case MSTYPE:
					case NEGATOR:
					case NOBYPASSRLS:
					case NOCREATEDB:
					case NOCREATEROLE:
					case NOINHERIT:
					case NOLOGIN:
					case NOREPLICATION:
					case NOSUPERUSER:
					case OUTPUT:
					case PASSEDBYVALUE:
					case PATH:
					case PERMISSIVE:
					case PLAIN:
					case PREFERRED:
					case PROVIDER:
					case READ_ONLY:
					case READ_WRITE:
					case RECEIVE:
					case REMAINDER:
					case REPLICATION:
					case RESTRICTED:
					case RESTRICTIVE:
					case RIGHTARG:
					case SAFE:
					case SEND:
					case SERIALFUNC:
					case SETTINGS:
					case SFUNC:
					case SHAREABLE:
					case SKIP_LOCKED:
					case SORTOP:
					case SSPACE:
					case STYPE:
					case SUBTYPE_DIFF:
					case SUBTYPE_OPCLASS:
					case SUBTYPE:
					case SUMMARY:
					case SUPERUSER:
					case TIMING:
					case TYPMOD_IN:
					case TYPMOD_OUT:
					case UNSAFE:
					case USAGE:
					case VARIABLE:
					case YAML:
					case ALIAS:
					case ASSERT:
					case CONSTANT:
					case DATATYPE:
					case DEBUG:
					case DETAIL:
					case DIAGNOSTICS:
					case ELSEIF:
					case ELSIF:
					case ERRCODE:
					case EXIT:
					case EXCEPTION:
					case FOREACH:
					case GET:
					case HINT:
					case INFO:
					case LOG:
					case LOOP:
					case MESSAGE:
					case NOTICE:
					case OPEN:
					case PERFORM:
					case QUERY:
					case RAISE:
					case RECORD:
					case RETURN:
					case REVERSE:
					case ROWTYPE:
					case SLICE:
					case SQLSTATE:
					case STACKED:
					case WARNING:
					case WHILE:
					case Identifier:
					case QuotedIdentifier:
						{
						setState(7100);
						identifier();
						}
						break;
					case Character_String_Literal:
					case BeginDollarStringConstant:
						{
						setState(7101);
						characterString();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(7106);
				characterString();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7107);
				match(DO);
				setState(7108);
				characterString();
				setState(7109);
				match(LANGUAGE);
				setState(7112);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(7110);
					identifier();
					}
					break;
				case Character_String_Literal:
				case BeginDollarStringConstant:
					{
					setState(7111);
					characterString();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CompOptionsContext extends ParserRuleContext {
		public TerminalNode HASH_SIGN() { return getToken(SQLParser.HASH_SIGN, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TruthValueContext truthValue() {
			return getRuleContext(TruthValueContext.class,0);
		}
		public CompOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCompOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCompOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCompOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CompOptionsContext compOptions() throws RecognitionException {
		CompOptionsContext _localctx = new CompOptionsContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_compOptions);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7116);
			match(HASH_SIGN);
			setState(7117);
			identifier();
			setState(7120);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(7118);
				identifier();
				}
				break;
			case FALSE:
			case ON:
			case TRUE:
				{
				setState(7119);
				truthValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionBlockContext extends ParserRuleContext {
		public IdentifierContext endLabel;
		public TerminalNode BEGIN() { return getToken(SQLParser.BEGIN, 0); }
		public FunctionStatementsContext functionStatements() {
			return getRuleContext(FunctionStatementsContext.class,0);
		}
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public StartLabelContext startLabel() {
			return getRuleContext(StartLabelContext.class,0);
		}
		public DeclarationsContext declarations() {
			return getRuleContext(DeclarationsContext.class,0);
		}
		public ExceptionStatementContext exceptionStatement() {
			return getRuleContext(ExceptionStatementContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public FunctionBlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionBlock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionBlockContext functionBlock() throws RecognitionException {
		FunctionBlockContext _localctx = new FunctionBlockContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_functionBlock);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7123);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LESS_LESS) {
				{
				setState(7122);
				startLabel();
				}
			}

			setState(7126);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(7125);
				declarations();
				}
			}

			setState(7128);
			match(BEGIN);
			setState(7129);
			functionStatements();
			setState(7131);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(7130);
				exceptionStatement();
				}
			}

			setState(7133);
			match(END);
			setState(7135);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
				{
				setState(7134);
				((FunctionBlockContext)_localctx).endLabel = identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StartLabelContext extends ParserRuleContext {
		public TerminalNode LESS_LESS() { return getToken(SQLParser.LESS_LESS, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode GREATER_GREATER() { return getToken(SQLParser.GREATER_GREATER, 0); }
		public StartLabelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_startLabel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterStartLabel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitStartLabel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitStartLabel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StartLabelContext startLabel() throws RecognitionException {
		StartLabelContext _localctx = new StartLabelContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_startLabel);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7137);
			match(LESS_LESS);
			setState(7138);
			identifier();
			setState(7139);
			match(GREATER_GREATER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclarationsContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(SQLParser.DECLARE, 0); }
		public List<DeclarationContext> declaration() {
			return getRuleContexts(DeclarationContext.class);
		}
		public DeclarationContext declaration(int i) {
			return getRuleContext(DeclarationContext.class,i);
		}
		public DeclarationsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declarations; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDeclarations(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDeclarations(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDeclarations(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclarationsContext declarations() throws RecognitionException {
		DeclarationsContext _localctx = new DeclarationsContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_declarations);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7141);
			match(DECLARE);
			setState(7145);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,955,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7142);
					declaration();
					}
					} 
				}
				setState(7147);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,955,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeclarationContext extends ParserRuleContext {
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return getRuleContext(TypeDeclarationContext.class,0);
		}
		public TerminalNode SEMI_COLON() { return getToken(SQLParser.SEMI_COLON, 0); }
		public List<TerminalNode> DECLARE() { return getTokens(SQLParser.DECLARE); }
		public TerminalNode DECLARE(int i) {
			return getToken(SQLParser.DECLARE, i);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeclarationContext declaration() throws RecognitionException {
		DeclarationContext _localctx = new DeclarationContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_declaration);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7151);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,956,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7148);
					match(DECLARE);
					}
					} 
				}
				setState(7153);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,956,_ctx);
			}
			setState(7154);
			identifier();
			setState(7155);
			typeDeclaration();
			setState(7156);
			match(SEMI_COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeDeclarationContext extends ParserRuleContext {
		public DataTypeDecContext dataTypeDec() {
			return getRuleContext(DataTypeDecContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(SQLParser.CONSTANT, 0); }
		public CollateIdentifierContext collateIdentifier() {
			return getRuleContext(CollateIdentifierContext.class,0);
		}
		public TerminalNode NOT() { return getToken(SQLParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(SQLParser.DEFAULT, 0); }
		public TerminalNode COLON_EQUAL() { return getToken(SQLParser.COLON_EQUAL, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public TerminalNode ALIAS() { return getToken(SQLParser.ALIAS, 0); }
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode DOLLAR_NUMBER() { return getToken(SQLParser.DOLLAR_NUMBER, 0); }
		public TerminalNode CURSOR() { return getToken(SQLParser.CURSOR, 0); }
		public SelectStmtContext selectStmt() {
			return getRuleContext(SelectStmtContext.class,0);
		}
		public TerminalNode IS() { return getToken(SQLParser.IS, 0); }
		public TerminalNode SCROLL() { return getToken(SQLParser.SCROLL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public ArgumentsListContext argumentsList() {
			return getRuleContext(ArgumentsListContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_typeDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTypeDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTypeDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTypeDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeDeclarationContext typeDeclaration() throws RecognitionException {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_typeDeclaration);
		int _la;
		try {
			setState(7194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,965,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7159);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,957,_ctx) ) {
				case 1:
					{
					setState(7158);
					match(CONSTANT);
					}
					break;
				}
				setState(7161);
				dataTypeDec();
				setState(7163);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLLATE) {
					{
					setState(7162);
					collateIdentifier();
					}
				}

				setState(7167);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(7165);
					match(NOT);
					setState(7166);
					match(NULL);
					}
				}

				setState(7171);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==EQUAL || _la==COLON_EQUAL) {
					{
					setState(7169);
					_la = _input.LA(1);
					if ( !(_la==DEFAULT || _la==EQUAL || _la==COLON_EQUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(7170);
					vex(0);
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7173);
				match(ALIAS);
				setState(7174);
				match(FOR);
				setState(7177);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ABORT:
				case ABSOLUTE:
				case ACCESS:
				case ACTION:
				case ADD:
				case ADMIN:
				case AFTER:
				case AGGREGATE:
				case ALSO:
				case ALTER:
				case ALWAYS:
				case ASSERTION:
				case ASSIGNMENT:
				case AT:
				case ATTACH:
				case ATTRIBUTE:
				case BACKWARD:
				case BEFORE:
				case BEGIN:
				case BY:
				case CACHE:
				case CALL:
				case CALLED:
				case CASCADE:
				case CASCADED:
				case CATALOG:
				case CHAIN:
				case CHARACTERISTICS:
				case CHECKPOINT:
				case CLASS:
				case CLOSE:
				case CLUSTER:
				case COLUMNS:
				case COMMENT:
				case COMMENTS:
				case COMMIT:
				case COMMITTED:
				case CONFIGURATION:
				case CONFLICT:
				case CONNECTION:
				case CONSTRAINTS:
				case CONTENT:
				case CONTINUE:
				case CONVERSION:
				case COPY:
				case COST:
				case CSV:
				case CUBE:
				case CURRENT:
				case CURSOR:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DEALLOCATE:
				case DECLARE:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DELIMITER:
				case DELIMITERS:
				case DEPENDS:
				case DETACH:
				case DICTIONARY:
				case DISABLE:
				case DISCARD:
				case DOCUMENT:
				case DOMAIN:
				case DOUBLE:
				case DROP:
				case EACH:
				case ENABLE:
				case ENCODING:
				case ENCRYPTED:
				case ENUM:
				case ESCAPE:
				case EVENT:
				case EXCLUDE:
				case EXCLUDING:
				case EXCLUSIVE:
				case EXECUTE:
				case EXPLAIN:
				case EXTENSION:
				case EXTERNAL:
				case FAMILY:
				case FILTER:
				case FIRST:
				case FOLLOWING:
				case FORCE:
				case FORWARD:
				case FUNCTION:
				case FUNCTIONS:
				case GENERATED:
				case GLOBAL:
				case GRANTED:
				case GROUPS:
				case HANDLER:
				case HEADER:
				case HOLD:
				case HOUR:
				case IDENTITY:
				case IF:
				case IMMEDIATE:
				case IMMUTABLE:
				case IMPLICIT:
				case IMPORT:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDEX:
				case INDEXES:
				case INHERIT:
				case INHERITS:
				case INLINE:
				case INPUT:
				case INSENSITIVE:
				case INSERT:
				case INSTEAD:
				case INVOKER:
				case ISOLATION:
				case KEY:
				case LABEL:
				case LANGUAGE:
				case LARGE:
				case LAST:
				case LEAKPROOF:
				case LEVEL:
				case LISTEN:
				case LOAD:
				case LOCAL:
				case LOCATION:
				case LOCK:
				case LOCKED:
				case LOGGED:
				case MAPPING:
				case MATCH:
				case MATERIALIZED:
				case MAXVALUE:
				case METHOD:
				case MINUTE:
				case MINVALUE:
				case MODE:
				case MONTH:
				case MOVE:
				case NAME:
				case NAMES:
				case NEW:
				case NEXT:
				case NO:
				case NOTHING:
				case NOTIFY:
				case NOWAIT:
				case NULLS:
				case OBJECT:
				case OF:
				case OFF:
				case OIDS:
				case OLD:
				case OPERATOR:
				case OPTION:
				case OPTIONS:
				case ORDINALITY:
				case OTHERS:
				case OVER:
				case OVERRIDING:
				case OWNED:
				case OWNER:
				case PARALLEL:
				case PARSER:
				case PARTIAL:
				case PARTITION:
				case PASSING:
				case PASSWORD:
				case PLANS:
				case POLICY:
				case PRECEDING:
				case PREPARE:
				case PREPARED:
				case PRESERVE:
				case PRIOR:
				case PRIVILEGES:
				case PROCEDURAL:
				case PROCEDURE:
				case PROCEDURES:
				case PROGRAM:
				case PUBLICATION:
				case QUOTE:
				case RANGE:
				case READ:
				case REASSIGN:
				case RECHECK:
				case RECURSIVE:
				case REF:
				case REFERENCING:
				case REFRESH:
				case REINDEX:
				case RELATIVE:
				case RELEASE:
				case RENAME:
				case REPEATABLE:
				case REPLACE:
				case REPLICA:
				case RESET:
				case RESTART:
				case RESTRICT:
				case RETURNS:
				case REVOKE:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROUTINE:
				case ROUTINES:
				case ROWS:
				case RULE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMAS:
				case SCROLL:
				case SEARCH:
				case SECOND:
				case SECURITY:
				case SEQUENCE:
				case SEQUENCES:
				case SERIALIZABLE:
				case SERVER:
				case SESSION:
				case SET:
				case SETS:
				case SHARE:
				case SHOW:
				case SIMPLE:
				case SKIP_:
				case SNAPSHOT:
				case SQL:
				case STABLE:
				case STANDALONE:
				case START:
				case STATEMENT:
				case STATISTICS:
				case STDIN:
				case STDOUT:
				case STORAGE:
				case STORED:
				case STRICT:
				case STRIP:
				case SUBSCRIPTION:
				case SUPPORT:
				case SYSID:
				case SYSTEM:
				case TABLES:
				case TABLESPACE:
				case TEMP:
				case TEMPLATE:
				case TEMPORARY:
				case TEXT:
				case TIES:
				case TRANSACTION:
				case TRANSFORM:
				case TRIGGER:
				case TRUNCATE:
				case TRUSTED:
				case TYPE:
				case TYPES:
				case UNBOUNDED:
				case UNCOMMITTED:
				case UNENCRYPTED:
				case UNKNOWN:
				case UNLISTEN:
				case UNLOGGED:
				case UNTIL:
				case UPDATE:
				case VACUUM:
				case VALID:
				case VALIDATE:
				case VALIDATOR:
				case VALUE:
				case VARYING:
				case VERSION:
				case VIEW:
				case VIEWS:
				case VOLATILE:
				case WHITESPACE:
				case WITHIN:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case WRITE:
				case XML:
				case YEAR:
				case YES:
				case ZONE:
				case BETWEEN:
				case BIGINT:
				case BIT:
				case BOOLEAN:
				case CHAR:
				case CHARACTER:
				case COALESCE:
				case DEC:
				case DECIMAL:
				case EXISTS:
				case EXTRACT:
				case FLOAT:
				case GREATEST:
				case GROUPING:
				case INOUT:
				case INT:
				case INTEGER:
				case INTERVAL:
				case LEAST:
				case NATIONAL:
				case NCHAR:
				case NONE:
				case NULLIF:
				case NUMERIC:
				case OUT:
				case OVERLAY:
				case POSITION:
				case PRECISION:
				case REAL:
				case ROW:
				case SETOF:
				case SMALLINT:
				case SUBSTRING:
				case TIME:
				case TIMESTAMP:
				case TREAT:
				case TRIM:
				case VALUES:
				case VARCHAR:
				case XMLATTRIBUTES:
				case XMLCONCAT:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case ALIGNMENT:
				case BASETYPE:
				case BUFFERS:
				case BYPASSRLS:
				case CANONICAL:
				case CATEGORY:
				case COLLATABLE:
				case COMBINEFUNC:
				case COMMUTATOR:
				case CONNECT:
				case COSTS:
				case CREATEDB:
				case CREATEROLE:
				case DESERIALFUNC:
				case DETERMINISTIC:
				case DISABLE_PAGE_SKIPPING:
				case ELEMENT:
				case EXTENDED:
				case FINALFUNC:
				case FINALFUNC_EXTRA:
				case FINALFUNC_MODIFY:
				case FORCE_NOT_NULL:
				case FORCE_NULL:
				case FORCE_QUOTE:
				case FORMAT:
				case GETTOKEN:
				case HASH:
				case HASHES:
				case HEADLINE:
				case HYPOTHETICAL:
				case INDEX_CLEANUP:
				case INIT:
				case INITCOND:
				case INTERNALLENGTH:
				case JSON:
				case LC_COLLATE:
				case LC_CTYPE:
				case LEFTARG:
				case LEXIZE:
				case LEXTYPES:
				case LIST:
				case LOCALE:
				case LOGIN:
				case MAIN:
				case MERGES:
				case MFINALFUNC:
				case MFINALFUNC_EXTRA:
				case MFINALFUNC_MODIFY:
				case MINITCOND:
				case MINVFUNC:
				case MODULUS:
				case MSFUNC:
				case MSSPACE:
				case MSTYPE:
				case NEGATOR:
				case NOBYPASSRLS:
				case NOCREATEDB:
				case NOCREATEROLE:
				case NOINHERIT:
				case NOLOGIN:
				case NOREPLICATION:
				case NOSUPERUSER:
				case OUTPUT:
				case PASSEDBYVALUE:
				case PATH:
				case PERMISSIVE:
				case PLAIN:
				case PREFERRED:
				case PROVIDER:
				case READ_ONLY:
				case READ_WRITE:
				case RECEIVE:
				case REMAINDER:
				case REPLICATION:
				case RESTRICTED:
				case RESTRICTIVE:
				case RIGHTARG:
				case SAFE:
				case SEND:
				case SERIALFUNC:
				case SETTINGS:
				case SFUNC:
				case SHAREABLE:
				case SKIP_LOCKED:
				case SORTOP:
				case SSPACE:
				case STYPE:
				case SUBTYPE_DIFF:
				case SUBTYPE_OPCLASS:
				case SUBTYPE:
				case SUMMARY:
				case SUPERUSER:
				case TIMING:
				case TYPMOD_IN:
				case TYPMOD_OUT:
				case UNSAFE:
				case USAGE:
				case VARIABLE:
				case YAML:
				case ALIAS:
				case ASSERT:
				case CONSTANT:
				case DATATYPE:
				case DEBUG:
				case DETAIL:
				case DIAGNOSTICS:
				case ELSEIF:
				case ELSIF:
				case ERRCODE:
				case EXIT:
				case EXCEPTION:
				case FOREACH:
				case GET:
				case HINT:
				case INFO:
				case LOG:
				case LOOP:
				case MESSAGE:
				case NOTICE:
				case OPEN:
				case PERFORM:
				case QUERY:
				case RAISE:
				case RECORD:
				case RETURN:
				case REVERSE:
				case ROWTYPE:
				case SLICE:
				case SQLSTATE:
				case STACKED:
				case WARNING:
				case WHILE:
				case Identifier:
				case QuotedIdentifier:
					{
					setState(7175);
					identifier();
					}
					break;
				case DOLLAR_NUMBER:
					{
					setState(7176);
					match(DOLLAR_NUMBER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7183);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==SCROLL) {
					{
					setState(7180);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(7179);
						match(NO);
						}
					}

					setState(7182);
					match(SCROLL);
					}
				}

				setState(7185);
				match(CURSOR);
				setState(7190);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7186);
					match(LEFT_PAREN);
					setState(7187);
					argumentsList();
					setState(7188);
					match(RIGHT_PAREN);
					}
				}

				setState(7192);
				_la = _input.LA(1);
				if ( !(_la==IS || _la==FOR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7193);
				selectStmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentsListContext extends ParserRuleContext {
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<DataTypeContext> dataType() {
			return getRuleContexts(DataTypeContext.class);
		}
		public DataTypeContext dataType(int i) {
			return getRuleContext(DataTypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public ArgumentsListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argumentsList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterArgumentsList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitArgumentsList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitArgumentsList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentsListContext argumentsList() throws RecognitionException {
		ArgumentsListContext _localctx = new ArgumentsListContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_argumentsList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7196);
			identifier();
			setState(7197);
			dataType();
			setState(7204);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7198);
				match(COMMA);
				setState(7199);
				identifier();
				setState(7200);
				dataType();
				}
				}
				setState(7206);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeDecContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode MODULAR() { return getToken(SQLParser.MODULAR, 0); }
		public TerminalNode TYPE() { return getToken(SQLParser.TYPE, 0); }
		public SchemaQualifiedNameNontypeContext schemaQualifiedNameNontype() {
			return getRuleContext(SchemaQualifiedNameNontypeContext.class,0);
		}
		public TerminalNode ROWTYPE() { return getToken(SQLParser.ROWTYPE, 0); }
		public DataTypeDecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeDec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDataTypeDec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDataTypeDec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDataTypeDec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeDecContext dataTypeDec() throws RecognitionException {
		DataTypeDecContext _localctx = new DataTypeDecContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_dataTypeDec);
		try {
			setState(7216);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,967,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7207);
				dataType();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7208);
				schemaQualifiedName();
				setState(7209);
				match(MODULAR);
				setState(7210);
				match(TYPE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7212);
				schemaQualifiedNameNontype();
				setState(7213);
				match(MODULAR);
				setState(7214);
				match(ROWTYPE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExceptionStatementContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(SQLParser.EXCEPTION, 0); }
		public List<TerminalNode> WHEN() { return getTokens(SQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(SQLParser.WHEN, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(SQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SQLParser.THEN, i);
		}
		public List<FunctionStatementsContext> functionStatements() {
			return getRuleContexts(FunctionStatementsContext.class);
		}
		public FunctionStatementsContext functionStatements(int i) {
			return getRuleContext(FunctionStatementsContext.class,i);
		}
		public ExceptionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exceptionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExceptionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExceptionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitExceptionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExceptionStatementContext exceptionStatement() throws RecognitionException {
		ExceptionStatementContext _localctx = new ExceptionStatementContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_exceptionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7218);
			match(EXCEPTION);
			setState(7224); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7219);
				match(WHEN);
				setState(7220);
				vex(0);
				setState(7221);
				match(THEN);
				setState(7222);
				functionStatements();
				}
				}
				setState(7226); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionStatementsContext extends ParserRuleContext {
		public List<FunctionStatementContext> functionStatement() {
			return getRuleContexts(FunctionStatementContext.class);
		}
		public FunctionStatementContext functionStatement(int i) {
			return getRuleContext(FunctionStatementContext.class,i);
		}
		public List<TerminalNode> SEMI_COLON() { return getTokens(SQLParser.SEMI_COLON); }
		public TerminalNode SEMI_COLON(int i) {
			return getToken(SQLParser.SEMI_COLON, i);
		}
		public FunctionStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionStatementsContext functionStatements() throws RecognitionException {
		FunctionStatementsContext _localctx = new FunctionStatementsContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_functionStatements);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7233);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,969,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(7228);
					functionStatement();
					setState(7229);
					match(SEMI_COLON);
					}
					} 
				}
				setState(7235);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,969,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionStatementContext extends ParserRuleContext {
		public FunctionBlockContext functionBlock() {
			return getRuleContext(FunctionBlockContext.class,0);
		}
		public BaseStatementContext baseStatement() {
			return getRuleContext(BaseStatementContext.class,0);
		}
		public ControlStatementContext controlStatement() {
			return getRuleContext(ControlStatementContext.class,0);
		}
		public TransactionStatementContext transactionStatement() {
			return getRuleContext(TransactionStatementContext.class,0);
		}
		public CursorStatementContext cursorStatement() {
			return getRuleContext(CursorStatementContext.class,0);
		}
		public MessageStatementContext messageStatement() {
			return getRuleContext(MessageStatementContext.class,0);
		}
		public SchemaStatementContext schemaStatement() {
			return getRuleContext(SchemaStatementContext.class,0);
		}
		public PlpgsqlQueryContext plpgsqlQuery() {
			return getRuleContext(PlpgsqlQueryContext.class,0);
		}
		public AdditionalStatementContext additionalStatement() {
			return getRuleContext(AdditionalStatementContext.class,0);
		}
		public FunctionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterFunctionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitFunctionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitFunctionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionStatementContext functionStatement() throws RecognitionException {
		FunctionStatementContext _localctx = new FunctionStatementContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_functionStatement);
		try {
			setState(7245);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,970,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7236);
				functionBlock();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7237);
				baseStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7238);
				controlStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7239);
				transactionStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7240);
				cursorStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(7241);
				messageStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(7242);
				schemaStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(7243);
				plpgsqlQuery();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(7244);
				additionalStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BaseStatementContext extends ParserRuleContext {
		public AssignStmtContext assignStmt() {
			return getRuleContext(AssignStmtContext.class,0);
		}
		public TerminalNode PERFORM() { return getToken(SQLParser.PERFORM, 0); }
		public PerformStmtContext performStmt() {
			return getRuleContext(PerformStmtContext.class,0);
		}
		public TerminalNode GET() { return getToken(SQLParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(SQLParser.DIAGNOSTICS, 0); }
		public List<DiagnosticOptionContext> diagnosticOption() {
			return getRuleContexts(DiagnosticOptionContext.class);
		}
		public DiagnosticOptionContext diagnosticOption(int i) {
			return getRuleContext(DiagnosticOptionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode CURRENT() { return getToken(SQLParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(SQLParser.STACKED, 0); }
		public TerminalNode NULL() { return getToken(SQLParser.NULL, 0); }
		public BaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_baseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterBaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitBaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitBaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BaseStatementContext baseStatement() throws RecognitionException {
		BaseStatementContext _localctx = new BaseStatementContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_baseStatement);
		int _la;
		try {
			setState(7264);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,973,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7247);
				assignStmt();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7248);
				match(PERFORM);
				setState(7249);
				performStmt();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7250);
				match(GET);
				setState(7252);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CURRENT || _la==STACKED) {
					{
					setState(7251);
					_la = _input.LA(1);
					if ( !(_la==CURRENT || _la==STACKED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7254);
				match(DIAGNOSTICS);
				setState(7255);
				diagnosticOption();
				setState(7260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7256);
					match(COMMA);
					setState(7257);
					diagnosticOption();
					}
					}
					setState(7262);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7263);
				match(NULL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarContext extends ParserRuleContext {
		public SchemaQualifiedNameContext schemaQualifiedName() {
			return getRuleContext(SchemaQualifiedNameContext.class,0);
		}
		public TerminalNode DOLLAR_NUMBER() { return getToken(SQLParser.DOLLAR_NUMBER, 0); }
		public List<TerminalNode> LEFT_BRACKET() { return getTokens(SQLParser.LEFT_BRACKET); }
		public TerminalNode LEFT_BRACKET(int i) {
			return getToken(SQLParser.LEFT_BRACKET, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> RIGHT_BRACKET() { return getTokens(SQLParser.RIGHT_BRACKET); }
		public TerminalNode RIGHT_BRACKET(int i) {
			return getToken(SQLParser.RIGHT_BRACKET, i);
		}
		public VarContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_var; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterVar(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitVar(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitVar(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarContext var() throws RecognitionException {
		VarContext _localctx = new VarContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_var);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7268);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ABORT:
			case ABSOLUTE:
			case ACCESS:
			case ACTION:
			case ADD:
			case ADMIN:
			case AFTER:
			case AGGREGATE:
			case ALSO:
			case ALTER:
			case ALWAYS:
			case ASSERTION:
			case ASSIGNMENT:
			case AT:
			case ATTACH:
			case ATTRIBUTE:
			case BACKWARD:
			case BEFORE:
			case BEGIN:
			case BY:
			case CACHE:
			case CALL:
			case CALLED:
			case CASCADE:
			case CASCADED:
			case CATALOG:
			case CHAIN:
			case CHARACTERISTICS:
			case CHECKPOINT:
			case CLASS:
			case CLOSE:
			case CLUSTER:
			case COLUMNS:
			case COMMENT:
			case COMMENTS:
			case COMMIT:
			case COMMITTED:
			case CONFIGURATION:
			case CONFLICT:
			case CONNECTION:
			case CONSTRAINTS:
			case CONTENT:
			case CONTINUE:
			case CONVERSION:
			case COPY:
			case COST:
			case CSV:
			case CUBE:
			case CURRENT:
			case CURSOR:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DEALLOCATE:
			case DECLARE:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DELETE:
			case DELIMITER:
			case DELIMITERS:
			case DEPENDS:
			case DETACH:
			case DICTIONARY:
			case DISABLE:
			case DISCARD:
			case DOCUMENT:
			case DOMAIN:
			case DOUBLE:
			case DROP:
			case EACH:
			case ENABLE:
			case ENCODING:
			case ENCRYPTED:
			case ENUM:
			case ESCAPE:
			case EVENT:
			case EXCLUDE:
			case EXCLUDING:
			case EXCLUSIVE:
			case EXECUTE:
			case EXPLAIN:
			case EXTENSION:
			case EXTERNAL:
			case FAMILY:
			case FILTER:
			case FIRST:
			case FOLLOWING:
			case FORCE:
			case FORWARD:
			case FUNCTION:
			case FUNCTIONS:
			case GENERATED:
			case GLOBAL:
			case GRANTED:
			case GROUPS:
			case HANDLER:
			case HEADER:
			case HOLD:
			case HOUR:
			case IDENTITY:
			case IF:
			case IMMEDIATE:
			case IMMUTABLE:
			case IMPLICIT:
			case IMPORT:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDEX:
			case INDEXES:
			case INHERIT:
			case INHERITS:
			case INLINE:
			case INPUT:
			case INSENSITIVE:
			case INSERT:
			case INSTEAD:
			case INVOKER:
			case ISOLATION:
			case KEY:
			case LABEL:
			case LANGUAGE:
			case LARGE:
			case LAST:
			case LEAKPROOF:
			case LEVEL:
			case LISTEN:
			case LOAD:
			case LOCAL:
			case LOCATION:
			case LOCK:
			case LOCKED:
			case LOGGED:
			case MAPPING:
			case MATCH:
			case MATERIALIZED:
			case MAXVALUE:
			case METHOD:
			case MINUTE:
			case MINVALUE:
			case MODE:
			case MONTH:
			case MOVE:
			case NAME:
			case NAMES:
			case NEW:
			case NEXT:
			case NO:
			case NOTHING:
			case NOTIFY:
			case NOWAIT:
			case NULLS:
			case OBJECT:
			case OF:
			case OFF:
			case OIDS:
			case OLD:
			case OPERATOR:
			case OPTION:
			case OPTIONS:
			case ORDINALITY:
			case OTHERS:
			case OVER:
			case OVERRIDING:
			case OWNED:
			case OWNER:
			case PARALLEL:
			case PARSER:
			case PARTIAL:
			case PARTITION:
			case PASSING:
			case PASSWORD:
			case PLANS:
			case POLICY:
			case PRECEDING:
			case PREPARE:
			case PREPARED:
			case PRESERVE:
			case PRIOR:
			case PRIVILEGES:
			case PROCEDURAL:
			case PROCEDURE:
			case PROCEDURES:
			case PROGRAM:
			case PUBLICATION:
			case QUOTE:
			case RANGE:
			case READ:
			case REASSIGN:
			case RECHECK:
			case RECURSIVE:
			case REF:
			case REFERENCING:
			case REFRESH:
			case REINDEX:
			case RELATIVE:
			case RELEASE:
			case RENAME:
			case REPEATABLE:
			case REPLACE:
			case REPLICA:
			case RESET:
			case RESTART:
			case RESTRICT:
			case RETURNS:
			case REVOKE:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROUTINE:
			case ROUTINES:
			case ROWS:
			case RULE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMAS:
			case SCROLL:
			case SEARCH:
			case SECOND:
			case SECURITY:
			case SEQUENCE:
			case SEQUENCES:
			case SERIALIZABLE:
			case SERVER:
			case SESSION:
			case SET:
			case SETS:
			case SHARE:
			case SHOW:
			case SIMPLE:
			case SKIP_:
			case SNAPSHOT:
			case SQL:
			case STABLE:
			case STANDALONE:
			case START:
			case STATEMENT:
			case STATISTICS:
			case STDIN:
			case STDOUT:
			case STORAGE:
			case STORED:
			case STRICT:
			case STRIP:
			case SUBSCRIPTION:
			case SUPPORT:
			case SYSID:
			case SYSTEM:
			case TABLES:
			case TABLESPACE:
			case TEMP:
			case TEMPLATE:
			case TEMPORARY:
			case TEXT:
			case TIES:
			case TRANSACTION:
			case TRANSFORM:
			case TRIGGER:
			case TRUNCATE:
			case TRUSTED:
			case TYPE:
			case TYPES:
			case UNBOUNDED:
			case UNCOMMITTED:
			case UNENCRYPTED:
			case UNKNOWN:
			case UNLISTEN:
			case UNLOGGED:
			case UNTIL:
			case UPDATE:
			case VACUUM:
			case VALID:
			case VALIDATE:
			case VALIDATOR:
			case VALUE:
			case VARYING:
			case VERSION:
			case VIEW:
			case VIEWS:
			case VOLATILE:
			case WHITESPACE:
			case WITHIN:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case WRITE:
			case XML:
			case YEAR:
			case YES:
			case ZONE:
			case BETWEEN:
			case BIGINT:
			case BIT:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case COALESCE:
			case DEC:
			case DECIMAL:
			case EXISTS:
			case EXTRACT:
			case FLOAT:
			case GREATEST:
			case GROUPING:
			case INOUT:
			case INT:
			case INTEGER:
			case INTERVAL:
			case LEAST:
			case NATIONAL:
			case NCHAR:
			case NONE:
			case NULLIF:
			case NUMERIC:
			case OUT:
			case OVERLAY:
			case POSITION:
			case PRECISION:
			case REAL:
			case ROW:
			case SETOF:
			case SMALLINT:
			case SUBSTRING:
			case TIME:
			case TIMESTAMP:
			case TREAT:
			case TRIM:
			case VALUES:
			case VARCHAR:
			case XMLATTRIBUTES:
			case XMLCONCAT:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case ALIGNMENT:
			case BASETYPE:
			case BUFFERS:
			case BYPASSRLS:
			case CANONICAL:
			case CATEGORY:
			case COLLATABLE:
			case COMBINEFUNC:
			case COMMUTATOR:
			case CONNECT:
			case COSTS:
			case CREATEDB:
			case CREATEROLE:
			case DESERIALFUNC:
			case DETERMINISTIC:
			case DISABLE_PAGE_SKIPPING:
			case ELEMENT:
			case EXTENDED:
			case FINALFUNC:
			case FINALFUNC_EXTRA:
			case FINALFUNC_MODIFY:
			case FORCE_NOT_NULL:
			case FORCE_NULL:
			case FORCE_QUOTE:
			case FORMAT:
			case GETTOKEN:
			case HASH:
			case HASHES:
			case HEADLINE:
			case HYPOTHETICAL:
			case INDEX_CLEANUP:
			case INIT:
			case INITCOND:
			case INTERNALLENGTH:
			case JSON:
			case LC_COLLATE:
			case LC_CTYPE:
			case LEFTARG:
			case LEXIZE:
			case LEXTYPES:
			case LIST:
			case LOCALE:
			case LOGIN:
			case MAIN:
			case MERGES:
			case MFINALFUNC:
			case MFINALFUNC_EXTRA:
			case MFINALFUNC_MODIFY:
			case MINITCOND:
			case MINVFUNC:
			case MODULUS:
			case MSFUNC:
			case MSSPACE:
			case MSTYPE:
			case NEGATOR:
			case NOBYPASSRLS:
			case NOCREATEDB:
			case NOCREATEROLE:
			case NOINHERIT:
			case NOLOGIN:
			case NOREPLICATION:
			case NOSUPERUSER:
			case OUTPUT:
			case PASSEDBYVALUE:
			case PATH:
			case PERMISSIVE:
			case PLAIN:
			case PREFERRED:
			case PROVIDER:
			case READ_ONLY:
			case READ_WRITE:
			case RECEIVE:
			case REMAINDER:
			case REPLICATION:
			case RESTRICTED:
			case RESTRICTIVE:
			case RIGHTARG:
			case SAFE:
			case SEND:
			case SERIALFUNC:
			case SETTINGS:
			case SFUNC:
			case SHAREABLE:
			case SKIP_LOCKED:
			case SORTOP:
			case SSPACE:
			case STYPE:
			case SUBTYPE_DIFF:
			case SUBTYPE_OPCLASS:
			case SUBTYPE:
			case SUMMARY:
			case SUPERUSER:
			case TIMING:
			case TYPMOD_IN:
			case TYPMOD_OUT:
			case UNSAFE:
			case USAGE:
			case VARIABLE:
			case YAML:
			case ALIAS:
			case ASSERT:
			case CONSTANT:
			case DATATYPE:
			case DEBUG:
			case DETAIL:
			case DIAGNOSTICS:
			case ELSEIF:
			case ELSIF:
			case ERRCODE:
			case EXIT:
			case EXCEPTION:
			case FOREACH:
			case GET:
			case HINT:
			case INFO:
			case LOG:
			case LOOP:
			case MESSAGE:
			case NOTICE:
			case OPEN:
			case PERFORM:
			case QUERY:
			case RAISE:
			case RECORD:
			case RETURN:
			case REVERSE:
			case ROWTYPE:
			case SLICE:
			case SQLSTATE:
			case STACKED:
			case WARNING:
			case WHILE:
			case Identifier:
			case QuotedIdentifier:
				{
				setState(7266);
				schemaQualifiedName();
				}
				break;
			case DOLLAR_NUMBER:
				{
				setState(7267);
				match(DOLLAR_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(7276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==LEFT_BRACKET) {
				{
				{
				setState(7270);
				match(LEFT_BRACKET);
				setState(7271);
				vex(0);
				setState(7272);
				match(RIGHT_BRACKET);
				}
				}
				setState(7278);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticOptionContext extends ParserRuleContext {
		public VarContext var() {
			return getRuleContext(VarContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COLON_EQUAL() { return getToken(SQLParser.COLON_EQUAL, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public DiagnosticOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterDiagnosticOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitDiagnosticOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitDiagnosticOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticOptionContext diagnosticOption() throws RecognitionException {
		DiagnosticOptionContext _localctx = new DiagnosticOptionContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_diagnosticOption);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7279);
			var();
			setState(7280);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==COLON_EQUAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7281);
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PerformStmtContext extends ParserRuleContext {
		public SelectListContext selectList() {
			return getRuleContext(SelectListContext.class,0);
		}
		public List<SetQualifierContext> setQualifier() {
			return getRuleContexts(SetQualifierContext.class);
		}
		public SetQualifierContext setQualifier(int i) {
			return getRuleContext(SetQualifierContext.class,i);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public List<FromItemContext> fromItem() {
			return getRuleContexts(FromItemContext.class);
		}
		public FromItemContext fromItem(int i) {
			return getRuleContext(FromItemContext.class,i);
		}
		public TerminalNode WHERE() { return getToken(SQLParser.WHERE, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public GroupbyClauseContext groupbyClause() {
			return getRuleContext(GroupbyClauseContext.class,0);
		}
		public TerminalNode HAVING() { return getToken(SQLParser.HAVING, 0); }
		public TerminalNode WINDOW() { return getToken(SQLParser.WINDOW, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(SQLParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(SQLParser.AS, i);
		}
		public List<WindowDefinitionContext> windowDefinition() {
			return getRuleContexts(WindowDefinitionContext.class);
		}
		public WindowDefinitionContext windowDefinition(int i) {
			return getRuleContext(WindowDefinitionContext.class,i);
		}
		public SelectOpsContext selectOps() {
			return getRuleContext(SelectOpsContext.class,0);
		}
		public List<AfterOpsContext> afterOps() {
			return getRuleContexts(AfterOpsContext.class);
		}
		public AfterOpsContext afterOps(int i) {
			return getRuleContext(AfterOpsContext.class,i);
		}
		public TerminalNode INTERSECT() { return getToken(SQLParser.INTERSECT, 0); }
		public TerminalNode UNION() { return getToken(SQLParser.UNION, 0); }
		public TerminalNode EXCEPT() { return getToken(SQLParser.EXCEPT, 0); }
		public TerminalNode ON() { return getToken(SQLParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public PerformStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_performStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPerformStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPerformStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPerformStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PerformStmtContext performStmt() throws RecognitionException {
		PerformStmtContext _localctx = new PerformStmtContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_performStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7298);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,978,_ctx) ) {
			case 1:
				{
				setState(7283);
				setQualifier();
				setState(7296);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,977,_ctx) ) {
				case 1:
					{
					setState(7284);
					match(ON);
					setState(7285);
					match(LEFT_PAREN);
					setState(7286);
					vex(0);
					setState(7291);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7287);
						match(COMMA);
						setState(7288);
						vex(0);
						}
						}
						setState(7293);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(7294);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			setState(7300);
			selectList();
			setState(7310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(7301);
				match(FROM);
				setState(7302);
				fromItem(0);
				setState(7307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7303);
					match(COMMA);
					setState(7304);
					fromItem(0);
					}
					}
					setState(7309);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(7314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(7312);
				match(WHERE);
				setState(7313);
				vex(0);
				}
			}

			setState(7317);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==GROUP) {
				{
				setState(7316);
				groupbyClause();
				}
			}

			setState(7321);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(7319);
				match(HAVING);
				setState(7320);
				vex(0);
				}
			}

			setState(7337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(7323);
				match(WINDOW);
				setState(7324);
				identifier();
				setState(7325);
				match(AS);
				setState(7326);
				windowDefinition();
				setState(7334);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7327);
					match(COMMA);
					setState(7328);
					identifier();
					setState(7329);
					match(AS);
					setState(7330);
					windowDefinition();
					}
					}
					setState(7336);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			setState(7344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (EXCEPT - 396)) | (1L << (INTERSECT - 396)) | (1L << (UNION - 396)))) != 0)) {
				{
				setState(7339);
				_la = _input.LA(1);
				if ( !(((((_la - 396)) & ~0x3f) == 0 && ((1L << (_la - 396)) & ((1L << (EXCEPT - 396)) | (1L << (INTERSECT - 396)) | (1L << (UNION - 396)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7341);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL || _la==DISTINCT) {
					{
					setState(7340);
					setQualifier();
					}
				}

				setState(7343);
				selectOps(0);
				}
			}

			setState(7349);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 398)) & ~0x3f) == 0 && ((1L << (_la - 398)) & ((1L << (FETCH - 398)) | (1L << (FOR - 398)) | (1L << (LIMIT - 398)) | (1L << (OFFSET - 398)) | (1L << (ORDER - 398)))) != 0)) {
				{
				{
				setState(7346);
				afterOps();
				}
				}
				setState(7351);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignStmtContext extends ParserRuleContext {
		public VarContext var() {
			return getRuleContext(VarContext.class,0);
		}
		public TerminalNode COLON_EQUAL() { return getToken(SQLParser.COLON_EQUAL, 0); }
		public TerminalNode EQUAL() { return getToken(SQLParser.EQUAL, 0); }
		public SelectStmtNoParensContext selectStmtNoParens() {
			return getRuleContext(SelectStmtNoParensContext.class,0);
		}
		public PerformStmtContext performStmt() {
			return getRuleContext(PerformStmtContext.class,0);
		}
		public AssignStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterAssignStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitAssignStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitAssignStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignStmtContext assignStmt() throws RecognitionException {
		AssignStmtContext _localctx = new AssignStmtContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_assignStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7352);
			var();
			setState(7353);
			_la = _input.LA(1);
			if ( !(_la==EQUAL || _la==COLON_EQUAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(7356);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,989,_ctx) ) {
			case 1:
				{
				setState(7354);
				selectStmtNoParens();
				}
				break;
			case 2:
				{
				setState(7355);
				performStmt();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExecuteStmtContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(SQLParser.EXECUTE, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public UsingVexContext usingVex() {
			return getRuleContext(UsingVexContext.class,0);
		}
		public ExecuteStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_executeStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterExecuteStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitExecuteStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitExecuteStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExecuteStmtContext executeStmt() throws RecognitionException {
		ExecuteStmtContext _localctx = new ExecuteStmtContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_executeStmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7358);
			match(EXECUTE);
			setState(7359);
			vex(0);
			setState(7361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(7360);
				usingVex();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ControlStatementContext extends ParserRuleContext {
		public ReturnStmtContext returnStmt() {
			return getRuleContext(ReturnStmtContext.class,0);
		}
		public TerminalNode CALL() { return getToken(SQLParser.CALL, 0); }
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public IfStatementContext ifStatement() {
			return getRuleContext(IfStatementContext.class,0);
		}
		public CaseStatementContext caseStatement() {
			return getRuleContext(CaseStatementContext.class,0);
		}
		public LoopStatementContext loopStatement() {
			return getRuleContext(LoopStatementContext.class,0);
		}
		public ControlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_controlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterControlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitControlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitControlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ControlStatementContext controlStatement() throws RecognitionException {
		ControlStatementContext _localctx = new ControlStatementContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_controlStatement);
		try {
			setState(7369);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RETURN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7363);
				returnStmt();
				}
				break;
			case CALL:
				enterOuterAlt(_localctx, 2);
				{
				setState(7364);
				match(CALL);
				setState(7365);
				functionCall();
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 3);
				{
				setState(7366);
				ifStatement();
				}
				break;
			case CASE:
				enterOuterAlt(_localctx, 4);
				{
				setState(7367);
				caseStatement();
				}
				break;
			case CONTINUE:
			case FOR:
			case EXIT:
			case FOREACH:
			case LOOP:
			case WHILE:
			case LESS_LESS:
				enterOuterAlt(_localctx, 5);
				{
				setState(7368);
				loopStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CursorStatementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(SQLParser.OPEN, 0); }
		public VarContext var() {
			return getRuleContext(VarContext.class,0);
		}
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public PlpgsqlQueryContext plpgsqlQuery() {
			return getRuleContext(PlpgsqlQueryContext.class,0);
		}
		public TerminalNode SCROLL() { return getToken(SQLParser.SCROLL, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode FETCH() { return getToken(SQLParser.FETCH, 0); }
		public FetchMoveDirectionContext fetchMoveDirection() {
			return getRuleContext(FetchMoveDirectionContext.class,0);
		}
		public TerminalNode FROM() { return getToken(SQLParser.FROM, 0); }
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode MOVE() { return getToken(SQLParser.MOVE, 0); }
		public TerminalNode CLOSE() { return getToken(SQLParser.CLOSE, 0); }
		public CursorStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursorStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCursorStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCursorStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCursorStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CursorStatementContext cursorStatement() throws RecognitionException {
		CursorStatementContext _localctx = new CursorStatementContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_cursorStatement);
		int _la;
		try {
			setState(7415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1000,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7371);
				match(OPEN);
				setState(7372);
				var();
				setState(7377);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NO || _la==SCROLL) {
					{
					setState(7374);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(7373);
						match(NO);
						}
					}

					setState(7376);
					match(SCROLL);
					}
				}

				setState(7379);
				match(FOR);
				setState(7380);
				plpgsqlQuery();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7382);
				match(OPEN);
				setState(7383);
				var();
				setState(7395);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7384);
					match(LEFT_PAREN);
					setState(7385);
					option();
					setState(7390);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7386);
						match(COMMA);
						setState(7387);
						option();
						}
						}
						setState(7392);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(7393);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7397);
				match(FETCH);
				setState(7399);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,996,_ctx) ) {
				case 1:
					{
					setState(7398);
					fetchMoveDirection();
					}
					break;
				}
				setState(7402);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(7401);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7404);
				var();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7405);
				match(MOVE);
				setState(7407);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,998,_ctx) ) {
				case 1:
					{
					setState(7406);
					fetchMoveDirection();
					}
					break;
				}
				setState(7410);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(7409);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(7412);
				var();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7413);
				match(CLOSE);
				setState(7414);
				var();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OptionContext extends ParserRuleContext {
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode COLON_EQUAL() { return getToken(SQLParser.COLON_EQUAL, 0); }
		public OptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OptionContext option() throws RecognitionException {
		OptionContext _localctx = new OptionContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_option);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7420);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1001,_ctx) ) {
			case 1:
				{
				setState(7417);
				identifier();
				setState(7418);
				match(COLON_EQUAL);
				}
				break;
			}
			setState(7422);
			vex(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionStatementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(SQLParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(SQLParser.ROLLBACK, 0); }
		public TerminalNode AND() { return getToken(SQLParser.AND, 0); }
		public TerminalNode CHAIN() { return getToken(SQLParser.CHAIN, 0); }
		public TerminalNode NO() { return getToken(SQLParser.NO, 0); }
		public LockTableContext lockTable() {
			return getRuleContext(LockTableContext.class,0);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterTransactionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitTransactionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitTransactionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionStatementContext transactionStatement() throws RecognitionException {
		TransactionStatementContext _localctx = new TransactionStatementContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_transactionStatement);
		int _la;
		try {
			setState(7433);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMIT:
			case ROLLBACK:
				enterOuterAlt(_localctx, 1);
				{
				setState(7424);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AND) {
					{
					setState(7425);
					match(AND);
					setState(7427);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NO) {
						{
						setState(7426);
						match(NO);
						}
					}

					setState(7429);
					match(CHAIN);
					}
				}

				}
				break;
			case LOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(7432);
				lockTable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MessageStatementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(SQLParser.RAISE, 0); }
		public LogLevelContext logLevel() {
			return getRuleContext(LogLevelContext.class,0);
		}
		public CharacterStringContext characterString() {
			return getRuleContext(CharacterStringContext.class,0);
		}
		public RaiseUsingContext raiseUsing() {
			return getRuleContext(RaiseUsingContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode SQLSTATE() { return getToken(SQLParser.SQLSTATE, 0); }
		public TerminalNode ASSERT() { return getToken(SQLParser.ASSERT, 0); }
		public MessageStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_messageStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterMessageStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitMessageStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitMessageStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MessageStatementContext messageStatement() throws RecognitionException {
		MessageStatementContext _localctx = new MessageStatementContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_messageStatement);
		int _la;
		try {
			setState(7475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1014,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7435);
				match(RAISE);
				setState(7437);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 546)) & ~0x3f) == 0 && ((1L << (_la - 546)) & ((1L << (DEBUG - 546)) | (1L << (EXCEPTION - 546)) | (1L << (INFO - 546)) | (1L << (LOG - 546)) | (1L << (NOTICE - 546)) | (1L << (WARNING - 546)))) != 0)) {
					{
					setState(7436);
					logLevel();
					}
				}

				setState(7447);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==Character_String_Literal || _la==BeginDollarStringConstant) {
					{
					setState(7439);
					characterString();
					setState(7444);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7440);
						match(COMMA);
						setState(7441);
						vex(0);
						}
						}
						setState(7446);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(7450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7449);
					raiseUsing();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7452);
				match(RAISE);
				setState(7454);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1009,_ctx) ) {
				case 1:
					{
					setState(7453);
					logLevel();
					}
					break;
				}
				setState(7456);
				identifier();
				setState(7458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7457);
					raiseUsing();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7460);
				match(RAISE);
				setState(7462);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 546)) & ~0x3f) == 0 && ((1L << (_la - 546)) & ((1L << (DEBUG - 546)) | (1L << (EXCEPTION - 546)) | (1L << (INFO - 546)) | (1L << (LOG - 546)) | (1L << (NOTICE - 546)) | (1L << (WARNING - 546)))) != 0)) {
					{
					setState(7461);
					logLevel();
					}
				}

				setState(7464);
				match(SQLSTATE);
				setState(7465);
				characterString();
				setState(7467);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(7466);
					raiseUsing();
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7469);
				match(ASSERT);
				setState(7470);
				vex(0);
				setState(7473);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(7471);
					match(COMMA);
					setState(7472);
					vex(0);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogLevelContext extends ParserRuleContext {
		public TerminalNode DEBUG() { return getToken(SQLParser.DEBUG, 0); }
		public TerminalNode LOG() { return getToken(SQLParser.LOG, 0); }
		public TerminalNode INFO() { return getToken(SQLParser.INFO, 0); }
		public TerminalNode NOTICE() { return getToken(SQLParser.NOTICE, 0); }
		public TerminalNode WARNING() { return getToken(SQLParser.WARNING, 0); }
		public TerminalNode EXCEPTION() { return getToken(SQLParser.EXCEPTION, 0); }
		public LogLevelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logLevel; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLogLevel(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLogLevel(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitLogLevel(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogLevelContext logLevel() throws RecognitionException {
		LogLevelContext _localctx = new LogLevelContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_logLevel);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7477);
			_la = _input.LA(1);
			if ( !(((((_la - 546)) & ~0x3f) == 0 && ((1L << (_la - 546)) & ((1L << (DEBUG - 546)) | (1L << (EXCEPTION - 546)) | (1L << (INFO - 546)) | (1L << (LOG - 546)) | (1L << (NOTICE - 546)) | (1L << (WARNING - 546)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RaiseUsingContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public List<RaiseParamContext> raiseParam() {
			return getRuleContexts(RaiseParamContext.class);
		}
		public RaiseParamContext raiseParam(int i) {
			return getRuleContext(RaiseParamContext.class,i);
		}
		public List<TerminalNode> EQUAL() { return getTokens(SQLParser.EQUAL); }
		public TerminalNode EQUAL(int i) {
			return getToken(SQLParser.EQUAL, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public RaiseUsingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raiseUsing; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRaiseUsing(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRaiseUsing(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitRaiseUsing(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RaiseUsingContext raiseUsing() throws RecognitionException {
		RaiseUsingContext _localctx = new RaiseUsingContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_raiseUsing);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7479);
			match(USING);
			setState(7480);
			raiseParam();
			setState(7481);
			match(EQUAL);
			setState(7482);
			vex(0);
			setState(7490);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7483);
				match(COMMA);
				setState(7484);
				raiseParam();
				setState(7485);
				match(EQUAL);
				setState(7486);
				vex(0);
				}
				}
				setState(7492);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RaiseParamContext extends ParserRuleContext {
		public TerminalNode MESSAGE() { return getToken(SQLParser.MESSAGE, 0); }
		public TerminalNode DETAIL() { return getToken(SQLParser.DETAIL, 0); }
		public TerminalNode HINT() { return getToken(SQLParser.HINT, 0); }
		public TerminalNode ERRCODE() { return getToken(SQLParser.ERRCODE, 0); }
		public TerminalNode COLUMN() { return getToken(SQLParser.COLUMN, 0); }
		public TerminalNode CONSTRAINT() { return getToken(SQLParser.CONSTRAINT, 0); }
		public TerminalNode DATATYPE() { return getToken(SQLParser.DATATYPE, 0); }
		public TerminalNode TABLE() { return getToken(SQLParser.TABLE, 0); }
		public TerminalNode SCHEMA() { return getToken(SQLParser.SCHEMA, 0); }
		public RaiseParamContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raiseParam; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterRaiseParam(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitRaiseParam(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitRaiseParam(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RaiseParamContext raiseParam() throws RecognitionException {
		RaiseParamContext _localctx = new RaiseParamContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_raiseParam);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7493);
			_la = _input.LA(1);
			if ( !(_la==SCHEMA || ((((_la - 380)) & ~0x3f) == 0 && ((1L << (_la - 380)) & ((1L << (COLUMN - 380)) | (1L << (CONSTRAINT - 380)) | (1L << (TABLE - 380)))) != 0) || ((((_la - 545)) & ~0x3f) == 0 && ((1L << (_la - 545)) & ((1L << (DATATYPE - 545)) | (1L << (DETAIL - 545)) | (1L << (ERRCODE - 545)) | (1L << (HINT - 545)) | (1L << (MESSAGE - 545)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReturnStmtContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(SQLParser.RETURN, 0); }
		public PerformStmtContext performStmt() {
			return getRuleContext(PerformStmtContext.class,0);
		}
		public TerminalNode NEXT() { return getToken(SQLParser.NEXT, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public TerminalNode QUERY() { return getToken(SQLParser.QUERY, 0); }
		public PlpgsqlQueryContext plpgsqlQuery() {
			return getRuleContext(PlpgsqlQueryContext.class,0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_returnStmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterReturnStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitReturnStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitReturnStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReturnStmtContext returnStmt() throws RecognitionException {
		ReturnStmtContext _localctx = new ReturnStmtContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_returnStmt);
		int _la;
		try {
			setState(7505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1017,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7495);
				match(RETURN);
				setState(7497);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (DISTINCT - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (PLACEHOLDER - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
					{
					setState(7496);
					performStmt();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7499);
				match(RETURN);
				setState(7500);
				match(NEXT);
				setState(7501);
				vex(0);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7502);
				match(RETURN);
				setState(7503);
				match(QUERY);
				setState(7504);
				plpgsqlQuery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStatementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(SQLParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(SQLParser.LOOP, i);
		}
		public FunctionStatementsContext functionStatements() {
			return getRuleContext(FunctionStatementsContext.class,0);
		}
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public StartLabelContext startLabel() {
			return getRuleContext(StartLabelContext.class,0);
		}
		public LoopStartContext loopStart() {
			return getRuleContext(LoopStartContext.class,0);
		}
		public IdentifierContext identifier() {
			return getRuleContext(IdentifierContext.class,0);
		}
		public TerminalNode EXIT() { return getToken(SQLParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(SQLParser.CONTINUE, 0); }
		public TerminalNode WHEN() { return getToken(SQLParser.WHEN, 0); }
		public VexContext vex() {
			return getRuleContext(VexContext.class,0);
		}
		public LoopStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLoopStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLoopStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitLoopStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStatementContext loopStatement() throws RecognitionException {
		LoopStatementContext _localctx = new LoopStatementContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_loopStatement);
		int _la;
		try {
			setState(7528);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
			case FOREACH:
			case LOOP:
			case WHILE:
			case LESS_LESS:
				enterOuterAlt(_localctx, 1);
				{
				setState(7508);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LESS_LESS) {
					{
					setState(7507);
					startLabel();
					}
				}

				setState(7511);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR || _la==FOREACH || _la==WHILE) {
					{
					setState(7510);
					loopStart();
					}
				}

				setState(7513);
				match(LOOP);
				setState(7514);
				functionStatements();
				setState(7515);
				match(END);
				setState(7516);
				match(LOOP);
				setState(7518);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
					{
					setState(7517);
					identifier();
					}
				}

				}
				break;
			case CONTINUE:
			case EXIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(7520);
				_la = _input.LA(1);
				if ( !(_la==CONTINUE || _la==EXIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7522);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)))) != 0) || ((((_la - 443)) & ~0x3f) == 0 && ((1L << (_la - 443)) & ((1L << (ALIGNMENT - 443)) | (1L << (BASETYPE - 443)) | (1L << (BUFFERS - 443)) | (1L << (BYPASSRLS - 443)) | (1L << (CANONICAL - 443)) | (1L << (CATEGORY - 443)) | (1L << (COLLATABLE - 443)) | (1L << (COMBINEFUNC - 443)) | (1L << (COMMUTATOR - 443)) | (1L << (CONNECT - 443)) | (1L << (COSTS - 443)) | (1L << (CREATEDB - 443)) | (1L << (CREATEROLE - 443)) | (1L << (DESERIALFUNC - 443)) | (1L << (DETERMINISTIC - 443)) | (1L << (DISABLE_PAGE_SKIPPING - 443)) | (1L << (ELEMENT - 443)) | (1L << (EXTENDED - 443)) | (1L << (FINALFUNC - 443)) | (1L << (FINALFUNC_EXTRA - 443)) | (1L << (FINALFUNC_MODIFY - 443)) | (1L << (FORCE_NOT_NULL - 443)) | (1L << (FORCE_NULL - 443)) | (1L << (FORCE_QUOTE - 443)) | (1L << (FORMAT - 443)) | (1L << (GETTOKEN - 443)) | (1L << (HASH - 443)) | (1L << (HASHES - 443)) | (1L << (HEADLINE - 443)) | (1L << (HYPOTHETICAL - 443)) | (1L << (INDEX_CLEANUP - 443)) | (1L << (INIT - 443)) | (1L << (INITCOND - 443)) | (1L << (INTERNALLENGTH - 443)) | (1L << (JSON - 443)) | (1L << (LC_COLLATE - 443)) | (1L << (LC_CTYPE - 443)) | (1L << (LEFTARG - 443)) | (1L << (LEXIZE - 443)) | (1L << (LEXTYPES - 443)) | (1L << (LIST - 443)) | (1L << (LOCALE - 443)) | (1L << (LOGIN - 443)) | (1L << (MAIN - 443)) | (1L << (MERGES - 443)) | (1L << (MFINALFUNC - 443)) | (1L << (MFINALFUNC_EXTRA - 443)) | (1L << (MFINALFUNC_MODIFY - 443)) | (1L << (MINITCOND - 443)) | (1L << (MINVFUNC - 443)) | (1L << (MODULUS - 443)) | (1L << (MSFUNC - 443)) | (1L << (MSSPACE - 443)) | (1L << (MSTYPE - 443)) | (1L << (NEGATOR - 443)) | (1L << (NOBYPASSRLS - 443)) | (1L << (NOCREATEDB - 443)) | (1L << (NOCREATEROLE - 443)) | (1L << (NOINHERIT - 443)) | (1L << (NOLOGIN - 443)) | (1L << (NOREPLICATION - 443)) | (1L << (NOSUPERUSER - 443)) | (1L << (OUTPUT - 443)) | (1L << (PASSEDBYVALUE - 443)))) != 0) || ((((_la - 507)) & ~0x3f) == 0 && ((1L << (_la - 507)) & ((1L << (PATH - 507)) | (1L << (PERMISSIVE - 507)) | (1L << (PLAIN - 507)) | (1L << (PREFERRED - 507)) | (1L << (PROVIDER - 507)) | (1L << (READ_ONLY - 507)) | (1L << (READ_WRITE - 507)) | (1L << (RECEIVE - 507)) | (1L << (REMAINDER - 507)) | (1L << (REPLICATION - 507)) | (1L << (RESTRICTED - 507)) | (1L << (RESTRICTIVE - 507)) | (1L << (RIGHTARG - 507)) | (1L << (SAFE - 507)) | (1L << (SEND - 507)) | (1L << (SERIALFUNC - 507)) | (1L << (SETTINGS - 507)) | (1L << (SFUNC - 507)) | (1L << (SHAREABLE - 507)) | (1L << (SKIP_LOCKED - 507)) | (1L << (SORTOP - 507)) | (1L << (SSPACE - 507)) | (1L << (STYPE - 507)) | (1L << (SUBTYPE_DIFF - 507)) | (1L << (SUBTYPE_OPCLASS - 507)) | (1L << (SUBTYPE - 507)) | (1L << (SUMMARY - 507)) | (1L << (SUPERUSER - 507)) | (1L << (TIMING - 507)) | (1L << (TYPMOD_IN - 507)) | (1L << (TYPMOD_OUT - 507)) | (1L << (UNSAFE - 507)) | (1L << (USAGE - 507)) | (1L << (VARIABLE - 507)) | (1L << (YAML - 507)) | (1L << (ALIAS - 507)) | (1L << (ASSERT - 507)) | (1L << (CONSTANT - 507)) | (1L << (DATATYPE - 507)) | (1L << (DEBUG - 507)) | (1L << (DETAIL - 507)) | (1L << (DIAGNOSTICS - 507)) | (1L << (ELSEIF - 507)) | (1L << (ELSIF - 507)) | (1L << (ERRCODE - 507)) | (1L << (EXIT - 507)) | (1L << (EXCEPTION - 507)) | (1L << (FOREACH - 507)) | (1L << (GET - 507)) | (1L << (HINT - 507)) | (1L << (INFO - 507)) | (1L << (LOG - 507)) | (1L << (LOOP - 507)) | (1L << (MESSAGE - 507)) | (1L << (NOTICE - 507)) | (1L << (OPEN - 507)) | (1L << (PERFORM - 507)) | (1L << (QUERY - 507)) | (1L << (RAISE - 507)) | (1L << (RECORD - 507)) | (1L << (RETURN - 507)) | (1L << (REVERSE - 507)) | (1L << (ROWTYPE - 507)) | (1L << (SLICE - 507)))) != 0) || ((((_la - 571)) & ~0x3f) == 0 && ((1L << (_la - 571)) & ((1L << (SQLSTATE - 571)) | (1L << (STACKED - 571)) | (1L << (WARNING - 571)) | (1L << (WHILE - 571)) | (1L << (Identifier - 571)) | (1L << (QuotedIdentifier - 571)))) != 0)) {
					{
					setState(7521);
					identifier();
					}
				}

				setState(7526);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(7524);
					match(WHEN);
					setState(7525);
					vex(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoopStartContext extends ParserRuleContext {
		public IdentifierContext alias;
		public IdentifierContext cursor;
		public TerminalNode WHILE() { return getToken(SQLParser.WHILE, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public TerminalNode FOR() { return getToken(SQLParser.FOR, 0); }
		public TerminalNode IN() { return getToken(SQLParser.IN, 0); }
		public TerminalNode DOUBLE_DOT() { return getToken(SQLParser.DOUBLE_DOT, 0); }
		public List<IdentifierContext> identifier() {
			return getRuleContexts(IdentifierContext.class);
		}
		public IdentifierContext identifier(int i) {
			return getRuleContext(IdentifierContext.class,i);
		}
		public TerminalNode REVERSE() { return getToken(SQLParser.REVERSE, 0); }
		public TerminalNode BY() { return getToken(SQLParser.BY, 0); }
		public IdentifierListContext identifierList() {
			return getRuleContext(IdentifierListContext.class,0);
		}
		public PlpgsqlQueryContext plpgsqlQuery() {
			return getRuleContext(PlpgsqlQueryContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(SQLParser.LEFT_PAREN, 0); }
		public List<OptionContext> option() {
			return getRuleContexts(OptionContext.class);
		}
		public OptionContext option(int i) {
			return getRuleContext(OptionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(SQLParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public TerminalNode FOREACH() { return getToken(SQLParser.FOREACH, 0); }
		public TerminalNode ARRAY() { return getToken(SQLParser.ARRAY, 0); }
		public TerminalNode SLICE() { return getToken(SQLParser.SLICE, 0); }
		public TerminalNode NUMBER_LITERAL() { return getToken(SQLParser.NUMBER_LITERAL, 0); }
		public LoopStartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loopStart; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLoopStart(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLoopStart(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitLoopStart(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoopStartContext loopStart() throws RecognitionException {
		LoopStartContext _localctx = new LoopStartContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_loopStart);
		int _la;
		try {
			setState(7577);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,1029,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(7530);
				match(WHILE);
				setState(7531);
				vex(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(7532);
				match(FOR);
				setState(7533);
				((LoopStartContext)_localctx).alias = identifier();
				setState(7534);
				match(IN);
				setState(7536);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,1024,_ctx) ) {
				case 1:
					{
					setState(7535);
					match(REVERSE);
					}
					break;
				}
				setState(7538);
				vex(0);
				setState(7539);
				match(DOUBLE_DOT);
				setState(7540);
				vex(0);
				setState(7543);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY) {
					{
					setState(7541);
					match(BY);
					setState(7542);
					vex(0);
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(7545);
				match(FOR);
				setState(7546);
				identifierList();
				setState(7547);
				match(IN);
				setState(7548);
				plpgsqlQuery();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(7550);
				match(FOR);
				setState(7551);
				((LoopStartContext)_localctx).cursor = identifier();
				setState(7552);
				match(IN);
				setState(7553);
				identifier();
				setState(7565);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(7554);
					match(LEFT_PAREN);
					setState(7555);
					option();
					setState(7560);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(7556);
						match(COMMA);
						setState(7557);
						option();
						}
						}
						setState(7562);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(7563);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(7567);
				match(FOREACH);
				setState(7568);
				identifierList();
				setState(7571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SLICE) {
					{
					setState(7569);
					match(SLICE);
					setState(7570);
					match(NUMBER_LITERAL);
					}
				}

				setState(7573);
				match(IN);
				setState(7574);
				match(ARRAY);
				setState(7575);
				vex(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UsingVexContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(SQLParser.USING, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public UsingVexContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_usingVex; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterUsingVex(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitUsingVex(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitUsingVex(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UsingVexContext usingVex() throws RecognitionException {
		UsingVexContext _localctx = new UsingVexContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_usingVex);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7579);
			match(USING);
			setState(7580);
			vex(0);
			setState(7585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(7581);
				match(COMMA);
				setState(7582);
				vex(0);
				}
				}
				setState(7587);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfStatementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(SQLParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(SQLParser.IF, i);
		}
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(SQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SQLParser.THEN, i);
		}
		public List<FunctionStatementsContext> functionStatements() {
			return getRuleContexts(FunctionStatementsContext.class);
		}
		public FunctionStatementsContext functionStatements(int i) {
			return getRuleContext(FunctionStatementsContext.class,i);
		}
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public TerminalNode ELSE() { return getToken(SQLParser.ELSE, 0); }
		public List<TerminalNode> ELSIF() { return getTokens(SQLParser.ELSIF); }
		public TerminalNode ELSIF(int i) {
			return getToken(SQLParser.ELSIF, i);
		}
		public List<TerminalNode> ELSEIF() { return getTokens(SQLParser.ELSEIF); }
		public TerminalNode ELSEIF(int i) {
			return getToken(SQLParser.ELSEIF, i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterIfStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitIfStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitIfStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfStatementContext ifStatement() throws RecognitionException {
		IfStatementContext _localctx = new IfStatementContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_ifStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7588);
			match(IF);
			setState(7589);
			vex(0);
			setState(7590);
			match(THEN);
			setState(7591);
			functionStatements();
			setState(7599);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSEIF || _la==ELSIF) {
				{
				{
				setState(7592);
				_la = _input.LA(1);
				if ( !(_la==ELSEIF || _la==ELSIF) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(7593);
				vex(0);
				setState(7594);
				match(THEN);
				setState(7595);
				functionStatements();
				}
				}
				setState(7601);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(7604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(7602);
				match(ELSE);
				setState(7603);
				functionStatements();
				}
			}

			setState(7606);
			match(END);
			setState(7607);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseStatementContext extends ParserRuleContext {
		public List<TerminalNode> CASE() { return getTokens(SQLParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(SQLParser.CASE, i);
		}
		public TerminalNode END() { return getToken(SQLParser.END, 0); }
		public List<VexContext> vex() {
			return getRuleContexts(VexContext.class);
		}
		public VexContext vex(int i) {
			return getRuleContext(VexContext.class,i);
		}
		public List<TerminalNode> WHEN() { return getTokens(SQLParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(SQLParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(SQLParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(SQLParser.THEN, i);
		}
		public List<FunctionStatementsContext> functionStatements() {
			return getRuleContexts(FunctionStatementsContext.class);
		}
		public FunctionStatementsContext functionStatements(int i) {
			return getRuleContext(FunctionStatementsContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(SQLParser.ELSE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(SQLParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(SQLParser.COMMA, i);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterCaseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitCaseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitCaseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseStatementContext caseStatement() throws RecognitionException {
		CaseStatementContext _localctx = new CaseStatementContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_caseStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(7609);
			match(CASE);
			setState(7611);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABORT) | (1L << ABSOLUTE) | (1L << ACCESS) | (1L << ACTION) | (1L << ADD) | (1L << ADMIN) | (1L << AFTER) | (1L << AGGREGATE) | (1L << ALSO) | (1L << ALTER) | (1L << ALWAYS) | (1L << ASSERTION) | (1L << ASSIGNMENT) | (1L << AT) | (1L << ATTACH) | (1L << ATTRIBUTE) | (1L << BACKWARD) | (1L << BEFORE) | (1L << BEGIN) | (1L << BY) | (1L << CACHE) | (1L << CALL) | (1L << CALLED) | (1L << CASCADE) | (1L << CASCADED) | (1L << CATALOG) | (1L << CHAIN) | (1L << CHARACTERISTICS) | (1L << CHECKPOINT) | (1L << CLASS) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLUMNS) | (1L << COMMENT) | (1L << COMMENTS) | (1L << COMMIT) | (1L << COMMITTED) | (1L << CONFIGURATION) | (1L << CONFLICT) | (1L << CONNECTION) | (1L << CONSTRAINTS) | (1L << CONTENT) | (1L << CONTINUE) | (1L << CONVERSION) | (1L << COPY) | (1L << COST) | (1L << CSV) | (1L << CUBE) | (1L << CURRENT) | (1L << CURSOR) | (1L << CYCLE) | (1L << DATA) | (1L << DATABASE) | (1L << DAY) | (1L << DEALLOCATE) | (1L << DECLARE) | (1L << DEFAULTS) | (1L << DEFERRED) | (1L << DEFINER) | (1L << DELETE) | (1L << DELIMITER) | (1L << DELIMITERS) | (1L << DEPENDS))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (DETACH - 64)) | (1L << (DICTIONARY - 64)) | (1L << (DISABLE - 64)) | (1L << (DISCARD - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOMAIN - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (EACH - 64)) | (1L << (ENABLE - 64)) | (1L << (ENCODING - 64)) | (1L << (ENCRYPTED - 64)) | (1L << (ENUM - 64)) | (1L << (ESCAPE - 64)) | (1L << (EVENT - 64)) | (1L << (EXCLUDE - 64)) | (1L << (EXCLUDING - 64)) | (1L << (EXCLUSIVE - 64)) | (1L << (EXECUTE - 64)) | (1L << (EXPLAIN - 64)) | (1L << (EXTENSION - 64)) | (1L << (EXTERNAL - 64)) | (1L << (FAMILY - 64)) | (1L << (FILTER - 64)) | (1L << (FIRST - 64)) | (1L << (FOLLOWING - 64)) | (1L << (FORCE - 64)) | (1L << (FORWARD - 64)) | (1L << (FUNCTION - 64)) | (1L << (FUNCTIONS - 64)) | (1L << (GENERATED - 64)) | (1L << (GLOBAL - 64)) | (1L << (GRANTED - 64)) | (1L << (GROUPS - 64)) | (1L << (HANDLER - 64)) | (1L << (HEADER - 64)) | (1L << (HOLD - 64)) | (1L << (HOUR - 64)) | (1L << (IDENTITY - 64)) | (1L << (IF - 64)) | (1L << (IMMEDIATE - 64)) | (1L << (IMMUTABLE - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPORT - 64)) | (1L << (INCLUDE - 64)) | (1L << (INCLUDING - 64)) | (1L << (INCREMENT - 64)) | (1L << (INDEX - 64)) | (1L << (INDEXES - 64)) | (1L << (INHERIT - 64)) | (1L << (INHERITS - 64)) | (1L << (INLINE - 64)) | (1L << (INPUT - 64)) | (1L << (INSENSITIVE - 64)) | (1L << (INSERT - 64)) | (1L << (INSTEAD - 64)) | (1L << (INVOKER - 64)) | (1L << (ISOLATION - 64)) | (1L << (KEY - 64)) | (1L << (LABEL - 64)) | (1L << (LANGUAGE - 64)) | (1L << (LARGE - 64)) | (1L << (LAST - 64)) | (1L << (LEAKPROOF - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (LEVEL - 128)) | (1L << (LISTEN - 128)) | (1L << (LOAD - 128)) | (1L << (LOCAL - 128)) | (1L << (LOCATION - 128)) | (1L << (LOCK - 128)) | (1L << (LOCKED - 128)) | (1L << (LOGGED - 128)) | (1L << (MAPPING - 128)) | (1L << (MATCH - 128)) | (1L << (MATERIALIZED - 128)) | (1L << (MAXVALUE - 128)) | (1L << (METHOD - 128)) | (1L << (MINUTE - 128)) | (1L << (MINVALUE - 128)) | (1L << (MODE - 128)) | (1L << (MONTH - 128)) | (1L << (MOVE - 128)) | (1L << (NAME - 128)) | (1L << (NAMES - 128)) | (1L << (NEW - 128)) | (1L << (NEXT - 128)) | (1L << (NO - 128)) | (1L << (NOTHING - 128)) | (1L << (NOTIFY - 128)) | (1L << (NOWAIT - 128)) | (1L << (NULLS - 128)) | (1L << (OBJECT - 128)) | (1L << (OF - 128)) | (1L << (OFF - 128)) | (1L << (OIDS - 128)) | (1L << (OLD - 128)) | (1L << (OPERATOR - 128)) | (1L << (OPTION - 128)) | (1L << (OPTIONS - 128)) | (1L << (ORDINALITY - 128)) | (1L << (OTHERS - 128)) | (1L << (OVER - 128)) | (1L << (OVERRIDING - 128)) | (1L << (OWNED - 128)) | (1L << (OWNER - 128)) | (1L << (PARALLEL - 128)) | (1L << (PARSER - 128)) | (1L << (PARTIAL - 128)) | (1L << (PARTITION - 128)) | (1L << (PASSING - 128)) | (1L << (PASSWORD - 128)) | (1L << (PLANS - 128)) | (1L << (POLICY - 128)) | (1L << (PRECEDING - 128)) | (1L << (PREPARE - 128)) | (1L << (PREPARED - 128)) | (1L << (PRESERVE - 128)) | (1L << (PRIOR - 128)) | (1L << (PRIVILEGES - 128)) | (1L << (PROCEDURAL - 128)) | (1L << (PROCEDURE - 128)) | (1L << (PROCEDURES - 128)) | (1L << (PROGRAM - 128)) | (1L << (PUBLICATION - 128)) | (1L << (QUOTE - 128)) | (1L << (RANGE - 128)) | (1L << (READ - 128)) | (1L << (REASSIGN - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (RECHECK - 192)) | (1L << (RECURSIVE - 192)) | (1L << (REF - 192)) | (1L << (REFERENCING - 192)) | (1L << (REFRESH - 192)) | (1L << (REINDEX - 192)) | (1L << (RELATIVE - 192)) | (1L << (RELEASE - 192)) | (1L << (RENAME - 192)) | (1L << (REPEATABLE - 192)) | (1L << (REPLACE - 192)) | (1L << (REPLICA - 192)) | (1L << (RESET - 192)) | (1L << (RESTART - 192)) | (1L << (RESTRICT - 192)) | (1L << (RETURNS - 192)) | (1L << (REVOKE - 192)) | (1L << (ROLE - 192)) | (1L << (ROLLBACK - 192)) | (1L << (ROLLUP - 192)) | (1L << (ROUTINE - 192)) | (1L << (ROUTINES - 192)) | (1L << (ROWS - 192)) | (1L << (RULE - 192)) | (1L << (SAVEPOINT - 192)) | (1L << (SCHEMA - 192)) | (1L << (SCHEMAS - 192)) | (1L << (SCROLL - 192)) | (1L << (SEARCH - 192)) | (1L << (SECOND - 192)) | (1L << (SECURITY - 192)) | (1L << (SEQUENCE - 192)) | (1L << (SEQUENCES - 192)) | (1L << (SERIALIZABLE - 192)) | (1L << (SERVER - 192)) | (1L << (SESSION - 192)) | (1L << (SET - 192)) | (1L << (SETS - 192)) | (1L << (SHARE - 192)) | (1L << (SHOW - 192)) | (1L << (SIMPLE - 192)) | (1L << (SKIP_ - 192)) | (1L << (SNAPSHOT - 192)) | (1L << (SQL - 192)) | (1L << (STABLE - 192)) | (1L << (STANDALONE - 192)) | (1L << (START - 192)) | (1L << (STATEMENT - 192)) | (1L << (STATISTICS - 192)) | (1L << (STDIN - 192)) | (1L << (STDOUT - 192)) | (1L << (STORAGE - 192)) | (1L << (STORED - 192)) | (1L << (STRICT - 192)) | (1L << (STRIP - 192)) | (1L << (SUBSCRIPTION - 192)) | (1L << (SUPPORT - 192)) | (1L << (SYSID - 192)) | (1L << (SYSTEM - 192)) | (1L << (TABLES - 192)) | (1L << (TABLESPACE - 192)) | (1L << (TEMP - 192)) | (1L << (TEMPLATE - 192)) | (1L << (TEMPORARY - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TEXT - 256)) | (1L << (TIES - 256)) | (1L << (TRANSACTION - 256)) | (1L << (TRANSFORM - 256)) | (1L << (TRIGGER - 256)) | (1L << (TRUNCATE - 256)) | (1L << (TRUSTED - 256)) | (1L << (TYPE - 256)) | (1L << (TYPES - 256)) | (1L << (UNBOUNDED - 256)) | (1L << (UNCOMMITTED - 256)) | (1L << (UNENCRYPTED - 256)) | (1L << (UNKNOWN - 256)) | (1L << (UNLISTEN - 256)) | (1L << (UNLOGGED - 256)) | (1L << (UNTIL - 256)) | (1L << (UPDATE - 256)) | (1L << (VACUUM - 256)) | (1L << (VALID - 256)) | (1L << (VALIDATE - 256)) | (1L << (VALIDATOR - 256)) | (1L << (VALUE - 256)) | (1L << (VARYING - 256)) | (1L << (VERSION - 256)) | (1L << (VIEW - 256)) | (1L << (VIEWS - 256)) | (1L << (VOLATILE - 256)) | (1L << (WHITESPACE - 256)) | (1L << (WITHIN - 256)) | (1L << (WITHOUT - 256)) | (1L << (WORK - 256)) | (1L << (WRAPPER - 256)) | (1L << (WRITE - 256)) | (1L << (XML - 256)) | (1L << (YEAR - 256)) | (1L << (YES - 256)) | (1L << (ZONE - 256)) | (1L << (BETWEEN - 256)) | (1L << (BIGINT - 256)) | (1L << (BIT - 256)) | (1L << (BOOLEAN - 256)) | (1L << (CHAR - 256)) | (1L << (CHARACTER - 256)) | (1L << (COALESCE - 256)) | (1L << (DEC - 256)) | (1L << (DECIMAL - 256)) | (1L << (EXISTS - 256)) | (1L << (EXTRACT - 256)) | (1L << (FLOAT - 256)) | (1L << (GREATEST - 256)) | (1L << (GROUPING - 256)) | (1L << (INOUT - 256)) | (1L << (INT - 256)) | (1L << (INTEGER - 256)) | (1L << (INTERVAL - 256)) | (1L << (LEAST - 256)) | (1L << (NATIONAL - 256)) | (1L << (NCHAR - 256)) | (1L << (NONE - 256)) | (1L << (NULLIF - 256)) | (1L << (NUMERIC - 256)) | (1L << (OUT - 256)) | (1L << (OVERLAY - 256)) | (1L << (POSITION - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (PRECISION - 320)) | (1L << (REAL - 320)) | (1L << (ROW - 320)) | (1L << (SETOF - 320)) | (1L << (SMALLINT - 320)) | (1L << (SUBSTRING - 320)) | (1L << (TIME - 320)) | (1L << (TIMESTAMP - 320)) | (1L << (TREAT - 320)) | (1L << (TRIM - 320)) | (1L << (VALUES - 320)) | (1L << (VARCHAR - 320)) | (1L << (XMLATTRIBUTES - 320)) | (1L << (XMLCONCAT - 320)) | (1L << (XMLELEMENT - 320)) | (1L << (XMLEXISTS - 320)) | (1L << (XMLFOREST - 320)) | (1L << (XMLNAMESPACES - 320)) | (1L << (XMLPARSE - 320)) | (1L << (XMLPI - 320)) | (1L << (XMLROOT - 320)) | (1L << (XMLSERIALIZE - 320)) | (1L << (XMLTABLE - 320)) | (1L << (AUTHORIZATION - 320)) | (1L << (BINARY - 320)) | (1L << (COLLATION - 320)) | (1L << (CONCURRENTLY - 320)) | (1L << (CROSS - 320)) | (1L << (CURRENT_SCHEMA - 320)) | (1L << (FREEZE - 320)) | (1L << (FULL - 320)) | (1L << (ILIKE - 320)) | (1L << (INNER - 320)) | (1L << (IS - 320)) | (1L << (ISNULL - 320)) | (1L << (JOIN - 320)) | (1L << (LEFT - 320)) | (1L << (LIKE - 320)) | (1L << (NATURAL - 320)) | (1L << (NOTNULL - 320)) | (1L << (OUTER - 320)) | (1L << (OVERLAPS - 320)) | (1L << (RIGHT - 320)) | (1L << (SIMILAR - 320)) | (1L << (TABLESAMPLE - 320)) | (1L << (VERBOSE - 320)) | (1L << (ALL - 320)) | (1L << (ANY - 320)) | (1L << (ARRAY - 320)) | (1L << (CASE - 320)) | (1L << (CAST - 320)) | (1L << (CURRENT_CATALOG - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (CURRENT_DATE - 384)) | (1L << (CURRENT_TIME - 384)) | (1L << (CURRENT_TIMESTAMP - 384)) | (1L << (CURRENT_USER - 384)) | (1L << (FALSE - 384)) | (1L << (LOCALTIME - 384)) | (1L << (LOCALTIMESTAMP - 384)) | (1L << (NOT - 384)) | (1L << (NULL - 384)) | (1L << (ON - 384)) | (1L << (SESSION_USER - 384)) | (1L << (SOME - 384)) | (1L << (TRUE - 384)) | (1L << (USER - 384)) | (1L << (ALIGNMENT - 384)) | (1L << (BASETYPE - 384)) | (1L << (BUFFERS - 384)) | (1L << (BYPASSRLS - 384)) | (1L << (CANONICAL - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (CATEGORY - 448)) | (1L << (COLLATABLE - 448)) | (1L << (COMBINEFUNC - 448)) | (1L << (COMMUTATOR - 448)) | (1L << (CONNECT - 448)) | (1L << (COSTS - 448)) | (1L << (CREATEDB - 448)) | (1L << (CREATEROLE - 448)) | (1L << (DESERIALFUNC - 448)) | (1L << (DETERMINISTIC - 448)) | (1L << (DISABLE_PAGE_SKIPPING - 448)) | (1L << (ELEMENT - 448)) | (1L << (EXTENDED - 448)) | (1L << (FINALFUNC - 448)) | (1L << (FINALFUNC_EXTRA - 448)) | (1L << (FINALFUNC_MODIFY - 448)) | (1L << (FORCE_NOT_NULL - 448)) | (1L << (FORCE_NULL - 448)) | (1L << (FORCE_QUOTE - 448)) | (1L << (FORMAT - 448)) | (1L << (GETTOKEN - 448)) | (1L << (HASH - 448)) | (1L << (HASHES - 448)) | (1L << (HEADLINE - 448)) | (1L << (HYPOTHETICAL - 448)) | (1L << (INDEX_CLEANUP - 448)) | (1L << (INIT - 448)) | (1L << (INITCOND - 448)) | (1L << (INTERNALLENGTH - 448)) | (1L << (JSON - 448)) | (1L << (LC_COLLATE - 448)) | (1L << (LC_CTYPE - 448)) | (1L << (LEFTARG - 448)) | (1L << (LEXIZE - 448)) | (1L << (LEXTYPES - 448)) | (1L << (LIST - 448)) | (1L << (LOCALE - 448)) | (1L << (LOGIN - 448)) | (1L << (MAIN - 448)) | (1L << (MERGES - 448)) | (1L << (MFINALFUNC - 448)) | (1L << (MFINALFUNC_EXTRA - 448)) | (1L << (MFINALFUNC_MODIFY - 448)) | (1L << (MINITCOND - 448)) | (1L << (MINVFUNC - 448)) | (1L << (MODULUS - 448)) | (1L << (MSFUNC - 448)) | (1L << (MSSPACE - 448)) | (1L << (MSTYPE - 448)) | (1L << (NEGATOR - 448)) | (1L << (NOBYPASSRLS - 448)) | (1L << (NOCREATEDB - 448)) | (1L << (NOCREATEROLE - 448)) | (1L << (NOINHERIT - 448)) | (1L << (NOLOGIN - 448)) | (1L << (NOREPLICATION - 448)) | (1L << (NOSUPERUSER - 448)) | (1L << (OUTPUT - 448)) | (1L << (PASSEDBYVALUE - 448)) | (1L << (PATH - 448)) | (1L << (PERMISSIVE - 448)) | (1L << (PLAIN - 448)) | (1L << (PREFERRED - 448)) | (1L << (PROVIDER - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (READ_ONLY - 512)) | (1L << (READ_WRITE - 512)) | (1L << (RECEIVE - 512)) | (1L << (REMAINDER - 512)) | (1L << (REPLICATION - 512)) | (1L << (RESTRICTED - 512)) | (1L << (RESTRICTIVE - 512)) | (1L << (RIGHTARG - 512)) | (1L << (SAFE - 512)) | (1L << (SEND - 512)) | (1L << (SERIALFUNC - 512)) | (1L << (SETTINGS - 512)) | (1L << (SFUNC - 512)) | (1L << (SHAREABLE - 512)) | (1L << (SKIP_LOCKED - 512)) | (1L << (SORTOP - 512)) | (1L << (SSPACE - 512)) | (1L << (STYPE - 512)) | (1L << (SUBTYPE_DIFF - 512)) | (1L << (SUBTYPE_OPCLASS - 512)) | (1L << (SUBTYPE - 512)) | (1L << (SUMMARY - 512)) | (1L << (SUPERUSER - 512)) | (1L << (TIMING - 512)) | (1L << (TYPMOD_IN - 512)) | (1L << (TYPMOD_OUT - 512)) | (1L << (UNSAFE - 512)) | (1L << (USAGE - 512)) | (1L << (VARIABLE - 512)) | (1L << (YAML - 512)) | (1L << (ALIAS - 512)) | (1L << (ASSERT - 512)) | (1L << (CONSTANT - 512)) | (1L << (DATATYPE - 512)) | (1L << (DEBUG - 512)) | (1L << (DETAIL - 512)) | (1L << (DIAGNOSTICS - 512)) | (1L << (ELSEIF - 512)) | (1L << (ELSIF - 512)) | (1L << (ERRCODE - 512)) | (1L << (EXIT - 512)) | (1L << (EXCEPTION - 512)) | (1L << (FOREACH - 512)) | (1L << (GET - 512)) | (1L << (HINT - 512)) | (1L << (INFO - 512)) | (1L << (LOG - 512)) | (1L << (LOOP - 512)) | (1L << (MESSAGE - 512)) | (1L << (NOTICE - 512)) | (1L << (OPEN - 512)) | (1L << (PERFORM - 512)) | (1L << (QUERY - 512)) | (1L << (RAISE - 512)) | (1L << (RECORD - 512)) | (1L << (RETURN - 512)) | (1L << (REVERSE - 512)) | (1L << (ROWTYPE - 512)) | (1L << (SLICE - 512)) | (1L << (SQLSTATE - 512)) | (1L << (STACKED - 512)) | (1L << (WARNING - 512)) | (1L << (WHILE - 512)))) != 0) || ((((_la - 585)) & ~0x3f) == 0 && ((1L << (_la - 585)) & ((1L << (LEFT_PAREN - 585)) | (1L << (PLUS - 585)) | (1L << (MINUS - 585)) | (1L << (MULTIPLY - 585)) | (1L << (LESS_LESS - 585)) | (1L << (GREATER_GREATER - 585)) | (1L << (HASH_SIGN - 585)) | (1L << (PLACEHOLDER - 585)) | (1L << (OP_CHARS - 585)) | (1L << (NUMBER_LITERAL - 585)) | (1L << (REAL_NUMBER - 585)) | (1L << (DOLLAR_NUMBER - 585)) | (1L << (Identifier - 585)) | (1L << (QuotedIdentifier - 585)) | (1L << (Character_String_Literal - 585)) | (1L << (BeginDollarStringConstant - 585)))) != 0)) {
				{
				setState(7610);
				vex(0);
				}
			}

			setState(7625); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(7613);
				match(WHEN);
				setState(7614);
				vex(0);
				setState(7619);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(7615);
					match(COMMA);
					setState(7616);
					vex(0);
					}
					}
					setState(7621);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(7622);
				match(THEN);
				setState(7623);
				functionStatements();
				}
				}
				setState(7627); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(7631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(7629);
				match(ELSE);
				setState(7630);
				functionStatements();
				}
			}

			setState(7633);
			match(END);
			setState(7634);
			match(CASE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PlpgsqlQueryContext extends ParserRuleContext {
		public DataStatementContext dataStatement() {
			return getRuleContext(DataStatementContext.class,0);
		}
		public ExecuteStmtContext executeStmt() {
			return getRuleContext(ExecuteStmtContext.class,0);
		}
		public ShowStatementContext showStatement() {
			return getRuleContext(ShowStatementContext.class,0);
		}
		public ExplainStatementContext explainStatement() {
			return getRuleContext(ExplainStatementContext.class,0);
		}
		public PlpgsqlQueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_plpgsqlQuery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterPlpgsqlQuery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitPlpgsqlQuery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitPlpgsqlQuery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PlpgsqlQueryContext plpgsqlQuery() throws RecognitionException {
		PlpgsqlQueryContext _localctx = new PlpgsqlQueryContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_plpgsqlQuery);
		try {
			setState(7640);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case UPDATE:
			case VALUES:
			case SELECT:
			case TABLE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(7636);
				dataStatement();
				}
				break;
			case EXECUTE:
				enterOuterAlt(_localctx, 2);
				{
				setState(7637);
				executeStmt();
				}
				break;
			case SHOW:
				enterOuterAlt(_localctx, 3);
				{
				setState(7638);
				showStatement();
				}
				break;
			case EXPLAIN:
				enterOuterAlt(_localctx, 4);
				{
				setState(7639);
				explainStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LineCommentContext extends ParserRuleContext {
		public TerminalNode LINE_COMMENT() { return getToken(SQLParser.LINE_COMMENT, 0); }
		public List<TerminalNode> Value() { return getTokens(SQLParser.Value); }
		public TerminalNode Value(int i) {
			return getToken(SQLParser.Value, i);
		}
		public List<TerminalNode> SEMI_COLON() { return getTokens(SQLParser.SEMI_COLON); }
		public TerminalNode SEMI_COLON(int i) {
			return getToken(SQLParser.SEMI_COLON, i);
		}
		public List<TerminalNode> Name() { return getTokens(SQLParser.Name); }
		public TerminalNode Name(int i) {
			return getToken(SQLParser.Name, i);
		}
		public List<TerminalNode> Type() { return getTokens(SQLParser.Type); }
		public TerminalNode Type(int i) {
			return getToken(SQLParser.Type, i);
		}
		public List<TerminalNode> Schema() { return getTokens(SQLParser.Schema); }
		public TerminalNode Schema(int i) {
			return getToken(SQLParser.Schema, i);
		}
		public List<TerminalNode> Owner() { return getTokens(SQLParser.Owner); }
		public TerminalNode Owner(int i) {
			return getToken(SQLParser.Owner, i);
		}
		public LineCommentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lineComment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).enterLineComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof SQLParserListener ) ((SQLParserListener)listener).exitLineComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof SQLParserVisitor ) return ((SQLParserVisitor<? extends T>)visitor).visitLineComment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LineCommentContext lineComment() throws RecognitionException {
		LineCommentContext _localctx = new LineCommentContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_lineComment);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(7642);
			match(LINE_COMMENT);
			setState(7657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 608)) & ~0x3f) == 0 && ((1L << (_la - 608)) & ((1L << (Name - 608)) | (1L << (Type - 608)) | (1L << (Schema - 608)) | (1L << (Owner - 608)))) != 0)) {
				{
				{
				setState(7645); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(7643);
						_la = _input.LA(1);
						if ( !(((((_la - 608)) & ~0x3f) == 0 && ((1L << (_la - 608)) & ((1L << (Name - 608)) | (1L << (Type - 608)) | (1L << (Schema - 608)) | (1L << (Owner - 608)))) != 0)) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(7644);
						match(Value);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(7647); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,1038,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(7652);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==SEMI_COLON) {
					{
					{
					setState(7649);
					match(SEMI_COLON);
					}
					}
					setState(7654);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				setState(7659);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 279:
			return vex_sempred((VexContext)_localctx, predIndex);
		case 280:
			return vexB_sempred((VexBContext)_localctx, predIndex);
		case 316:
			return selectOps_sempred((SelectOpsContext)_localctx, predIndex);
		case 322:
			return fromItem_sempred((FromItemContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean vex_sempred(VexContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 24);
		case 1:
			return precpred(_ctx, 23);
		case 2:
			return precpred(_ctx, 22);
		case 3:
			return precpred(_ctx, 21);
		case 4:
			return precpred(_ctx, 20);
		case 5:
			return precpred(_ctx, 16);
		case 6:
			return precpred(_ctx, 15);
		case 7:
			return precpred(_ctx, 14);
		case 8:
			return precpred(_ctx, 13);
		case 9:
			return precpred(_ctx, 11);
		case 10:
			return precpred(_ctx, 4);
		case 11:
			return precpred(_ctx, 3);
		case 12:
			return precpred(_ctx, 29);
		case 13:
			return precpred(_ctx, 26);
		case 14:
			return precpred(_ctx, 18);
		case 15:
			return precpred(_ctx, 17);
		case 16:
			return precpred(_ctx, 12);
		case 17:
			return precpred(_ctx, 10);
		case 18:
			return precpred(_ctx, 9);
		case 19:
			return precpred(_ctx, 8);
		case 20:
			return precpred(_ctx, 7);
		case 21:
			return precpred(_ctx, 6);
		}
		return true;
	}
	private boolean vexB_sempred(VexBContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22:
			return precpred(_ctx, 12);
		case 23:
			return precpred(_ctx, 11);
		case 24:
			return precpred(_ctx, 10);
		case 25:
			return precpred(_ctx, 9);
		case 26:
			return precpred(_ctx, 6);
		case 27:
			return precpred(_ctx, 5);
		case 28:
			return precpred(_ctx, 16);
		case 29:
			return precpred(_ctx, 7);
		case 30:
			return precpred(_ctx, 4);
		case 31:
			return precpred(_ctx, 3);
		case 32:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean selectOps_sempred(SelectOpsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33:
			return precpred(_ctx, 2);
		}
		return true;
	}
	private boolean fromItem_sempred(FromItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34:
			return precpred(_ctx, 5);
		case 35:
			return precpred(_ctx, 2);
		case 36:
			return precpred(_ctx, 4);
		case 37:
			return precpred(_ctx, 3);
		}
		return true;
	}

	private static final int _serializedATNSegments = 4;
	private static final String _serializedATNSegment0 =
		"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0277\u1def\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT"+
		"\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4"+
		"`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\t"+
		"k\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4"+
		"w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080"+
		"\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085"+
		"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089"+
		"\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e"+
		"\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092"+
		"\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096\4\u0097"+
		"\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b"+
		"\4\u009c\t\u009c\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0"+
		"\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4"+
		"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8\t\u00a8\4\u00a9"+
		"\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad"+
		"\4\u00ae\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2"+
		"\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6\t\u00b6"+
		"\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb"+
		"\t\u00bb\4\u00bc\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf"+
		"\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4"+
		"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7\4\u00c8\t\u00c8"+
		"\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb\t\u00cb\4\u00cc\t\u00cc\4\u00cd"+
		"\t\u00cd\4\u00ce\t\u00ce\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1"+
		"\4\u00d2\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5\4\u00d6"+
		"\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9\t\u00d9\4\u00da\t\u00da"+
		"\4\u00db\t\u00db\4\u00dc\t\u00dc\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df"+
		"\t\u00df\4\u00e0\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3"+
		"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7\t\u00e7\4\u00e8"+
		"\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea\4\u00eb\t\u00eb\4\u00ec\t\u00ec"+
		"\4\u00ed\t\u00ed\4\u00ee\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1"+
		"\t\u00f1\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5\t\u00f5"+
		"\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8\4\u00f9\t\u00f9\4\u00fa"+
		"\t\u00fa\4\u00fb\t\u00fb\4\u00fc\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe"+
		"\4\u00ff\t\u00ff\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103"+
		"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106\4\u0107\t\u0107"+
		"\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a\t\u010a\4\u010b\t\u010b\4\u010c"+
		"\t\u010c\4\u010d\t\u010d\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110"+
		"\4\u0111\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114\4\u0115"+
		"\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118\t\u0118\4\u0119\t\u0119"+
		"\4\u011a\t\u011a\4\u011b\t\u011b\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e"+
		"\t\u011e\4\u011f\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122"+
		"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126\t\u0126\4\u0127"+
		"\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129\4\u012a\t\u012a\4\u012b\t\u012b"+
		"\4\u012c\t\u012c\4\u012d\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130"+
		"\t\u0130\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134\t\u0134"+
		"\4\u0135\t\u0135\4\u0136\t\u0136\4\u0137\t\u0137\4\u0138\t\u0138\4\u0139"+
		"\t\u0139\4\u013a\t\u013a\4\u013b\t\u013b\4\u013c\t\u013c\4\u013d\t\u013d"+
		"\4\u013e\t\u013e\4\u013f\t\u013f\4\u0140\t\u0140\4\u0141\t\u0141\4\u0142"+
		"\t\u0142\4\u0143\t\u0143\4\u0144\t\u0144\4\u0145\t\u0145\4\u0146\t\u0146"+
		"\4\u0147\t\u0147\4\u0148\t\u0148\4\u0149\t\u0149\4\u014a\t\u014a\4\u014b"+
		"\t\u014b\4\u014c\t\u014c\4\u014d\t\u014d\4\u014e\t\u014e\4\u014f\t\u014f"+
		"\4\u0150\t\u0150\4\u0151\t\u0151\4\u0152\t\u0152\4\u0153\t\u0153\4\u0154"+
		"\t\u0154\4\u0155\t\u0155\4\u0156\t\u0156\4\u0157\t\u0157\4\u0158\t\u0158"+
		"\4\u0159\t\u0159\4\u015a\t\u015a\4\u015b\t\u015b\4\u015c\t\u015c\4\u015d"+
		"\t\u015d\4\u015e\t\u015e\4\u015f\t\u015f\4\u0160\t\u0160\4\u0161\t\u0161"+
		"\4\u0162\t\u0162\4\u0163\t\u0163\4\u0164\t\u0164\4\u0165\t\u0165\4\u0166"+
		"\t\u0166\4\u0167\t\u0167\4\u0168\t\u0168\4\u0169\t\u0169\4\u016a\t\u016a"+
		"\4\u016b\t\u016b\4\u016c\t\u016c\4\u016d\t\u016d\4\u016e\t\u016e\4\u016f"+
		"\t\u016f\4\u0170\t\u0170\4\u0171\t\u0171\4\u0172\t\u0172\4\u0173\t\u0173"+
		"\4\u0174\t\u0174\4\u0175\t\u0175\4\u0176\t\u0176\4\u0177\t\u0177\4\u0178"+
		"\t\u0178\4\u0179\t\u0179\4\u017a\t\u017a\4\u017b\t\u017b\4\u017c\t\u017c"+
		"\4\u017d\t\u017d\4\u017e\t\u017e\3\2\5\2\u02fe\n\2\3\2\7\2\u0301\n\2\f"+
		"\2\16\2\u0304\13\2\3\2\3\2\3\2\6\2\u0309\n\2\r\2\16\2\u030a\3\2\5\2\u030e"+
		"\n\2\7\2\u0310\n\2\f\2\16\2\u0313\13\2\3\2\3\2\3\3\3\3\3\3\3\4\5\4\u031b"+
		"\n\4\3\4\3\4\3\4\3\5\3\5\3\5\7\5\u0323\n\5\f\5\16\5\u0326\13\5\3\5\3\5"+
		"\3\6\5\6\u032b\n\6\3\6\3\6\5\6\u032f\n\6\3\6\3\6\3\7\5\7\u0334\n\7\3\7"+
		"\3\7\3\7\7\7\u0339\n\7\f\7\16\7\u033c\13\7\3\7\3\7\3\b\3\b\3\b\5\b\u0343"+
		"\n\b\3\t\3\t\3\t\3\t\5\t\u0349\n\t\3\n\3\n\5\n\u034d\n\n\3\13\3\13\3\13"+
		"\3\13\5\13\u0353\n\13\5\13\u0355\n\13\3\13\3\13\3\13\7\13\u035a\n\13\f"+
		"\13\16\13\u035d\13\13\5\13\u035f\n\13\3\13\3\13\5\13\u0363\n\13\3\13\3"+
		"\13\5\13\u0367\n\13\3\13\5\13\u036a\n\13\3\13\3\13\3\13\3\13\5\13\u0370"+
		"\n\13\3\13\3\13\3\13\3\13\5\13\u0376\n\13\5\13\u0378\n\13\3\13\3\13\3"+
		"\13\3\13\3\13\3\13\5\13\u0380\n\13\3\13\3\13\5\13\u0384\n\13\3\13\3\13"+
		"\5\13\u0388\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u0393\n\f\3\f"+
		"\3\f\3\f\3\f\3\f\5\f\u039a\n\f\3\f\5\f\u039d\n\f\3\r\3\r\5\r\u03a1\n\r"+
		"\3\r\3\r\3\r\7\r\u03a6\n\r\f\r\16\r\u03a9\13\r\3\r\3\r\3\r\3\r\5\r\u03af"+
		"\n\r\3\r\5\r\u03b2\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5"+
		"\16\u03bd\n\16\3\16\5\16\u03c0\n\16\3\17\3\17\3\17\3\17\5\17\u03c6\n\17"+
		"\3\17\3\17\5\17\u03ca\n\17\3\17\5\17\u03cd\n\17\3\17\3\17\3\17\3\17\5"+
		"\17\u03d3\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u03dd\n\17"+
		"\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u03e5\n\20\3\20\3\20\3\20\3\20\3\20"+
		"\7\20\u03ec\n\20\f\20\16\20\u03ef\13\20\3\20\3\20\3\20\5\20\u03f4\n\20"+
		"\3\20\5\20\u03f7\n\20\3\20\3\20\5\20\u03fb\n\20\3\20\3\20\3\20\3\20\3"+
		"\20\3\20\3\20\5\20\u0404\n\20\5\20\u0406\n\20\3\20\3\20\3\20\3\20\3\20"+
		"\5\20\u040d\n\20\3\20\3\20\5\20\u0411\n\20\3\20\3\20\3\20\3\20\5\20\u0417"+
		"\n\20\3\20\3\20\5\20\u041b\n\20\3\20\3\20\3\20\3\20\3\20\5\20\u0422\n"+
		"\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u042a\n\20\3\20\3\20\3\20\3\20"+
		"\5\20\u0430\n\20\3\20\3\20\3\20\5\20\u0435\n\20\3\20\5\20\u0438\n\20\3"+
		"\20\3\20\3\20\3\20\3\20\3\20\7\20\u0440\n\20\f\20\16\20\u0443\13\20\3"+
		"\20\3\20\5\20\u0447\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\7\20\u0452\n\20\f\20\16\20\u0455\13\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\5\20\u045d\n\20\3\21\3\21\5\21\u0461\n\21\3\21\5\21\u0464\n\21\3\21\3"+
		"\21\3\21\3\21\7\21\u046a\n\21\f\21\16\21\u046d\13\21\3\21\3\21\5\21\u0471"+
		"\n\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u047b\n\22\5\22\u047d"+
		"\n\22\3\23\3\23\3\23\3\23\3\23\3\23\7\23\u0485\n\23\f\23\16\23\u0488\13"+
		"\23\3\23\3\23\5\23\u048c\n\23\3\24\3\24\3\24\5\24\u0491\n\24\3\24\5\24"+
		"\u0494\n\24\3\24\5\24\u0497\n\24\3\24\5\24\u049a\n\24\3\24\3\24\3\24\5"+
		"\24\u049f\n\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\5\25\u04a8\n\25\3\25"+
		"\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u04b3\n\25\3\26\3\26\5\26"+
		"\u04b7\n\26\3\26\3\26\5\26\u04bb\n\26\3\27\3\27\3\27\5\27\u04c0\n\27\3"+
		"\30\3\30\3\30\7\30\u04c5\n\30\f\30\16\30\u04c8\13\30\3\31\3\31\3\31\3"+
		"\31\3\31\7\31\u04cf\n\31\f\31\16\31\u04d2\13\31\3\31\3\31\5\31\u04d6\n"+
		"\31\3\32\3\32\3\32\3\32\7\32\u04dc\n\32\f\32\16\32\u04df\13\32\3\32\3"+
		"\32\3\32\5\32\u04e4\n\32\3\32\5\32\u04e7\n\32\3\32\5\32\u04ea\n\32\3\32"+
		"\5\32\u04ed\n\32\5\32\u04ef\n\32\3\33\3\33\5\33\u04f3\n\33\3\34\3\34\5"+
		"\34\u04f7\n\34\3\35\3\35\3\36\3\36\3\36\3\36\3\36\5\36\u0500\n\36\3\36"+
		"\3\36\3\36\3\36\5\36\u0506\n\36\3\36\3\36\5\36\u050a\n\36\5\36\u050c\n"+
		"\36\3\37\3\37\3\37\5\37\u0511\n\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3"+
		" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3"+
		" \3 \3 \3 \3 \5 \u053a\n \3 \3 \3 \3 \3 \5 \u0541\n \3!\3!\3!\3!\3!\3"+
		"!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3!\3"+
		"!\3!\3!\3!\3!\5!\u0564\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\""+
		"\3\"\5\"\u0572\n\"\3#\3#\3#\3#\3#\3#\3#\5#\u057b\n#\3#\3#\3#\3#\5#\u0581"+
		"\n#\3#\3#\3#\3#\3#\3#\5#\u0589\n#\3$\3$\5$\u058d\n$\3$\3$\3$\3$\3$\5$"+
		"\u0594\n$\3$\3$\5$\u0598\n$\6$\u059a\n$\r$\16$\u059b\3$\5$\u059f\n$\3"+
		"$\3$\3$\3$\3$\3$\5$\u05a7\n$\3%\3%\3%\3%\5%\u05ad\n%\3&\3&\3&\3&\3\'\3"+
		"\'\3\'\3\'\3\'\5\'\u05b8\n\'\5\'\u05ba\n\'\3\'\3\'\5\'\u05be\n\'\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\5(\u05df\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3"+
		"(\3(\3(\3(\3(\5(\u05f2\n(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3"+
		"(\5(\u061a\n(\3)\3)\3)\3)\3*\5*\u0621\n*\3*\3*\3*\3*\5*\u0627\n*\3+\5"+
		"+\u062a\n+\3+\3+\5+\u062e\n+\3+\5+\u0631\n+\3+\3+\5+\u0635\n+\3+\3+\3"+
		"+\7+\u063a\n+\f+\16+\u063d\13+\3+\3+\5+\u0641\n+\3+\3+\3+\3+\3+\3+\3+"+
		"\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u0657\n+\3,\3,\5,\u065b\n,"+
		"\3,\5,\u065e\n,\3,\3,\3,\5,\u0663\n,\3,\5,\u0666\n,\3,\3,\5,\u066a\n,"+
		"\3,\3,\5,\u066e\n,\3,\3,\3,\3,\3,\3,\3,\5,\u0677\n,\3,\3,\3,\3,\3,\3,"+
		"\3,\5,\u0680\n,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0692"+
		"\n,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,"+
		"\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u06bc\n,\3,"+
		"\3,\3,\3,\5,\u06c2\n,\3,\5,\u06c5\n,\5,\u06c7\n,\3-\3-\5-\u06cb\n-\3-"+
		"\3-\3-\5-\u06d0\n-\3-\3-\5-\u06d4\n-\3-\3-\3-\3-\3-\3-\5-\u06dc\n-\3-"+
		"\3-\3-\3-\3-\5-\u06e3\n-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\6-\u06f1"+
		"\n-\r-\16-\u06f2\5-\u06f5\n-\3.\3.\3.\3.\5.\u06fb\n.\3.\3.\3.\3.\6.\u0701"+
		"\n.\r.\16.\u0702\3.\3.\5.\u0707\n.\3/\3/\3/\3/\3/\5/\u070e\n/\3/\3/\3"+
		"/\3/\5/\u0714\n/\3/\5/\u0717\n/\5/\u0719\n/\3\60\3\60\3\61\3\61\3\61\3"+
		"\61\3\62\3\62\3\62\5\62\u0724\n\62\3\62\3\62\5\62\u0728\n\62\3\63\5\63"+
		"\u072b\n\63\3\63\3\63\3\64\3\64\3\64\3\65\3\65\3\65\5\65\u0735\n\65\3"+
		"\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u073e\n\65\f\65\16\65\u0741\13"+
		"\65\3\65\3\65\3\65\3\65\3\65\5\65\u0748\n\65\3\65\3\65\5\65\u074c\n\65"+
		"\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65"+
		"\5\65\u075c\n\65\3\65\3\65\3\65\3\65\3\65\5\65\u0763\n\65\3\65\3\65\3"+
		"\65\3\65\3\65\5\65\u076a\n\65\3\66\3\66\3\66\5\66\u076f\n\66\3\67\3\67"+
		"\5\67\u0773\n\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67"+
		"\5\67\u0780\n\67\3\67\3\67\3\67\3\67\5\67\u0786\n\67\5\67\u0788\n\67\3"+
		"8\38\38\38\38\38\38\38\38\38\58\u0794\n8\38\58\u0797\n8\38\38\38\38\3"+
		"8\38\38\38\38\38\38\38\38\38\38\38\38\78\u07aa\n8\f8\168\u07ad\138\38"+
		"\38\58\u07b1\n8\39\39\39\39\39\59\u07b8\n9\39\39\39\59\u07bd\n9\39\39"+
		"\3:\3:\3:\5:\u07c4\n:\5:\u07c6\n:\3:\3:\3:\7:\u07cb\n:\f:\16:\u07ce\13"+
		":\3:\3:\3:\3:\3:\3:\7:\u07d6\n:\f:\16:\u07d9\13:\3:\3:\5:\u07dd\n:\5:"+
		"\u07df\n:\3:\3:\3:\3:\3:\5:\u07e6\n:\5:\u07e8\n:\3:\3:\3:\3:\3:\3:\5:"+
		"\u07f0\n:\5:\u07f2\n:\3:\3:\3:\3:\3:\5:\u07f9\n:\5:\u07fb\n:\3:\3:\5:"+
		"\u07ff\n:\3:\3:\5:\u0803\n:\3;\3;\3;\3;\3<\3<\5<\u080b\n<\3<\3<\3<\3<"+
		"\5<\u0811\n<\3<\5<\u0814\n<\7<\u0816\n<\f<\16<\u0819\13<\3<\3<\5<\u081d"+
		"\n<\3=\5=\u0820\n=\3=\3=\5=\u0824\n=\3=\3=\3=\5=\u0829\n=\3=\3=\3=\5="+
		"\u082e\n=\3=\3=\3=\3=\3=\3=\5=\u0836\n=\3>\3>\3>\3>\3>\3?\3?\3?\5?\u0840"+
		"\n?\3?\3?\5?\u0844\n?\3@\3@\3@\3@\3@\3@\3@\5@\u084d\n@\3@\3@\3@\5@\u0852"+
		"\n@\3@\3@\3@\3@\3@\3@\5@\u085a\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\7@\u0865"+
		"\n@\f@\16@\u0868\13@\5@\u086a\n@\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0877"+
		"\nA\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u0883\nA\3B\3B\3B\3B\3C\3C\5C\u088b"+
		"\nC\3C\3C\3C\3C\3C\5C\u0892\nC\3D\3D\3D\3D\3D\3D\5D\u089a\nD\3D\3D\3D"+
		"\3D\3D\3D\3D\3D\5D\u08a4\nD\3E\3E\3E\3E\3E\3E\3E\3E\7E\u08ae\nE\fE\16"+
		"E\u08b1\13E\3E\3E\3E\3E\5E\u08b7\nE\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u08c2"+
		"\nE\3E\3E\5E\u08c6\nE\3F\3F\3F\3F\3F\5F\u08cd\nF\3F\5F\u08d0\nF\3F\3F"+
		"\3F\5F\u08d5\nF\3F\3F\5F\u08d9\nF\3F\3F\3F\3F\3F\5F\u08e0\nF\3F\3F\3F"+
		"\5F\u08e5\nF\3F\5F\u08e8\nF\5F\u08ea\nF\3G\3G\3G\3G\3H\3H\3H\3I\5I\u08f4"+
		"\nI\3I\3I\5I\u08f8\nI\3I\5I\u08fb\nI\3I\5I\u08fe\nI\3I\3I\5I\u0902\nI"+
		"\3I\3I\3I\3J\3J\5J\u0909\nJ\3J\3J\5J\u090d\nJ\3J\5J\u0910\nJ\3J\5J\u0913"+
		"\nJ\3J\5J\u0916\nJ\3K\3K\3K\3K\3L\3L\3L\3L\3L\7L\u0921\nL\fL\16L\u0924"+
		"\13L\3L\3L\3M\3M\3M\3N\3N\5N\u092d\nN\3N\3N\5N\u0931\nN\3N\3N\5N\u0935"+
		"\nN\3N\3N\3N\5N\u093a\nN\5N\u093c\nN\3N\3N\3N\5N\u0941\nN\5N\u0943\nN"+
		"\3N\5N\u0946\nN\3O\3O\5O\u094a\nO\3O\5O\u094d\nO\3O\5O\u0950\nO\3O\3O"+
		"\3O\3O\3O\3O\5O\u0958\nO\3O\3O\5O\u095c\nO\5O\u095e\nO\3P\3P\3P\3P\3P"+
		"\3P\3P\3P\3P\3P\3P\3P\7P\u096c\nP\fP\16P\u096f\13P\3P\3P\5P\u0973\nP\6"+
		"P\u0975\nP\rP\16P\u0976\5P\u0979\nP\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\7"+
		"Q\u0986\nQ\fQ\16Q\u0989\13Q\5Q\u098b\nQ\3Q\3Q\3Q\3Q\3Q\3Q\7Q\u0993\nQ"+
		"\fQ\16Q\u0996\13Q\5Q\u0998\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3"+
		"Q\3Q\3Q\3Q\3Q\5Q\u09ac\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3"+
		"Q\3Q\5Q\u09be\nQ\7Q\u09c0\nQ\fQ\16Q\u09c3\13Q\3Q\5Q\u09c6\nQ\3Q\3Q\3Q"+
		"\3Q\3Q\5Q\u09cd\nQ\3Q\5Q\u09d0\nQ\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q"+
		"\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u09ed\nQ\3Q\3Q\3Q\3Q"+
		"\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q"+
		"\3Q\5Q\u0a0b\nQ\7Q\u0a0d\nQ\fQ\16Q\u0a10\13Q\3Q\3Q\5Q\u0a14\nQ\3R\3R\3"+
		"R\5R\u0a19\nR\3R\3R\3R\3R\3R\7R\u0a20\nR\fR\16R\u0a23\13R\3S\3S\5S\u0a27"+
		"\nS\3S\3S\3S\5S\u0a2c\nS\3S\3S\5S\u0a30\nS\3S\3S\3S\3S\3S\5S\u0a37\nS"+
		"\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\7T\u0a43\nT\fT\16T\u0a46\13T\3T\3T\3U\3"+
		"U\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\3V\5V\u0a59\nV\3V\3V\3W\3W\3W\3"+
		"W\3W\3W\3W\3W\3W\3W\5W\u0a67\nW\3W\3W\3W\3W\3W\3W\3W\5W\u0a70\nW\3W\3"+
		"W\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\5"+
		"X\u0a8a\nX\3X\3X\3X\3X\3X\3X\3X\5X\u0a93\nX\3X\3X\3Y\3Y\5Y\u0a99\nY\3"+
		"Y\3Y\3Y\3Y\3Y\3Y\3Y\7Y\u0aa2\nY\fY\16Y\u0aa5\13Y\5Y\u0aa7\nY\3Y\5Y\u0aaa"+
		"\nY\3Z\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0ab3\nZ\3[\3[\3[\3[\5[\u0ab9\n[\3[\3[\3["+
		"\5[\u0abe\n[\3\\\3\\\3\\\5\\\u0ac3\n\\\3\\\3\\\3\\\5\\\u0ac8\n\\\3\\\3"+
		"\\\3\\\5\\\u0acd\n\\\3]\3]\3]\3]\3]\5]\u0ad4\n]\3]\3]\3]\5]\u0ad9\n]\3"+
		"^\3^\3^\3^\3^\3^\3^\5^\u0ae2\n^\3^\6^\u0ae5\n^\r^\16^\u0ae6\5^\u0ae9\n"+
		"^\3_\3_\5_\u0aed\n_\3_\3_\3_\5_\u0af2\n_\3_\3_\3`\3`\3`\3`\5`\u0afa\n"+
		"`\3`\3`\3`\3`\3`\3`\3`\3`\5`\u0b04\n`\3`\3`\3`\3`\3`\3`\3`\3`\5`\u0b0e"+
		"\n`\3`\3`\3`\5`\u0b13\n`\3a\3a\3a\3b\3b\3b\3b\3b\3b\3b\3b\5b\u0b20\nb"+
		"\3c\3c\3c\3c\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d"+
		"\3d\5d\u0b3a\nd\3d\5d\u0b3d\nd\3d\5d\u0b40\nd\3d\5d\u0b43\nd\3d\3d\3e"+
		"\3e\3e\3e\3e\3e\3e\7e\u0b4e\ne\fe\16e\u0b51\13e\3e\3e\3e\3e\3e\3e\3e\5"+
		"e\u0b5a\ne\3f\3f\3f\3f\3f\5f\u0b61\nf\3g\3g\3g\3g\3g\3g\3h\3h\3h\3h\5"+
		"h\u0b6d\nh\3h\3h\3h\3h\5h\u0b73\nh\3h\5h\u0b76\nh\3h\3h\5h\u0b7a\nh\3"+
		"i\3i\3i\3i\3j\3j\3j\3j\3j\3j\7j\u0b86\nj\fj\16j\u0b89\13j\3j\3j\5j\u0b8d"+
		"\nj\3k\3k\3k\3k\3l\3l\3l\5l\u0b96\nl\3l\3l\3l\5l\u0b9b\nl\3l\3l\3l\3m"+
		"\3m\3m\3m\3m\7m\u0ba5\nm\fm\16m\u0ba8\13m\3m\5m\u0bab\nm\3n\3n\5n\u0baf"+
		"\nn\3n\3n\3n\7n\u0bb4\nn\fn\16n\u0bb7\13n\3n\5n\u0bba\nn\3o\3o\3o\3o\5"+
		"o\u0bc0\no\3o\3o\3o\5o\u0bc5\no\3o\3o\3p\3p\5p\u0bcb\np\3p\3p\3p\3p\3"+
		"p\3p\5p\u0bd3\np\3p\5p\u0bd6\np\3q\3q\5q\u0bda\nq\3q\3q\3q\3q\3q\3q\3"+
		"q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3r\3r\3r\3r\3r\3r\3r\3r\3s\3s\3"+
		"s\5s\u0bfa\ns\3s\3s\7s\u0bfe\ns\fs\16s\u0c01\13s\5s\u0c03\ns\3t\3t\3t"+
		"\5t\u0c08\nt\3u\3u\5u\u0c0c\nu\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\5v\u0c19"+
		"\nv\3v\3v\3v\5v\u0c1e\nv\3v\3v\3v\5v\u0c23\nv\3w\3w\3w\3w\3w\3w\3w\5w"+
		"\u0c2c\nw\3x\3x\3x\3x\3x\3x\3x\3x\3x\5x\u0c37\nx\3x\5x\u0c3a\nx\3y\3y"+
		"\3y\5y\u0c3f\ny\3y\6y\u0c42\ny\ry\16y\u0c43\5y\u0c46\ny\3z\3z\5z\u0c4a"+
		"\nz\3{\3{\3{\3{\5{\u0c50\n{\3{\3{\3{\3{\3{\3{\3{\7{\u0c59\n{\f{\16{\u0c5c"+
		"\13{\3{\3{\5{\u0c60\n{\3|\3|\5|\u0c64\n|\3|\3|\3|\3|\3|\5|\u0c6b\n|\3"+
		"|\3|\3|\3|\3|\3|\3|\3}\3}\3}\3}\3}\3}\3}\3}\5}\u0c7c\n}\3}\3}\3}\3}\5"+
		"}\u0c82\n}\3}\3}\3}\3}\3}\7}\u0c89\n}\f}\16}\u0c8c\13}\3}\3}\5}\u0c90"+
		"\n}\3~\3~\3~\3\177\3\177\3\177\3\177\3\177\3\177\7\177\u0c9b\n\177\f\177"+
		"\16\177\u0c9e\13\177\3\177\3\177\3\u0080\3\u0080\3\u0080\5\u0080\u0ca5"+
		"\n\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081\3\u0081"+
		"\3\u0081\3\u0081\5\u0081\u0cba\n\u0081\3\u0082\3\u0082\5\u0082\u0cbe\n"+
		"\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0cc3\n\u0082\3\u0082\3\u0082\3"+
		"\u0082\3\u0082\3\u0082\3\u0082\5\u0082\u0ccb\n\u0082\3\u0082\3\u0082\3"+
		"\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\3\u0082\7\u0082\u0cd6\n"+
		"\u0082\f\u0082\16\u0082\u0cd9\13\u0082\3\u0082\3\u0082\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083"+
		"\3\u0083\3\u0083\3\u0083\3\u0083\5\u0083\u0d10\n\u0083\3\u0084\3\u0084"+
		"\3\u0084\3\u0085\3\u0085\3\u0085\5\u0085\u0d18\n\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\3\u0085\7\u0085\u0d1f\n\u0085\f\u0085\16\u0085\u0d22"+
		"\13\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085\3\u0085"+
		"\3\u0085\3\u0085\7\u0085\u0d2e\n\u0085\f\u0085\16\u0085\u0d31\13\u0085"+
		"\3\u0085\5\u0085\u0d34\n\u0085\3\u0085\3\u0085\3\u0085\3\u0085\5\u0085"+
		"\u0d3a\n\u0085\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0d41\n"+
		"\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0d49\n"+
		"\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0d4e\n\u0086\3\u0086\3\u0086\3"+
		"\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086\u0d57\n\u0086\5\u0086\u0d59"+
		"\n\u0086\3\u0087\3\u0087\3\u0087\7\u0087\u0d5e\n\u0087\f\u0087\16\u0087"+
		"\u0d61\13\u0087\3\u0087\5\u0087\u0d64\n\u0087\3\u0088\3\u0088\5\u0088"+
		"\u0d68\n\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088"+
		"\3\u0088\3\u0088\5\u0088\u0d73\n\u0088\3\u0088\3\u0088\5\u0088\u0d77\n"+
		"\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\7\u0088\u0d7f\n"+
		"\u0088\f\u0088\16\u0088\u0d82\13\u0088\3\u0088\3\u0088\5\u0088\u0d86\n"+
		"\u0088\3\u0088\3\u0088\5\u0088\u0d8a\n\u0088\3\u0089\3\u0089\3\u0089\3"+
		"\u0089\3\u0089\5\u0089\u0d91\n\u0089\3\u008a\5\u008a\u0d94\n\u008a\3\u008a"+
		"\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0d9c\n\u008a\3\u008a"+
		"\3\u008a\3\u008a\5\u008a\u0da1\n\u008a\3\u008a\3\u008a\3\u008a\5\u008a"+
		"\u0da6\n\u008a\5\u008a\u0da8\n\u008a\3\u008a\5\u008a\u0dab\n\u008a\6\u008a"+
		"\u0dad\n\u008a\r\u008a\16\u008a\u0dae\3\u008a\3\u008a\3\u008a\3\u008a"+
		"\5\u008a\u0db5\n\u008a\3\u008a\5\u008a\u0db8\n\u008a\3\u008a\5\u008a\u0dbb"+
		"\n\u008a\3\u008a\3\u008a\3\u008a\5\u008a\u0dc0\n\u008a\5\u008a\u0dc2\n"+
		"\u008a\3\u008a\3\u008a\5\u008a\u0dc6\n\u008a\3\u008a\5\u008a\u0dc9\n\u008a"+
		"\3\u008a\5\u008a\u0dcc\n\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b"+
		"\3\u008b\3\u008b\5\u008b\u0dd5\n\u008b\3\u008b\3\u008b\3\u008c\3\u008c"+
		"\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d\3\u008d\5\u008d\u0de1\n\u008d"+
		"\5\u008d\u0de3\n\u008d\3\u008d\3\u008d\5\u008d\u0de7\n\u008d\3\u008d\3"+
		"\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d\u0df1\n"+
		"\u008d\3\u008d\5\u008d\u0df4\n\u008d\3\u008e\5\u008e\u0df7\n\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\7\u008e"+
		"\u0e0b\n\u008e\f\u008e\16\u008e\u0e0e\13\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\7\u008e\u0e15\n\u008e\f\u008e\16\u008e\u0e18\13\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e"+
		"\3\u008e\3\u008e\3\u008e\3\u008e\5\u008e\u0e27\n\u008e\3\u008f\3\u008f"+
		"\3\u008f\7\u008f\u0e2c\n\u008f\f\u008f\16\u008f\u0e2f\13\u008f\3\u0090"+
		"\3\u0090\3\u0090\3\u0090\3\u0090\3\u0091\3\u0091\3\u0091\7\u0091\u0e39"+
		"\n\u0091\f\u0091\16\u0091\u0e3c\13\u0091\3\u0092\3\u0092\5\u0092\u0e40"+
		"\n\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092\3\u0092"+
		"\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0e4e\n\u0092\3\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\3\u0093\3\u0093\5\u0093\u0e57\n\u0093\3\u0093"+
		"\3\u0093\3\u0093\3\u0093\5\u0093\u0e5d\n\u0093\3\u0093\3\u0093\3\u0093"+
		"\3\u0093\5\u0093\u0e63\n\u0093\5\u0093\u0e65\n\u0093\3\u0094\3\u0094\3"+
		"\u0094\3\u0094\3\u0094\5\u0094\u0e6c\n\u0094\3\u0095\3\u0095\3\u0095\5"+
		"\u0095\u0e71\n\u0095\3\u0096\3\u0096\3\u0096\7\u0096\u0e76\n\u0096\f\u0096"+
		"\16\u0096\u0e79\13\u0096\3\u0097\5\u0097\u0e7c\n\u0097\3\u0097\3\u0097"+
		"\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\3\u0098\5\u0098\u0e86\n\u0098"+
		"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0e8d\n\u0099\5\u0099"+
		"\u0e8f\n\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u0e96\n"+
		"\u0099\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a\u0eae\n\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\5\u009a"+
		"\u0ec2\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\5\u009a\u0ecc\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\5\u009a\u0ede\n\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a"+
		"\3\u009a\3\u009a\3\u009a\5\u009a\u0f14\n\u009a\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\5\u009b\u0f24\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\5\u009b\u0f2c\n\u009b\3\u009b\3\u009b\3\u009b\5\u009b"+
		"\u0f31\n\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b\3\u009b"+
		"\5\u009b\u0f43\n\u009b\3\u009c\3\u009c\5\u009c\u0f47\n\u009c\3\u009c\3"+
		"\u009c\3\u009c\3\u009c\3\u009c\5\u009c\u0f4e\n\u009c\5\u009c\u0f50\n\u009c"+
		"\3\u009c\3\u009c\3\u009d\6\u009d\u0f55\n\u009d\r\u009d\16\u009d\u0f56"+
		"\3\u009d\5\u009d\u0f5a\n\u009d\3\u009e\3\u009e\3\u009e\3\u009e\3\u009f"+
		"\3\u009f\3\u009f\3\u009f\3\u009f\7\u009f\u0f65\n\u009f\f\u009f\16\u009f"+
		"\u0f68\13\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0\3\u00a1\3\u00a1"+
		"\3\u00a1\3\u00a2\3\u00a2\3\u00a2\3\u00a2\7\u00a2\u0f76\n\u00a2\f\u00a2"+
		"\16\u00a2\u0f79\13\u00a2\5\u00a2\u0f7b\n\u00a2\3\u00a2\5\u00a2\u0f7e\n"+
		"\u00a2\3\u00a2\5\u00a2\u0f81\n\u00a2\3\u00a2\3\u00a2\3\u00a3\3\u00a3\3"+
		"\u00a3\3\u00a3\3\u00a3\7\u00a3\u0f8a\n\u00a3\f\u00a3\16\u00a3\u0f8d\13"+
		"\u00a3\3\u00a4\3\u00a4\7\u00a4\u0f91\n\u00a4\f\u00a4\16\u00a4\u0f94\13"+
		"\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f98\n\u00a4\3\u00a5\5\u00a5\u0f9b\n\u00a5"+
		"\3\u00a5\5\u00a5\u0f9e\n\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0fa3\n"+
		"\u00a5\3\u00a6\3\u00a6\3\u00a7\5\u00a7\u0fa8\n\u00a7\3\u00a7\3\u00a7\5"+
		"\u00a7\u0fac\n\u00a7\3\u00a7\3\u00a7\7\u00a7\u0fb0\n\u00a7\f\u00a7\16"+
		"\u00a7\u0fb3\13\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\3\u00a8\5\u00a8\u0fbc\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8"+
		"\5\u00a8\u0fc3\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0fc9\n"+
		"\u00a8\3\u00a8\3\u00a8\5\u00a8\u0fcd\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3"+
		"\u00a8\5\u00a8\u0fd3\n\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a8\5\u00a8\u0fd9"+
		"\n\u00a8\3\u00a9\5\u00a9\u0fdc\n\u00a9\3\u00a9\3\u00a9\3\u00aa\5\u00aa"+
		"\u0fe1\n\u00aa\3\u00aa\3\u00aa\3\u00ab\3\u00ab\3\u00ac\3\u00ac\5\u00ac"+
		"\u0fe9\n\u00ac\3\u00ac\5\u00ac\u0fec\n\u00ac\3\u00ac\3\u00ac\5\u00ac\u0ff0"+
		"\n\u00ac\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\3\u00ad\5\u00ad\u0ff8"+
		"\n\u00ad\3\u00ad\3\u00ad\5\u00ad\u0ffc\n\u00ad\3\u00ad\3\u00ad\3\u00ad"+
		"\3\u00ad\7\u00ad\u1002\n\u00ad\f\u00ad\16\u00ad\u1005\13\u00ad\5\u00ad"+
		"\u1007\n\u00ad\3\u00ad\3\u00ad\5\u00ad\u100b\n\u00ad\3\u00ad\3\u00ad\3"+
		"\u00ad\5\u00ad\u1010\n\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3"+
		"\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae"+
		"\7\u00ae\u1020\n\u00ae\f\u00ae\16\u00ae\u1023\13\u00ae\5\u00ae\u1025\n"+
		"\u00ae\3\u00ae\3\u00ae\5\u00ae\u1029\n\u00ae\3\u00ae\3\u00ae\3\u00ae\5"+
		"\u00ae\u102e\n\u00ae\5\u00ae\u1030\n\u00ae\3\u00af\3\u00af\5\u00af\u1034"+
		"\n\u00af\3\u00af\3\u00af\3\u00af\3\u00af\5\u00af\u103a\n\u00af\3\u00b0"+
		"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b0\5\u00b0\u1043\n\u00b0"+
		"\3\u00b1\3\u00b1\3\u00b1\3\u00b1\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2"+
		"\3\u00b2\5\u00b2\u104f\n\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u1054\n"+
		"\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u105c\n"+
		"\u00b2\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3"+
		"\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u106d"+
		"\n\u00b3\3\u00b3\3\u00b3\3\u00b3\3\u00b3\5\u00b3\u1073\n\u00b3\3\u00b4"+
		"\3\u00b4\5\u00b4\u1077\n\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4"+
		"\3\u00b4\5\u00b4\u107f\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b5\3\u00b5"+
		"\3\u00b5\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b6\3\u00b7"+
		"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7\u1095\n\u00b7"+
		"\f\u00b7\16\u00b7\u1098\13\u00b7\3\u00b7\3\u00b7\3\u00b7\3\u00b7\7\u00b7"+
		"\u109e\n\u00b7\f\u00b7\16\u00b7\u10a1\13\u00b7\5\u00b7\u10a3\n\u00b7\3"+
		"\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8"+
		"\5\u00b8\u10ae\n\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8"+
		"\u10b5\n\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u10ba\n\u00b8\5\u00b8\u10bc"+
		"\n\u00b8\3\u00b8\5\u00b8\u10bf\n\u00b8\3\u00b8\3\u00b8\5\u00b8\u10c3\n"+
		"\u00b8\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\5\u00b9\u10ca\n\u00b9\3"+
		"\u00b9\3\u00b9\3\u00b9\5\u00b9\u10cf\n\u00b9\5\u00b9\u10d1\n\u00b9\3\u00b9"+
		"\3\u00b9\3\u00ba\3\u00ba\3\u00ba\5\u00ba\u10d8\n\u00ba\3\u00ba\3\u00ba"+
		"\3\u00ba\3\u00ba\5\u00ba\u10de\n\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\5\u00bb\u10e4\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb"+
		"\3\u00bb\5\u00bb\u10ed\n\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb"+
		"\u10f3\n\u00bb\f\u00bb\16\u00bb\u10f6\13\u00bb\3\u00bc\3\u00bc\3\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u10fe\n\u00bc\3\u00bc\3\u00bc\3\u00bc"+
		"\5\u00bc\u1103\n\u00bc\3\u00bc\5\u00bc\u1106\n\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u110e\n\u00bc\3\u00bc\3\u00bc\3"+
		"\u00bc\3\u00bc\3\u00bc\5\u00bc\u1115\n\u00bc\3\u00bc\3\u00bc\3\u00bc\5"+
		"\u00bc\u111a\n\u00bc\5\u00bc\u111c\n\u00bc\3\u00bc\5\u00bc\u111f\n\u00bc"+
		"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u1125\n\u00bc\3\u00bd\3\u00bd"+
		"\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\3\u00bd\5\u00bd\u112f\n\u00bd"+
		"\3\u00be\3\u00be\3\u00be\5\u00be\u1134\n\u00be\3\u00be\3\u00be\3\u00be"+
		"\3\u00be\5\u00be\u113a\n\u00be\3\u00bf\5\u00bf\u113d\n\u00bf\3\u00bf\3"+
		"\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00c0"+
		"\3\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0\u114d\n\u00c0\3\u00c1\3\u00c1"+
		"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u1156\n\u00c1\f\u00c1"+
		"\16\u00c1\u1159\13\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u115e\n\u00c1"+
		"\3\u00c1\5\u00c1\u1161\n\u00c1\3\u00c2\3\u00c2\3\u00c2\3\u00c2\3\u00c3"+
		"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\3\u00c3\7\u00c3"+
		"\u1170\n\u00c3\f\u00c3\16\u00c3\u1173\13\u00c3\5\u00c3\u1175\n\u00c3\3"+
		"\u00c4\5\u00c4\u1178\n\u00c4\3\u00c4\3\u00c4\5\u00c4\u117c\n\u00c4\3\u00c5"+
		"\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\5\u00c5"+
		"\u1187\n\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c7"+
		"\3\u00c7\5\u00c7\u1191\n\u00c7\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8"+
		"\u1197\n\u00c8\3\u00c8\3\u00c8\5\u00c8\u119b\n\u00c8\3\u00c8\5\u00c8\u119e"+
		"\n\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\3\u00c8\5\u00c8\u11a5\n\u00c8"+
		"\5\u00c8\u11a7\n\u00c8\3\u00c8\3\u00c8\5\u00c8\u11ab\n\u00c8\3\u00c9\3"+
		"\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9\u11b3\n\u00c9\3\u00c9\3"+
		"\u00c9\5\u00c9\u11b7\n\u00c9\3\u00c9\3\u00c9\5\u00c9\u11bb\n\u00c9\3\u00c9"+
		"\5\u00c9\u11be\n\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\3\u00c9\5\u00c9"+
		"\u11c5\n\u00c9\5\u00c9\u11c7\n\u00c9\3\u00ca\3\u00ca\5\u00ca\u11cb\n\u00ca"+
		"\3\u00ca\7\u00ca\u11ce\n\u00ca\f\u00ca\16\u00ca\u11d1\13\u00ca\3\u00cb"+
		"\5\u00cb\u11d4\n\u00cb\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u11d9\n\u00cb\3"+
		"\u00cb\3\u00cb\5\u00cb\u11dd\n\u00cb\3\u00cb\3\u00cb\5\u00cb\u11e1\n\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u11e6\n\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\5\u00cb\u11eb\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\5\u00cb\u11f5\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\5\u00cb\u11fd\n\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb"+
		"\3\u00cb\3\u00cb\3\u00cb\5\u00cb\u120f\n\u00cb\3\u00cc\3\u00cc\5\u00cc"+
		"\u1213\n\u00cc\3\u00cc\5\u00cc\u1216\n\u00cc\3\u00cc\5\u00cc\u1219\n\u00cc"+
		"\3\u00cc\5\u00cc\u121c\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u1220\n\u00cc\3"+
		"\u00cc\3\u00cc\5\u00cc\u1224\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u1228\n\u00cc"+
		"\3\u00cc\3\u00cc\5\u00cc\u122c\n\u00cc\3\u00cc\5\u00cc\u122f\n\u00cc\3"+
		"\u00cc\3\u00cc\3\u00cc\5\u00cc\u1234\n\u00cc\3\u00cc\3\u00cc\5\u00cc\u1238"+
		"\n\u00cc\3\u00cc\5\u00cc\u123b\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00ce"+
		"\3\u00ce\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\7\u00cf\u1248"+
		"\n\u00cf\f\u00cf\16\u00cf\u124b\13\u00cf\3\u00cf\3\u00cf\3\u00d0\3\u00d0"+
		"\5\u00d0\u1251\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d1\5\u00d1\u1257\n"+
		"\u00d1\3\u00d1\3\u00d1\5\u00d1\u125b\n\u00d1\3\u00d1\3\u00d1\5\u00d1\u125f"+
		"\n\u00d1\3\u00d1\3\u00d1\3\u00d1\5\u00d1\u1264\n\u00d1\3\u00d1\3\u00d1"+
		"\5\u00d1\u1268\n\u00d1\3\u00d1\5\u00d1\u126b\n\u00d1\3\u00d1\5\u00d1\u126e"+
		"\n\u00d1\3\u00d1\5\u00d1\u1271\n\u00d1\3\u00d2\5\u00d2\u1274\n\u00d2\3"+
		"\u00d2\3\u00d2\5\u00d2\u1278\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u127c\n\u00d2"+
		"\3\u00d2\3\u00d2\5\u00d2\u1280\n\u00d2\3\u00d2\3\u00d2\5\u00d2\u1284\n"+
		"\u00d2\3\u00d2\5\u00d2\u1287\n\u00d2\3\u00d2\5\u00d2\u128a\n\u00d2\3\u00d2"+
		"\5\u00d2\u128d\n\u00d2\3\u00d2\3\u00d2\3\u00d2\3\u00d2\5\u00d2\u1293\n"+
		"\u00d2\3\u00d2\3\u00d2\5\u00d2\u1297\n\u00d2\3\u00d2\5\u00d2\u129a\n\u00d2"+
		"\3\u00d3\3\u00d3\3\u00d3\5\u00d3\u129f\n\u00d3\3\u00d3\3\u00d3\3\u00d3"+
		"\5\u00d3\u12a4\n\u00d3\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4\5\u00d4"+
		"\u12ab\n\u00d4\3\u00d5\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u12b1\n\u00d5\3"+
		"\u00d5\3\u00d5\3\u00d6\3\u00d6\3\u00d6\3\u00d6\5\u00d6\u12b9\n\u00d6\3"+
		"\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\7\u00d7\u12c0\n\u00d7\f\u00d7\16"+
		"\u00d7\u12c3\13\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7\3\u00d7"+
		"\5\u00d7\u12d4\n\u00d7\3\u00d8\3\u00d8\3\u00d8\3\u00d8\7\u00d8\u12da\n"+
		"\u00d8\f\u00d8\16\u00d8\u12dd\13\u00d8\3\u00d8\3\u00d8\3\u00d9\3\u00d9"+
		"\3\u00d9\3\u00d9\7\u00d9\u12e5\n\u00d9\f\u00d9\16\u00d9\u12e8\13\u00d9"+
		"\5\u00d9\u12ea\n\u00d9\3\u00d9\3\u00d9\3\u00d9\5\u00d9\u12ef\n\u00d9\3"+
		"\u00da\3\u00da\3\u00da\5\u00da\u12f4\n\u00da\3\u00db\3\u00db\3\u00db\3"+
		"\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u12ff\n\u00dc\f"+
		"\u00dc\16\u00dc\u1302\13\u00dc\3\u00dc\3\u00dc\3\u00dd\3\u00dd\5\u00dd"+
		"\u1308\n\u00dd\3\u00de\3\u00de\3\u00de\5\u00de\u130d\n\u00de\3\u00df\3"+
		"\u00df\3\u00df\3\u00df\3\u00df\7\u00df\u1314\n\u00df\f\u00df\16\u00df"+
		"\u1317\13\u00df\3\u00df\3\u00df\3\u00e0\5\u00e0\u131c\n\u00e0\3\u00e0"+
		"\3\u00e0\5\u00e0\u1320\n\u00e0\3\u00e1\3\u00e1\5\u00e1\u1324\n\u00e1\3"+
		"\u00e2\3\u00e2\3\u00e2\3\u00e2\7\u00e2\u132a\n\u00e2\f\u00e2\16\u00e2"+
		"\u132d\13\u00e2\3\u00e2\3\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3"+
		"\7\u00e3\u1336\n\u00e3\f\u00e3\16\u00e3\u1339\13\u00e3\5\u00e3\u133b\n"+
		"\u00e3\3\u00e4\3\u00e4\3\u00e4\5\u00e4\u1340\n\u00e4\3\u00e4\7\u00e4\u1343"+
		"\n\u00e4\f\u00e4\16\u00e4\u1346\13\u00e4\3\u00e4\5\u00e4\u1349\n\u00e4"+
		"\3\u00e5\3\u00e5\3\u00e5\5\u00e5\u134e\n\u00e5\3\u00e5\5\u00e5\u1351\n"+
		"\u00e5\3\u00e5\7\u00e5\u1354\n\u00e5\f\u00e5\16\u00e5\u1357\13\u00e5\3"+
		"\u00e6\3\u00e6\3\u00e6\3\u00e7\3\u00e7\5\u00e7\u135e\n\u00e7\3\u00e7\3"+
		"\u00e7\5\u00e7\u1362\n\u00e7\3\u00e7\5\u00e7\u1365\n\u00e7\3\u00e8\3\u00e8"+
		"\3\u00e8\5\u00e8\u136a\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u1375\n\u00e8\f\u00e8\16\u00e8"+
		"\u1378\13\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u137e\n\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u1383\n\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\5\u00e8\u1388\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\7\u00e8"+
		"\u138f\n\u00e8\f\u00e8\16\u00e8\u1392\13\u00e8\3\u00e8\3\u00e8\3\u00e8"+
		"\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u139a\n\u00e8\3\u00e8\5\u00e8\u139d\n"+
		"\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u13a3\n\u00e8\3\u00e8\5"+
		"\u00e8\u13a6\n\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3"+
		"\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\3\u00e8\5\u00e8\u13b4\n\u00e8\3"+
		"\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9\3\u00e9"+
		"\3\u00e9\3\u00e9\3\u00e9\3\u00e9\5\u00e9\u13c3\n\u00e9\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea\3\u00ea"+
		"\3\u00ea\3\u00ea\5\u00ea\u13d2\n\u00ea\3\u00eb\3\u00eb\3\u00ec\5\u00ec"+
		"\u13d7\n\u00ec\3\u00ec\5\u00ec\u13da\n\u00ec\3\u00ec\3\u00ec\3\u00ec\3"+
		"\u00ec\5\u00ec\u13e0\n\u00ec\5\u00ec\u13e2\n\u00ec\3\u00ed\3\u00ed\3\u00ed"+
		"\3\u00ed\3\u00ee\3\u00ee\3\u00ee\7\u00ee\u13eb\n\u00ee\f\u00ee\16\u00ee"+
		"\u13ee\13\u00ee\3\u00ef\3\u00ef\3\u00ef\3\u00ef\7\u00ef\u13f4\n\u00ef"+
		"\f\u00ef\16\u00ef\u13f7\13\u00ef\3\u00ef\3\u00ef\3\u00f0\3\u00f0\3\u00f0"+
		"\5\u00f0\u13fe\n\u00f0\3\u00f1\3\u00f1\3\u00f1\5\u00f1\u1403\n\u00f1\3"+
		"\u00f2\3\u00f2\3\u00f2\3\u00f3\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3"+
		"\u140d\n\u00f3\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4\3\u00f4"+
		"\5\u00f4\u1416\n\u00f4\3\u00f5\3\u00f5\3\u00f5\3\u00f6\3\u00f6\3\u00f6"+
		"\3\u00f6\3\u00f6\5\u00f6\u1420\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7"+
		"\3\u00f7\5\u00f7\u1427\n\u00f7\3\u00f8\3\u00f8\3\u00f8\3\u00f8\3\u00f9"+
		"\3\u00f9\3\u00f9\3\u00f9\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa\3\u00fa"+
		"\3\u00fa\3\u00fa\3\u00fa\5\u00fa\u143a\n\u00fa\5\u00fa\u143c\n\u00fa\3"+
		"\u00fb\3\u00fb\3\u00fc\3\u00fc\3\u00fc\3\u00fc\3\u00fc\7\u00fc\u1445\n"+
		"\u00fc\f\u00fc\16\u00fc\u1448\13\u00fc\3\u00fd\3\u00fd\3\u00fe\3\u00fe"+
		"\3\u00fe\3\u00ff\3\u00ff\5\u00ff\u1451\n\u00ff\3\u00ff\5\u00ff\u1454\n"+
		"\u00ff\3\u0100\3\u0100\3\u0101\6\u0101\u1459\n\u0101\r\u0101\16\u0101"+
		"\u145a\3\u0101\7\u0101\u145e\n\u0101\f\u0101\16\u0101\u1461\13\u0101\3"+
		"\u0101\3\u0101\5\u0101\u1465\n\u0101\3\u0102\3\u0102\3\u0102\3\u0102\3"+
		"\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u146f\n\u0102\3\u0102\3\u0102\5"+
		"\u0102\u1473\n\u0102\3\u0102\5\u0102\u1476\n\u0102\3\u0103\3\u0103\5\u0103"+
		"\u147a\n\u0103\3\u0103\3\u0103\5\u0103\u147e\n\u0103\3\u0103\5\u0103\u1481"+
		"\n\u0103\3\u0104\3\u0104\5\u0104\u1485\n\u0104\3\u0104\3\u0104\3\u0104"+
		"\3\u0104\5\u0104\u148b\n\u0104\3\u0105\3\u0105\5\u0105\u148f\n\u0105\3"+
		"\u0105\3\u0105\3\u0105\3\u0105\5\u0105\u1495\n\u0105\3\u0106\3\u0106\3"+
		"\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\5\u0106\u14a2\n\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106"+
		"\5\u0106\u14aa\n\u0106\3\u0106\5\u0106\u14ad\n\u0106\3\u0106\3\u0106\5"+
		"\u0106\u14b1\n\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3"+
		"\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\3\u0106\5\u0106"+
		"\u14c1\n\u0106\3\u0106\3\u0106\3\u0107\5\u0107\u14c6\n\u0107\3\u0107\3"+
		"\u0107\5\u0107\u14ca\n\u0107\3\u0108\3\u0108\3\u0108\5\u0108\u14cf\n\u0108"+
		"\3\u0109\3\u0109\3\u0109\5\u0109\u14d4\n\u0109\3\u010a\3\u010a\3\u010a"+
		"\5\u010a\u14d9\n\u010a\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b\5\u010b"+
		"\u14e0\n\u010b\3\u010c\3\u010c\3\u010d\3\u010d\3\u010e\3\u010e\3\u010f"+
		"\3\u010f\3\u0110\3\u0110\3\u0111\3\u0111\3\u0111\3\u0111\3\u0111\5\u0111"+
		"\u14f1\n\u0111\3\u0112\3\u0112\3\u0112\7\u0112\u14f6\n\u0112\f\u0112\16"+
		"\u0112\u14f9\13\u0112\3\u0113\5\u0113\u14fc\n\u0113\3\u0113\3\u0113\3"+
		"\u0113\5\u0113\u1501\n\u0113\3\u0113\6\u0113\u1504\n\u0113\r\u0113\16"+
		"\u0113\u1505\5\u0113\u1508\n\u0113\3\u0114\3\u0114\5\u0114\u150c\n\u0114"+
		"\3\u0114\3\u0114\3\u0115\3\u0115\3\u0115\5\u0115\u1513\n\u0115\3\u0115"+
		"\5\u0115\u1516\n\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u151b\n\u0115\3"+
		"\u0115\3\u0115\5\u0115\u151f\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5"+
		"\u0115\u1525\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u152b\n\u0115"+
		"\3\u0115\5\u0115\u152e\n\u0115\3\u0115\5\u0115\u1531\n\u0115\3\u0115\3"+
		"\u0115\5\u0115\u1535\n\u0115\3\u0115\5\u0115\u1538\n\u0115\3\u0115\3\u0115"+
		"\5\u0115\u153c\n\u0115\3\u0115\5\u0115\u153f\n\u0115\3\u0115\3\u0115\5"+
		"\u0115\u1543\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1549\n\u0115"+
		"\3\u0115\3\u0115\3\u0115\5\u0115\u154e\n\u0115\3\u0115\3\u0115\5\u0115"+
		"\u1552\n\u0115\3\u0115\3\u0115\3\u0115\5\u0115\u1557\n\u0115\3\u0115\3"+
		"\u0115\5\u0115\u155b\n\u0115\3\u0115\3\u0115\3\u0115\3\u0115\3\u0115\7"+
		"\u0115\u1562\n\u0115\f\u0115\16\u0115\u1565\13\u0115\3\u0115\3\u0115\5"+
		"\u0115\u1569\n\u0115\5\u0115\u156b\n\u0115\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116"+
		"\3\u0116\3\u0116\3\u0116\3\u0116\3\u0116\5\u0116\u1588\n\u0116\3\u0117"+
		"\3\u0117\3\u0117\3\u0117\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u1592"+
		"\n\u0118\3\u0118\3\u0118\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119"+
		"\u159b\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\6\u0119\u15a1\n\u0119\r"+
		"\u0119\16\u0119\u15a2\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u15b0\n\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\5\u0119\u15c6\n\u0119\3\u0119\3\u0119\5\u0119\u15ca\n\u0119\3"+
		"\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u15d2\n\u0119\3"+
		"\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u15d8\n\u0119\3\u0119\3\u0119\3"+
		"\u0119\5\u0119\u15dd\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u15e3"+
		"\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\5\u0119\u15ef\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u1603\n\u0119\3\u0119"+
		"\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\7\u0119\u160b\n\u0119\f\u0119"+
		"\16\u0119\u160e\13\u0119\5\u0119\u1610\n\u0119\3\u0119\3\u0119\3\u0119"+
		"\3\u0119\3\u0119\5\u0119\u1617\n\u0119\3\u0119\3\u0119\5\u0119\u161b\n"+
		"\u0119\3\u0119\3\u0119\3\u0119\5\u0119\u1620\n\u0119\3\u0119\3\u0119\3"+
		"\u0119\3\u0119\5\u0119\u1626\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\5"+
		"\u0119\u162c\n\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3\u0119\3"+
		"\u0119\3\u0119\3\u0119\7\u0119\u1637\n\u0119\f\u0119\16\u0119\u163a\13"+
		"\u0119\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u1641\n\u011a\3"+
		"\u011a\3\u011a\3\u011a\3\u011a\6\u011a\u1647\n\u011a\r\u011a\16\u011a"+
		"\u1648\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\5\u011a\u1653\n\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u1668\n\u011a\3\u011a\3\u011a"+
		"\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a\3\u011a"+
		"\5\u011a\u1675\n\u011a\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u167b\n"+
		"\u011a\3\u011a\3\u011a\3\u011a\3\u011a\5\u011a\u1681\n\u011a\3\u011a\3"+
		"\u011a\3\u011a\3\u011a\3\u011a\7\u011a\u1688\n\u011a\f\u011a\16\u011a"+
		"\u168b\13\u011a\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b\3\u011b"+
		"\3\u011b\5\u011b\u1695\n\u011b\3\u011c\3\u011c\3\u011c\3\u011c\3\u011c"+
		"\3\u011c\3\u011c\3\u011c\5\u011c\u169f\n\u011c\3\u011d\3\u011d\3\u011d"+
		"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u16b2\n\u011e\3\u011e"+
		"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e"+
		"\3\u011e\5\u011e\u16bf\n\u011e\3\u011f\3\u011f\3\u011f\5\u011f\u16c4\n"+
		"\u011f\3\u0120\3\u0120\3\u0121\3\u0121\3\u0122\3\u0122\5\u0122\u16cc\n"+
		"\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\6\u0122\u16d3\n\u0122\r"+
		"\u0122\16\u0122\u16d4\3\u0122\3\u0122\5\u0122\u16d9\n\u0122\3\u0122\3"+
		"\u0122\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0124"+
		"\3\u0124\3\u0124\5\u0124\u16e7\n\u0124\3\u0124\3\u0124\3\u0124\7\u0124"+
		"\u16ec\n\u0124\f\u0124\16\u0124\u16ef\13\u0124\3\u0124\5\u0124\u16f2\n"+
		"\u0124\5\u0124\u16f4\n\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3\u0124\3"+
		"\u0124\3\u0124\5\u0124\u16fd\n\u0124\3\u0124\5\u0124\u1700\n\u0124\3\u0124"+
		"\3\u0124\3\u0124\5\u0124\u1705\n\u0124\5\u0124\u1707\n\u0124\3\u0124\3"+
		"\u0124\3\u0124\3\u0124\3\u0124\3\u0124\5\u0124\u170f\n\u0124\3\u0125\5"+
		"\u0125\u1712\n\u0125\3\u0125\3\u0125\3\u0125\5\u0125\u1717\n\u0125\3\u0125"+
		"\3\u0125\3\u0126\3\u0126\3\u0127\3\u0127\3\u0127\3\u0127\3\u0127\7\u0127"+
		"\u1722\n\u0127\f\u0127\16\u0127\u1725\13\u0127\3\u0127\3\u0127\3\u0127"+
		"\3\u0127\3\u0127\3\u0127\3\u0127\7\u0127\u172e\n\u0127\f\u0127\16\u0127"+
		"\u1731\13\u0127\5\u0127\u1733\n\u0127\3\u0127\5\u0127\u1736\n\u0127\3"+
		"\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u173c\n\u0128\3\u0128\3\u0128\3"+
		"\u0128\3\u0128\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\5\u0129"+
		"\u1748\n\u0129\3\u012a\3\u012a\3\u012a\5\u012a\u174d\n\u012a\3\u012a\3"+
		"\u012a\5\u012a\u1751\n\u012a\3\u012a\3\u012a\5\u012a\u1755\n\u012a\3\u012a"+
		"\3\u012a\5\u012a\u1759\n\u012a\5\u012a\u175b\n\u012a\3\u012b\3\u012b\3"+
		"\u012b\5\u012b\u1760\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5"+
		"\u012b\u1767\n\u012b\3\u012b\3\u012b\3\u012b\5\u012b\u176c\n\u012b\5\u012b"+
		"\u176e\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\7\u012b\u1777\n\u012b\f\u012b\16\u012b\u177a\13\u012b\3\u012b\3\u012b"+
		"\5\u012b\u177e\n\u012b\3\u012b\3\u012b\5\u012b\u1782\n\u012b\3\u012b\3"+
		"\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\5\u012b"+
		"\u1796\n\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b"+
		"\3\u012b\5\u012b\u17a0\n\u012b\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u17ac\n\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\5\u012c\u17b2\n\u012c\7\u012c\u17b4\n\u012c\f"+
		"\u012c\16\u012c\u17b7\13\u012c\3\u012c\3\u012c\5\u012c\u17bb\n\u012c\3"+
		"\u012c\3\u012c\7\u012c\u17bf\n\u012c\f\u012c\16\u012c\u17c2\13\u012c\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u17cb\n"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u17d1\n\u012c\7\u012c\u17d3"+
		"\n\u012c\f\u012c\16\u012c\u17d6\13\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u17e0\n\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c"+
		"\u17ec\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c"+
		"\u17f4\n\u012c\5\u012c\u17f6\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1800\n\u012c\3\u012c\3\u012c\3"+
		"\u012c\5\u012c\u1805\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3"+
		"\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\7\u012c\u1823\n\u012c\f\u012c"+
		"\16\u012c\u1826\13\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u182b\n\u012c"+
		"\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1831\n\u012c\3\u012c\3\u012c"+
		"\3\u012c\5\u012c\u1836\n\u012c\3\u012c\3\u012c\3\u012c\3\u012c\7\u012c"+
		"\u183c\n\u012c\f\u012c\16\u012c\u183f\13\u012c\3\u012c\3\u012c\5\u012c"+
		"\u1843\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d\5\u012d\u1849\n\u012d\3"+
		"\u012d\3\u012d\5\u012d\u184d\n\u012d\3\u012d\5\u012d\u1850\n\u012d\3\u012d"+
		"\5\u012d\u1853\n\u012d\3\u012d\3\u012d\5\u012d\u1857\n\u012d\3\u012e\3"+
		"\u012e\3\u012e\3\u012e\5\u012e\u185d\n\u012e\3\u012e\3\u012e\3\u012f\3"+
		"\u012f\3\u012f\3\u012f\3\u012f\3\u012f\3\u0130\3\u0130\5\u0130\u1869\n"+
		"\u0130\3\u0130\5\u0130\u186c\n\u0130\3\u0130\5\u0130\u186f\n\u0130\3\u0130"+
		"\5\u0130\u1872\n\u0130\3\u0130\3\u0130\3\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\5\u0131\u187d\n\u0131\3\u0131\3\u0131\3\u0131"+
		"\3\u0131\3\u0131\3\u0131\3\u0131\5\u0131\u1886\n\u0131\5\u0131\u1888\n"+
		"\u0131\3\u0132\3\u0132\3\u0132\3\u0132\3\u0132\5\u0132\u188f\n\u0132\3"+
		"\u0133\3\u0133\3\u0133\5\u0133\u1894\n\u0133\3\u0134\3\u0134\3\u0134\5"+
		"\u0134\u1899\n\u0134\3\u0134\3\u0134\3\u0134\5\u0134\u189e\n\u0134\7\u0134"+
		"\u18a0\n\u0134\f\u0134\16\u0134\u18a3\13\u0134\5\u0134\u18a5\n\u0134\3"+
		"\u0134\3\u0134\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135\3\u0135"+
		"\5\u0135\u18b0\n\u0135\5\u0135\u18b2\n\u0135\3\u0136\3\u0136\3\u0136\3"+
		"\u0136\3\u0136\5\u0136\u18b9\n\u0136\5\u0136\u18bb\n\u0136\3\u0137\3\u0137"+
		"\3\u0138\3\u0138\3\u0138\3\u0138\3\u0139\5\u0139\u18c4\n\u0139\3\u0139"+
		"\3\u0139\7\u0139\u18c8\n\u0139\f\u0139\16\u0139\u18cb\13\u0139\3\u013a"+
		"\3\u013a\3\u013a\3\u013a\5\u013a\u18d1\n\u013a\3\u013a\3\u013a\3\u013a"+
		"\5\u013a\u18d6\n\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u18db\n\u013a\3"+
		"\u013a\3\u013a\5\u013a\u18df\n\u013a\3\u013a\3\u013a\3\u013a\3\u013a\3"+
		"\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u18e9\n\u013a\3\u013a\3\u013a\3"+
		"\u013a\3\u013a\7\u013a\u18ef\n\u013a\f\u013a\16\u013a\u18f2\13\u013a\5"+
		"\u013a\u18f4\n\u013a\3\u013a\3\u013a\3\u013a\5\u013a\u18f9\n\u013a\5\u013a"+
		"\u18fb\n\u013a\3\u013b\5\u013b\u18fe\n\u013b\3\u013b\3\u013b\7\u013b\u1902"+
		"\n\u013b\f\u013b\16\u013b\u1905\13\u013b\3\u013c\3\u013c\5\u013c\u1909"+
		"\n\u013c\3\u013c\3\u013c\3\u013c\7\u013c\u190e\n\u013c\f\u013c\16\u013c"+
		"\u1911\13\u013c\3\u013d\3\u013d\3\u013d\3\u013d\3\u013d\7\u013d\u1918"+
		"\n\u013d\f\u013d\16\u013d\u191b\13\u013d\3\u013d\3\u013d\5\u013d\u191f"+
		"\n\u013d\3\u013d\3\u013d\5\u013d\u1923\n\u013d\3\u013d\5\u013d\u1926\n"+
		"\u013d\3\u013d\3\u013d\3\u013d\3\u013d\3\u013e\3\u013e\3\u013e\3\u013e"+
		"\3\u013e\3\u013e\5\u013e\u1932\n\u013e\3\u013e\3\u013e\3\u013e\5\u013e"+
		"\u1937\n\u013e\3\u013e\7\u013e\u193a\n\u013e\f\u013e\16\u013e\u193d\13"+
		"\u013e\3\u013f\3\u013f\3\u013f\5\u013f\u1942\n\u013f\3\u013f\3\u013f\3"+
		"\u013f\3\u013f\3\u013f\5\u013f\u1949\n\u013f\3\u013f\5\u013f\u194c\n\u013f"+
		"\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\7\u0140\u1955"+
		"\n\u0140\f\u0140\16\u0140\u1958\13\u0140\3\u0140\3\u0140\5\u0140\u195c"+
		"\n\u0140\5\u0140\u195e\n\u0140\3\u0140\5\u0140\u1961\n\u0140\3\u0140\5"+
		"\u0140\u1964\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\7\u0140\u196a\n\u0140"+
		"\f\u0140\16\u0140\u196d\13\u0140\5\u0140\u196f\n\u0140\3\u0140\3\u0140"+
		"\5\u0140\u1973\n\u0140\3\u0140\5\u0140\u1976\n\u0140\3\u0140\3\u0140\5"+
		"\u0140\u197a\n\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3\u0140\3"+
		"\u0140\3\u0140\3\u0140\7\u0140\u1985\n\u0140\f\u0140\16\u0140\u1988\13"+
		"\u0140\5\u0140\u198a\n\u0140\3\u0140\3\u0140\5\u0140\u198e\n\u0140\3\u0140"+
		"\3\u0140\5\u0140\u1992\n\u0140\3\u0140\5\u0140\u1995\n\u0140\3\u0141\3"+
		"\u0141\3\u0141\7\u0141\u199a\n\u0141\f\u0141\16\u0141\u199d\13\u0141\3"+
		"\u0142\3\u0142\3\u0142\3\u0142\5\u0142\u19a3\n\u0142\3\u0143\3\u0143\5"+
		"\u0143\u19a7\n\u0143\3\u0143\5\u0143\u19aa\n\u0143\3\u0143\3\u0143\3\u0144"+
		"\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u19b3\n\u0144\3\u0144\5\u0144"+
		"\u19b6\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\3\u0144\5\u0144\u19c1\n\u0144\5\u0144\u19c3\n\u0144\3\u0144\3"+
		"\u0144\3\u0144\3\u0144\3\u0144\3\u0144\5\u0144\u19cb\n\u0144\5\u0144\u19cd"+
		"\n\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144\3\u0144"+
		"\3\u0144\5\u0144\u19d8\n\u0144\5\u0144\u19da\n\u0144\3\u0144\3\u0144\3"+
		"\u0144\3\u0144\3\u0144\7\u0144\u19e1\n\u0144\f\u0144\16\u0144\u19e4\13"+
		"\u0144\3\u0145\5\u0145\u19e7\n\u0145\3\u0145\3\u0145\5\u0145\u19eb\n\u0145"+
		"\3\u0145\5\u0145\u19ee\n\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145"+
		"\3\u0145\7\u0145\u19f6\n\u0145\f\u0145\16\u0145\u19f9\13\u0145\3\u0145"+
		"\3\u0145\3\u0145\5\u0145\u19fe\n\u0145\5\u0145\u1a00\n\u0145\3\u0145\5"+
		"\u0145\u1a03\n\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1a09\n\u0145"+
		"\3\u0145\3\u0145\3\u0145\5\u0145\u1a0e\n\u0145\3\u0145\3\u0145\3\u0145"+
		"\5\u0145\u1a13\n\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\7\u0145"+
		"\u1a1a\n\u0145\f\u0145\16\u0145\u1a1d\13\u0145\3\u0145\3\u0145\3\u0145"+
		"\5\u0145\u1a22\n\u0145\5\u0145\u1a24\n\u0145\3\u0145\5\u0145\u1a27\n\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1a2f\n\u0145"+
		"\3\u0145\3\u0145\3\u0145\3\u0145\5\u0145\u1a35\n\u0145\7\u0145\u1a37\n"+
		"\u0145\f\u0145\16\u0145\u1a3a\13\u0145\3\u0145\3\u0145\3\u0145\5\u0145"+
		"\u1a3f\n\u0145\3\u0145\5\u0145\u1a42\n\u0145\3\u0145\3\u0145\3\u0145\3"+
		"\u0145\3\u0145\7\u0145\u1a49\n\u0145\f\u0145\16\u0145\u1a4c\13\u0145\3"+
		"\u0145\3\u0145\5\u0145\u1a50\n\u0145\5\u0145\u1a52\n\u0145\5\u0145\u1a54"+
		"\n\u0145\3\u0146\5\u0146\u1a57\n\u0146\3\u0146\3\u0146\3\u0146\3\u0146"+
		"\3\u0146\7\u0146\u1a5e\n\u0146\f\u0146\16\u0146\u1a61\13\u0146\3\u0146"+
		"\3\u0146\5\u0146\u1a65\n\u0146\3\u0147\3\u0147\3\u0147\3\u0147\3\u0147"+
		"\3\u0147\3\u0147\7\u0147\u1a6e\n\u0147\f\u0147\16\u0147\u1a71\13\u0147"+
		"\3\u0147\3\u0147\3\u0148\3\u0148\3\u0148\3\u0148\3\u0149\3\u0149\3\u0149"+
		"\7\u0149\u1a7c\n\u0149\f\u0149\16\u0149\u1a7f\13\u0149\3\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\3\u014a\3\u014a\5\u014a\u1a88\n\u014a\3\u014a"+
		"\3\u014a\3\u014a\3\u014a\5\u014a\u1a8e\n\u014a\3\u014b\3\u014b\3\u014b"+
		"\3\u014b\7\u014b\u1a94\n\u014b\f\u014b\16\u014b\u1a97\13\u014b\3\u014c"+
		"\3\u014c\3\u014c\5\u014c\u1a9c\n\u014c\3\u014c\3\u014c\3\u014c\5\u014c"+
		"\u1aa1\n\u014c\7\u014c\u1aa3\n\u014c\f\u014c\16\u014c\u1aa6\13\u014c\3"+
		"\u014c\3\u014c\3\u014d\3\u014d\3\u014d\3\u014d\3\u014e\3\u014e\3\u014e"+
		"\7\u014e\u1ab1\n\u014e\f\u014e\16\u014e\u1ab4\13\u014e\3\u014f\3\u014f"+
		"\5\u014f\u1ab8\n\u014f\3\u014f\5\u014f\u1abb\n\u014f\3\u014f\5\u014f\u1abe"+
		"\n\u014f\3\u0150\3\u0150\3\u0150\3\u0150\5\u0150\u1ac4\n\u0150\3\u0151"+
		"\3\u0151\3\u0151\3\u0152\5\u0152\u1aca\n\u0152\3\u0152\3\u0152\3\u0152"+
		"\3\u0152\3\u0152\5\u0152\u1ad1\n\u0152\3\u0152\3\u0152\3\u0152\5\u0152"+
		"\u1ad6\n\u0152\3\u0152\5\u0152\u1ad9\n\u0152\3\u0152\3\u0152\3\u0152\5"+
		"\u0152\u1ade\n\u0152\3\u0152\3\u0152\3\u0152\5\u0152\u1ae3\n\u0152\3\u0152"+
		"\5\u0152\u1ae6\n\u0152\3\u0152\3\u0152\5\u0152\u1aea\n\u0152\3\u0153\3"+
		"\u0153\3\u0153\3\u0153\7\u0153\u1af0\n\u0153\f\u0153\16\u0153\u1af3\13"+
		"\u0153\3\u0153\3\u0153\3\u0154\3\u0154\5\u0154\u1af9\n\u0154\3\u0155\3"+
		"\u0155\5\u0155\u1afd\n\u0155\3\u0155\3\u0155\3\u0155\5\u0155\u1b02\n\u0155"+
		"\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\3\u0156\7\u0156"+
		"\u1b0c\n\u0156\f\u0156\16\u0156\u1b0f\13\u0156\3\u0156\3\u0156\5\u0156"+
		"\u1b13\n\u0156\5\u0156\u1b15\n\u0156\3\u0157\5\u0157\u1b18\n\u0157\3\u0157"+
		"\3\u0157\3\u0157\5\u0157\u1b1d\n\u0157\3\u0157\3\u0157\5\u0157\u1b21\n"+
		"\u0157\3\u0157\5\u0157\u1b24\n\u0157\3\u0157\5\u0157\u1b27\n\u0157\3\u0157"+
		"\3\u0157\3\u0157\3\u0157\7\u0157\u1b2d\n\u0157\f\u0157\16\u0157\u1b30"+
		"\13\u0157\5\u0157\u1b32\n\u0157\3\u0157\3\u0157\3\u0157\3\u0157\3\u0157"+
		"\5\u0157\u1b39\n\u0157\5\u0157\u1b3b\n\u0157\3\u0157\3\u0157\5\u0157\u1b3f"+
		"\n\u0157\3\u0158\5\u0158\u1b42\n\u0158\3\u0158\3\u0158\5\u0158\u1b46\n"+
		"\u0158\3\u0158\3\u0158\5\u0158\u1b4a\n\u0158\3\u0158\5\u0158\u1b4d\n\u0158"+
		"\3\u0158\5\u0158\u1b50\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\7\u0158"+
		"\u1b56\n\u0158\f\u0158\16\u0158\u1b59\13\u0158\3\u0158\3\u0158\3\u0158"+
		"\3\u0158\7\u0158\u1b5f\n\u0158\f\u0158\16\u0158\u1b62\13\u0158\5\u0158"+
		"\u1b64\n\u0158\3\u0158\3\u0158\3\u0158\3\u0158\3\u0158\5\u0158\u1b6b\n"+
		"\u0158\5\u0158\u1b6d\n\u0158\3\u0158\3\u0158\5\u0158\u1b71\n\u0158\3\u0159"+
		"\3\u0159\3\u0159\3\u0159\5\u0159\u1b77\n\u0159\3\u0159\3\u0159\3\u0159"+
		"\3\u0159\7\u0159\u1b7d\n\u0159\f\u0159\16\u0159\u1b80\13\u0159\3\u0159"+
		"\3\u0159\3\u0159\5\u0159\u1b85\n\u0159\3\u0159\3\u0159\3\u0159\5\u0159"+
		"\u1b8a\n\u0159\3\u0159\3\u0159\3\u0159\5\u0159\u1b8f\n\u0159\7\u0159\u1b91"+
		"\n\u0159\f\u0159\16\u0159\u1b94\13\u0159\3\u0159\3\u0159\5\u0159\u1b98"+
		"\n\u0159\5\u0159\u1b9a\n\u0159\3\u015a\3\u015a\3\u015a\3\u015a\5\u015a"+
		"\u1ba0\n\u015a\3\u015b\3\u015b\5\u015b\u1ba4\n\u015b\3\u015b\3\u015b\3"+
		"\u015b\7\u015b\u1ba9\n\u015b\f\u015b\16\u015b\u1bac\13\u015b\3\u015b\3"+
		"\u015b\5\u015b\u1bb0\n\u015b\3\u015b\5\u015b\u1bb3\n\u015b\3\u015c\3\u015c"+
		"\3\u015c\7\u015c\u1bb8\n\u015c\f\u015c\16\u015c\u1bbb\13\u015c\3\u015d"+
		"\3\u015d\3\u015d\3\u015d\5\u015d\u1bc1\n\u015d\5\u015d\u1bc3\n\u015d\3"+
		"\u015d\3\u015d\3\u015d\3\u015d\3\u015d\3\u015d\5\u015d\u1bcb\n\u015d\5"+
		"\u015d\u1bcd\n\u015d\3\u015e\3\u015e\3\u015e\3\u015e\5\u015e\u1bd3\n\u015e"+
		"\3\u015f\5\u015f\u1bd6\n\u015f\3\u015f\5\u015f\u1bd9\n\u015f\3\u015f\3"+
		"\u015f\3\u015f\5\u015f\u1bde\n\u015f\3\u015f\3\u015f\5\u015f\u1be2\n\u015f"+
		"\3\u0160\3\u0160\3\u0160\3\u0160\3\u0161\3\u0161\7\u0161\u1bea\n\u0161"+
		"\f\u0161\16\u0161\u1bed\13\u0161\3\u0162\7\u0162\u1bf0\n\u0162\f\u0162"+
		"\16\u0162\u1bf3\13\u0162\3\u0162\3\u0162\3\u0162\3\u0162\3\u0163\5\u0163"+
		"\u1bfa\n\u0163\3\u0163\3\u0163\5\u0163\u1bfe\n\u0163\3\u0163\3\u0163\5"+
		"\u0163\u1c02\n\u0163\3\u0163\3\u0163\5\u0163\u1c06\n\u0163\3\u0163\3\u0163"+
		"\3\u0163\3\u0163\5\u0163\u1c0c\n\u0163\3\u0163\5\u0163\u1c0f\n\u0163\3"+
		"\u0163\5\u0163\u1c12\n\u0163\3\u0163\3\u0163\3\u0163\3\u0163\3\u0163\5"+
		"\u0163\u1c19\n\u0163\3\u0163\3\u0163\5\u0163\u1c1d\n\u0163\3\u0164\3\u0164"+
		"\3\u0164\3\u0164\3\u0164\3\u0164\7\u0164\u1c25\n\u0164\f\u0164\16\u0164"+
		"\u1c28\13\u0164\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165\3\u0165"+
		"\3\u0165\3\u0165\5\u0165\u1c33\n\u0165\3\u0166\3\u0166\3\u0166\3\u0166"+
		"\3\u0166\3\u0166\6\u0166\u1c3b\n\u0166\r\u0166\16\u0166\u1c3c\3\u0167"+
		"\3\u0167\3\u0167\7\u0167\u1c42\n\u0167\f\u0167\16\u0167\u1c45\13\u0167"+
		"\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168\3\u0168"+
		"\5\u0168\u1c50\n\u0168\3\u0169\3\u0169\3\u0169\3\u0169\3\u0169\5\u0169"+
		"\u1c57\n\u0169\3\u0169\3\u0169\3\u0169\3\u0169\7\u0169\u1c5d\n\u0169\f"+
		"\u0169\16\u0169\u1c60\13\u0169\3\u0169\5\u0169\u1c63\n\u0169\3\u016a\3"+
		"\u016a\5\u016a\u1c67\n\u016a\3\u016a\3\u016a\3\u016a\3\u016a\7\u016a\u1c6d"+
		"\n\u016a\f\u016a\16\u016a\u1c70\13\u016a\3\u016b\3\u016b\3\u016b\3\u016b"+
		"\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\7\u016c\u1c7c\n\u016c"+
		"\f\u016c\16\u016c\u1c7f\13\u016c\3\u016c\3\u016c\5\u016c\u1c83\n\u016c"+
		"\5\u016c\u1c85\n\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c\7\u016c"+
		"\u1c8c\n\u016c\f\u016c\16\u016c\u1c8f\13\u016c\5\u016c\u1c91\n\u016c\3"+
		"\u016c\3\u016c\5\u016c\u1c95\n\u016c\3\u016c\5\u016c\u1c98\n\u016c\3\u016c"+
		"\3\u016c\5\u016c\u1c9c\n\u016c\3\u016c\3\u016c\3\u016c\3\u016c\3\u016c"+
		"\3\u016c\3\u016c\3\u016c\3\u016c\7\u016c\u1ca7\n\u016c\f\u016c\16\u016c"+
		"\u1caa\13\u016c\5\u016c\u1cac\n\u016c\3\u016c\3\u016c\5\u016c\u1cb0\n"+
		"\u016c\3\u016c\5\u016c\u1cb3\n\u016c\3\u016c\7\u016c\u1cb6\n\u016c\f\u016c"+
		"\16\u016c\u1cb9\13\u016c\3\u016d\3\u016d\3\u016d\3\u016d\5\u016d\u1cbf"+
		"\n\u016d\3\u016e\3\u016e\3\u016e\5\u016e\u1cc4\n\u016e\3\u016f\3\u016f"+
		"\3\u016f\3\u016f\3\u016f\3\u016f\5\u016f\u1ccc\n\u016f\3\u0170\3\u0170"+
		"\3\u0170\5\u0170\u1cd1\n\u0170\3\u0170\5\u0170\u1cd4\n\u0170\3\u0170\3"+
		"\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\3\u0170\7\u0170"+
		"\u1cdf\n\u0170\f\u0170\16\u0170\u1ce2\13\u0170\3\u0170\3\u0170\5\u0170"+
		"\u1ce6\n\u0170\3\u0170\3\u0170\5\u0170\u1cea\n\u0170\3\u0170\5\u0170\u1ced"+
		"\n\u0170\3\u0170\3\u0170\3\u0170\5\u0170\u1cf2\n\u0170\3\u0170\5\u0170"+
		"\u1cf5\n\u0170\3\u0170\3\u0170\3\u0170\5\u0170\u1cfa\n\u0170\3\u0171\3"+
		"\u0171\3\u0171\5\u0171\u1cff\n\u0171\3\u0171\3\u0171\3\u0172\3\u0172\3"+
		"\u0172\5\u0172\u1d06\n\u0172\3\u0172\5\u0172\u1d09\n\u0172\3\u0172\5\u0172"+
		"\u1d0c\n\u0172\3\u0173\3\u0173\5\u0173\u1d10\n\u0173\3\u0173\3\u0173\3"+
		"\u0173\7\u0173\u1d15\n\u0173\f\u0173\16\u0173\u1d18\13\u0173\5\u0173\u1d1a"+
		"\n\u0173\3\u0173\5\u0173\u1d1d\n\u0173\3\u0173\3\u0173\5\u0173\u1d21\n"+
		"\u0173\3\u0173\3\u0173\5\u0173\u1d25\n\u0173\3\u0173\3\u0173\5\u0173\u1d29"+
		"\n\u0173\3\u0173\3\u0173\3\u0173\5\u0173\u1d2e\n\u0173\3\u0173\3\u0173"+
		"\3\u0173\3\u0173\5\u0173\u1d34\n\u0173\5\u0173\u1d36\n\u0173\3\u0174\3"+
		"\u0174\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175\3\u0175"+
		"\3\u0175\7\u0175\u1d43\n\u0175\f\u0175\16\u0175\u1d46\13\u0175\3\u0176"+
		"\3\u0176\3\u0177\3\u0177\5\u0177\u1d4c\n\u0177\3\u0177\3\u0177\3\u0177"+
		"\3\u0177\3\u0177\3\u0177\5\u0177\u1d54\n\u0177\3\u0178\5\u0178\u1d57\n"+
		"\u0178\3\u0178\5\u0178\u1d5a\n\u0178\3\u0178\3\u0178\3\u0178\3\u0178\3"+
		"\u0178\5\u0178\u1d61\n\u0178\3\u0178\3\u0178\5\u0178\u1d65\n\u0178\3\u0178"+
		"\3\u0178\5\u0178\u1d69\n\u0178\5\u0178\u1d6b\n\u0178\3\u0179\3\u0179\3"+
		"\u0179\3\u0179\3\u0179\3\u0179\5\u0179\u1d73\n\u0179\3\u0179\3\u0179\3"+
		"\u0179\3\u0179\3\u0179\5\u0179\u1d7a\n\u0179\3\u0179\3\u0179\3\u0179\3"+
		"\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179\3\u0179"+
		"\3\u0179\7\u0179\u1d89\n\u0179\f\u0179\16\u0179\u1d8c\13\u0179\3\u0179"+
		"\3\u0179\5\u0179\u1d90\n\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5\u0179"+
		"\u1d96\n\u0179\3\u0179\3\u0179\3\u0179\3\u0179\5\u0179\u1d9c\n\u0179\3"+
		"\u017a\3\u017a\3\u017a\3\u017a\7\u017a\u1da2\n\u017a\f\u017a\16\u017a"+
		"\u1da5\13\u017a\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b\3\u017b"+
		"\3\u017b\3\u017b\7\u017b\u1db0\n\u017b\f\u017b\16\u017b\u1db3\13\u017b"+
		"\3\u017b\3\u017b\5\u017b\u1db7\n\u017b\3\u017b\3\u017b\3\u017b\3\u017c"+
		"\3\u017c\5\u017c\u1dbe\n\u017c\3\u017c\3\u017c\3\u017c\3\u017c\7\u017c"+
		"\u1dc4\n\u017c\f\u017c\16\u017c\u1dc7\13\u017c\3\u017c\3\u017c\3\u017c"+
		"\6\u017c\u1dcc\n\u017c\r\u017c\16\u017c\u1dcd\3\u017c\3\u017c\5\u017c"+
		"\u1dd2\n\u017c\3\u017c\3\u017c\3\u017c\3\u017d\3\u017d\3\u017d\3\u017d"+
		"\5\u017d\u1ddb\n\u017d\3\u017e\3\u017e\3\u017e\6\u017e\u1de0\n\u017e\r"+
		"\u017e\16\u017e\u1de1\3\u017e\7\u017e\u1de5\n\u017e\f\u017e\16\u017e\u1de8"+
		"\13\u017e\7\u017e\u1dea\n\u017e\f\u017e\16\u017e\u1ded\13\u017e\3\u017e"+
		"\2\6\u0230\u0232\u027a\u0286\u017f\2\4\6\b\n\f\16\20\22\24\26\30\32\34"+
		"\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172"+
		"\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188\u018a"+
		"\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0\u01a2"+
		"\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba"+
		"\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0\u01d2"+
		"\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8\u01ea"+
		"\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202"+
		"\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218\u021a"+
		"\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230\u0232"+
		"\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a"+
		"\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260\u0262"+
		"\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278\u027a"+
		"\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290\u0292"+
		"\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8\u02aa"+
		"\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0\u02c2"+
		"\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8\u02da"+
		"\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0\u02f2"+
		"\u02f4\u02f6\u02f8\u02fa\2n\4\2\u0104\u0104\u0120\u0120\6\2\3\3&&\u00d4"+
		"\u00d4\u018d\u018d\4\2\5\5\u0144\u0144\4\2\u0112\u0112\u0144\u0144\4\2"+
		"\u0093\u0093\u0190\u0190\4\2\u0193\u0193\u0197\u0197\7\2\u00b1\u00b1\u00e2"+
		"\u00e2\u00ff\u00ff\u0101\u0101\u0170\u0170\7\2\67\67qq\u00db\u00db\u00fc"+
		"\u00fc\u01af\u01af\4\2\u011f\u011f\u01bc\u01bc\t\2\u016f\u016f\u0172\u0172"+
		"\u01bf\u01bf\u01c7\u01c7\u020d\u020d\u0217\u0217\u0219\u0219\6\2\u0102"+
		"\u0102\u0123\u0123\u01df\u01df\u021f\u021f\t\2\u0107\u0107\u015f\u0160"+
		"\u016f\u016f\u0172\u0172\u01cc\u01cc\u01db\u01db\u0210\u0210\4\2\u016f"+
		"\u016f\u0210\u0210\7\2\u009f\u009f\u018f\u018f\u01a3\u01a3\u01b3\u01b3"+
		"\u0268\u0268\4\2\4\4\u00c8\u00c8\4\2\u0170\u0170\u0268\u0268\4\2^^\u00ba"+
		"\u00ba\4\2\7\7II\4\2DDKK\4\2\r\r\u00cd\u00cd\4\2\"\"\u00a0\u00a0\4\2\u0089"+
		"\u0089\u0110\u0110\6\2WW\u01ce\u01ce\u01e8\u01e8\u01ff\u01ff\4\2<<jj\4"+
		"\2==zz\5\2\u0207\u0207\u020a\u020a\u021c\u021c\4\2\u01b1\u01b1\u0242\u0242"+
		"\4\2\u00d3\u00d3\u01b6\u01b6\4\2\t\t\24\24\4\2II\u00e6\u00e6\6\2((CC\u00ac"+
		"\u00ac\u0100\u0100\4\2\7\7\f\f\6\2\u0119\u0119\u01e0\u01e1\u01e6\u01e6"+
		"\u0201\u0201\5\2\n\n^^\u00ba\u00ba\4\2\u00d0\u00d0\u0165\u0165\4\2qq\u01af"+
		"\u01af\4\2\u01e2\u01e2\u0209\u0209\4\2\u01c5\u01c5\u01f3\u01f3\4\2\u0202"+
		"\u0203\u020f\u020f\4\2\u0085\u0085\u00e5\u00e5\4\2,,FF\6\2>>xx\u0112\u0112"+
		"\u01ab\u01ab\4\2\13\13yy\4\2\u00f1\u00f1\u0144\u0144\4\2\u0096\u0096\u00a1"+
		"\u00a1\4\2\u0193\u0193\u01b1\u01b1\5\2^^\u00ba\u00ba\u00d6\u00d6\7\2_"+
		"_\u00bb\u00bb\u00d7\u00d7\u00e2\u00e2\u00fd\u00fd\6\2\n\n^^\u00ba\u00ba"+
		"\u00d6\u00d6\4\2  XX\4\2\u0187\u0187\u0242\u0242\6\2\u0135\u0135\u013f"+
		"\u013f\u0197\u0197\u01b8\u01b8\4\2\u00ff\u00ff\u0101\u0101\5\2\u0128\u0128"+
		"\u0137\u0137\u0146\u0146\3\2\u024d\u024e\4\2\u01fe\u01fe\u0208\u0208\7"+
		"\2>>xx\u0112\u0112\u0170\u0170\u01ab\u01ab\4\2^^\u00a2\u00a2\5\2\7\7I"+
		"I\u00e6\u00e6\5\2\61\61\u0102\u0102\u015a\u015a\4\2\33\33\u0085\u0085"+
		"\4\2aa\u0085\u0085\5\2\u00bf\u00bf\u01d7\u01d7\u01e5\u01e5\4\2RRoo\n\2"+
		"%%++;;``hhrr\u00f5\u00f5\u0170\u0170\5\2\u00ad\u00ad\u00ea\u00ea\u0160"+
		"\u0160\4\2>>\u0112\u0112\5\2\u025b\u025c\u025e\u025e\u0267\u0267\4\2\u0187"+
		"\u0187\u01a1\u01a1\5\2\u0112\u0112\u01ab\u01ab\u021d\u021d\4\2\32\32\u00d0"+
		"\u00d0\3\2\3\u0126\3\2\u0127\u0158\3\2\u0159\u016f\3\2\u0170\u01bc\3\2"+
		"\u01bd\u0240\3\2\u012b\u012c\3\2\u024f\u0251\4\2\u0178\u0178\u01ae\u01ae"+
		"\4\2\u0242\u0242\u0246\u024a\3\2\u0268\u0269\5\2\u018f\u018f\u01a3\u01a3"+
		"\u01b3\u01b3\4\2\u014a\u014a\u017b\u017b\3\2\u0259\u025a\7\2\u012d\u012d"+
		"\u0133\u0134\u0139\u0139\u013d\u013d\u014f\u014f\5\2\u0179\u0179\u019c"+
		"\u019c\u01b2\u01b2\5\2\u0170\u0170\u0174\u0174\u01ad\u01ad\5\2cc\u00bf"+
		"\u00bf\u00d8\u00d8\4\2[[\u00b3\u00b3\4\2\u0170\u0170\u018a\u018a\4\2\u00d8"+
		"\u00d8\u0144\u0144\4\2ZZ\u0097\u0097\5\2\u018e\u018e\u0199\u0199\u01b4"+
		"\u01b4\5\2\u00ff\u00ff\u0101\u0101\u0110\u0110\5\2\u0160\u0160\u0166\u0166"+
		"\u016c\u016c\4\2ZZ\u0080\u0080\4\2\u00fc\u00fc\u01b6\u01b6\4\2--\u00cf"+
		"\u00cf\5\2\u0187\u0187\u0242\u0242\u025a\u025a\4\2\u0163\u0163\u0191\u0191"+
		"\4\2\63\63\u023e\u023e\4\2\u0242\u0242\u025a\u025a\4\2&&\u00d4\u00d4\7"+
		"\2\u0224\u0224\u022b\u022b\u022f\u0230\u0233\u0233\u023f\u023f\n\2\u00db"+
		"\u00db\u017e\u017f\u01af\u01af\u0223\u0223\u0225\u0225\u0229\u0229\u022e"+
		"\u022e\u0232\u0232\4\2--\u022a\u022a\3\2\u0227\u0228\3\2\u0262\u0265\2"+
		"\u2328\2\u02fd\3\2\2\2\4\u0316\3\2\2\2\6\u031a\3\2\2\2\b\u031f\3\2\2\2"+
		"\n\u032a\3\2\2\2\f\u033a\3\2\2\2\16\u0342\3\2\2\2\20\u0348\3\2\2\2\22"+
		"\u034c\3\2\2\2\24\u0387\3\2\2\2\26\u039c\3\2\2\2\30\u039e\3\2\2\2\32\u03bf"+
		"\3\2\2\2\34\u03dc\3\2\2\2\36\u045c\3\2\2\2 \u045e\3\2\2\2\"\u047c\3\2"+
		"\2\2$\u047e\3\2\2\2&\u048d\3\2\2\2(\u04a3\3\2\2\2*\u04ba\3\2\2\2,\u04bf"+
		"\3\2\2\2.\u04c1\3\2\2\2\60\u04c9\3\2\2\2\62\u04ee\3\2\2\2\64\u04f0\3\2"+
		"\2\2\66\u04f4\3\2\2\28\u04f8\3\2\2\2:\u050b\3\2\2\2<\u0510\3\2\2\2>\u0540"+
		"\3\2\2\2@\u0542\3\2\2\2B\u0565\3\2\2\2D\u0573\3\2\2\2F\u058a\3\2\2\2H"+
		"\u05a8\3\2\2\2J\u05ae\3\2\2\2L\u05bd\3\2\2\2N\u0619\3\2\2\2P\u061b\3\2"+
		"\2\2R\u0620\3\2\2\2T\u0629\3\2\2\2V\u06c6\3\2\2\2X\u06f4\3\2\2\2Z\u06f6"+
		"\3\2\2\2\\\u0718\3\2\2\2^\u071a\3\2\2\2`\u071c\3\2\2\2b\u0720\3\2\2\2"+
		"d\u072a\3\2\2\2f\u072e\3\2\2\2h\u0769\3\2\2\2j\u076b\3\2\2\2l\u0787\3"+
		"\2\2\2n\u07b0\3\2\2\2p\u07b2\3\2\2\2r\u07c5\3\2\2\2t\u0804\3\2\2\2v\u0808"+
		"\3\2\2\2x\u081f\3\2\2\2z\u0837\3\2\2\2|\u0843\3\2\2\2~\u0845\3\2\2\2\u0080"+
		"\u086b\3\2\2\2\u0082\u0884\3\2\2\2\u0084\u0891\3\2\2\2\u0086\u0893\3\2"+
		"\2\2\u0088\u08c5\3\2\2\2\u008a\u08e9\3\2\2\2\u008c\u08eb\3\2\2\2\u008e"+
		"\u08ef\3\2\2\2\u0090\u08f3\3\2\2\2\u0092\u0908\3\2\2\2\u0094\u0917\3\2"+
		"\2\2\u0096\u091b\3\2\2\2\u0098\u0927\3\2\2\2\u009a\u092a\3\2\2\2\u009c"+
		"\u0949\3\2\2\2\u009e\u095f\3\2\2\2\u00a0\u097e\3\2\2\2\u00a2\u0a15\3\2"+
		"\2\2\u00a4\u0a24\3\2\2\2\u00a6\u0a38\3\2\2\2\u00a8\u0a49\3\2\2\2\u00aa"+
		"\u0a4d\3\2\2\2\u00ac\u0a5c\3\2\2\2\u00ae\u0a73\3\2\2\2\u00b0\u0a96\3\2"+
		"\2\2\u00b2\u0aab\3\2\2\2\u00b4\u0abd\3\2\2\2\u00b6\u0abf\3\2\2\2\u00b8"+
		"\u0ace\3\2\2\2\u00ba\u0ada\3\2\2\2\u00bc\u0aec\3\2\2\2\u00be\u0b12\3\2"+
		"\2\2\u00c0\u0b14\3\2\2\2\u00c2\u0b1f\3\2\2\2\u00c4\u0b21\3\2\2\2\u00c6"+
		"\u0b42\3\2\2\2\u00c8\u0b59\3\2\2\2\u00ca\u0b5b\3\2\2\2\u00cc\u0b62\3\2"+
		"\2\2\u00ce\u0b79\3\2\2\2\u00d0\u0b7b\3\2\2\2\u00d2\u0b8c\3\2\2\2\u00d4"+
		"\u0b8e\3\2\2\2\u00d6\u0b92\3\2\2\2\u00d8\u0b9f\3\2\2\2\u00da\u0bac\3\2"+
		"\2\2\u00dc\u0bbb\3\2\2\2\u00de\u0bca\3\2\2\2\u00e0\u0bd9\3\2\2\2\u00e2"+
		"\u0bee\3\2\2\2\u00e4\u0bf6\3\2\2\2\u00e6\u0c07\3\2\2\2\u00e8\u0c0b\3\2"+
		"\2\2\u00ea\u0c22\3\2\2\2\u00ec\u0c2b\3\2\2\2\u00ee\u0c39\3\2\2\2\u00f0"+
		"\u0c3b\3\2\2\2\u00f2\u0c49\3\2\2\2\u00f4\u0c4b\3\2\2\2\u00f6\u0c61\3\2"+
		"\2\2\u00f8\u0c73\3\2\2\2\u00fa\u0c91\3\2\2\2\u00fc\u0c94\3\2\2\2\u00fe"+
		"\u0ca4\3\2\2\2\u0100\u0cb9\3\2\2\2\u0102\u0cbd\3\2\2\2\u0104\u0d0f\3\2"+
		"\2\2\u0106\u0d11\3\2\2\2\u0108\u0d39\3\2\2\2\u010a\u0d58\3\2\2\2\u010c"+
		"\u0d63\3\2\2\2\u010e\u0d67\3\2\2\2\u0110\u0d90\3\2\2\2\u0112\u0d93\3\2"+
		"\2\2\u0114\u0dd1\3\2\2\2\u0116\u0dd8\3\2\2\2\u0118\u0df3\3\2\2\2\u011a"+
		"\u0e26\3\2\2\2\u011c\u0e28\3\2\2\2\u011e\u0e30\3\2\2\2\u0120\u0e35\3\2"+
		"\2\2\u0122\u0e4d\3\2\2\2\u0124\u0e64\3\2\2\2\u0126\u0e66\3\2\2\2\u0128"+
		"\u0e6d\3\2\2\2\u012a\u0e72\3\2\2\2\u012c\u0e7b\3\2\2\2\u012e\u0e7f\3\2"+
		"\2\2\u0130\u0e87\3\2\2\2\u0132\u0f13\3\2\2\2\u0134\u0f42\3\2\2\2\u0136"+
		"\u0f46\3\2\2\2\u0138\u0f54\3\2\2\2\u013a\u0f5b\3\2\2\2\u013c\u0f5f\3\2"+
		"\2\2\u013e\u0f6b\3\2\2\2\u0140\u0f6e\3\2\2\2\u0142\u0f71\3\2\2\2\u0144"+
		"\u0f84\3\2\2\2\u0146\u0f97\3\2\2\2\u0148\u0f9a\3\2\2\2\u014a\u0fa4\3\2"+
		"\2\2\u014c\u0fa7\3\2\2\2\u014e\u0fd8\3\2\2\2\u0150\u0fdb\3\2\2\2\u0152"+
		"\u0fe0\3\2\2\2\u0154\u0fe4\3\2\2\2\u0156\u0fe6\3\2\2\2\u0158\u0ff1\3\2"+
		"\2\2\u015a\u102f\3\2\2\2\u015c\u1031\3\2\2\2\u015e\u103b\3\2\2\2\u0160"+
		"\u1044\3\2\2\2\u0162\u105b\3\2\2\2\u0164\u105d\3\2\2\2\u0166\u1074\3\2"+
		"\2\2\u0168\u1080\3\2\2\2\u016a\u1086\3\2\2\2\u016c\u10a2\3\2\2\2\u016e"+
		"\u10c2\3\2\2\2\u0170\u10c4\3\2\2\2\u0172\u10d4\3\2\2\2\u0174\u10df\3\2"+
		"\2\2\u0176\u1124\3\2\2\2\u0178\u1126\3\2\2\2\u017a\u1130\3\2\2\2\u017c"+
		"\u113c\3\2\2\2\u017e\u1147\3\2\2\2\u0180\u114e\3\2\2\2\u0182\u1162\3\2"+
		"\2\2\u0184\u1174\3\2\2\2\u0186\u1177\3\2\2\2\u0188\u117d\3\2\2\2\u018a"+
		"\u1188\3\2\2\2\u018c\u1190\3\2\2\2\u018e\u1192\3\2\2\2\u0190\u11ac\3\2"+
		"\2\2\u0192\u11c8\3\2\2\2\u0194\u120e\3\2\2\2\u0196\u1212\3\2\2\2\u0198"+
		"\u123c\3\2\2\2\u019a\u123f\3\2\2\2\u019c\u1243\3\2\2\2\u019e\u124e\3\2"+
		"\2\2\u01a0\u125a\3\2\2\2\u01a2\u1277\3\2\2\2\u01a4\u129b\3\2\2\2\u01a6"+
		"\u12aa\3\2\2\2\u01a8\u12ac\3\2\2\2\u01aa\u12b8\3\2\2\2\u01ac\u12d3\3\2"+
		"\2\2\u01ae\u12d5\3\2\2\2\u01b0\u12e0\3\2\2\2\u01b2\u12f0\3\2\2\2\u01b4"+
		"\u12f5\3\2\2\2\u01b6\u12f9\3\2\2\2\u01b8\u1305\3\2\2\2\u01ba\u1309\3\2"+
		"\2\2\u01bc\u130e\3\2\2\2\u01be\u131b\3\2\2\2\u01c0\u1323\3\2\2\2\u01c2"+
		"\u1325\3\2\2\2\u01c4\u133a\3\2\2\2\u01c6\u1348\3\2\2\2\u01c8\u134a\3\2"+
		"\2\2\u01ca\u1358\3\2\2\2\u01cc\u135d\3\2\2\2\u01ce\u13b3\3\2\2\2\u01d0"+
		"\u13c2\3\2\2\2\u01d2\u13d1\3\2\2\2\u01d4\u13d3\3\2\2\2\u01d6\u13d6\3\2"+
		"\2\2\u01d8\u13e3\3\2\2\2\u01da\u13e7\3\2\2\2\u01dc\u13ef\3\2\2\2\u01de"+
		"\u13fa\3\2\2\2\u01e0\u13ff\3\2\2\2\u01e2\u1404\3\2\2\2\u01e4\u140c\3\2"+
		"\2\2\u01e6\u140e\3\2\2\2\u01e8\u1417\3\2\2\2\u01ea\u141f\3\2\2\2\u01ec"+
		"\u1421\3\2\2\2\u01ee\u1428\3\2\2\2\u01f0\u142c\3\2\2\2\u01f2\u143b\3\2"+
		"\2\2\u01f4\u143d\3\2\2\2\u01f6\u143f\3\2\2\2\u01f8\u1449\3\2\2\2\u01fa"+
		"\u144b\3\2\2\2\u01fc\u1450\3\2\2\2\u01fe\u1455\3\2\2\2\u0200\u1464\3\2"+
		"\2\2\u0202\u1475\3\2\2\2\u0204\u1477\3\2\2\2\u0206\u1482\3\2\2\2\u0208"+
		"\u148c\3\2\2\2\u020a\u14c0\3\2\2\2\u020c\u14c5\3\2\2\2\u020e\u14ce\3\2"+
		"\2\2\u0210\u14d3\3\2\2\2\u0212\u14d8\3\2\2\2\u0214\u14df\3\2\2\2\u0216"+
		"\u14e1\3\2\2\2\u0218\u14e3\3\2\2\2\u021a\u14e5\3\2\2\2\u021c\u14e7\3\2"+
		"\2\2\u021e\u14e9\3\2\2\2\u0220\u14f0\3\2\2\2\u0222\u14f2\3\2\2\2\u0224"+
		"\u14fb\3\2\2\2\u0226\u1509\3\2\2\2\u0228\u156a\3\2\2\2\u022a\u1587\3\2"+
		"\2\2\u022c\u1589\3\2\2\2\u022e\u158d\3\2\2\2\u0230\u15af\3\2\2\2\u0232"+
		"\u1652\3\2\2\2\u0234\u1694\3\2\2\2\u0236\u169e\3\2\2\2\u0238\u16a0\3\2"+
		"\2\2\u023a\u16be\3\2\2\2\u023c\u16c3\3\2\2\2\u023e\u16c5\3\2\2\2\u0240"+
		"\u16c7\3\2\2\2\u0242\u16c9\3\2\2\2\u0244\u16dc\3\2\2\2\u0246\u170e\3\2"+
		"\2\2\u0248\u1711\3\2\2\2\u024a\u171a\3\2\2\2\u024c\u1735\3\2\2\2\u024e"+
		"\u1737\3\2\2\2\u0250\u1747\3\2\2\2\u0252\u175a\3\2\2\2\u0254\u179f\3\2"+
		"\2\2\u0256\u1842\3\2\2\2\u0258\u1844\3\2\2\2\u025a\u1858\3\2\2\2\u025c"+
		"\u1860\3\2\2\2\u025e\u1866\3\2\2\2\u0260\u1875\3\2\2\2\u0262\u188e\3\2"+
		"\2\2\u0264\u1890\3\2\2\2\u0266\u1895\3\2\2\2\u0268\u18b1\3\2\2\2\u026a"+
		"\u18b3\3\2\2\2\u026c\u18bc\3\2\2\2\u026e\u18be\3\2\2\2\u0270\u18c3\3\2"+
		"\2\2\u0272\u18fa\3\2\2\2\u0274\u18fd\3\2\2\2\u0276\u1906\3\2\2\2\u0278"+
		"\u1912\3\2\2\2\u027a\u1931\3\2\2\2\u027c\u194b\3\2\2\2\u027e\u1994\3\2"+
		"\2\2\u0280\u1996\3\2\2\2\u0282\u199e\3\2\2\2\u0284\u19a4\3\2\2\2\u0286"+
		"\u19b5\3\2\2\2\u0288\u1a53\3\2\2\2\u028a\u1a56\3\2\2\2\u028c\u1a66\3\2"+
		"\2\2\u028e\u1a74\3\2\2\2\u0290\u1a78\3\2\2\2\u0292\u1a8d\3\2\2\2\u0294"+
		"\u1a8f\3\2\2\2\u0296\u1a98\3\2\2\2\u0298\u1aa9\3\2\2\2\u029a\u1aad\3\2"+
		"\2\2\u029c\u1ab5\3\2\2\2\u029e\u1ac3\3\2\2\2\u02a0\u1ac5\3\2\2\2\u02a2"+
		"\u1ac9\3\2\2\2\u02a4\u1aeb\3\2\2\2\u02a6\u1af6\3\2\2\2\u02a8\u1b01\3\2"+
		"\2\2\u02aa\u1b14\3\2\2\2\u02ac\u1b17\3\2\2\2\u02ae\u1b41\3\2\2\2\u02b0"+
		"\u1b99\3\2\2\2\u02b2\u1b9b\3\2\2\2\u02b4\u1ba1\3\2\2\2\u02b6\u1bb4\3\2"+
		"\2\2\u02b8\u1bcc\3\2\2\2\u02ba\u1bce\3\2\2\2\u02bc\u1bd5\3\2\2\2\u02be"+
		"\u1be3\3\2\2\2\u02c0\u1be7\3\2\2\2\u02c2\u1bf1\3\2\2\2\u02c4\u1c1c\3\2"+
		"\2\2\u02c6\u1c1e\3\2\2\2\u02c8\u1c32\3\2\2\2\u02ca\u1c34\3\2\2\2\u02cc"+
		"\u1c43\3\2\2\2\u02ce\u1c4f\3\2\2\2\u02d0\u1c62\3\2\2\2\u02d2\u1c66\3\2"+
		"\2\2\u02d4\u1c71\3\2\2\2\u02d6\u1c84\3\2\2\2\u02d8\u1cba\3\2\2\2\u02da"+
		"\u1cc0\3\2\2\2\u02dc\u1ccb\3\2\2\2\u02de\u1cf9\3\2\2\2\u02e0\u1cfe\3\2"+
		"\2\2\u02e2\u1d0b\3\2\2\2\u02e4\u1d35\3\2\2\2\u02e6\u1d37\3\2\2\2\u02e8"+
		"\u1d39\3\2\2\2\u02ea\u1d47\3\2\2\2\u02ec\u1d53\3\2\2\2\u02ee\u1d6a\3\2"+
		"\2\2\u02f0\u1d9b\3\2\2\2\u02f2\u1d9d\3\2\2\2\u02f4\u1da6\3\2\2\2\u02f6"+
		"\u1dbb\3\2\2\2\u02f8\u1dda\3\2\2\2\u02fa\u1ddc\3\2\2\2\u02fc\u02fe\7\u0273"+
		"\2\2\u02fd\u02fc\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe\u0302\3\2\2\2\u02ff"+
		"\u0301\7\u0244\2\2\u0300\u02ff\3\2\2\2\u0301\u0304\3\2\2\2\u0302\u0300"+
		"\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0311\3\2\2\2\u0304\u0302\3\2\2\2\u0305"+
		"\u0310\5\u02fa\u017e\2\u0306\u030d\5\16\b\2\u0307\u0309\7\u0244\2\2\u0308"+
		"\u0307\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u0308\3\2\2\2\u030a\u030b\3\2"+
		"\2\2\u030b\u030e\3\2\2\2\u030c\u030e\7\2\2\3\u030d\u0308\3\2\2\2\u030d"+
		"\u030c\3\2\2\2\u030e\u0310\3\2\2\2\u030f\u0305\3\2\2\2\u030f\u0306\3\2"+
		"\2\2\u0310\u0313\3\2\2\2\u0311\u030f\3\2\2\2\u0311\u0312\3\2\2\2\u0312"+
		"\u0314\3\2\2\2\u0313\u0311\3\2\2\2\u0314\u0315\7\2\2\3\u0315\3\3\2\2\2"+
		"\u0316\u0317\5\u026a\u0136\2\u0317\u0318\7\2\2\3\u0318\5\3\2\2\2\u0319"+
		"\u031b\5\u026a\u0136\2\u031a\u0319\3\2\2\2\u031a\u031b\3\2\2\2\u031b\u031c"+
		"\3\2\2\2\u031c\u031d\5\u0142\u00a2\2\u031d\u031e\7\2\2\3\u031e\7\3\2\2"+
		"\2\u031f\u0324\5\u0230\u0119\2\u0320\u0321\7\u0245\2\2\u0321\u0323\5\u0230"+
		"\u0119\2\u0322\u0320\3\2\2\2\u0323\u0326\3\2\2\2\u0324\u0322\3\2\2\2\u0324"+
		"\u0325\3\2\2\2\u0325\u0327\3\2\2\2\u0326\u0324\3\2\2\2\u0327\u0328\7\2"+
		"\2\3\u0328\t\3\2\2\2\u0329\u032b\5\u02ba\u015e\2\u032a\u0329\3\2\2\2\u032a"+
		"\u032b\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032e\5\u02bc\u015f\2\u032d\u032f"+
		"\7\u0244\2\2\u032e\u032d\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0330\3\2\2"+
		"\2\u0330\u0331\7\2\2\3\u0331\13\3\2\2\2\u0332\u0334\5\u02ba\u015e\2\u0333"+
		"\u0332\3\2\2\2\u0333\u0334\3\2\2\2\u0334\u0335\3\2\2\2\u0335\u0336\5\u02bc"+
		"\u015f\2\u0336\u0337\7\u0244\2\2\u0337\u0339\3\2\2\2\u0338\u0333\3\2\2"+
		"\2\u0339\u033c\3\2\2\2\u033a\u0338\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033d"+
		"\3\2\2\2\u033c\u033a\3\2\2\2\u033d\u033e\7\2\2\3\u033e\r\3\2\2\2\u033f"+
		"\u0343\5\20\t\2\u0340\u0343\5<\37\2\u0341\u0343\5\22\n\2\u0342\u033f\3"+
		"\2\2\2\u0342\u0340\3\2\2\2\u0342\u0341\3\2\2\2\u0343\17\3\2\2\2\u0344"+
		"\u0349\5\u0270\u0139\2\u0345\u0349\5\u02a2\u0152\2\u0346\u0349\5\u02ae"+
		"\u0158\2\u0347\u0349\5\u02ac\u0157\2\u0348\u0344\3\2\2\2\u0348\u0345\3"+
		"\2\2\2\u0348\u0346\3\2\2\2\u0348\u0347\3\2\2\2\u0349\21\3\2\2\2\u034a"+
		"\u034d\5\24\13\2\u034b\u034d\5\34\17\2\u034c\u034a\3\2\2\2\u034c\u034b"+
		"\3\2\2\2\u034d\23\3\2\2\2\u034e\u034f\7\u00f0\2\2\u034f\u0355\7\u0104"+
		"\2\2\u0350\u0352\7\25\2\2\u0351\u0353\t\2\2\2\u0352\u0351\3\2\2\2\u0352"+
		"\u0353\3\2\2\2\u0353\u0355\3\2\2\2\u0354\u034e\3\2\2\2\u0354\u0350\3\2"+
		"\2\2\u0355\u035e\3\2\2\2\u0356\u035b\5\26\f\2\u0357\u0358\7\u0245\2\2"+
		"\u0358\u035a\5\26\f\2\u0359\u0357\3\2\2\2\u035a\u035d\3\2\2\2\u035b\u0359"+
		"\3\2\2\2\u035b\u035c\3\2\2\2\u035c\u035f\3\2\2\2\u035d\u035b\3\2\2\2\u035e"+
		"\u0356\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0388\3\2\2\2\u0360\u0362\t\3"+
		"\2\2\u0361\u0363\t\2\2\2\u0362\u0361\3\2\2\2\u0362\u0363\3\2\2\2\u0363"+
		"\u0369\3\2\2\2\u0364\u0366\7\u0173\2\2\u0365\u0367\7\u0098\2\2\u0366\u0365"+
		"\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u036a\7\35\2\2"+
		"\u0369\u0364\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0388\3\2\2\2\u036b\u036c"+
		"\7&\2\2\u036c\u0370\7\u00b5\2\2\u036d\u036e\7\u00b4\2\2\u036e\u0370\7"+
		"\u0104\2\2\u036f\u036b\3\2\2\2\u036f\u036d\3\2\2\2\u0370\u0371\3\2\2\2"+
		"\u0371\u0388\7\u026d\2\2\u0372\u0378\7\u00da\2\2\u0373\u0375\7\u00c9\2"+
		"\2\u0374\u0376\7\u00da\2\2\u0375\u0374\3\2\2\2\u0375\u0376\3\2\2\2\u0376"+
		"\u0378\3\2\2\2\u0377\u0372\3\2\2\2\u0377\u0373\3\2\2\2\u0378\u0379\3\2"+
		"\2\2\u0379\u0388\5\u0210\u0109\2\u037a\u037b\7\u00d4\2\2\u037b\u037c\7"+
		"\u00b5\2\2\u037c\u0388\7\u026d\2\2\u037d\u037f\7\u00d4\2\2\u037e\u0380"+
		"\t\2\2\2\u037f\u037e\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0381\3\2\2\2\u0381"+
		"\u0383\7\u01b1\2\2\u0382\u0384\7\u00da\2\2\u0383\u0382\3\2\2\2\u0383\u0384"+
		"\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0388\5\u0210\u0109\2\u0386\u0388\5"+
		"\30\r\2\u0387\u0354\3\2\2\2\u0387\u0360\3\2\2\2\u0387\u036f\3\2\2\2\u0387"+
		"\u0377\3\2\2\2\u0387\u037a\3\2\2\2\u0387\u037d\3\2\2\2\u0387\u0386\3\2"+
		"\2\2\u0388\25\3\2\2\2\u0389\u038a\7{\2\2\u038a\u0392\7\u0082\2\2\u038b"+
		"\u0393\7\u00e3\2\2\u038c\u038d\7\u00cb\2\2\u038d\u0393\7\u00c0\2\2\u038e"+
		"\u038f\7\u00c0\2\2\u038f\u0393\7\'\2\2\u0390\u0391\7\u00c0\2\2\u0391\u0393"+
		"\7\u010c\2\2\u0392\u038b\3\2\2\2\u0392\u038c\3\2\2\2\u0392\u038e\3\2\2"+
		"\2\u0392\u0390\3\2\2\2\u0393\u039d\3\2\2\2\u0394\u0395\7\u00c0\2\2\u0395"+
		"\u039d\7\u0122\2\2\u0396\u0397\7\u00c0\2\2\u0397\u039d\7\u01a4\2\2\u0398"+
		"\u039a\7\u01a0\2\2\u0399\u0398\3\2\2\2\u0399\u039a\3\2\2\2\u039a\u039b"+
		"\3\2\2\2\u039b\u039d\7\u0188\2\2\u039c\u0389\3\2\2\2\u039c\u0394\3\2\2"+
		"\2\u039c\u0396\3\2\2\2\u039c\u0399\3\2\2\2\u039d\27\3\2\2\2\u039e\u03a0"+
		"\7\u0087\2\2\u039f\u03a1\7\u01af\2\2\u03a0\u039f\3\2\2\2\u03a0\u03a1\3"+
		"\2\2\2\u03a1\u03a2\3\2\2\2\u03a2\u03a7\5\u0186\u00c4\2\u03a3\u03a4\7\u0245"+
		"\2\2\u03a4\u03a6\5\u0186\u00c4\2\u03a5\u03a3\3\2\2\2\u03a6\u03a9\3\2\2"+
		"\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8\3\2\2\2\u03a8\u03ae\3\2\2\2\u03a9\u03a7"+
		"\3\2\2\2\u03aa\u03ab\7\u0197\2\2\u03ab\u03ac\5\32\16\2\u03ac\u03ad\7\u0091"+
		"\2\2\u03ad\u03af\3\2\2\2\u03ae\u03aa\3\2\2\2\u03ae\u03af\3\2\2\2\u03af"+
		"\u03b1\3\2\2\2\u03b0\u03b2\7\u009b\2\2\u03b1\u03b0\3\2\2\2\u03b1\u03b2"+
		"\3\2\2\2\u03b2\31\3\2\2\2\u03b3\u03b4\t\4\2\2\u03b4\u03c0\7\u00e8\2\2"+
		"\u03b5\u03b6\7\u0144\2\2\u03b6\u03c0\7S\2\2\u03b7\u03b8\7\u00e8\2\2\u03b8"+
		"\u03b9\t\5\2\2\u03b9\u03c0\7S\2\2\u03ba\u03c0\7\u00e8\2\2\u03bb\u03bd"+
		"\7\5\2\2\u03bc\u03bb\3\2\2\2\u03bc\u03bd\3\2\2\2\u03bd\u03be\3\2\2\2\u03be"+
		"\u03c0\7S\2\2\u03bf\u03b3\3\2\2\2\u03bf\u03b5\3\2\2\2\u03bf\u03b7\3\2"+
		"\2\2\u03bf\u03ba\3\2\2\2\u03bf\u03bc\3\2\2\2\u03c0\33\3\2\2\2\u03c1\u03dd"+
		"\5\36\20\2\u03c2\u03c3\7\u0113\2\2\u03c3\u03c5\5\62\32\2\u03c4\u03c6\5"+
		".\30\2\u03c5\u03c4\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03dd\3\2\2\2\u03c7"+
		"\u03c9\t\6\2\2\u03c8\u03ca\5:\36\2\u03c9\u03c8\3\2\2\2\u03c9\u03ca\3\2"+
		"\2\2\u03ca\u03cc\3\2\2\2\u03cb\u03cd\t\7\2\2\u03cc\u03cb\3\2\2\2\u03cc"+
		"\u03cd\3\2\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03dd\5\u0210\u0109\2\u03cf\u03d2"+
		"\7!\2\2\u03d0\u03d3\5\u0210\u0109\2\u03d1\u03d3\7\u0170\2\2\u03d2\u03d0"+
		"\3\2\2\2\u03d2\u03d1\3\2\2\2\u03d3\u03dd\3\2\2\2\u03d4\u03d5\7\30\2\2"+
		"\u03d5\u03dd\5\u0246\u0124\2\u03d6\u03d7\7E\2\2\u03d7\u03dd\t\b\2\2\u03d8"+
		"\u03dd\5&\24\2\u03d9\u03dd\5$\23\2\u03da\u03dd\5 \21\2\u03db\u03dd\5("+
		"\25\2\u03dc\u03c1\3\2\2\2\u03dc\u03c2\3\2\2\2\u03dc\u03c7\3\2\2\2\u03dc"+
		"\u03cf\3\2\2\2\u03dc\u03d4\3\2\2\2\u03dc\u03d6\3\2\2\2\u03dc\u03d8\3\2"+
		"\2\2\u03dc\u03d9\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc\u03db\3\2\2\2\u03dd"+
		"\35\3\2\2\2\u03de\u045d\5\u02b8\u015d\2\u03df\u03e0\7\u0083\2\2\u03e0"+
		"\u045d\5\u0210\u0109\2\u03e1\u03e4\7\u010f\2\2\u03e2\u03e5\5\u0210\u0109"+
		"\2\u03e3\u03e5\7\u024f\2\2\u03e4\u03e2\3\2\2\2\u03e4\u03e3\3\2\2\2\u03e5"+
		"\u045d\3\2\2\2\u03e6\u03f3\7\u0172\2\2\u03e7\u03e8\7\u024b\2\2\u03e8\u03ed"+
		"\5\66\34\2\u03e9\u03ea\7\u0245\2\2\u03ea\u03ec\5\66\34\2\u03eb\u03e9\3"+
		"\2\2\2\u03ec\u03ef\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee"+
		"\u03f0\3\2\2\2\u03ef\u03ed\3";
	private static final String _serializedATNSegment1 =
		"\2\2\2\u03f0\u03f1\7\u024c\2\2\u03f1\u03f4\3\2\2\2\u03f2\u03f4\7\u016f"+
		"\2\2\u03f3\u03e7\3\2\2\2\u03f3\u03f2\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4"+
		"\u03f6\3\2\2\2\u03f5\u03f7\5.\30\2\u03f6\u03f5\3\2\2\2\u03f6\u03f7\3\2"+
		"\2\2\u03f7\u045d\3\2\2\2\u03f8\u03fa\7\"\2\2\u03f9\u03fb\7\u016f\2\2\u03fa"+
		"\u03f9\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u0405\3\2\2\2\u03fc\u03fd\5\u0210"+
		"\u0109\2\u03fd\u03fe\7\u01a3\2\2\u03fe\u03ff\5\u026a\u0136\2\u03ff\u0406"+
		"\3\2\2\2\u0400\u0403\5\u026a\u0136\2\u0401\u0402\7\u01b7\2\2\u0402\u0404"+
		"\5\u0210\u0109\2\u0403\u0401\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0406\3"+
		"\2\2\2\u0405\u03fc\3\2\2\2\u0405\u0400\3\2\2\2\u0405\u0406\3\2\2\2\u0406"+
		"\u045d\3\2\2\2\u0407\u045d\7\37\2\2\u0408\u0409\7\u0084\2\2\u0409\u045d"+
		"\7\u026d\2\2\u040a\u040c\79\2\2\u040b\u040d\7\u00b4\2\2\u040c\u040b\3"+
		"\2\2\2\u040c\u040d\3\2\2\2\u040d\u0410\3\2\2\2\u040e\u0411\5\u0210\u0109"+
		"\2\u040f\u0411\7\u0170\2\2\u0410\u040e\3\2\2\2\u0410\u040f\3\2\2\2\u0411"+
		"\u045d\3\2\2\2\u0412\u0416\7\u00c7\2\2\u0413\u0414\7\u024b\2\2\u0414\u0415"+
		"\7\u016f\2\2\u0415\u0417\7\u024c\2\2\u0416\u0413\3\2\2\2\u0416\u0417\3"+
		"\2\2\2\u0417\u0418\3\2\2\2\u0418\u041a\t\t\2\2\u0419\u041b\7\u015c\2\2"+
		"\u041a\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u045d"+
		"\5\u026a\u0136\2\u041d\u0429\7\u00ce\2\2\u041e\u041f\5\u0210\u0109\2\u041f"+
		"\u0420\7\u0253\2\2\u0420\u0422\3\2\2\2\u0421\u041e\3\2\2\2\u0421\u0422"+
		"\3\2\2\2\u0422\u0423\3\2\2\2\u0423\u042a\5\u0210\u0109\2\u0424\u0425\7"+
		"\u0148\2\2\u0425\u042a\7\u0126\2\2\u0426\u0427\7\u00e5\2\2\u0427\u042a"+
		"\7\u0159\2\2\u0428\u042a\7\u0170\2\2\u0429\u0421\3\2\2\2\u0429\u0424\3"+
		"\2\2\2\u0429\u0426\3\2\2\2\u0429\u0428\3\2\2\2\u042a\u045d\3\2\2\2\u042b"+
		"\u042c\7\u00c6\2\2\u042c\u042d\7\u008c\2\2\u042d\u042f\7\u011a\2\2\u042e"+
		"\u0430\7\u015c\2\2\u042f\u042e\3\2\2\2\u042f\u0430\3\2\2\2\u0430\u0431"+
		"\3\2\2\2\u0431\u0437\5\u026a\u0136\2\u0432\u0434\7\u01bc\2\2\u0433\u0435"+
		"\7\u0098\2\2\u0434\u0433\3\2\2\2\u0434\u0435\3\2\2\2\u0435\u0436\3\2\2"+
		"\2\u0436\u0438\7\66\2\2\u0437\u0432\3\2\2\2\u0437\u0438\3\2\2\2\u0438"+
		"\u045d\3\2\2\2\u0439\u043a\7\u00b4\2\2\u043a\u0446\5\u0210\u0109\2\u043b"+
		"\u043c\7\u024b\2\2\u043c\u0441\5\u0224\u0113\2\u043d\u043e\7\u0245\2\2"+
		"\u043e\u0440\5\u0224\u0113\2\u043f\u043d\3\2\2\2\u0440\u0443\3\2\2\2\u0441"+
		"\u043f\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0444\3\2\2\2\u0443\u0441\3\2"+
		"\2\2\u0444\u0445\7\u024c\2\2\u0445\u0447\3\2\2\2\u0446\u043b\3\2\2\2\u0446"+
		"\u0447\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0449\7\u0176\2\2\u0449\u044a"+
		"\5\20\t\2\u044a\u045d\3\2\2\2\u044b\u044c\7\u00c1\2\2\u044c\u044d\7\u00a9"+
		"\2\2\u044d\u044e\7\26\2\2\u044e\u0453\5,\27\2\u044f\u0450\7\u0245\2\2"+
		"\u0450\u0452\5,\27\2\u0451\u044f\3\2\2\2\u0452\u0455\3\2\2\2\u0453\u0451"+
		"\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0456\3\2\2\2\u0455\u0453\3\2\2\2\u0456"+
		"\u0457\7\u01b1\2\2\u0457\u0458\5,\27\2\u0458\u045d\3\2\2\2\u0459\u045d"+
		"\5\u018c\u00c7\2\u045a\u045d\5\u02b4\u015b\2\u045b\u045d\5\u02b2\u015a"+
		"\2\u045c\u03de\3\2\2\2\u045c\u03df\3\2\2\2\u045c\u03e1\3\2\2\2\u045c\u03e6"+
		"\3\2\2\2\u045c\u03f8\3\2\2\2\u045c\u0407\3\2\2\2\u045c\u0408\3\2\2\2\u045c"+
		"\u040a\3\2\2\2\u045c\u0412\3\2\2\2\u045c\u041d\3\2\2\2\u045c\u042b\3\2"+
		"\2\2\u045c\u0439\3\2\2\2\u045c\u044b\3\2\2\2\u045c\u0459\3\2\2\2\u045c"+
		"\u045a\3\2\2\2\u045c\u045b\3\2\2\2\u045d\37\3\2\2\2\u045e\u0470\7U\2\2"+
		"\u045f\u0461\7\u0172\2\2\u0460\u045f\3\2\2\2\u0460\u0461\3\2\2\2\u0461"+
		"\u0463\3\2\2\2\u0462\u0464\7\u016f\2\2\u0463\u0462\3\2\2\2\u0463\u0464"+
		"\3\2\2\2\u0464\u0471\3\2\2\2\u0465\u0466\7\u024b\2\2\u0466\u046b\5*\26"+
		"\2\u0467\u0468\7\u0245\2\2\u0468\u046a\5*\26\2\u0469\u0467\3\2\2\2\u046a"+
		"\u046d\3\2\2\2\u046b\u0469\3\2\2\2\u046b\u046c\3\2\2\2\u046c\u046e\3\2"+
		"\2\2\u046d\u046b\3\2\2\2\u046e\u046f\7\u024c\2\2\u046f\u0471\3\2\2\2\u0470"+
		"\u0460\3\2\2\2\u0470\u0465\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0473\5\""+
		"\22\2\u0473!\3\2\2\2\u0474\u047d\5\20\t\2\u0475\u047d\5$\23\2\u0476\u047d"+
		"\5&\24\2\u0477\u047a\7\u0180\2\2\u0478\u047b\5\u01a2\u00d2\2\u0479\u047b"+
		"\5\u0196\u00cc\2\u047a\u0478\3\2\2\2\u047a\u0479\3\2\2\2\u047b\u047d\3"+
		"\2\2\2\u047c\u0474\3\2\2\2\u047c\u0475\3\2\2\2\u047c\u0476\3\2\2\2\u047c"+
		"\u0477\3\2\2\2\u047d#\3\2\2\2\u047e\u047f\7T\2\2\u047f\u048b\5\u0210\u0109"+
		"\2\u0480\u0481\7\u024b\2\2\u0481\u0486\5\u0230\u0119\2\u0482\u0483\7\u0245"+
		"\2\2\u0483\u0485\5\u0230\u0119\2\u0484\u0482\3\2\2\2\u0485\u0488\3\2\2"+
		"\2\u0486\u0484\3\2\2\2\u0486\u0487\3\2\2\2\u0487\u0489\3\2\2\2\u0488\u0486"+
		"\3\2\2\2\u0489\u048a\7\u024c\2\2\u048a\u048c\3\2\2\2\u048b\u0480\3\2\2"+
		"\2\u048b\u048c\3\2\2\2\u048c%\3\2\2\2\u048d\u048e\7:\2\2\u048e\u0490\5"+
		"\u0210\u0109\2\u048f\u0491\7\u015a\2\2\u0490\u048f\3\2\2\2\u0490\u0491"+
		"\3\2\2\2\u0491\u0493\3\2\2\2\u0492\u0494\7w\2\2\u0493\u0492\3\2\2\2\u0493"+
		"\u0494\3\2\2\2\u0494\u0499\3\2\2\2\u0495\u0497\7\u0098\2\2\u0496\u0495"+
		"\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0498\3\2\2\2\u0498\u049a\7\u00dd\2"+
		"\2\u0499\u0496\3\2\2\2\u0499\u049a\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049e"+
		"\7\64\2\2\u049c\u049d\t\n\2\2\u049d\u049f\7f\2\2\u049e\u049c\3\2\2\2\u049e"+
		"\u049f\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a1\7\u0191\2\2\u04a1\u04a2"+
		"\5\u0270\u0139\2\u04a2\'\3\2\2\2\u04a3\u04b2\7\u00e9\2\2\u04a4\u04a5\5"+
		"\u0210\u0109\2\u04a5\u04a6\7\u0253\2\2\u04a6\u04a8\3\2\2\2\u04a7\u04a4"+
		"\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04b3\5\u0210\u0109"+
		"\2\u04aa\u04b3\7\u0170\2\2\u04ab\u04ac\7\u0148\2\2\u04ac\u04b3\7\u0126"+
		"\2\2\u04ad\u04ae\7\u0104\2\2\u04ae\u04af\7{\2\2\u04af\u04b3\7\u0082\2"+
		"\2\u04b0\u04b1\7\u00e5\2\2\u04b1\u04b3\7\u0159\2\2\u04b2\u04a7\3\2\2\2"+
		"\u04b2\u04aa\3\2\2\2\u04b2\u04ab\3\2\2\2\u04b2\u04ad\3\2\2\2\u04b2\u04b0"+
		"\3\2\2\2\u04b3)\3\2\2\2\u04b4\u04b6\t\13\2\2\u04b5\u04b7\58\35\2\u04b6"+
		"\u04b5\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04bb\3\2\2\2\u04b8\u04b9\7\u01d5"+
		"\2\2\u04b9\u04bb\t\f\2\2\u04ba\u04b4\3\2\2\2\u04ba\u04b8\3\2\2\2\u04bb"+
		"+\3\2\2\2\u04bc\u04c0\5\u0210\u0109\2\u04bd\u04c0\7\u0186\2\2\u04be\u04c0"+
		"\7\u01ac\2\2\u04bf\u04bc\3\2\2\2\u04bf\u04bd\3\2\2\2\u04bf\u04be\3\2\2"+
		"\2\u04c0-\3\2\2\2\u04c1\u04c6\5\60\31\2\u04c2\u04c3\7\u0245\2\2\u04c3"+
		"\u04c5\5\60\31\2\u04c4\u04c2\3\2\2\2\u04c5\u04c8\3\2\2\2\u04c6\u04c4\3"+
		"\2\2\2\u04c6\u04c7\3\2\2\2\u04c7/\3\2\2\2\u04c8\u04c6\3\2\2\2\u04c9\u04d5"+
		"\5\u026a\u0136\2\u04ca\u04cb\7\u024b\2\2\u04cb\u04d0\5\u0210\u0109\2\u04cc"+
		"\u04cd\7\u0245\2\2\u04cd\u04cf\5\u0210\u0109\2\u04ce\u04cc\3\2\2\2\u04cf"+
		"\u04d2\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d0\u04d1\3\2\2\2\u04d1\u04d3\3\2"+
		"\2\2\u04d2\u04d0\3\2\2\2\u04d3\u04d4\7\u024c\2\2\u04d4\u04d6\3\2\2\2\u04d5"+
		"\u04ca\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\61\3\2\2\2\u04d7\u04d8\7\u024b"+
		"\2\2\u04d8\u04dd\5\64\33\2\u04d9\u04da\7\u0245\2\2\u04da\u04dc\5\64\33"+
		"\2\u04db\u04d9\3\2\2\2\u04dc\u04df\3\2\2\2\u04dd\u04db\3\2\2\2\u04dd\u04de"+
		"\3\2\2\2\u04de\u04e0\3\2\2\2\u04df\u04dd\3\2\2\2\u04e0\u04e1\7\u024c\2"+
		"\2\u04e1\u04ef\3\2\2\2\u04e2\u04e4\7\u0160\2\2\u04e3\u04e2\3\2\2\2\u04e3"+
		"\u04e4\3\2\2\2\u04e4\u04e6\3\2\2\2\u04e5\u04e7\7\u015f\2\2\u04e6\u04e5"+
		"\3\2\2\2\u04e6\u04e7\3\2\2\2\u04e7\u04e9\3\2\2\2\u04e8\u04ea\7\u016f\2"+
		"\2\u04e9\u04e8\3\2\2\2\u04e9\u04ea\3\2\2\2\u04ea\u04ec\3\2\2\2\u04eb\u04ed"+
		"\7\u0172\2\2\u04ec\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ef\3\2\2"+
		"\2\u04ee\u04d7\3\2\2\2\u04ee\u04e3\3\2\2\2\u04ef\63\3\2\2\2\u04f0\u04f2"+
		"\t\r\2\2\u04f1\u04f3\58\35\2\u04f2\u04f1\3\2\2\2\u04f2\u04f3\3\2\2\2\u04f3"+
		"\65\3\2\2\2\u04f4\u04f6\t\16\2\2\u04f5\u04f7\58\35\2\u04f6\u04f5\3\2\2"+
		"\2\u04f6\u04f7\3\2\2\2\u04f7\67\3\2\2\2\u04f8\u04f9\t\17\2\2\u04f99\3"+
		"\2\2\2\u04fa\u050c\7\u0097\2\2\u04fb\u050c\7\u00b7\2\2\u04fc\u050c\7Z"+
		"\2\2\u04fd\u050c\7\u0080\2\2\u04fe\u0500\t\20\2\2\u04ff\u04fe\3\2\2\2"+
		"\u04ff\u0500\3\2\2\2\u0500\u0501\3\2\2\2\u0501\u050c\5\u0150\u00a9\2\u0502"+
		"\u050c\7\u0170\2\2\u0503\u0505\7]\2\2\u0504\u0506\t\21\2\2\u0505\u0504"+
		"\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u050c\3\2\2\2\u0507\u0509\7\23\2\2"+
		"\u0508\u050a\t\21\2\2\u0509\u0508\3\2\2\2\u0509\u050a\3\2\2\2\u050a\u050c"+
		"\3\2\2\2\u050b\u04fa\3\2\2\2\u050b\u04fb\3\2\2\2\u050b\u04fc\3\2\2\2\u050b"+
		"\u04fd\3\2\2\2\u050b\u04ff\3\2\2\2\u050b\u0502\3\2\2\2\u050b\u0503\3\2"+
		"\2\2\u050b\u0507\3\2\2\2\u050c;\3\2\2\2\u050d\u0511\5> \2\u050e\u0511"+
		"\5@!\2\u050f\u0511\5B\"\2\u0510\u050d\3\2\2\2\u0510\u050e\3\2\2\2\u0510"+
		"\u050f\3\2\2\2\u0511=\3\2\2\2\u0512\u0539\7\u0180\2\2\u0513\u053a\5\u01a0"+
		"\u00d1\2\u0514\u053a\5\u01a4\u00d3\2\u0515\u053a\5\u0090I\2\u0516\u053a"+
		"\5\u009aN\2\u0517\u053a\5\u0112\u008a\2\u0518\u053a\5\u010e\u0088\2\u0519"+
		"\u053a\5\u0136\u009c\2\u051a\u053a\5\u014c\u00a7\2\u051b\u053a\5\u0156"+
		"\u00ac\2\u051c\u053a\5\u0196\u00cc\2\u051d\u053a\5\u009cO\2\u051e\u053a"+
		"\5\u009eP\2\u051f\u053a\5\u00a0Q\2\u0520\u053a\5\u00a2R\2\u0521\u053a"+
		"\5\u00a4S\2\u0522\u053a\5\u00aaV\2\u0523\u053a\5\u00acW\2\u0524\u053a"+
		"\5\u00aeX\2\u0525\u053a\5\u00a6T\2\u0526\u053a\5\u00b0Y\2\u0527\u053a"+
		"\5\u00b6\\\2\u0528\u053a\5\u00e0q\2\u0529\u053a\5\u00e2r\2\u052a\u053a"+
		"\5\u00e4s\2\u052b\u053a\5\u00f0y\2\u052c\u053a\5\u00f4{\2\u052d\u053a"+
		"\5\u00f6|\2\u052e\u053a\5\u00f8}\2\u052f\u053a\5\u00fc\177\2\u0530\u053a"+
		"\5\u0102\u0082\2\u0531\u053a\5\u01a2\u00d2\2\u0532\u053a\5\u0158\u00ad"+
		"\2\u0533\u053a\5\u015e\u00b0\2\u0534\u053a\5\u0164\u00b3\2\u0535\u053a"+
		"\5\u0168\u00b5\2\u0536\u053a\5\u0174\u00bb\2\u0537\u053a\5\u017c\u00bf"+
		"\2\u0538\u053a\5\u0180\u00c1\2\u0539\u0513\3\2\2\2\u0539\u0514\3\2\2\2"+
		"\u0539\u0515\3\2\2\2\u0539\u0516\3\2\2\2\u0539\u0517\3\2\2\2\u0539\u0518"+
		"\3\2\2\2\u0539\u0519\3\2\2\2\u0539\u051a\3\2\2\2\u0539\u051b\3\2\2\2\u0539"+
		"\u051c\3\2\2\2\u0539\u051d\3\2\2\2\u0539\u051e\3\2\2\2\u0539\u051f\3\2"+
		"\2\2\u0539\u0520\3\2\2\2\u0539\u0521\3\2\2\2\u0539\u0522\3\2\2\2\u0539"+
		"\u0523\3\2\2\2\u0539\u0524\3\2\2\2\u0539\u0525\3\2\2\2\u0539\u0526\3\2"+
		"\2\2\u0539\u0527\3\2\2\2\u0539\u0528\3\2\2\2\u0539\u0529\3\2\2\2\u0539"+
		"\u052a\3\2\2\2\u0539\u052b\3\2\2\2\u0539\u052c\3\2\2\2\u0539\u052d\3\2"+
		"\2\2\u0539\u052e\3\2\2\2\u0539\u052f\3\2\2\2\u0539\u0530\3\2\2\2\u0539"+
		"\u0531\3\2\2\2\u0539\u0532\3\2\2\2\u0539\u0533\3\2\2\2\u0539\u0534\3\2"+
		"\2\2\u0539\u0535\3\2\2\2\u0539\u0536\3\2\2\2\u0539\u0537\3\2\2\2\u0539"+
		"\u0538\3\2\2\2\u053a\u0541\3\2\2\2\u053b\u0541\5\u012e\u0098\2\u053c\u0541"+
		"\5\u0118\u008d\2\u053d\u0541\5\u0106\u0084\2\u053e\u0541\5D#\2\u053f\u0541"+
		"\5\u0130\u0099\2\u0540\u0512\3\2\2\2\u0540\u053b\3\2\2\2\u0540\u053c\3"+
		"\2\2\2\u0540\u053d\3\2\2\2\u0540\u053e\3\2\2\2\u0540\u053f\3\2\2\2\u0541"+
		"?\3\2\2\2\u0542\u0563\7\f\2\2\u0543\u0564\5F$\2\u0544\u0564\5P)\2\u0545"+
		"\u0564\5R*\2\u0546\u0564\5T+\2\u0547\u0564\5l\67\2\u0548\u0564\5p9\2\u0549"+
		"\u0564\5v<\2\u054a\u0564\5x=\2\u054b\u0564\5z>\2\u054c\u0564\5~@\2\u054d"+
		"\u0564\5\u0080A\2\u054e\u0564\5\u0082B\2\u054f\u0564\5\u0086D\2\u0550"+
		"\u0564\5\u00b2Z\2\u0551\u0564\5\u00b8]\2\u0552\u0564\5\u00ba^\2\u0553"+
		"\u0564\5\u00c0a\2\u0554\u0564\5\u00c4c\2\u0555\u0564\5\u00caf\2\u0556"+
		"\u0564\5\u00ccg\2\u0557\u0564\5\u00d0i\2\u0558\u0564\5H%\2\u0559\u0564"+
		"\5J&\2\u055a\u0564\5\u015a\u00ae\2\u055b\u0564\5\u0160\u00b1\2\u055c\u0564"+
		"\5\u0188\u00c5\2\u055d\u0564\5\u018a\u00c6\2\u055e\u0564\5\u016a\u00b6"+
		"\2\u055f\u0564\5\u0178\u00bd\2\u0560\u0564\5\u017e\u00c0\2\u0561\u0564"+
		"\5\u0182\u00c2\2\u0562\u0564\5\u00c6d\2\u0563\u0543\3\2\2\2\u0563\u0544"+
		"\3\2\2\2\u0563\u0545\3\2\2\2\u0563\u0546\3\2\2\2\u0563\u0547\3\2\2\2\u0563"+
		"\u0548\3\2\2\2\u0563\u0549\3\2\2\2\u0563\u054a\3\2\2\2\u0563\u054b\3\2"+
		"\2\2\u0563\u054c\3\2\2\2\u0563\u054d\3\2\2\2\u0563\u054e\3\2\2\2\u0563"+
		"\u054f\3\2\2\2\u0563\u0550\3\2\2\2\u0563\u0551\3\2\2\2\u0563\u0552\3\2"+
		"\2\2\u0563\u0553\3\2\2\2\u0563\u0554\3\2\2\2\u0563\u0555\3\2\2\2\u0563"+
		"\u0556\3\2\2\2\u0563\u0557\3\2\2\2\u0563\u0558\3\2\2\2\u0563\u0559\3\2"+
		"\2\2\u0563\u055a\3\2\2\2\u0563\u055b\3\2\2\2\u0563\u055c\3\2\2\2\u0563"+
		"\u055d\3\2\2\2\u0563\u055e\3\2\2\2\u0563\u055f\3\2\2\2\u0563\u0560\3\2"+
		"\2\2\u0563\u0561\3\2\2\2\u0563\u0562\3\2\2\2\u0564A\3\2\2\2\u0565\u0571"+
		"\7I\2\2\u0566\u0572\5\u0204\u0103\2\u0567\u0572\5\u0206\u0104\2\u0568"+
		"\u0572\5\u0208\u0105\2\u0569\u0572\5\u015c\u00af\2\u056a\u0572\5\u0166"+
		"\u00b4\2\u056b\u0572\5\u0172\u00ba\2\u056c\u0572\5\u017a\u00be\2\u056d"+
		"\u0572\5\u020a\u0106\2\u056e\u0572\5\u00d6l\2\u056f\u0572\5\u00d8m\2\u0570"+
		"\u0572\5\u00dan\2\u0571\u0566\3\2\2\2\u0571\u0567\3\2\2\2\u0571\u0568"+
		"\3\2\2\2\u0571\u0569\3\2\2\2\u0571\u056a\3\2\2\2\u0571\u056b\3\2\2\2\u0571"+
		"\u056c\3\2\2\2\u0571\u056d\3\2\2\2\u0571\u056e\3\2\2\2\u0571\u056f\3\2"+
		"\2\2\u0571\u0570\3\2\2\2\u0572C\3\2\2\2\u0573\u0574\7m\2\2\u0574\u0575"+
		"\7\u0192\2\2\u0575\u0576\7\u00db\2\2\u0576\u0580\5\u0210\u0109\2\u0577"+
		"\u0578\7\u019d\2\2\u0578\u057b\7\u01b1\2\2\u0579\u057b\7\u018e\2\2\u057a"+
		"\u0577\3\2\2\2\u057a\u0579\3\2\2\2\u057b\u057c\3\2\2\2\u057c\u057d\7\u024b"+
		"\2\2\u057d\u057e\5\u02b6\u015c\2\u057e\u057f\7\u024c\2\2\u057f\u0581\3"+
		"\2\2\2\u0580\u057a\3\2\2\2\u0580\u0581\3\2\2\2\u0581\u0582\3\2\2\2\u0582"+
		"\u0583\7\u0193\2\2\u0583\u0584\7\u00e4\2\2\u0584\u0585\5\u0210\u0109\2"+
		"\u0585\u0586\7\u019a\2\2\u0586\u0588\5\u0210\u0109\2\u0587\u0589\5\u01bc"+
		"\u00df\2\u0588\u0587\3\2\2\2\u0588\u0589\3\2\2\2\u0589E\3\2\2\2\u058a"+
		"\u058c\t\22\2\2\u058b\u058d\5\u0140\u00a1\2\u058c\u058b\3\2\2\2\u058c"+
		"\u058d\3\2\2\2\u058d\u05a6\3\2\2\2\u058e\u059a\5h\65\2\u058f\u0597\7\u00ce"+
		"\2\2\u0590\u0591\5\u0210\u0109\2\u0591\u0592\7\u0253\2\2\u0592\u0594\3"+
		"\2\2\2\u0593\u0590\3\2\2\2\u0593\u0594\3\2\2\2\u0594\u0595\3\2\2\2\u0595"+
		"\u0598\5\u0210\u0109\2\u0596\u0598\7\u0170\2\2\u0597\u0593\3\2\2\2\u0597"+
		"\u0596\3\2\2\2\u0598\u059a\3\2\2\2\u0599\u058e\3\2\2\2\u0599\u058f\3\2"+
		"\2\2\u059a\u059b\3\2\2\2\u059b\u0599\3\2\2\2\u059b\u059c\3\2\2\2\u059c"+
		"\u059e\3\2\2\2\u059d\u059f\7\u00d0\2\2\u059e\u059d\3\2\2\2\u059e\u059f"+
		"\3\2\2\2\u059f\u05a7\3\2\2\2\u05a0\u05a7\5\u01ee\u00f8\2\u05a1\u05a7\5"+
		"\u01f0\u00f9\2\u05a2\u05a3\7A\2\2\u05a3\u05a4\7\u01a3\2\2\u05a4\u05a5"+
		"\7V\2\2\u05a5\u05a7\5\u0210\u0109\2\u05a6\u0599\3\2\2\2\u05a6\u05a0\3"+
		"\2\2\2\u05a6\u05a1\3\2\2\2\u05a6\u05a2\3\2\2\2\u05a7G\3\2\2\2\u05a8\u05a9"+
		"\7\n\2\2\u05a9\u05ac\5\u0140\u00a1\2\u05aa\u05ad\5\u01ee\u00f8\2\u05ab"+
		"\u05ad\5\u01f0\u00f9\2\u05ac\u05aa\3\2\2\2\u05ac\u05ab\3\2\2\2\u05adI"+
		"\3\2\2\2\u05ae\u05af\7V\2\2\u05af\u05b0\5\u0210\u0109\2\u05b0\u05b1\5"+
		"L\'\2\u05b1K\3\2\2\2\u05b2\u05be\5\u01f0\u00f9\2\u05b3\u05b9\7\u0112\2"+
		"\2\u05b4\u05b7\7\u01b1\2\2\u05b5\u05b8\5\u0210\u0109\2\u05b6\u05b8\5\u0146"+
		"\u00a4\2\u05b7\u05b5\3\2\2\2\u05b7\u05b6\3\2\2\2\u05b8\u05ba\3\2\2\2\u05b9"+
		"\u05b4\3\2\2\2\u05b9\u05ba\3\2\2\2\u05ba\u05be\3\2\2\2\u05bb\u05bc\t\23"+
		"\2\2\u05bc\u05be\5N(\2\u05bd\u05b2\3\2\2\2\u05bd\u05b3\3\2\2\2\u05bd\u05bb"+
		"\3\2\2\2\u05beM\3\2\2\2\u05bf\u05c0\7\5\2\2\u05c0\u05c1\7\u008e\2\2\u05c1"+
		"\u061a\5\u026a\u0136\2\u05c2\u05c3\7\n\2\2\u05c3\u061a\5\u0140\u00a1\2"+
		"\u05c4\u05c5\7\u017b\2\2\u05c5\u05c6\7\u024b\2\2\u05c6\u05c7\5\u026a\u0136"+
		"\2\u05c7\u05c8\7\u0176\2\2\u05c8\u05c9\5\u026a\u0136\2\u05c9\u05ca\7\u024c"+
		"\2\2\u05ca\u061a\3\2\2\2\u05cb\u05cc\7\u015b\2\2\u05cc\u061a\5\u0210\u0109"+
		"\2\u05cd\u05ce\7.\2\2\u05ce\u061a\5\u0210\u0109\2\u05cf\u05d0\7G\2\2\u05d0"+
		"\u061a\5\u026a\u0136\2\u05d1\u05d2\7P\2\2\u05d2\u05d3\7\u0106\2\2\u05d3"+
		"\u061a\5\u0210\u0109\2\u05d4\u05d5\7\u0192\2\2\u05d5\u05d6\7\66\2\2\u05d6"+
		"\u05d7\7\u0121\2\2\u05d7\u061a\5\u0210\u0109\2\u05d8\u05d9\7\u0192\2\2"+
		"\u05d9\u05da\7\u01af\2\2\u05da\u061a\5\u026a\u0136\2\u05db\u05dc\7^\2"+
		"\2\u05dc\u061a\5\u0140\u00a1\2\u05dd\u05df\7\u008c\2\2\u05de\u05dd\3\2"+
		"\2\2\u05de\u05df\3\2\2\2\u05df\u05e0\3\2\2\2\u05e0\u05e1\7\u011a\2\2\u05e1"+
		"\u061a\5\u026a\u0136\2\u05e2\u05e3\7\u00a2\2\2\u05e3\u061a\5\u00fe\u0080"+
		"\2\u05e4\u05e5\7\u00a2\2\2\u05e5\u05e6\7 \2\2\u05e6\u05e7\5\u026a\u0136"+
		"\2\u05e7\u05e8\7\u01b7\2\2\u05e8\u05e9\5\u0210\u0109\2\u05e9\u061a\3\2"+
		"\2\2\u05ea\u05eb\7\u00a2\2\2\u05eb\u05ec\7X\2\2\u05ec\u05ed\5\u026a\u0136"+
		"\2\u05ed\u05ee\7\u01b7\2\2\u05ee\u05ef\5\u0210\u0109\2\u05ef\u061a\3\2"+
		"\2\2\u05f0\u05f2\7\u00b9\2\2\u05f1\u05f0\3\2\2\2\u05f1\u05f2\3\2\2\2\u05f2"+
		"\u05f3\3\2\2\2\u05f3\u05f4\7~\2\2\u05f4\u061a\5\u0210\u0109\2\u05f5\u05f6"+
		"\7\u00ba\2\2\u05f6\u061a\5\u0140\u00a1\2\u05f7\u05f8\7\u00d6\2\2\u05f8"+
		"\u061a\5\u0140\u00a1\2\u05f9\u05fa\7\u00db\2\2\u05fa\u061a\5\u0210\u0109"+
		"\2\u05fb\u05fc\7\u00e1\2\2\u05fc\u061a\5\u026a\u0136\2\u05fd\u05fe\7\u00e4"+
		"\2\2\u05fe\u061a\5\u0210\u0109\2\u05ff\u0600\7\u01af\2\2\u0600\u061a\5"+
		"\u026a\u0136\2\u0601\u0602\7\u0102\2\2\u0602\u0603\7\u00de\2\2\u0603\u0604"+
		"\7(\2\2\u0604\u061a\5\u026a\u0136\2\u0605\u0606\7\u0102\2\2\u0606\u0607"+
		"\7\u00de\2\2\u0607\u0608\7C\2\2\u0608\u061a\5\u026a\u0136\2\u0609\u060a"+
		"\7\u0102\2\2\u060a\u060b\7\u00de\2\2\u060b\u060c\7\u00ac\2\2\u060c\u061a"+
		"\5\u026a\u0136\2\u060d\u060e\7\u0102\2\2\u060e\u060f\7\u00de\2\2\u060f"+
		"\u0610\7\u0100\2\2\u0610\u061a\5\u026a\u0136\2\u0611\u0612\7\u0105\2\2"+
		"\u0612\u0613\7\u0191\2\2\u0613\u0614\5\u0210\u0109\2\u0614\u0615\7~\2"+
		"\2\u0615\u0616\5\u0210\u0109\2\u0616\u061a\3\2\2\2\u0617\u0618\7\u0109"+
		"\2\2\u0618\u061a\5\u026a\u0136\2\u0619\u05bf\3\2\2\2\u0619\u05c2\3\2\2"+
		"\2\u0619\u05c4\3\2\2\2\u0619\u05cb\3\2\2\2\u0619\u05cd\3\2\2\2\u0619\u05cf"+
		"\3\2\2\2\u0619\u05d1\3\2\2\2\u0619\u05d4\3\2\2\2\u0619\u05d8\3\2\2\2\u0619"+
		"\u05db\3\2\2\2\u0619\u05de\3\2\2\2\u0619\u05e2\3\2\2\2\u0619\u05e4\3\2"+
		"\2\2\u0619\u05ea\3\2\2\2\u0619\u05f1\3\2\2\2\u0619\u05f5\3\2\2\2\u0619"+
		"\u05f7\3\2\2\2\u0619\u05f9\3\2\2\2\u0619\u05fb\3\2\2\2\u0619\u05fd\3\2"+
		"\2\2\u0619\u05ff\3\2\2\2\u0619\u0601\3\2\2\2\u0619\u0605\3\2\2\2\u0619"+
		"\u0609\3\2\2\2\u0619\u060d\3\2\2\2\u0619\u0611\3\2\2\2\u0619\u0617\3\2"+
		"\2\2\u061aO\3\2\2\2\u061b\u061c\7\u00db\2\2\u061c\u061d\5\u0210\u0109"+
		"\2\u061d\u061e\5\u01ee\u00f8\2\u061eQ\3\2\2\2\u061f\u0621\7\u00b9\2\2"+
		"\u0620\u061f\3\2\2\2\u0620\u0621\3\2\2\2\u0621\u0622\3\2\2\2\u0622\u0623"+
		"\7~\2\2\u0623\u0626\5\u0210\u0109\2\u0624\u0627\5\u01ee\u00f8\2\u0625"+
		"\u0627\5\u01ec\u00f7\2\u0626\u0624\3\2\2\2\u0626\u0625\3\2\2\2\u0627S"+
		"\3\2\2\2\u0628\u062a\7\u0192\2\2\u0629\u0628\3\2\2\2\u0629\u062a\3\2\2"+
		"\2\u062a\u062b\3\2\2\2\u062b\u062d\7\u01af\2\2\u062c\u062e\5\u0198\u00cd"+
		"\2\u062d\u062c\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u0630\3\2\2\2\u062f\u0631"+
		"\7\u01a4\2\2\u0630\u062f\3\2\2\2\u0630\u0631\3\2\2\2\u0631\u0632\3\2\2"+
		"\2\u0632\u0634\5\u026a\u0136\2\u0633\u0635\7\u024f\2\2\u0634\u0633\3\2"+
		"\2\2\u0634\u0635\3\2\2\2\u0635\u0656\3\2\2\2\u0636\u063b\5V,\2\u0637\u0638"+
		"\7\u0245\2\2\u0638\u063a\5V,\2\u0639\u0637\3\2\2\2\u063a\u063d\3\2\2\2"+
		"\u063b\u0639\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u0657\3\2\2\2\u063d\u063b"+
		"\3\2\2\2\u063e\u0640\7\u00ca\2\2\u063f\u0641\7\u017e\2\2\u0640\u063f\3"+
		"\2\2\2\u0640\u0641\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u0643\5\u0210\u0109"+
		"\2\u0643\u0644\7\u01b1\2\2\u0644\u0645\5\u0210\u0109\2\u0645\u0657\3\2"+
		"\2\2\u0646\u0657\5\u01f0\u00f9\2\u0647\u0657\5\u01ee\u00f8\2\u0648\u0649"+
		"\7\u00ca\2\2\u0649\u064a\7\u017f\2\2\u064a\u064b\5\u0210\u0109\2\u064b"+
		"\u064c\7\u01b1\2\2\u064c\u064d\5\u0210\u0109\2\u064d\u0657\3\2\2\2\u064e"+
		"\u064f\7\21\2\2\u064f\u0650\7\u00ae\2\2\u0650\u0651\5\u026a\u0136\2\u0651"+
		"\u0652\5\u01aa\u00d6\2\u0652\u0657\3\2\2\2\u0653\u0654\7B\2\2\u0654\u0655"+
		"\7\u00ae\2\2\u0655\u0657\5\u026a\u0136\2\u0656\u0636\3\2\2\2\u0656\u063e"+
		"\3\2\2\2\u0656\u0646\3\2\2\2\u0656\u0647\3\2\2\2\u0656\u0648\3\2\2\2\u0656"+
		"\u064e\3\2\2\2\u0656\u0653\3\2\2\2\u0657U\3\2\2\2\u0658\u065a\7\7\2\2"+
		"\u0659\u065b\7\u017e\2\2\u065a\u0659\3\2\2\2\u065a\u065b\3\2\2\2\u065b"+
		"\u065d\3\2\2\2\u065c\u065e\5\u019a\u00ce\2\u065d\u065c\3\2\2\2\u065d\u065e"+
		"\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u06c7\5\u01c8\u00e5\2\u0660\u0662\7"+
		"I\2\2\u0661\u0663\7\u017e\2\2\u0662\u0661\3\2\2\2\u0662\u0663\3\2\2\2"+
		"\u0663\u0665\3\2\2\2\u0664\u0666\5\u0198\u00cd\2\u0665\u0664\3\2\2\2\u0665"+
		"\u0666\3\2\2\2\u0666\u0667\3\2\2\2\u0667\u0669\5\u0210\u0109\2\u0668\u066a"+
		"\5\u01f8\u00fd\2\u0669\u0668\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u06c7\3"+
		"\2\2\2\u066b\u066d\7\f\2\2\u066c\u066e\7\u017e\2\2\u066d\u066c\3\2\2\2"+
		"\u066d\u066e\3\2\2\2\u066e\u066f\3\2\2\2\u066f\u0670\5\u0210\u0109\2\u0670"+
		"\u0671\5X-\2\u0671\u06c7\3\2\2\2\u0672\u0673\7\7\2\2\u0673\u0676\5\u01cc"+
		"\u00e7\2\u0674\u0675\7\u01a0\2\2\u0675\u0677\7\u0114\2\2\u0676\u0674\3"+
		"\2\2\2\u0676\u0677\3\2\2\2\u0677\u06c7\3\2\2\2\u0678\u06c7\5`\61\2\u0679"+
		"\u06c7\5b\62\2\u067a\u067b\t\24\2\2\u067b\u067f\7\u0106\2\2\u067c\u0680"+
		"\5\u026a\u0136\2\u067d\u0680\7\u0170\2\2\u067e\u0680\7\u01b6\2\2\u067f"+
		"\u067c\3\2\2\2\u067f\u067d\3\2\2\2\u067f\u067e\3\2\2\2\u067f\u0680\3\2"+
		"\2\2\u0680\u06c7\3\2\2\2\u0681\u0682\7K\2\2\u0682\u0683\t\25\2\2\u0683"+
		"\u0684\7\u0106\2\2\u0684\u06c7\5\u026a\u0136\2\u0685\u0686\t\24\2\2\u0686"+
		"\u0687\7\u00d9\2\2\u0687\u06c7\5\u026a\u0136\2\u0688\u0689\7K\2\2\u0689"+
		"\u068a\t\25\2\2\u068a\u068b\7\u00d9\2\2\u068b\u06c7\5\u026a\u0136\2\u068c"+
		"\u068d\t\24\2\2\u068d\u068e\7\u0144\2\2\u068e\u068f\7\u0082\2\2\u068f"+
		"\u06c7\7\u00e0\2\2\u0690\u0692\7\u0098\2\2\u0691\u0690\3\2\2\2\u0691\u0692"+
		"\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0694\7\\\2\2\u0694\u0695\7\u0144\2"+
		"\2\u0695\u0696\7\u0082\2\2\u0696\u06c7\7\u00e0\2\2\u0697\u0698\7\"\2\2"+
		"\u0698\u0699\7\u01a3\2\2\u0699\u06c7\5\u026a\u0136\2\u069a\u069b\7\u00e6"+
		"\2\2\u069b\u069c\7\u011f\2\2\u069c\u06c7\t\26\2\2\u069d\u069e\7\u00e6"+
		"\2\2\u069e\u069f\7\u01bc\2\2\u069f\u06c7\7\u00a0\2\2\u06a0\u06a1\7\u00e6"+
		"\2\2\u06a1\u06c7\t\27\2\2\u06a2\u06a3\7\u00e6\2\2\u06a3\u06c7\5\u01dc"+
		"\u00ef\2\u06a4\u06a5\7\u00ce\2\2\u06a5\u06c7\5\u01d8\u00ed\2\u06a6\u06c7"+
		"\5\u01bc\u00df\2\u06a7\u06a8\7s\2\2\u06a8\u06c7\5\u026a\u0136\2\u06a9"+
		"\u06aa\7\u0098\2\2\u06aa\u06ab\7s\2\2\u06ab\u06c7\5\u026a\u0136\2\u06ac"+
		"\u06ad\7\u009e\2\2\u06ad\u06c7\5\u026a\u0136\2\u06ae\u06af\7\u01a0\2\2"+
		"\u06af\u06c7\7\u009e\2\2\u06b0\u06c7\5\u01ec\u00f7\2\u06b1\u06b2\7\u00e6"+
		"\2\2\u06b2\u06c7\5\u01e8\u00f5\2\u06b3\u06b4\7\u00cd\2\2\u06b4\u06bb\7"+
		"h\2\2\u06b5\u06bc\7\u0187\2\2\u06b6\u06bc\7\u0160\2\2\u06b7\u06bc\7\u0099"+
		"\2\2\u06b8\u06b9\7\u01b7\2\2\u06b9\u06ba\7q\2\2\u06ba\u06bc\5\u0210\u0109"+
		"\2\u06bb\u06b5\3\2\2\2\u06bb\u06b6\3\2\2\2\u06bb\u06b7\3\2\2\2\u06bb\u06b8"+
		"\3\2\2\2\u06bc\u06c7\3\2\2\2\u06bd\u06be\7\f\2\2\u06be\u06bf\7\u017f\2"+
		"\2\u06bf\u06c1\5\u0210\u0109\2\u06c0\u06c2\5d\63\2\u06c1\u06c0\3\2\2\2"+
		"\u06c1\u06c2\3\2\2\2\u06c2\u06c4\3\2\2\2\u06c3\u06c5\5f\64\2\u06c4\u06c3"+
		"\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5\u06c7\3\2\2\2\u06c6\u0658\3\2\2\2\u06c6"+
		"\u0660\3\2\2\2\u06c6\u066b\3\2\2\2\u06c6\u0672\3\2\2\2\u06c6\u0678\3\2"+
		"\2\2\u06c6\u0679\3\2\2\2\u06c6\u067a\3\2\2\2\u06c6\u0681\3\2\2\2\u06c6"+
		"\u0685\3\2\2\2\u06c6\u0688\3\2\2\2\u06c6\u068c\3\2\2\2\u06c6\u0691\3\2"+
		"\2\2\u06c6\u0697\3\2\2\2\u06c6\u069a\3\2\2\2\u06c6\u069d\3\2\2\2\u06c6"+
		"\u06a0\3\2\2\2\u06c6\u06a2\3\2\2\2\u06c6\u06a4\3\2\2\2\u06c6\u06a6\3\2"+
		"\2\2\u06c6\u06a7\3\2\2\2\u06c6\u06a9\3\2\2\2\u06c6\u06ac\3\2\2\2\u06c6"+
		"\u06ae\3\2\2\2\u06c6\u06b0\3\2\2\2\u06c6\u06b1\3\2\2\2\u06c6\u06b3\3\2"+
		"\2\2\u06c6\u06bd\3\2\2\2\u06c7W\3\2\2\2\u06c8\u06c9\7\u00e6\2\2\u06c9"+
		"\u06cb\7\66\2\2\u06ca\u06c8\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06cc\3"+
		"\2\2\2\u06cc\u06cd\7\u0109\2\2\u06cd\u06cf\5\u0224\u0113\2\u06ce\u06d0"+
		"\5\u01fa\u00fe\2\u06cf\u06ce\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d3\3"+
		"\2\2\2\u06d1\u06d2\7\u01b7\2\2\u06d2\u06d4\5\u0230\u0119\2\u06d3\u06d1"+
		"\3\2\2\2\u06d3\u06d4\3\2\2\2\u06d4\u06f5\3\2\2\2\u06d5\u06d6\7\7\2\2\u06d6"+
		"\u06f5\5Z.\2\u06d7\u06f5\5\u008cG\2\u06d8\u06f5\5\u008eH\2\u06d9\u06dc"+
		"\7\u00e6\2\2\u06da\u06dc\7I\2\2\u06db\u06d9\3\2\2\2\u06db\u06da\3\2\2"+
		"\2\u06dc\u06dd\3\2\2\2\u06dd\u06de\7\u01a0\2\2\u06de\u06f5\7\u01a1\2\2"+
		"\u06df\u06e0\7I\2\2\u06e0\u06e2\7h\2\2\u06e1\u06e3\5\u0198\u00cd\2\u06e2"+
		"\u06e1\3\2\2\2\u06e2\u06e3\3\2\2\2\u06e3\u06f5\3\2\2\2\u06e4\u06e5\7\u00e6"+
		"\2\2\u06e5\u06f5\5\u01dc\u00ef\2\u06e6\u06e7\7\u00e6\2\2\u06e7\u06e8\7"+
		"\u00f2\2\2\u06e8\u06f5\5\u0150\u00a9\2\u06e9\u06ea\7\u00e6\2\2\u06ea\u06eb"+
		"\7\u00f5\2\2\u06eb\u06f5\5^\60\2\u06ec\u06ed\7\u00ce\2\2\u06ed\u06f5\5"+
		"\u01d8\u00ed\2\u06ee\u06f5\5\u01bc\u00df\2\u06ef\u06f1\5\\/\2\u06f0\u06ef"+
		"\3\2\2\2\u06f1\u06f2\3\2\2\2\u06f2\u06f0\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3"+
		"\u06f5\3\2\2\2\u06f4\u06ca\3\2\2\2\u06f4\u06d5\3\2\2\2\u06f4\u06d7\3\2"+
		"\2\2\u06f4\u06d8\3\2\2\2\u06f4\u06db\3\2\2\2\u06f4\u06df\3\2\2\2\u06f4"+
		"\u06e4\3\2\2\2\u06f4\u06e6\3\2\2\2\u06f4\u06e9\3\2\2\2\u06f4\u06ec\3\2"+
		"\2\2\u06f4\u06ee\3\2\2\2\u06f4\u06f0\3\2\2\2\u06f5Y\3\2\2\2\u06f6\u06fa"+
		"\7`\2\2\u06f7\u06fb\7\r\2\2\u06f8\u06f9\7\26\2\2\u06f9\u06fb\7\u0187\2"+
		"\2\u06fa\u06f7\3\2\2\2\u06fa\u06f8\3\2\2\2\u06fb\u06fc\3\2\2\2\u06fc\u06fd"+
		"\7\u0176\2\2\u06fd\u0706\7h\2\2\u06fe\u0700\7\u024b\2\2\u06ff\u0701\5"+
		"\u014e\u00a8\2\u0700\u06ff\3\2\2\2\u0701\u0702\3\2\2\2\u0702\u0700\3\2"+
		"\2\2\u0702\u0703\3\2\2\2\u0703\u0704\3\2\2\2\u0704\u0705\7\u024c\2\2\u0705"+
		"\u0707\3\2\2\2\u0706\u06fe\3\2\2\2\u0706\u0707\3\2\2\2\u0707[\3\2\2\2"+
		"\u0708\u0709\7\u00e6\2\2\u0709\u070d\7`\2\2\u070a\u070e\7\r\2\2\u070b"+
		"\u070c\7\26\2\2\u070c\u070e\7\u0187\2\2\u070d\u070a\3\2\2\2\u070d\u070b"+
		"\3\2\2\2\u070e\u0719\3\2\2\2\u070f\u0710\7\u00e6\2\2\u0710\u0719\5\u014e"+
		"\u00a8\2\u0711\u0716\7\u00cf\2\2\u0712\u0714\7\u01bc\2\2\u0713\u0712\3"+
		"\2\2\2\u0713\u0714\3\2\2\2\u0714\u0715\3\2\2\2\u0715\u0717\7\u0268\2\2"+
		"\u0716\u0713\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u0719\3\2\2\2\u0718\u0708"+
		"\3\2\2\2\u0718\u070f\3\2\2\2\u0718\u0711\3\2\2\2\u0719]\3\2\2\2\u071a"+
		"\u071b\t\30\2\2\u071b_\3\2\2\2\u071c\u071d\7\u0115\2\2\u071d\u071e\7\u017f"+
		"\2\2\u071e\u071f\5\u026a\u0136\2\u071fa\3\2\2\2\u0720\u0721\7I\2\2\u0721"+
		"\u0723\7\u017f\2\2\u0722\u0724\5\u0198\u00cd\2\u0723\u0722\3\2\2\2\u0723"+
		"\u0724\3\2\2\2\u0724\u0725\3\2\2\2\u0725\u0727\5\u0210\u0109\2\u0726\u0728"+
		"\5\u01f8\u00fd\2\u0727\u0726\3\2\2\2\u0727\u0728\3\2\2\2\u0728c\3\2\2"+
		"\2\u0729\u072b\7\u01a0\2\2\u072a\u0729\3\2\2\2\u072a\u072b\3\2\2\2\u072b"+
		"\u072c\3\2\2\2\u072c\u072d\7\u0188\2\2\u072de\3\2\2\2\u072e\u072f\7\u0198"+
		"\2\2\u072f\u0730\t\31\2\2\u0730g\3\2\2\2\u0731\u0735\7\31\2\2\u0732\u0733"+
		"\7\u00d1\2\2\u0733\u0735\7\u01a1\2\2\u0734\u0731\3\2\2\2\u0734\u0732\3"+
		"\2\2\2\u0735\u0736\3\2\2\2\u0736\u0737\7\u01a3\2\2\u0737\u0738\7\u01a1"+
		"\2\2\u0738\u076a\7v\2\2\u0739\u073a\7\u0105\2\2\u073a\u073f\5\u013a\u009e"+
		"\2\u073b\u073c\7\u0245\2\2\u073c\u073e\5\u013a\u009e\2\u073d\u073b\3\2"+
		"\2\2\u073e\u0741\3\2\2\2\u073f\u073d\3\2\2\2\u073f\u0740\3\2\2\2\u0740"+
		"\u076a\3\2\2\2\u0741\u073f\3\2\2\2\u0742\u076a\7\u00f7\2\2\u0743\u076a"+
		"\7k\2\2\u0744\u076a\7\u011c\2\2\u0745\u076a\7\u00ee\2\2\u0746\u0748\7"+
		"\u01a0\2\2\u0747\u0746\3\2\2\2\u0747\u0748\3\2\2\2\u0748\u0749\3\2\2\2"+
		"\u0749\u076a\7\u0081\2\2\u074a\u074c\7W\2\2\u074b\u074a\3\2\2\2\u074b"+
		"\u074c\3\2\2\2\u074c\u074d\3\2\2\2\u074d\u074e\7\u00e0\2\2\u074e\u076a"+
		"\t\32\2\2\u074f\u0750\7\u00ab\2\2\u0750\u076a\t\33\2\2\u0751\u0752\7\60"+
		"\2\2\u0752\u076a\5\u023e\u0120\2\u0753\u0754\7\u00d8\2\2\u0754\u076a\5"+
		"\u023e\u0120\2\u0755\u0756\7\u00fa\2\2\u0756\u076a\5\u026a\u0136\2\u0757"+
		"\u075b\7\u00e6\2\2\u0758\u0759\5\u0210\u0109\2\u0759\u075a\7\u0253\2\2"+
		"\u075a\u075c\3\2\2\2\u075b\u0758\3\2\2\2\u075b\u075c\3\2\2\2\u075c\u075d"+
		"\3\2\2\2\u075d\u0762\5\u0210\u0109\2\u075e\u075f\t\34\2\2\u075f\u0763"+
		"\5\u010c\u0087\2\u0760\u0761\7\u0193\2\2\u0761\u0763\7\63\2\2\u0762\u075e"+
		"\3\2\2\2\u0762\u0760\3\2\2\2\u0763\u076a\3\2\2\2\u0764\u0765\7~\2\2\u0765"+
		"\u076a\5\u0210\u0109\2\u0766\u076a\7\u01bb\2\2\u0767\u0768\7\u0176\2\2"+
		"\u0768\u076a\5j\66\2\u0769\u0734\3\2\2\2\u0769\u0739\3\2\2\2\u0769\u0742"+
		"\3\2\2\2\u0769\u0743\3\2\2\2\u0769\u0744\3\2\2\2\u0769\u0745\3\2\2\2\u0769"+
		"\u0747\3\2\2\2\u0769\u074b\3\2\2\2\u0769\u074f\3\2\2\2\u0769\u0751\3\2"+
		"\2\2\u0769\u0753\3\2\2\2\u0769\u0755\3\2\2\2\u0769\u0757\3\2\2\2\u0769"+
		"\u0764\3\2\2\2\u0769\u0766\3\2\2\2\u0769\u0767\3\2\2\2\u076ai\3\2\2\2"+
		"\u076b\u076e\5\u0146\u00a4\2\u076c\u076d\7\u0245\2\2\u076d\u076f\5\u0146"+
		"\u00a4\2\u076e\u076c\3\2\2\2\u076e\u076f\3\2\2\2\u076fk\3\2\2\2\u0770"+
		"\u0772\7q\2\2\u0771\u0773\5\u0198\u00cd\2\u0772\u0771\3\2\2\2\u0772\u0773"+
		"\3\2\2\2\u0773\u0774\3\2\2\2\u0774\u0775\5\u026a\u0136\2\u0775\u0776\5"+
		"n8\2\u0776\u0788\3\2\2\2\u0777\u0778\7q\2\2\u0778\u0779\7\u0170\2\2\u0779"+
		"\u077a\7\u0197\2\2\u077a\u077b\7\u00fe\2\2\u077b\u077f\5\u0210\u0109\2"+
		"\u077c\u077d\7\u00a9\2\2\u077d\u077e\7\26\2\2\u077e\u0780\5\u02b6\u015c"+
		"\2\u077f\u077c\3\2\2\2\u077f\u0780\3\2\2\2\u0780\u0781\3\2\2\2\u0781\u0782"+
		"\7\u00e6\2\2\u0782\u0783\7\u00fe\2\2\u0783\u0785\5\u0210\u0109\2\u0784"+
		"\u0786\7\u009b\2\2\u0785\u0784\3\2\2\2\u0785\u0786\3\2\2\2\u0786\u0788"+
		"\3\2\2\2\u0787\u0770\3\2\2\2\u0787\u0777\3\2\2\2\u0788m\3\2\2\2\u0789"+
		"\u07b1\5\u01ee\u00f8\2\u078a\u078b\7\21\2\2\u078b\u078c\7\u00ae\2\2\u078c"+
		"\u07b1\5\u026a\u0136\2\u078d\u078e\7A\2\2\u078e\u078f\7\u01a3\2\2\u078f"+
		"\u0790\7V\2\2\u0790\u07b1\5\u026a\u0136\2\u0791\u0793\7\f\2\2\u0792\u0794"+
		"\7\u017e\2\2\u0793\u0792\3\2\2\2\u0793\u0794\3\2\2\2\u0794\u0796\3\2\2"+
		"\2\u0795\u0797\5\u0154\u00ab\2\u0796\u0795\3\2\2\2\u0796\u0797\3\2\2\2"+
		"\u0797\u0798\3\2\2\2\u0798\u0799\7\u0268\2\2\u0799\u079a\7\u00e6\2\2\u079a"+
		"\u079b\7\u00f2\2\2\u079b\u07b1\5\u0150\u00a9\2\u079c\u079d\7\u00ce\2\2"+
		"\u079d\u079e\7\u024b\2\2\u079e\u079f\5\u02b6\u015c\2\u079f\u07a0\7\u024c"+
		"\2\2\u07a0\u07b1\3\2\2\2\u07a1\u07a2\7\u00e6\2\2\u07a2\u07a3\7\u00fe\2"+
		"\2\u07a3\u07b1\5\u0210\u0109\2\u07a4\u07a5\7\u00e6\2\2\u07a5\u07a6\7\u024b"+
		"\2\2\u07a6\u07ab\5\u00a8U\2\u07a7\u07a8\7\u0245\2\2\u07a8\u07aa\5\u00a8"+
		"U\2\u07a9\u07a7\3\2\2\2\u07aa\u07ad\3\2\2\2\u07ab\u07a9\3\2\2\2\u07ab"+
		"\u07ac\3\2\2\2\u07ac\u07ae\3\2\2\2\u07ad\u07ab\3\2\2\2\u07ae\u07af\7\u024c"+
		"\2\2\u07af\u07b1\3\2\2\2\u07b0\u0789\3\2\2\2\u07b0\u078a\3\2\2\2\u07b0"+
		"\u078d\3\2\2\2\u07b0\u0791\3\2\2\2\u07b0\u079c\3\2\2\2\u07b0\u07a1\3\2"+
		"\2\2\u07b0\u07a4\3\2\2\2\u07b1o\3\2\2\2\u07b2\u07b3\7\u0187\2\2\u07b3"+
		"\u07b7\7\u00b8\2\2\u07b4\u07b5\7\u0191\2\2\u07b5\u07b6\t\35\2\2\u07b6"+
		"\u07b8\5\u02b6\u015c\2\u07b7\u07b4\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8\u07bc"+
		"\3\2\2\2\u07b9\u07ba\7\u0197\2\2\u07ba\u07bb\7\u00db\2\2\u07bb\u07bd\5"+
		"\u02b6\u015c\2\u07bc\u07b9\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07be\3\2"+
		"\2\2\u07be\u07bf\5r:\2\u07bfq\3\2\2\2\u07c0\u07c6\7\u0194\2\2\u07c1\u07c3"+
		"\7\u00d2\2\2\u07c2\u07c4\5t;\2\u07c3\u07c2\3\2\2\2\u07c3\u07c4\3\2\2\2"+
		"\u07c4\u07c6\3\2\2\2\u07c5\u07c0\3\2\2\2\u07c5\u07c1\3\2\2\2\u07c6\u07fe"+
		"\3\2\2\2\u07c7\u07cc\5\u01f2\u00fa\2\u07c8\u07c9\7\u0245\2\2\u07c9\u07cb"+
		"\5\u01f2\u00fa\2\u07ca\u07c8\3\2\2\2\u07cb\u07ce\3\2\2\2\u07cc\u07ca\3"+
		"\2\2\2\u07cc\u07cd\3\2\2\2\u07cd\u07cf\3\2\2\2\u07ce\u07cc\3\2\2\2\u07cf"+
		"\u07d0\7\u01a3\2\2\u07d0\u07d1\7\u00fd\2\2\u07d1\u07ff\3\2\2\2\u07d2\u07d7"+
		"\5\u01f4\u00fb\2\u07d3\u07d4\7\u0245\2\2\u07d4\u07d6\5\u01f4\u00fb\2\u07d5"+
		"\u07d3\3\2\2\2\u07d6\u07d9\3\2\2\2\u07d7\u07d5\3\2\2\2\u07d7\u07d8\3\2"+
		"\2\2\u07d8\u07df\3\2\2\2\u07d9\u07d7\3\2\2\2\u07da\u07dc\7\u0170\2\2\u07db"+
		"\u07dd\7\u00b8\2\2\u07dc\u07db\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd\u07df"+
		"\3\2\2\2\u07de\u07d2\3\2\2\2\u07de\u07da\3\2\2\2\u07df\u07e0\3\2\2\2\u07e0"+
		"\u07e1\7\u01a3\2\2\u07e1\u07ff\7\u00e2\2\2\u07e2\u07e8\7T\2\2\u07e3\u07e5"+
		"\7\u0170\2\2\u07e4\u07e6\7\u00b8\2\2\u07e5\u07e4\3\2\2\2\u07e5\u07e6\3"+
		"\2\2\2\u07e6\u07e8\3\2\2\2\u07e7\u07e2\3\2\2\2\u07e7\u07e3\3\2\2\2\u07e8"+
		"\u07e9\3\2\2\2\u07e9\u07ea\7\u01a3\2\2\u07ea\u07ff\7_\2\2\u07eb\u07f2"+
		"\7\u021d\2\2\u07ec\u07f2\7\u0180\2\2\u07ed\u07ef\7\u0170\2\2\u07ee\u07f0"+
		"\7\u00b8\2\2\u07ef\u07ee\3\2\2\2\u07ef\u07f0\3\2\2\2\u07f0\u07f2\3\2\2"+
		"\2\u07f1\u07eb\3\2\2\2\u07f1\u07ec\3\2\2\2\u07f1\u07ed\3\2\2\2\u07f2\u07f3"+
		"\3\2\2\2\u07f3\u07f4\7\u01a3\2\2\u07f4\u07ff\7\u00dc\2\2\u07f5\u07fb\7"+
		"\u021d\2\2\u07f6\u07f8\7\u0170\2\2\u07f7\u07f9\7\u00b8\2\2\u07f8\u07f7"+
		"\3\2\2\2\u07f8\u07f9\3\2\2\2\u07f9\u07fb\3\2\2\2\u07fa\u07f5\3\2\2\2\u07fa"+
		"\u07f6\3\2\2\2\u07fb\u07fc\3\2\2\2\u07fc\u07fd\7\u01a3\2\2\u07fd\u07ff"+
		"\7\u010a\2\2\u07fe\u07c7\3\2\2\2\u07fe\u07de\3\2\2\2\u07fe\u07e7\3\2\2"+
		"\2\u07fe\u07f1\3\2\2\2\u07fe\u07fa\3\2\2\2\u07ff\u0802\3\2\2\2\u0800\u0803"+
		"\5\u0126\u0094\2\u0801\u0803\5\u0128\u0095\2\u0802\u0800\3\2\2\2\u0802"+
		"\u0801\3\2\2\2\u0803s\3\2\2\2\u0804\u0805\7\u0194\2\2\u0805\u0806\7\u00a3"+
		"\2\2\u0806\u0807\7\u0191\2\2\u0807u\3\2\2\2\u0808\u080a\7\u00e1\2\2\u0809"+
		"\u080b\5\u0198\u00cd\2\u080a\u0809\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u080c"+
		"\3\2\2\2\u080c\u081c\5\u026a\u0136\2\u080d\u0816\5\u014e\u00a8\2\u080e"+
		"\u0813\7\u00cf\2\2\u080f\u0811\7\u01bc\2\2\u0810\u080f\3\2\2\2\u0810\u0811"+
		"\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0814\5\u0150\u00a9\2\u0813\u0810\3"+
		"\2\2\2\u0813\u0814\3\2\2\2\u0814\u0816\3\2\2\2\u0815\u080d\3\2\2\2\u0815"+
		"\u080e\3\2\2\2\u0816\u0819\3\2\2\2\u0817\u0815\3\2\2\2\u0817\u0818\3\2"+
		"\2\2\u0818\u081d\3\2\2\2\u0819\u0817\3\2\2\2\u081a\u081d\5\u01f0\u00f9"+
		"\2\u081b\u081d\5\u01ee\u00f8\2\u081c\u0817\3\2\2\2\u081c\u081a\3\2\2\2"+
		"\u081c\u081b\3\2\2\2\u081dw\3\2\2\2\u081e\u0820\7\u008c\2\2\u081f\u081e"+
		"\3\2\2\2\u081f\u0820\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u0823\7\u011a\2"+
		"\2\u0822\u0824\5\u0198\u00cd\2\u0823\u0822\3\2\2\2\u0823\u0824\3\2\2\2"+
		"\u0824\u0825\3\2\2\2\u0825\u0835\5\u026a\u0136\2\u0826\u0828\7\f\2\2\u0827"+
		"\u0829\7\u017e\2\2\u0828\u0827\3\2\2\2\u0828\u0829\3\2\2\2\u0829\u082a"+
		"\3\2\2\2\u082a\u082d\5\u026a\u0136\2\u082b\u082e\5\u008cG\2\u082c\u082e"+
		"\5\u008eH\2\u082d\u082b\3\2\2\2\u082d\u082c\3\2\2\2\u082e\u0836\3\2\2"+
		"\2\u082f\u0836\5\u01f0\u00f9\2\u0830\u0836\5\u01ee\u00f8\2\u0831\u0832"+
		"\7\u00e6\2\2\u0832\u0836\5\u01dc\u00ef\2\u0833\u0834\7\u00ce\2\2\u0834"+
		"\u0836\5\u01d8\u00ed\2\u0835\u0826\3\2\2\2\u0835\u082f\3\2\2\2\u0835\u0830"+
		"\3\2\2\2\u0835\u0831\3\2\2\2\u0835\u0833\3\2\2\2\u0836y\3\2\2\2\u0837"+
		"\u0838\7P\2\2\u0838\u0839\7\u0106\2\2\u0839\u083a\5\u0210\u0109\2\u083a"+
		"\u083b\5|?\2\u083b{\3\2\2\2\u083c\u0844\7D\2\2\u083d\u083f\7K\2\2\u083e"+
		"\u0840\t\25\2\2\u083f\u083e\3\2\2\2\u083f\u0840\3\2\2\2\u0840\u0844\3"+
		"\2\2\2\u0841\u0844\5\u01ec\u00f7\2\u0842\u0844\5\u01ee\u00f8\2\u0843\u083c"+
		"\3\2\2\2\u0843\u083d\3\2\2\2\u0843\u0841\3\2\2\2\u0843\u0842\3\2\2\2\u0844"+
		"}\3\2\2\2\u0845\u0846\7\u0109\2\2\u0846\u0869\5\u026a\u0136\2\u0847\u086a"+
		"\5\u01f0\u00f9\2\u0848\u086a\5\u01ee\u00f8\2\u0849\u084a\7\7\2\2\u084a"+
		"\u084c\7\u0117\2\2\u084b\u084d\5\u019a\u00ce\2\u084c\u084b\3\2\2\2\u084c"+
		"\u084d\3\2\2\2\u084d\u084e\3\2\2\2\u084e\u0851\5\u0146\u00a4\2\u084f\u0850"+
		"\t\36\2\2\u0850\u0852\5\u0146\u00a4\2\u0851\u084f\3\2\2\2\u0851\u0852"+
		"\3\2\2\2\u0852\u086a\3\2\2\2\u0853\u0854\7\u00ca\2\2\u0854\u0855\7\22"+
		"\2\2\u0855\u0856\5\u0210\u0109\2\u0856\u0857\7\u01b1\2\2\u0857\u0859\5"+
		"\u0210\u0109\2\u0858\u085a\5\u01f8\u00fd\2\u0859\u0858\3\2\2\2\u0859\u085a"+
		"\3\2\2\2\u085a\u086a\3\2\2\2\u085b\u085c\7\u00ca\2\2\u085c\u085d\7\u0117"+
		"\2\2\u085d\u085e\5\u0146\u00a4\2\u085e\u085f\7\u01b1\2\2\u085f\u0860\5"+
		"\u0146\u00a4\2\u0860\u086a\3\2\2\2\u0861\u0866\5\u008aF\2\u0862\u0863"+
		"\7\u0245\2\2\u0863\u0865\5\u008aF\2\u0864\u0862\3\2\2\2\u0865\u0868\3"+
		"\2\2\2\u0866\u0864\3\2\2\2\u0866\u0867\3\2\2\2\u0867\u086a\3\2\2\2\u0868"+
		"\u0866\3\2\2\2\u0869\u0847\3\2\2\2\u0869\u0848\3\2\2\2\u0869\u0849\3\2"+
		"\2\2\u0869\u0853\3\2\2\2\u0869\u085b\3\2\2\2\u0869\u0861\3\2\2\2\u086a"+
		"\177\3\2\2\2\u086b\u086c\7G\2\2\u086c\u0882\5\u026a\u0136\2\u086d\u0883"+
		"\5\u008cG\2\u086e\u0883\5\u008eH\2\u086f\u0870\t\37\2\2\u0870\u0871\7"+
		"\u01a0\2\2\u0871\u0883\7\u01a1\2\2\u0872\u0873\7\7\2\2\u0873\u0876\5\u00de"+
		"p\2\u0874\u0875\7\u01a0\2\2\u0875\u0877\7\u0114\2\2\u0876\u0874\3\2\2"+
		"\2\u0876\u0877\3\2\2\2\u0877\u0883\3\2\2\2\u0878\u0883\5b\62\2\u0879\u087a"+
		"\7\u00ca\2\2\u087a\u087b\7\u017f\2\2\u087b\u087c\5\u026a\u0136\2\u087c"+
		"\u087d\7\u01b1\2\2\u087d\u087e\5\u026a\u0136\2\u087e\u0883\3\2\2\2\u087f"+
		"\u0883\5`\61\2\u0880\u0883\5\u01ee\u00f8\2\u0881\u0883\5\u01f0\u00f9\2"+
		"\u0882\u086d\3\2\2\2\u0882\u086e\3\2\2\2\u0882\u086f\3\2\2\2\u0882\u0872"+
		"\3\2\2\2\u0882\u0878\3\2\2\2\u0882\u0879\3\2\2\2\u0882\u087f\3\2\2\2\u0882"+
		"\u0880\3\2\2\2\u0882\u0881\3\2\2\2\u0883\u0081\3\2\2\2\u0884\u0885\7\u00e4"+
		"\2\2\u0885\u0886\5\u0210\u0109\2\u0886\u0887\5\u0084C\2\u0887\u0083\3"+
		"\2\2\2\u0888\u0889\7\u0119\2\2\u0889\u088b\5\u0146\u00a4\2\u088a\u0888"+
		"\3\2\2\2\u088a\u088b\3\2\2\2\u088b\u088c\3\2\2\2\u088c\u0892\5\u01bc\u00df"+
		"\2\u088d\u088e\7\u0119\2\2\u088e\u0892\5\u0146\u00a4\2\u088f\u0892\5\u01ec"+
		"\u00f7\2\u0890\u0892\5\u01ee\u00f8\2\u0891\u088a\3\2\2\2\u0891\u088d\3"+
		"\2\2\2\u0891\u088f\3\2\2\2\u0891\u0890\3\2\2\2\u0892\u0085\3\2\2\2\u0893"+
		"\u0894\7\u0102\2\2\u0894\u08a3\7\u00de\2\2\u0895\u0896\t \2\2\u0896\u0899"+
		"\5\u026a\u0136\2\u0897\u089a\5\u01ee\u00f8\2\u0898\u089a\5\u01f0\u00f9"+
		"\2\u0899\u0897\3\2\2\2\u0899\u0898\3\2\2\2\u089a\u08a4\3\2\2\2\u089b\u089c"+
		"\7C\2\2\u089c\u089d\5\u026a\u0136\2\u089d\u089e\5\u01dc\u00ef\2\u089e"+
		"\u08a4\3\2\2\2\u089f\u08a0\7(\2\2\u08a0\u08a1\5\u026a\u0136\2\u08a1\u08a2"+
		"\5\u0088E\2\u08a2\u08a4\3\2\2\2\u08a3\u0895\3\2\2\2\u08a3\u089b\3\2\2"+
		"\2\u08a3\u089f\3\2\2\2\u08a4\u0087\3\2\2\2\u08a5\u08a6\t!\2\2\u08a6\u08a7"+
		"\7\u008a\2\2\u08a7\u08a8\7\u0191\2\2\u08a8\u08a9\5\u02b6\u015c\2\u08a9"+
		"\u08aa\7\u01bc\2\2\u08aa\u08af\5\u026a\u0136\2\u08ab\u08ac\7\u0245\2\2"+
		"\u08ac\u08ae\5\u026a\u0136\2\u08ad\u08ab\3\2\2\2\u08ae\u08b1\3\2\2\2\u08af"+
		"\u08ad\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0\u08c6\3\2\2\2\u08b1\u08af\3\2"+
		"\2\2\u08b2\u08b3\7\f\2\2\u08b3\u08b6\7\u008a\2\2\u08b4\u08b5\7\u0191\2"+
		"\2\u08b5\u08b7\5\u02b6\u015c\2\u08b6\u08b4\3\2\2\2\u08b6\u08b7\3\2\2\2"+
		"\u08b7\u08b8\3\2\2\2\u08b8\u08b9\7\u00cc\2\2\u08b9\u08ba\5\u026a\u0136"+
		"\2\u08ba\u08bb\7\u01bc\2\2\u08bb\u08bc\5\u026a\u0136\2\u08bc\u08c6\3\2"+
		"\2\2\u08bd\u08be\7I\2\2\u08be\u08c1\7\u008a\2\2\u08bf\u08c0\7i\2\2\u08c0"+
		"\u08c2\7\u0130\2\2\u08c1\u08bf\3\2\2\2\u08c1\u08c2\3\2\2\2\u08c2\u08c3"+
		"\3\2\2\2\u08c3\u08c4\7\u0191\2\2\u08c4\u08c6\5\u02b6\u015c\2\u08c5\u08a5"+
		"\3\2\2\2\u08c5\u08b2\3\2\2\2\u08c5\u08bd\3\2\2\2\u08c6\u0089\3\2\2\2\u08c7"+
		"\u08c8\7\7\2\2\u08c8\u08c9\7\22\2\2\u08c9\u08ca\5\u0210\u0109\2\u08ca"+
		"\u08cc\5\u0224\u0113\2\u08cb\u08cd\5\u01fa\u00fe\2\u08cc\u08cb\3\2\2\2"+
		"\u08cc\u08cd\3\2\2\2\u08cd\u08cf\3\2\2\2\u08ce\u08d0\5\u01f8\u00fd\2\u08cf"+
		"\u08ce\3\2\2\2\u08cf\u08d0\3\2\2\2\u08d0\u08ea\3\2\2\2\u08d1\u08d2\7I"+
		"\2\2\u08d2\u08d4\7\22\2\2\u08d3\u08d5\5\u0198\u00cd\2\u08d4\u08d3\3\2"+
		"\2\2\u08d4\u08d5\3\2\2\2\u08d5\u08d6\3\2\2\2\u08d6\u08d8\5\u0210\u0109"+
		"\2\u08d7\u08d9\5\u01f8\u00fd\2\u08d8\u08d7\3\2\2\2\u08d8\u08d9\3\2\2\2"+
		"\u08d9\u08ea\3\2\2\2\u08da\u08db\7\f\2\2\u08db\u08dc\7\22\2\2\u08dc\u08df"+
		"\5\u0210\u0109\2\u08dd\u08de\7\u00e6\2\2\u08de\u08e0\7\66\2\2\u08df\u08dd"+
		"\3\2\2\2\u08df\u08e0\3\2\2\2\u08e0\u08e1\3\2\2\2\u08e1\u08e2\7\u0109\2"+
		"\2\u08e2\u08e4\5\u0224\u0113\2\u08e3\u08e5\5\u01fa\u00fe\2\u08e4\u08e3"+
		"\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e7\3\2\2\2\u08e6\u08e8\5\u01f8\u00fd"+
		"\2\u08e7\u08e6\3\2\2\2\u08e7\u08e8\3\2\2\2\u08e8\u08ea\3\2\2\2\u08e9\u08c7"+
		"\3\2\2\2\u08e9\u08d1\3\2\2\2\u08e9\u08da\3\2\2\2\u08ea\u008b\3\2\2\2\u08eb"+
		"\u08ec\7\u00e6\2\2\u08ec\u08ed\7\u0187\2\2\u08ed\u08ee\5\u0230\u0119\2"+
		"\u08ee\u008d\3\2\2\2\u08ef\u08f0\7I\2\2\u08f0\u08f1\7\u0187\2\2\u08f1"+
		"\u008f\3\2\2\2\u08f2\u08f4\7\u01b5\2\2\u08f3\u08f2\3\2\2\2\u08f3\u08f4"+
		"\3\2\2\2\u08f4\u08f5\3\2\2\2\u08f5\u08f7\7q\2\2\u08f6\u08f8\7\u015c\2"+
		"\2\u08f7\u08f6\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8\u08fa\3\2\2\2\u08f9\u08fb"+
		"\5\u019a\u00ce\2\u08fa\u08f9\3\2\2\2\u08fa\u08fb\3\2\2\2\u08fb\u08fd\3"+
		"\2\2\2\u08fc\u08fe\5\u0210\u0109\2\u08fd\u08fc\3\2\2\2\u08fd\u08fe\3\2"+
		"\2\2\u08fe\u08ff\3\2\2\2\u08ff\u0901\7\u01a3\2\2\u0900\u0902\7\u01a4\2"+
		"\2\u0901\u0900\3\2\2\2\u0901\u0902\3\2\2\2\u0902\u0903\3\2\2\2\u0903\u0904"+
		"\5\u026a\u0136\2\u0904\u0905\5\u0092J\2\u0905\u0091\3\2\2\2\u0906\u0907"+
		"\7\u01b7\2\2\u0907\u0909\5\u0210\u0109\2\u0908\u0906\3\2\2\2\u0908\u0909"+
		"\3\2\2\2\u0909\u090a\3\2\2\2\u090a\u090c\5\u0094K\2\u090b\u090d\5\u0096"+
		"L\2\u090c\u090b\3\2\2\2\u090c\u090d\3\2\2\2\u090d\u090f\3\2\2\2\u090e"+
		"\u0910\5\u01e2\u00f2\2\u090f\u090e\3\2\2\2\u090f\u0910\3\2\2\2\u0910\u0912"+
		"\3\2\2\2\u0911\u0913\5\u01e8\u00f5\2\u0912\u0911\3\2\2\2\u0912\u0913\3"+
		"\2\2\2\u0913\u0915\3\2\2\2\u0914\u0916\5\u0098M\2\u0915\u0914\3\2\2\2"+
		"\u0915\u0916\3\2\2\2\u0916\u0093\3\2\2\2\u0917\u0918\7\u024b\2\2\u0918"+
		"\u0919\5\u029a\u014e\2\u0919\u091a\7\u024c\2\2\u091a\u0095\3\2\2\2\u091b"+
		"\u091c\7n\2\2\u091c\u091d\7\u024b\2\2\u091d\u0922\5\u0210\u0109\2\u091e"+
		"\u091f\7\u0245\2\2\u091f\u0921\5\u0210\u0109\2\u0920\u091e\3\2\2\2\u0921"+
		"\u0924\3\2\2\2\u0922\u0920\3\2\2\2\u0922\u0923\3\2\2\2\u0923\u0925\3\2"+
		"\2\2\u0924\u0922\3\2\2\2\u0925\u0926\7\u024c\2\2\u0926\u0097\3\2\2\2\u0927"+
		"\u0928\7\u01ba\2\2\u0928\u0929\5\u0230\u0119\2\u0929\u0099\3\2\2\2\u092a"+
		"\u092c\7V\2\2\u092b\u092d\5\u019a\u00ce\2\u092c\u092b\3\2\2\2\u092c\u092d"+
		"\3\2\2\2\u092d\u092e\3\2\2\2\u092e\u0930\5\u0210\u0109\2\u092f\u0931\7"+
		"\u01bc\2\2\u0930\u092f\3\2\2\2\u0930\u0931\3\2\2\2\u0931\u0934\3\2\2\2"+
		"\u0932\u0933\7\u00db\2\2\u0933\u0935\5\u0210\u0109\2\u0934\u0932\3\2\2"+
		"\2\u0934\u0935\3\2\2\2\u0935\u093b\3\2\2\2\u0936\u0939\7\u0119\2\2\u0937"+
		"\u093a\5\u0210\u0109\2\u0938\u093a\5\u0146\u00a4\2\u0939\u0937\3\2\2\2"+
		"\u0939\u0938\3\2\2\2\u093a\u093c\3\2\2\2\u093b\u0936\3\2\2\2\u093b\u093c"+
		"\3\2\2\2\u093c\u0942\3\2\2\2\u093d\u0940\7\u0193\2\2\u093e\u0941\5\u0210"+
		"\u0109\2\u093f\u0941\5\u0146\u00a4\2\u0940\u093e\3\2\2\2\u0940\u093f\3"+
		"\2\2\2\u0941\u0943\3\2\2\2\u0942\u093d\3\2\2\2\u0942\u0943\3\2\2\2\u0943"+
		"\u0945\3\2\2\2\u0944\u0946\7\32\2\2\u0945\u0944\3\2\2\2\u0945\u0946\3"+
		"\2\2\2\u0946\u009b\3\2\2\2\u0947\u0948\7\u01a5\2\2\u0948\u094a\7\u00cc"+
		"\2\2\u0949\u0947\3\2\2\2\u0949\u094a\3\2\2\2\u094a\u094c\3\2\2\2\u094b"+
		"\u094d\7\u0108\2\2\u094c\u094b\3\2\2\2\u094c\u094d\3\2\2\2\u094d\u094f"+
		"\3\2\2\2\u094e\u0950\7\u00b9\2\2\u094f\u094e\3\2\2\2\u094f\u0950\3\2\2"+
		"\2\u0950\u0951\3\2\2\2\u0951\u0952\7~\2\2\u0952\u095d\5\u0210\u0109\2"+
		"\u0953\u0954\7d\2\2\u0954\u0957\5\u026a\u0136\2\u0955\u0956\7u\2\2\u0956"+
		"\u0958\5\u026a\u0136\2\u0957\u0955\3\2\2\2\u0957\u0958\3\2\2\2\u0958\u095b"+
		"\3\2\2\2\u0959\u095a\7\u0116\2\2\u095a\u095c\5\u026a\u0136\2\u095b\u0959"+
		"\3\2\2\2\u095b\u095c\3\2\2\2\u095c\u095e\3\2\2\2\u095d\u0953\3\2\2\2\u095d"+
		"\u095e\3\2\2\2\u095e\u009d\3\2\2\2\u095f\u0960\7P\2\2\u0960\u0961\7\u0106"+
		"\2\2\u0961\u0962\5\u0210\u0109\2\u0962\u0963\7\u01a3\2\2\u0963\u0978\5"+
		"\u0210\u0109\2\u0964\u0974\7\u01b9\2\2\u0965\u0966\5\u026a\u0136\2\u0966"+
		"\u0967\7\u0197\2\2\u0967\u0968\7\u024b\2\2\u0968\u096d\5\u0146\u00a4\2"+
		"\u0969\u096a\7\u0245\2\2\u096a\u096c\5\u0146\u00a4\2\u096b\u0969\3\2\2"+
		"\2\u096c\u096f\3\2\2\2\u096d\u096b\3\2\2\2\u096d\u096e\3\2\2\2\u096e\u0970"+
		"\3\2\2\2\u096f\u096d\3\2\2\2\u0970\u0972\7\u024c\2\2\u0971\u0973\7\u0173"+
		"\2\2\u0972\u0971\3\2\2\2\u0972\u0973\3\2\2\2\u0973\u0975\3\2\2\2\u0974"+
		"\u0965\3\2\2\2\u0975\u0976\3\2\2\2\u0976\u0974\3\2\2\2\u0976\u0977\3\2"+
		"\2\2\u0977\u0979\3\2\2\2\u0978\u0964\3\2\2\2\u0978\u0979\3\2\2\2\u0979"+
		"\u097a\3\2\2\2\u097a\u097b\7T\2\2\u097b\u097c\t\22\2\2\u097c\u097d\5\u0230"+
		"\u0119\2\u097d\u009f\3\2\2\2\u097e\u097f\7\u0109\2\2\u097f\u0a13\5\u026a"+
		"\u0136\2\u0980\u09c5\7\u0176\2\2\u0981\u098a\7\u024b\2\2\u0982\u0987\5"+
		"\u01c8\u00e5\2\u0983\u0984\7\u0245\2\2\u0984\u0986\5\u01c8\u00e5\2\u0985"+
		"\u0983\3\2\2\2\u0986\u0989\3\2\2\2\u0987\u0985\3\2\2\2\u0987\u0988\3\2"+
		"\2\2\u0988\u098b\3\2\2\2\u0989\u0987\3\2\2\2\u098a\u0982\3\2\2\2\u098a"+
		"\u098b\3\2\2\2\u098b\u098c\3\2\2\2\u098c\u09c6\7\u024c\2\2\u098d\u098e"+
		"\7N\2\2\u098e\u0997\7\u024b\2\2\u098f\u0994\5\u0146\u00a4\2\u0990\u0991"+
		"\7\u0245\2\2\u0991\u0993\5\u0146\u00a4\2\u0992\u0990\3\2\2\2\u0993\u0996"+
		"\3\2\2\2\u0994\u0992\3\2\2\2\u0994\u0995\3\2\2\2\u0995\u0998\3\2\2\2\u0996"+
		"\u0994\3\2\2\2\u0997\u098f\3\2\2\2\u0997\u0998\3\2\2\2\u0998\u0999\3\2"+
		"\2\2\u0999\u09c6\7\u024c\2\2\u099a\u099b\7\u00bf\2\2\u099b\u09ab\7\u024b"+
		"\2\2\u099c\u099d\7\u0216\2\2\u099d\u099e\7\u0242\2\2\u099e\u09ac\5\u0224"+
		"\u0113\2\u099f\u09a0\7\u0215\2\2\u09a0\u09a1\7\u0242\2\2\u09a1\u09ac\5"+
		"\u0210\u0109\2\u09a2\u09a3\7\u015b\2\2\u09a3\u09a4\7\u0242\2\2\u09a4\u09ac"+
		"\5\u026a\u0136\2\u09a5\u09a6\7\u01c1\2\2\u09a6\u09a7\7\u0242\2\2\u09a7"+
		"\u09ac\5\u026a\u0136\2\u09a8\u09a9\7\u0214\2\2\u09a9\u09aa\7\u0242\2\2"+
		"\u09aa\u09ac\5\u026a\u0136\2\u09ab\u099c\3\2\2\2\u09ab\u099f\3\2\2\2\u09ab"+
		"\u09a2\3\2\2\2\u09ab\u09a5\3\2\2\2\u09ab\u09a8\3\2\2\2\u09ab\u09ac\3\2"+
		"\2\2\u09ac\u09c1\3\2\2\2\u09ad\u09bd\7\u0245\2\2\u09ae\u09af\7\u0216\2"+
		"\2\u09af\u09b0\7\u0242\2\2\u09b0\u09be\5\u0224\u0113\2\u09b1\u09b2\7\u0215"+
		"\2\2\u09b2\u09b3\7\u0242\2\2\u09b3\u09be\5\u0210\u0109\2\u09b4\u09b5\7"+
		"\u015b\2\2\u09b5\u09b6\7\u0242\2\2\u09b6\u09be\5\u026a\u0136\2\u09b7\u09b8"+
		"\7\u01c1\2\2\u09b8\u09b9\7\u0242\2\2\u09b9\u09be\5\u026a\u0136\2\u09ba"+
		"\u09bb\7\u0214\2\2\u09bb\u09bc\7\u0242\2\2\u09bc\u09be\5\u026a\u0136\2"+
		"\u09bd\u09ae\3\2\2\2\u09bd\u09b1\3\2\2\2\u09bd\u09b4\3\2\2\2\u09bd\u09b7"+
		"\3\2\2\2\u09bd\u09ba\3\2\2\2\u09be\u09c0\3\2\2\2\u09bf\u09ad\3\2\2\2\u09c0"+
		"\u09c3\3\2\2\2\u09c1\u09bf\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c4\3\2"+
		"\2\2\u09c3\u09c1\3\2\2\2\u09c4\u09c6\7\u024c\2\2\u09c5\u0981\3\2\2\2\u09c5"+
		"\u098d\3\2\2\2\u09c5\u099a\3\2\2\2\u09c6\u0a14\3\2\2\2\u09c7\u09cf\7\u024b"+
		"\2\2\u09c8\u09c9\7\u01de\2\2\u09c9\u09cc\7\u0242\2\2\u09ca\u09cd\5\u0152"+
		"\u00aa\2\u09cb\u09cd\7\u021e\2\2\u09cc\u09ca\3\2\2\2\u09cc\u09cb\3\2\2"+
		"\2\u09cd\u09ce\3\2\2\2\u09ce\u09d0\7\u0245\2\2\u09cf\u09c8\3\2\2\2\u09cf"+
		"\u09d0\3\2\2\2\u09d0\u09d1\3\2\2\2\u09d1\u09d2\7v\2\2\u09d2\u09d3\7\u0242"+
		"\2\2\u09d3\u09d4\5\u026a\u0136\2\u09d4\u09d5\7\u0245\2\2\u09d5\u09d6\7"+
		"\u01fb\2\2\u09d6\u09d7\7\u0242\2\2\u09d7\u0a0e\5\u026a\u0136\2\u09d8\u0a0a"+
		"\7\u0245\2\2\u09d9\u09da\7\u0204\2\2\u09da\u09db\7\u0242\2\2\u09db\u0a0b"+
		"\5\u026a\u0136\2\u09dc\u09dd\7\u020b\2\2\u09dd\u09de\7\u0242\2\2\u09de"+
		"\u0a0b\5\u026a\u0136\2\u09df\u09e0\7\u021a\2\2\u09e0\u09e1\7\u0242\2\2"+
		"\u09e1\u0a0b\5\u026a\u0136\2\u09e2\u09e3\7\u021b\2\2\u09e3\u09e4\7\u0242"+
		"\2\2\u09e4\u0a0b\5\u026a\u0136\2\u09e5\u09e6\7\u0172\2\2\u09e6\u09e7\7"+
		"\u0242\2\2\u09e7\u0a0b\5\u026a\u0136\2\u09e8\u09e9\7\u01de\2\2\u09e9\u09ec"+
		"\7\u0242\2\2\u09ea\u09ed\5\u0152\u00aa\2\u09eb\u09ed\7\u021e\2\2\u09ec"+
		"\u09ea\3\2\2\2\u09ec\u09eb\3\2\2\2\u09ed\u0a0b\3\2\2\2\u09ee\u0a0b\7\u01fc"+
		"\2\2\u09ef\u09f0\7\u01bd\2\2\u09f0\u09f1\7\u0242\2\2\u09f1\u0a0b\5\u0224"+
		"\u0113\2\u09f2\u09f3\7\u00f5\2\2\u09f3\u09f4\7\u0242\2\2\u09f4\u0a0b\t"+
		"\30\2\2\u09f5\u09f6\7\u0167\2\2\u09f6\u09f7\7\u0242\2\2\u09f7\u0a0b\5"+
		"\u0224\u0113\2\u09f8\u09f9\7\u01c2\2\2\u09f9\u09fa\7\u0242\2\2\u09fa\u0a0b"+
		"\5\u0146\u00a4\2\u09fb\u09fc\7\u0200\2\2\u09fc\u09fd\7\u0242\2\2\u09fd"+
		"\u0a0b\5\u0240\u0121\2\u09fe\u09ff\7\u0187\2\2\u09ff\u0a00\7\u0242\2\2"+
		"\u0a00\u0a0b\5\u0230\u0119\2\u0a01\u0a02\7\u01cd\2\2\u0a02\u0a03\7\u0242"+
		"\2\2\u0a03\u0a0b\5\u0224\u0113\2\u0a04\u0a05\7?\2\2\u0a05\u0a06\7\u0242"+
		"\2\2\u0a06\u0a0b\5\u0146\u00a4\2\u0a07\u0a08\7\u01c3\2\2\u0a08\u0a09\7"+
		"\u0242\2\2\u0a09\u0a0b\5\u0240\u0121\2\u0a0a\u09d9\3\2\2\2\u0a0a\u09dc"+
		"\3\2\2\2\u0a0a\u09df\3\2\2\2\u0a0a\u09e2\3\2\2\2\u0a0a\u09e5\3\2\2\2\u0a0a"+
		"\u09e8\3\2\2\2\u0a0a\u09ee\3\2\2\2\u0a0a\u09ef\3\2\2\2\u0a0a\u09f2\3\2"+
		"\2\2\u0a0a\u09f5\3\2\2\2\u0a0a\u09f8\3\2\2\2\u0a0a\u09fb\3\2\2\2\u0a0a"+
		"\u09fe\3\2\2\2\u0a0a\u0a01\3\2\2\2\u0a0a\u0a04\3\2\2\2\u0a0a\u0a07\3\2"+
		"\2\2\u0a0b\u0a0d\3\2\2\2\u0a0c\u09d8\3\2\2\2\u0a0d\u0a10\3\2\2\2\u0a0e"+
		"\u0a0c\3\2\2\2\u0a0e\u0a0f\3\2\2\2\u0a0f\u0a11\3\2\2\2\u0a10\u0a0e\3\2"+
		"\2\2\u0a11\u0a12\7\u024c\2\2\u0a12\u0a14\3\2\2\2\u0a13\u0980\3\2\2\2\u0a13"+
		"\u09c7\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14\u00a1\3\2\2\2\u0a15\u0a16\7G"+
		"\2\2\u0a16\u0a18\5\u026a\u0136\2\u0a17\u0a19\7\u0176\2\2\u0a18\u0a17\3"+
		"\2\2\2\u0a18\u0a19\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u0a21\5\u0224\u0113"+
		"\2\u0a1b\u0a20\5\u01fa\u00fe\2\u0a1c\u0a1d\7\u0187\2\2\u0a1d\u0a20\5\u0230"+
		"\u0119\2\u0a1e\u0a20\5\u00dep\2\u0a1f\u0a1b\3\2\2\2\u0a1f\u0a1c\3\2\2"+
		"\2\u0a1f\u0a1e\3\2\2\2\u0a20\u0a23\3\2\2\2\u0a21\u0a1f\3\2\2\2\u0a21\u0a22"+
		"\3\2\2\2\u0a22\u00a3\3\2\2\2\u0a23\u0a21\3\2\2\2\u0a24\u0a26\7\u00e4\2"+
		"\2\u0a25\u0a27\5\u019a\u00ce\2\u0a26\u0a25\3\2\2\2\u0a26\u0a27\3\2\2\2"+
		"\u0a27\u0a28\3\2\2\2\u0a28\u0a2b\5\u0210\u0109\2\u0a29\u0a2a\7\u0109\2"+
		"\2\u0a2a\u0a2c\5\u0146\u00a4\2\u0a2b\u0a29\3\2\2\2\u0a2b\u0a2c\3\2\2\2"+
		"\u0a2c\u0a2f\3\2\2\2\u0a2d\u0a2e\7\u0119\2\2\u0a2e\u0a30\5\u0146\u00a4"+
		"\2\u0a2f\u0a2d\3\2\2\2\u0a2f\u0a30\3\2\2\2\u0a30\u0a31\3\2\2\2\u0a31\u0a32"+
		"\7\u0192\2\2\u0a32\u0a33\7\66\2\2\u0a33\u0a34\7\u0121\2\2\u0a34\u0a36"+
		"\5\u0210\u0109\2\u0a35\u0a37\5\u01bc\u00df\2\u0a36\u0a35\3\2\2\2\u0a36"+
		"\u0a37\3\2\2\2\u0a37\u00a5\3\2\2\2\u0a38\u0a39\7\u0102\2\2\u0a39\u0a3a"+
		"\7\u00de\2\2\u0a3a\u0a3b\7C\2\2\u0a3b\u0a3c\5\u026a\u0136\2\u0a3c\u0a3d"+
		"\7\u024b\2\2\u0a3d\u0a3e\7\u0100\2\2\u0a3e\u0a3f\7\u0242\2\2\u0a3f\u0a44"+
		"\5\u026a\u0136\2\u0a40\u0a41\7\u0245\2\2\u0a41\u0a43\5\u00a8U\2\u0a42"+
		"\u0a40\3\2\2\2\u0a43\u0a46\3\2\2\2\u0a44\u0a42\3\2\2\2\u0a44\u0a45\3\2"+
		"\2\2\u0a45\u0a47\3\2\2\2\u0a46\u0a44\3\2\2\2\u0a47\u0a48\7\u024c\2\2\u0a48"+
		"\u00a7\3\2\2\2\u0a49\u0a4a\5\u0210\u0109\2\u0a4a\u0a4b\7\u0242\2\2\u0a4b"+
		"\u0a4c\5\u0230\u0119\2\u0a4c\u00a9\3\2\2\2\u0a4d\u0a4e\7\u0102\2\2\u0a4e"+
		"\u0a4f\7\u00de\2\2\u0a4f\u0a50\7(\2\2\u0a50\u0a51\5\u026a\u0136\2\u0a51"+
		"\u0a58\7\u024b\2\2\u0a52\u0a53\7\u00ac\2\2\u0a53\u0a54\7\u0242\2\2\u0a54"+
		"\u0a59\5\u026a\u0136\2\u0a55\u0a56\7/\2\2\u0a56\u0a57\7\u0242\2\2\u0a57"+
		"\u0a59\5\u026a\u0136\2\u0a58\u0a52\3\2\2\2\u0a58\u0a55\3\2\2\2\u0a59\u0a5a"+
		"\3\2\2\2\u0a5a\u0a5b\7\u024c\2\2\u0a5b\u00ab\3\2\2\2\u0a5c\u0a5d\7\u0102"+
		"\2\2\u0a5d\u0a5e\7\u00de\2\2\u0a5e\u0a5f\7\u0100\2\2\u0a5f\u0a60\5\u026a"+
		"\u0136\2\u0a60\u0a66\7\u024b\2\2\u0a61\u0a62\7\u01dc\2\2\u0a62\u0a63\7"+
		"\u0242\2\2\u0a63\u0a64\5\u026a\u0136\2\u0a64\u0a65\7\u0245\2\2\u0a65\u0a67"+
		"\3\2\2\2\u0a66\u0a61\3\2\2\2\u0a66\u0a67\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68"+
		"\u0a69\7\u01e3\2\2\u0a69\u0a6a\7\u0242\2\2\u0a6a\u0a6f\5\u026a\u0136\2"+
		"\u0a6b\u0a6c\7\u0245\2\2\u0a6c\u0a6d\7\u01dc\2\2\u0a6d\u0a6e\7\u0242\2"+
		"\2\u0a6e\u0a70\5\u026a\u0136\2\u0a6f\u0a6b\3\2\2\2\u0a6f\u0a70\3\2\2\2"+
		"\u0a70\u0a71\3\2\2\2\u0a71\u0a72\7\u024c\2\2\u0a72\u00ad\3\2\2\2\u0a73"+
		"\u0a74\7\u0102\2\2\u0a74\u0a75\7\u00de\2\2\u0a75\u0a76\7\u00ac\2\2\u0a76"+
		"\u0a77\5\u026a\u0136\2\u0a77\u0a78\7\u024b\2\2\u0a78\u0a79\7\u00f0\2\2"+
		"\u0a79\u0a7a\7\u0242\2\2\u0a7a\u0a7b\5\u026a\u0136\2\u0a7b\u0a7c\7\u0245"+
		"\2\2\u0a7c\u0a7d\7\u01d6\2\2\u0a7d\u0a7e\7\u0242\2\2\u0a7e\u0a7f\5\u026a"+
		"\u0136\2\u0a7f\u0a80\7\u0245\2\2\u0a80\u0a81\7\u018d\2\2\u0a81\u0a82\7"+
		"\u0242\2\2\u0a82\u0a83\5\u026a\u0136\2\u0a83\u0a89\7\u0245\2\2\u0a84\u0a85"+
		"\7\u01d9\2\2\u0a85\u0a86\7\u0242\2\2\u0a86\u0a87\5\u026a\u0136\2\u0a87"+
		"\u0a88\7\u0245\2\2\u0a88\u0a8a\3\2\2\2\u0a89\u0a84\3\2\2\2\u0a89\u0a8a"+
		"\3\2\2\2\u0a8a\u0a8b\3\2\2\2\u0a8b\u0a8c\7\u01e4\2\2\u0a8c\u0a8d\7\u0242"+
		"\2\2\u0a8d\u0a92\5\u026a\u0136\2\u0a8e\u0a8f\7\u0245\2\2\u0a8f\u0a90\7"+
		"\u01d9\2\2\u0a90\u0a91\7\u0242\2\2\u0a91\u0a93\5\u026a\u0136\2\u0a92\u0a8e"+
		"\3\2\2\2\u0a92\u0a93\3\2\2\2\u0a93\u0a94\3\2\2\2\u0a94\u0a95\7\u024c\2"+
		"\2\u0a95\u00af\3\2\2\2\u0a96\u0a98\7\u015b\2\2\u0a97\u0a99\5\u019a\u00ce"+
		"\2\u0a98\u0a97\3\2\2\2\u0a98\u0a99\3\2\2\2\u0a99\u0a9a\3\2\2\2\u0a9a\u0aa9"+
		"\5\u026a\u0136\2\u0a9b\u0a9c\7\u0193\2\2\u0a9c\u0aaa\5\u026a\u0136\2\u0a9d"+
		"\u0aa6\7\u024b\2\2\u0a9e\u0aa3\5\u00b4[\2\u0a9f\u0aa0\7\u0245\2\2\u0aa0"+
		"\u0aa2\5\u00b4[\2\u0aa1\u0a9f\3\2\2\2\u0aa2\u0aa5\3\2\2\2\u0aa3\u0aa1"+
		"\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4\u0aa7\3\2\2\2\u0aa5\u0aa3\3\2\2\2\u0aa6"+
		"\u0a9e\3\2\2\2\u0aa6\u0aa7\3\2\2\2\u0aa7\u0aa8\3\2\2\2\u0aa8\u0aaa\7\u024c"+
		"\2\2\u0aa9\u0a9b\3\2\2\2\u0aa9\u0a9d\3\2\2\2\u0aaa\u00b1\3\2\2\2\u0aab"+
		"\u0aac\7\u015b\2\2\u0aac\u0ab2\5\u026a\u0136\2\u0aad\u0aae\7\u00c6\2\2"+
		"\u0aae\u0ab3\7\u0119\2\2\u0aaf\u0ab3\5\u01ee\u00f8\2\u0ab0\u0ab3\5\u01ec"+
		"\u00f7\2\u0ab1\u0ab3\5\u01f0\u00f9\2\u0ab2\u0aad\3\2\2\2\u0ab2\u0aaf\3"+
		"\2\2\2\u0ab2\u0ab0\3\2\2\2\u0ab2\u0ab1\3\2\2\2\u0ab3\u00b3\3\2\2\2\u0ab4"+
		"\u0ab5\t\"\2\2\u0ab5\u0ab8\7\u0242\2\2\u0ab6\u0ab9\5\u0146\u00a4\2\u0ab7"+
		"\u0ab9\5\u0210\u0109\2\u0ab8\u0ab6\3\2\2\2\u0ab8\u0ab7\3\2\2\2\u0ab9\u0abe"+
		"\3\2\2\2\u0aba\u0abb\7\u01cb\2\2\u0abb\u0abc\7\u0242\2\2\u0abc\u0abe\5"+
		"8\35\2\u0abd\u0ab4\3\2\2\2\u0abd\u0aba\3\2\2\2\u0abe\u00b5\3\2\2\2\u0abf"+
		"\u0ac0\7\u01b6\2\2\u0ac0\u0ac2\7\u008a\2\2\u0ac1\u0ac3\5\u019a\u00ce\2"+
		"\u0ac2\u0ac1\3\2\2\2\u0ac2\u0ac3\3\2\2\2\u0ac3\u0ac4\3\2\2\2\u0ac4\u0ac7"+
		"\7\u0191\2\2\u0ac5\u0ac8\5,\27\2\u0ac6\u0ac8\7\u01b6\2\2\u0ac7\u0ac5\3"+
		"\2\2\2\u0ac7\u0ac6\3\2\2\2\u0ac8\u0ac9\3\2\2\2\u0ac9\u0aca\7\u00e4\2\2"+
		"\u0aca\u0acc\5\u0210\u0109\2\u0acb\u0acd\5\u01bc\u00df\2\u0acc\u0acb\3"+
		"\2\2\2\u0acc\u0acd\3\2\2\2\u0acd\u00b7\3\2\2\2\u0ace\u0acf\7\u01b6\2\2"+
		"\u0acf\u0ad0\7\u008a\2\2\u0ad0\u0ad3\7\u0191\2\2\u0ad1\u0ad4\5,\27\2\u0ad2"+
		"\u0ad4\7\u01b6\2\2\u0ad3\u0ad1\3\2\2\2\u0ad3\u0ad2\3\2\2\2\u0ad4\u0ad5"+
		"\3\2\2\2\u0ad5\u0ad6\7\u00e4\2\2\u0ad6\u0ad8\5\u0210\u0109\2\u0ad7\u0ad9"+
		"\5\u01bc\u00df\2\u0ad8\u0ad7\3\2\2\2\u0ad8\u0ad9\3\2\2\2\u0ad9\u00b9\3"+
		"\2\2\2\u0ada\u0ae8\t\35\2\2\u0adb\u0ae9\5\u00bc_\2\u0adc\u0add\5\u0210"+
		"\u0109\2\u0add\u0ade\5\u01ee\u00f8\2\u0ade\u0ae9\3\2\2\2\u0adf\u0ae1\5"+
		",\27\2\u0ae0\u0ae2\7\u01bc\2\2\u0ae1\u0ae0\3\2\2\2\u0ae1\u0ae2\3\2\2\2"+
		"\u0ae2\u0ae4\3\2\2\2\u0ae3\u0ae5\5\u00e8u\2\u0ae4\u0ae3\3\2\2\2\u0ae5"+
		"\u0ae6\3\2\2\2\u0ae6\u0ae4\3\2\2\2\u0ae6\u0ae7\3\2\2\2\u0ae7\u0ae9\3\2"+
		"\2\2\u0ae8\u0adb\3\2\2\2\u0ae8\u0adc\3\2\2\2\u0ae8\u0adf\3\2\2\2\u0ae9"+
		"\u00bb\3\2\2\2\u0aea\u0aed\5,\27\2\u0aeb\u0aed\7\u0170\2\2\u0aec\u0aea"+
		"\3\2\2\2\u0aec\u0aeb\3\2\2\2\u0aed\u0af1\3\2\2\2\u0aee\u0aef\7\u0197\2"+
		"\2\u0aef\u0af0\7\67\2\2\u0af0\u0af2\5\u0210\u0109\2\u0af1\u0aee\3\2\2"+
		"\2\u0af1\u0af2\3\2\2\2\u0af2\u0af3\3\2\2\2\u0af3\u0af4\5\u00be`\2\u0af4"+
		"\u00bd\3\2\2\2\u0af5\u0af9\7\u00e6\2\2\u0af6\u0af7\5\u0210\u0109\2\u0af7"+
		"\u0af8\7\u0253\2\2\u0af8\u0afa\3\2\2\2\u0af9\u0af6\3\2\2\2\u0af9\u0afa"+
		"\3\2\2\2\u0afa\u0afb\3\2\2\2\u0afb\u0afc\5\u0210\u0109\2\u0afc\u0afd\t"+
		"\34\2\2\u0afd\u0afe\5\u010c\u0087\2\u0afe\u0b13\3\2\2\2\u0aff\u0b03\7"+
		"\u00e6\2\2\u0b00\u0b01\5\u0210\u0109\2\u0b01\u0b02\7\u0253\2\2\u0b02\u0b04"+
		"\3\2\2\2\u0b03\u0b00\3\2\2\2\u0b03\u0b04\3\2\2\2\u0b04\u0b05\3\2\2\2\u0b05"+
		"\u0b06\5\u0210\u0109\2\u0b06\u0b07\7\u0193\2\2\u0b07\u0b08\7\63\2\2\u0b08"+
		"\u0b13\3\2\2\2\u0b09\u0b0d\7\u00ce\2\2\u0b0a\u0b0b\5\u0210\u0109\2\u0b0b"+
		"\u0b0c\7\u0253\2\2\u0b0c\u0b0e\3\2\2\2\u0b0d\u0b0a\3\2\2\2\u0b0d\u0b0e"+
		"\3\2\2\2\u0b0e\u0b0f\3\2\2\2\u0b0f\u0b13\5\u0210\u0109\2\u0b10\u0b11\7"+
		"\u00ce\2\2\u0b11\u0b13\7\u0170\2\2\u0b12\u0af5\3\2\2\2\u0b12\u0aff\3\2"+
		"\2\2\u0b12\u0b09\3\2\2\2\u0b12\u0b10\3\2\2\2\u0b13\u00bf\3\2\2\2\u0b14"+
		"\u0b15\7\u0195\2\2\u0b15\u0b16\5\u00c2b\2\u0b16\u00c1\3\2\2\2\u0b17\u0b18"+
		"\5\u0210\u0109\2\u0b18\u0b19\5\u01ee\u00f8\2\u0b19\u0b20\3\2\2\2\u0b1a"+
		"\u0b1b\5,\27\2\u0b1b\u0b1c\t\23\2\2\u0b1c\u0b1d\7\u01b6\2\2\u0b1d\u0b1e"+
		"\5\u02b6\u015c\2\u0b1e\u0b20\3\2\2\2\u0b1f\u0b17\3\2\2\2\u0b1f\u0b1a\3"+
		"\2\2\2\u0b20\u00c3\3\2\2\2\u0b21\u0b22\7\u00fe\2\2\u0b22\u0b23\5\u0210"+
		"\u0109\2\u0b23\u0b24\5\u00c8e\2\u0b24\u00c5\3\2\2\2\u0b25\u0b26\7\u00a2"+
		"\2\2\u0b26\u0b43\5\u00dco\2\u0b27\u0b28\7\177\2\2\u0b28\u0b29\7\u009d"+
		"\2\2\u0b29\u0b43\7\u0268\2\2\u0b2a\u0b2b\t#\2\2\u0b2b\u0b2c\5\u026a\u0136"+
		"\2\u0b2c\u0b2d\5\u0142\u00a2\2\u0b2d\u0b43\3\2\2\2\u0b2e\u0b2f\7\u0102"+
		"\2\2\u0b2f\u0b30\7\u00de\2\2\u0b30\u0b3d\7C\2\2\u0b31\u0b32\7\u0102\2"+
		"\2\u0b32\u0b33\7\u00de\2\2\u0b33\u0b3d\7(\2\2\u0b34\u0b3d\7G\2\2\u0b35"+
		"\u0b3d\7\u00db\2\2\u0b36\u0b3d\7\u00e1\2\2\u0b37\u0b3d\7\u0109\2\2\u0b38"+
		"\u0b3a\7\u008c\2\2\u0b39\u0b38\3\2\2\2\u0b39\u0b3a\3\2\2\2\u0b3a\u0b3b"+
		"\3\2\2\2\u0b3b\u0b3d\7\u011a\2\2\u0b3c\u0b2e\3\2\2\2\u0b3c\u0b31\3\2\2"+
		"\2\u0b3c\u0b34\3\2\2\2\u0b3c\u0b35\3\2\2\2\u0b3c\u0b36\3\2\2\2\u0b3c\u0b37"+
		"\3\2\2\2\u0b3c\u0b39\3\2\2\2\u0b3d\u0b3f\3\2\2\2\u0b3e\u0b40\5\u0198\u00cd"+
		"\2\u0b3f\u0b3e\3\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b41\3\2\2\2\u0b41\u0b43"+
		"\5\u026a\u0136\2\u0b42\u0b25\3\2\2\2\u0b42\u0b27\3\2\2\2\u0b42\u0b2a\3"+
		"\2\2\2\u0b42\u0b3c\3\2\2\2\u0b43\u0b44\3\2\2\2\u0b44\u0b45\5\u01ec\u00f7"+
		"\2\u0b45\u00c7\3\2\2\2\u0b46\u0b5a\5\u01ee\u00f8\2\u0b47\u0b5a\5\u01ec"+
		"\u00f7\2\u0b48\u0b49\7\u00e6\2\2\u0b49\u0b4a\7\u024b\2\2\u0b4a\u0b4f\5"+
		"\u00a8U\2\u0b4b\u0b4c\7\u0245\2\2\u0b4c\u0b4e\5\u00a8U\2\u0b4d\u0b4b\3"+
		"\2\2\2\u0b4e\u0b51\3\2\2\2\u0b4f\u0b4d\3\2\2\2\u0b4f\u0b50\3\2\2\2\u0b50"+
		"\u0b52\3\2\2\2\u0b51\u0b4f\3\2\2\2\u0b52\u0b53\7\u024c\2\2\u0b53\u0b5a"+
		"\3\2\2\2\u0b54\u0b55\7\u00ce\2\2\u0b55\u0b56\7\u024b\2\2\u0b56\u0b57\5"+
		"\u02b6\u015c\2\u0b57\u0b58\7\u024c\2\2\u0b58\u0b5a\3\2\2\2\u0b59\u0b46"+
		"\3\2\2\2\u0b59\u0b47\3\2\2\2\u0b59\u0b48\3\2\2\2\u0b59\u0b54\3\2\2\2\u0b5a"+
		"\u00c9\3\2\2\2\u0b5b\u0b5c\7\u00f2\2\2\u0b5c\u0b60\5\u026a\u0136\2\u0b5d"+
		"\u0b61\5\u01ee\u00f8\2\u0b5e\u0b61\5\u01f0\u00f9\2\u0b5f\u0b61\5\u01ec"+
		"\u00f7\2\u0b60\u0b5d\3\2\2\2\u0b60\u0b5e\3\2\2\2\u0b60\u0b5f\3\2\2\2\u0b61"+
		"\u00cb\3\2\2\2\u0b62\u0b63\7\u0192\2\2\u0b63\u0b64\7\66\2\2\u0b64\u0b65"+
		"\7\u0121\2\2\u0b65\u0b66\5\u0210\u0109\2\u0b66\u0b67\5\u00ceh\2\u0b67"+
		"\u00cd\3\2\2\2\u0b68\u0b69\7d\2\2\u0b69\u0b6d\5\u0220\u0111\2\u0b6a\u0b6b"+
		"\7\u0098\2\2\u0b6b\u0b6d\7d\2\2\u0b6c\u0b68\3\2\2\2\u0b6c\u0b6a\3\2\2"+
		"\2\u0b6c\u0b6d\3\2\2\2\u0b6d\u0b72\3\2\2\2\u0b6e\u0b6f\7\u0116\2\2\u0b6f"+
		"\u0b73\5\u0220\u0111\2\u0b70\u0b71\7\u0098\2\2\u0b71\u0b73\7\u0116\2\2"+
		"\u0b72\u0b6e\3\2\2\2\u0b72\u0b70\3\2\2\2\u0b72\u0b73\3\2\2\2\u0b73\u0b75"+
		"\3\2\2\2\u0b74\u0b76\5\u01bc\u00df\2\u0b75\u0b74\3\2\2\2\u0b75\u0b76\3"+
		"\2\2\2\u0b76\u0b7a\3\2\2\2\u0b77\u0b7a\5\u01ec\u00f7\2\u0b78\u0b7a\5\u01ee"+
		"\u00f8\2\u0b79\u0b6c\3\2\2\2\u0b79\u0b77\3\2\2\2\u0b79\u0b78\3\2\2\2\u0b7a"+
		"\u00cf\3\2\2\2\u0b7b\u0b7c\7\u00a2\2\2\u0b7c\u0b7d\5\u00dco\2\u0b7d\u0b7e"+
		"\5\u00d2j\2\u0b7e\u00d1\3\2\2\2\u0b7f\u0b8d\5\u01f0\u00f9\2\u0b80\u0b81"+
		"\7\u00e6\2\2\u0b81\u0b82\7\u024b\2\2\u0b82\u0b87\5\u00d4k\2\u0b83\u0b84"+
		"\7\u0245\2\2\u0b84\u0b86\5\u00d4k\2\u0b85\u0b83\3\2\2\2\u0b86\u0b89\3"+
		"\2\2\2\u0b87\u0b85\3\2\2\2\u0b87\u0b88\3\2\2\2\u0b88\u0b8a\3\2\2\2\u0b89"+
		"\u0b87\3\2\2\2\u0b8a\u0b8b\7\u024c\2\2\u0b8b\u0b8d\3\2\2\2\u0b8c\u0b7f"+
		"\3\2\2\2\u0b8c\u0b80\3\2\2\2\u0b8d\u00d3\3\2\2\2\u0b8e\u0b8f\t$\2\2\u0b8f"+
		"\u0b90\7\u0242\2\2\u0b90\u0b91\5\u026a\u0136\2\u0b91\u00d5\3\2\2\2\u0b92"+
		"\u0b93\7\u01b6\2\2\u0b93\u0b95\7\u008a\2\2\u0b94\u0b96\5\u0198\u00cd\2"+
		"\u0b95\u0b94\3\2\2\2\u0b95\u0b96\3\2\2\2\u0b96\u0b97\3\2\2\2\u0b97\u0b9a"+
		"\7\u0191\2\2\u0b98\u0b9b\5,\27\2\u0b99\u0b9b\7\u01b6\2\2\u0b9a\u0b98\3"+
		"\2\2\2\u0b9a\u0b99\3\2\2\2\u0b9b\u0b9c\3\2\2\2\u0b9c\u0b9d\7\u00e4\2\2"+
		"\u0b9d\u0b9e\5\u0210\u0109\2\u0b9e\u00d7\3\2\2\2\u0b9f\u0ba0\7\u00a9\2"+
		"\2\u0ba0\u0ba1\7\26\2\2\u0ba1\u0ba6\5,\27\2\u0ba2\u0ba3\7\u0245\2\2\u0ba3"+
		"\u0ba5\5,\27\2\u0ba4\u0ba2\3\2\2\2\u0ba5\u0ba8\3\2\2\2\u0ba6\u0ba4\3\2"+
		"\2\2\u0ba6\u0ba7\3\2\2\2\u0ba7\u0baa\3\2\2\2\u0ba8\u0ba6\3\2\2\2\u0ba9"+
		"\u0bab\5\u01f8\u00fd\2\u0baa\u0ba9\3\2\2\2\u0baa\u0bab\3\2\2\2\u0bab\u00d9"+
		"\3\2\2\2\u0bac\u0bae\7\u00a2\2\2\u0bad\u0baf\5\u0198\u00cd\2\u0bae\u0bad"+
		"\3\2\2\2\u0bae\u0baf\3\2\2\2\u0baf\u0bb0\3\2\2\2\u0bb0\u0bb5\5\u00dco"+
		"\2\u0bb1\u0bb2\7\u0245\2\2\u0bb2\u0bb4\5\u00dco\2\u0bb3\u0bb1\3\2\2\2"+
		"\u0bb4\u0bb7\3\2\2\2\u0bb5\u0bb3\3\2\2\2\u0bb5\u0bb6\3\2\2\2\u0bb6\u0bb9"+
		"\3\2\2\2\u0bb7\u0bb5\3\2\2\2\u0bb8\u0bba\5\u01f8\u00fd\2\u0bb9\u0bb8\3"+
		"\2\2\2\u0bb9\u0bba\3\2\2\2\u0bba\u00db\3\2\2\2\u0bbb\u0bbc\5\u00fe\u0080"+
		"\2\u0bbc\u0bbf\7\u024b\2\2\u0bbd\u0bc0\5\u0224\u0113\2\u0bbe\u0bc0\7\u013c"+
		"\2\2\u0bbf\u0bbd\3\2\2\2\u0bbf\u0bbe\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1"+
		"\u0bc4\7\u0245\2\2\u0bc2\u0bc5\5\u0224\u0113\2\u0bc3\u0bc5\7\u013c\2\2"+
		"\u0bc4\u0bc2\3\2\2\2\u0bc4\u0bc3\3\2\2\2\u0bc5\u0bc6\3\2\2\2\u0bc6\u0bc7"+
		"\7\u024c\2\2\u0bc7\u00dd\3\2\2\2\u0bc8\u0bc9\7\u017f\2\2\u0bc9\u0bcb\5"+
		"\u0210\u0109\2\u0bca\u0bc8\3\2\2\2\u0bca\u0bcb\3\2\2\2\u0bcb\u0bd5\3\2"+
		"\2\2\u0bcc\u0bcd\7\u017c\2\2\u0bcd\u0bce\7\u024b\2\2\u0bce\u0bcf\5\u0230"+
		"\u0119\2\u0bcf\u0bd0\7\u024c\2\2\u0bd0\u0bd6\3\2\2\2\u0bd1\u0bd3\7\u01a0"+
		"\2\2\u0bd2\u0bd1\3\2\2\2\u0bd2\u0bd3\3\2\2\2\u0bd3\u0bd4\3\2\2\2\u0bd4"+
		"\u0bd6\7\u01a1\2\2\u0bd5\u0bcc\3\2\2\2\u0bd5\u0bd2\3\2\2\2\u0bd6\u00df"+
		"\3\2\2\2\u0bd7\u0bd8\7\u01a5\2\2\u0bd8\u0bda\7\u00cc\2\2\u0bd9\u0bd7\3"+
		"\2\2\2\u0bd9\u0bda\3\2\2\2\u0bda\u0bdb\3\2\2\2\u0bdb\u0bdc\7\u0105\2\2"+
		"\u0bdc\u0bdd\7\u0191\2\2\u0bdd\u0bde\5\u0224\u0113\2\u0bde\u0bdf\7~\2"+
		"\2\u0bdf\u0be0\5\u0210\u0109\2\u0be0\u0be1\7\u024b\2\2\u0be1\u0be2\7\u0193"+
		"\2\2\u0be2\u0be3\7\u00ed\2\2\u0be3\u0be4\7\u01bc\2\2\u0be4\u0be5\7^\2"+
		"\2\u0be5\u0be6\5\u0140\u00a1\2\u0be6\u0be7\7\u0245\2\2\u0be7\u0be8\7\u01b1"+
		"\2\2\u0be8\u0be9\7\u00ed\2\2\u0be9\u0bea\7\u01bc\2\2\u0bea\u0beb\7^\2"+
		"\2\u0beb\u0bec\5\u0140\u00a1\2\u0bec\u0bed\7\u024c\2\2\u0bed\u00e1\3\2"+
		"\2\2\u0bee\u0bef\7\5\2\2\u0bef\u0bf0\7\u008e\2\2\u0bf0\u0bf1\5\u0210\u0109"+
		"\2\u0bf1\u0bf2\7\u0109\2\2\u0bf2\u0bf3\t%\2\2\u0bf3\u0bf4\7d\2\2\u0bf4"+
		"\u0bf5\5\u026a\u0136\2\u0bf5\u00e3\3\2\2\2\u0bf6\u0bf7\t\35\2\2\u0bf7"+
		"\u0c02\5\u0210\u0109\2\u0bf8\u0bfa\7\u01bc\2\2\u0bf9\u0bf8\3\2\2\2\u0bf9"+
		"\u0bfa\3\2\2\2\u0bfa\u0bfb\3\2\2\2\u0bfb\u0bff\5\u00e6t\2\u0bfc\u0bfe"+
		"\5\u00e6t\2\u0bfd\u0bfc\3\2\2\2\u0bfe\u0c01\3\2\2\2\u0bff\u0bfd\3\2\2"+
		"\2\u0bff\u0c00\3\2\2\2\u0c00\u0c03\3\2\2\2\u0c01\u0bff\3\2\2\2\u0c02\u0bf9"+
		"\3\2\2\2\u0c02\u0c03\3\2\2\2\u0c03\u00e5\3\2\2\2\u0c04\u0c08\5\u00eav"+
		"\2\u0c05\u0c08\5\u00ecw\2\u0c06\u0c08\5\u00eex\2\u0c07\u0c04\3\2\2\2\u0c07"+
		"\u0c05\3\2\2\2\u0c07\u0c06\3\2\2\2\u0c08\u00e7\3\2\2\2\u0c09\u0c0c\5\u00ea"+
		"v\2\u0c0a\u0c0c\5\u00ecw\2\u0c0b\u0c09\3\2\2\2\u0c0b\u0c0a\3\2\2\2\u0c0c"+
		"\u00e9\3\2\2\2\u0c0d\u0c23\7\u0218\2\2\u0c0e\u0c23\7\u01fa\2\2\u0c0f\u0c23"+
		"\7\u01c8\2\2\u0c10\u0c23\7\u01f5\2\2\u0c11\u0c23\7\u01c9\2\2\u0c12\u0c23"+
		"\7\u01f6\2\2\u0c13\u0c23\7s\2\2\u0c14\u0c23\7\u01f7\2\2\u0c15\u0c23\7"+
		"\u01e7\2\2\u0c16\u0c23\7\u01f8\2\2\u0c17\u0c19\7M\2\2\u0c18\u0c17\3\2"+
		"\2\2\u0c18\u0c19\3\2\2\2\u0c19\u0c1a\3\2\2\2\u0c1a\u0c1d\7\u00b0\2\2\u0c1b"+
		"\u0c1e\7\u026d\2\2\u0c1c\u0c1e\7\u01a1\2\2\u0c1d\u0c1b\3\2\2\2\u0c1d\u0c1c"+
		"\3\2\2\2\u0c1e\u0c23\3\2\2\2\u0c1f\u0c20\7\u0114\2\2\u0c20\u0c21\7\u0111"+
		"\2\2\u0c21\u0c23\7\u026d\2\2\u0c22\u0c0d\3\2\2\2\u0c22\u0c0e\3\2\2\2\u0c22"+
		"\u0c0f\3\2\2\2\u0c22\u0c10\3\2\2\2\u0c22\u0c11\3\2\2\2\u0c22\u0c12\3\2"+
		"\2\2\u0c22\u0c13\3\2\2\2\u0c22\u0c14\3\2\2\2\u0c22\u0c15\3\2\2\2\u0c22"+
		"\u0c16\3\2\2\2\u0c22\u0c18\3\2\2\2\u0c22\u0c1f\3\2\2\2\u0c23\u00eb\3\2"+
		"\2\2\u0c24\u0c2c\7\u0206\2\2\u0c25\u0c2c\7\u01f9\2\2\u0c26\u0c2c\7\u01c0"+
		"\2\2\u0c27\u0c2c\7\u01f4\2\2\u0c28\u0c29\7*\2\2\u0c29\u0c2a\7\u019d\2"+
		"\2\u0c2a\u0c2c\5\u0150\u00a9\2\u0c2b\u0c24\3\2\2\2\u0c2b\u0c25\3\2\2\2"+
		"\u0c2b\u0c26\3\2\2\2\u0c2b\u0c27\3\2\2\2\u0c2b\u0c28\3\2\2\2\u0c2c\u00ed"+
		"\3\2\2\2\u0c2d\u0c2e\7\u00fb\2\2\u0c2e\u0c3a\5\u0230\u0119\2\u0c2f\u0c30"+
		"\7\u0197\2\2\u0c30\u0c37\7\u00d3\2\2\u0c31\u0c32\7\u0197\2\2\u0c32\u0c37"+
		"\7\u0195\2\2\u0c33\u0c37\7\u00d3\2\2\u0c34\u0c37\7\b\2\2\u0c35\u0c37\7"+
		"\u01b6\2\2\u0c36\u0c2f\3\2\2\2\u0c36\u0c31\3\2\2\2\u0c36\u0c33\3\2\2\2"+
		"\u0c36\u0c34\3\2\2\2\u0c36\u0c35\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38\u0c3a"+
		"\5\u02b6\u015c\2\u0c39\u0c2d\3\2\2\2\u0c39\u0c36\3\2\2\2\u0c3a\u00ef\3"+
		"\2\2\2\u0c3b\u0c3c\7\u0195\2\2\u0c3c\u0c45\5\u0210\u0109\2\u0c3d\u0c3f"+
		"\7\u01bc\2\2\u0c3e\u0c3d\3\2\2\2\u0c3e\u0c3f\3\2\2\2\u0c3f\u0c41\3\2\2"+
		"\2\u0c40\u0c42\5\u00f2z\2\u0c41\u0c40\3\2\2\2\u0c42\u0c43\3\2\2\2\u0c43"+
		"\u0c41\3\2\2\2\u0c43\u0c44\3\2\2\2\u0c44\u0c46\3\2\2\2\u0c45\u0c3e\3\2"+
		"\2\2\u0c45\u0c46\3\2\2\2\u0c46\u00f1\3\2\2\2\u0c47\u0c4a\5\u00eav\2\u0c48"+
		"\u0c4a\5\u00eex\2\u0c49\u0c47\3\2\2\2\u0c49\u0c48\3\2\2\2\u0c4a\u00f3"+
		"\3\2\2\2\u0c4b\u0c4c\7\u00fe\2\2\u0c4c\u0c4f\5\u0210\u0109\2\u0c4d\u0c4e"+
		"\7\u00aa\2\2\u0c4e\u0c50\5,\27\2\u0c4f\u0c4d\3\2\2\2\u0c4f\u0c50\3\2\2"+
		"\2\u0c50\u0c51\3\2\2\2\u0c51\u0c52\7\u0086\2\2\u0c52\u0c5f\7\u026d\2\2"+
		"\u0c53\u0c54\7\u01bc\2\2\u0c54\u0c55\7\u024b\2\2\u0c55\u0c5a\5\u00a8U"+
		"\2\u0c56\u0c57\7\u0245\2\2\u0c57\u0c59\5\u00a8U\2\u0c58\u0c56\3\2\2\2"+
		"\u0c59\u0c5c\3\2\2\2\u0c5a\u0c58\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u0c5d"+
		"\3\2\2\2\u0c5c\u0c5a\3\2\2\2\u0c5d\u0c5e\7\u024c\2\2\u0c5e\u0c60\3\2\2"+
		"\2\u0c5f\u0c53\3\2\2\2\u0c5f\u0c60\3\2\2\2\u0c60\u00f5\3\2\2\2\u0c61\u0c63"+
		"\7\u00f2\2\2\u0c62\u0c64\5\u019a\u00ce\2\u0c63\u0c62\3\2\2\2\u0c63\u0c64"+
		"\3\2\2\2\u0c64\u0c65\3\2\2\2\u0c65\u0c6a\5\u026a\u0136\2\u0c66\u0c67\7"+
		"\u024b\2\2\u0c67\u0c68\5\u02b6\u015c\2\u0c68\u0c69\7\u024c\2\2\u0c69\u0c6b"+
		"\3\2\2\2\u0c6a\u0c66\3\2\2\2\u0c6a\u0c6b\3\2\2\2\u0c6b\u0c6c\3\2\2\2\u0c6c"+
		"\u0c6d\7\u01a3\2\2\u0c6d\u0c6e\5\u0210\u0109\2\u0c6e\u0c6f\7\u0245\2\2"+
		"\u0c6f\u0c70\5\u02b6\u015c\2\u0c70\u0c71\7\u0193\2\2\u0c71\u0c72\5\u026a"+
		"\u0136\2\u0c72\u00f7\3\2\2\2\u0c73\u0c74\7\u0192\2\2\u0c74\u0c75\7\66"+
		"\2\2\u0c75\u0c76\7\u0121\2\2\u0c76\u0c7b\5\u0210\u0109\2\u0c77\u0c78\7"+
		"d\2\2\u0c78\u0c7c\5\u0220\u0111\2\u0c79\u0c7a\7\u0098\2\2\u0c7a\u0c7c"+
		"\7d\2\2\u0c7b\u0c77\3\2\2\2\u0c7b\u0c79\3\2\2\2\u0c7b\u0c7c\3\2\2\2\u0c7c"+
		"\u0c81\3\2\2\2\u0c7d\u0c7e\7\u0116\2\2\u0c7e\u0c82\5\u0220\u0111\2\u0c7f"+
		"\u0c80\7\u0098\2\2\u0c80\u0c82\7\u0116\2\2\u0c81\u0c7d\3\2\2\2\u0c81\u0c7f"+
		"\3\2\2\2\u0c81\u0c82\3\2\2\2\u0c82\u0c8f\3\2\2\2\u0c83\u0c84\7\u00a4\2"+
		"\2\u0c84\u0c85\7\u024b\2\2\u0c85\u0c8a\5\u00fa~\2\u0c86\u0c87\7\u0245"+
		"\2\2\u0c87\u0c89\5\u00fa~\2\u0c88\u0c86\3\2\2\2\u0c89\u0c8c\3\2\2\2\u0c8a"+
		"\u0c88\3\2\2\2\u0c8a\u0c8b\3\2\2\2\u0c8b\u0c8d\3\2\2\2\u0c8c\u0c8a\3\2"+
		"\2\2\u0c8d\u0c8e\7\u024c\2\2\u0c8e\u0c90\3\2\2\2\u0c8f\u0c83\3\2\2\2\u0c8f"+
		"\u0c90\3\2\2\2\u0c90\u00f9\3\2\2\2\u0c91\u0c92\5\u0210\u0109\2\u0c92\u0c93"+
		"\7\u026d\2\2\u0c93\u00fb\3\2\2\2\u0c94\u0c95\7\u00a2\2\2\u0c95\u0c96\5"+
		"\u00fe\u0080\2\u0c96\u0c97\7\u024b\2\2\u0c97\u0c9c\5\u0100\u0081\2\u0c98"+
		"\u0c99\7\u0245\2\2\u0c99\u0c9b\5\u0100\u0081\2\u0c9a\u0c98\3\2\2\2\u0c9b"+
		"\u0c9e\3\2\2\2\u0c9c\u0c9a\3\2\2\2\u0c9c\u0c9d\3\2\2\2\u0c9d\u0c9f\3\2"+
		"\2\2\u0c9e\u0c9c\3\2\2\2\u0c9f\u0ca0\7\u024c\2\2\u0ca0\u00fd\3\2\2\2\u0ca1"+
		"\u0ca2\5\u0210\u0109\2\u0ca2\u0ca3\7\u0253\2\2\u0ca3\u0ca5\3\2\2\2\u0ca4"+
		"\u0ca1\3\2\2\2\u0ca4\u0ca5\3\2\2\2\u0ca5\u0ca6\3\2\2\2\u0ca6\u0ca7\5\u01d2"+
		"\u00ea\2\u0ca7\u00ff\3\2\2\2\u0ca8\u0ca9\t\22\2\2\u0ca9\u0caa\7\u0242"+
		"\2\2\u0caa\u0cba\5\u026a\u0136\2\u0cab\u0cac\7\u00d0\2\2\u0cac\u0cad\7"+
		"\u0242\2\2\u0cad\u0cba\5\u026a\u0136\2\u0cae\u0caf\7\u0165\2\2\u0caf\u0cb0"+
		"\7\u0242\2\2\u0cb0\u0cba\5\u026a\u0136\2\u0cb1\u0cb2\t&\2\2\u0cb2\u0cb3"+
		"\7\u0242\2\2\u0cb3\u0cba\5\u0224\u0113\2\u0cb4\u0cb5\t\'\2\2\u0cb5\u0cb6"+
		"\7\u0242\2\2\u0cb6\u0cba\5\u0236\u011c\2\u0cb7\u0cba\7\u01d8\2\2\u0cb8"+
		"\u0cba\7\u01e9\2\2\u0cb9\u0ca8\3\2\2\2\u0cb9\u0cab\3\2\2\2\u0cb9\u0cae"+
		"\3\2\2\2\u0cb9\u0cb1\3\2\2\2\u0cb9\u0cb4\3\2\2\2\u0cb9\u0cb7\3\2\2\2\u0cb9"+
		"\u0cb8\3\2\2\2\u0cba\u0101\3\2\2\2\u0cbb\u0cbc\7\u01a5\2\2\u0cbc\u0cbe"+
		"\7\u00cc\2\2\u0cbd\u0cbb\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe\u0cbf\3\2\2"+
		"\2\u0cbf\u0cc0\7\n\2\2\u0cc0\u0cc2\5\u026a\u0136\2\u0cc1\u0cc3\5\u0142"+
		"\u00a2\2\u0cc2\u0cc1\3\2\2\2\u0cc2\u0cc3\3\2\2\2\u0cc3\u0cc4\3\2\2\2\u0cc4"+
		"\u0cca\7\u024b\2\2\u0cc5\u0cc6\7\u01be\2\2\u0cc6\u0cc7\7\u0242\2\2\u0cc7"+
		"\u0cc8\5\u0224\u0113\2\u0cc8\u0cc9\7\u0245\2\2\u0cc9\u0ccb\3\2\2\2\u0cca"+
		"\u0cc5\3\2\2\2\u0cca\u0ccb\3\2\2\2\u0ccb\u0ccc\3\2\2\2\u0ccc\u0ccd\7\u020e"+
		"\2\2\u0ccd\u0cce\7\u0242\2\2\u0cce\u0ccf\5\u026a\u0136\2\u0ccf\u0cd0\7"+
		"\u0245\2\2\u0cd0\u0cd1\7\u0213\2\2\u0cd1\u0cd2\7\u0242\2\2\u0cd2\u0cd7"+
		"\5\u0224\u0113\2\u0cd3\u0cd4\7\u0245\2\2\u0cd4\u0cd6\5\u0104\u0083\2\u0cd5"+
		"\u0cd3\3\2\2\2\u0cd6\u0cd9\3\2\2\2\u0cd7\u0cd5\3\2\2\2\u0cd7\u0cd8\3\2"+
		"\2\2\u0cd8\u0cda\3\2\2\2\u0cd9\u0cd7\3\2\2\2\u0cda\u0cdb\7\u024c\2\2\u0cdb"+
		"\u0103\3\2\2\2\u0cdc\u0cdd\7\u0212\2\2\u0cdd\u0cde\7\u0242\2\2\u0cde\u0d10"+
		"\7\u0268\2\2\u0cdf\u0ce0\7\u01cf\2\2\u0ce0\u0ce1\7\u0242\2\2\u0ce1\u0d10"+
		"\5\u026a\u0136\2\u0ce2\u0d10\7\u01d0\2\2\u0ce3\u0ce4\7\u01d1\2\2\u0ce4"+
		"\u0ce5\7\u0242\2\2\u0ce5\u0d10\t(\2\2\u0ce6\u0ce7\7\u01c4\2\2\u0ce7\u0ce8"+
		"\7\u0242\2\2\u0ce8\u0d10\5\u026a\u0136\2\u0ce9\u0cea\7\u020c\2\2\u0cea"+
		"\u0ceb\7\u0242\2\2\u0ceb\u0d10\5\u026a\u0136\2\u0cec\u0ced\7\u01ca\2\2"+
		"\u0ced\u0cee\7\u0242\2\2\u0cee\u0d10\5\u026a\u0136\2\u0cef\u0cf0\7\u01dd"+
		"\2\2\u0cf0\u0cf1\7\u0242\2\2\u0cf1\u0d10\5\u0230\u0119\2\u0cf2\u0cf3\7"+
		"\u01f0\2\2\u0cf3\u0cf4\7\u0242\2\2\u0cf4\u0d10\5\u026a\u0136\2\u0cf5\u0cf6"+
		"\7\u01ee\2\2\u0cf6\u0cf7\7\u0242\2\2\u0cf7\u0d10\5\u026a\u0136\2\u0cf8"+
		"\u0cf9\7\u01f2\2\2\u0cf9\u0cfa\7\u0242\2\2\u0cfa\u0d10\5\u0224\u0113\2"+
		"\u0cfb\u0cfc\7\u01f1\2\2\u0cfc\u0cfd\7\u0242\2\2\u0cfd\u0d10\7\u0268\2"+
		"\2\u0cfe\u0cff\7\u01ea\2\2\u0cff\u0d00\7\u0242\2\2\u0d00\u0d10\5\u026a"+
		"\u0136\2\u0d01\u0d10\7\u01eb\2\2\u0d02\u0d03\7\u01ec\2\2\u0d03\u0d04\7"+
		"\u0242\2\2\u0d04\u0d10\t(\2\2\u0d05\u0d06\7\u01ed\2\2\u0d06\u0d07\7\u0242"+
		"\2\2\u0d07\u0d10\5\u0230\u0119\2\u0d08\u0d09\7\u0211\2\2\u0d09\u0d0a\7"+
		"\u0242\2\2\u0d0a\u0d10\5\u0236\u011c\2\u0d0b\u0d0c\7\u00ab\2\2\u0d0c\u0d0d"+
		"\7\u0242\2\2\u0d0d\u0d10\t\33\2\2\u0d0e\u0d10\7\u01da\2\2\u0d0f\u0cdc"+
		"\3\2\2\2\u0d0f\u0cdf\3\2\2\2\u0d0f\u0ce2\3\2\2\2\u0d0f\u0ce3\3\2\2\2\u0d0f"+
		"\u0ce6\3\2\2\2\u0d0f\u0ce9\3\2\2\2\u0d0f\u0cec\3\2\2\2\u0d0f\u0cef\3\2"+
		"\2\2\u0d0f\u0cf2\3\2\2\2\u0d0f\u0cf5\3\2\2\2\u0d0f\u0cf8\3\2\2\2\u0d0f"+
		"\u0cfb\3\2\2\2\u0d0f\u0cfe\3\2\2\2\u0d0f\u0d01\3\2\2\2\u0d0f\u0d02\3\2"+
		"\2\2\u0d0f\u0d05\3\2\2\2\u0d0f\u0d08\3\2\2\2\u0d0f\u0d0b\3\2\2\2\u0d0f"+
		"\u0d0e\3\2\2\2\u0d10\u0105\3\2\2\2\u0d11\u0d12\7\u00e6\2\2\u0d12\u0d13"+
		"\5\u0108\u0085\2\u0d13\u0107\3\2\2\2\u0d14\u0d17\7+\2\2\u0d15\u0d18\7"+
		"\u0170\2\2\u0d16\u0d18\5\u01da\u00ee\2\u0d17\u0d15\3\2\2\2\u0d17\u0d16"+
		"\3\2\2\2\u0d18\u0d19\3\2\2\2\u0d19\u0d3a\t\31\2\2\u0d1a\u0d1b\7\u0104"+
		"\2\2\u0d1b\u0d20\5\26\f\2\u0d1c\u0d1d\7\u0245\2\2\u0d1d\u0d1f\5\26\f\2"+
		"\u0d1e\u0d1c\3\2\2\2\u0d1f\u0d22\3\2\2\2\u0d20\u0d1e\3\2\2\2\u0d20\u0d21"+
		"\3\2\2\2\u0d21\u0d3a\3\2\2\2\u0d22\u0d20\3\2\2\2\u0d23\u0d24\7\u0104\2"+
		"\2\u0d24\u0d25\7\u00ec\2\2\u0d25\u0d3a\7\u026d\2\2\u0d26\u0d27\7\u00e5"+
		"\2\2\u0d27\u0d28\7\36\2\2\u0d28\u0d29\7\u0176\2\2\u0d29\u0d2a\7\u0104"+
		"\2\2\u0d2a\u0d2f\5\26\f\2\u0d2b\u0d2c\7\u0245\2\2\u0d2c\u0d2e\5\26\f\2"+
		"\u0d2d\u0d2b\3\2\2\2\u0d2e\u0d31\3\2\2\2\u0d2f\u0d2d\3\2\2\2\u0d2f\u0d30"+
		"\3\2\2\2\u0d30\u0d3a\3\2\2\2\u0d31\u0d2f\3\2\2\2\u0d32\u0d34\t)\2\2\u0d33"+
		"\u0d32\3\2\2\2\u0d33\u0d34\3\2\2\2\u0d34\u0d35\3\2\2\2\u0d35\u0d3a\5\u010a"+
		"\u0086\2\u0d36\u0d37\7\u0123\2\2\u0d37\u0d38\7\u00a3\2\2\u0d38\u0d3a\t"+
		"*\2\2\u0d39\u0d14\3\2\2\2\u0d39\u0d1a\3\2\2\2\u0d39\u0d23\3\2\2\2\u0d39"+
		"\u0d26\3\2\2\2\u0d39\u0d33\3\2\2\2\u0d39\u0d36\3\2\2\2\u0d3a\u0109\3\2"+
		"\2\2\u0d3b\u0d3c\7\u00e5\2\2\u0d3c\u0d40\7\u0159\2\2\u0d3d\u0d41\7\u026d"+
		"\2\2\u0d3e\u0d41\5\u0210\u0109\2\u0d3f\u0d41\7\u0187\2\2\u0d40\u0d3d\3"+
		"\2\2\2\u0d40\u0d3e\3\2\2\2\u0d40\u0d3f\3\2\2\2\u0d41\u0d59\3\2\2\2\u0d42"+
		"\u0d43\7\u0148\2\2\u0d43\u0d48\7\u0126\2\2\u0d44\u0d49\7\u026d\2\2\u0d45"+
		"\u0d49\5\u0152\u00aa\2\u0d46\u0d49\7\u0085\2\2\u0d47\u0d49\7\u0187\2\2"+
		"\u0d48\u0d44\3\2\2\2\u0d48\u0d45\3\2\2\2\u0d48\u0d46\3\2\2\2\u0d48\u0d47"+
		"\3\2\2\2\u0d49\u0d59\3\2\2\2\u0d4a\u0d4b\5\u0210\u0109\2\u0d4b\u0d4c\7"+
		"\u0253\2\2\u0d4c\u0d4e\3\2\2\2\u0d4d\u0d4a\3\2\2\2\u0d4d\u0d4e\3\2\2\2"+
		"\u0d4e\u0d4f\3\2\2\2\u0d4f\u0d50\5\u0210\u0109\2\u0d50\u0d51\t\34\2\2"+
		"\u0d51\u0d52\5\u010c\u0087\2\u0d52\u0d59\3\2\2\2\u0d53\u0d56\7\u00d3\2"+
		"\2\u0d54\u0d57\5\u0210\u0109\2\u0d55\u0d57\7\u013c\2\2\u0d56\u0d54\3\2"+
		"\2\2\u0d56\u0d55\3\2\2\2\u0d57\u0d59\3\2\2\2\u0d58\u0d3b\3\2\2\2\u0d58"+
		"\u0d42\3\2\2\2\u0d58\u0d4d\3\2\2\2\u0d58\u0d53\3\2\2\2\u0d59\u010b\3\2"+
		"\2\2\u0d5a\u0d5f\5\u0230\u0119\2\u0d5b\u0d5c\7\u0245\2\2\u0d5c\u0d5e\5"+
		"\u0230\u0119\2\u0d5d\u0d5b\3\2\2\2\u0d5e\u0d61\3\2\2\2\u0d5f\u0d5d\3\2"+
		"\2\2\u0d5f\u0d60\3\2\2\2\u0d60\u0d64\3\2\2\2\u0d61\u0d5f\3\2\2\2\u0d62"+
		"\u0d64\7\u0187\2\2\u0d63\u0d5a\3\2\2\2\u0d63\u0d62\3\2\2\2\u0d64\u010d"+
		"\3\2\2\2\u0d65\u0d66\7\u01a5\2\2\u0d66\u0d68\7\u00cc\2\2\u0d67\u0d65\3"+
		"\2\2\2\u0d67\u0d68\3\2\2\2\u0d68\u0d69\3\2\2\2\u0d69\u0d6a\7\u00d9\2\2"+
		"\u0d6a\u0d6b\5\u0210\u0109\2\u0d6b\u0d6c\7\u0176\2\2\u0d6c\u0d6d\7\u01a3"+
		"\2\2\u0d6d\u0d6e\t+\2\2\u0d6e\u0d6f\7\u01b1\2\2\u0d6f\u0d72\5\u026a\u0136"+
		"\2\u0d70\u0d71\7\u01ba\2\2\u0d71\u0d73\5\u0230\u0119\2\u0d72\u0d70\3\2"+
		"\2\2\u0d72\u0d73\3\2\2\2\u0d73\u0d74\3\2\2\2\u0d74\u0d76\7\u018b\2\2\u0d75"+
		"\u0d77\t,\2\2\u0d76\u0d75\3\2\2\2\u0d76\u0d77\3\2\2\2\u0d77\u0d89\3\2"+
		"\2\2\u0d78\u0d8a\7\u0099\2\2\u0d79\u0d8a\5\u0110\u0089\2\u0d7a\u0d80\7"+
		"\u024b\2\2\u0d7b\u0d7c\5\u0110\u0089\2\u0d7c\u0d7d\7\u0244\2\2\u0d7d\u0d7f"+
		"\3\2\2\2\u0d7e\u0d7b\3\2\2\2\u0d7f\u0d82\3\2\2\2\u0d80\u0d7e\3\2\2\2\u0d80"+
		"\u0d81\3\2\2\2\u0d81\u0d83\3\2\2\2\u0d82\u0d80\3\2\2\2\u0d83\u0d85\5\u0110"+
		"\u0089\2\u0d84\u0d86\7\u0244\2\2\u0d85\u0d84\3\2\2\2\u0d85\u0d86\3\2\2"+
		"\2\u0d86\u0d87\3\2\2\2\u0d87\u0d88\7\u024c\2\2\u0d88\u0d8a\3\2\2\2\u0d89"+
		"\u0d78\3\2\2\2\u0d89\u0d79\3\2\2\2\u0d89\u0d7a\3\2\2\2\u0d8a\u010f\3\2"+
		"\2\2\u0d8b\u0d91\5\u0270\u0139\2\u0d8c\u0d91\5\u02a2\u0152\2\u0d8d\u0d91"+
		"\5\u02ae\u0158\2\u0d8e\u0d91\5\u02ac\u0157\2\u0d8f\u0d91\5\u02b2\u015a"+
		"\2\u0d90\u0d8b\3\2\2\2\u0d90\u0d8c\3\2\2\2\u0d90\u0d8d\3\2\2\2\u0d90\u0d8e"+
		"\3\2\2\2\u0d90\u0d8f\3\2\2\2\u0d91\u0111\3\2\2\2\u0d92\u0d94\7\u017f\2"+
		"\2\u0d93\u0d92\3\2\2\2\u0d93\u0d94\3\2\2\2\u0d94\u0d95\3\2\2\2\u0d95\u0d96"+
		"\7\u0106\2\2\u0d96\u0d9b\5\u0210\u0109\2\u0d97\u0d9c\7\24\2\2\u0d98\u0d99"+
		"\7y\2\2\u0d99\u0d9c\7\u009e\2\2\u0d9a\u0d9c\7\t\2\2\u0d9b\u0d97\3\2\2"+
		"\2\u0d9b\u0d98\3\2\2\2\u0d9b\u0d9a\3\2\2\2\u0d9c\u0dac\3\2\2\2\u0d9d\u0da1"+
		"\7x\2\2\u0d9e\u0da1\7>\2\2\u0d9f\u0da1\7\u0107\2\2\u0da0\u0d9d\3\2\2\2"+
		"\u0da0\u0d9e\3\2\2\2\u0da0\u0d9f\3\2\2\2\u0da1\u0da8\3\2\2\2\u0da2\u0da5"+
		"\7\u0112\2\2\u0da3\u0da4\7\u009e\2\2\u0da4\u0da6\5\u02b6\u015c\2\u0da5"+
		"\u0da3\3\2\2\2\u0da5\u0da6\3\2\2\2\u0da6\u0da8\3\2\2\2\u0da7\u0da0\3\2"+
		"\2\2\u0da7\u0da2\3\2\2\2\u0da8\u0daa\3\2\2\2\u0da9\u0dab\7\u01a5\2\2\u0daa"+
		"\u0da9\3\2\2\2\u0daa\u0dab\3\2\2\2\u0dab\u0dad\3\2\2\2\u0dac\u0da7\3\2"+
		"\2\2\u0dad\u0dae\3\2\2\2\u0dae\u0dac\3\2\2\2\u0dae\u0daf\3\2\2\2\u0daf"+
		"\u0db0\3\2\2\2\u0db0\u0db1\7\u01a3\2\2\u0db1\u0db4\5\u026a\u0136\2\u0db2"+
		"\u0db3\7\u0193\2\2\u0db3\u0db5\5\u026a\u0136\2\u0db4\u0db2\3\2\2\2\u0db4"+
		"\u0db5\3\2\2\2\u0db5\u0db7\3\2\2\2\u0db6\u0db8\5d\63\2\u0db7\u0db6\3\2"+
		"\2\2\u0db7\u0db8\3\2\2\2\u0db8\u0dba\3\2\2\2\u0db9\u0dbb\5f\64\2\u0dba"+
		"\u0db9\3\2\2\2\u0dba\u0dbb\3\2\2\2\u0dbb\u0dc1\3\2\2\2\u0dbc\u0dbd\7\u00c5"+
		"\2\2\u0dbd\u0dbf\5\u0114\u008b\2\u0dbe\u0dc0\5\u0114\u008b\2\u0dbf\u0dbe"+
		"\3\2\2\2\u0dbf\u0dc0\3\2\2\2\u0dc0\u0dc2\3\2\2\2\u0dc1\u0dbc\3\2\2\2\u0dc1"+
		"\u0dc2\3\2\2\2\u0dc2\u0dc8\3\2\2\2\u0dc3\u0dc5\7\u0191\2\2\u0dc4\u0dc6"+
		"\7J\2\2\u0dc5\u0dc4\3\2\2\2\u0dc5\u0dc6\3\2\2\2\u0dc6\u0dc7\3\2\2\2\u0dc7"+
		"\u0dc9\t-\2\2\u0dc8\u0dc3\3\2\2\2\u0dc8\u0dc9\3\2\2\2\u0dc9\u0dcb\3\2"+
		"\2\2\u0dca\u0dcc\5\u0116\u008c\2\u0dcb\u0dca\3\2\2\2\u0dcb\u0dcc\3\2\2"+
		"\2\u0dcc\u0dcd\3\2\2\2\u0dcd\u0dce\7T\2\2\u0dce\u0dcf\t\22\2\2\u0dcf\u0dd0"+
		"\5\u0246\u0124\2\u0dd0\u0113\3\2\2\2\u0dd1\u0dd2\t.\2\2\u0dd2\u0dd4\7"+
		"\u01af\2\2\u0dd3\u0dd5\7\u0176\2\2\u0dd4\u0dd3\3\2\2\2\u0dd4\u0dd5\3\2"+
		"\2\2\u0dd5\u0dd6\3\2\2\2\u0dd6\u0dd7\5\u0210\u0109\2\u0dd7\u0115\3\2\2"+
		"\2\u0dd8\u0dd9\7\u01b9\2\2\u0dd9\u0dda\7\u024b\2\2\u0dda\u0ddb\5\u0230"+
		"\u0119\2\u0ddb\u0ddc\7\u024c\2\2\u0ddc\u0117\3\2\2\2\u0ddd\u0de3\7\u0194"+
		"\2\2\u0dde\u0de0\7\u00d2\2\2\u0ddf\u0de1\5t;\2\u0de0\u0ddf\3\2\2\2\u0de0"+
		"\u0de1\3\2\2\2\u0de1\u0de3\3\2\2\2\u0de2\u0ddd\3\2\2\2\u0de2\u0dde\3\2"+
		"\2\2\u0de3\u0de6\3\2\2\2\u0de4\u0de7\5\u0120\u0091\2\u0de5\u0de7\5\u011c"+
		"\u008f\2\u0de6\u0de4\3\2\2\2\u0de6\u0de5\3\2\2\2\u0de7\u0de8\3\2\2\2\u0de8"+
		"\u0de9\7\u01a3\2\2\u0de9\u0dea\5\u011a\u008e\2\u0dea\u0deb\t/\2\2\u0deb"+
		"\u0df0\5\u012a\u0096\2\u0dec\u0ded\7\u01bc\2\2\u0ded\u0dee\7\u0194\2\2"+
		"\u0dee\u0df1\7\u00a3\2\2\u0def\u0df1\5\u01f8\u00fd\2\u0df0\u0dec\3\2\2"+
		"\2\u0df0\u0def\3\2\2\2\u0df0\u0df1\3\2\2\2\u0df1\u0df4\3\2\2\2\u0df2\u0df4"+
		"\5\u0124\u0093\2\u0df3\u0de2\3\2\2\2\u0df3\u0df2\3\2\2\2\u0df4\u0119\3"+
		"\2\2\2\u0df5\u0df7\7\u01af\2\2\u0df6\u0df5\3\2\2\2\u0df6\u0df7\3\2\2\2"+
		"\u0df7\u0df8\3\2\2\2\u0df8\u0e27\5\u01da\u00ee\2\u0df9\u0dfa\7\u00e1\2"+
		"\2\u0dfa\u0e27\5\u01da\u00ee\2\u0dfb\u0dfc\7\67\2\2\u0dfc\u0e27\5\u01da"+
		"\u00ee\2\u0dfd\u0dfe\7G\2\2\u0dfe\u0e27\5\u01da\u00ee\2\u0dff\u0e00\7"+
		"\u0192\2\2\u0e00\u0e01\7\66\2\2\u0e01\u0e02\7\u0121\2\2\u0e02\u0e27\5"+
		"\u01da\u00ee\2\u0e03\u0e04\7\u0192\2\2\u0e04\u0e05\7\u00e4\2\2\u0e05\u0e27"+
		"\5\u01da\u00ee\2\u0e06\u0e07\t\60\2\2\u0e07\u0e0c\5\u0140\u00a1\2\u0e08"+
		"\u0e09\7\u0245\2\2\u0e09\u0e0b\5\u0140\u00a1\2\u0e0a\u0e08\3\2\2\2\u0e0b"+
		"\u0e0e\3\2\2\2\u0e0c\u0e0a\3\2\2\2\u0e0c\u0e0d\3\2\2\2\u0e0d\u0e27\3\2"+
		"\2\2\u0e0e\u0e0c\3\2\2\2\u0e0f\u0e10\7\177\2\2\u0e10\u0e11\7\u009d\2\2"+
		"\u0e11\u0e16\7\u0268\2\2\u0e12\u0e13\7\u0245\2\2\u0e13\u0e15\7\u0268\2"+
		"\2\u0e14\u0e12\3\2\2\2\u0e15\u0e18\3\2\2\2\u0e16\u0e14\3\2\2\2\u0e16\u0e17"+
		"\3\2\2\2\u0e17\u0e27\3\2\2\2\u0e18\u0e16\3\2\2\2\u0e19\u0e1a\7~\2\2\u0e1a"+
		"\u0e27\5\u01da\u00ee\2\u0e1b\u0e1c\7\u00db\2\2\u0e1c\u0e27\5\u01da\u00ee"+
		"\2\u0e1d\u0e1e\7\u00fe\2\2\u0e1e\u0e27\5\u01da\u00ee\2\u0e1f\u0e20\7\u0109"+
		"\2\2\u0e20\u0e27\5\u01da\u00ee\2\u0e21\u0e22\7\u0170\2\2\u0e22\u0e23\t"+
		"\61\2\2\u0e23\u0e24\7\u0197\2\2\u0e24\u0e25\7\u00db\2\2\u0e25\u0e27\5"+
		"\u01da\u00ee\2\u0e26\u0df6\3\2\2\2\u0e26\u0df9\3\2\2\2\u0e26\u0dfb\3\2"+
		"\2\2\u0e26\u0dfd\3\2\2\2\u0e26\u0dff\3\2\2\2\u0e26\u0e03\3\2\2\2\u0e26"+
		"\u0e06\3\2\2\2\u0e26\u0e0f\3\2\2\2\u0e26\u0e19\3\2\2\2\u0e26\u0e1b\3\2"+
		"\2\2\u0e26\u0e1d\3\2\2\2\u0e26\u0e1f\3\2\2\2\u0e26\u0e21\3\2\2\2\u0e27"+
		"\u011b\3\2\2\2\u0e28\u0e2d\5\u011e\u0090\2\u0e29\u0e2a\7\u0245\2\2\u0e2a"+
		"\u0e2c\5\u011e\u0090\2\u0e2b\u0e29\3\2\2\2\u0e2c\u0e2f\3\2\2\2\u0e2d\u0e2b"+
		"\3\2\2\2\u0e2d\u0e2e\3\2\2\2\u0e2e\u011d\3\2\2\2\u0e2f\u0e2d\3\2\2\2\u0e30"+
		"\u0e31\5\u01f2\u00fa\2\u0e31\u0e32\7\u024b\2\2\u0e32\u0e33\5\u02b6\u015c"+
		"\2\u0e33\u0e34\7\u024c\2\2\u0e34\u011f\3\2\2\2\u0e35\u0e3a\5\u0122\u0092"+
		"\2\u0e36\u0e37\7\u0245\2\2\u0e37\u0e39\5\u0122\u0092\2\u0e38\u0e36\3\2"+
		"\2\2\u0e39\u0e3c\3\2\2\2\u0e3a\u0e38\3\2\2\2\u0e3a\u0e3b\3\2\2\2\u0e3b"+
		"\u0121\3\2\2\2\u0e3c\u0e3a\3\2\2\2\u0e3d\u0e3f\7\u0170\2\2\u0e3e\u0e40"+
		"\7\u00b8\2\2\u0e3f\u0e3e\3\2\2\2\u0e3f\u0e40\3\2\2\2\u0e40\u0e4e\3\2\2"+
		"\2\u0e41\u0e4e\7\u01c6\2\2\u0e42\u0e4e\7\u0180\2\2\u0e43\u0e4e\7>\2\2"+
		"\u0e44\u0e4e\7T\2\2\u0e45\u0e4e\7x\2\2\u0e46\u0e4e\7\u0112\2\2\u0e47\u0e4e"+
		"\7\u01a9\2\2\u0e48\u0e4e\7\u01ab\2\2\u0e49\u0e4e\7\u00ff\2\2\u0e4a\u0e4e"+
		"\7\u0106\2\2\u0e4b\u0e4e\7\u0107\2\2\u0e4c\u0e4e\7\u021d\2\2\u0e4d\u0e3d"+
		"\3\2\2\2\u0e4d\u0e41\3\2\2\2\u0e4d\u0e42\3\2\2\2\u0e4d\u0e43\3\2\2\2\u0e4d"+
		"\u0e44\3\2\2\2\u0e4d\u0e45\3\2\2\2\u0e4d\u0e46\3\2\2\2\u0e4d\u0e47\3\2"+
		"\2\2\u0e4d\u0e48\3\2\2\2\u0e4d\u0e49\3\2\2\2\u0e4d\u0e4a\3\2\2\2\u0e4d"+
		"\u0e4b\3\2\2\2\u0e4d\u0e4c\3\2\2\2\u0e4e\u0123\3\2\2\2\u0e4f\u0e50\7\u0194"+
		"\2\2\u0e50\u0e51\5\u01da\u00ee\2\u0e51\u0e52\7\u01b1\2\2\u0e52\u0e56\5"+
		"\u01da\u00ee\2\u0e53\u0e54\7\u01bc\2\2\u0e54\u0e55\7\b\2\2\u0e55\u0e57"+
		"\7\u00a3\2\2\u0e56\u0e53\3\2\2\2\u0e56\u0e57\3\2\2\2\u0e57\u0e65\3\2\2"+
		"\2\u0e58\u0e5c\7\u00d2\2\2\u0e59\u0e5a\7\b\2\2\u0e5a\u0e5b\7\u00a3\2\2"+
		"\u0e5b\u0e5d\7\u0191\2\2\u0e5c\u0e59\3\2\2\2\u0e5c\u0e5d\3\2\2\2\u0e5d"+
		"\u0e5e\3\2\2\2\u0e5e\u0e5f\5\u01da\u00ee\2\u0e5f\u0e60\7\u0193\2\2\u0e60"+
		"\u0e62\5\u01da\u00ee\2\u0e61\u0e63\5\u01f8\u00fd\2\u0e62\u0e61\3\2\2\2"+
		"\u0e62\u0e63\3\2\2\2\u0e63\u0e65\3\2\2\2\u0e64\u0e4f\3\2\2\2\u0e64\u0e58"+
		"\3\2\2\2\u0e65\u0125\3\2\2\2\u0e66\u0e67\7\u01b1\2\2\u0e67\u0e6b\5\u012a"+
		"\u0096\2\u0e68\u0e69\7\u01bc\2\2\u0e69\u0e6a\7\u0194\2\2\u0e6a\u0e6c\7"+
		"\u00a3\2\2\u0e6b\u0e68\3\2\2\2\u0e6b\u0e6c\3\2\2\2\u0e6c\u0127\3\2\2\2"+
		"\u0e6d\u0e6e\7\u0193\2\2\u0e6e\u0e70\5\u012a\u0096\2\u0e6f\u0e71\5\u01f8"+
		"\u00fd\2\u0e70\u0e6f\3\2\2\2\u0e70\u0e71\3\2\2\2\u0e71\u0129\3\2\2\2\u0e72"+
		"\u0e77\5\u012c\u0097\2\u0e73\u0e74\7\u0245\2\2\u0e74\u0e76\5\u012c\u0097"+
		"\2\u0e75\u0e73\3\2\2\2\u0e76\u0e79\3\2\2\2\u0e77\u0e75\3\2\2\2\u0e77\u0e78"+
		"\3\2\2\2\u0e78\u012b\3\2\2\2\u0e79\u0e77\3\2\2\2\u0e7a\u0e7c\7\u0195\2"+
		"\2\u0e7b\u0e7a\3\2\2\2\u0e7b\u0e7c\3\2\2\2\u0e7c\u0e7d\3\2\2\2\u0e7d\u0e7e"+
		"\5,\27\2\u0e7e\u012d\3\2\2\2\u0e7f\u0e80\7$\2\2\u0e80\u0e81\7\u01a3\2"+
		"\2\u0e81\u0e82\5\u0132\u009a\2\u0e82\u0e85\7\u0163\2\2\u0e83\u0e86\5\u0146"+
		"\u00a4\2\u0e84\u0e86\7\u01a1\2\2\u0e85\u0e83\3\2\2\2\u0e85\u0e84\3\2\2"+
		"\2\u0e86\u012f\3\2\2\2\u0e87\u0e88\7\u00e0\2\2\u0e88\u0e8e\7}\2\2\u0e89"+
		"\u0e8c\7\u0191\2\2\u0e8a\u0e8d\5\u0210\u0109\2\u0e8b\u0e8d\5\u0146\u00a4"+
		"\2\u0e8c\u0e8a\3\2\2\2\u0e8c\u0e8b\3\2\2\2\u0e8d\u0e8f\3\2\2\2\u0e8e\u0e89"+
		"\3\2\2\2\u0e8e\u0e8f\3\2\2\2\u0e8f\u0e90\3\2\2\2\u0e90\u0e91\7\u01a3\2"+
		"\2\u0e91\u0e92\5\u0134\u009b\2\u0e92\u0e95\7\u0163\2\2\u0e93\u0e96\5\u0146"+
		"\u00a4\2\u0e94\u0e96\7\u01a1\2\2\u0e95\u0e93\3\2\2\2\u0e95\u0e94\3\2\2"+
		"\2\u0e96\u0131\3\2\2\2\u0e97\u0e98\7\5\2\2\u0e98\u0e99\7\u008e\2\2\u0e99"+
		"\u0f14\5\u0210\u0109\2\u0e9a\u0e9b\t\62\2\2\u0e9b\u0e9c\5\u026a\u0136"+
		"\2\u0e9c\u0e9d\5\u0142\u00a2\2\u0e9d\u0f14\3\2\2\2\u0e9e\u0e9f\7\u017b"+
		"\2\2\u0e9f\u0ea0\7\u024b\2\2\u0ea0\u0ea1\5\u0224\u0113\2\u0ea1\u0ea2\7"+
		"\u0176\2\2\u0ea2\u0ea3\5\u0224\u0113\2\u0ea3\u0ea4\7\u024c\2\2\u0ea4\u0f14"+
		"\3\2\2\2\u0ea5\u0ea6\7\u015b\2\2\u0ea6\u0f14\5\u0210\u0109\2\u0ea7\u0ea8"+
		"\7\u017e\2\2\u0ea8\u0f14\5\u026a\u0136\2\u0ea9\u0eaa\7\u017f\2\2\u0eaa"+
		"\u0eab\5\u0210\u0109\2\u0eab\u0ead\7\u01a3\2\2\u0eac\u0eae\7G\2\2\u0ead"+
		"\u0eac\3\2\2\2\u0ead\u0eae\3\2\2\2\u0eae\u0eaf\3\2\2\2\u0eaf\u0eb0\5\u026a"+
		"\u0136\2\u0eb0\u0f14\3\2\2\2\u0eb1\u0eb2\7.\2\2\u0eb2\u0f14\5\u026a\u0136"+
		"\2\u0eb3\u0eb4\7\67\2\2\u0eb4\u0f14\5\u0210\u0109\2\u0eb5\u0eb6\7G\2\2"+
		"\u0eb6\u0f14\5\u026a\u0136\2\u0eb7\u0eb8\7V\2\2\u0eb8\u0f14\5\u0210\u0109"+
		"\2\u0eb9\u0eba\7P\2\2\u0eba\u0ebb\7\u0106\2\2\u0ebb\u0f14\5\u0210\u0109"+
		"\2\u0ebc\u0ebd\7\u0192\2\2\u0ebd\u0ebe\7\66\2\2\u0ebe\u0ebf\7\u0121\2"+
		"\2\u0ebf\u0f14\5\u0210\u0109\2\u0ec0\u0ec2\7\u0192\2\2\u0ec1\u0ec0\3\2"+
		"\2\2\u0ec1\u0ec2\3\2\2\2\u0ec2\u0ec3\3\2\2\2\u0ec3\u0ec4\7\u01af\2\2\u0ec4"+
		"\u0f14\5\u026a\u0136\2\u0ec5\u0ec6\7q\2\2\u0ec6\u0f14\5\u026a\u0136\2"+
		"\u0ec7\u0ec8\7\177\2\2\u0ec8\u0ec9\7\u009d\2\2\u0ec9\u0f14\7\u0268\2\2"+
		"\u0eca\u0ecc\7\u008c\2\2\u0ecb\u0eca\3\2\2\2\u0ecb\u0ecc\3\2\2\2\u0ecc"+
		"\u0ecd\3\2\2\2\u0ecd\u0ece\7\u011a\2\2\u0ece\u0f14\5\u026a\u0136\2\u0ecf"+
		"\u0ed0\7\u00a2\2\2\u0ed0\u0f14\5\u00dco\2\u0ed1\u0ed2\7\u00a2\2\2\u0ed2"+
		"\u0ed3\t\63\2\2\u0ed3\u0ed4\5\u026a\u0136\2\u0ed4\u0ed5\7\u01b7\2\2\u0ed5"+
		"\u0ed6\5\u0210\u0109\2\u0ed6\u0f14\3\2\2\2\u0ed7\u0ed8\7\u00b2\2\2\u0ed8"+
		"\u0ed9\5\u0210\u0109\2\u0ed9\u0eda\7\u01a3\2\2\u0eda\u0edb\5\u026a\u0136"+
		"\2\u0edb\u0f14\3\2\2\2\u0edc\u0ede\7\u00b9\2\2\u0edd\u0edc\3\2\2\2\u0edd"+
		"\u0ede\3\2\2\2\u0ede\u0edf\3\2\2\2\u0edf\u0ee0\7~\2\2\u0ee0\u0f14\5\u026a"+
		"\u0136\2\u0ee1\u0ee2\7\u00bd\2\2\u0ee2\u0f14\5\u0210\u0109\2\u0ee3\u0ee4"+
		"\7\u00d3\2\2\u0ee4\u0f14\5\u0210\u0109\2\u0ee5\u0ee6\7\u00d9\2\2\u0ee6"+
		"\u0ee7\5\u0210\u0109\2\u0ee7\u0ee8\7\u01a3\2\2\u0ee8\u0ee9\5\u026a\u0136"+
		"\2\u0ee9\u0f14\3\2\2\2\u0eea\u0eeb\7\u00db\2\2\u0eeb\u0f14\5\u0210\u0109"+
		"\2\u0eec\u0eed\7\u00e1\2\2\u0eed\u0f14\5\u026a\u0136\2\u0eee\u0eef\7\u00e4"+
		"\2\2\u0eef\u0f14\5\u0210\u0109\2\u0ef0\u0ef1\7\u00f2\2\2\u0ef1\u0f14\5"+
		"\u026a\u0136\2\u0ef2\u0ef3\7\u00f9\2\2\u0ef3\u0f14\5\u0210\u0109\2\u0ef4"+
		"\u0ef5\7\u00fe\2\2\u0ef5\u0f14\5\u0210\u0109\2\u0ef6\u0ef7\7\u0102\2\2"+
		"\u0ef7\u0ef8\7\u00de\2\2\u0ef8\u0ef9\7(\2\2\u0ef9\u0f14\5\u026a\u0136"+
		"\2\u0efa\u0efb\7\u0102\2\2\u0efb\u0efc\7\u00de\2\2\u0efc\u0efd\7C\2\2"+
		"\u0efd\u0f14\5\u026a\u0136\2\u0efe\u0eff\7\u0102\2\2\u0eff\u0f00\7\u00de"+
		"\2\2\u0f00\u0f01\7\u00ac\2\2\u0f01\u0f14\5\u026a\u0136\2\u0f02\u0f03\7"+
		"\u0102\2\2\u0f03\u0f04\7\u00de\2\2\u0f04\u0f05\7\u0100\2\2\u0f05\u0f14"+
		"\5\u026a\u0136\2\u0f06\u0f07\7\u0105\2\2\u0f07\u0f08\7\u0191\2\2\u0f08"+
		"\u0f09\5\u026a\u0136\2\u0f09\u0f0a\7~\2\2\u0f0a\u0f0b\5\u0210\u0109\2"+
		"\u0f0b\u0f14\3\2\2\2\u0f0c\u0f0d\7\u0106\2\2\u0f0d\u0f0e\5\u0210\u0109"+
		"\2\u0f0e\u0f0f\7\u01a3\2\2\u0f0f\u0f10\5\u026a\u0136\2\u0f10\u0f14\3\2"+
		"\2\2\u0f11\u0f12\7\u0109\2\2\u0f12\u0f14\5\u026a\u0136\2\u0f13\u0e97\3"+
		"\2\2\2\u0f13\u0e9a\3\2\2\2\u0f13\u0e9e\3\2\2\2\u0f13\u0ea5\3\2\2\2\u0f13"+
		"\u0ea7\3\2\2\2\u0f13\u0ea9\3\2\2\2\u0f13\u0eb1\3\2\2\2\u0f13\u0eb3\3\2"+
		"\2\2\u0f13\u0eb5\3\2\2\2\u0f13\u0eb7\3\2\2\2\u0f13\u0eb9\3\2\2\2\u0f13"+
		"\u0ebc\3\2\2\2\u0f13\u0ec1\3\2\2\2\u0f13\u0ec5\3\2\2\2\u0f13\u0ec7\3\2"+
		"\2\2\u0f13\u0ecb\3\2\2\2\u0f13\u0ecf\3\2\2\2\u0f13\u0ed1\3\2\2\2\u0f13"+
		"\u0ed7\3\2\2\2\u0f13\u0edd\3\2\2\2\u0f13\u0ee1\3\2\2\2\u0f13\u0ee3\3\2"+
		"\2\2\u0f13\u0ee5\3\2\2\2\u0f13\u0eea\3\2\2\2\u0f13\u0eec\3\2\2\2\u0f13"+
		"\u0eee\3\2\2\2\u0f13\u0ef0\3\2\2\2\u0f13\u0ef2\3\2\2\2\u0f13\u0ef4\3\2"+
		"\2\2\u0f13\u0ef6\3\2\2\2\u0f13\u0efa\3\2\2\2\u0f13\u0efe\3\2\2\2\u0f13"+
		"\u0f02\3\2\2\2\u0f13\u0f06\3\2\2\2\u0f13\u0f0c\3\2\2\2\u0f13\u0f11\3\2"+
		"\2\2\u0f14\u0133\3\2\2\2\u0f15\u0f16\t\62\2\2\u0f16\u0f17\5\u026a\u0136"+
		"\2\u0f17\u0f18\5\u0142\u00a2\2\u0f18\u0f43\3\2\2\2\u0f19\u0f1a\7\u017e"+
		"\2\2\u0f1a\u0f43\5\u026a\u0136\2\u0f1b\u0f1c\7\67\2\2\u0f1c\u0f43\5\u0210"+
		"\u0109\2\u0f1d\u0f1e\7G\2\2\u0f1e\u0f43\5\u026a\u0136\2\u0f1f\u0f20\7"+
		"P\2\2\u0f20\u0f21\7\u0106\2\2\u0f21\u0f43\5\u0210\u0109\2\u0f22\u0f24"+
		"\7\u0192\2\2\u0f23\u0f22\3\2\2\2\u0f23\u0f24\3\2\2\2\u0f24\u0f25\3\2\2"+
		"\2\u0f25\u0f26\7\u01af\2\2\u0f26\u0f43\5\u026a\u0136\2\u0f27\u0f28\7\177"+
		"\2\2\u0f28\u0f29\7\u009d\2\2\u0f29\u0f43\7\u0268\2\2\u0f2a\u0f2c\7\u008c"+
		"\2\2\u0f2b\u0f2a";
	private static final String _serializedATNSegment2 =
		"\3\2\2\2\u0f2b\u0f2c\3\2\2\2\u0f2c\u0f2d\3\2\2\2\u0f2d\u0f2e\7\u011a\2"+
		"\2\u0f2e\u0f43\5\u026a\u0136\2\u0f2f\u0f31\7\u00b9\2\2\u0f30\u0f2f\3\2"+
		"\2\2\u0f30\u0f31\3\2\2\2\u0f31\u0f32\3\2\2\2\u0f32\u0f33\7~\2\2\u0f33"+
		"\u0f43\5\u026a\u0136\2\u0f34\u0f35\7\u00bd\2\2\u0f35\u0f43\5\u0210\u0109"+
		"\2\u0f36\u0f37\7\u00d3\2\2\u0f37\u0f43\5\u0210\u0109\2\u0f38\u0f39\7\u00db"+
		"\2\2\u0f39\u0f43\5\u0210\u0109\2\u0f3a\u0f3b\7\u00e1\2\2\u0f3b\u0f43\5"+
		"\u026a\u0136\2\u0f3c\u0f3d\7\u00f9\2\2\u0f3d\u0f43\5\u0210\u0109\2\u0f3e"+
		"\u0f3f\7\u00fe\2\2\u0f3f\u0f43\5\u0210\u0109\2\u0f40\u0f41\7\u0109\2\2"+
		"\u0f41\u0f43\5\u026a\u0136\2\u0f42\u0f15\3\2\2\2\u0f42\u0f19\3\2\2\2\u0f42"+
		"\u0f1b\3\2\2\2\u0f42\u0f1d\3\2\2\2\u0f42\u0f1f\3\2\2\2\u0f42\u0f23\3\2"+
		"\2\2\u0f42\u0f27\3\2\2\2\u0f42\u0f2b\3\2\2\2\u0f42\u0f30\3\2\2\2\u0f42"+
		"\u0f34\3\2\2\2\u0f42\u0f36\3\2\2\2\u0f42\u0f38\3\2\2\2\u0f42\u0f3a\3\2"+
		"\2\2\u0f42\u0f3c\3\2\2\2\u0f42\u0f3e\3\2\2\2\u0f42\u0f40\3\2\2\2\u0f43"+
		"\u0135\3\2\2\2\u0f44\u0f45\7\u01a5\2\2\u0f45\u0f47\7\u00cc\2\2\u0f46\u0f44"+
		"\3\2\2\2\u0f46\u0f47\3\2\2\2\u0f47\u0f48\3\2\2\2\u0f48\u0f49\t\22\2\2"+
		"\u0f49\u0f4f\5\u0140\u00a1\2\u0f4a\u0f4d\7\u00d1\2\2\u0f4b\u0f4e\5\u0224"+
		"\u0113\2\u0f4c\u0f4e\5\u013c\u009f\2\u0f4d\u0f4b\3\2\2\2\u0f4d\u0f4c\3"+
		"\2\2\2\u0f4e\u0f50\3\2\2\2\u0f4f\u0f4a\3\2\2\2\u0f4f\u0f50\3\2\2\2\u0f50"+
		"\u0f51\3\2\2\2\u0f51\u0f52\5\u0138\u009d\2\u0f52\u0137\3\2\2\2\u0f53\u0f55"+
		"\5h\65\2\u0f54\u0f53\3\2\2\2\u0f55\u0f56\3\2\2\2\u0f56\u0f54\3\2\2\2\u0f56"+
		"\u0f57\3\2\2\2\u0f57\u0f59\3\2\2\2\u0f58\u0f5a\5\u01e2\u00f2\2\u0f59\u0f58"+
		"\3\2\2\2\u0f59\u0f5a\3\2\2\2\u0f5a\u0139\3\2\2\2\u0f5b\u0f5c\7\u0191\2"+
		"\2\u0f5c\u0f5d\7\u0109\2\2\u0f5d\u0f5e\5\u0224\u0113\2\u0f5e\u013b\3\2"+
		"\2\2\u0f5f\u0f60\7\u01af\2\2\u0f60\u0f61\7\u024b\2\2\u0f61\u0f66\5\u013e"+
		"\u00a0\2\u0f62\u0f63\7\u0245\2\2\u0f63\u0f65\5\u013e\u00a0\2\u0f64\u0f62"+
		"\3\2\2\2\u0f65\u0f68\3\2\2\2\u0f66\u0f64\3\2\2\2\u0f66\u0f67\3\2\2\2\u0f67"+
		"\u0f69\3\2\2\2\u0f68\u0f66\3\2\2\2\u0f69\u0f6a\7\u024c\2\2\u0f6a\u013d"+
		"\3\2\2\2\u0f6b\u0f6c\5\u0210\u0109\2\u0f6c\u0f6d\5\u0224\u0113\2\u0f6d"+
		"\u013f\3\2\2\2\u0f6e\u0f6f\5\u026a\u0136\2\u0f6f\u0f70\5\u0142\u00a2\2"+
		"\u0f70\u0141\3\2\2\2\u0f71\u0f80\7\u024b\2\2\u0f72\u0f77\5\u0148\u00a5"+
		"\2\u0f73\u0f74\7\u0245\2\2\u0f74\u0f76\5\u0148\u00a5\2\u0f75\u0f73\3\2"+
		"\2\2\u0f76\u0f79\3\2\2\2\u0f77\u0f75\3\2\2\2\u0f77\u0f78\3\2\2\2\u0f78"+
		"\u0f7b\3\2\2\2\u0f79\u0f77\3\2\2\2\u0f7a\u0f72\3\2\2\2\u0f7a\u0f7b\3\2"+
		"\2\2\u0f7b\u0f7d\3\2\2\2\u0f7c\u0f7e\5\u0144\u00a3\2\u0f7d\u0f7c\3\2\2"+
		"\2\u0f7d\u0f7e\3\2\2\2\u0f7e\u0f81\3\2\2\2\u0f7f\u0f81\7\u024f\2\2\u0f80"+
		"\u0f7a\3\2\2\2\u0f80\u0f7f\3\2\2\2\u0f81\u0f82\3\2\2\2\u0f82\u0f83\7\u024c"+
		"\2\2\u0f83\u0143\3\2\2\2\u0f84\u0f85\7\u01a6\2\2\u0f85\u0f86\7\26\2\2"+
		"\u0f86\u0f8b\5\u0148\u00a5\2\u0f87\u0f88\7\u0245\2\2\u0f88\u0f8a\5\u0148"+
		"\u00a5\2\u0f89\u0f87\3\2\2\2\u0f8a\u0f8d\3\2\2\2\u0f8b\u0f89\3\2\2\2\u0f8b"+
		"\u0f8c\3\2\2\2\u0f8c\u0145\3\2\2\2\u0f8d\u0f8b\3\2\2\2\u0f8e\u0f92\7\u026e"+
		"\2\2\u0f8f\u0f91\7\u0277\2\2\u0f90\u0f8f\3\2\2\2\u0f91\u0f94\3\2\2\2\u0f92"+
		"\u0f90\3\2\2\2\u0f92\u0f93\3\2\2\2\u0f93\u0f95\3\2\2\2\u0f94\u0f92\3\2"+
		"\2\2\u0f95\u0f98\7\u0276\2\2\u0f96\u0f98\7\u026d\2\2\u0f97\u0f8e\3\2\2"+
		"\2\u0f97\u0f96\3\2\2\2\u0f98\u0147\3\2\2\2\u0f99\u0f9b\5\u014a\u00a6\2"+
		"\u0f9a\u0f99\3\2\2\2\u0f9a\u0f9b\3\2\2\2\u0f9b\u0f9d\3\2\2\2\u0f9c\u0f9e"+
		"\5\u0212\u010a\2\u0f9d\u0f9c\3\2\2\2\u0f9d\u0f9e\3\2\2\2\u0f9e\u0f9f\3"+
		"\2\2\2\u0f9f\u0fa2\5\u0224\u0113\2\u0fa0\u0fa1\t\64\2\2\u0fa1\u0fa3\5"+
		"\u0230\u0119\2\u0fa2\u0fa0\3\2\2\2\u0fa2\u0fa3\3\2\2\2\u0fa3\u0149\3\2"+
		"\2\2\u0fa4\u0fa5\t\65\2\2\u0fa5\u014b\3\2\2\2\u0fa6\u0fa8\t\66\2\2\u0fa7"+
		"\u0fa6\3\2\2\2\u0fa7\u0fa8\3\2\2\2\u0fa8\u0fa9\3\2\2\2\u0fa9\u0fab\7\u00e1"+
		"\2\2\u0faa\u0fac\5\u019a\u00ce\2\u0fab\u0faa\3\2\2\2\u0fab\u0fac\3\2\2"+
		"\2\u0fac\u0fad\3\2\2\2\u0fad\u0fb1\5\u026a\u0136\2\u0fae\u0fb0\5\u014e"+
		"\u00a8\2\u0faf\u0fae\3\2\2\2\u0fb0\u0fb3\3\2\2\2\u0fb1\u0faf\3\2\2\2\u0fb1"+
		"\u0fb2\3\2\2\2\u0fb2\u014d\3\2\2\2\u0fb3\u0fb1\3\2\2\2\u0fb4\u0fb5\7\u0176"+
		"\2\2\u0fb5\u0fd9\t\67\2\2\u0fb6\u0fb7\7\u00e1\2\2\u0fb7\u0fb8\7\u0094"+
		"\2\2\u0fb8\u0fd9\5\u026a\u0136\2\u0fb9\u0fbb\7p\2\2\u0fba\u0fbc\7\26\2"+
		"\2\u0fbb\u0fba\3\2\2\2\u0fbb\u0fbc\3\2\2\2\u0fbc\u0fbd\3\2\2\2\u0fbd\u0fd9"+
		"\5\u0152\u00aa\2\u0fbe\u0fbf\7\u0090\2\2\u0fbf\u0fc3\5\u0152\u00aa\2\u0fc0"+
		"\u0fc1\7\u0098\2\2\u0fc1\u0fc3\7\u0090\2\2\u0fc2\u0fbe\3\2\2\2\u0fc2\u0fc0"+
		"\3\2\2\2\u0fc3\u0fd9\3\2\2\2\u0fc4\u0fc5\7\u008d\2\2\u0fc5\u0fc9\5\u0152"+
		"\u00aa\2\u0fc6\u0fc7\7\u0098\2\2\u0fc7\u0fc9\7\u008d\2\2\u0fc8\u0fc4\3"+
		"\2\2\2\u0fc8\u0fc6\3\2\2\2\u0fc9\u0fd9\3\2\2\2\u0fca\u0fcc\7\u00f0\2\2"+
		"\u0fcb\u0fcd\7\u01bc\2\2\u0fcc\u0fcb\3\2\2\2\u0fcc\u0fcd\3\2\2\2\u0fcd"+
		"\u0fce\3\2\2\2\u0fce\u0fd9\5\u0152\u00aa\2\u0fcf\u0fd0\7\27\2\2\u0fd0"+
		"\u0fd9\5\u0152\u00aa\2\u0fd1\u0fd3\7\u0098\2\2\u0fd2\u0fd1\3\2\2\2\u0fd2"+
		"\u0fd3\3\2\2\2\u0fd3\u0fd4\3\2\2\2\u0fd4\u0fd9\7\65\2\2\u0fd5\u0fd6\7"+
		"\u00a9\2\2\u0fd6\u0fd7\7\26\2\2\u0fd7\u0fd9\5\u026a\u0136\2\u0fd8\u0fb4"+
		"\3\2\2\2\u0fd8\u0fb6\3\2\2\2\u0fd8\u0fb9\3\2\2\2\u0fd8\u0fc2\3\2\2\2\u0fd8"+
		"\u0fc8\3\2\2\2\u0fd8\u0fca\3\2\2\2\u0fd8\u0fcf\3\2\2\2\u0fd8\u0fd2\3\2"+
		"\2\2\u0fd8\u0fd5\3\2\2\2\u0fd9\u014f\3\2\2\2\u0fda\u0fdc\5\u0154\u00ab"+
		"\2\u0fdb\u0fda\3\2\2\2\u0fdb\u0fdc\3\2\2\2\u0fdc\u0fdd\3\2\2\2\u0fdd\u0fde"+
		"\7\u0268\2\2\u0fde\u0151\3\2\2\2\u0fdf\u0fe1\5\u0154\u00ab\2\u0fe0\u0fdf"+
		"\3\2\2\2\u0fe0\u0fe1\3\2\2\2\u0fe1\u0fe2\3\2\2\2\u0fe2\u0fe3\5\u023e\u0120"+
		"\2\u0fe3\u0153\3\2\2\2\u0fe4\u0fe5\t8\2\2\u0fe5\u0155\3\2\2\2\u0fe6\u0fe8"+
		"\7\u00db\2\2\u0fe7\u0fe9\5\u019a\u00ce\2\u0fe8\u0fe7\3\2\2\2\u0fe8\u0fe9"+
		"\3\2\2\2\u0fe9\u0feb\3\2\2\2\u0fea\u0fec\5\u0210\u0109\2\u0feb\u0fea\3"+
		"\2\2\2\u0feb\u0fec\3\2\2\2\u0fec\u0fef\3\2\2\2\u0fed\u0fee\7\u0159\2\2"+
		"\u0fee\u0ff0\5,\27\2\u0fef\u0fed\3\2\2\2\u0fef\u0ff0\3\2\2\2\u0ff0\u0157"+
		"\3\2\2\2\u0ff1\u0ff2\7\u00b2\2\2\u0ff2\u0ff3\5\u0210\u0109\2\u0ff3\u0ff4"+
		"\7\u01a3\2\2\u0ff4\u0ff7\5\u026a\u0136\2\u0ff5\u0ff6\7\u0176\2\2\u0ff6"+
		"\u0ff8\t9\2\2\u0ff7\u0ff5\3\2\2\2\u0ff7\u0ff8\3\2\2\2\u0ff8\u0ffb\3\2"+
		"\2\2\u0ff9\u0ffa\7\u0191\2\2\u0ffa\u0ffc\t:\2\2\u0ffb\u0ff9\3\2\2\2\u0ffb"+
		"\u0ffc\3\2\2\2\u0ffc\u1006\3\2\2\2\u0ffd\u0ffe\7\u01b1\2\2\u0ffe\u1003"+
		"\5,\27\2\u0fff\u1000\7\u0245\2\2\u1000\u1002\5,\27\2\u1001\u0fff\3\2\2"+
		"\2\u1002\u1005\3\2\2\2\u1003\u1001\3\2\2\2\u1003\u1004\3\2\2\2\u1004\u1007"+
		"\3\2\2\2\u1005\u1003\3\2\2\2\u1006\u0ffd\3\2\2\2\u1006\u1007\3\2\2\2\u1007"+
		"\u100a\3\2\2\2\u1008\u1009\7\u01b7\2\2\u1009\u100b\5\u0230\u0119\2\u100a"+
		"\u1008\3\2\2\2\u100a\u100b\3\2\2\2\u100b\u100f\3\2\2\2\u100c\u100d\7\u01bc"+
		"\2\2\u100d\u100e\7\u017c\2\2\u100e\u1010\5\u0230\u0119\2\u100f\u100c\3"+
		"\2\2\2\u100f\u1010\3\2\2\2\u1010\u0159\3\2\2\2\u1011\u1012\7\u00b2\2\2"+
		"\u1012\u1013\5\u0210\u0109\2\u1013\u1014\7\u01a3\2\2\u1014\u1015\5\u026a"+
		"\u0136\2\u1015\u1016\5\u01ee\u00f8\2\u1016\u1030\3\2\2\2\u1017\u1018\7"+
		"\u00b2\2\2\u1018\u1019\5\u0210\u0109\2\u1019\u101a\7\u01a3\2\2\u101a\u1024"+
		"\5\u026a\u0136\2\u101b\u101c\7\u01b1\2\2\u101c\u1021\5,\27\2\u101d\u101e"+
		"\7\u0245\2\2\u101e\u1020\5,\27\2\u101f\u101d\3\2\2\2\u1020\u1023\3\2\2"+
		"\2\u1021\u101f\3\2\2\2\u1021\u1022\3\2\2\2\u1022\u1025\3\2\2\2\u1023\u1021"+
		"\3\2\2\2\u1024\u101b\3\2\2\2\u1024\u1025\3\2\2\2\u1025\u1028\3\2\2\2\u1026"+
		"\u1027\7\u01b7\2\2\u1027\u1029\5\u0230\u0119\2\u1028\u1026\3\2\2\2\u1028"+
		"\u1029\3\2\2\2\u1029\u102d\3\2\2\2\u102a\u102b\7\u01bc\2\2\u102b\u102c"+
		"\7\u017c\2\2\u102c\u102e\5\u0230\u0119\2\u102d\u102a\3\2\2\2\u102d\u102e"+
		"\3\2\2\2\u102e\u1030\3\2\2\2\u102f\u1011\3\2\2\2\u102f\u1017\3\2\2\2\u1030"+
		"\u015b\3\2\2\2\u1031\u1033\7\u00b2\2\2\u1032\u1034\5\u0198\u00cd\2\u1033"+
		"\u1032\3\2\2\2\u1033\u1034\3\2\2\2\u1034\u1035\3\2\2\2\u1035\u1036\5\u0210"+
		"\u0109\2\u1036\u1037\7\u01a3\2\2\u1037\u1039\5\u026a\u0136\2\u1038\u103a"+
		"\5\u01f8\u00fd\2\u1039\u1038\3\2\2\2\u1039\u103a\3\2\2\2\u103a\u015d\3"+
		"\2\2\2\u103b\u103c\7\u00f9\2\2\u103c\u103d\5\u0210\u0109\2\u103d\u103e"+
		"\7*\2\2\u103e\u103f\7\u026d\2\2\u103f\u1040\7\u00bd\2\2\u1040\u1042\5"+
		"\u02b6\u015c\2\u1041\u1043\5\u01e2\u00f2\2\u1042\u1041\3\2\2\2\u1042\u1043"+
		"\3\2\2\2\u1043\u015f\3\2\2\2\u1044\u1045\7\u00f9\2\2\u1045\u1046\5\u0210"+
		"\u0109\2\u1046\u1047\5\u0162\u00b2\2\u1047\u0161\3\2\2\2\u1048\u1049\7"+
		"*\2\2\u1049\u105c\5\u0146\u00a4\2\u104a\u104b\7\u00e6\2\2\u104b\u104c"+
		"\7\u00bd\2\2\u104c\u104e\5\u02b6\u015c\2\u104d\u104f\5\u01e2\u00f2\2\u104e"+
		"\u104d\3\2\2\2\u104e\u104f\3\2\2\2\u104f\u105c\3\2\2\2\u1050\u1051\7\u00c6"+
		"\2\2\u1051\u1053\7\u00bd\2\2\u1052\u1054\5\u01e2\u00f2\2\u1053\u1052\3"+
		"\2\2\2\u1053\u1054\3\2\2\2\u1054\u105c\3\2\2\2\u1055\u105c\7K\2\2\u1056"+
		"\u105c\7D\2\2\u1057\u1058\7\u00e6\2\2\u1058\u105c\5\u01dc\u00ef\2\u1059"+
		"\u105c\5\u01ec\u00f7\2\u105a\u105c\5\u01ee\u00f8\2\u105b\u1048\3\2\2\2"+
		"\u105b\u104a\3\2\2\2\u105b\u1050\3\2\2\2\u105b\u1055\3\2\2\2\u105b\u1056"+
		"\3\2\2\2\u105b\u1057\3\2\2\2\u105b\u1059\3\2\2\2\u105b\u105a\3\2\2\2\u105c"+
		"\u0163\3\2\2\2\u105d\u105e\7\u017b\2\2\u105e\u105f\7\u024b\2\2\u105f\u1060"+
		"\5\u0224\u0113\2\u1060\u1061\7\u0176\2\2\u1061\u1062\5\u0224\u0113\2\u1062"+
		"\u106c\7\u024c\2\2\u1063\u1064\7\u01bc\2\2\u1064\u1065\7^\2\2\u1065\u1066"+
		"\5\u026a\u0136\2\u1066\u1067\5\u0142\u00a2\2\u1067\u106d\3\2\2\2\u1068"+
		"\u1069\7\u011f\2\2\u1069\u106d\7^\2\2\u106a\u106b\7\u01bc\2\2\u106b\u106d"+
		"\7\u0135\2\2\u106c\u1063\3\2\2\2\u106c\u1068\3\2\2\2\u106c\u106a\3\2\2"+
		"\2\u106d\u1072\3\2\2\2\u106e\u106f\7\u0176\2\2\u106f\u1073\7\17\2\2\u1070"+
		"\u1071\7\u0176\2\2\u1071\u1073\7l\2\2\u1072\u106e\3\2\2\2\u1072\u1070"+
		"\3\2\2\2\u1072\u1073\3\2\2\2\u1073\u0165\3\2\2\2\u1074\u1076\7\u017b\2"+
		"\2\u1075\u1077\5\u0198\u00cd\2\u1076\u1075\3\2\2\2\u1076\u1077\3\2\2\2"+
		"\u1077\u1078\3\2\2\2\u1078\u1079\7\u024b\2\2\u1079\u107a\5\u0224\u0113"+
		"\2\u107a\u107b\7\u0176\2\2\u107b\u107c\5\u0224\u0113\2\u107c\u107e\7\u024c"+
		"\2\2\u107d\u107f\5\u01f8\u00fd\2\u107e\u107d\3\2\2\2\u107e\u107f\3\2\2"+
		"\2\u107f\u0167\3\2\2\2\u1080\u1081\7\u00a2\2\2\u1081\u1082\7X\2\2\u1082"+
		"\u1083\5\u026a\u0136\2\u1083\u1084\7\u01b7\2\2\u1084\u1085\5\u0210\u0109"+
		"\2\u1085\u0169\3\2\2\2\u1086\u1087\7\u00a2\2\2\u1087\u1088\7X\2\2\u1088"+
		"\u1089\5\u026a\u0136\2\u1089\u108a\7\u01b7\2\2\u108a\u108b\5\u0210\u0109"+
		"\2\u108b\u108c\5\u016c\u00b7\2\u108c\u016b\3\2\2\2\u108d\u10a3\5\u01ee"+
		"\u00f8\2\u108e\u10a3\5\u01ec\u00f7\2\u108f\u10a3\5\u01f0\u00f9\2\u1090"+
		"\u1091\7\7\2\2\u1091\u1096\5\u016e\u00b8\2\u1092\u1093\7\u0245\2\2\u1093"+
		"\u1095\5\u016e\u00b8\2\u1094\u1092\3\2\2\2\u1095\u1098\3\2\2\2\u1096\u1094"+
		"\3\2\2\2\u1096\u1097\3\2\2\2\u1097\u10a3\3\2\2\2\u1098\u1096\3\2\2\2\u1099"+
		"\u109a\7I\2\2\u109a\u109f\5\u0170\u00b9\2\u109b\u109c\7\u0245\2\2\u109c"+
		"\u109e\5\u0170\u00b9\2\u109d\u109b\3\2\2\2\u109e\u10a1\3\2\2\2\u109f\u109d"+
		"\3\2\2\2\u109f\u10a0\3\2\2\2\u10a0\u10a3\3\2\2\2\u10a1\u109f\3\2\2\2\u10a2"+
		"\u108d\3\2\2\2\u10a2\u108e\3\2\2\2\u10a2\u108f\3\2\2\2\u10a2\u1090\3\2"+
		"\2\2\u10a2\u1099\3\2\2\2\u10a3\u016d\3\2\2\2\u10a4\u10a5\7\u00a2\2\2\u10a5"+
		"\u10a6\5\u023e\u0120\2\u10a6\u10ad\5\u00dco\2\u10a7\u10a8\7\u0191\2\2"+
		"\u10a8\u10ae\7\u00de\2\2\u10a9\u10aa\7\u0191\2\2\u10aa\u10ab\7\u01a6\2"+
		"\2\u10ab\u10ac\7\26\2\2\u10ac\u10ae\5\u026a\u0136\2\u10ad\u10a7\3\2\2"+
		"\2\u10ad\u10a9\3\2\2\2\u10ad\u10ae\3\2\2\2\u10ae\u10c3\3\2\2\2\u10af\u10b0"+
		"\7^\2\2\u10b0\u10be\5\u023e\u0120\2\u10b1\u10b4\7\u024b\2\2\u10b2\u10b5"+
		"\5\u0224\u0113\2\u10b3\u10b5\7\u013c\2\2\u10b4\u10b2\3\2\2\2\u10b4\u10b3"+
		"\3\2\2\2\u10b5\u10bb\3\2\2\2\u10b6\u10b9\7\u0245\2\2\u10b7\u10ba\5\u0224"+
		"\u0113\2\u10b8\u10ba\7\u013c\2\2\u10b9\u10b7\3\2\2\2\u10b9\u10b8\3\2\2"+
		"\2\u10ba\u10bc\3\2\2\2\u10bb\u10b6\3\2\2\2\u10bb\u10bc\3\2\2\2\u10bc\u10bd"+
		"\3\2\2\2\u10bd\u10bf\7\u024c\2\2\u10be\u10b1\3\2\2\2\u10be\u10bf\3\2\2"+
		"\2\u10bf\u10c0\3\2\2\2\u10c0\u10c1\5\u0246\u0124\2\u10c1\u10c3\3\2\2\2"+
		"\u10c2\u10a4\3\2\2\2\u10c2\u10af\3\2\2\2\u10c3\u016f\3\2\2\2\u10c4\u10c5"+
		"\t;\2\2\u10c5\u10c6\5\u023e\u0120\2\u10c6\u10c9\7\u024b\2\2\u10c7\u10ca"+
		"\5\u0224\u0113\2\u10c8\u10ca\7\u013c\2\2\u10c9\u10c7\3\2\2\2\u10c9\u10c8"+
		"\3\2\2\2\u10ca\u10d0\3\2\2\2\u10cb\u10ce\7\u0245\2\2\u10cc\u10cf\5\u0224"+
		"\u0113\2\u10cd\u10cf\7\u013c\2\2\u10ce\u10cc\3\2\2\2\u10ce\u10cd\3\2\2"+
		"\2\u10cf\u10d1\3\2\2\2\u10d0\u10cb\3\2\2\2\u10d0\u10d1\3\2\2\2\u10d1\u10d2"+
		"\3\2\2\2\u10d2\u10d3\7\u024c\2\2\u10d3\u0171\3\2\2\2\u10d4\u10d5\7\u00a2"+
		"\2\2\u10d5\u10d7\7X\2\2\u10d6\u10d8\5\u0198\u00cd\2\u10d7\u10d6\3\2\2"+
		"\2\u10d7\u10d8\3\2\2\2\u10d8\u10d9\3\2\2\2\u10d9\u10da\5\u026a\u0136\2"+
		"\u10da\u10db\7\u01b7\2\2\u10db\u10dd\5\u0210\u0109\2\u10dc\u10de\5\u01f8"+
		"\u00fd\2\u10dd\u10dc\3\2\2\2\u10dd\u10de\3\2\2\2\u10de\u0173\3\2\2\2\u10df"+
		"\u10e0\7\u00a2\2\2\u10e0\u10e1\7 \2\2\u10e1\u10e3\5\u026a\u0136\2\u10e2"+
		"\u10e4\7\u0187\2\2\u10e3\u10e2\3\2\2\2\u10e3\u10e4\3\2\2\2\u10e4\u10e5"+
		"\3\2\2\2\u10e5\u10e6\7\u0191\2\2\u10e6\u10e7\7\u0109\2\2\u10e7\u10e8\5"+
		"\u0224\u0113\2\u10e8\u10e9\7\u01b7\2\2\u10e9\u10ec\5\u0210\u0109\2\u10ea"+
		"\u10eb\7X\2\2\u10eb\u10ed\5\u026a\u0136\2\u10ec\u10ea\3\2\2\2\u10ec\u10ed"+
		"\3\2\2\2\u10ed\u10ee\3\2\2\2\u10ee\u10ef\7\u0176\2\2\u10ef\u10f4\5\u0176"+
		"\u00bc\2\u10f0\u10f1\7\u0245\2\2\u10f1\u10f3\5\u0176\u00bc\2\u10f2\u10f0"+
		"\3\2\2\2\u10f3\u10f6\3\2\2\2\u10f4\u10f2\3\2\2\2\u10f4\u10f5\3\2\2\2\u10f5"+
		"\u0175\3\2\2\2\u10f6\u10f4\3\2\2\2\u10f7\u10f8\7\u00a2\2\2\u10f8\u10f9"+
		"\5\u023e\u0120\2\u10f9\u1105\5\u00fe\u0080\2\u10fa\u10fd\7\u024b\2\2\u10fb"+
		"\u10fe\5\u0224\u0113\2\u10fc\u10fe\7\u013c\2\2\u10fd\u10fb\3\2\2\2\u10fd"+
		"\u10fc\3\2\2\2\u10fe\u10ff\3\2\2\2\u10ff\u1102\7\u0245\2\2\u1100\u1103"+
		"\5\u0224\u0113\2\u1101\u1103\7\u013c\2\2\u1102\u1100\3\2\2\2\u1102\u1101"+
		"\3\2\2\2\u1103\u1104\3\2\2\2\u1104\u1106\7\u024c\2\2\u1105\u10fa\3\2\2"+
		"\2\u1105\u1106\3\2\2\2\u1106\u110d\3\2\2\2\u1107\u1108\7\u0191\2\2\u1108"+
		"\u110e\7\u00de\2\2\u1109\u110a\7\u0191\2\2\u110a\u110b\7\u01a6\2\2\u110b"+
		"\u110c\7\26\2\2\u110c\u110e\5\u026a\u0136\2\u110d\u1107\3\2\2\2\u110d"+
		"\u1109\3\2\2\2\u110d\u110e\3\2\2\2\u110e\u1125\3\2\2\2\u110f\u1110\7^"+
		"\2\2\u1110\u111e\5\u023e\u0120\2\u1111\u1114\7\u024b\2\2\u1112\u1115\5"+
		"\u0224\u0113\2\u1113\u1115\7\u013c\2\2\u1114\u1112\3\2\2\2\u1114\u1113"+
		"\3\2\2\2\u1115\u111b\3\2\2\2\u1116\u1119\7\u0245\2\2\u1117\u111a\5\u0224"+
		"\u0113\2\u1118\u111a\7\u013c\2\2\u1119\u1117\3\2\2\2\u1119\u1118\3\2\2"+
		"\2\u111a\u111c\3\2\2\2\u111b\u1116\3\2\2\2\u111b\u111c\3\2\2\2\u111c\u111d"+
		"\3\2\2\2\u111d\u111f\7\u024c\2\2\u111e\u1111\3\2\2\2\u111e\u111f\3\2\2"+
		"\2\u111f\u1120\3\2\2\2\u1120\u1121\5\u0246\u0124\2\u1121\u1125\3\2\2\2"+
		"\u1122\u1123\7\u00f5\2\2\u1123\u1125\5\u0224\u0113\2\u1124\u10f7\3\2\2"+
		"\2\u1124\u110f\3\2\2\2\u1124\u1122\3\2\2\2\u1125\u0177\3\2\2\2\u1126\u1127"+
		"\7\u00a2\2\2\u1127\u1128\7 \2\2\u1128\u1129\5\u026a\u0136\2\u1129\u112a"+
		"\7\u01b7\2\2\u112a\u112e\5\u0210\u0109\2\u112b\u112f\5\u01ee\u00f8\2\u112c"+
		"\u112f\5\u01ec\u00f7\2\u112d\u112f\5\u01f0\u00f9\2\u112e\u112b\3\2\2\2"+
		"\u112e\u112c\3\2\2\2\u112e\u112d\3\2\2\2\u112f\u0179\3\2\2\2\u1130\u1131"+
		"\7\u00a2\2\2\u1131\u1133\7 \2\2\u1132\u1134\5\u0198\u00cd\2\u1133\u1132"+
		"\3\2\2\2\u1133\u1134\3\2\2\2\u1134\u1135\3\2\2\2\u1135\u1136\5\u026a\u0136"+
		"\2\u1136\u1137\7\u01b7\2\2\u1137\u1139\5\u0210\u0109\2\u1138\u113a\5\u01f8"+
		"\u00fd\2\u1139\u1138\3\2\2\2\u1139\u113a\3\2\2\2\u113a\u017b\3\2\2\2\u113b"+
		"\u113d\7\u0187\2\2\u113c\u113b\3\2\2\2\u113c\u113d\3\2\2\2\u113d\u113e"+
		"\3\2\2\2\u113e\u113f\7.\2\2\u113f\u1140\5\u026a\u0136\2\u1140\u1141\7"+
		"\u0191\2\2\u1141\u1142\7\u026d\2\2\u1142\u1143\7\u01b1\2\2\u1143\u1144"+
		"\7\u026d\2\2\u1144\u1145\7\u0193\2\2\u1145\u1146\5\u026a\u0136\2\u1146"+
		"\u017d\3\2\2\2\u1147\u1148\7.\2\2\u1148\u114c\5\u026a\u0136\2\u1149\u114d"+
		"\5\u01ee\u00f8\2\u114a\u114d\5\u01ec\u00f7\2\u114b\u114d\5\u01f0\u00f9"+
		"\2\u114c\u1149\3\2\2\2\u114c\u114a\3\2\2\2\u114c\u114b\3\2\2\2\u114d\u017f"+
		"\3\2\2\2\u114e\u114f\7\u00bd\2\2\u114f\u115d\5\u0210\u0109\2\u1150\u1151"+
		"\7\u0191\2\2\u1151\u1152\7\u01af\2\2\u1152\u1157\5\u0186\u00c4\2\u1153"+
		"\u1154\7\u0245\2\2\u1154\u1156\5\u0186\u00c4\2\u1155\u1153\3\2\2\2\u1156"+
		"\u1159\3\2\2\2\u1157\u1155\3\2\2\2\u1157\u1158\3\2\2\2\u1158\u115e\3\2"+
		"\2\2\u1159\u1157\3\2\2\2\u115a\u115b\7\u0191\2\2\u115b\u115c\7\u0170\2"+
		"\2\u115c\u115e\7\u00fd\2\2\u115d\u1150\3\2\2\2\u115d\u115a\3\2\2\2\u115d"+
		"\u115e\3\2\2\2\u115e\u1160\3\2\2\2\u115f\u1161\5\u01e2\u00f2\2\u1160\u115f"+
		"\3\2\2\2\u1160\u1161\3\2\2\2\u1161\u0181\3\2\2\2\u1162\u1163\7\u00bd\2"+
		"\2\u1163\u1164\5\u0210\u0109\2\u1164\u1165\5\u0184\u00c3\2\u1165\u0183"+
		"\3\2\2\2\u1166\u1175\5\u01ee\u00f8\2\u1167\u1175\5\u01ec\u00f7\2\u1168"+
		"\u1169\7\u00e6\2\2\u1169\u1175\5\u01dc\u00ef\2\u116a\u116b\t<\2\2\u116b"+
		"\u116c\7\u01af\2\2\u116c\u1171\5\u0186\u00c4\2\u116d\u116e\7\u0245\2\2"+
		"\u116e\u1170\5\u0186\u00c4\2\u116f\u116d\3\2\2\2\u1170\u1173\3\2\2\2\u1171"+
		"\u116f\3\2\2\2\u1171\u1172\3\2\2\2\u1172\u1175\3\2\2\2\u1173\u1171\3\2"+
		"\2\2\u1174\u1166\3\2\2\2\u1174\u1167\3\2\2\2\u1174\u1168\3\2\2\2\u1174"+
		"\u116a\3\2\2\2\u1175\u0185\3\2\2\2\u1176\u1178\7\u01a4\2\2\u1177\u1176"+
		"\3\2\2\2\u1177\u1178\3\2\2\2\u1178\u1179\3\2\2\2\u1179\u117b\5\u026a\u0136"+
		"\2\u117a\u117c\7\u024f\2\2\u117b\u117a\3\2\2\2\u117b\u117c\3\2\2\2\u117c"+
		"\u0187\3\2\2\2\u117d\u117e\7\u0106\2\2\u117e\u117f\5\u0210\u0109\2\u117f"+
		"\u1180\7\u01a3\2\2\u1180\u1186\5\u026a\u0136\2\u1181\u1187\5\u01ee\u00f8"+
		"\2\u1182\u1183\7A\2\2\u1183\u1184\7\u01a3\2\2\u1184\u1185\7V\2\2\u1185"+
		"\u1187\5\u0210\u0109\2\u1186\u1181\3\2\2\2\u1186\u1182\3\2\2\2\u1187\u0189"+
		"\3\2\2\2\u1188\u1189\7\u00d9\2\2\u1189\u118a\5\u0210\u0109\2\u118a\u118b"+
		"\7\u01a3\2\2\u118b\u118c\5\u026a\u0136\2\u118c\u118d\5\u01ee\u00f8\2\u118d"+
		"\u018b\3\2\2\2\u118e\u1191\5\u0190\u00c9\2\u118f\u1191\5\u018e\u00c8\2"+
		"\u1190\u118e\3\2\2\2\u1190\u118f\3\2\2\2\u1191\u018d\3\2\2\2\u1192\u1193"+
		"\7/\2\2\u1193\u1194\5\60\31\2\u1194\u119a\7\u0193\2\2\u1195\u1197\7\u00bc"+
		"\2\2\u1196\u1195\3\2\2\2\u1196\u1197\3\2\2\2\u1197\u1198\3\2\2\2\u1198"+
		"\u119b\7\u026d\2\2\u1199\u119b\7\u00f3\2\2\u119a\u1196\3\2\2\2\u119a\u1199"+
		"\3\2\2\2\u119b\u11a6\3\2\2\2\u119c\u119e\7\u01bc\2\2\u119d\u119c\3\2\2"+
		"\2\u119d\u119e\3\2\2\2\u119e\u11a4\3\2\2\2\u119f\u11a0\7\u024b\2\2\u11a0"+
		"\u11a1\5\u0192\u00ca\2\u11a1\u11a2\7\u024c\2\2\u11a2\u11a5\3\2\2\2\u11a3"+
		"\u11a5\5\u0192\u00ca\2\u11a4\u119f\3\2\2\2\u11a4\u11a3\3\2\2\2\u11a5\u11a7"+
		"\3\2\2\2\u11a6\u119d\3\2\2\2\u11a6\u11a7\3\2\2\2\u11a7\u11aa\3\2\2\2\u11a8"+
		"\u11a9\7\u01ba\2\2\u11a9\u11ab\5\u0230\u0119\2\u11aa\u11a8\3\2\2\2\u11aa"+
		"\u11ab\3\2\2\2\u11ab\u018f\3\2\2\2\u11ac\u11b2\7/\2\2\u11ad\u11b3\5\60"+
		"\31\2\u11ae\u11af\7\u024b\2\2\u11af\u11b0\5\20\t\2\u11b0\u11b1\7\u024c"+
		"\2\2\u11b1\u11b3\3\2\2\2\u11b2\u11ad\3\2\2\2\u11b2\u11ae\3\2\2\2\u11b3"+
		"\u11b4\3\2\2\2\u11b4\u11ba\7\u01b1\2\2\u11b5\u11b7\7\u00bc\2\2\u11b6\u11b5"+
		"\3\2\2\2\u11b6\u11b7\3\2\2\2\u11b7\u11b8\3\2\2\2\u11b8\u11bb\7\u026d\2"+
		"\2\u11b9\u11bb\7\u00f4\2\2\u11ba\u11b6\3\2\2\2\u11ba\u11b9\3\2\2\2\u11bb"+
		"\u11c6\3\2\2\2\u11bc\u11be\7\u01bc\2\2\u11bd\u11bc\3\2\2\2\u11bd\u11be"+
		"\3\2\2\2\u11be\u11c4\3\2\2\2\u11bf\u11c0\7\u024b\2\2\u11c0\u11c1\5\u0192"+
		"\u00ca\2\u11c1\u11c2\7\u024c\2\2\u11c2\u11c5\3\2\2\2\u11c3\u11c5\5\u0192"+
		"\u00ca\2\u11c4\u11bf\3\2\2\2\u11c4\u11c3\3\2\2\2\u11c5\u11c7\3\2\2\2\u11c6"+
		"\u11bd\3\2\2\2\u11c6\u11c7\3\2\2\2\u11c7\u0191\3\2\2\2\u11c8\u11cf\5\u0194"+
		"\u00cb\2\u11c9\u11cb\7\u0245\2\2\u11ca\u11c9\3\2\2\2\u11ca\u11cb\3\2\2"+
		"\2\u11cb\u11cc\3\2\2\2\u11cc\u11ce\5\u0194\u00cb\2\u11cd\u11ca\3\2\2\2"+
		"\u11ce\u11d1\3\2\2\2\u11cf\u11cd\3\2\2\2\u11cf\u11d0\3\2\2\2\u11d0\u0193"+
		"\3\2\2\2\u11d1\u11cf\3\2\2\2\u11d2\u11d4\7\u01d5\2\2\u11d3\u11d2\3\2\2"+
		"\2\u11d3\u11d4\3\2\2\2\u11d4\u11d5\3\2\2\2\u11d5\u120f\t=\2\2\u11d6\u11d8"+
		"\7\u00a0\2\2\u11d7\u11d9\5\u0240\u0121\2\u11d8\u11d7\3\2\2\2\u11d8\u11d9"+
		"\3\2\2\2\u11d9\u120f\3\2\2\2\u11da\u11dc\7\u015f\2\2\u11db\u11dd\5\u0240"+
		"\u0121\2\u11dc\u11db\3\2\2\2\u11dc\u11dd\3\2\2\2\u11dd\u120f\3\2\2\2\u11de"+
		"\u11e0\7?\2\2\u11df\u11e1\7\u0176\2\2\u11e0\u11df\3\2\2\2\u11e0\u11e1"+
		"\3\2\2\2\u11e1\u11e2\3\2\2\2\u11e2\u120f\7\u026d\2\2\u11e3\u11e5\7\u01a1"+
		"\2\2\u11e4\u11e6\7\u0176\2\2\u11e5\u11e4\3\2\2\2\u11e5\u11e6\3\2\2\2\u11e6"+
		"\u11e7\3\2\2\2\u11e7\u120f\7\u026d\2\2\u11e8\u11ea\7e\2\2\u11e9\u11eb"+
		"\5\u0240\u0121\2\u11ea\u11e9\3\2\2\2\u11ea\u11eb\3\2\2\2\u11eb\u120f\3"+
		"\2\2\2\u11ec\u11ed\7\u00be\2\2\u11ed\u120f\7\u026d\2\2\u11ee\u11ef\7O"+
		"\2\2\u11ef\u120f\7\u026d\2\2\u11f0\u11f1\7\\\2\2\u11f1\u11f4\7\u00be\2"+
		"\2\u11f2\u11f5\7\u024f\2\2\u11f3\u11f5\5\u02b6\u015c\2\u11f4\u11f2\3\2"+
		"\2\2\u11f4\u11f3\3\2\2\2\u11f5\u120f\3\2\2\2\u11f6\u11fc\7\u01d4\2\2\u11f7"+
		"\u11fd\7\u024f\2\2\u11f8\u11f9\7\u024b\2\2\u11f9\u11fa\5\u02b6\u015c\2"+
		"\u11fa\u11fb\7\u024c\2\2\u11fb\u11fd\3\2\2\2\u11fc\u11f7\3\2\2\2\u11fc"+
		"\u11f8\3\2\2\2\u11fd\u120f\3\2\2\2\u11fe\u11ff\7\\\2\2\u11ff\u1200\7\u01a0"+
		"\2\2\u1200\u1201\7\u01a1\2\2\u1201\u120f\5\u02b6\u015c\2\u1202\u1203\7"+
		"\u01d2\2\2\u1203\u1204\7\u024b\2\2\u1204\u1205\5\u02b6\u015c\2\u1205\u1206"+
		"\7\u024c\2\2\u1206\u120f\3\2\2\2\u1207\u1208\7\u01d3\2\2\u1208\u1209\7"+
		"\u024b\2\2\u1209\u120a\5\u02b6\u015c\2\u120a\u120b\7\u024c\2\2\u120b\u120f"+
		"\3\2\2\2\u120c\u120d\7L\2\2\u120d\u120f\7\u026d\2\2\u120e\u11d3\3\2\2"+
		"\2\u120e\u11d6\3\2\2\2\u120e\u11da\3\2\2\2\u120e\u11de\3\2\2\2\u120e\u11e3"+
		"\3\2\2\2\u120e\u11e8\3\2\2\2\u120e\u11ec\3\2\2\2\u120e\u11ee\3\2\2\2\u120e"+
		"\u11f0\3\2\2\2\u120e\u11f6\3\2\2\2\u120e\u11fe\3\2\2\2\u120e\u1202\3\2"+
		"\2\2\u120e\u1207\3\2\2\2\u120e\u120c\3\2\2\2\u120f\u0195\3\2\2\2\u1210"+
		"\u1211\7\u01a5\2\2\u1211\u1213\7\u00cc\2\2\u1212\u1210\3\2\2\2\u1212\u1213"+
		"\3\2\2\2\u1213\u1215\3\2\2\2\u1214\u1216\t\66\2\2\u1215\u1214\3\2\2\2"+
		"\u1215\u1216\3\2\2\2\u1216\u1218\3\2\2\2\u1217\u1219\7\u00c3\2\2\u1218"+
		"\u1217\3\2\2\2\u1218\u1219\3\2\2\2\u1219\u121b\3\2\2\2\u121a\u121c\7\u008c"+
		"\2\2\u121b\u121a\3\2\2\2\u121b\u121c\3\2\2\2\u121c\u121d\3\2\2\2\u121d"+
		"\u121f\7\u011a\2\2\u121e\u1220\5\u019a\u00ce\2\u121f\u121e\3\2\2\2\u121f"+
		"\u1220\3\2\2\2\u1220\u1221\3\2\2\2\u1221\u1223\5\u026a\u0136\2\u1222\u1224"+
		"\5\u019c\u00cf\2\u1223\u1222\3\2\2\2\u1223\u1224\3\2\2\2\u1224\u1227\3"+
		"\2\2\2\u1225\u1226\7\u01b7\2\2\u1226\u1228\5\u0210\u0109\2\u1227\u1225"+
		"\3\2\2\2\u1227\u1228\3\2\2\2\u1228\u122b\3\2\2\2\u1229\u122a\7\u01bc\2"+
		"\2\u122a\u122c\5\u01dc\u00ef\2\u122b\u1229\3\2\2\2\u122b\u122c\3\2\2\2"+
		"\u122c\u122e\3\2\2\2\u122d\u122f\5\u01e8\u00f5\2\u122e\u122d\3\2\2\2\u122e"+
		"\u122f\3\2\2\2\u122f\u1230\3\2\2\2\u1230\u1231\7\u0176\2\2\u1231\u1233"+
		"\5\u0270\u0139\2\u1232\u1234\5\u019e\u00d0\2\u1233\u1232\3\2\2\2\u1233"+
		"\u1234\3\2\2\2\u1234\u123a\3\2\2\2\u1235\u1237\7\u01bc\2\2\u1236\u1238"+
		"\7\u0098\2\2\u1237\u1236\3\2\2\2\u1237\u1238\3\2\2\2\u1238\u1239\3\2\2"+
		"\2\u1239\u123b\7\66\2\2\u123a\u1235\3\2\2\2\u123a\u123b\3\2\2\2\u123b"+
		"\u0197\3\2\2\2\u123c\u123d\7i\2\2\u123d\u123e\7\u0130\2\2\u123e\u0199"+
		"\3\2\2\2\u123f\u1240\7i\2\2\u1240\u1241\7\u01a0\2\2\u1241\u1242\7\u0130"+
		"\2\2\u1242\u019b\3\2\2\2\u1243\u1244\7\u024b\2\2\u1244\u1249\5\u0210\u0109"+
		"\2\u1245\u1246\7\u0245\2\2\u1246\u1248\5\u0210\u0109\2\u1247\u1245\3\2"+
		"\2\2\u1248\u124b\3\2\2\2\u1249\u1247\3\2\2\2\u1249\u124a\3\2\2\2\u124a"+
		"\u124c\3\2\2\2\u124b\u1249\3\2\2\2\u124c\u124d\7\u024c\2\2\u124d\u019d"+
		"\3\2\2\2\u124e\u1250\7\u01bc\2\2\u124f\u1251\t>\2\2\u1250\u124f\3\2\2"+
		"\2\u1250\u1251\3\2\2\2\u1251\u1252\3\2\2\2\u1252\u1253\7\u017c\2\2\u1253"+
		"\u1254\7\u00a3\2\2\u1254\u019f\3\2\2\2\u1255\u1257\t?\2\2\u1256\u1255"+
		"\3\2\2\2\u1256\u1257\3\2\2\2\u1257\u1258\3\2\2\2\u1258\u125b\t\66\2\2"+
		"\u1259\u125b\7\u0110\2\2\u125a\u1256\3\2\2\2\u125a\u1259\3\2\2\2\u125a"+
		"\u125b\3\2\2\2\u125b\u125c\3\2\2\2\u125c\u125e\7\u01af\2\2\u125d\u125f"+
		"\5\u019a\u00ce\2\u125e\u125d\3\2\2\2\u125e\u125f\3\2\2\2\u125f\u1260\3"+
		"\2\2\2\u1260\u1261\5\u026a\u0136\2\u1261\u1263\5\u01a6\u00d4\2\u1262\u1264"+
		"\5\u01b4\u00db\2\u1263\u1262\3\2\2\2\u1263\u1264\3\2\2\2\u1264\u1267\3"+
		"\2\2\2\u1265\u1266\7\u01b7\2\2\u1266\u1268\5\u0210\u0109\2\u1267\u1265"+
		"\3\2\2\2\u1267\u1268\3\2\2\2\u1268\u126a\3\2\2\2\u1269\u126b\5\u01e4\u00f3"+
		"\2\u126a\u1269\3\2\2\2\u126a\u126b\3\2\2\2\u126b\u126d\3\2\2\2\u126c\u126e"+
		"\5\u01e6\u00f4\2\u126d\u126c\3\2\2\2\u126d\u126e\3\2\2\2\u126e\u1270\3"+
		"\2\2\2\u126f\u1271\5\u01e8\u00f5\2\u1270\u126f\3\2\2\2\u1270\u1271\3\2"+
		"\2\2\u1271\u01a1\3\2\2\2\u1272\u1274\t?\2\2\u1273\u1272\3\2\2\2\u1273"+
		"\u1274\3\2\2\2\u1274\u1275\3\2\2\2\u1275\u1278\t\66\2\2\u1276\u1278\7"+
		"\u0110\2\2\u1277\u1273\3\2\2\2\u1277\u1276\3\2\2\2\u1277\u1278\3\2\2\2"+
		"\u1278\u1279\3\2\2\2\u1279\u127b\7\u01af\2\2\u127a\u127c\5\u019a\u00ce"+
		"\2\u127b\u127a\3\2\2\2\u127b\u127c\3\2\2\2\u127c\u127d\3\2\2\2\u127d\u127f"+
		"\5\u026a\u0136\2\u127e\u1280\5\u01d8\u00ed\2\u127f\u127e\3\2\2\2\u127f"+
		"\u1280\3\2\2\2\u1280\u1283\3\2\2\2\u1281\u1282\7\u01b7\2\2\u1282\u1284"+
		"\5\u0210\u0109\2\u1283\u1281\3\2\2\2\u1283\u1284\3\2\2\2\u1284\u1286\3"+
		"\2\2\2\u1285\u1287\5\u01e4\u00f3\2\u1286\u1285\3\2\2\2\u1286\u1287\3\2"+
		"\2\2\u1287\u1289\3\2\2\2\u1288\u128a\5\u01e6\u00f4\2\u1289\u1288\3\2\2"+
		"\2\u1289\u128a\3\2\2\2\u128a\u128c\3\2\2\2\u128b\u128d\5\u01e8\u00f5\2"+
		"\u128c\u128b\3\2\2\2\u128c\u128d\3\2\2\2\u128d\u128e\3\2\2\2\u128e\u1292"+
		"\7\u0176\2\2\u128f\u1293\5\u0270\u0139\2\u1290\u1291\7T\2\2\u1291\u1293"+
		"\5\u0246\u0124\2\u1292\u128f\3\2\2\2\u1292\u1290\3\2\2\2\u1293\u1299\3"+
		"\2\2\2\u1294\u1296\7\u01bc\2\2\u1295\u1297\7\u0098\2\2\u1296\u1295\3\2"+
		"\2\2\u1296\u1297\3\2\2\2\u1297\u1298\3\2\2\2\u1298\u129a\7\66\2\2\u1299"+
		"\u1294\3\2\2\2\u1299\u129a\3\2\2\2\u129a\u01a3\3\2\2\2\u129b\u129c\7\u0192"+
		"\2\2\u129c\u129e\7\u01af\2\2\u129d\u129f\5\u019a\u00ce\2\u129e\u129d\3"+
		"\2\2\2\u129e\u129f\3\2\2\2\u129f\u12a0\3\2\2\2\u12a0\u12a3\5\u026a\u0136"+
		"\2\u12a1\u12a4\5\u01b0\u00d9\2\u12a2\u12a4\5\u01a8\u00d5\2\u12a3\u12a1"+
		"\3\2\2\2\u12a3\u12a2\3\2\2\2\u12a4\u12a5\3\2\2\2\u12a5\u12a6\5\u01ba\u00de"+
		"\2\u12a6\u01a5\3\2\2\2\u12a7\u12ab\5\u01b0\u00d9\2\u12a8\u12ab\5\u01b2"+
		"\u00da\2\u12a9\u12ab\5\u01a8\u00d5\2\u12aa\u12a7\3\2\2\2\u12aa\u12a8\3"+
		"\2\2\2\u12aa\u12a9\3\2\2\2\u12ab\u01a7\3\2\2\2\u12ac\u12ad\7\u00ae\2\2"+
		"\u12ad\u12ae\7\u009e\2\2\u12ae\u12b0\5\u026a\u0136\2\u12af\u12b1\5\u01c2"+
		"\u00e2\2\u12b0\u12af\3\2\2\2\u12b0\u12b1\3\2\2\2\u12b1\u12b2\3\2\2\2\u12b2"+
		"\u12b3\5\u01aa\u00d6\2\u12b3\u01a9\3\2\2\2\u12b4\u12b5\7\u0191\2\2\u12b5"+
		"\u12b6\7\u014c\2\2\u12b6\u12b9\5\u01ac\u00d7\2\u12b7\u12b9\7\u0187\2\2"+
		"\u12b8\u12b4\3\2\2\2\u12b8\u12b7\3\2\2\2\u12b9\u01ab\3\2\2\2\u12ba\u12bb"+
		"\7\u0197\2\2\u12bb\u12bc\7\u024b\2\2\u12bc\u12c1\5\u0230\u0119\2\u12bd"+
		"\u12be\7\u0245\2\2\u12be\u12c0\5\u0230\u0119\2\u12bf\u12bd\3\2\2\2\u12c0"+
		"\u12c3\3\2\2\2\u12c1\u12bf\3\2\2\2\u12c1\u12c2\3\2\2\2\u12c2\u12c4\3\2"+
		"\2\2\u12c3\u12c1\3\2\2\2\u12c4\u12c5\7\u024c\2\2\u12c5\u12d4\3\2\2\2\u12c6"+
		"\u12c7\7\u0193\2\2\u12c7\u12c8\5\u01ae\u00d8\2\u12c8\u12c9\7\u01b1\2\2"+
		"\u12c9\u12ca\5\u01ae\u00d8\2\u12ca\u12d4\3\2\2\2\u12cb\u12cc\7\u01bc\2"+
		"\2\u12cc\u12cd\7\u024b\2\2\u12cd\u12ce\7\u01ef\2\2\u12ce\u12cf\7\u0268"+
		"\2\2\u12cf\u12d0\7\u0245\2\2\u12d0\u12d1\7\u0205\2\2\u12d1\u12d2\7\u0268"+
		"\2\2\u12d2\u12d4\7\u024c\2\2\u12d3\u12ba\3\2\2\2\u12d3\u12c6\3\2\2\2\u12d3"+
		"\u12cb\3\2\2\2\u12d4\u01ad\3\2\2\2\u12d5\u12d6\7\u024b\2\2\u12d6\u12db"+
		"\5\u0230\u0119\2\u12d7\u12d8\7\u0245\2\2\u12d8\u12da\5\u0230\u0119\2\u12d9"+
		"\u12d7\3\2\2\2\u12da\u12dd\3\2\2\2\u12db\u12d9\3\2\2\2\u12db\u12dc\3\2"+
		"\2\2\u12dc\u12de\3\2\2\2\u12dd\u12db\3\2\2\2\u12de\u12df\7\u024c\2\2\u12df"+
		"\u01af\3\2\2\2\u12e0\u12e9\7\u024b\2\2\u12e1\u12e6\5\u01c4\u00e3\2\u12e2"+
		"\u12e3\7\u0245\2\2\u12e3\u12e5\5\u01c4\u00e3\2\u12e4\u12e2\3\2\2\2\u12e5"+
		"\u12e8\3\2\2\2\u12e6\u12e4\3\2\2\2\u12e6\u12e7\3\2\2\2\u12e7\u12ea\3\2"+
		"\2\2\u12e8\u12e6\3\2\2\2\u12e9\u12e1\3\2\2\2\u12e9\u12ea\3\2\2\2\u12ea"+
		"\u12eb\3\2\2\2\u12eb\u12ee\7\u024c\2\2\u12ec\u12ed\7t\2\2\u12ed\u12ef"+
		"\5\u01d8\u00ed\2\u12ee\u12ec\3\2\2\2\u12ee\u12ef\3\2\2\2\u12ef\u01b1\3"+
		"\2\2\2\u12f0\u12f1\7\u009e\2\2\u12f1\u12f3\5\u0224\u0113\2\u12f2\u12f4"+
		"\5\u01c2\u00e2\2\u12f3\u12f2\3\2\2\2\u12f3\u12f4\3\2\2\2\u12f4\u01b3\3"+
		"\2\2\2\u12f5\u12f6\7\u00ae\2\2\u12f6\u12f7\7\26\2\2\u12f7\u12f8\5\u01b6"+
		"\u00dc\2\u12f8\u01b5\3\2\2\2\u12f9\u12fa\t@\2\2\u12fa\u12fb\7\u024b\2"+
		"\2\u12fb\u1300\5\u01b8\u00dd\2\u12fc\u12fd\7\u0245\2\2\u12fd\u12ff\5\u01b8"+
		"\u00dd\2\u12fe\u12fc\3\2\2\2\u12ff\u1302\3\2\2\2\u1300\u12fe\3\2\2\2\u1300"+
		"\u1301\3\2\2\2\u1301\u1303\3\2\2\2\u1302\u1300\3\2\2\2\u1303\u1304\7\u024c"+
		"\2\2\u1304\u01b7\3\2\2\2\u1305\u1307\5\u0230\u0119\2\u1306\u1308\5\u0210"+
		"\u0109\2\u1307\u1306\3\2\2\2\u1307\u1308\3\2\2\2\u1308\u01b9\3\2\2\2\u1309"+
		"\u130a\7\u00e4\2\2\u130a\u130c\5\u0210\u0109\2\u130b\u130d\5\u01bc\u00df"+
		"\2\u130c\u130b\3\2\2\2\u130c\u130d\3\2\2\2\u130d\u01bb\3\2\2\2\u130e\u130f"+
		"\7\u00a4\2\2\u130f\u1310\7\u024b\2\2\u1310\u1315\5\u01be\u00e0\2\u1311"+
		"\u1312\7\u0245\2\2\u1312\u1314\5\u01be\u00e0\2\u1313\u1311\3\2\2\2\u1314"+
		"\u1317\3\2\2\2\u1315\u1313\3\2\2\2\u1315\u1316\3\2\2\2\u1316\u1318\3\2"+
		"\2\2\u1317\u1315\3\2\2\2\u1318\u1319\7\u024c\2\2\u1319\u01bd\3\2\2\2\u131a"+
		"\u131c\t<\2\2\u131b\u131a\3\2\2\2\u131b\u131c\3\2\2\2\u131c\u131d\3\2"+
		"\2\2\u131d\u131f\5\u01c0\u00e1\2\u131e\u1320\5\u0146\u00a4\2\u131f\u131e"+
		"\3\2\2\2\u131f\u1320\3\2\2\2\u1320\u01bf\3\2\2\2\u1321\u1324\5\u0210\u0109"+
		"\2\u1322\u1324\7\u01b6\2\2\u1323\u1321\3\2\2\2\u1323\u1322\3\2\2\2\u1324"+
		"\u01c1\3\2\2\2\u1325\u1326\7\u024b\2\2\u1326\u132b\5\u01c6\u00e4\2\u1327"+
		"\u1328\7\u0245\2\2\u1328\u132a\5\u01c6\u00e4\2\u1329\u1327\3\2\2\2\u132a"+
		"\u132d\3\2\2\2\u132b\u1329\3\2\2\2\u132b\u132c\3\2\2\2\u132c\u132e\3\2"+
		"\2\2\u132d\u132b\3\2\2\2\u132e\u132f\7\u024c\2\2\u132f\u01c3\3\2\2\2\u1330"+
		"\u133b\5\u01c8\u00e5\2\u1331\u133b\5\u01cc\u00e7\2\u1332\u1333\7\u0167"+
		"\2\2\u1333\u1337\5\u026a\u0136\2\u1334\u1336\5\u01ca\u00e6\2\u1335\u1334"+
		"\3\2\2\2\u1336\u1339\3\2\2\2\u1337\u1335\3\2\2\2\u1337\u1338\3\2\2\2\u1338"+
		"\u133b\3\2\2\2\u1339\u1337\3\2\2\2\u133a\u1330\3\2\2\2\u133a\u1331\3\2"+
		"\2\2\u133a\u1332\3\2\2\2\u133b\u01c5\3\2\2\2\u133c\u133f\5\u0210\u0109"+
		"\2\u133d\u133e\7\u01bc\2\2\u133e\u1340\7\u00a4\2\2\u133f\u133d\3\2\2\2"+
		"\u133f\u1340\3\2\2\2\u1340\u1344\3\2\2\2\u1341\u1343\5\u01cc\u00e7\2\u1342"+
		"\u1341\3\2\2\2\u1343\u1346\3\2\2\2\u1344\u1342\3\2\2\2\u1344\u1345\3\2"+
		"\2\2\u1345\u1349\3\2\2\2\u1346\u1344\3\2\2\2\u1347\u1349\5\u01cc\u00e7"+
		"\2\u1348\u133c\3\2\2\2\u1348\u1347\3\2\2\2\u1349\u01c7\3\2\2\2\u134a\u134b"+
		"\5\u0210\u0109\2\u134b\u134d\5\u0224\u0113\2\u134c\u134e\5\u01bc\u00df"+
		"\2\u134d\u134c\3\2\2\2\u134d\u134e\3\2\2\2\u134e\u1350\3\2\2\2\u134f\u1351"+
		"\5\u01fa\u00fe\2\u1350\u134f\3\2\2\2\u1350\u1351\3\2\2\2\u1351\u1355\3"+
		"\2\2\2\u1352\u1354\5\u01cc\u00e7\2\u1353\u1352\3\2\2\2\u1354\u1357\3\2"+
		"\2\2\u1355\u1353\3\2\2\2\u1355\u1356\3\2\2\2\u1356\u01c9\3\2\2\2\u1357"+
		"\u1355\3\2\2\2\u1358\u1359\tA\2\2\u1359\u135a\tB\2\2\u135a\u01cb\3\2\2"+
		"\2\u135b\u135c\7\u017f\2\2\u135c\u135e\5\u0210\u0109\2\u135d\u135b\3\2"+
		"\2\2\u135d\u135e\3\2\2\2\u135e\u135f\3\2\2\2\u135f\u1361\5\u01ce\u00e8"+
		"\2\u1360\u1362\5d\63\2\u1361\u1360\3\2\2\2\u1361\u1362\3\2\2\2\u1362\u1364"+
		"\3\2\2\2\u1363\u1365\5f\64\2\u1364\u1363\3\2\2\2\u1364\u1365\3\2\2\2\u1365"+
		"\u01cd\3\2\2\2\u1366\u1369\7Q\2\2\u1367\u1368\7\u01b7\2\2\u1368\u136a"+
		"\5\u0210\u0109\2\u1369\u1367\3\2\2\2\u1369\u136a\3\2\2\2\u136a\u136b\3"+
		"\2\2\2\u136b\u136c\7\u024b\2\2\u136c\u136d\5\u029c\u014f\2\u136d\u136e"+
		"\7\u01bc\2\2\u136e\u1376\5\u01d0\u00e9\2\u136f\u1370\7\u0245\2\2\u1370"+
		"\u1371\5\u029c\u014f\2\u1371\u1372\7\u01bc\2\2\u1372\u1373\5\u01d0\u00e9"+
		"\2\u1373\u1375\3\2\2\2\u1374\u136f\3\2\2\2\u1375\u1378\3\2\2\2\u1376\u1374"+
		"\3\2\2\2\u1376\u1377\3\2\2\2\u1377\u1379\3\2\2\2\u1378\u1376\3\2\2\2\u1379"+
		"\u137a\7\u024c\2\2\u137a\u137d\5\u01d6\u00ec\2\u137b\u137c\7\u01ba\2\2"+
		"\u137c\u137e\5\u0230\u0119\2\u137d\u137b\3\2\2\2\u137d\u137e\3\2\2\2\u137e"+
		"\u13b4\3\2\2\2\u137f\u1380\7\u0192\2\2\u1380\u1381\7|\2\2\u1381\u1383"+
		"\5\u01d8\u00ed\2\u1382\u137f\3\2\2\2\u1382\u1383\3\2\2\2\u1383\u1384\3"+
		"\2\2\2\u1384\u1385\7\u01a9\2\2\u1385\u1387\5\u026a\u0136\2\u1386\u1388"+
		"\5\u01d8\u00ed\2\u1387\u1386\3\2\2\2\u1387\u1388\3\2\2\2\u1388\u1390\3"+
		"\2\2\2\u1389\u138a\7\u008b\2\2\u138a\u138f\tC\2\2\u138b\u138c\7\u01a3"+
		"\2\2\u138c\u138d\tD\2\2\u138d\u138f\5\u01ea\u00f6\2\u138e\u1389\3\2\2"+
		"\2\u138e\u138b\3\2\2\2\u138f\u1392\3\2\2\2\u1390\u138e\3\2\2\2\u1390\u1391"+
		"\3\2\2\2\u1391\u13b4\3\2\2\2\u1392\u1390\3\2\2\2\u1393\u1394\7\u017c\2"+
		"\2\u1394\u1395\7\u024b\2\2\u1395\u1396\5\u0230\u0119\2\u1396\u1399\7\u024c"+
		"\2\2\u1397\u1398\7\u0098\2\2\u1398\u139a\7s\2\2\u1399\u1397\3\2\2\2\u1399"+
		"\u139a\3\2\2\2\u139a\u13b4\3\2\2\2\u139b\u139d\7\u01a0\2\2\u139c\u139b"+
		"\3\2\2\2\u139c\u139d\3\2\2\2\u139d\u139e\3\2\2\2\u139e\u13b4\7\u01a1\2"+
		"\2\u139f\u13a3\7\u01b5\2\2\u13a0\u13a1\7\u01a8\2\2\u13a1\u13a3\7|\2\2"+
		"\u13a2\u139f\3\2\2\2\u13a2\u13a0\3\2\2\2\u13a3\u13a5\3\2\2\2\u13a4\u13a6"+
		"\5\u01d8\u00ed\2\u13a5\u13a4\3\2\2\2\u13a5\u13a6\3\2\2\2\u13a6\u13a7\3"+
		"\2\2\2\u13a7\u13b4\5\u01d6\u00ec\2\u13a8\u13a9\7\u0187\2\2\u13a9\u13b4"+
		"\5\u0230\u0119\2\u13aa\u13b4\5Z.\2\u13ab\u13ac\7`\2\2\u13ac\u13ad\7\r"+
		"\2\2\u13ad\u13ae\7\u0176\2\2\u13ae\u13af\7\u024b\2\2\u13af\u13b0\5\u0230"+
		"\u0119\2\u13b0\u13b1\7\u024c\2\2\u13b1\u13b2\7\u00f6\2\2\u13b2\u13b4\3"+
		"\2\2\2\u13b3\u1366\3\2\2\2\u13b3\u1382\3\2\2\2\u13b3\u1393\3\2\2\2\u13b3"+
		"\u139c\3\2\2\2\u13b3\u13a2\3\2\2\2\u13b3\u13a8\3\2\2\2\u13b3\u13aa\3\2"+
		"\2\2\u13b3\u13ab\3\2\2\2\u13b4\u01cf\3\2\2\2\u13b5\u13c3\5\u0234\u011b"+
		"\2\u13b6\u13c3\7\u0242\2\2\u13b7\u13c3\7\u0246\2\2\u13b8\u13c3\7\u0247"+
		"\2\2\u13b9\u13c3\7\u0248\2\2\u13ba\u13c3\7\u0249\2\2\u13bb\u13c3\7\u024a"+
		"\2\2\u13bc\u13c3\7\u024d\2\2\u13bd\u13c3\7\u024e\2\2\u13be\u13c3\7\u024f"+
		"\2\2\u13bf\u13c3\7\u0250\2\2\u13c0\u13c3\7\u0251\2\2\u13c1\u13c3\7\u0252"+
		"\2\2\u13c2\u13b5\3\2\2\2\u13c2\u13b6\3\2\2\2\u13c2\u13b7\3\2\2\2\u13c2"+
		"\u13b8\3\2\2\2\u13c2\u13b9\3\2\2\2\u13c2\u13ba\3\2\2\2\u13c2\u13bb\3\2"+
		"\2\2\u13c2\u13bc\3\2\2\2\u13c2\u13bd\3\2\2\2\u13c2\u13be\3\2\2\2\u13c2"+
		"\u13bf\3\2\2\2\u13c2\u13c0\3\2\2\2\u13c2\u13c1\3\2\2\2\u13c3\u01d1\3\2"+
		"\2\2\u13c4\u13d2\5\u01d4\u00eb\2\u13c5\u13d2\7\u0242\2\2\u13c6\u13d2\7"+
		"\u0246\2\2\u13c7\u13d2\7\u0247\2\2\u13c8\u13d2\7\u0248\2\2\u13c9\u13d2"+
		"\7\u0249\2\2\u13ca\u13d2\7\u024a\2\2\u13cb\u13d2\7\u024d\2\2\u13cc\u13d2"+
		"\7\u024e\2\2\u13cd\u13d2\7\u024f\2\2\u13ce\u13d2\7\u0250\2\2\u13cf\u13d2"+
		"\7\u0251\2\2\u13d0\u13d2\7\u0252\2\2\u13d1\u13c4\3\2\2\2\u13d1\u13c5\3"+
		"\2\2\2\u13d1\u13c6\3\2\2\2\u13d1\u13c7\3\2\2\2\u13d1\u13c8\3\2\2\2\u13d1"+
		"\u13c9\3\2\2\2\u13d1\u13ca\3\2\2\2\u13d1\u13cb\3\2\2\2\u13d1\u13cc\3\2"+
		"\2\2\u13d1\u13cd\3\2\2\2\u13d1\u13ce\3\2\2\2\u13d1\u13cf\3\2\2\2\u13d1"+
		"\u13d0\3\2\2\2\u13d2\u01d3\3\2\2\2\u13d3\u13d4\tE\2\2\u13d4\u01d5\3\2"+
		"\2\2\u13d5\u13d7\5\u0096L\2\u13d6\u13d5\3\2\2\2\u13d6\u13d7\3\2\2\2\u13d7"+
		"\u13d9\3\2\2\2\u13d8\u13da\5\u01e2\u00f2\2\u13d9\u13d8\3\2\2\2\u13d9\u13da"+
		"\3\2\2\2\u13da\u13e1\3\2\2\2\u13db\u13dc\7\u01b7\2\2\u13dc\u13df\7q\2"+
		"\2\u13dd\u13e0\5\u01e8\u00f5\2\u13de\u13e0\5\u026a\u0136\2\u13df\u13dd"+
		"\3\2\2\2\u13df\u13de\3\2\2\2\u13e0\u13e2\3\2\2\2\u13e1\u13db\3\2\2\2\u13e1"+
		"\u13e2\3\2\2\2\u13e2\u01d7\3\2\2\2\u13e3\u13e4\7\u024b\2\2\u13e4\u13e5"+
		"\5\u01da\u00ee\2\u13e5\u13e6\7\u024c\2\2\u13e6\u01d9\3\2\2\2\u13e7\u13ec"+
		"\5\u026a\u0136\2\u13e8\u13e9\7\u0245\2\2\u13e9\u13eb\5\u026a\u0136\2\u13ea"+
		"\u13e8\3\2\2\2\u13eb\u13ee\3\2\2\2\u13ec\u13ea\3\2\2\2\u13ec\u13ed\3\2"+
		"\2\2\u13ed\u01db\3\2\2\2\u13ee\u13ec\3\2\2\2\u13ef\u13f0\7\u024b\2\2\u13f0"+
		"\u13f5\5\u01de\u00f0\2\u13f1\u13f2\7\u0245\2\2\u13f2\u13f4\5\u01de\u00f0"+
		"\2\u13f3\u13f1\3\2\2\2\u13f4\u13f7\3\2\2\2\u13f5\u13f3\3\2\2\2\u13f5\u13f6"+
		"\3\2\2\2\u13f6\u13f8\3\2\2\2\u13f7\u13f5\3\2\2\2\u13f8\u13f9\7\u024c\2"+
		"\2\u13f9\u01dd\3\2\2\2\u13fa\u13fd\5\u01e0\u00f1\2\u13fb\u13fc\7\u0242"+
		"\2\2\u13fc\u13fe\5\u0230\u0119\2\u13fd\u13fb\3\2\2\2\u13fd\u13fe\3\2\2"+
		"\2\u13fe\u01df\3\2\2\2\u13ff\u1402\5\u0214\u010b\2\u1400\u1401\7\u0253"+
		"\2\2\u1401\u1403\5\u0214\u010b\2\u1402\u1400\3\2\2\2\u1402\u1403\3\2\2"+
		"\2\u1403\u01e1\3\2\2\2\u1404\u1405\7\u01bc\2\2\u1405\u1406\5\u01dc\u00ef"+
		"\2\u1406\u01e3\3\2\2\2\u1407\u140d\5\u01e2\u00f2\2\u1408\u1409\7\u01bc"+
		"\2\2\u1409\u140d\7\u00a0\2\2\u140a\u140b\7\u011f\2\2\u140b\u140d\7\u00a0"+
		"\2\2\u140c\u1407\3\2\2\2\u140c\u1408\3\2\2\2\u140c\u140a\3\2\2\2\u140d"+
		"\u01e5\3\2\2\2\u140e\u140f\7\u01a3\2\2\u140f\u1415\7&\2\2\u1410\u1411"+
		"\7\u00b6\2\2\u1411\u1416\7\u00d8\2\2\u1412\u1413\7>\2\2\u1413\u1416\7"+
		"\u00d8\2\2\u1414\u1416\7I\2\2\u1415\u1410\3\2\2\2\u1415\u1412\3\2\2\2"+
		"\u1415\u1414\3\2\2\2\u1416\u01e7\3\2\2\2\u1417\u1418\7\u00fe\2\2\u1418"+
		"\u1419\5\u0210\u0109\2\u1419\u01e9\3\2\2\2\u141a\u1420\5\u01f8\u00fd\2"+
		"\u141b\u141c\7\u00e6\2\2\u141c\u1420\tF\2\2\u141d\u141e\7\u0098\2\2\u141e"+
		"\u1420\7\6\2\2\u141f\u141a\3\2\2\2\u141f\u141b\3\2\2\2\u141f\u141d\3\2"+
		"\2\2\u1420\u01eb\3\2\2\2\u1421\u1422\7\u00aa\2\2\u1422\u1426\7\u01b1\2"+
		"\2\u1423\u1427\5\u0210\u0109\2\u1424\u1427\7\u0186\2\2\u1425\u1427\7\u01ac"+
		"\2\2\u1426\u1423\3\2\2\2\u1426\u1424\3\2\2\2\u1426\u1425\3\2\2\2\u1427"+
		"\u01ed\3\2\2\2\u1428\u1429\7\u00ca\2\2\u1429\u142a\7\u01b1\2\2\u142a\u142b"+
		"\5\u0210\u0109\2\u142b\u01ef\3\2\2\2\u142c\u142d\7\u00e6\2\2\u142d\u142e"+
		"\7\u00db\2\2\u142e\u142f\5\u0210\u0109\2\u142f\u01f1\3\2\2\2\u1430\u143c"+
		"\7\u01ab\2\2\u1431\u143c\7x\2\2\u1432\u143c\7\u0112\2\2\u1433\u143c\7"+
		">\2\2\u1434\u143c\7\u0107\2\2\u1435\u143c\7\u01a9\2\2\u1436\u143c\7\u0106"+
		"\2\2\u1437\u1439\7\u0170\2\2\u1438\u143a\7\u00b8\2\2\u1439\u1438\3\2\2"+
		"\2\u1439\u143a\3\2\2\2\u143a\u143c\3\2\2\2\u143b\u1430\3\2\2\2\u143b\u1431"+
		"\3\2\2\2\u143b\u1432\3\2\2\2\u143b\u1433\3\2\2\2\u143b\u1434\3\2\2\2\u143b"+
		"\u1435\3\2\2\2\u143b\u1436\3\2\2\2\u143b\u1437\3\2\2\2\u143c\u01f3\3\2"+
		"\2\2\u143d\u143e\tG\2\2\u143e\u01f5\3\2\2\2\u143f\u1440\7\u00ae\2\2\u1440"+
		"\u1441\7\26\2\2\u1441\u1446\5\u0230\u0119\2\u1442\u1443\7\u0245\2\2\u1443"+
		"\u1445\5\u0230\u0119\2\u1444\u1442\3\2\2\2\u1445\u1448\3\2\2\2\u1446\u1444"+
		"\3\2\2\2\u1446\u1447\3\2\2\2\u1447\u01f7\3\2\2\2\u1448\u1446\3\2\2\2\u1449"+
		"\u144a\tH\2\2\u144a\u01f9\3\2\2\2\u144b\u144c\7\u017d\2\2\u144c\u144d"+
		"\5\u026a\u0136\2\u144d\u01fb\3\2\2\2\u144e\u1451\5\u0210\u0109\2\u144f"+
		"\u1451\5\u01fe\u0100\2\u1450\u144e\3\2\2\2\u1450\u144f\3\2\2\2\u1451\u1453"+
		"\3\2\2\2\u1452\u1454\5\u0200\u0101\2\u1453\u1452\3\2\2\2\u1453\u1454\3"+
		"\2\2\2\u1454\u01fd\3\2\2\2\u1455\u1456\7\u026a\2\2\u1456\u01ff\3\2\2\2"+
		"\u1457\u1459\5\u0202\u0102\2\u1458\u1457\3\2\2\2\u1459\u145a\3\2\2\2\u145a"+
		"\u1458\3\2\2\2\u145a\u145b\3\2\2\2\u145b\u1465\3\2\2\2\u145c\u145e\5\u0202"+
		"\u0102\2\u145d\u145c\3\2\2\2\u145e\u1461\3\2\2\2\u145f\u145d\3\2\2\2\u145f"+
		"\u1460\3\2\2\2\u1460\u1462\3\2\2\2\u1461\u145f\3\2\2\2\u1462\u1463\7\u0253"+
		"\2\2\u1463\u1465\7\u024f\2\2\u1464\u1458\3\2\2\2\u1464\u145f\3\2\2\2\u1465"+
		"\u0201\3\2\2\2\u1466\u1467\7\u0253\2\2\u1467\u1476\5\u0214\u010b\2\u1468"+
		"\u1469\7\u0257\2\2\u1469\u146a\5\u0230\u0119\2\u146a\u146b\7\u0258\2\2"+
		"\u146b\u1476\3\2\2\2\u146c\u146e\7\u0257\2\2\u146d\u146f\5\u0230\u0119"+
		"\2\u146e\u146d\3\2\2\2\u146e\u146f\3\2\2\2\u146f\u1470\3\2\2\2\u1470\u1472"+
		"\7\u0243\2\2\u1471\u1473\5\u0230\u0119\2\u1472\u1471\3\2\2\2\u1472\u1473"+
		"\3\2\2\2\u1473\u1474\3\2\2\2\u1474\u1476\7\u0258\2\2\u1475\u1466\3\2\2"+
		"\2\u1475\u1468\3\2\2\2\u1475\u146c\3\2\2\2\u1476\u0203\3\2\2\2\u1477\u1479"+
		"\t#\2\2\u1478\u147a\5\u0198\u00cd\2\u1479\u1478\3\2\2\2\u1479\u147a\3"+
		"\2\2\2\u147a\u147b\3\2\2\2\u147b\u147d\5\u026a\u0136\2\u147c\u147e\5\u0142"+
		"\u00a2\2\u147d\u147c\3\2\2\2\u147d\u147e\3\2\2\2\u147e\u1480\3\2\2\2\u147f"+
		"\u1481\5\u01f8\u00fd\2\u1480\u147f\3\2\2\2\u1480\u1481\3\2\2\2\u1481\u0205"+
		"\3\2\2\2\u1482\u1484\7\u0106\2\2\u1483\u1485\5\u0198\u00cd\2\u1484\u1483"+
		"\3\2\2\2\u1484\u1485\3\2\2\2\u1485\u1486\3\2\2\2\u1486\u1487\5\u0210\u0109"+
		"\2\u1487\u1488\7\u01a3\2\2\u1488\u148a\5\u026a\u0136\2\u1489\u148b\5\u01f8"+
		"\u00fd\2\u148a\u1489\3\2\2\2\u148a\u148b\3\2\2\2\u148b\u0207\3\2\2\2\u148c"+
		"\u148e\7\u00d9\2\2\u148d\u148f\5\u0198\u00cd\2\u148e\u148d\3\2\2\2\u148e"+
		"\u148f\3\2\2\2\u148f\u1490\3\2\2\2\u1490\u1491\5\u0210\u0109\2\u1491\u1492"+
		"\7\u01a3\2\2\u1492\u1494\5\u026a\u0136\2\u1493\u1495\5\u01f8\u00fd\2\u1494"+
		"\u1493\3\2\2\2\u1494\u1495\3\2\2\2\u1495\u0209\3\2\2\2\u1496\u1497\7\5"+
		"\2\2\u1497\u14c1\7\u008e\2\2\u1498\u14c1\7\u015b\2\2\u1499\u14c1\7.\2"+
		"\2\u149a\u14c1\7\67\2\2\u149b\u14c1\7G\2\2\u149c\u149d\7P\2\2\u149d\u14c1"+
		"\7\u0106\2\2\u149e\u14c1\7V\2\2\u149f\u14c1\7\u0195\2\2\u14a0\u14a2\7"+
		"\u0192\2\2\u14a1\u14a0\3\2\2\2\u14a1\u14a2\3\2\2\2\u14a2\u14a3\3\2\2\2"+
		"\u14a3\u14c1\7\u01af\2\2\u14a4\u14a5\7\u0192\2\2\u14a5\u14a6\7\66\2\2"+
		"\u14a6\u14c1\7\u0121\2\2\u14a7\u14a9\7q\2\2\u14a8\u14aa\7\u015c\2\2\u14a9"+
		"\u14a8\3\2\2\2\u14a9\u14aa\3\2\2\2\u14aa\u14c1\3\2\2\2\u14ab\u14ad\7\u008c"+
		"\2\2\u14ac\u14ab\3\2\2\2\u14ac\u14ad\3\2\2\2\u14ad\u14ae\3\2\2\2\u14ae"+
		"\u14c1\7\u011a\2\2\u14af\u14b1\7\u00b9\2\2\u14b0\u14af\3\2\2\2\u14b0\u14b1"+
		"\3\2\2\2\u14b1\u14b2\3\2\2\2\u14b2\u14c1\7~\2\2\u14b3\u14c1\7\u00bd\2"+
		"\2\u14b4\u14c1\7\u00d3\2\2\u14b5\u14c1\7\u00db\2\2\u14b6\u14c1\7\u00e1"+
		"\2\2\u14b7\u14c1\7\u00e4\2\2\u14b8\u14c1\7\u00f2\2\2\u14b9\u14c1\7\u00f9"+
		"\2\2\u14ba\u14c1\7\u00fe\2\2\u14bb\u14c1\7\u0109\2\2\u14bc\u14bd\7\u0102"+
		"\2\2\u14bd\u14be\7\u00de\2\2\u14be\u14c1\t \2\2\u14bf\u14c1\7\u01b6\2"+
		"\2\u14c0\u1496\3\2\2\2\u14c0\u1498\3\2\2\2\u14c0\u1499\3\2\2\2\u14c0\u149a"+
		"\3\2\2\2\u14c0\u149b\3\2\2\2\u14c0\u149c\3\2\2\2\u14c0\u149e\3\2\2\2\u14c0"+
		"\u149f\3\2\2\2\u14c0\u14a1\3\2\2\2\u14c0\u14a4\3\2\2\2\u14c0\u14a7\3\2"+
		"\2\2\u14c0\u14ac\3\2\2\2\u14c0\u14b0\3\2\2\2\u14c0\u14b3\3\2\2\2\u14c0"+
		"\u14b4\3\2\2\2\u14c0\u14b5\3\2\2\2\u14c0\u14b6\3\2\2\2\u14c0\u14b7\3\2"+
		"\2\2\u14c0\u14b8\3\2\2\2\u14c0\u14b9\3\2\2\2\u14c0\u14ba\3\2\2\2\u14c0"+
		"\u14bb\3\2\2\2\u14c0\u14bc\3\2\2\2\u14c0\u14bf\3\2\2\2\u14c1\u14c2\3\2"+
		"\2\2\u14c2\u14c3\5\u020c\u0107\2\u14c3\u020b\3\2\2\2\u14c4\u14c6\5\u0198"+
		"\u00cd\2\u14c5\u14c4\3\2\2\2\u14c5\u14c6\3\2\2\2\u14c6\u14c7\3\2\2\2\u14c7"+
		"\u14c9\5\u01da\u00ee\2\u14c8\u14ca\5\u01f8\u00fd\2\u14c9\u14c8\3\2\2\2"+
		"\u14c9\u14ca\3\2\2\2\u14ca\u020d\3\2\2\2\u14cb\u14cf\7\u026b\2\2\u14cc"+
		"\u14cf\7\u026c\2\2\u14cd\u14cf\5\u021e\u0110\2\u14ce\u14cb\3\2\2\2\u14ce"+
		"\u14cc\3\2\2\2\u14ce\u14cd\3\2\2\2\u14cf\u020f\3\2\2\2\u14d0\u14d4\5\u020e"+
		"\u0108\2\u14d1\u14d4\5\u0216\u010c\2\u14d2\u14d4\5\u0218\u010d\2\u14d3"+
		"\u14d0\3\2\2\2\u14d3\u14d1\3\2\2\2\u14d3\u14d2\3\2\2\2\u14d4\u0211\3\2"+
		"\2\2\u14d5\u14d9\5\u020e\u0108\2\u14d6\u14d9\5\u0216\u010c\2\u14d7\u14d9"+
		"\5\u021a\u010e\2\u14d8\u14d5\3\2\2\2\u14d8\u14d6\3\2\2\2\u14d8\u14d7\3"+
		"\2\2\2\u14d9\u0213\3\2\2\2\u14da\u14e0\5\u020e\u0108\2\u14db\u14e0\5\u021c"+
		"\u010f\2\u14dc\u14e0\5\u0216\u010c\2\u14dd\u14e0\5\u021a\u010e\2\u14de"+
		"\u14e0\5\u0218\u010d\2\u14df\u14da\3\2\2\2\u14df\u14db\3\2\2\2\u14df\u14dc"+
		"\3\2\2\2\u14df\u14dd\3\2\2\2\u14df\u14de\3\2\2\2\u14e0\u0215\3\2\2\2\u14e1"+
		"\u14e2\tI\2\2\u14e2\u0217\3\2\2\2\u14e3\u14e4\tJ\2\2\u14e4\u0219\3\2\2"+
		"\2\u14e5\u14e6\tK\2\2\u14e6\u021b\3\2\2\2\u14e7\u14e8\tL\2\2\u14e8\u021d"+
		"\3\2\2\2\u14e9\u14ea\tM\2\2\u14ea\u021f\3\2\2\2\u14eb\u14f1\5\u0212\u010a"+
		"\2\u14ec\u14ed\5\u0210\u0109\2\u14ed\u14ee\7\u0253\2\2\u14ee\u14ef\5\u0212"+
		"\u010a\2\u14ef\u14f1\3\2\2\2\u14f0\u14eb\3\2\2\2\u14f0\u14ec\3\2\2\2\u14f1"+
		"\u0221\3\2\2\2\u14f2\u14f7\5\u0224\u0113\2\u14f3\u14f4\7\u0245\2\2\u14f4"+
		"\u14f6\5\u0224\u0113\2\u14f5\u14f3\3\2\2\2\u14f6\u14f9\3\2\2\2\u14f7\u14f5"+
		"\3\2\2\2\u14f7\u14f8\3\2\2\2\u14f8\u0223\3\2\2\2\u14f9\u14f7\3\2\2\2\u14fa"+
		"\u14fc\7\u0145\2\2\u14fb\u14fa\3\2\2\2\u14fb\u14fc\3\2\2\2\u14fc\u14fd"+
		"\3\2\2\2\u14fd\u1507\5\u0228\u0115\2\u14fe\u1500\7\u0175\2\2\u14ff\u1501"+
		"\5\u0226\u0114\2\u1500\u14ff\3\2\2\2\u1500\u1501\3\2\2\2\u1501\u1508\3"+
		"\2\2\2\u1502\u1504\5\u0226\u0114\2\u1503\u1502\3\2\2\2\u1504\u1505\3\2"+
		"\2\2\u1505\u1503\3\2\2\2\u1505\u1506\3\2\2\2\u1506\u1508\3\2\2\2\u1507"+
		"\u14fe\3\2\2\2\u1507\u1503\3\2\2\2\u1507\u1508\3\2\2\2\u1508\u0225\3\2"+
		"\2\2\u1509\u150b\7\u0257\2\2\u150a\u150c\7\u0268\2\2\u150b\u150a\3\2\2"+
		"\2\u150b\u150c\3\2\2\2\u150c\u150d\3\2\2\2\u150d\u150e\7\u0258\2\2\u150e"+
		"\u0227\3\2\2\2\u150f\u156b\7\u0128\2\2\u1510\u1512\7\u0129\2\2\u1511\u1513"+
		"\7\u0118\2\2\u1512\u1511\3\2\2\2\u1512\u1513\3\2\2\2\u1513\u1515\3\2\2"+
		"\2\u1514\u1516\5\u022c\u0117\2\u1515\u1514\3\2\2\2\u1515\u1516\3\2\2\2"+
		"\u1516\u156b\3\2\2\2\u1517\u156b\7\u012a\2\2\u1518\u151a\7\u012e\2\2\u1519"+
		"\u151b\5\u022e\u0118\2\u151a\u1519\3\2\2\2\u151a\u151b\3\2\2\2\u151b\u156b"+
		"\3\2\2\2\u151c\u151e\7\u012f\2\2\u151d\u151f\5\u022e\u0118\2\u151e\u151d"+
		"\3\2\2\2\u151e\u151f\3\2\2\2\u151f\u156b\3\2\2\2\u1520\u1521\7H\2\2\u1521"+
		"\u156b\7\u0142\2\2\u1522\u1524\7\u0132\2\2\u1523\u1525\5\u022e\u0118\2"+
		"\u1524\u1523\3\2\2\2\u1524\u1525\3\2\2\2\u1525\u156b\3\2\2\2\u1526\u156b"+
		"\7\u0136\2\2\u1527\u156b\7\u0137\2\2\u1528\u152a\7\u0138\2\2\u1529\u152b"+
		"\5\u022a\u0116\2\u152a\u1529\3\2\2\2\u152a\u152b\3\2\2\2\u152b\u152d\3"+
		"\2\2\2\u152c\u152e\5\u022c\u0117\2\u152d\u152c\3\2\2\2\u152d\u152e\3\2"+
		"\2\2\u152e\u156b\3\2\2\2\u152f\u1531\7\u013a\2\2\u1530\u152f\3\2\2\2\u1530"+
		"\u1531\3\2\2\2\u1531\u1532\3\2\2\2\u1532\u1534\tN\2\2\u1533\u1535\7\u0118"+
		"\2\2\u1534\u1533\3\2\2\2\u1534\u1535\3\2\2\2\u1535\u1537\3\2\2\2\u1536"+
		"\u1538\5\u022c\u0117\2\u1537\u1536\3\2\2\2\u1537\u1538\3\2\2\2\u1538\u156b"+
		"\3\2\2\2\u1539\u153b\7\u013b\2\2\u153a\u153c\7\u0118\2\2\u153b\u153a\3"+
		"\2\2\2\u153b\u153c\3\2\2\2\u153c\u153e\3\2\2\2\u153d\u153f\5\u022c\u0117"+
		"\2\u153e\u153d\3\2\2\2\u153e\u153f\3\2\2\2\u153f\u156b\3\2\2\2\u1540\u1542"+
		"\7\u013e\2\2\u1541\u1543\5\u022e\u0118\2\u1542\u1541\3\2\2\2\u1542\u1543"+
		"\3\2\2\2\u1543\u156b\3\2\2\2\u1544\u156b\7\u0143\2\2\u1545\u156b\7\u0146"+
		"\2\2\u1546\u1548\7\u0148\2\2\u1547\u1549\5\u022c\u0117\2\u1548\u1547\3"+
		"\2\2\2\u1548\u1549\3\2\2\2\u1549\u154d\3\2\2\2\u154a\u154b\t\n\2\2\u154b"+
		"\u154c\7\u0148\2\2\u154c\u154e\7\u0126\2\2\u154d\u154a\3\2\2\2\u154d\u154e"+
		"\3\2\2\2\u154e\u156b\3\2\2\2\u154f\u1551\7\u0149\2\2\u1550\u1552\5\u022c"+
		"\u0117\2\u1551\u1550\3\2\2\2\u1551\u1552\3\2\2\2\u1552\u1556\3\2\2\2\u1553"+
		"\u1554\t\n\2\2\u1554\u1555\7\u0148\2\2\u1555\u1557\7\u0126\2\2\u1556\u1553"+
		"\3\2\2\2\u1556\u1557\3\2\2\2\u1557\u156b\3\2\2\2\u1558\u155a\7\u014d\2"+
		"\2\u1559\u155b\5\u022c\u0117\2\u155a\u1559\3\2\2\2\u155a\u155b\3\2\2\2"+
		"\u155b\u156b\3\2\2\2\u155c\u1568\5\u0220\u0111\2\u155d\u155e\7\u024b\2"+
		"\2\u155e\u1563\5\u0230\u0119\2\u155f\u1560\7\u0245\2\2\u1560\u1562\5\u0230"+
		"\u0119\2\u1561\u155f\3\2\2\2\u1562\u1565\3\2\2\2\u1563\u1561\3\2\2\2\u1563"+
		"\u1564\3\2\2\2\u1564\u1566\3\2\2\2\u1565\u1563\3\2\2\2\u1566\u1567\7\u024c"+
		"\2\2\u1567\u1569\3\2\2\2\u1568\u155d\3\2\2\2\u1568\u1569\3\2\2\2\u1569"+
		"\u156b\3\2\2\2\u156a\u150f\3\2\2\2\u156a\u1510\3\2\2\2\u156a\u1517\3\2"+
		"\2\2\u156a\u1518\3\2\2\2\u156a\u151c\3\2\2\2\u156a\u1520\3\2\2\2\u156a"+
		"\u1522\3\2\2\2\u156a\u1526\3\2\2\2\u156a\u1527\3\2\2\2\u156a\u1528\3\2"+
		"\2\2\u156a\u1530\3\2\2\2\u156a\u1539\3\2\2\2\u156a\u1540\3\2\2\2\u156a"+
		"\u1544\3\2\2\2\u156a\u1545\3\2\2\2\u156a\u1546\3\2\2\2\u156a\u154f\3\2"+
		"\2\2\u156a\u1558\3\2\2\2\u156a\u155c\3\2\2\2\u156b\u0229\3\2\2\2\u156c"+
		"\u1588\7\u0124\2\2\u156d\u1588\7\u0092\2\2\u156e\u1588\78\2\2\u156f\u1588"+
		"\7g\2\2\u1570\u1588\7\u008f\2\2\u1571\u1588\7\u00df\2\2\u1572\u1573\7"+
		"\u0124\2\2\u1573\u1574\7\u01b1\2\2\u1574\u1588\7\u0092\2\2\u1575\u1576"+
		"\78\2\2\u1576\u1577\7\u01b1\2\2\u1577\u1588\7g\2\2\u1578\u1579\78\2\2"+
		"\u1579\u157a\7\u01b1\2\2\u157a\u1588\7\u008f\2\2\u157b\u157c\78\2\2\u157c"+
		"\u157d\7\u01b1\2\2\u157d\u1588\7\u00df\2\2\u157e\u157f\7g\2\2\u157f\u1580"+
		"\7\u01b1\2\2\u1580\u1588\7\u008f\2\2\u1581\u1582\7g\2\2\u1582\u1583\7"+
		"\u01b1\2\2\u1583\u1588\7\u00df\2\2\u1584\u1585\7\u008f\2\2\u1585\u1586"+
		"\7\u01b1\2\2\u1586\u1588\7\u00df\2\2\u1587\u156c\3\2\2\2\u1587\u156d\3"+
		"\2\2\2\u1587\u156e\3\2\2\2\u1587\u156f\3\2\2\2\u1587\u1570\3\2\2\2\u1587"+
		"\u1571\3\2\2\2\u1587\u1572\3\2\2\2\u1587\u1575\3\2\2\2\u1587\u1578\3\2"+
		"\2\2\u1587\u157b\3\2\2\2\u1587\u157e\3\2\2\2\u1587\u1581\3\2\2\2\u1587"+
		"\u1584\3\2\2\2\u1588\u022b\3\2\2\2\u1589\u158a\7\u024b\2\2\u158a\u158b"+
		"\7\u0268\2\2\u158b\u158c\7\u024c\2\2\u158c\u022d\3\2\2\2\u158d\u158e\7"+
		"\u024b\2\2\u158e\u1591\7\u0268\2\2\u158f\u1590\7\u0245\2\2\u1590\u1592"+
		"\7\u0268\2\2\u1591\u158f\3\2\2\2\u1591\u1592\3\2\2\2\u1592\u1593\3\2\2"+
		"\2\u1593\u1594\7\u024c\2\2\u1594\u022f\3\2\2\2\u1595\u1596\b\u0119\1\2"+
		"\u1596\u1597\7\u024b\2\2\u1597\u1598\5\u0230\u0119\2\u1598\u159a\7\u024c"+
		"\2\2\u1599\u159b\5\u0200\u0101\2\u159a\u1599\3\2\2\2\u159a\u159b\3\2\2"+
		"\2\u159b\u15b0\3\2\2\2\u159c\u159d\7\u024b\2\2\u159d\u15a0\5\u0230\u0119"+
		"\2\u159e\u159f\7\u0245\2\2\u159f\u15a1\5\u0230\u0119\2\u15a0\u159e\3\2"+
		"\2\2\u15a1\u15a2\3\2\2\2\u15a2\u15a0\3\2\2\2\u15a2\u15a3\3\2\2\2\u15a3"+
		"\u15a4\3\2\2\2\u15a4\u15a5\7\u024c\2\2\u15a5\u15b0\3\2\2\2\u15a6\u15a7"+
		"\t8\2\2\u15a7\u15b0\5\u0230\u0119\33\u15a8\u15a9\5\u0234\u011b\2\u15a9"+
		"\u15aa\5\u0230\u0119\25\u15aa\u15b0\3\2\2\2\u15ab\u15ac\7\u01a0\2\2\u15ac"+
		"\u15b0\5\u0230\u0119\7\u15ad\u15b0\5\u023a\u011e\2\u15ae\u15b0\7\u025f"+
		"\2\2\u15af\u1595\3\2\2\2\u15af\u159c\3\2\2\2\u15af\u15a6\3\2\2\2\u15af"+
		"\u15a8\3\2\2\2\u15af\u15ab\3\2\2\2\u15af\u15ad\3\2\2\2\u15af\u15ae\3\2"+
		"\2\2\u15b0\u1638\3\2\2\2\u15b1\u15b2\f\32\2\2\u15b2\u15b3\7\20\2\2\u15b3"+
		"\u15b4\7\u0148\2\2\u15b4\u15b5\7\u0126\2\2\u15b5\u1637\5\u0230\u0119\33"+
		"\u15b6\u15b7\f\31\2\2\u15b7\u15b8\7\u0252\2\2\u15b8\u1637\5\u0230\u0119"+
		"\32\u15b9\u15ba\f\30\2\2\u15ba\u15bb\tO\2\2\u15bb\u1637\5\u0230\u0119"+
		"\31\u15bc\u15bd\f\27\2\2\u15bd\u15be\t8\2\2\u15be\u1637\5\u0230\u0119"+
		"\30\u15bf\u15c0\f\26\2\2\u15c0\u15c1\5\u0234\u011b\2\u15c1\u15c2\5\u0230"+
		"\u0119\27\u15c2\u1637\3\2\2\2\u15c3\u15c5\f\22\2\2\u15c4\u15c6\7\u01a0"+
		"\2\2\u15c5\u15c4\3\2\2\2\u15c5\u15c6\3\2\2\2\u15c6\u15c7\3\2\2\2\u15c7"+
		"\u15c9\7\u0127\2\2\u15c8\u15ca\tP\2\2\u15c9\u15c8\3\2\2\2\u15c9\u15ca"+
		"\3\2\2\2\u15ca\u15cb\3\2\2\2\u15cb\u15cc\5\u0232\u011a\2\u15cc\u15cd\7"+
		"\u0173\2\2\u15cd\u15ce\5\u0230\u0119\23\u15ce\u1637\3\2\2\2\u15cf\u15d1"+
		"\f\21\2\2\u15d0\u15d2\7\u01a0\2\2\u15d1\u15d0\3\2\2\2\u15d1\u15d2\3\2"+
		"\2\2\u15d2\u15d7\3\2\2\2\u15d3\u15d8\7\u0167\2\2\u15d4\u15d8\7\u0161\2"+
		"\2\u15d5\u15d6\7\u016d\2\2\u15d6\u15d8\7\u01b1\2\2\u15d7\u15d3\3\2\2\2"+
		"\u15d7\u15d4\3\2\2\2\u15d7\u15d5\3\2\2\2\u15d8\u15d9\3\2\2\2\u15d9\u1637"+
		"\5\u0230\u0119\22\u15da\u15dc\f\20\2\2\u15db\u15dd\7\u01a0\2\2\u15dc\u15db"+
		"\3\2\2\2\u15dc\u15dd\3\2\2\2\u15dd\u15e2\3\2\2\2\u15de\u15e3\7\u0167\2"+
		"\2\u15df\u15e3\7\u0161\2\2\u15e0\u15e1\7\u016d\2\2\u15e1\u15e3\7\u01b1"+
		"\2\2\u15e2\u15de\3\2\2\2\u15e2\u15df\3\2\2\2\u15e2\u15e0\3\2\2\2\u15e3"+
		"\u15e4\3\2\2\2\u15e4\u15e5\5\u0230\u0119\2\u15e5\u15e6\7O\2\2\u15e6\u15e7"+
		"\5\u0230\u0119\21\u15e7\u1637\3\2\2\2\u15e8\u15e9\f\17\2\2\u15e9\u15ea"+
		"\tQ\2\2\u15ea\u1637\5\u0230\u0119\20\u15eb\u15ec\f\r\2\2\u15ec\u15ee\7"+
		"\u0163\2\2\u15ed\u15ef\7\u01a0\2\2\u15ee\u15ed\3\2\2\2\u15ee\u15ef\3\2"+
		"\2\2\u15ef\u15f0\3\2\2\2\u15f0\u15f1\7\u018a\2\2\u15f1\u15f2\7\u0193\2"+
		"\2\u15f2\u1637\5\u0230\u0119\16\u15f3\u15f4\f\6\2\2\u15f4\u15f5\7\u0173"+
		"\2\2\u15f5\u1637\5\u0230\u0119\7\u15f6\u15f7\f\5\2\2\u15f7\u15f8\7\u01a5"+
		"\2\2\u15f8\u1637\5\u0230\u0119\6\u15f9\u15fa\f\37\2\2\u15fa\u15fb\7\u0241"+
		"\2\2\u15fb\u1637\5\u0224\u0113\2\u15fc\u15fd\f\34\2\2\u15fd\u1637\5\u01fa"+
		"\u00fe\2\u15fe\u15ff\f\24\2\2\u15ff\u1637\5\u0234\u011b\2\u1600\u1602"+
		"\f\23\2\2\u1601\u1603\7\u01a0\2\2\u1602\u1601\3\2\2\2\u1602\u1603\3\2"+
		"\2\2\u1603\u1604\3\2\2\2\u1604\u1605\7\u0197\2\2\u1605\u160f\7\u024b\2"+
		"\2\u1606\u1610\5\u0274\u013b\2\u1607\u160c\5\u0230\u0119\2\u1608\u1609"+
		"\7\u0245\2\2\u1609\u160b\5\u0230\u0119\2\u160a\u1608\3\2\2\2\u160b\u160e"+
		"\3\2\2\2\u160c\u160a\3\2\2\2\u160c\u160d\3\2\2\2\u160d\u1610\3\2\2\2\u160e"+
		"\u160c\3\2\2\2\u160f\u1606\3\2\2\2\u160f\u1607\3\2\2\2\u1610\u1611\3\2"+
		"\2\2\u1611\u1612\7\u024c\2\2\u1612\u1637\3\2\2\2\u1613\u1614\f\16\2\2"+
		"\u1614\u1616\7\u0163\2\2\u1615\u1617\7\u01a0\2\2\u1616\u1615\3\2\2\2\u1616"+
		"\u1617\3\2\2\2\u1617\u161a\3\2\2\2\u1618\u161b\5\u0240\u0121\2\u1619\u161b"+
		"\7\u01a1\2\2\u161a\u1618\3\2\2\2\u161a\u1619\3\2\2\2\u161b\u1637\3\2\2"+
		"\2\u161c\u161d\f\f\2\2\u161d\u161f\7\u0163\2\2\u161e\u1620\7\u01a0\2\2"+
		"\u161f\u161e\3\2\2\2\u161f\u1620\3\2\2\2\u1620\u1621\3\2\2\2\u1621\u1637"+
		"\7F\2\2\u1622\u1623\f\13\2\2\u1623\u1625\7\u0163\2\2\u1624\u1626\7\u01a0"+
		"\2\2\u1625\u1624\3\2\2\2\u1625\u1626\3\2\2\2\u1626\u1627\3\2\2\2\u1627"+
		"\u1637\7\u010e\2\2\u1628\u1629\f\n\2\2\u1629\u162b\7\u0163\2\2\u162a\u162c"+
		"\7\u01a0\2\2\u162b\u162a\3\2\2\2\u162b\u162c\3\2\2\2\u162c\u162d\3\2\2"+
		"\2\u162d\u162e\7\u009e\2\2\u162e\u162f\7\u024b\2\2\u162f\u1630\5\u0222"+
		"\u0112\2\u1630\u1631\7\u024c\2\2\u1631\u1637\3\2\2\2\u1632\u1633\f\t\2"+
		"\2\u1633\u1637\7\u0164\2\2\u1634\u1635\f\b\2\2\u1635\u1637\7\u0169\2\2"+
		"\u1636\u15b1\3\2\2\2\u1636\u15b6\3\2\2\2\u1636\u15b9\3\2\2\2\u1636\u15bc"+
		"\3\2\2\2\u1636\u15bf\3\2\2\2\u1636\u15c3\3\2\2\2\u1636\u15cf\3\2\2\2\u1636"+
		"\u15da\3\2\2\2\u1636\u15e8\3\2\2\2\u1636\u15eb\3\2\2\2\u1636\u15f3\3\2"+
		"\2\2\u1636\u15f6\3\2\2\2\u1636\u15f9\3\2\2\2\u1636\u15fc\3\2\2\2\u1636"+
		"\u15fe\3\2\2\2\u1636\u1600\3\2\2\2\u1636\u1613\3\2\2\2\u1636\u161c\3\2"+
		"\2\2\u1636\u1622\3\2\2\2\u1636\u1628\3\2\2\2\u1636\u1632\3\2\2\2\u1636"+
		"\u1634\3\2\2\2\u1637\u163a\3\2\2\2\u1638\u1636\3\2\2\2\u1638\u1639\3\2"+
		"\2\2\u1639\u0231\3\2\2\2\u163a\u1638\3\2\2\2\u163b\u163c\b\u011a\1\2\u163c"+
		"\u163d\7\u024b\2\2\u163d\u163e\5\u0230\u0119\2\u163e\u1640\7\u024c\2\2"+
		"\u163f\u1641\5\u0200\u0101\2\u1640\u163f\3\2\2\2\u1640\u1641\3\2\2\2\u1641"+
		"\u1653\3\2\2\2\u1642\u1643\7\u024b\2\2\u1643\u1646\5\u0230\u0119\2\u1644"+
		"\u1645\7\u0245\2\2\u1645\u1647\5\u0230\u0119\2\u1646\u1644\3\2\2\2\u1647"+
		"\u1648\3\2\2\2\u1648\u1646\3\2\2\2\u1648\u1649\3\2\2\2\u1649\u164a\3\2"+
		"\2\2\u164a\u164b\7\u024c\2\2\u164b\u1653\3\2\2\2\u164c\u164d\t8\2\2\u164d"+
		"\u1653\5\u0232\u011a\17\u164e\u164f\5\u0234\u011b\2\u164f\u1650\5\u0232"+
		"\u011a\n\u1650\u1653\3\2\2\2\u1651\u1653\5\u023a\u011e\2\u1652\u163b\3"+
		"\2\2\2\u1652\u1642\3\2\2\2\u1652\u164c\3\2\2\2\u1652\u164e\3\2\2\2\u1652"+
		"\u1651\3\2\2\2\u1653\u1689\3\2\2\2\u1654\u1655\f\16\2\2\u1655\u1656\7"+
		"\u0252\2\2\u1656\u1688\5\u0232\u011a\17\u1657\u1658\f\r\2\2\u1658\u1659"+
		"\tO\2\2\u1659\u1688\5\u0232\u011a\16\u165a\u165b\f\f\2\2\u165b\u165c\t"+
		"8\2\2\u165c\u1688\5\u0232\u011a\r\u165d\u165e\f\13\2\2\u165e\u165f\5\u0234"+
		"\u011b\2\u165f\u1660\5\u0232\u011a\f\u1660\u1688\3\2\2\2\u1661\u1662\f"+
		"\b\2\2\u1662\u1663\tQ\2\2\u1663\u1688\5\u0232\u011a\t\u1664\u1665\f\7"+
		"\2\2\u1665\u1667\7\u0163\2\2\u1666\u1668\7\u01a0\2\2\u1667\u1666\3\2\2"+
		"\2\u1667\u1668\3\2\2\2\u1668\u1669\3\2\2\2\u1669\u166a\7\u018a\2\2\u166a"+
		"\u166b\7\u0193\2\2\u166b\u1688\5\u0232\u011a\b\u166c\u166d\f\22\2\2\u166d"+
		"\u166e\7\u0241\2\2\u166e\u1688\5\u0224\u0113\2\u166f\u1670\f\t\2\2\u1670"+
		"\u1688\5\u0234\u011b\2\u1671\u1672\f\6\2\2\u1672\u1674\7\u0163\2\2\u1673"+
		"\u1675\7\u01a0\2\2\u1674\u1673\3\2\2\2\u1674\u1675\3\2\2\2\u1675\u1676"+
		"\3\2\2\2\u1676\u1688\7F\2\2\u1677\u1678\f\5\2\2\u1678\u167a\7\u0163\2"+
		"\2\u1679\u167b\7\u01a0\2\2\u167a\u1679\3\2\2\2\u167a\u167b\3\2\2\2\u167b"+
		"\u167c\3\2\2\2\u167c\u1688\7\u010e\2\2\u167d\u167e\f\4\2\2\u167e\u1680"+
		"\7\u0163\2\2\u167f\u1681\7\u01a0\2\2\u1680\u167f\3\2\2\2\u1680\u1681\3"+
		"\2\2\2\u1681\u1682\3\2\2\2\u1682\u1683\7\u009e\2\2\u1683\u1684\7\u024b"+
		"\2\2\u1684\u1685\5\u0222\u0112\2\u1685\u1686\7\u024c\2\2\u1686\u1688\3"+
		"\2\2\2\u1687\u1654\3\2\2\2\u1687\u1657\3\2\2\2\u1687\u165a\3\2\2\2\u1687"+
		"\u165d\3\2\2\2\u1687\u1661\3\2\2\2\u1687\u1664\3\2\2\2\u1687\u166c\3\2"+
		"\2\2\u1687\u166f\3\2\2\2\u1687\u1671\3\2\2\2\u1687\u1677\3\2\2\2\u1687"+
		"\u167d\3\2\2\2\u1688\u168b\3\2\2\2\u1689\u1687\3\2\2\2\u1689\u168a\3\2"+
		"\2\2\u168a\u0233\3\2\2\2\u168b\u1689\3\2\2\2\u168c\u1695\5\u01d4\u00eb"+
		"\2\u168d\u168e\7\u00a2\2\2\u168e\u168f\7\u024b\2\2\u168f\u1690\5\u0210"+
		"\u0109\2\u1690\u1691\7\u0253\2\2\u1691\u1692\5\u01d2\u00ea\2\u1692\u1693"+
		"\7\u024c\2\2\u1693\u1695\3\2\2\2\u1694\u168c\3\2\2\2\u1694\u168d\3\2\2"+
		"\2\u1695\u0235\3\2\2\2\u1696\u169f\5\u01d2\u00ea\2\u1697\u1698\7\u00a2"+
		"\2\2\u1698\u1699\7\u024b\2\2\u1699\u169a\5\u0210\u0109\2\u169a\u169b\7"+
		"\u0253\2\2\u169b\u169c\5\u01d2\u00ea\2\u169c\u169d\7\u024c\2\2\u169d\u169f"+
		"\3\2\2\2\u169e\u1696\3\2\2\2\u169e\u1697\3\2\2\2\u169f\u0237\3\2\2\2\u16a0"+
		"\u16a1\7\u024b\2\2\u16a1\u16a2\5\u0230\u0119\2\u16a2\u16a3\7\u0245\2\2"+
		"\u16a3\u16a4\5\u0230\u0119\2\u16a4\u16a5\7\u024c\2\2\u16a5\u16a6\7\u016b"+
		"\2\2\u16a6\u16a7\7\u024b\2\2\u16a7\u16a8\5\u0230\u0119\2\u16a8\u16a9\7"+
		"\u0245\2\2\u16a9\u16aa\5\u0230\u0119\2\u16aa\u16ab\7\u024c\2\2\u16ab\u0239"+
		"\3\2\2\2\u16ac\u16bf\5\u023c\u011f\2\u16ad\u16ae\7\u024b\2\2\u16ae\u16af"+
		"\5\u0274\u013b\2\u16af\u16b1\7\u024c\2\2\u16b0\u16b2\5\u0200\u0101\2\u16b1"+
		"\u16b0\3\2\2\2\u16b1\u16b2\3\2\2\2\u16b2\u16bf\3\2\2\2\u16b3\u16bf\5\u0242"+
		"\u0122\2\u16b4\u16bf\7\u01a1\2\2\u16b5\u16bf\7\u024f\2\2\u16b6\u16bf\5"+
		"\u025a\u012e\2\u16b7\u16b8\7\u0130\2\2\u16b8\u16bf\5\u026e\u0138\2\u16b9"+
		"\u16bf\5\u0246\u0124\2\u16ba\u16bf\5\u01fc\u00ff\2\u16bb\u16bf\5\u0264"+
		"\u0133\2\u16bc\u16bf\5\u0268\u0135\2\u16bd\u16bf\5\u0238\u011d\2\u16be"+
		"\u16ac\3\2\2\2\u16be\u16ad\3\2\2\2\u16be\u16b3\3\2\2\2\u16be\u16b4\3\2"+
		"\2\2\u16be\u16b5\3\2\2\2\u16be\u16b6\3\2\2\2\u16be\u16b7\3\2\2\2\u16be"+
		"\u16b9\3\2\2\2\u16be\u16ba\3\2\2\2\u16be\u16bb\3\2\2\2\u16be\u16bc\3\2"+
		"\2\2\u16be\u16bd\3\2\2\2\u16bf\u023b\3\2\2\2\u16c0\u16c4\5\u023e\u0120"+
		"\2\u16c1\u16c4\5\u0146\u00a4\2\u16c2\u16c4\5\u0240\u0121\2\u16c3\u16c0"+
		"\3\2\2\2\u16c3\u16c1\3\2\2\2\u16c3\u16c2\3\2\2\2\u16c4\u023d\3\2\2\2\u16c5"+
		"\u16c6\tR\2\2\u16c6\u023f\3\2\2\2\u16c7\u16c8\tS\2\2\u16c8\u0241\3\2\2"+
		"\2\u16c9\u16cb\7\u017a\2\2\u16ca\u16cc\5\u0230\u0119\2\u16cb\u16ca\3\2"+
		"\2\2\u16cb\u16cc\3\2\2\2\u16cc\u16d2\3\2\2\2\u16cd\u16ce\7\u01b9\2\2\u16ce"+
		"\u16cf\5\u0230\u0119\2\u16cf\u16d0\7\u01b0\2\2\u16d0\u16d1\5\u0230\u0119"+
		"\2\u16d1\u16d3\3\2\2\2\u16d2\u16cd\3\2\2\2\u16d3\u16d4\3\2\2\2\u16d4\u16d2"+
		"\3\2\2\2\u16d4\u16d5\3\2\2\2\u16d5\u16d8\3\2\2\2\u16d6\u16d7\7\u018c\2"+
		"\2\u16d7\u16d9\5\u0230\u0119\2\u16d8\u16d6\3\2\2\2\u16d8\u16d9\3\2\2\2"+
		"\u16d9\u16da\3\2\2\2\u16da\u16db\7\u018d\2\2\u16db\u0243\3\2\2\2\u16dc"+
		"\u16dd\tT\2\2\u16dd\u16de\7\u024b\2\2\u16de\u16df\5\u0230\u0119\2\u16df"+
		"\u16e0\7\u0176\2\2\u16e0\u16e1\5\u0224\u0113\2\u16e1\u16e2\7\u024c\2\2"+
		"\u16e2\u0245\3\2\2\2\u16e3\u16e4\5\u0220\u0111\2\u16e4\u16f3\7\u024b\2"+
		"\2\u16e5\u16e7\5\u026c\u0137\2\u16e6\u16e5\3\2\2\2\u16e6\u16e7\3\2\2\2"+
		"\u16e7\u16e8\3\2\2\2\u16e8\u16ed\5\u0248\u0125\2\u16e9\u16ea\7\u0245\2"+
		"\2\u16ea\u16ec\5\u0248\u0125\2\u16eb\u16e9\3\2\2\2\u16ec\u16ef\3\2\2\2"+
		"\u16ed\u16eb\3\2\2\2\u16ed\u16ee\3\2\2\2\u16ee\u16f1\3\2\2\2\u16ef\u16ed"+
		"\3\2\2\2\u16f0\u16f2\5\u0298\u014d\2\u16f1\u16f0\3\2\2\2\u16f1\u16f2\3"+
		"\2\2\2\u16f2\u16f4\3\2\2\2\u16f3\u16e6\3\2\2\2\u16f3\u16f4\3\2\2\2\u16f4"+
		"\u16f5\3\2\2\2\u16f5\u16fc\7\u024c\2\2\u16f6\u16f7\7\u011e\2\2\u16f7\u16f8"+
		"\7\u0195\2\2\u16f8\u16f9\7\u024b\2\2\u16f9\u16fa\5\u0298\u014d\2\u16fa"+
		"\u16fb\7\u024c\2\2\u16fb\u16fd\3\2\2\2\u16fc\u16f6\3\2\2\2\u16fc\u16fd"+
		"\3\2\2\2\u16fd\u16ff\3\2\2\2\u16fe\u1700\5\u025c\u012f\2\u16ff\u16fe\3"+
		"\2\2\2\u16ff\u1700\3\2\2\2\u1700\u1706\3\2\2\2\u1701\u1704\7\u00a7\2\2"+
		"\u1702\u1705\5\u0210\u0109\2\u1703\u1705\5\u025e\u0130\2\u1704\u1702\3"+
		"\2\2\2\u1704\u1703\3\2\2\2\u1705\u1707\3\2\2\2\u1706\u1701\3\2\2\2\u1706"+
		"\u1707\3\2\2\2\u1707\u170f\3\2\2\2\u1708\u170f\5\u024c\u0127\2\u1709\u170f"+
		"\5\u024e\u0128\2\u170a\u170f\5\u0250\u0129\2\u170b\u170f\5\u0252\u012a"+
		"\2\u170c\u170f\5\u0254\u012b\2\u170d\u170f\5\u0256\u012c\2\u170e\u16e3"+
		"\3\2\2\2\u170e\u1708\3\2\2\2\u170e\u1709\3\2\2\2\u170e\u170a\3\2\2\2\u170e"+
		"\u170b\3\2\2\2\u170e\u170c\3\2\2\2\u170e\u170d\3\2\2\2\u170f\u0247\3\2"+
		"\2\2\u1710\u1712\7\u01b8\2\2\u1711\u1710\3\2\2\2\u1711\u1712\3\2\2\2\u1712"+
		"\u1716\3\2\2\2\u1713\u1714\5\u0210\u0109\2\u1714\u1715\5\u024a\u0126\2"+
		"\u1715\u1717\3\2\2\2\u1716\u1713\3\2\2\2\u1716\u1717\3\2\2\2\u1717\u1718"+
		"\3\2\2\2\u1718\u1719\5\u0230\u0119\2\u1719\u0249\3\2\2\2\u171a\u171b\t"+
		"U\2\2\u171b\u024b\3\2\2\2\u171c\u171d\tV\2\2\u171d\u171e\7\u024b\2\2\u171e"+
		"\u1723\5\u0230\u0119\2\u171f\u1720\7\u0245\2\2\u1720\u1722\5\u0230\u0119"+
		"\2\u1721\u171f\3\2\2\2\u1722\u1725\3\2\2\2\u1723\u1721\3\2\2\2\u1723\u1724"+
		"\3\2\2\2\u1724\u1726\3\2\2\2\u1725\u1723\3\2\2\2\u1726\u1727\7\u024c\2"+
		"\2\u1727\u1736\3\2\2\2\u1728\u1729\7\u0144\2\2\u1729\u1732\7\u024b\2\2"+
		"\u172a\u172f\5\u0230\u0119\2\u172b\u172c\7\u0245\2\2\u172c\u172e\5\u0230"+
		"\u0119\2\u172d\u172b\3\2\2\2\u172e\u1731\3\2\2\2\u172f\u172d\3\2\2\2\u172f"+
		"\u1730\3\2\2\2\u1730\u1733\3\2\2\2\u1731\u172f\3\2\2\2\u1732\u172a\3\2"+
		"\2\2\u1732\u1733\3\2\2\2\u1733\u1734\3\2\2\2\u1734\u1736\7\u024c\2\2\u1735"+
		"\u171c\3\2\2\2\u1735\u1728\3\2\2\2\u1736\u024d\3\2\2\2\u1737\u1738\7\u0131"+
		"\2\2\u1738\u173b\7\u024b\2\2\u1739\u173c\5\u0210\u0109\2\u173a\u173c\5"+
		"\u0146\u00a4\2\u173b\u1739\3\2\2\2\u173b\u173a\3\2\2\2\u173c\u173d\3\2"+
		"\2\2\u173d\u173e\7\u0193\2\2\u173e\u173f\5\u0230\u0119\2\u173f\u1740\7"+
		"\u024c\2\2\u1740\u024f\3\2\2\2\u1741\u1748\7\u0181\2\2\u1742\u1748\7\u015e"+
		"\2\2\u1743\u1748\7\u0186\2\2\u1744\u1748\7\u01ac\2\2\u1745\u1748\7\u01b6"+
		"\2\2\u1746\u1748\5\u0244\u0123\2\u1747\u1741\3\2\2\2\u1747\u1742\3\2\2"+
		"\2\u1747\u1743\3\2\2\2\u1747\u1744\3\2\2\2\u1747\u1745\3\2\2\2\u1747\u1746"+
		"\3\2\2\2\u1748\u0251\3\2\2\2\u1749\u175b\7\u0182\2\2\u174a\u174c\7\u0184"+
		"\2\2\u174b\u174d\5\u022c\u0117\2\u174c\u174b\3\2\2\2\u174c\u174d\3\2\2"+
		"\2\u174d\u175b\3\2\2\2\u174e\u1750\7\u0185\2\2\u174f\u1751\5\u022c\u0117"+
		"\2\u1750\u174f\3\2\2\2\u1750\u1751\3\2\2\2\u1751\u175b\3\2\2\2\u1752\u1754"+
		"\7\u019e\2\2\u1753\u1755\5\u022c\u0117\2\u1754\u1753\3\2\2\2\u1754\u1755"+
		"\3\2\2\2\u1755\u175b\3\2\2\2\u1756\u1758\7\u019f\2\2\u1757\u1759\5\u022c"+
		"\u0117\2\u1758\u1757\3\2\2\2\u1758\u1759\3\2\2\2\u1759\u175b\3\2\2\2\u175a"+
		"\u1749\3\2\2\2\u175a\u174a\3\2\2\2\u175a\u174e\3\2\2\2\u175a\u1752\3\2"+
		"\2\2\u175a\u1756\3\2\2\2\u175b\u0253\3\2\2\2\u175c\u175d\7\u014b\2\2\u175d"+
		"\u175f\7\u024b\2\2\u175e\u1760\tW\2\2\u175f\u175e\3\2\2\2\u175f\u1760"+
		"\3\2\2\2\u1760\u176d\3\2\2\2\u1761\u1762\5\u0230\u0119\2\u1762\u1763\7"+
		"\u0193\2\2\u1763\u1764\5\u0230\u0119\2\u1764\u176e\3\2\2\2\u1765\u1767"+
		"\7\u0193\2\2\u1766\u1765\3\2\2\2\u1766\u1767\3\2\2\2\u1767\u1768\3\2\2"+
		"\2\u1768\u176b\5\u0230\u0119\2\u1769\u176a\7\u0245\2\2\u176a\u176c\5\u0230"+
		"\u0119\2\u176b\u1769\3\2\2\2\u176b\u176c\3\2\2\2\u176c\u176e\3\2\2\2\u176d"+
		"\u1761\3\2\2\2\u176d\u1766\3\2\2\2\u176e\u176f\3\2\2\2\u176f\u1770\7\u024c"+
		"\2\2\u1770\u17a0\3\2\2\2\u1771\u1772\7\u0147\2\2\u1772\u1773\7\u024b\2"+
		"\2\u1773\u1778\5\u0230\u0119\2\u1774\u1775\7\u0245\2\2\u1775\u1777\5\u0230"+
		"\u0119\2\u1776\u1774\3\2\2\2\u1777\u177a\3\2\2\2\u1778\u1776\3\2\2\2\u1778"+
		"\u1779\3\2\2\2\u1779\u177d\3\2\2\2\u177a\u1778\3\2\2\2\u177b\u177c\7\u0193"+
		"\2\2\u177c\u177e\5\u0230\u0119\2\u177d\u177b\3\2\2\2\u177d\u177e\3\2\2"+
		"\2\u177e\u1781\3\2\2\2\u177f\u1780\7\u0191\2\2\u1780\u1782\5\u0230\u0119"+
		"\2\u1781\u177f\3\2\2\2\u1781\u1782\3\2\2\2\u1782\u1783\3\2\2\2\u1783\u1784"+
		"\7\u024c\2\2\u1784\u17a0\3\2\2\2\u1785\u1786\7\u0141\2\2\u1786\u1787\7"+
		"\u024b\2\2\u1787\u1788\5\u0232\u011a\2\u1788\u1789\7\u0197\2\2\u1789\u178a"+
		"\5\u0230\u0119\2\u178a\u178b\7\u024c\2\2\u178b\u17a0\3\2\2\2\u178c\u178d"+
		"\7\u0140\2\2\u178d\u178e\7\u024b\2\2\u178e\u178f\5\u0230\u0119\2\u178f"+
		"\u1790\7\u01a7\2\2\u1790\u1791\5\u0230\u0119\2\u1791\u1792\7\u0193\2\2"+
		"\u1792\u1795\5\u0230\u0119\2\u1793\u1794\7\u0191\2\2\u1794\u1796\5\u0230"+
		"\u0119\2\u1795\u1793\3\2\2\2\u1795\u1796\3\2\2\2\u1796\u1797\3\2\2\2\u1797"+
		"\u1798\7\u024c\2\2\u1798\u17a0\3\2\2\2\u1799\u179a\7\u015b\2\2\u179a\u179b"+
		"\7\u0191\2\2\u179b\u179c\7\u024b\2\2\u179c\u179d\5\u0230\u0119\2\u179d"+
		"\u179e\7\u024c\2\2\u179e\u17a0\3\2\2\2\u179f\u175c\3\2\2\2\u179f\u1771"+
		"\3\2\2\2\u179f\u1785\3\2\2\2\u179f\u178c\3\2\2\2\u179f\u1799\3\2\2\2\u17a0"+
		"\u0255\3\2\2\2\u17a1\u17a2\7\u0150\2\2\u17a2\u17a3\7\u024b\2\2\u17a3\u17a4"+
		"\7\u0094\2\2\u17a4\u17ba\5\u0210\u0109\2\u17a5\u17a6\7\u0245\2\2\u17a6"+
		"\u17a7\7\u014e\2\2\u17a7\u17a8\7\u024b\2\2\u17a8\u17ab\5\u0230\u0119\2"+
		"\u17a9\u17aa\7\u0176\2\2\u17aa\u17ac\5\u0210\u0109\2\u17ab\u17a9\3\2\2"+
		"\2\u17ab\u17ac\3\2\2\2\u17ac\u17b5\3\2\2\2\u17ad\u17ae\7\u0245\2\2\u17ae"+
		"\u17b1\5\u0230\u0119\2\u17af\u17b0\7\u0176\2\2\u17b0\u17b2\5\u0210\u0109"+
		"\2\u17b1\u17af\3\2\2\2\u17b1\u17b2\3\2\2\2\u17b2\u17b4\3\2\2\2\u17b3\u17ad"+
		"\3\2\2\2\u17b4\u17b7\3\2\2\2\u17b5\u17b3\3\2\2\2\u17b5\u17b6\3\2\2\2\u17b6"+
		"\u17b8\3\2\2\2\u17b7\u17b5\3\2\2\2\u17b8\u17b9\7\u024c\2\2\u17b9\u17bb"+
		"\3\2\2\2\u17ba\u17a5\3\2\2\2\u17ba\u17bb\3\2\2\2\u17bb\u17c0\3\2\2\2\u17bc"+
		"\u17bd\7\u0245\2\2\u17bd\u17bf\5\u0230\u0119\2\u17be\u17bc\3\2\2\2\u17bf"+
		"\u17c2\3\2\2\2\u17c0\u17be\3\2\2\2\u17c0\u17c1\3\2\2\2\u17c1\u17c3\3\2"+
		"\2\2\u17c2\u17c0\3\2\2\2\u17c3\u17c4\7\u024c\2\2\u17c4\u1843\3\2\2\2\u17c5"+
		"\u17c6\7\u0152\2\2\u17c6\u17c7\7\u024b\2\2\u17c7\u17ca\5\u0230\u0119\2"+
		"\u17c8\u17c9\7\u0176\2\2\u17c9\u17cb\5\u0210\u0109\2\u17ca\u17c8\3\2\2"+
		"\2\u17ca\u17cb\3\2\2\2\u17cb\u17d4\3\2\2\2\u17cc\u17cd\7\u0245\2\2\u17cd"+
		"\u17d0\5\u0230\u0119\2\u17ce\u17cf\7\u0176\2\2\u17cf\u17d1\5\u0210\u0109"+
		"\2\u17d0\u17ce\3\2\2\2\u17d0\u17d1\3\2\2\2\u17d1\u17d3\3\2\2\2\u17d2\u17cc"+
		"\3\2\2\2\u17d3\u17d6\3\2\2\2\u17d4\u17d2\3\2\2\2\u17d4\u17d5\3\2\2\2\u17d5"+
		"\u17d7\3\2\2\2\u17d6\u17d4\3\2\2\2\u17d7\u17d8\7\u024c\2\2\u17d8\u1843"+
		"\3\2\2\2\u17d9\u17da\7\u0155\2\2\u17da\u17db\7\u024b\2\2\u17db\u17dc\7"+
		"\u0094\2\2\u17dc\u17df\5\u0210\u0109\2\u17dd\u17de\7\u0245\2\2\u17de\u17e0"+
		"\5\u0230\u0119\2\u17df\u17dd\3\2\2\2\u17df\u17e0\3\2\2\2\u17e0\u17e1\3"+
		"\2\2\2\u17e1\u17e2\7\u024c\2\2\u17e2\u1843\3\2\2\2\u17e3\u17e4\7\u0156"+
		"\2\2\u17e4\u17e5\7\u024b\2\2\u17e5\u17e6\5\u0230\u0119\2\u17e6\u17e7\7"+
		"\u0245\2\2\u17e7\u17eb\7\u0119\2\2\u17e8\u17ec\5\u0230\u0119\2\u17e9\u17ea"+
		"\7\u0098\2\2\u17ea\u17ec\7\u0117\2\2\u17eb\u17e8\3\2\2\2\u17eb\u17e9\3"+
		"\2\2\2\u17ec\u17f5\3\2\2\2\u17ed\u17ee\7\u0245\2\2\u17ee\u17f3\7\u00ef"+
		"\2\2\u17ef\u17f4\7\u0125\2\2\u17f0\u17f4\7\u0098\2\2\u17f1\u17f2\7\u0098"+
		"\2\2\u17f2\u17f4\7\u0117\2\2\u17f3\u17ef\3\2\2\2\u17f3\u17f0\3\2\2\2\u17f3"+
		"\u17f1\3\2\2\2\u17f4\u17f6\3\2\2\2\u17f5\u17ed\3\2\2\2\u17f5\u17f6\3\2"+
		"\2\2\u17f6\u17f7\3\2\2\2\u17f7\u17f8\7\u024c\2\2\u17f8\u1843\3\2\2\2\u17f9"+
		"\u17fa\7\u0151\2\2\u17fa\u17fb\7\u024b\2\2\u17fb\u17fc\5\u0230\u0119\2"+
		"\u17fc\u17ff\7\u00af\2\2\u17fd\u17fe\7\26\2\2\u17fe\u1800\7\u00c4\2\2"+
		"\u17ff\u17fd\3\2\2\2\u17ff\u1800\3\2\2\2\u1800\u1801\3\2\2\2\u1801\u1804"+
		"\5\u0230\u0119\2\u1802\u1803\7\26\2\2\u1803\u1805\7\u00c4\2\2\u1804\u1802"+
		"\3\2\2\2\u1804\u1805\3\2\2\2\u1805\u1806\3\2\2\2\u1806\u1807\7\u024c\2"+
		"\2\u1807\u1843\3\2\2\2\u1808\u1809\7\u0154\2\2\u1809\u180a\7\u024b\2\2"+
		"\u180a\u180b\t*\2\2\u180b\u180c\5\u0230\u0119\2\u180c\u180d\7\u024c\2"+
		"\2\u180d\u1843\3\2\2\2\u180e\u180f\7\u0157\2\2\u180f\u1810\7\u024b\2\2"+
		"\u1810\u1811\t*\2\2\u1811\u1812\5\u0230\u0119\2\u1812\u1813\7\u0176\2"+
		"\2\u1813\u1814\5\u0224\u0113\2\u1814\u1815\7\u024c\2\2\u1815\u1843\3\2"+
		"\2\2\u1816\u1817\7\u0158\2\2\u1817\u182a\7\u024b\2\2\u1818\u1819\7\u0153"+
		"\2\2\u1819\u181a\7\u024b\2\2\u181a\u181b\5\u0230\u0119\2\u181b\u181c\7"+
		"\u0176\2\2\u181c\u1824\5\u0210\u0109\2\u181d\u181e\7\u0245\2\2\u181e\u181f"+
		"\5\u0230\u0119\2\u181f\u1820\7\u0176\2\2\u1820\u1821\5\u0210\u0109\2\u1821"+
		"\u1823\3\2\2\2\u1822\u181d\3\2\2\2\u1823\u1826\3\2\2\2\u1824\u1822\3\2"+
		"\2\2\u1824\u1825\3\2\2\2\u1825\u1827\3\2\2\2\u1826\u1824\3\2\2\2\u1827"+
		"\u1828\7\u024c\2\2\u1828\u1829\7\u0245\2\2\u1829\u182b\3\2\2\2\u182a\u1818"+
		"\3\2\2\2\u182a\u182b\3\2\2\2\u182b\u182c\3\2\2\2\u182c\u182d\5\u0230\u0119"+
		"\2\u182d\u1830\7\u00af\2\2\u182e\u182f\7\26\2\2\u182f\u1831\7\u00c4\2"+
		"\2\u1830\u182e\3\2\2\2\u1830\u1831\3\2\2\2\u1831\u1832\3\2\2\2\u1832\u1835"+
		"\5\u0230\u0119\2\u1833\u1834\7\26\2\2\u1834\u1836\7\u00c4\2\2\u1835\u1833"+
		"\3\2\2\2\u1835\u1836\3\2\2\2\u1836\u1837\3\2\2\2\u1837\u1838\7#\2\2\u1838"+
		"\u183d\5\u0258\u012d\2\u1839\u183a\7\u0245\2\2\u183a\u183c\5\u0258\u012d"+
		"\2\u183b\u1839\3\2\2\2\u183c\u183f\3\2\2\2\u183d\u183b\3\2\2\2\u183d\u183e"+
		"\3\2\2\2\u183e\u1840\3\2\2\2\u183f\u183d\3\2\2\2\u1840\u1841\7\u024c\2"+
		"\2\u1841\u1843\3\2\2\2\u1842\u17a1\3\2\2\2\u1842\u17c5\3\2\2\2\u1842\u17d9"+
		"\3\2\2\2\u1842\u17e3\3\2\2\2\u1842\u17f9\3\2\2\2\u1842\u1808\3\2\2\2\u1842"+
		"\u180e\3\2\2\2\u1842\u1816\3\2\2\2\u1843\u0257\3\2\2\2\u1844\u1856\5\u0210"+
		"\u0109\2\u1845\u1848\5\u0224\u0113\2\u1846\u1847\7\u01fd\2\2\u1847\u1849"+
		"\5\u0230\u0119\2\u1848\u1846\3\2\2\2\u1848\u1849\3\2\2\2\u1849\u184c\3"+
		"\2\2\2\u184a\u184b\7\u0187\2\2\u184b\u184d\5\u0230\u0119\2\u184c\u184a"+
		"\3\2\2\2\u184c\u184d\3\2\2\2\u184d\u1852\3\2\2\2\u184e\u1850\7\u01a0\2"+
		"\2\u184f\u184e\3\2\2\2\u184f\u1850\3\2\2\2\u1850\u1851\3\2\2\2\u1851\u1853"+
		"\7\u01a1\2\2\u1852\u184f\3\2\2\2\u1852\u1853\3\2\2\2\u1853\u1857\3\2\2"+
		"\2\u1854\u1855\7\u0191\2\2\u1855\u1857\7\u00a5\2\2\u1856\u1845\3\2\2\2"+
		"\u1856\u1854\3\2\2\2\u1857\u0259\3\2\2\2\u1858\u1859\tX\2\2\u1859\u185c"+
		"\7\u024b\2\2\u185a\u185d\5\u0230\u0119\2\u185b\u185d\5\u0274\u013b\2\u185c"+
		"\u185a\3\2\2\2\u185c\u185b\3\2\2\2\u185d\u185e\3\2\2\2\u185e\u185f\7\u024c"+
		"\2\2\u185f\u025b\3\2\2\2\u1860\u1861\7Y\2\2\u1861\u1862\7\u024b\2\2\u1862"+
		"\u1863\7\u01ba\2\2\u1863\u1864\5\u0230\u0119\2\u1864\u1865\7\u024c\2\2"+
		"\u1865\u025d\3\2\2\2\u1866\u1868\7\u024b\2\2\u1867\u1869\5\u0210\u0109"+
		"\2\u1868\u1867\3\2\2\2\u1868\u1869\3\2\2\2\u1869\u186b\3\2\2\2\u186a\u186c"+
		"\5\u01f6\u00fc\2\u186b\u186a\3\2\2\2\u186b\u186c\3\2\2\2\u186c\u186e\3"+
		"\2\2\2\u186d\u186f\5\u0298\u014d\2\u186e\u186d\3\2\2\2\u186e\u186f\3\2"+
		"\2\2\u186f\u1871\3\2\2\2\u1870\u1872\5\u0260\u0131\2\u1871\u1870\3\2\2"+
		"\2\u1871\u1872\3\2\2\2\u1872\u1873\3\2\2\2\u1873\u1874\7\u024c\2\2\u1874"+
		"\u025f\3\2\2\2\u1875\u187c\tY\2\2\u1876\u187d\5\u0262\u0132\2\u1877\u1878"+
		"\7\u0127\2\2\u1878\u1879\5\u0262\u0132\2\u1879\u187a\7\u0173\2\2\u187a"+
		"\u187b\5\u0262\u0132\2\u187b\u187d\3\2\2\2\u187c\u1876\3\2\2\2\u187c\u1877"+
		"\3\2\2\2\u187d\u1887\3\2\2\2\u187e\u1885\7Q\2\2\u187f\u1880\7\63\2\2\u1880"+
		"\u1886\7\u0144\2\2\u1881\u1886\7\u0195\2\2\u1882\u1886\7\u0103\2\2\u1883"+
		"\u1884\7\u0098\2\2\u1884\u1886\7\u00a6\2\2\u1885\u187f\3\2\2\2\u1885\u1881"+
		"\3\2\2\2\u1885\u1882\3\2\2\2\u1885\u1883\3\2\2\2\u1886\u1888\3\2\2\2\u1887"+
		"\u187e\3\2\2\2\u1887\u1888\3\2\2\2\u1888\u0261\3\2\2\2\u1889\u188a\5\u0230"+
		"\u0119\2\u188a\u188b\tZ\2\2\u188b\u188f\3\2\2\2\u188c\u188d\7\63\2\2\u188d"+
		"\u188f\7\u0144\2\2\u188e\u1889\3\2\2\2\u188e\u188c\3\2\2\2\u188f\u0263"+
		"\3\2\2\2\u1890\u1893\7\u0175\2\2\u1891\u1894\5\u0266\u0134\2\u1892\u1894"+
		"\5\u026e\u0138\2\u1893\u1891\3\2\2\2\u1893\u1892\3\2\2\2\u1894\u0265\3"+
		"\2\2\2\u1895\u18a4\7\u0257\2\2\u1896\u1899\5\u0230\u0119\2\u1897\u1899"+
		"\5\u0266\u0134\2\u1898\u1896\3\2\2\2\u1898\u1897\3\2\2\2\u1899\u18a1\3"+
		"\2\2\2\u189a\u189d\7\u0245\2\2\u189b\u189e\5\u0230\u0119\2\u189c\u189e"+
		"\5\u0266\u0134\2\u189d\u189b\3\2\2\2\u189d\u189c\3\2\2\2\u189e\u18a0\3"+
		"\2\2\2\u189f\u189a\3\2\2\2\u18a0\u18a3\3\2\2\2\u18a1\u189f\3\2\2\2\u18a1"+
		"\u18a2\3\2\2\2\u18a2\u18a5\3\2\2\2\u18a3\u18a1\3\2\2\2\u18a4\u1898\3\2"+
		"\2\2\u18a4\u18a5\3\2\2\2\u18a5\u18a6\3\2\2\2\u18a6\u18a7\7\u0258\2\2\u18a7"+
		"\u0267\3\2\2\2\u18a8\u18a9\5\u0224\u0113\2\u18a9\u18aa\5\u0146\u00a4\2"+
		"\u18aa\u18b2\3\2\2\2\u18ab\u18ac\7\u0138\2\2\u18ac\u18ad\5\u0146\u00a4"+
		"\2\u18ad\u18af\5\u022a\u0116\2\u18ae\u18b0\5\u022c\u0117\2\u18af\u18ae"+
		"\3\2\2\2\u18af\u18b0\3\2\2\2\u18b0\u18b2\3\2\2\2\u18b1\u18a8\3\2\2\2\u18b1"+
		"\u18ab\3\2\2\2\u18b2\u0269\3\2\2\2\u18b3\u18ba\5\u0210\u0109\2\u18b4\u18b5"+
		"\7\u0253\2\2\u18b5\u18b8\5\u0210\u0109\2\u18b6\u18b7\7\u0253\2\2\u18b7"+
		"\u18b9\5\u0210\u0109\2\u18b8\u18b6\3\2\2\2\u18b8\u18b9\3\2\2\2\u18b9\u18bb"+
		"\3\2\2\2\u18ba\u18b4\3\2\2\2\u18ba\u18bb\3\2\2\2\u18bb\u026b\3\2\2\2\u18bc"+
		"\u18bd\t[\2\2\u18bd\u026d\3\2\2\2\u18be\u18bf\7\u024b\2\2\u18bf\u18c0"+
		"\5\u0270\u0139\2\u18c0\u18c1\7\u024c\2\2\u18c1\u026f\3\2\2\2\u18c2\u18c4"+
		"\5\u0276\u013c\2\u18c3\u18c2\3\2\2\2\u18c3\u18c4\3\2\2\2\u18c4\u18c5\3"+
		"\2\2\2\u18c5\u18c9\5\u027a\u013e\2\u18c6\u18c8\5\u0272\u013a\2\u18c7\u18c6"+
		"\3\2\2\2\u18c8\u18cb\3\2\2\2\u18c9\u18c7\3\2\2\2\u18c9\u18ca\3\2\2\2\u18ca"+
		"\u0271\3\2\2\2\u18cb\u18c9\3\2\2\2\u18cc\u18fb\5\u0298\u014d\2\u18cd\u18d0"+
		"\7\u019d\2\2\u18ce\u18d1\5\u0230\u0119\2\u18cf\u18d1\7\u0170\2\2\u18d0"+
		"\u18ce\3\2\2\2\u18d0\u18cf\3\2\2\2\u18d1\u18fb\3\2\2\2\u18d2\u18d3\7\u01a2"+
		"\2\2\u18d3\u18d5\5\u0230\u0119\2\u18d4\u18d6\t\\\2\2\u18d5\u18d4\3\2\2"+
		"\2\u18d5\u18d6\3\2\2\2\u18d6\u18fb\3\2\2\2\u18d7\u18d8\7\u0190\2\2\u18d8"+
		"\u18da\t]\2\2\u18d9\u18db\5\u0230\u0119\2\u18da\u18d9\3\2\2\2\u18da\u18db"+
		"\3\2\2\2\u18db\u18dc\3\2\2\2\u18dc\u18de\t\\\2\2\u18dd\u18df\7\u01a4\2"+
		"\2\u18de\u18dd\3\2\2\2\u18de\u18df\3\2\2\2\u18df\u18fb\3\2\2\2\u18e0\u18e8"+
		"\7\u0191\2\2\u18e1\u18e9\7\u0112\2\2\u18e2\u18e3\7\u0098\2\2\u18e3\u18e4"+
		"\7|\2\2\u18e4\u18e9\7\u0112\2\2\u18e5\u18e9\7\u00e8\2\2\u18e6\u18e7\7"+
		"|\2\2\u18e7\u18e9\7\u00e8\2\2\u18e8\u18e1\3\2\2\2\u18e8\u18e2\3\2\2\2"+
		"\u18e8\u18e5\3\2\2\2\u18e8\u18e6\3\2\2\2\u18e9\u18f3\3\2\2\2\u18ea\u18eb"+
		"\7\u009e\2\2\u18eb\u18f0\5\u026a\u0136\2\u18ec\u18ed\7\u0245\2\2\u18ed"+
		"\u18ef\5\u026a\u0136\2\u18ee\u18ec\3\2\2\2\u18ef\u18f2\3\2\2\2\u18f0\u18ee"+
		"\3\2\2\2\u18f0\u18f1\3\2\2\2\u18f1\u18f4\3\2\2\2\u18f2\u18f0\3\2\2\2\u18f3"+
		"\u18ea\3\2\2\2\u18f3\u18f4\3\2\2\2\u18f4\u18f8\3\2\2\2\u18f5\u18f9\7\u009b"+
		"\2\2\u18f6\u18f7\7\u00eb\2\2\u18f7\u18f9\7\u0088\2\2\u18f8\u18f5\3\2\2"+
		"\2\u18f8\u18f6\3\2\2\2\u18f8\u18f9\3\2\2\2\u18f9\u18fb\3\2\2\2\u18fa\u18cc"+
		"\3\2\2\2\u18fa\u18cd\3\2\2\2\u18fa\u18d2\3\2\2\2\u18fa\u18d7\3\2\2\2\u18fa"+
		"\u18e0\3\2\2\2\u18fb\u0273\3\2\2\2\u18fc\u18fe\5\u0276\u013c\2\u18fd\u18fc"+
		"\3\2\2\2\u18fd\u18fe\3\2\2\2\u18fe\u18ff\3\2\2\2\u18ff\u1903\5\u027c\u013f"+
		"\2\u1900\u1902\5\u0272\u013a\2\u1901\u1900\3\2\2\2\u1902\u1905\3\2\2\2"+
		"\u1903\u1901\3\2\2\2\u1903\u1904\3\2\2\2\u1904\u0275\3\2\2\2\u1905\u1903"+
		"\3\2\2\2\u1906\u1908\7\u01bc\2\2\u1907\u1909\7\u00c3\2\2\u1908\u1907\3"+
		"\2\2\2\u1908\u1909\3\2\2\2\u1909\u190a\3\2\2\2\u190a\u190f\5\u0278\u013d"+
		"\2\u190b\u190c\7\u0245\2\2\u190c\u190e\5\u0278\u013d\2\u190d\u190b\3\2"+
		"\2\2\u190e\u1911\3\2\2\2\u190f\u190d\3\2\2\2\u190f\u1910\3\2\2\2\u1910"+
		"\u0277\3\2\2\2\u1911\u190f\3\2\2\2\u1912\u191e\5\u0210\u0109\2\u1913\u1914"+
		"\7\u024b\2\2\u1914\u1919\5\u0210\u0109\2\u1915\u1916\7\u0245\2\2\u1916"+
		"\u1918\5\u0210\u0109\2\u1917\u1915\3\2\2\2\u1918\u191b\3\2\2\2\u1919\u1917"+
		"\3\2\2\2\u1919\u191a\3\2\2\2\u191a\u191c\3\2\2\2\u191b\u1919\3\2\2\2\u191c"+
		"\u191d\7\u024c\2\2\u191d\u191f\3\2\2\2\u191e\u1913\3\2\2\2\u191e\u191f"+
		"\3\2\2\2\u191f\u1920\3\2\2\2\u1920\u1925\7\u0176\2\2\u1921\u1923\7\u01a0"+
		"\2\2\u1922\u1921\3\2\2\2\u1922\u1923\3\2\2\2\u1923\u1924\3\2\2\2\u1924"+
		"\u1926\7\u008c\2\2\u1925\u1922\3\2\2\2\u1925\u1926\3\2\2\2\u1926\u1927"+
		"\3\2\2\2\u1927\u1928\7\u024b\2\2\u1928\u1929\5\20\t\2\u1929\u192a\7\u024c"+
		"\2\2\u192a\u0279\3\2\2\2\u192b\u192c\b\u013e\1\2\u192c\u192d\7\u024b\2"+
		"\2\u192d\u192e\5\u0270\u0139\2\u192e\u192f\7\u024c\2\2\u192f\u1932\3\2"+
		"\2\2\u1930\u1932\5\u027e\u0140\2\u1931\u192b\3\2\2\2\u1931\u1930\3\2\2"+
		"\2\u1932\u193b\3\2\2\2\u1933\u1934\f\4\2\2\u1934\u1936\t^\2\2\u1935\u1937"+
		"\5\u026c\u0137\2\u1936\u1935\3\2\2\2\u1936\u1937\3\2\2\2\u1937\u1938\3"+
		"\2\2\2\u1938\u193a\5\u027a\u013e\5\u1939\u1933\3\2\2\2\u193a\u193d\3\2"+
		"\2\2\u193b\u1939\3\2\2\2\u193b\u193c\3\2\2\2\u193c\u027b\3\2\2\2\u193d"+
		"\u193b\3\2\2\2\u193e\u193f\5\u027a\u013e\2\u193f\u1941\t^\2\2\u1940\u1942"+
		"\5\u026c\u0137\2\u1941\u1940\3\2\2\2\u1941\u1942\3\2\2\2\u1942\u1948\3"+
		"\2\2\2\u1943\u1949\5\u027e\u0140\2\u1944\u1945\7\u024b\2\2\u1945\u1946"+
		"\5\u0270\u0139\2\u1946\u1947\7\u024c\2\2\u1947\u1949\3\2\2\2\u1948\u1943"+
		"\3\2\2\2\u1948\u1944\3\2\2\2\u1949\u194c\3\2\2\2\u194a\u194c\5\u027e\u0140"+
		"\2\u194b\u193e\3\2\2\2\u194b\u194a\3\2\2\2\u194c\u027d\3\2\2\2\u194d\u195d"+
		"\7\u01ab\2\2\u194e\u195b\5\u026c\u0137\2\u194f\u1950\7\u01a3\2\2\u1950"+
		"\u1951\7\u024b\2\2\u1951\u1956\5\u0230\u0119\2\u1952\u1953\7\u0245\2\2"+
		"\u1953\u1955\5\u0230\u0119\2\u1954\u1952\3\2\2\2\u1955\u1958\3\2\2\2\u1956"+
		"\u1954\3\2\2\2\u1956\u1957\3\2\2\2\u1957\u1959\3\2\2\2\u1958\u1956\3\2"+
		"\2\2\u1959\u195a\7\u024c\2\2\u195a\u195c\3\2\2\2\u195b\u194f\3\2\2\2\u195b"+
		"\u195c\3\2\2\2\u195c\u195e\3\2\2\2\u195d\u194e\3\2\2\2\u195d\u195e\3\2"+
		"\2\2\u195e\u1960\3\2\2\2\u195f\u1961\5\u0280\u0141\2\u1960\u195f\3\2\2"+
		"\2\u1960\u1961\3\2\2\2\u1961\u1963\3\2\2\2\u1962\u1964\5\u0284\u0143\2"+
		"\u1963\u1962\3\2\2\2\u1963\u1964\3\2\2\2\u1964\u196e\3\2\2\2\u1965\u1966"+
		"\7\u0193\2\2\u1966\u196b\5\u0286\u0144\2\u1967\u1968\7\u0245\2\2\u1968"+
		"\u196a\5\u0286\u0144\2\u1969\u1967\3\2\2\2\u196a\u196d\3\2\2\2\u196b\u1969"+
		"\3\2\2\2\u196b\u196c\3\2\2\2\u196c\u196f\3\2\2\2\u196d\u196b\3\2\2\2\u196e"+
		"\u1965\3\2\2\2\u196e\u196f\3\2\2\2\u196f\u1972\3\2\2\2\u1970\u1971\7\u01ba"+
		"\2\2\u1971\u1973\5\u0230\u0119\2\u1972\u1970\3\2\2\2\u1972\u1973\3\2\2"+
		"\2\u1973\u1975\3\2\2\2\u1974\u1976\5\u028e\u0148\2\u1975\u1974\3\2\2\2"+
		"\u1975\u1976\3\2\2\2\u1976\u1979\3\2\2\2\u1977\u1978\7\u0196\2\2\u1978"+
		"\u197a\5\u0230\u0119\2\u1979\u1977\3\2\2\2\u1979\u197a\3\2\2\2\u197a\u1989"+
		"\3\2\2\2\u197b\u197c\7\u01bb\2\2\u197c\u197d\5\u0210\u0109\2\u197d\u197e"+
		"\7\u0176\2\2\u197e\u1986\5\u025e\u0130\2\u197f\u1980\7\u0245\2\2\u1980"+
		"\u1981\5\u0210\u0109\2\u1981\u1982\7\u0176\2\2\u1982\u1983\5\u025e\u0130"+
		"\2\u1983\u1985\3\2\2\2\u1984\u197f\3\2\2\2\u1985\u1988\3\2\2\2\u1986\u1984"+
		"\3\2\2\2\u1986\u1987\3\2\2\2\u1987\u198a\3\2\2\2\u1988\u1986\3\2\2\2\u1989"+
		"\u197b\3\2\2\2\u1989\u198a\3\2\2\2\u198a\u1995\3\2\2\2\u198b\u198d\7\u01af"+
		"\2\2\u198c\u198e\7\u01a4\2\2\u198d\u198c\3\2\2\2\u198d\u198e\3\2\2\2\u198e"+
		"\u198f\3\2\2\2\u198f\u1991\5\u026a\u0136\2\u1990\u1992\7\u024f\2\2\u1991"+
		"\u1990\3\2\2\2\u1991\u1992\3\2\2\2\u1992\u1995\3\2\2\2\u1993\u1995\5\u0294"+
		"\u014b\2\u1994\u194d\3\2\2\2\u1994\u198b\3\2\2\2\u1994\u1993\3\2\2\2\u1995"+
		"\u027f\3\2\2\2\u1996\u199b\5\u0282\u0142\2\u1997\u1998\7\u0245\2\2\u1998"+
		"\u199a\5\u0282\u0142\2\u1999\u1997\3\2\2\2\u199a\u199d\3\2\2\2\u199b\u1999"+
		"\3\2\2\2\u199b\u199c\3\2\2\2\u199c\u0281\3\2\2\2\u199d\u199b\3\2\2\2\u199e"+
		"\u19a2\5\u0230\u0119\2\u199f\u19a0\7\u0176\2\2\u19a0\u19a3\5\u0214\u010b"+
		"\2\u19a1\u19a3\5\u020e\u0108\2\u19a2\u199f\3\2\2\2\u19a2\u19a1\3\2\2\2"+
		"\u19a2\u19a3\3\2\2\2\u19a3\u0283\3\2\2\2\u19a4\u19a6\7\u019a\2\2\u19a5"+
		"\u19a7\t_\2\2\u19a6\u19a5\3\2\2\2\u19a6\u19a7\3\2\2\2\u19a7\u19a9\3\2"+
		"\2\2\u19a8\u19aa\7\u01af\2\2\u19a9\u19a8\3\2\2\2\u19a9\u19aa\3\2\2\2\u19aa"+
		"\u19ab\3\2\2\2\u19ab\u19ac\5\u026a\u0136\2\u19ac\u0285\3\2\2\2\u19ad\u19ae"+
		"\b\u0144\1\2\u19ae\u19af\7\u024b\2\2\u19af\u19b0\5\u0286\u0144\2\u19b0"+
		"\u19b2\7\u024c\2\2\u19b1\u19b3\5\u028a\u0146\2\u19b2\u19b1\3\2\2\2\u19b2"+
		"\u19b3\3\2\2\2\u19b3\u19b6\3\2\2\2\u19b4\u19b6\5\u0288\u0145\2\u19b5\u19ad"+
		"\3\2\2\2\u19b5\u19b4\3\2\2\2\u19b6\u19e2\3\2\2\2\u19b7\u19b8\f\7\2\2\u19b8"+
		"\u19b9\7\u015d\2\2\u19b9\u19ba\7\u0165\2\2\u19ba\u19e1\5\u0286\u0144\b"+
		"\u19bb\u19bc\f\4\2\2\u19bc\u19c2\7\u0168\2\2\u19bd\u19c3\7\u0162\2\2\u19be"+
		"\u19c0\t`\2\2\u19bf\u19c1\7\u016a\2\2\u19c0\u19bf\3\2\2\2\u19c0\u19c1"+
		"\3\2\2\2\u19c1\u19c3\3\2\2\2\u19c2\u19bd\3\2\2\2\u19c2\u19be\3\2\2\2\u19c2"+
		"\u19c3\3\2\2\2\u19c3\u19c4\3\2\2\2\u19c4\u19c5\7\u0165\2\2\u19c5\u19e1"+
		"\5\u0286\u0144\5\u19c6\u19cc\f\6\2\2\u19c7\u19cd\7\u0162\2\2\u19c8\u19ca"+
		"\t`\2\2\u19c9\u19cb\7\u016a\2\2\u19ca\u19c9\3\2\2\2\u19ca\u19cb\3\2\2"+
		"\2\u19cb\u19cd\3\2\2\2\u19cc\u19c7\3\2\2\2\u19cc\u19c8\3\2\2\2\u19cc\u19cd"+
		"\3\2\2\2\u19cd\u19ce\3\2\2\2\u19ce\u19cf\7\u0165\2\2\u19cf\u19d0\5\u0286"+
		"\u0144\2\u19d0\u19d1\7\u01a3\2\2\u19d1\u19d2\5\u0230\u0119\2\u19d2\u19e1"+
		"\3\2\2\2\u19d3\u19d9\f\5\2\2\u19d4\u19da\7\u0162\2\2\u19d5\u19d7\t`\2"+
		"\2\u19d6\u19d8\7\u016a\2\2\u19d7\u19d6\3\2\2\2\u19d7\u19d8\3\2\2\2\u19d8"+
		"\u19da\3\2\2\2\u19d9\u19d4\3\2\2\2\u19d9\u19d5\3\2\2\2\u19d9\u19da\3\2"+
		"\2\2\u19da\u19db\3\2\2\2\u19db\u19dc\7\u0165\2\2\u19dc\u19dd\5\u0286\u0144"+
		"\2\u19dd\u19de\7\u01b7\2\2\u19de\u19df\5\u01d8\u00ed\2\u19df\u19e1\3\2"+
		"\2\2\u19e0\u19b7\3\2\2\2\u19e0\u19bb\3\2\2\2\u19e0\u19c6\3\2\2\2\u19e0"+
		"\u19d3\3\2\2\2\u19e1\u19e4\3\2\2\2\u19e2\u19e0\3\2\2\2\u19e2\u19e3\3\2"+
		"\2\2\u19e3\u0287\3\2\2\2\u19e4\u19e2\3\2\2\2\u19e5\u19e7\7\u01a4\2\2\u19e6"+
		"\u19e5\3\2\2\2\u19e6\u19e7\3\2\2\2\u19e7\u19e8\3\2\2\2\u19e8\u19ea\5\u026a"+
		"\u0136\2\u19e9\u19eb\7\u024f\2\2\u19ea\u19e9\3\2\2\2\u19ea\u19eb\3\2\2"+
		"\2\u19eb\u19ed\3\2\2\2\u19ec\u19ee\5\u028a\u0146\2\u19ed\u19ec\3\2\2\2"+
		"\u19ed\u19ee\3\2\2\2\u19ee\u19ff\3\2\2\2\u19ef\u19f0\7\u016e\2\2\u19f0"+
		"\u19f1\5\u0210\u0109\2\u19f1\u19f2\7\u024b\2\2\u19f2\u19f7\5\u0230\u0119"+
		"\2\u19f3\u19f4\7\u0245\2\2\u19f4\u19f6\5\u0230\u0119\2\u19f5\u19f3\3\2"+
		"\2\2\u19f6\u19f9\3\2\2\2\u19f7\u19f5\3\2\2\2\u19f7\u19f8\3\2\2\2\u19f8"+
		"\u19fa\3\2\2\2\u19f9\u19f7\3\2\2\2\u19fa\u19fd\7\u024c\2\2\u19fb\u19fc"+
		"\7\u00cb\2\2\u19fc\u19fe\5\u0230\u0119\2\u19fd\u19fb\3\2\2\2\u19fd\u19fe"+
		"\3\2\2\2\u19fe\u1a00\3\2\2\2\u19ff\u19ef\3\2\2\2\u19ff\u1a00\3\2\2\2\u1a00"+
		"\u1a54\3\2\2\2\u1a01\u1a03\7\u019b\2\2\u1a02\u1a01\3\2\2\2\u1a02\u1a03"+
		"\3\2\2\2\u1a03\u1a04\3\2\2\2\u1a04\u1a05\5\u026e\u0138\2\u1a05\u1a06\5"+
		"\u028a\u0146\2\u1a06\u1a54\3\2\2\2\u1a07\u1a09\7\u019b\2\2\u1a08\u1a07"+
		"\3\2\2\2\u1a08\u1a09\3\2\2\2\u1a09\u1a0a\3\2\2\2\u1a0a\u1a0d\5\u0246\u0124"+
		"\2\u1a0b\u1a0c\7\u01bc\2\2\u1a0c\u1a0e\7\u00a5\2\2\u1a0d\u1a0b\3\2\2\2"+
		"\u1a0d\u1a0e\3\2\2\2\u1a0e\u1a23\3\2\2\2\u1a0f\u1a10\7\u0176\2\2\u1a10"+
		"\u1a24\5\u028c\u0147\2\u1a11\u1a13\7\u0176\2\2\u1a12\u1a11\3\2\2\2\u1a12"+
		"\u1a13\3\2\2\2\u1a13\u1a14\3\2\2\2\u1a14\u1a21\5\u0210\u0109\2\u1a15\u1a16"+
		"\7\u024b\2\2\u1a16\u1a1b\5\u0210\u0109\2\u1a17\u1a18\7\u0245\2\2\u1a18"+
		"\u1a1a\5\u0210\u0109\2\u1a19\u1a17\3\2\2\2\u1a1a\u1a1d\3\2\2\2\u1a1b\u1a19"+
		"\3\2\2\2\u1a1b\u1a1c\3\2\2\2\u1a1c\u1a1e\3\2\2\2\u1a1d\u1a1b\3\2\2\2\u1a1e"+
		"\u1a1f\7\u024c\2\2\u1a1f\u1a22\3\2\2\2\u1a20\u1a22\5\u028c\u0147\2\u1a21"+
		"\u1a15\3\2\2\2\u1a21\u1a20\3\2\2\2\u1a21\u1a22\3\2\2\2\u1a22\u1a24\3\2"+
		"\2\2\u1a23\u1a0f\3\2\2\2\u1a23\u1a12\3\2\2\2\u1a23\u1a24\3\2\2\2\u1a24"+
		"\u1a54\3\2\2\2\u1a25\u1a27\7\u019b\2\2\u1a26\u1a25\3\2\2\2\u1a26\u1a27"+
		"\3\2\2\2\u1a27\u1a28\3\2\2\2\u1a28\u1a29\7\u00d8\2\2\u1a29\u1a2a\7\u0193"+
		"\2\2\u1a2a\u1a2b\7\u024b\2\2\u1a2b\u1a2e\5\u0246\u0124\2\u1a2c\u1a2d\7"+
		"\u0176\2\2\u1a2d\u1a2f\5\u028c\u0147\2\u1a2e\u1a2c\3\2\2\2\u1a2e\u1a2f"+
		"\3\2\2\2\u1a2f\u1a38\3\2\2\2\u1a30\u1a31\7\u0245\2\2\u1a31\u1a34\5\u0246"+
		"\u0124\2\u1a32\u1a33\7\u0176\2\2\u1a33\u1a35\5\u028c\u0147\2\u1a34\u1a32"+
		"\3\2\2\2\u1a34\u1a35\3\2\2\2\u1a35\u1a37\3\2\2\2\u1a36\u1a30\3\2\2\2\u1a37"+
		"\u1a3a\3\2\2\2\u1a38\u1a36\3\2\2\2\u1a38\u1a39\3\2\2\2\u1a39\u1a3b\3\2"+
		"\2\2\u1a3a\u1a38\3\2\2\2\u1a3b\u1a3e\7\u024c\2\2\u1a3c\u1a3d\7\u01bc\2"+
		"\2\u1a3d\u1a3f\7\u00a5\2\2\u1a3e\u1a3c\3\2\2\2\u1a3e\u1a3f\3\2\2\2\u1a3f"+
		"\u1a51\3\2\2\2\u1a40\u1a42\7\u0176\2\2\u1a41\u1a40\3\2\2\2\u1a41\u1a42"+
		"\3\2\2\2\u1a42\u1a43\3\2\2\2\u1a43\u1a4f\5\u0210\u0109\2\u1a44\u1a45\7"+
		"\u024b\2\2\u1a45\u1a4a\5\u0210\u0109\2\u1a46\u1a47\7\u0245\2\2\u1a47\u1a49"+
		"\5\u0210\u0109\2\u1a48\u1a46\3\2\2\2\u1a49\u1a4c\3\2\2\2\u1a4a\u1a48\3"+
		"\2\2\2\u1a4a\u1a4b\3\2\2\2\u1a4b\u1a4d\3\2\2\2\u1a4c\u1a4a\3\2\2\2\u1a4d"+
		"\u1a4e\7\u024c\2\2\u1a4e\u1a50\3\2\2\2\u1a4f\u1a44\3\2\2\2\u1a4f\u1a50"+
		"\3\2\2\2\u1a50\u1a52\3\2\2\2\u1a51\u1a41\3\2\2\2\u1a51\u1a52\3\2\2\2\u1a52"+
		"\u1a54\3\2\2\2\u1a53\u19e6\3\2\2\2\u1a53\u1a02\3\2\2\2\u1a53\u1a08\3\2"+
		"\2\2\u1a53\u1a26\3\2\2\2\u1a54\u0289\3\2\2\2\u1a55\u1a57\7\u0176\2\2\u1a56"+
		"\u1a55\3\2\2\2\u1a56\u1a57\3\2\2\2\u1a57\u1a58\3\2\2\2\u1a58\u1a64\5\u0210"+
		"\u0109\2\u1a59\u1a5a\7\u024b\2\2\u1a5a\u1a5f\5\u0210\u0109\2\u1a5b\u1a5c"+
		"\7\u0245\2\2\u1a5c\u1a5e\5\u0210\u0109\2\u1a5d\u1a5b\3\2\2\2\u1a5e\u1a61"+
		"\3\2\2\2\u1a5f\u1a5d\3\2\2\2\u1a5f\u1a60\3\2\2\2\u1a60\u1a62\3\2\2\2\u1a61"+
		"\u1a5f\3\2\2\2\u1a62\u1a63\7\u024c\2\2\u1a63\u1a65\3\2\2\2\u1a64\u1a59"+
		"\3\2\2\2\u1a64\u1a65\3\2\2\2\u1a65\u028b\3\2\2\2\u1a66\u1a67\7\u024b\2"+
		"\2\u1a67\u1a68\5\u0210\u0109\2\u1a68\u1a6f\5\u0224\u0113\2\u1a69\u1a6a"+
		"\7\u0245\2\2\u1a6a\u1a6b\5\u0210\u0109\2\u1a6b\u1a6c\5\u0224\u0113\2\u1a6c"+
		"\u1a6e\3\2\2\2\u1a6d\u1a69\3\2\2\2\u1a6e\u1a71\3\2\2\2\u1a6f\u1a6d\3\2"+
		"\2\2\u1a6f\u1a70\3\2\2\2\u1a70\u1a72\3\2\2\2\u1a71\u1a6f\3\2\2\2\u1a72"+
		"\u1a73\7\u024c\2\2\u1a73\u028d\3\2\2\2\u1a74\u1a75\7\u0195\2\2\u1a75\u1a76"+
		"\7\26\2\2\u1a76\u1a77\5\u0290\u0149\2\u1a77\u028f\3\2\2\2\u1a78\u1a7d"+
		"\5\u0292\u014a\2\u1a79\u1a7a\7\u0245\2\2\u1a7a\u1a7c\5\u0292\u014a\2\u1a7b"+
		"\u1a79\3\2\2\2\u1a7c\u1a7f\3\2\2\2\u1a7d\u1a7b\3\2\2\2\u1a7d\u1a7e\3\2"+
		"\2\2\u1a7e\u0291\3\2\2\2\u1a7f\u1a7d\3\2\2\2\u1a80\u1a8e\5\u0230\u0119"+
		"\2\u1a81\u1a82\7\u024b\2\2\u1a82\u1a8e\7\u024c\2\2\u1a83\u1a88\7\u00d5"+
		"\2\2\u1a84\u1a88\7\62\2\2\u1a85\u1a86\7\u0134\2\2\u1a86\u1a88\7\u00e7"+
		"\2\2\u1a87\u1a83\3\2\2\2\u1a87\u1a84\3\2\2\2\u1a87\u1a85\3\2\2\2\u1a88"+
		"\u1a89\3\2\2\2\u1a89\u1a8a\7\u024b\2\2\u1a8a\u1a8b\5\u0290\u0149\2\u1a8b"+
		"\u1a8c\7\u024c\2\2\u1a8c\u1a8e\3\2\2\2\u1a8d\u1a80\3\2\2\2\u1a8d\u1a81"+
		"\3\2\2\2\u1a8d\u1a87\3\2\2\2\u1a8e\u0293\3\2\2\2\u1a8f\u1a90\7\u014c\2"+
		"\2\u1a90\u1a95\5\u0296\u014c\2\u1a91\u1a92\7\u0245\2\2\u1a92\u1a94\5\u0296"+
		"\u014c\2\u1a93\u1a91\3\2\2\2\u1a94\u1a97\3\2\2\2\u1a95\u1a93\3\2\2\2\u1a95"+
		"\u1a96\3\2\2\2\u1a96\u0295\3\2\2\2\u1a97\u1a95\3\2\2\2\u1a98\u1a9b\7\u024b"+
		"\2\2\u1a99\u1a9c\5\u0230\u0119\2\u1a9a\u1a9c\7\u0187\2\2\u1a9b\u1a99\3"+
		"\2\2\2\u1a9b\u1a9a\3\2\2\2\u1a9c\u1aa4\3\2\2\2\u1a9d\u1aa0\7\u0245\2\2"+
		"\u1a9e\u1aa1\5\u0230\u0119\2\u1a9f";
	private static final String _serializedATNSegment3 =
		"\u1aa1\7\u0187\2\2\u1aa0\u1a9e\3\2\2\2\u1aa0\u1a9f\3\2\2\2\u1aa1\u1aa3"+
		"\3\2\2\2\u1aa2\u1a9d\3\2\2\2\u1aa3\u1aa6\3\2\2\2\u1aa4\u1aa2\3\2\2\2\u1aa4"+
		"\u1aa5\3\2\2\2\u1aa5\u1aa7\3\2\2\2\u1aa6\u1aa4\3\2\2\2\u1aa7\u1aa8\7\u024c"+
		"\2\2\u1aa8\u0297\3\2\2\2\u1aa9\u1aaa\7\u01a6\2\2\u1aaa\u1aab\7\26\2\2"+
		"\u1aab\u1aac\5\u029a\u014e\2\u1aac\u0299\3\2\2\2\u1aad\u1ab2\5\u029c\u014f"+
		"\2\u1aae\u1aaf\7\u0245\2\2\u1aaf\u1ab1\5\u029c\u014f\2\u1ab0\u1aae\3\2"+
		"\2\2\u1ab1\u1ab4\3\2\2\2\u1ab2\u1ab0\3\2\2\2\u1ab2\u1ab3\3\2\2\2\u1ab3"+
		"\u029b\3\2\2\2\u1ab4\u1ab2\3\2\2\2\u1ab5\u1ab7\5\u0230\u0119\2\u1ab6\u1ab8"+
		"\5\u026a\u0136\2\u1ab7\u1ab6\3\2\2\2\u1ab7\u1ab8\3\2\2\2\u1ab8\u1aba\3"+
		"\2\2\2\u1ab9\u1abb\5\u029e\u0150\2\u1aba\u1ab9\3\2\2\2\u1aba\u1abb\3\2"+
		"\2\2\u1abb\u1abd\3\2\2\2\u1abc\u1abe\5\u02a0\u0151\2\u1abd\u1abc\3\2\2"+
		"\2\u1abd\u1abe\3\2\2\2\u1abe\u029d\3\2\2\2\u1abf\u1ac4\7\u0177\2\2\u1ac0"+
		"\u1ac4\7\u0189\2\2\u1ac1\u1ac2\7\u01b7\2\2\u1ac2\u1ac4\5\u0236\u011c\2"+
		"\u1ac3\u1abf\3\2\2\2\u1ac3\u1ac0\3\2\2\2\u1ac3\u1ac1\3\2\2\2\u1ac4\u029f"+
		"\3\2\2\2\u1ac5\u1ac6\7\u009c\2\2\u1ac6\u1ac7\ta\2\2\u1ac7\u02a1\3\2\2"+
		"\2\u1ac8\u1aca\5\u0276\u013c\2\u1ac9\u1ac8\3\2\2\2\u1ac9\u1aca\3\2\2\2"+
		"\u1aca\u1acb\3\2\2\2\u1acb\u1acc\7x\2\2\u1acc\u1acd\7\u019a\2\2\u1acd"+
		"\u1ad0\5\u026a\u0136\2\u1ace\u1acf\7\u0176\2\2\u1acf\u1ad1\5\u0210\u0109"+
		"\2\u1ad0\u1ace\3\2\2\2\u1ad0\u1ad1\3\2\2\2\u1ad1\u1ad5\3\2\2\2\u1ad2\u1ad3"+
		"\7\u00a8\2\2\u1ad3\u1ad4\tb\2\2\u1ad4\u1ad6\7\u0117\2\2\u1ad5\u1ad2\3"+
		"\2\2\2\u1ad5\u1ad6\3\2\2\2\u1ad6\u1ad8\3\2\2\2\u1ad7\u1ad9\5\u02a4\u0153"+
		"\2\u1ad8\u1ad7\3\2\2\2\u1ad8\u1ad9\3\2\2\2\u1ad9\u1add\3\2\2\2\u1ada\u1ade"+
		"\5\u0270\u0139\2\u1adb\u1adc\7\u0187\2\2\u1adc\u1ade\7\u014c\2\2\u1add"+
		"\u1ada\3\2\2\2\u1add\u1adb\3\2\2\2\u1ade\u1ae5\3\2\2\2\u1adf\u1ae0\7\u01a3"+
		"\2\2\u1ae0\u1ae2\7)\2\2\u1ae1\u1ae3\5\u02a8\u0155\2\u1ae2\u1ae1\3\2\2"+
		"\2\u1ae2\u1ae3\3\2\2\2\u1ae3\u1ae4\3\2\2\2\u1ae4\u1ae6\5\u02aa\u0156\2"+
		"\u1ae5\u1adf\3\2\2\2\u1ae5\u1ae6\3\2\2\2\u1ae6\u1ae9\3\2\2\2\u1ae7\u1ae8"+
		"\7\u01aa\2\2\u1ae8\u1aea\5\u0280\u0141\2\u1ae9\u1ae7\3\2\2\2\u1ae9\u1aea"+
		"\3\2\2\2\u1aea\u02a3\3\2\2\2\u1aeb\u1aec\7\u024b\2\2\u1aec\u1af1\5\u02a6"+
		"\u0154\2\u1aed\u1aee\7\u0245\2\2\u1aee\u1af0\5\u02a6\u0154\2\u1aef\u1aed"+
		"\3\2\2\2\u1af0\u1af3\3\2\2\2\u1af1\u1aef\3\2\2\2\u1af1\u1af2\3\2\2\2\u1af2"+
		"\u1af4\3\2\2\2\u1af3\u1af1\3\2\2\2\u1af4\u1af5\7\u024c\2\2\u1af5\u02a5"+
		"\3\2\2\2\u1af6\u1af8\5\u0210\u0109\2\u1af7\u1af9\5\u0200\u0101\2\u1af8"+
		"\u1af7\3\2\2\2\u1af8\u1af9\3\2\2\2\u1af9\u02a7\3\2\2\2\u1afa\u1afc\5\u0094"+
		"K\2\u1afb\u1afd\5\u0098M\2\u1afc\u1afb\3\2\2\2\u1afc\u1afd\3\2\2\2\u1afd"+
		"\u1b02\3\2\2\2\u1afe\u1aff\7\u01a3\2\2\u1aff\u1b00\7\u017f\2\2\u1b00\u1b02"+
		"\5\u0210\u0109\2\u1b01\u1afa\3\2\2\2\u1b01\u1afe\3\2\2\2\u1b02\u02a9\3"+
		"\2\2\2\u1b03\u1b04\7\u018b\2\2\u1b04\u1b15\7\u0099\2\2\u1b05\u1b06\7\u018b"+
		"\2\2\u1b06\u1b07\7\u0112\2\2\u1b07\u1b08\7\u00e6\2\2\u1b08\u1b0d\5\u02b0"+
		"\u0159\2\u1b09\u1b0a\7\u0245\2\2\u1b0a\u1b0c\5\u02b0\u0159\2\u1b0b\u1b09"+
		"\3\2\2\2\u1b0c\u1b0f\3\2\2\2\u1b0d\u1b0b\3\2\2\2\u1b0d\u1b0e\3\2\2\2\u1b0e"+
		"\u1b12\3\2\2\2\u1b0f\u1b0d\3\2\2\2\u1b10\u1b11\7\u01ba\2\2\u1b11\u1b13"+
		"\5\u0230\u0119\2\u1b12\u1b10\3\2\2\2\u1b12\u1b13\3\2\2\2\u1b13\u1b15\3"+
		"\2\2\2\u1b14\u1b03\3\2\2\2\u1b14\u1b05\3\2\2\2\u1b15\u02ab\3\2\2\2\u1b16"+
		"\u1b18\5\u0276\u013c\2\u1b17\u1b16\3\2\2\2\u1b17\u1b18\3\2\2\2\u1b18\u1b19"+
		"\3\2\2\2\u1b19\u1b1a\7>\2\2\u1b1a\u1b1c\7\u0193\2\2\u1b1b\u1b1d\7\u01a4"+
		"\2\2\u1b1c\u1b1b\3\2\2\2\u1b1c\u1b1d\3\2\2\2\u1b1d\u1b1e\3\2\2\2\u1b1e"+
		"\u1b20\5\u026a\u0136\2\u1b1f\u1b21\7\u024f\2\2\u1b20\u1b1f\3\2\2\2\u1b20"+
		"\u1b21\3\2\2\2\u1b21\u1b26\3\2\2\2\u1b22\u1b24\7\u0176\2\2\u1b23\u1b22"+
		"\3\2\2\2\u1b23\u1b24\3\2\2\2\u1b24\u1b25\3\2\2\2\u1b25\u1b27\5\u0210\u0109"+
		"\2\u1b26\u1b23\3\2\2\2\u1b26\u1b27\3\2\2\2\u1b27\u1b31\3\2\2\2\u1b28\u1b29"+
		"\7\u01b7\2\2\u1b29\u1b2e\5\u0286\u0144\2\u1b2a\u1b2b\7\u0245\2\2\u1b2b"+
		"\u1b2d\5\u0286\u0144\2\u1b2c\u1b2a\3\2\2\2\u1b2d\u1b30\3\2\2\2\u1b2e\u1b2c"+
		"\3\2\2\2\u1b2e\u1b2f\3\2\2\2\u1b2f\u1b32\3\2\2\2\u1b30\u1b2e\3\2\2\2\u1b31"+
		"\u1b28\3\2\2\2\u1b31\u1b32\3\2\2\2\u1b32\u1b3a\3\2\2\2\u1b33\u1b38\7\u01ba"+
		"\2\2\u1b34\u1b39\5\u0230\u0119\2\u1b35\u1b36\7\63\2\2\u1b36\u1b37\7\u009e"+
		"\2\2\u1b37\u1b39\5\u0210\u0109\2\u1b38\u1b34\3\2\2\2\u1b38\u1b35\3\2\2"+
		"\2\u1b39\u1b3b\3\2\2\2\u1b3a\u1b33\3\2\2\2\u1b3a\u1b3b\3\2\2\2\u1b3b\u1b3e"+
		"\3\2\2\2\u1b3c\u1b3d\7\u01aa\2\2\u1b3d\u1b3f\5\u0280\u0141\2\u1b3e\u1b3c"+
		"\3\2\2\2\u1b3e\u1b3f\3\2\2\2\u1b3f\u02ad\3\2\2\2\u1b40\u1b42\5\u0276\u013c"+
		"\2\u1b41\u1b40\3\2\2\2\u1b41\u1b42\3\2\2\2\u1b42\u1b43\3\2\2\2\u1b43\u1b45"+
		"\7\u0112\2\2\u1b44\u1b46\7\u01a4\2\2\u1b45\u1b44\3\2\2\2\u1b45\u1b46\3"+
		"\2\2\2\u1b46\u1b47\3\2\2\2\u1b47\u1b49\5\u026a\u0136\2\u1b48\u1b4a\7\u024f"+
		"\2\2\u1b49\u1b48\3\2\2\2\u1b49\u1b4a\3\2\2\2\u1b4a\u1b4f\3\2\2\2\u1b4b"+
		"\u1b4d\7\u0176\2\2\u1b4c\u1b4b\3\2\2\2\u1b4c\u1b4d\3\2\2\2\u1b4d\u1b4e"+
		"\3\2\2\2\u1b4e\u1b50\5\u0210\u0109\2\u1b4f\u1b4c\3\2\2\2\u1b4f\u1b50\3"+
		"\2\2\2\u1b50\u1b51\3\2\2\2\u1b51\u1b52\7\u00e6\2\2\u1b52\u1b57\5\u02b0"+
		"\u0159\2\u1b53\u1b54\7\u0245\2\2\u1b54\u1b56\5\u02b0\u0159\2\u1b55\u1b53"+
		"\3\2\2\2\u1b56\u1b59\3\2\2\2\u1b57\u1b55\3\2\2\2\u1b57\u1b58\3\2\2\2\u1b58"+
		"\u1b63\3\2\2\2\u1b59\u1b57\3\2\2\2\u1b5a\u1b5b\7\u0193\2\2\u1b5b\u1b60"+
		"\5\u0286\u0144\2\u1b5c\u1b5d\7\u0245\2\2\u1b5d\u1b5f\5\u0286\u0144\2\u1b5e"+
		"\u1b5c\3\2\2\2\u1b5f\u1b62\3\2\2\2\u1b60\u1b5e\3\2\2\2\u1b60\u1b61\3\2"+
		"\2\2\u1b61\u1b64\3\2\2\2\u1b62\u1b60\3\2\2\2\u1b63\u1b5a\3\2\2\2\u1b63"+
		"\u1b64\3\2\2\2\u1b64\u1b6c\3\2\2\2\u1b65\u1b6a\7\u01ba\2\2\u1b66\u1b6b"+
		"\5\u0230\u0119\2\u1b67\u1b68\7\63\2\2\u1b68\u1b69\7\u009e\2\2\u1b69\u1b6b"+
		"\5\u0210\u0109\2\u1b6a\u1b66\3\2\2\2\u1b6a\u1b67\3\2\2\2\u1b6b\u1b6d\3"+
		"\2\2\2\u1b6c\u1b65\3\2\2\2\u1b6c\u1b6d\3\2\2\2\u1b6d\u1b70\3\2\2\2\u1b6e"+
		"\u1b6f\7\u01aa\2\2\u1b6f\u1b71\5\u0280\u0141\2\u1b70\u1b6e\3\2\2\2\u1b70"+
		"\u1b71\3\2\2\2\u1b71\u02af\3\2\2\2\u1b72\u1b73\5\u02a6\u0154\2\u1b73\u1b76"+
		"\7\u0242\2\2\u1b74\u1b77\5\u0230\u0119\2\u1b75\u1b77\7\u0187\2\2\u1b76"+
		"\u1b74\3\2\2\2\u1b76\u1b75\3\2\2\2\u1b77\u1b9a\3\2\2\2\u1b78\u1b79\7\u024b"+
		"\2\2\u1b79\u1b7e\5\u02a6\u0154\2\u1b7a\u1b7b\7\u0245\2\2\u1b7b\u1b7d\5"+
		"\u02a6\u0154\2\u1b7c\u1b7a\3\2\2\2\u1b7d\u1b80\3\2\2\2\u1b7e\u1b7c\3\2"+
		"\2\2\u1b7e\u1b7f\3\2\2\2\u1b7f\u1b81\3\2\2\2\u1b80\u1b7e\3\2\2\2\u1b81"+
		"\u1b82\7\u024c\2\2\u1b82\u1b84\7\u0242\2\2\u1b83\u1b85\7\u0144\2\2\u1b84"+
		"\u1b83\3\2\2\2\u1b84\u1b85\3\2\2\2\u1b85\u1b97\3\2\2\2\u1b86\u1b89\7\u024b"+
		"\2\2\u1b87\u1b8a\5\u0230\u0119\2\u1b88\u1b8a\7\u0187\2\2\u1b89\u1b87\3"+
		"\2\2\2\u1b89\u1b88\3\2\2\2\u1b8a\u1b92\3\2\2\2\u1b8b\u1b8e\7\u0245\2\2"+
		"\u1b8c\u1b8f\5\u0230\u0119\2\u1b8d\u1b8f\7\u0187\2\2\u1b8e\u1b8c\3\2\2"+
		"\2\u1b8e\u1b8d\3\2\2\2\u1b8f\u1b91\3\2\2\2\u1b90\u1b8b\3\2\2\2\u1b91\u1b94"+
		"\3\2\2\2\u1b92\u1b90\3\2\2\2\u1b92\u1b93\3\2\2\2\u1b93\u1b95\3\2\2\2\u1b94"+
		"\u1b92\3\2\2\2\u1b95\u1b98\7\u024c\2\2\u1b96\u1b98\5\u026e\u0138\2\u1b97"+
		"\u1b86\3\2\2\2\u1b97\u1b96\3\2\2\2\u1b98\u1b9a\3\2\2\2\u1b99\u1b72\3\2"+
		"\2\2\u1b99\u1b78\3\2\2\2\u1b9a\u02b1\3\2\2\2\u1b9b\u1b9c\7\u009a\2\2\u1b9c"+
		"\u1b9f\5\u0210\u0109\2\u1b9d\u1b9e\7\u0245\2\2\u1b9e\u1ba0\5\u0146\u00a4"+
		"\2\u1b9f\u1b9d\3\2\2\2\u1b9f\u1ba0\3\2\2\2\u1ba0\u02b3\3\2\2\2\u1ba1\u1ba3"+
		"\7\u0107\2\2\u1ba2\u1ba4\7\u01af\2\2\u1ba3\u1ba2\3\2\2\2\u1ba3\u1ba4\3"+
		"\2\2\2\u1ba4\u1ba5\3\2\2\2\u1ba5\u1baa\5\u0186\u00c4\2\u1ba6\u1ba7\7\u0245"+
		"\2\2\u1ba7\u1ba9\5\u0186\u00c4\2\u1ba8\u1ba6\3\2\2\2\u1ba9\u1bac\3\2\2"+
		"\2\u1baa\u1ba8\3\2\2\2\u1baa\u1bab\3\2\2\2\u1bab\u1baf\3\2\2\2\u1bac\u1baa"+
		"\3\2\2\2\u1bad\u1bae\tc\2\2\u1bae\u1bb0\7h\2\2\u1baf\u1bad\3\2\2\2\u1baf"+
		"\u1bb0\3\2\2\2\u1bb0\u1bb2\3\2\2\2\u1bb1\u1bb3\5\u01f8\u00fd\2\u1bb2\u1bb1"+
		"\3\2\2\2\u1bb2\u1bb3\3\2\2\2\u1bb3\u02b5\3\2\2\2\u1bb4\u1bb9\5\u0210\u0109"+
		"\2\u1bb5\u1bb6\7\u0245\2\2\u1bb6\u1bb8\5\u0210\u0109\2\u1bb7\u1bb5\3\2"+
		"\2\2\u1bb8\u1bbb\3\2\2\2\u1bb9\u1bb7\3\2\2\2\u1bb9\u1bba\3\2\2\2\u1bba"+
		"\u02b7\3\2\2\2\u1bbb\u1bb9\3\2\2\2\u1bbc\u1bc2\7\u018b\2\2\u1bbd\u1bc0"+
		"\7~\2\2\u1bbe\u1bc1\5\u0210\u0109\2\u1bbf\u1bc1\5\u0146\u00a4\2\u1bc0"+
		"\u1bbe\3\2\2\2\u1bc0\u1bbf\3\2\2\2\u1bc1\u1bc3\3\2\2\2\u1bc2\u1bbd\3\2"+
		"\2\2\u1bc2\u1bc3\3\2\2\2\u1bc3\u1bc4\3\2\2\2\u1bc4\u1bcd\5\u0146\u00a4"+
		"\2\u1bc5\u1bc6\7\u018b\2\2\u1bc6\u1bc7\5\u0146\u00a4\2\u1bc7\u1bca\7~"+
		"\2\2\u1bc8\u1bcb\5\u0210\u0109\2\u1bc9\u1bcb\5\u0146\u00a4\2\u1bca\u1bc8"+
		"\3\2\2\2\u1bca\u1bc9\3\2\2\2\u1bcb\u1bcd\3\2\2\2\u1bcc\u1bbc\3\2\2\2\u1bcc"+
		"\u1bc5\3\2\2\2\u1bcd\u02b9\3\2\2\2\u1bce\u1bcf\7\u025e\2\2\u1bcf\u1bd2"+
		"\5\u0210\u0109\2\u1bd0\u1bd3\5\u0210\u0109\2\u1bd1\u1bd3\5\u0240\u0121"+
		"\2\u1bd2\u1bd0\3\2\2\2\u1bd2\u1bd1\3\2\2\2\u1bd3\u02bb\3\2\2\2\u1bd4\u1bd6"+
		"\5\u02be\u0160\2\u1bd5\u1bd4\3\2\2\2\u1bd5\u1bd6\3\2\2\2\u1bd6\u1bd8\3"+
		"\2\2\2\u1bd7\u1bd9\5\u02c0\u0161\2\u1bd8\u1bd7\3\2\2\2\u1bd8\u1bd9\3\2"+
		"\2\2\u1bd9\u1bda\3\2\2\2\u1bda\u1bdb\7\25\2\2\u1bdb\u1bdd\5\u02cc\u0167"+
		"\2\u1bdc\u1bde\5\u02ca\u0166\2\u1bdd\u1bdc\3\2\2\2\u1bdd\u1bde\3\2\2\2"+
		"\u1bde\u1bdf\3\2\2\2\u1bdf\u1be1\7\u018d\2\2\u1be0\u1be2\5\u0210\u0109"+
		"\2\u1be1\u1be0\3\2\2\2\u1be1\u1be2\3\2\2\2\u1be2\u02bd\3\2\2\2\u1be3\u1be4"+
		"\7\u025b\2\2\u1be4\u1be5\5\u0210\u0109\2\u1be5\u1be6\7\u025c\2\2\u1be6"+
		"\u02bf\3\2\2\2\u1be7\u1beb\7:\2\2\u1be8\u1bea\5\u02c2\u0162\2\u1be9\u1be8"+
		"\3\2\2\2\u1bea\u1bed\3\2\2\2\u1beb\u1be9\3\2\2\2\u1beb\u1bec\3\2\2\2\u1bec"+
		"\u02c1\3\2\2\2\u1bed\u1beb\3\2\2\2\u1bee\u1bf0\7:\2\2\u1bef\u1bee\3\2"+
		"\2\2\u1bf0\u1bf3\3\2\2\2\u1bf1\u1bef\3\2\2\2\u1bf1\u1bf2\3\2\2\2\u1bf2"+
		"\u1bf4\3\2\2\2\u1bf3\u1bf1\3\2\2\2\u1bf4\u1bf5\5\u0210\u0109\2\u1bf5\u1bf6"+
		"\5\u02c4\u0163\2\u1bf6\u1bf7\7\u0244\2\2\u1bf7\u02c3\3\2\2\2\u1bf8\u1bfa"+
		"\7\u0222\2\2\u1bf9\u1bf8\3\2\2\2\u1bf9\u1bfa\3\2\2\2\u1bfa\u1bfb\3\2\2"+
		"\2\u1bfb\u1bfd\5\u02c8\u0165\2\u1bfc\u1bfe\5\u01fa\u00fe\2\u1bfd\u1bfc"+
		"\3\2\2\2\u1bfd\u1bfe\3\2\2\2\u1bfe\u1c01\3\2\2\2\u1bff\u1c00\7\u01a0\2"+
		"\2\u1c00\u1c02\7\u01a1\2\2\u1c01\u1bff\3\2\2\2\u1c01\u1c02\3\2\2\2\u1c02"+
		"\u1c05\3\2\2\2\u1c03\u1c04\td\2\2\u1c04\u1c06\5\u0230\u0119\2\u1c05\u1c03"+
		"\3\2\2\2\u1c05\u1c06\3\2\2\2\u1c06\u1c1d\3\2\2\2\u1c07\u1c08\7\u0220\2"+
		"\2\u1c08\u1c0b\7\u0191\2\2\u1c09\u1c0c\5\u0210\u0109\2\u1c0a\u1c0c\7\u026a"+
		"\2\2\u1c0b\u1c09\3\2\2\2\u1c0b\u1c0a\3\2\2\2\u1c0c\u1c1d\3\2\2\2\u1c0d"+
		"\u1c0f\7\u0098\2\2\u1c0e\u1c0d\3\2\2\2\u1c0e\u1c0f\3\2\2\2\u1c0f\u1c10"+
		"\3\2\2\2\u1c10\u1c12\7\u00dd\2\2\u1c11\u1c0e\3\2\2\2\u1c11\u1c12\3\2\2"+
		"\2\u1c12\u1c13\3\2\2\2\u1c13\u1c18\7\64\2\2\u1c14\u1c15\7\u024b\2\2\u1c15"+
		"\u1c16\5\u02c6\u0164\2\u1c16\u1c17\7\u024c\2\2\u1c17\u1c19\3\2\2\2\u1c18"+
		"\u1c14\3\2\2\2\u1c18\u1c19\3\2\2\2\u1c19\u1c1a\3\2\2\2\u1c1a\u1c1b\te"+
		"\2\2\u1c1b\u1c1d\5\u0270\u0139\2\u1c1c\u1bf9\3\2\2\2\u1c1c\u1c07\3\2\2"+
		"\2\u1c1c\u1c11\3\2\2\2\u1c1d\u02c5\3\2\2\2\u1c1e\u1c1f\5\u0210\u0109\2"+
		"\u1c1f\u1c26\5\u0224\u0113\2\u1c20\u1c21\7\u0245\2\2\u1c21\u1c22\5\u0210"+
		"\u0109\2\u1c22\u1c23\5\u0224\u0113\2\u1c23\u1c25\3\2\2\2\u1c24\u1c20\3"+
		"\2\2\2\u1c25\u1c28\3\2\2\2\u1c26\u1c24\3\2\2\2\u1c26\u1c27\3\2\2\2\u1c27"+
		"\u02c7\3\2\2\2\u1c28\u1c26\3\2\2\2\u1c29\u1c33\5\u0224\u0113\2\u1c2a\u1c2b"+
		"\5\u026a\u0136\2\u1c2b\u1c2c\7\u0251\2\2\u1c2c\u1c2d\7\u0109\2\2\u1c2d"+
		"\u1c33\3\2\2\2\u1c2e\u1c2f\5\u0220\u0111\2\u1c2f\u1c30\7\u0251\2\2\u1c30"+
		"\u1c31\7\u023b\2\2\u1c31\u1c33\3\2\2\2\u1c32\u1c29\3\2\2\2\u1c32\u1c2a"+
		"\3\2\2\2\u1c32\u1c2e\3\2\2\2\u1c33\u02c9\3\2\2\2\u1c34\u1c3a\7\u022b\2"+
		"\2\u1c35\u1c36\7\u01b9\2\2\u1c36\u1c37\5\u0230\u0119\2\u1c37\u1c38\7\u01b0"+
		"\2\2\u1c38\u1c39\5\u02cc\u0167\2\u1c39\u1c3b\3\2\2\2\u1c3a\u1c35\3\2\2"+
		"\2\u1c3b\u1c3c\3\2\2\2\u1c3c\u1c3a\3\2\2\2\u1c3c\u1c3d\3\2\2\2\u1c3d\u02cb"+
		"\3\2\2\2\u1c3e\u1c3f\5\u02ce\u0168\2\u1c3f\u1c40\7\u0244\2\2\u1c40\u1c42"+
		"\3\2\2\2\u1c41\u1c3e\3\2\2\2\u1c42\u1c45\3\2\2\2\u1c43\u1c41\3\2\2\2\u1c43"+
		"\u1c44\3\2\2\2\u1c44\u02cd\3\2\2\2\u1c45\u1c43\3\2\2\2\u1c46\u1c50\5\u02bc"+
		"\u015f\2\u1c47\u1c50\5\u02d0\u0169\2\u1c48\u1c50\5\u02dc\u016f\2\u1c49"+
		"\u1c50\5\u02e2\u0172\2\u1c4a\u1c50\5\u02de\u0170\2\u1c4b\u1c50\5\u02e4"+
		"\u0173\2\u1c4c\u1c50\5<\37\2\u1c4d\u1c50\5\u02f8\u017d\2\u1c4e\u1c50\5"+
		"\36\20\2\u1c4f\u1c46\3\2\2\2\u1c4f\u1c47\3\2\2\2\u1c4f\u1c48\3\2\2\2\u1c4f"+
		"\u1c49\3\2\2\2\u1c4f\u1c4a\3\2\2\2\u1c4f\u1c4b\3\2\2\2\u1c4f\u1c4c\3\2"+
		"\2\2\u1c4f\u1c4d\3\2\2\2\u1c4f\u1c4e\3\2\2\2\u1c50\u02cf\3\2\2\2\u1c51"+
		"\u1c63\5\u02d8\u016d\2\u1c52\u1c53\7\u0235\2\2\u1c53\u1c63\5\u02d6\u016c"+
		"\2\u1c54\u1c56\7\u022d\2\2\u1c55\u1c57\tf\2\2\u1c56\u1c55\3\2\2\2\u1c56"+
		"\u1c57\3\2\2\2\u1c57\u1c58\3\2\2\2\u1c58\u1c59\7\u0226\2\2\u1c59\u1c5e"+
		"\5\u02d4\u016b\2\u1c5a\u1c5b\7\u0245\2\2\u1c5b\u1c5d\5\u02d4\u016b\2\u1c5c"+
		"\u1c5a\3\2\2\2\u1c5d\u1c60\3\2\2\2\u1c5e\u1c5c\3\2\2\2\u1c5e\u1c5f\3\2"+
		"\2\2\u1c5f\u1c63\3\2\2\2\u1c60\u1c5e\3\2\2\2\u1c61\u1c63\7\u01a1\2\2\u1c62"+
		"\u1c51\3\2\2\2\u1c62\u1c52\3\2\2\2\u1c62\u1c54\3\2\2\2\u1c62\u1c61\3\2"+
		"\2\2\u1c63\u02d1\3\2\2\2\u1c64\u1c67\5\u026a\u0136\2\u1c65\u1c67\7\u026a"+
		"\2\2\u1c66\u1c64\3\2\2\2\u1c66\u1c65\3\2\2\2\u1c67\u1c6e\3\2\2\2\u1c68"+
		"\u1c69\7\u0257\2\2\u1c69\u1c6a\5\u0230\u0119\2\u1c6a\u1c6b\7\u0258\2\2"+
		"\u1c6b\u1c6d\3\2\2\2\u1c6c\u1c68\3\2\2\2\u1c6d\u1c70\3\2\2\2\u1c6e\u1c6c"+
		"\3\2\2\2\u1c6e\u1c6f\3\2\2\2\u1c6f\u02d3\3\2\2\2\u1c70\u1c6e\3\2\2\2\u1c71"+
		"\u1c72\5\u02d2\u016a\2\u1c72\u1c73\tg\2\2\u1c73\u1c74\5\u0210\u0109\2"+
		"\u1c74\u02d5\3\2\2\2\u1c75\u1c82\5\u026c\u0137\2\u1c76\u1c77\7\u01a3\2"+
		"\2\u1c77\u1c78\7\u024b\2\2\u1c78\u1c7d\5\u0230\u0119\2\u1c79\u1c7a\7\u0245"+
		"\2\2\u1c7a\u1c7c\5\u0230\u0119\2\u1c7b\u1c79\3\2\2\2\u1c7c\u1c7f\3\2\2"+
		"\2\u1c7d\u1c7b\3\2\2\2\u1c7d\u1c7e\3\2\2\2\u1c7e\u1c80\3\2\2\2\u1c7f\u1c7d"+
		"\3\2\2\2\u1c80\u1c81\7\u024c\2\2\u1c81\u1c83\3\2\2\2\u1c82\u1c76\3\2\2"+
		"\2\u1c82\u1c83\3\2\2\2\u1c83\u1c85\3\2\2\2\u1c84\u1c75\3\2\2\2\u1c84\u1c85"+
		"\3\2\2\2\u1c85\u1c86\3\2\2\2\u1c86\u1c90\5\u0280\u0141\2\u1c87\u1c88\7"+
		"\u0193\2\2\u1c88\u1c8d\5\u0286\u0144\2\u1c89\u1c8a\7\u0245\2\2\u1c8a\u1c8c"+
		"\5\u0286\u0144\2\u1c8b\u1c89\3\2\2\2\u1c8c\u1c8f\3\2\2\2\u1c8d\u1c8b\3"+
		"\2\2\2\u1c8d\u1c8e\3\2\2\2\u1c8e\u1c91\3\2\2\2\u1c8f\u1c8d\3\2\2\2\u1c90"+
		"\u1c87\3\2\2\2\u1c90\u1c91\3\2\2\2\u1c91\u1c94\3\2\2\2\u1c92\u1c93\7\u01ba"+
		"\2\2\u1c93\u1c95\5\u0230\u0119\2\u1c94\u1c92\3\2\2\2\u1c94\u1c95\3\2\2"+
		"\2\u1c95\u1c97\3\2\2\2\u1c96\u1c98\5\u028e\u0148\2\u1c97\u1c96\3\2\2\2"+
		"\u1c97\u1c98\3\2\2\2\u1c98\u1c9b\3\2\2\2\u1c99\u1c9a\7\u0196\2\2\u1c9a"+
		"\u1c9c\5\u0230\u0119\2\u1c9b\u1c99\3\2\2\2\u1c9b\u1c9c\3\2\2\2\u1c9c\u1cab"+
		"\3\2\2\2\u1c9d\u1c9e\7\u01bb\2\2\u1c9e\u1c9f\5\u0210\u0109\2\u1c9f\u1ca0"+
		"\7\u0176\2\2\u1ca0\u1ca8\5\u025e\u0130\2\u1ca1\u1ca2\7\u0245\2\2\u1ca2"+
		"\u1ca3\5\u0210\u0109\2\u1ca3\u1ca4\7\u0176\2\2\u1ca4\u1ca5\5\u025e\u0130"+
		"\2\u1ca5\u1ca7\3\2\2\2\u1ca6\u1ca1\3\2\2\2\u1ca7\u1caa\3\2\2\2\u1ca8\u1ca6"+
		"\3\2\2\2\u1ca8\u1ca9\3\2\2\2\u1ca9\u1cac\3\2\2\2\u1caa\u1ca8\3\2\2\2\u1cab"+
		"\u1c9d\3\2\2\2\u1cab\u1cac\3\2\2\2\u1cac\u1cb2\3\2\2\2\u1cad\u1caf\t^"+
		"\2\2\u1cae\u1cb0\5\u026c\u0137\2\u1caf\u1cae\3\2\2\2\u1caf\u1cb0\3\2\2"+
		"\2\u1cb0\u1cb1\3\2\2\2\u1cb1\u1cb3\5\u027a\u013e\2\u1cb2\u1cad\3\2\2\2"+
		"\u1cb2\u1cb3\3\2\2\2\u1cb3\u1cb7\3\2\2\2\u1cb4\u1cb6\5\u0272\u013a\2\u1cb5"+
		"\u1cb4\3\2\2\2\u1cb6\u1cb9\3\2\2\2\u1cb7\u1cb5\3\2\2\2\u1cb7\u1cb8\3\2"+
		"\2\2\u1cb8\u02d7\3\2\2\2\u1cb9\u1cb7\3\2\2\2\u1cba\u1cbb\5\u02d2\u016a"+
		"\2\u1cbb\u1cbe\tg\2\2\u1cbc\u1cbf\5\u0274\u013b\2\u1cbd\u1cbf\5\u02d6"+
		"\u016c\2\u1cbe\u1cbc\3\2\2\2\u1cbe\u1cbd\3\2\2\2\u1cbf\u02d9\3\2\2\2\u1cc0"+
		"\u1cc1\7T\2\2\u1cc1\u1cc3\5\u0230\u0119\2\u1cc2\u1cc4\5\u02f2\u017a\2"+
		"\u1cc3\u1cc2\3\2\2\2\u1cc3\u1cc4\3\2\2\2\u1cc4\u02db\3\2\2\2\u1cc5\u1ccc"+
		"\5\u02ec\u0177\2\u1cc6\u1cc7\7\30\2\2\u1cc7\u1ccc\5\u0246\u0124\2\u1cc8"+
		"\u1ccc\5\u02f4\u017b\2\u1cc9\u1ccc\5\u02f6\u017c\2\u1cca\u1ccc\5\u02ee"+
		"\u0178\2\u1ccb\u1cc5\3\2\2\2\u1ccb\u1cc6\3\2\2\2\u1ccb\u1cc8\3\2\2\2\u1ccb"+
		"\u1cc9\3\2\2\2\u1ccb\u1cca\3\2\2\2\u1ccc\u02dd\3\2\2\2\u1ccd\u1cce\7\u0234"+
		"\2\2\u1cce\u1cd3\5\u02d2\u016a\2\u1ccf\u1cd1\7\u0098\2\2\u1cd0\u1ccf\3"+
		"\2\2\2\u1cd0\u1cd1\3\2\2\2\u1cd1\u1cd2\3\2\2\2\u1cd2\u1cd4\7\u00dd\2\2"+
		"\u1cd3\u1cd0\3\2\2\2\u1cd3\u1cd4\3\2\2\2\u1cd4\u1cd5\3\2\2\2\u1cd5\u1cd6"+
		"\7\u0191\2\2\u1cd6\u1cd7\5\u02f8\u017d\2\u1cd7\u1cfa\3\2\2\2\u1cd8\u1cd9"+
		"\7\u0234\2\2\u1cd9\u1ce5\5\u02d2\u016a\2\u1cda\u1cdb\7\u024b\2\2\u1cdb"+
		"\u1ce0\5\u02e0\u0171\2\u1cdc\u1cdd\7\u0245\2\2\u1cdd\u1cdf\5\u02e0\u0171"+
		"\2\u1cde\u1cdc\3\2\2\2\u1cdf\u1ce2\3\2\2\2\u1ce0\u1cde\3\2\2\2\u1ce0\u1ce1"+
		"\3\2\2\2\u1ce1\u1ce3\3\2\2\2\u1ce2\u1ce0\3\2\2\2\u1ce3\u1ce4\7\u024c\2"+
		"\2\u1ce4\u1ce6\3\2\2\2\u1ce5\u1cda\3\2\2\2\u1ce5\u1ce6\3\2\2\2\u1ce6\u1cfa"+
		"\3\2\2\2\u1ce7\u1ce9\7\u0190\2\2\u1ce8\u1cea\5:\36\2\u1ce9\u1ce8\3\2\2"+
		"\2\u1ce9\u1cea\3\2\2\2\u1cea\u1cec\3\2\2\2\u1ceb\u1ced\t\7\2\2\u1cec\u1ceb"+
		"\3\2\2\2\u1cec\u1ced\3\2\2\2\u1ced\u1cee\3\2\2\2\u1cee\u1cfa\5\u02d2\u016a"+
		"\2\u1cef\u1cf1\7\u0093\2\2\u1cf0\u1cf2\5:\36\2\u1cf1\u1cf0\3\2\2\2\u1cf1"+
		"\u1cf2\3\2\2\2\u1cf2\u1cf4\3\2\2\2\u1cf3\u1cf5\t\7\2\2\u1cf4\u1cf3\3\2"+
		"\2\2\u1cf4\u1cf5\3\2\2\2\u1cf5\u1cf6\3\2\2\2\u1cf6\u1cfa\5\u02d2\u016a"+
		"\2\u1cf7\u1cf8\7!\2\2\u1cf8\u1cfa\5\u02d2\u016a\2\u1cf9\u1ccd\3\2\2\2"+
		"\u1cf9\u1cd8\3\2\2\2\u1cf9\u1ce7\3\2\2\2\u1cf9\u1cef\3\2\2\2\u1cf9\u1cf7"+
		"\3\2\2\2\u1cfa\u02df\3\2\2\2\u1cfb\u1cfc\5\u0210\u0109\2\u1cfc\u1cfd\7"+
		"\u025a\2\2\u1cfd\u1cff\3\2\2\2\u1cfe\u1cfb\3\2\2\2\u1cfe\u1cff\3\2\2\2"+
		"\u1cff\u1d00\3\2\2\2\u1d00\u1d01\5\u0230\u0119\2\u1d01\u02e1\3\2\2\2\u1d02"+
		"\u1d08\th\2\2\u1d03\u1d05\7\u0173\2\2\u1d04\u1d06\7\u0098\2\2\u1d05\u1d04"+
		"\3\2\2\2\u1d05\u1d06\3\2\2\2\u1d06\u1d07\3\2\2\2\u1d07\u1d09\7\35\2\2"+
		"\u1d08\u1d03\3\2\2\2\u1d08\u1d09\3\2\2\2\u1d09\u1d0c\3\2\2\2\u1d0a\u1d0c"+
		"\5\30\r\2\u1d0b\u1d02\3\2\2\2\u1d0b\u1d0a\3\2\2\2\u1d0c\u02e3\3\2\2\2"+
		"\u1d0d\u1d0f\7\u0237\2\2\u1d0e\u1d10\5\u02e6\u0174\2\u1d0f\u1d0e\3\2\2"+
		"\2\u1d0f\u1d10\3\2\2\2\u1d10\u1d19\3\2\2\2\u1d11\u1d16\5\u0146\u00a4\2"+
		"\u1d12\u1d13\7\u0245\2\2\u1d13\u1d15\5\u0230\u0119\2\u1d14\u1d12\3\2\2"+
		"\2\u1d15\u1d18\3\2\2\2\u1d16\u1d14\3\2\2\2\u1d16\u1d17\3\2\2\2\u1d17\u1d1a"+
		"\3\2\2\2\u1d18\u1d16\3\2\2\2\u1d19\u1d11\3\2\2\2\u1d19\u1d1a\3\2\2\2\u1d1a"+
		"\u1d1c\3\2\2\2\u1d1b\u1d1d\5\u02e8\u0175\2\u1d1c\u1d1b\3\2\2\2\u1d1c\u1d1d"+
		"\3\2\2\2\u1d1d\u1d36\3\2\2\2\u1d1e\u1d20\7\u0237\2\2\u1d1f\u1d21\5\u02e6"+
		"\u0174\2\u1d20\u1d1f\3\2\2\2\u1d20\u1d21\3\2\2\2\u1d21\u1d22\3\2\2\2\u1d22"+
		"\u1d24\5\u0210\u0109\2\u1d23\u1d25\5\u02e8\u0175\2\u1d24\u1d23\3\2\2\2"+
		"\u1d24\u1d25\3\2\2\2\u1d25\u1d36\3\2\2\2\u1d26\u1d28\7\u0237\2\2\u1d27"+
		"\u1d29\5\u02e6\u0174\2\u1d28\u1d27\3\2\2\2\u1d28\u1d29\3\2\2\2\u1d29\u1d2a"+
		"\3\2\2\2\u1d2a\u1d2b\7\u023d\2\2\u1d2b\u1d2d\5\u0146\u00a4\2\u1d2c\u1d2e"+
		"\5\u02e8\u0175\2\u1d2d\u1d2c\3\2\2\2\u1d2d\u1d2e\3\2\2\2\u1d2e\u1d36\3"+
		"\2\2\2\u1d2f\u1d30\7\u0221\2\2\u1d30\u1d33\5\u0230\u0119\2\u1d31\u1d32"+
		"\7\u0245\2\2\u1d32\u1d34\5\u0230\u0119\2\u1d33\u1d31\3\2\2\2\u1d33\u1d34"+
		"\3\2\2\2\u1d34\u1d36\3\2\2\2\u1d35\u1d0d\3\2\2\2\u1d35\u1d1e\3\2\2\2\u1d35"+
		"\u1d26\3\2\2\2\u1d35\u1d2f\3\2\2\2\u1d36\u02e5\3\2\2\2\u1d37\u1d38\ti"+
		"\2\2\u1d38\u02e7\3\2\2\2\u1d39\u1d3a\7\u01b7\2\2\u1d3a\u1d3b\5\u02ea\u0176"+
		"\2\u1d3b\u1d3c\7\u0242\2\2\u1d3c\u1d44\5\u0230\u0119\2\u1d3d\u1d3e\7\u0245"+
		"\2\2\u1d3e\u1d3f\5\u02ea\u0176\2\u1d3f\u1d40\7\u0242\2\2\u1d40\u1d41\5"+
		"\u0230\u0119\2\u1d41\u1d43\3\2\2\2\u1d42\u1d3d\3\2\2\2\u1d43\u1d46\3\2"+
		"\2\2\u1d44\u1d42\3\2\2\2\u1d44\u1d45\3\2\2\2\u1d45\u02e9\3\2\2\2\u1d46"+
		"\u1d44\3\2\2\2\u1d47\u1d48\tj\2\2\u1d48\u02eb\3\2\2\2\u1d49\u1d4b\7\u0239"+
		"\2\2\u1d4a\u1d4c\5\u02d6\u016c\2\u1d4b\u1d4a\3\2\2\2\u1d4b\u1d4c\3\2\2"+
		"\2\u1d4c\u1d54\3\2\2\2\u1d4d\u1d4e\7\u0239\2\2\u1d4e\u1d4f\7\u0097\2\2"+
		"\u1d4f\u1d54\5\u0230\u0119\2\u1d50\u1d51\7\u0239\2\2\u1d51\u1d52\7\u0236"+
		"\2\2\u1d52\u1d54\5\u02f8\u017d\2\u1d53\u1d49\3\2\2\2\u1d53\u1d4d\3\2\2"+
		"\2\u1d53\u1d50\3\2\2\2\u1d54\u02ed\3\2\2\2\u1d55\u1d57\5\u02be\u0160\2"+
		"\u1d56\u1d55\3\2\2\2\u1d56\u1d57\3\2\2\2\u1d57\u1d59\3\2\2\2\u1d58\u1d5a"+
		"\5\u02f0\u0179\2\u1d59\u1d58\3\2\2\2\u1d59\u1d5a\3\2\2\2\u1d5a\u1d5b\3"+
		"\2\2\2\u1d5b\u1d5c\7\u0231\2\2\u1d5c\u1d5d\5\u02cc\u0167\2\u1d5d\u1d5e"+
		"\7\u018d\2\2\u1d5e\u1d60\7\u0231\2\2\u1d5f\u1d61\5\u0210\u0109\2\u1d60"+
		"\u1d5f\3\2\2\2\u1d60\u1d61\3\2\2\2\u1d61\u1d6b\3\2\2\2\u1d62\u1d64\tk"+
		"\2\2\u1d63\u1d65\5\u0210\u0109\2\u1d64\u1d63\3\2\2\2\u1d64\u1d65\3\2\2"+
		"\2\u1d65\u1d68\3\2\2\2\u1d66\u1d67\7\u01b9\2\2\u1d67\u1d69\5\u0230\u0119"+
		"\2\u1d68\u1d66\3\2\2\2\u1d68\u1d69\3\2\2\2\u1d69\u1d6b\3\2\2\2\u1d6a\u1d56"+
		"\3\2\2\2\u1d6a\u1d62\3\2\2\2\u1d6b\u02ef\3\2\2\2\u1d6c\u1d6d\7\u0240\2"+
		"\2\u1d6d\u1d9c\5\u0230\u0119\2\u1d6e\u1d6f\7\u0191\2\2\u1d6f\u1d70\5\u0210"+
		"\u0109\2\u1d70\u1d72\7\u0197\2\2\u1d71\u1d73\7\u023a\2\2\u1d72\u1d71\3"+
		"\2\2\2\u1d72\u1d73\3\2\2\2\u1d73\u1d74\3\2\2\2\u1d74\u1d75\5\u0230\u0119"+
		"\2\u1d75\u1d76\7\u025d\2\2\u1d76\u1d79\5\u0230\u0119\2\u1d77\u1d78\7\26"+
		"\2\2\u1d78\u1d7a\5\u0230\u0119\2\u1d79\u1d77\3\2\2\2\u1d79\u1d7a\3\2\2"+
		"\2\u1d7a\u1d9c\3\2\2\2\u1d7b\u1d7c\7\u0191\2\2\u1d7c\u1d7d\5\u02b6\u015c"+
		"\2\u1d7d\u1d7e\7\u0197\2\2\u1d7e\u1d7f\5\u02f8\u017d\2\u1d7f\u1d9c\3\2"+
		"\2\2\u1d80\u1d81\7\u0191\2\2\u1d81\u1d82\5\u0210\u0109\2\u1d82\u1d83\7"+
		"\u0197\2\2\u1d83\u1d8f\5\u0210\u0109\2\u1d84\u1d85\7\u024b\2\2\u1d85\u1d8a"+
		"\5\u02e0\u0171\2\u1d86\u1d87\7\u0245\2\2\u1d87\u1d89\5\u02e0\u0171\2\u1d88"+
		"\u1d86\3\2\2\2\u1d89\u1d8c\3\2\2\2\u1d8a\u1d88\3\2\2\2\u1d8a\u1d8b\3\2"+
		"\2\2\u1d8b\u1d8d\3\2\2\2\u1d8c\u1d8a\3\2\2\2\u1d8d\u1d8e\7\u024c\2\2\u1d8e"+
		"\u1d90\3\2\2\2\u1d8f\u1d84\3\2\2\2\u1d8f\u1d90\3\2\2\2\u1d90\u1d9c\3\2"+
		"\2\2\u1d91\u1d92\7\u022c\2\2\u1d92\u1d95\5\u02b6\u015c\2\u1d93\u1d94\7"+
		"\u023c\2\2\u1d94\u1d96\7\u0268\2\2\u1d95\u1d93\3\2\2\2\u1d95\u1d96\3\2"+
		"\2\2\u1d96\u1d97\3\2\2\2\u1d97\u1d98\7\u0197\2\2\u1d98\u1d99\7\u0175\2"+
		"\2\u1d99\u1d9a\5\u0230\u0119\2\u1d9a\u1d9c\3\2\2\2\u1d9b\u1d6c\3\2\2\2"+
		"\u1d9b\u1d6e\3\2\2\2\u1d9b\u1d7b\3\2\2\2\u1d9b\u1d80\3\2\2\2\u1d9b\u1d91"+
		"\3\2\2\2\u1d9c\u02f1\3\2\2\2\u1d9d\u1d9e\7\u01b7\2\2\u1d9e\u1da3\5\u0230"+
		"\u0119\2\u1d9f\u1da0\7\u0245\2\2\u1da0\u1da2\5\u0230\u0119\2\u1da1\u1d9f"+
		"\3\2\2\2\u1da2\u1da5\3\2\2\2\u1da3\u1da1\3\2\2\2\u1da3\u1da4\3\2\2\2\u1da4"+
		"\u02f3\3\2\2\2\u1da5\u1da3\3\2\2\2\u1da6\u1da7\7i\2\2\u1da7\u1da8\5\u0230"+
		"\u0119\2\u1da8\u1da9\7\u01b0\2\2\u1da9\u1db1\5\u02cc\u0167\2\u1daa\u1dab"+
		"\tl\2\2\u1dab\u1dac\5\u0230\u0119\2\u1dac\u1dad\7\u01b0\2\2\u1dad\u1dae"+
		"\5\u02cc\u0167\2\u1dae\u1db0\3\2\2\2\u1daf\u1daa\3\2\2\2\u1db0\u1db3\3"+
		"\2\2\2\u1db1\u1daf\3\2\2\2\u1db1\u1db2\3\2\2\2\u1db2\u1db6\3\2\2\2\u1db3"+
		"\u1db1\3\2\2\2\u1db4\u1db5\7\u018c\2\2\u1db5\u1db7\5\u02cc\u0167\2\u1db6"+
		"\u1db4\3\2\2\2\u1db6\u1db7\3\2\2\2\u1db7\u1db8\3\2\2\2\u1db8\u1db9\7\u018d"+
		"\2\2\u1db9\u1dba\7i\2\2\u1dba\u02f5\3\2\2\2\u1dbb\u1dbd\7\u017a\2\2\u1dbc"+
		"\u1dbe\5\u0230\u0119\2\u1dbd\u1dbc\3\2\2\2\u1dbd\u1dbe\3\2\2\2\u1dbe\u1dcb"+
		"\3\2\2\2\u1dbf\u1dc0\7\u01b9\2\2\u1dc0\u1dc5\5\u0230\u0119\2\u1dc1\u1dc2"+
		"\7\u0245\2\2\u1dc2\u1dc4\5\u0230\u0119\2\u1dc3\u1dc1\3\2\2\2\u1dc4\u1dc7"+
		"\3\2\2\2\u1dc5\u1dc3\3\2\2\2\u1dc5\u1dc6\3\2\2\2\u1dc6\u1dc8\3\2\2\2\u1dc7"+
		"\u1dc5\3\2\2\2\u1dc8\u1dc9\7\u01b0\2\2\u1dc9\u1dca\5\u02cc\u0167\2\u1dca"+
		"\u1dcc\3\2\2\2\u1dcb\u1dbf\3\2\2\2\u1dcc\u1dcd\3\2\2\2\u1dcd\u1dcb\3\2"+
		"\2\2\u1dcd\u1dce\3\2\2\2\u1dce\u1dd1\3\2\2\2\u1dcf\u1dd0\7\u018c\2\2\u1dd0"+
		"\u1dd2\5\u02cc\u0167\2\u1dd1\u1dcf\3\2\2\2\u1dd1\u1dd2\3\2\2\2\u1dd2\u1dd3"+
		"\3\2\2\2\u1dd3\u1dd4\7\u018d\2\2\u1dd4\u1dd5\7\u017a\2\2\u1dd5\u02f7\3"+
		"\2\2\2\u1dd6\u1ddb\5\20\t\2\u1dd7\u1ddb\5\u02da\u016e\2\u1dd8\u1ddb\5"+
		"(\25\2\u1dd9\u1ddb\5 \21\2\u1dda\u1dd6\3\2\2\2\u1dda\u1dd7\3\2\2\2\u1dda"+
		"\u1dd8\3\2\2\2\u1dda\u1dd9\3\2\2\2\u1ddb\u02f9\3\2\2\2\u1ddc\u1deb\7\u0261"+
		"\2\2\u1ddd\u1dde\tm\2\2\u1dde\u1de0\7\u0266\2\2\u1ddf\u1ddd\3\2\2\2\u1de0"+
		"\u1de1\3\2\2\2\u1de1\u1ddf\3\2\2\2\u1de1\u1de2\3\2\2\2\u1de2\u1de6\3\2"+
		"\2\2\u1de3\u1de5\7\u0244\2\2\u1de4\u1de3\3\2\2\2\u1de5\u1de8\3\2\2\2\u1de6"+
		"\u1de4\3\2\2\2\u1de6\u1de7\3\2\2\2\u1de7\u1dea\3\2\2\2\u1de8\u1de6\3\2"+
		"\2\2\u1de9\u1ddf\3\2\2\2\u1dea\u1ded\3\2\2\2\u1deb\u1de9\3\2\2\2\u1deb"+
		"\u1dec\3\2\2\2\u1dec\u02fb\3\2\2\2\u1ded\u1deb\3\2\2\2\u0413\u02fd\u0302"+
		"\u030a\u030d\u030f\u0311\u031a\u0324\u032a\u032e\u0333\u033a\u0342\u0348"+
		"\u034c\u0352\u0354\u035b\u035e\u0362\u0366\u0369\u036f\u0375\u0377\u037f"+
		"\u0383\u0387\u0392\u0399\u039c\u03a0\u03a7\u03ae\u03b1\u03bc\u03bf\u03c5"+
		"\u03c9\u03cc\u03d2\u03dc\u03e4\u03ed\u03f3\u03f6\u03fa\u0403\u0405\u040c"+
		"\u0410\u0416\u041a\u0421\u0429\u042f\u0434\u0437\u0441\u0446\u0453\u045c"+
		"\u0460\u0463\u046b\u0470\u047a\u047c\u0486\u048b\u0490\u0493\u0496\u0499"+
		"\u049e\u04a7\u04b2\u04b6\u04ba\u04bf\u04c6\u04d0\u04d5\u04dd\u04e3\u04e6"+
		"\u04e9\u04ec\u04ee\u04f2\u04f6\u04ff\u0505\u0509\u050b\u0510\u0539\u0540"+
		"\u0563\u0571\u057a\u0580\u0588\u058c\u0593\u0597\u0599\u059b\u059e\u05a6"+
		"\u05ac\u05b7\u05b9\u05bd\u05de\u05f1\u0619\u0620\u0626\u0629\u062d\u0630"+
		"\u0634\u063b\u0640\u0656\u065a\u065d\u0662\u0665\u0669\u066d\u0676\u067f"+
		"\u0691\u06bb\u06c1\u06c4\u06c6\u06ca\u06cf\u06d3\u06db\u06e2\u06f2\u06f4"+
		"\u06fa\u0702\u0706\u070d\u0713\u0716\u0718\u0723\u0727\u072a\u0734\u073f"+
		"\u0747\u074b\u075b\u0762\u0769\u076e\u0772\u077f\u0785\u0787\u0793\u0796"+
		"\u07ab\u07b0\u07b7\u07bc\u07c3\u07c5\u07cc\u07d7\u07dc\u07de\u07e5\u07e7"+
		"\u07ef\u07f1\u07f8\u07fa\u07fe\u0802\u080a\u0810\u0813\u0815\u0817\u081c"+
		"\u081f\u0823\u0828\u082d\u0835\u083f\u0843\u084c\u0851\u0859\u0866\u0869"+
		"\u0876\u0882\u088a\u0891\u0899\u08a3\u08af\u08b6\u08c1\u08c5\u08cc\u08cf"+
		"\u08d4\u08d8\u08df\u08e4\u08e7\u08e9\u08f3\u08f7\u08fa\u08fd\u0901\u0908"+
		"\u090c\u090f\u0912\u0915\u0922\u092c\u0930\u0934\u0939\u093b\u0940\u0942"+
		"\u0945\u0949\u094c\u094f\u0957\u095b\u095d\u096d\u0972\u0976\u0978\u0987"+
		"\u098a\u0994\u0997\u09ab\u09bd\u09c1\u09c5\u09cc\u09cf\u09ec\u0a0a\u0a0e"+
		"\u0a13\u0a18\u0a1f\u0a21\u0a26\u0a2b\u0a2f\u0a36\u0a44\u0a58\u0a66\u0a6f"+
		"\u0a89\u0a92\u0a98\u0aa3\u0aa6\u0aa9\u0ab2\u0ab8\u0abd\u0ac2\u0ac7\u0acc"+
		"\u0ad3\u0ad8\u0ae1\u0ae6\u0ae8\u0aec\u0af1\u0af9\u0b03\u0b0d\u0b12\u0b1f"+
		"\u0b39\u0b3c\u0b3f\u0b42\u0b4f\u0b59\u0b60\u0b6c\u0b72\u0b75\u0b79\u0b87"+
		"\u0b8c\u0b95\u0b9a\u0ba6\u0baa\u0bae\u0bb5\u0bb9\u0bbf\u0bc4\u0bca\u0bd2"+
		"\u0bd5\u0bd9\u0bf9\u0bff\u0c02\u0c07\u0c0b\u0c18\u0c1d\u0c22\u0c2b\u0c36"+
		"\u0c39\u0c3e\u0c43\u0c45\u0c49\u0c4f\u0c5a\u0c5f\u0c63\u0c6a\u0c7b\u0c81"+
		"\u0c8a\u0c8f\u0c9c\u0ca4\u0cb9\u0cbd\u0cc2\u0cca\u0cd7\u0d0f\u0d17\u0d20"+
		"\u0d2f\u0d33\u0d39\u0d40\u0d48\u0d4d\u0d56\u0d58\u0d5f\u0d63\u0d67\u0d72"+
		"\u0d76\u0d80\u0d85\u0d89\u0d90\u0d93\u0d9b\u0da0\u0da5\u0da7\u0daa\u0dae"+
		"\u0db4\u0db7\u0dba\u0dbf\u0dc1\u0dc5\u0dc8\u0dcb\u0dd4\u0de0\u0de2\u0de6"+
		"\u0df0\u0df3\u0df6\u0e0c\u0e16\u0e26\u0e2d\u0e3a\u0e3f\u0e4d\u0e56\u0e5c"+
		"\u0e62\u0e64\u0e6b\u0e70\u0e77\u0e7b\u0e85\u0e8c\u0e8e\u0e95\u0ead\u0ec1"+
		"\u0ecb\u0edd\u0f13\u0f23\u0f2b\u0f30\u0f42\u0f46\u0f4d\u0f4f\u0f56\u0f59"+
		"\u0f66\u0f77\u0f7a\u0f7d\u0f80\u0f8b\u0f92\u0f97\u0f9a\u0f9d\u0fa2\u0fa7"+
		"\u0fab\u0fb1\u0fbb\u0fc2\u0fc8\u0fcc\u0fd2\u0fd8\u0fdb\u0fe0\u0fe8\u0feb"+
		"\u0fef\u0ff7\u0ffb\u1003\u1006\u100a\u100f\u1021\u1024\u1028\u102d\u102f"+
		"\u1033\u1039\u1042\u104e\u1053\u105b\u106c\u1072\u1076\u107e\u1096\u109f"+
		"\u10a2\u10ad\u10b4\u10b9\u10bb\u10be\u10c2\u10c9\u10ce\u10d0\u10d7\u10dd"+
		"\u10e3\u10ec\u10f4\u10fd\u1102\u1105\u110d\u1114\u1119\u111b\u111e\u1124"+
		"\u112e\u1133\u1139\u113c\u114c\u1157\u115d\u1160\u1171\u1174\u1177\u117b"+
		"\u1186\u1190\u1196\u119a\u119d\u11a4\u11a6\u11aa\u11b2\u11b6\u11ba\u11bd"+
		"\u11c4\u11c6\u11ca\u11cf\u11d3\u11d8\u11dc\u11e0\u11e5\u11ea\u11f4\u11fc"+
		"\u120e\u1212\u1215\u1218\u121b\u121f\u1223\u1227\u122b\u122e\u1233\u1237"+
		"\u123a\u1249\u1250\u1256\u125a\u125e\u1263\u1267\u126a\u126d\u1270\u1273"+
		"\u1277\u127b\u127f\u1283\u1286\u1289\u128c\u1292\u1296\u1299\u129e\u12a3"+
		"\u12aa\u12b0\u12b8\u12c1\u12d3\u12db\u12e6\u12e9\u12ee\u12f3\u1300\u1307"+
		"\u130c\u1315\u131b\u131f\u1323\u132b\u1337\u133a\u133f\u1344\u1348\u134d"+
		"\u1350\u1355\u135d\u1361\u1364\u1369\u1376\u137d\u1382\u1387\u138e\u1390"+
		"\u1399\u139c\u13a2\u13a5\u13b3\u13c2\u13d1\u13d6\u13d9\u13df\u13e1\u13ec"+
		"\u13f5\u13fd\u1402\u140c\u1415\u141f\u1426\u1439\u143b\u1446\u1450\u1453"+
		"\u145a\u145f\u1464\u146e\u1472\u1475\u1479\u147d\u1480\u1484\u148a\u148e"+
		"\u1494\u14a1\u14a9\u14ac\u14b0\u14c0\u14c5\u14c9\u14ce\u14d3\u14d8\u14df"+
		"\u14f0\u14f7\u14fb\u1500\u1505\u1507\u150b\u1512\u1515\u151a\u151e\u1524"+
		"\u152a\u152d\u1530\u1534\u1537\u153b\u153e\u1542\u1548\u154d\u1551\u1556"+
		"\u155a\u1563\u1568\u156a\u1587\u1591\u159a\u15a2\u15af\u15c5\u15c9\u15d1"+
		"\u15d7\u15dc\u15e2\u15ee\u1602\u160c\u160f\u1616\u161a\u161f\u1625\u162b"+
		"\u1636\u1638\u1640\u1648\u1652\u1667\u1674\u167a\u1680\u1687\u1689\u1694"+
		"\u169e\u16b1\u16be\u16c3\u16cb\u16d4\u16d8\u16e6\u16ed\u16f1\u16f3\u16fc"+
		"\u16ff\u1704\u1706\u170e\u1711\u1716\u1723\u172f\u1732\u1735\u173b\u1747"+
		"\u174c\u1750\u1754\u1758\u175a\u175f\u1766\u176b\u176d\u1778\u177d\u1781"+
		"\u1795\u179f\u17ab\u17b1\u17b5\u17ba\u17c0\u17ca\u17d0\u17d4\u17df\u17eb"+
		"\u17f3\u17f5\u17ff\u1804\u1824\u182a\u1830\u1835\u183d\u1842\u1848\u184c"+
		"\u184f\u1852\u1856\u185c\u1868\u186b\u186e\u1871\u187c\u1885\u1887\u188e"+
		"\u1893\u1898\u189d\u18a1\u18a4\u18af\u18b1\u18b8\u18ba\u18c3\u18c9\u18d0"+
		"\u18d5\u18da\u18de\u18e8\u18f0\u18f3\u18f8\u18fa\u18fd\u1903\u1908\u190f"+
		"\u1919\u191e\u1922\u1925\u1931\u1936\u193b\u1941\u1948\u194b\u1956\u195b"+
		"\u195d\u1960\u1963\u196b\u196e\u1972\u1975\u1979\u1986\u1989\u198d\u1991"+
		"\u1994\u199b\u19a2\u19a6\u19a9\u19b2\u19b5\u19c0\u19c2\u19ca\u19cc\u19d7"+
		"\u19d9\u19e0\u19e2\u19e6\u19ea\u19ed\u19f7\u19fd\u19ff\u1a02\u1a08\u1a0d"+
		"\u1a12\u1a1b\u1a21\u1a23\u1a26\u1a2e\u1a34\u1a38\u1a3e\u1a41\u1a4a\u1a4f"+
		"\u1a51\u1a53\u1a56\u1a5f\u1a64\u1a6f\u1a7d\u1a87\u1a8d\u1a95\u1a9b\u1aa0"+
		"\u1aa4\u1ab2\u1ab7\u1aba\u1abd\u1ac3\u1ac9\u1ad0\u1ad5\u1ad8\u1add\u1ae2"+
		"\u1ae5\u1ae9\u1af1\u1af8\u1afc\u1b01\u1b0d\u1b12\u1b14\u1b17\u1b1c\u1b20"+
		"\u1b23\u1b26\u1b2e\u1b31\u1b38\u1b3a\u1b3e\u1b41\u1b45\u1b49\u1b4c\u1b4f"+
		"\u1b57\u1b60\u1b63\u1b6a\u1b6c\u1b70\u1b76\u1b7e\u1b84\u1b89\u1b8e\u1b92"+
		"\u1b97\u1b99\u1b9f\u1ba3\u1baa\u1baf\u1bb2\u1bb9\u1bc0\u1bc2\u1bca\u1bcc"+
		"\u1bd2\u1bd5\u1bd8\u1bdd\u1be1\u1beb\u1bf1\u1bf9\u1bfd\u1c01\u1c05\u1c0b"+
		"\u1c0e\u1c11\u1c18\u1c1c\u1c26\u1c32\u1c3c\u1c43\u1c4f\u1c56\u1c5e\u1c62"+
		"\u1c66\u1c6e\u1c7d\u1c82\u1c84\u1c8d\u1c90\u1c94\u1c97\u1c9b\u1ca8\u1cab"+
		"\u1caf\u1cb2\u1cb7\u1cbe\u1cc3\u1ccb\u1cd0\u1cd3\u1ce0\u1ce5\u1ce9\u1cec"+
		"\u1cf1\u1cf4\u1cf9\u1cfe\u1d05\u1d08\u1d0b\u1d0f\u1d16\u1d19\u1d1c\u1d20"+
		"\u1d24\u1d28\u1d2d\u1d33\u1d35\u1d44\u1d4b\u1d53\u1d56\u1d59\u1d60\u1d64"+
		"\u1d68\u1d6a\u1d72\u1d79\u1d8a\u1d8f\u1d95\u1d9b\u1da3\u1db1\u1db6\u1dbd"+
		"\u1dc5\u1dcd\u1dd1\u1dda\u1de1\u1de6\u1deb";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2,
			_serializedATNSegment3
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}